type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/6,pekko,1434620403,6,Upgrade Scala 3.x versions,pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-03T12:57:41Z,2023-05-24T15:37:58Z,"Change to
* Scala 2.3.10 due to CVE - https://www.cvedetails.com/cve/CVE-2022-36944/
* Scala 3.2.0 -- Scala team recommend using latest Scala 3 version - https://www.scala-lang.org/blog/2022/08/17/long-term-compatibility-plans.html
* Scala 3.3.0 - the first LTS version of Scala 3 should be out soon
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnQJq,pekko,1302135402,6,NA,alexandru,11753,Alexandru Nedelcu,,NA,2022-11-03T13:42:54Z,2022-11-03T13:42:54Z,"Bumping Scala 3's minor version isn't necessarily a good thing, some care is needed.

If a project is using Scala `3.1.3`, bumping the Pekko dependency to a new version that uses Scala `3.2.0`, also forces the project on Scala `3.2.0` — backwards compatibility is provided, but not forward compatibility. In that sense, Scala 3 upgrades behave like libraries. This is unlike upgrading from Scala 2.3.9 to Scala 2.3.10.

And care is needed because a compiler is unlike a library, as it may have bugs that don't manifest in the Pekko library's codebase, but that impacts downstream projects.

I think right now an upgrade to Scala 3.2.0 is totally fine, given the state of the Scala 3 adoption, and that of Pekko, but for the future, it's good to keep in mind that such upgrades basically force the new Scala version on downstream users, and that may not be good for Scala versions that have issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnQJq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnUZD,pekko,1302152771,6,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-03T13:56:12Z,2022-11-03T13:56:12Z,"@alexandru thanks for the comments. 

Picking out comments from the article linked above, just in case.

> You shouldn’t be afraid of updating it. Bumping the patch version (e.g. 3.1.2 -> 3.1.3) is a no-brainer. Bumping the minor version (e.g. 3.1.3 -> 3.2.0) requires the same considerations as changing the minor version of any other dependency, yet is generally advisable.

So, upgrading to 3.2.0 is not zero risk but it pretty low on the scale of these things.

I'm not going to do anything with this issue yet and it is probably best to discuss this item on the dev mailing list before proceeding to the PR stage.








","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnUZD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnUu6,pekko,1302154170,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-03T13:57:22Z,2022-11-03T13:57:22Z,I think the CVE may work for a Pekko release of 1.0.x  pending on what we ultimately decide goes into 1.0.x (since its a CVE) but 3.2.0 makes sense for 1.1.x,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnUu6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NncQ4,pekko,1302185016,6,NA,alexandru,11753,Alexandru Nedelcu,,NA,2022-11-03T14:19:08Z,2022-11-03T14:19:08Z,"@pjfanning 
> upgrading to 3.2.0 is not zero risk but it pretty low on the scale of these things.

I kind of disagree with their blog post, as it's not low risk, because new compiler versions can introduce source-level regressions. The difference between a library and the compiler, is that libraries are dynamically linked, at runtime. For this reason, a tranzitive dependency cannot break your source code, but compiler update can.

For example, here's an issue that broke my code when upgrading from `3.0.x` to `3.1.2`, and it was close to be considered a feature: https://github.com/lampepfl/dotty/issues/15160

Downstream users may be able to fix such instances, but if an upgrade breaks source compatibility, then in my view that's a major version, not a minor one (according to semver).

---

Again, 3.2.0 is fine for now, all I'm saying is that we can't be very relaxed about upgrading these versions. I would feel better if we let new versions stabilize a little.

And I also don't think we need further discussions, it's a simple update IMO, and for now the Scala 3 adoption of Akka is probably very low anyway, so might as well update it now, rather than later. But it's something to keep in mind.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NncQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnsnK,pekko,1302251978,6,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-03T15:06:04Z,2022-11-03T15:06:04Z,"I would argue against using 3.2.0 as it forces downstream users/projects to also upgrade to 3.2.0.
Last time I checked, Scala 3.1 couldn't read TASTy files of 3.2 and failed to compile using that library.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NnsnK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NoiiA,pekko,1302472832,6,NA,MateuszKubuszok,1900121,Mateusz Kubuszok,,NA,2022-11-03T17:53:38Z,2022-11-03T17:53:38Z,"For now Scala 3 adoption is rather low (among other reasons - Akka HTTP is not released for _any_ version of Scala 3, and apparently it uses Scala 2 macros), so these updates wouldn't affect many people. Surely none that use Akka HTTP and would like to migrate to Pekko.

According to the blog post - by the end of the year the compiler team want to release the first LTS version of Scala 3 (3.3). So the current situation is rather a temporary flux period before LTS kicks in. If 3.3 would be supported for at least 2 years as claimed, it would make sense to release Pekko for 3.3, stay on it until next LTS is adopted and then move on to next LTS.

IMHO, moving fast _for now_ make sense. For many libraries blocker to update are macros and I notices that some important features stopped being `@experimental` only in 3.2.0, which would block importing certain functionalities before this version. And these libraries might slow down adoption for whole community, so I would expect for it to take off around the time that the compiler team want to release LTS, or even later.

Once LTS program goes live this whole issue with upgrading should be solved. Pekko can just use the current LTS and maybe wait a bit when new LTS is released. That should give community enough time to bump their versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NoiiA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nomov,pekko,1302489647,6,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-03T18:07:27Z,2022-11-03T18:07:27Z,"Many things like IDE support are still very lacky for Scala 3, but we also don’t gain much by going to the newest Scala version. As long as Pekko supports Scala 2.13, we’re very limited in what we can use without having to resort to splitting source files by scala version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nomov/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5No-vm,pekko,1302588390,6,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-03T19:45:47Z,2022-11-03T19:45:47Z,"Thanks @MateuszKubuszok for the detailed status update. akka-http is not yet released with Scala 3 support but the core akka libs do support Scala 3.

After I do some experimentation, I might look at adding Pekko to the [Dotty Community Build](https://github.com/lampepfl/dotty/tree/main/community-build).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5No-vm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpEeo,pekko,1302611880,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-03T20:10:03Z,2022-11-03T20:10:03Z,"> According to the blog post - by the end of the year the compiler team want to release the first LTS version of Scala 3 (3.3). So the current situation is rather a temporary flux period before LTS kicks in. If 3.3 would be supported for at least 2 years as claimed, it would make sense to release Pekko for 3.3, stay on it until next LTS is adopted and then move on to next LTS.

If this is the case then at least to me it seems like doing the first release with Scala 3.3 is the best option? In terms of both it being an LTS and maybe in terms of timing (i.e. by the time pekko-http is ready to be released). I wasn't aware that Scala 3 basically has different stability guarantees, it sounds like there is a risk that we may end up having to having a matrix if we don't pick a good Scala3 version and a lot of people end up depending on it?

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpEeo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpGpW,pekko,1302620758,6,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-03T20:20:05Z,2022-11-03T20:20:05Z,Scala 3.1.3 would be the safest bet for now. Anyone on Scala 3.1 or 3.2 could use it. As long as we cross compile for Scala 2.13 we can't use many Scala 3 specific features anyway.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpGpW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpaZZ,pekko,1302701657,6,NA,MateuszKubuszok,1900121,Mateusz Kubuszok,,NA,2022-11-03T21:40:10Z,2022-11-03T21:40:10Z,"> I wasn't aware that Scala 3 basically has different stability guarantees, it sounds like there is a risk that we may end up having to having a matrix if we don't pick a good Scala3 version and a lot of people end up depending on it?

Scala 2 used `epoch.major.minor` version convention. Scala 3 has `major.minor.patch`.

So there is no 3.0/3.1/3.2/etc cross-compilation - the assumption is that:

* you can compile against the same minor version with backward- and forward-compatibility: 3.1.3 dependency against 3.1.0 code, 3.0.0 dependency against 3.0.1 code, etc
* within the same major version you always have backward-compatibility: 3.1.3 dependency can be used in 3.1.3 project, but also 3.2.0 project and in future against 3.3.0 project

It means that you should use the lowest version that you can get away with to not force people to update their build unnecessarily. If it would be e.g. 3.1.3 then there is a case to use 3.1.3 for you project and not update it.

At the same time, before 3.3 there is no LTS version planned. Meaning that if there are bugs, regressions, security vulnerabilities - they won't be backported to versions prior to 3.3, once 3.3 is released. If these issues appear in code compiled with e.g. 3.1.3 when 3.3 will be already released, there won't be any new release for 3.1 (or 3.2) fixing them. It all mirrors the JVM approach where you have LTS for Java 11 and Java 17 but intermediate versions are EOLed rather fast, and while you are encouraged to test with them, you are not given any long term support guarantees for them.

So while thing will be much clearer after the release of 3.3, right now we are living in the period of versions that can be used for any future development but will be supported for at best next few months (post suggest 3.3 release at ""late 2022"").

Akka core might get away with 3.1.3 or earlier.

Akka HTTP from what I understand relies on parboiled2 for its macros - 2.4.1 was compiled with 3.2.1 and 2.4.0 was compiled with 3.1.1, so it might require some investigation.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NpaZZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nq9PS,pekko,1303106514,6,NA,alexandru,11753,Alexandru Nedelcu,,NA,2022-11-04T08:21:11Z,2022-11-04T08:21:11Z,"@nvollmar 
> Many things like IDE support are still very lacky for Scala 3, but we also don’t gain much by going to the newest Scala version. As long as Pekko supports Scala 2.13, we’re very limited in what we can use without having to resort to splitting source files by scala version.

Just to set some expectations, in my experience, it is impossible to target both Scala 2.13 and Scala 3 without resorting to source files specific per version. And the setup can get quite complicated. Which is fine, at least we can. Only the simplest of libraries can get away with only shared code that compiles in both.

@MateuszKubuszok 
> Akka HTTP from what I understand relies on parboiled2 for its macros - 2.4.1 was compiled with 3.2.1 and 2.4.0 was compiled with 3.1.1, so it might require some investigation.

I was just thinking of this — we might not have a choice, but update, alongside our dependencies. For example, `akka-persistence` depends on [jackson-module-scala](https://github.com/FasterXML/jackson-module-scala), and the latest version also depends on Scala 3.2.0.

I think this idea is good — try to depend on the 3.3 LTS, when it gets released, and until then, depend on intermediary versions 👍","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nq9PS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NrQq3,pekko,1303186103,6,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2022-11-04T09:47:01Z,2022-11-04T09:47:01Z,"On Fri, Nov 4, 2022 at 9:21 AM Alexandru Nedelcu ***@***.***>
wrote:

> @MateuszKubuszok <https://github.com/MateuszKubuszok>
>
> Akka HTTP from what I understand relies on parboiled2 for its macros -
> 2.4.1 was compiled with 3.2.1 and 2.4.0 was compiled with 3.1.1, so it
> might require some investigation.
>
> I was just thinking of this — we might not have a choice, but update,
> alongside our dependencies. For example, akka-persistence depends on
> jackson-module-scala <https://github.com/FasterXML/jackson-module-scala>,
> and the latest version also depends on Scala 3.2.0.
>
> I think this idea is good — try to depend on the 3.3 LTS, when it gets
> released, and until then, depend on intermediary versions 👍
>
>
This is a good point. Another point is that Akka's Scala 3 support has so
far been experimental and incomplete so expectations on compatibility are
low. Until we make the first release, I think we should grant ourselves the
flexibility of tracking the latest version of Scala 3. Not least, because
Scala 3 has been somewhat unstable and we hit many regressions during the
akka-http migration so we might have to take whatever works...

Incidentally, Akka HTTP right now contains a copy of parboiled2 in its
sources (with some slight additions). This decision was originally made on
the grounds that Akka should not have many dependencies on Scala libraries,
so it can be released quickly after a new (incompatible) Scala versions
comes up. This point does not seem as important as before, so I'd suggest
to move upstream parboiled2 when possible.

I created https://github.com/apache/incubator-pekko-http/issues/1 to track
this.

> Message ID: ***@***.***>
>
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NrQq3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YF2yD,pekko,1477930115,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-21T14:22:25Z,2023-03-21T14:22:25Z,"So a PR is open that updates to the latest Scala 2.12 and 2.13 versions (see https://github.com/apache/incubator-pekko/pull/258). Its still open on what to do with Scala 3, i.e. should we just target Scala 3.3 LTS which is going to come out at any point now or Scala 3.2?

My preference is to target Scala 3.3 LTS since by the time Pekko makes its first release its likely to have gained adoption in the Scala ecosystem, and by nature of it being an Scala 3.3 LTS it will received backports for critical bugs from future versions of Scala that will just bump the `patch` version (in other words we can safely bump Scala 3.3.x versions without worrying about any kind of compatibility problems). @MateuszKubuszok can you confirm this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YF2yD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YF4kU,pekko,1477937428,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-21T14:26:42Z,2023-03-21T14:26:42Z,"@pjfanning I am thinking of closing this ticket and making a specific one for Scala 3 updates since its a completely different kettle of fish with its own set of problems, wdyt?

Or we can just rename this one specifically for Scala 3 once https://github.com/apache/incubator-pekko/pull/258 is merged so we preserve the discussion.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YF4kU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMayo,pekko,1479650472,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-22T14:19:34Z,2023-03-22T14:19:34Z,"So since we have already updated the Scala 2.12/2.13 to their latest, I am renaming this issue to just deal with Scala 3 (also to preserve the conversation).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMayo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YTUJa,pekko,1481458266,6,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-23T16:01:00Z,2023-03-23T16:01:00Z,"I think we can keep it as 3.1.x in the pekko 1.0.x release, and then upgrade to 3.2.x in pekko 1.1.0? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YTUJa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YTYNi,pekko,1481474914,6,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-23T16:10:16Z,2023-03-23T16:10:16Z,"So far, Scala 3.1 seems to be the preference. This issue has not been included in the v1.0.0 milestone.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YTYNi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXAwJ,pekko,1482427401,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-24T08:27:46Z,2023-03-24T08:27:46Z,"> So far, Scala 3.1 seems to be the preference. This issue has not been included in the v1.0.0 milestone.

There hasn't been a formal vote but from what I can see there doesn't seem to be a clear direction either way. I spoke about this with @jrudolph and he summarised this conundrum when using Scala 3.3 in a very succinct way,

> It's a promise for the future not for the past

My argument here is that when it comes to Scala 3, Akka doesn't really have a ""past"". By that I mean I seriously doubt that there is any significant user base that is actually using Scala 3 (and we can even quantify this with download stats). I strongly agree with what https://github.com/apache/incubator-pekko/issues/6#issuecomment-1302472832 said here, there isn't any real point in sticking with an old version of Scala 3 if barely anyone is using Akka + Scala 3.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXAwJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXcgJ,pekko,1482541065,6,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-03-24T10:00:58Z,2023-03-24T10:00:58Z,"I guess we shouldn't overthink it. Ultimately, it is reasonable to move to 3.3 because it will be the best maintained version for a long while. For now there is no 3.3 out, so there is no action needed or possible. AFAIK there are no known problems with using the older versions for now, so no need for functional reasons as well. There will be no full non-experimental Scala 3 support for Pekko 1.0.0 anyway, so I'd say let's reconsider for 1.1.0 and see how stable Scala 3.3 has become until then.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXcgJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXihq,pekko,1482565738,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-24T10:18:13Z,2023-03-24T10:18:13Z,"Made a discussion on mailing lis https://lists.apache.org/thread/mk88ybzx51k7x7x102drtbzh6l68k0xm.

I do agree that wait and see is a mature stance for now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YXihq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Yh_EE,pekko,1485304068,6,NA,MateuszKubuszok,1900121,Mateusz Kubuszok,,NA,2023-03-27T15:12:07Z,2023-03-27T15:12:07Z,"As far as I can tell from talking to the compiler team developers, Scala 3.3 will not introduce any feature that was absent in 3.2. Some APIs marked as experimental will become stable and that's it - so 3.3 will be a stabilization of the current API, but with a guarantee that it will not be touched for a few years.

From what I understand 3.3 is relatively near, so it makes sense to target it. Versions older than that like 3.1, or 3.0... they were basically a public beta, named otherwise to encourage any adoption and feedback loop. I don't see any point in using them, since they offer no:

 * bugfixes
 * stability
 * any other form of support

especially if Pekko intends to be more on a stable-side than bleeding edge-side of development.

I'd say of you'll pick LTS you could always ping compiler team members for advice whereas any issue with non-LTS Scala 3 could be shrug off as ""EOL, not supported anymore"".

CC @Kordyjan - Scala 3 compiler team lead at Virtus Lab.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Yh_EE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YiBe_,pekko,1485313983,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-27T15:15:42Z,2023-03-27T15:15:42Z,"> As far as I can tell from talking to the compiler team developers, Scala 3.3 will not introduce any feature that was absent in 3.2. Some APIs marked as experimental will become stable and that's it - so 3.3 will be a stabilization of the current API, but with a guarantee that it will not be touched for a few years.

Judging from https://github.com/apache/incubator-pekko/pull/273 where we were forced to update to Scala 3.2 due to latest jackson-databind only targetting Scala 3.2, I can confirm that most (if not all?) of the changes were put into Scala 3.2, not 3.3 (I already made a PR against Scala 3.3 at https://github.com/apache/incubator-pekko/pull/270 just to see how painful it is, and it seems really tame).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YiBe_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YpelJ,pekko,1487268169,6,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-28T16:44:41Z,2023-03-28T16:44:41Z,"https://contributors.scala-lang.org/t/stable-presentation-compiler-api/6139
Some support only starts with 3.3.0","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YpelJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YqyiZ,pekko,1487612057,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-28T21:23:42Z,2023-03-28T21:23:42Z,"> https://contributors.scala-lang.org/t/stable-presentation-compiler-api/6139 Some support only starts with 3.3.0

Indeed that would be another advantage, especially for metals users since it would mean that editors which use metals will be able to work with Pekko for a long amount of time when it comes to Scala 3 (as described in the link the alternative which is what happens today is that metals only supports the latest x versions of a Scala epoch/major due to the internal compiler api's being unstable)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YqyiZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZKu_c,pekko,1495986140,6,NA,Kordyjan,11855167,Paweł Marks,,NA,2023-04-04T13:33:34Z,2023-04-04T13:33:34Z,"Some thoughts after reading the thread.

### Source compatibility and minor version

First, I wanted to state that source compatibility has nothing to do with adding new features or naming a release as ""minor"". This may be counterintuitive, but upgrading from 3.2.1 to 3.2.2 has the same probability of breaking your code as upgrading from 3.2.2 to 3.3.0. And contrary to what many believe, that probability is small.

Let me show you where source incompatibilities come from to see that better. I can think of three distinct sources of such incompatibilities:

1. Changes to the type inference. This is the most common reason for problems. The entire inference system is interconnected, and changing it to work as expected in one example can cause other, more complex examples to start behaving unexpectedly. This is made worse by the fact that there may be no distinction between what is expected and what is not for complex cases, as different people can expect different types to be inferred. The good thing is, usually, to fix source incompatibility there, you only need to add explicit type ascription.
2. Bugfixes. Sometimes the compiler has bugs causing an acceptance of incorrect code. For example, inline parameters are not stable references, but all compiler versions up to 3.2.2 were, by mistake, treating them as such. Many libraries were relying on that fact, and from their point of view, 3.3.0 will introduce a new source incompatibility, even though it will only prevent them from writing potentially unsound code. We do what we can to be clear about those changes in the release announcements and to offer possible workarounds.
3. Intentional changes. I can only recall a single case of that happening since 3.0.0: [this PR](https://github.com/lampepfl/dotty/pull/14840).  It solved one infuriating source of problems, changing the meaning of a very specific, niche code. Before we do anything like that again, we will ensure that it has a negligible impact on open-source projects.
This ""checking of impact"" takes the form of building the entire Scala 3 open-source ecosystem with our Open Community Build. You can read more about it [here](https://virtuslab.com/blog/prevent-scala3-compiler-regressions-community-build/) and [there](https://virtuslab.com/blog/how-to-be-a-part-of-scalas-open-community-build/). Thanks to that, we will know about any real-life source incompatibility in advance and, when possible, take steps to ensure that it will not be included in a stable release.

I don't believe there is a reason to fear source-breaking changes now, as they are much less frequent than in the past and communicated in advance. Also, they can happen both in a patch and in minor releases.

### The language version as a dependency

The notion that upgrading the compiler version is much more dangerous and unpredictable than upgrading the version of the library your project depends on stems from the fact that Scala 2 was not following semantic versioning. This is no longer the case.
Moreover, there is an argument that bugs in the compiler may not manifest in your project but may be visible in downstream projects. While this is true, it is precisely the same as with the library you and your downstream projects depend on. It can introduce bugs that are not visible to you, but people depending on your library can start to have problems because you upgraded your dependency. The eviction mechanism kicks in, and now they unknowingly use a newer (bugged) version of a dependency. In the case of the compiler upgrade, there is no eviction, so every change needs to be made explicitly. This means that bumping the minor version of the compiler is even safer than bumping the minor version of any other library.

### Older versions and stability

Sometimes, I see claims that older versions can be more dependable because they are more mature. This could be a case if they received any updates. Bugs found in 3.1.3 will never be fixed in any future 3.1 release because there will be no future 3.1 releases. Some of them were, however, fixed in 3.2.0. There was no significant redesign or rewrite between 3.1.3 and 3.2.0. This version could have been named 3.1.4 if it hadn't introduced any forward-incompatible (but still backward-compatible) changes. This means that 3.2.0 was more mature than 3.1.3, even though Scala 3.1 was there for a year, and Scala 3.2 was a new thing.

In terms of stability and correctness, the newer version of the compiler will always be better than the older one. Of course, we need to keep in mind that we may change the minimum required version of the compiler for downstream projects, but this is the same consideration as with any other dependency.

### What about LTS?

The LTS line (that is 3.3) will be different than previous versions. Even though we will release 3.4 soon, 3.3 will still receive backward and forward-compatible patch releases for at least 3 years, possibly longer. Of course, we will keep our guarantee that all projects compiled with any version of 3.3 can be used as a dependency for projects compiled with any version of the compiler newer than and including 3.3.0.

This is why I think the newest 3.3 version at the moment of release would be the best compiler version for Pekko. For the time being, I encourage you to use 3.3.0-RC3 for development and, later, 3.3.0-RC4 - which comes out next week.

3.3.0-RC3 is stable. lichess.org is even using it in production. We need another RC because the linter still has some unsolved problems. Even though we have been pushing this release a few times already, we are confident that the stable 3.3.0 will be out before the end of April.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZKu_c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZLOHw,pekko,1496113648,6,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-04-04T14:52:47Z,2023-04-04T14:52:47Z,"Thanks for taking the time to write this comprehensive response, @Kordyjan!

A few comments:

> I don't believe there is a reason to fear source-breaking changes now, as they are much less frequent than in the past

That's probably true especially in the future. In the past, there were many (mostly minor) source compatibility issues between Scala 3 versions, so I am somewhat careful about these statements.

> In the case of the compiler upgrade, there is no eviction, so every change needs to be made explicitly.

You can see that both ways. No eviction means, a user of a library compiled with a newer version will instead get compiler errors like these:

```
class file ... is broken, reading aborted with class dotty.tools.tasty.UnpickleException
[error] TASTy signature has wrong version.
[error]  expected: {majorVersion: 28, minorVersion: 1}
[error]  found   : {majorVersion: 28, minorVersion: 2}
[error] 
[error] This TASTy file was produced by a more recent, forwards incompatible release.
[error] To read this TASTy file, please upgrade your tooling.
[error] The TASTy file was produced by Scala 3.2.1.
```

That's not necessarily better than eviction, especially when you have multiple dependencies built with different versions of the Scala compiler and then need to figure out where to go based on those error messages.

> The LTS line (that is 3.3)

I would imagine that all these problems mostly go away when everyone adopts 3.3.x. We will see if the situation will be vastly better than with Scala 2. At least you will be able to use ""old"" 3.3 artifacts when you start to adopt 3.4 for any of the new features. Realistically, library authors will have to stay on 3.3 for as long as possible.

(Besides, note, how the compatibility benefits of the LTS version are not a technical feature but a feature of the promise of stability and its execution.)

Supporting 3.4 or later features in parts of your codebase will be somewhat hard. We will see how that will play out when the ecosystem has to move to the next LTS version after 3.3. With the current cross-versioning scheme (`_3`) that will mix partly incompatible versions into the same namespace, I can foresee some issues... Fortunately, that will be a long time away.

> lichess.org is even using it in production. We need another RC because the linter still has some unsolved problems.

It's crucial to understand that an application has vastly different requirements than a library. You can always run the test suite for your application to ensure that your application runs fine on a new version. Library authors cannot completely predict how their library is used and what constraints and problems the users will have. Therefore, the hard-learned conclusion is to be very conservative about adopting new versions of any transitive dependency and not pull transitive dependencies to higher versions than necessary for minor reasons.

In summary, I agree 3.3 LTS is great and we should definitely make sure that our binaries work with it and eventually move to it ourselves.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZLOHw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZL47_,pekko,1496289023,6,NA,Kordyjan,11855167,Paweł Marks,,NA,2023-04-04T16:44:24Z,2023-04-04T16:44:24Z,"> That's not necessarily better than eviction, especially when you have multiple dependencies built with different versions of the Scala compiler and then need to figure out where to go based on those error messages.

I agree that the error message needs some improvements. It should only contain a path to the offending file, the classpath entry from which the file comes, the current version of the compiler, and the version of the compiler that was used to produce the offending file. The details about tasty signatures should be hidden behind the `--explain` flag. I'm, of course, open to any suggestion on how it can be further improved.

> It's crucial to understand that an application has vastly different requirements than a library.

I wasn't clear, but I intended to suggest that if Pekko is to be released on 3.3.0, it is a good idea to frequently and early test it using 3.3.0-RCx. That would allow catching potential problems early when there is still some possibility they are fixed before the stable release. The lichess bit was only a curiosity, showing that 3.3.0-RC3 can be trusted and there is nothing inherently wrong with it (some may think that way, seeing how much work it takes to prepare RC4). 

> Fortunately, that will be a long time away.

It definitely will be a long time away. 3.3 LTS will receive patch updates for at least a year after the release of the next LTS. We will see how hard the maintenance will be, but I'm optimistic and think that the guaranteed year is an understatement.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZL47_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZL8qz,pekko,1496304307,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-04T16:57:04Z,2023-04-04T16:57:04Z,"@Kordyjan 

> This is why I think the newest 3.3 version at the moment of release would be the best compiler version for Pekko. For the time being, I encourage you to use 3.3.0-RC3 for development and, later, 3.3.0-RC4 - which comes out next week.

Incase you may have missed this, we already have a PR for Pekko 3.3.0-RC3 and so far our CI hasn't picked up anything (you can see it here https://github.com/apache/incubator-pekko/pull/270). Note that the Scala 3 specific changes in that PR are due to changes in Scala 3.2, not 3.3.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZL8qz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/6,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dEOx6,pekko,1561390202,6,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T15:36:54Z,2023-05-24T15:36:54Z,Closing this as done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dEOx6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/7,https://api.github.com/repos/apache/pekko/issues/7,pekko,1434628084,7,Upgrade Jackson version (2.14.3),pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-03T13:03:16Z,2023-06-13T13:17:04Z,"There is a performance issue for Java users when using jackson-module-scala v2.13.x. Not too many users have reported issues but it might be best to update any v2.13 dependency to v2.14.1 (or newer version). We can keep the v2.11.4 dependency for Scala 2.x. We can upgrade to jackson v2.14.x for all Scala versions after Pekko's initial release.

https://github.com/FasterXML/jackson-module-scala/issues/576



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/7,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YgUgT,pekko,1484867603,7,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-03-27T10:08:53Z,2023-03-27T10:08:53Z,"Actually, Jackson is a huge problem, since it leads to all kinds of compatibility problems in downstream projects.

https://github.com/apache/incubator-pekko-projection/pull/19 shows a problem where we probably cannot release a 1.0.0 of pekko-projection without upgrading Jackson everywhere (i.e. we can release it but it won't work with pekko-persistence-cassandra which might be one of the main combination that people are using). The reason is that the last OS version of akka-projection is built against an old version of alpakka-cassandra (2.0.1) that we don't intend to support (pekko-connectors is based on alpakka 3).

IMO we should under no circumstances stay on Jackson 2.11 which is not supported any more and has all kinds of published security issues that will be immediately flagged for users. The question would still be which version to use instead (2.12, 2.13, or 2.14). This is hard to find out because so many potential combinations of subprojects need to be considered. Given the history of problems with Jackson, I would recommend going to the latest version (2.14) because that will hold up for the longest time.

Updating the version here will mean that we might pull up Jackson for our users. I consider that a much smaller problem (since there will be all kinds of challenges users might have while updating to Pekko) than staying on the old and broken version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YgUgT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/7,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YgZaY,pekko,1484887704,7,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-27T10:20:05Z,2023-03-27T10:20:05Z,"Can't we downgrade the cassandra driver - to one that uses Jackson 2.11?

Jackson 2.12.7.1 has no CVEs if we want to upgrade but not go all the way to Jackson 2.14. Jackson 2.15 is out soon but that introduces a [StreamReadConstraints](https://javadoc.io/static/com.fasterxml.jackson.core/jackson-core/2.15.0-rc1/com/fasterxml/jackson/core/StreamReadConstraints.html) setting that defaults to high limits but not unlimited values so we would probably need to add settings in reference.conf that allow users to choose higher limits.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YgZaY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/7,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ygytm,pekko,1484991334,7,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-27T11:40:24Z,2023-03-27T11:40:24Z,https://github.com/apache/incubator-pekko-projection/pull/19#pullrequestreview-1358936222 is relevant,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ygytm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/7,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aH66C,pekko,1512025730,7,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T20:18:46Z,2023-04-17T20:18:46Z,this is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aH66C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/10,https://api.github.com/repos/apache/pekko/issues/10,pekko,1435751883,10,Update templates for pull requests,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2022-11-04T08:56:15Z,2022-11-05T22:17:00Z,"We still have the old Akka for templates when issues/pull requests are made (see https://github.com/apache/incubator-pekko/tree/main/.github/ISSUE_TEMPLATE), should remove/replace them as necessary.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/10,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NrSVD,pekko,1303192899,10,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2022-11-04T09:54:02Z,2022-11-04T09:54:02Z,"This seems easy to me, just replace repo name and urls?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NrSVD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/10,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nrgq9,pekko,1303251645,10,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-04T10:49:30Z,2022-11-04T10:49:30Z,We may want to improve/change the templates later but initially I see no problem in just replacing repo name and urls so its not mentioning Akka or its repos.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nrgq9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/10,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nw2eR,pekko,1304651665,10,NA,danischroeter,6125533,,,NA,2022-11-05T22:16:59Z,2022-11-05T22:16:59Z,Resolved with #14,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nw2eR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/11,https://api.github.com/repos/apache/pekko/issues/11,pekko,1435755238,11,Renaming the akka package,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2022-11-04T08:59:27Z,2023-01-05T17:58:15Z,"We need to rename the package from `akka` to either `pekko` or `org.apache.pekko` (this is still being decided). One thing to note is that this will break some tests, i.e. https://github.com/apache/incubator-pekko/blob/6680c47dcc2305906a44d7794081682211d7ee0b/akka-actor-tests/src/test/scala/akka/util/ByteStringSpec.scala#L983-L995 is dependant on the fully qualified class name so it will also need to be updated when the package changes (there may be other examples of this as well).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/11,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NtK9C,pekko,1303686978,11,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-04T14:57:35Z,2022-11-04T14:57:35Z,"I could be wrong but the mima checks for binary compatibility will likely be meaningless once we change the package names. Maybe we should be pre-emptive and remove the mima checks. If removed, they will obviously need to be reinstated after the first Pekko release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NtK9C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/11,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NtOv8,pekko,1303702524,11,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-04T15:04:52Z,2022-11-04T15:04:52Z,"This is indeed correct, the easiest way to resolve this would be to disable the mima plugin although it makes sense to also rename all of the package names for the latest versions of the filters.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NtOv8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/11,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOZoS,pekko,1312397842,11,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-12T07:26:56Z,2022-11-12T07:26:56Z,Since the discussion around the package name has been resolved on the mailing list I am starting to work on this now.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOZoS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/11,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2kP,pekko,1372547343,11,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-05T17:58:14Z,2023-01-05T17:58:14Z,This is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2kP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/15,https://api.github.com/repos/apache/pekko/issues/15,pekko,1436925061,15,remove mima binary compatibility checks,pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-05T09:36:14Z,2022-12-06T17:38:48Z,"* when we change the package names, then the mima binary compatibility checks will fail anyway
* we are also likely to start releasing as v1.0.0 meaning that the old Akka version numbers will be out of synch with Pekko's
* we will add back the checks after we get our first release out
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/15,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2stX,pekko,1339738967,15,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-06T17:38:48Z,2022-12-06T17:38:48Z,done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2stX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/16,https://api.github.com/repos/apache/pekko/issues/16,pekko,1437024407,16,Change sbt settings that relate to lightbend or akka,pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-05T12:54:57Z,2023-01-05T17:58:43Z,"There were probably be a number of iterations.

In projects/Publish.scala:
```
  override lazy val projectSettings = Seq(
    publishTo := Some(akkaPublishTo.value),
    publishRsyncHost := ""akkarepo@gustav.akka.io"",
    credentials ++= akkaCredentials,
    organizationName := ""Lightbend Inc."",
    organizationHomepage := Some(url(""https://www.lightbend.com"")),
    sonatypeProfileName := ""com.typesafe"",
    startYear := Some(2009),
    developers := List(
        Developer(
          ""akka-contributors"",
          ""Akka Contributors"",
          ""akka.official@gmail.com"",
          url(""https://github.com/akka/akka/graphs/contributors""))),
    publishMavenStyle := true,
    pomIncludeRepository := { x =>
      false
    },
    defaultPublishTo := target.value / ""repository"")
```

The copyright header checks will need to be changed to allow Lightbend/Typesafe licenses and Apache licenses. The Lightbend/Typesafe licenses will remain on the old files but new files should have Apache licenses.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/21,pekko,1437165799,21,rename modules to replace 'akka' with 'pekko',pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-05T19:46:53Z,2023-01-05T17:59:18Z,aim is that all the `akka-*` jars will become `pekko-*` jars,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nz-_I,pekko,1305472968,21,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-07T11:31:45Z,2022-11-07T11:31:45Z,"Could I argue that the ""commands"" used to make these changes,  that result in ""massive commits"", should be checked in as a script in a commit before the actual rename, so that:

1. The script can be reviewed instead of the change
2. The script can be applied to check that the rename commit result matches the script execution

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nz-_I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po9Yj,pekko,1336137251,21,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-12-03T11:14:40Z,2022-12-03T11:14:40Z,"@pjfanning Since https://github.com/apache/incubator-pekko/pull/20 is abandoned, are you going to recreate it or should I? I was also thinking of rather than renaming the modules from `akka-*` to `pekko-*` (i.e. `akka-actor` to `pekko-actor`) that instead we should just have the module name without `pekko` (i.e. `akka-actor` would just become `actor`).

The reasoning is the same as renaming `akka-docs` to just `docs`, i.e. its extra/unneeded noise and its also not consistent with the other pekko repo's (i.e. alpakka doesn't have `akka-` prefix for each of their sbt modules). Since we are renaming the sbt modules anyways there isn't going to be any extra noise, only thing we need to do is to make sure to add the `pekko-` prefix in the generated jar which is quite easy.

Should also do this after https://github.com/apache/incubator-pekko/pull/35 gets merged so as to not deal with a lot of merge conflicts.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po9Yj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_L0,pekko,1336144628,21,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-03T12:00:38Z,2022-12-03T12:00:38Z,"> @pjfanning Since #20 is abandoned, are you going to recreate it or should I? I was also thinking of rather than renaming the modules from `akka-*` to `pekko-*` (i.e. `akka-actor` to `pekko-actor`) that instead we should just have the module name without `pekko` (i.e. `akka-actor` would just become `actor`).
> 
> The reasoning is the same as renaming `akka-docs` to just `docs`, i.e. its extra/unneeded noise and its also not consistent with the other pekko repo's (i.e. alpakka doesn't have `akka-` prefix for each of their sbt modules). Since we are renaming the sbt modules anyways there isn't going to be any extra noise, only thing we need to do is to make sure to add the `pekko-` prefix in the generated jar which is quite easy.
> 
> Should also do this after #35 gets merged so as to not deal with a lot of merge conflicts.

I'd prefer to keep the dir names for the modules to match the jar names. And I think the jar names should be like 'pekko-actor', etc.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_L0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_u2,pekko,1336146870,21,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-12-03T12:10:06Z,2022-12-03T12:10:06Z,"> I'd prefer to keep the dir names for the modules to match the jar names.

Right, but this is only the case for core akka, every other akka repo does not follow in this. In fact arguably from what I have seen in standard OS SBT projects, this isn't really idiomatic or standard practice either (i.e. having folders the same as jar names). There is no correlation of folder name to jar, and hence in some cases it can be misleading.

> And I think the jar names should be like 'pekko-actor', etc.

This would be unchanged even with my suggestion, in fact its very easy to do this with SBT.

Would you be more open if I created a PR demonstrating this? Its actually not that hard.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_u2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_x7,pekko,1336147067,21,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-03T12:11:19Z,2022-12-03T12:11:19Z,"sure, try it out","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Po_x7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qxa5V,pekko,1355132501,21,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-12-16T15:58:02Z,2022-12-16T15:58:02Z,I guess this is what #71 is about.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qxa5V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/21,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2y2,pekko,1372548278,21,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-05T17:59:17Z,2023-01-05T17:59:17Z,#71 is merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2y2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/22,pekko,1437202367,22,Provide an automated migration to migrate from akka to pekko,danischroeter,6125533,,,OPEN,2022-11-05T22:13:42Z,2023-10-23T11:35:00Z,"We should provide some automated migration that users of akka can use that adapts their codebase to use pekko.

This migration should automatically
* adapt the dependencies
  * in sbt
  * in maven
* adapt the codebase
  * imports in scala
  * imports in java","{""url"": ""https://api.github.com/repos/apache/pekko/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nz-lp,pekko,1305471337,22,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-07T11:29:56Z,2022-11-07T11:29:56Z,"I think the first step here is understanding all the things that would need to change in someone's app, so we can develop a strategy for each.

The first obvious step is to change the akka-* dependencies to pekko-* dependencies, and replace the package name in the codebase. But I'd imagine most production applications running Akka have at least one third-party dependency that's not an official Akka library, so we also need to migrate those to the equivalent compatible version. Maybe the best solution there is to allow the user to provide a mapping of dependencies (groupId, artifactId, version) to their pekko equivalents, and we can provide a suggested mapping for common libraries.

Another tricky thing is how to handle configuration. I think it's too risky to just provide a tool to migrate the configuration file itself, since configuration can come from many different sources in a real production app. We'd probably want a way to tell pekko to look at both pekko and akka prefixes, or a list of arbitrary user-specified config prefixes.

Then there's the question of how to migrate akka remote/artery applications away from `akka://`. This is another situation where we probably want to make it configurable in Pekko, so the user initially wouldn't have to do anything.

Ultimately I imagine what we'd want to have is a migration guide, with some automated tools to handle parts of the migration.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nz-lp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N1U1H,pekko,1305824583,22,NA,an-tex,1380580,Andreas Gabor,,NA,2022-11-07T16:00:01Z,2022-11-07T16:00:01Z,Another tricky area will be migration of akka persistence. Especially around the serializers as they might leak some akka references too.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N1U1H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5QxRX6,pekko,1355093498,22,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-12-16T15:36:35Z,2022-12-16T15:36:35Z,"I guess, documenting trial and error hand conversions with 'early builds' would be meaningful input?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5QxRX6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5W5gnn,pekko,1457916391,22,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-03-07T10:21:42Z,2023-03-07T10:21:42Z,I'm setting up a simple scalafix rule to at least take care of the imports in Scala files (though that's also easy to change using search/replace).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5W5gnn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1lVY,pekko,1507218776,22,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T16:00:37Z,2023-04-13T16:00:37Z,"Does this need to go into Pekko 1.0.0 milestone? 

It seems to me that this is a 'would be nice if' item that could go into the pekko 1.1.0 milestone.

I found migration of pekko-samples using the [migration guide](https://github.com/apache/incubator-pekko/blob/main/docs/src/main/paradox/project/migration-guides.md) was quite a lightweight initial solution. In my view, getting a pekko 1.0.0 release out that people can work with sooner is probably more beneficial than having a neat set of migration tools to accompany.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1lVY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1ycu,pekko,1507272494,22,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T16:41:15Z,2023-04-13T16:41:15Z,This is not a release blocker. We can live without it but can we leave it open in case someone wants to try to do something with it?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1ycu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aERzE,pekko,1511070916,22,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-17T10:12:48Z,2023-04-17T10:12:48Z,Ok I think that sounds fine. Could we label as 'nice to have (low prio)' so that people can see that? ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aERzE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDtge,pekko,1561253918,22,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T14:20:47Z,2023-05-24T14:20:47Z,Useful but not going to be a blocker for '1.0.0' release,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDtge/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWxEl,pekko,1566249253,22,NA,jtjeferreira,943051,João Ferreira,,NA,2023-05-28T20:13:23Z,2023-05-28T20:13:23Z,"Hi! I wrote an scalafix migration rule in https://github.com/jtjeferreira/pekko-scalafix which I unit tested in a small [sample](https://github.com/jtjeferreira/pekko-scalafix/blob/main/input/src/main/scala/fix/PekkoScalafix.scala), but also which I tested locally against an [akka-sample project](https://github.com/akka/akka-samples/tree/main/akka-sample-sharding-scala)

Would you accept a PR of this code? Or should I publish it myself?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWxEl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWxjt,pekko,1566251245,22,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T20:21:29Z,2023-05-28T20:21:29Z,"Thanks @jtjeferreira 

We're running into real issues with getting a release done. A lot of them are arguments about process and others are about copyrights and stuff like that.

For me, it's better if people release their own code. As soon as we take it on, we have to jump through loads of non-code hoops.

I had a quick look at the code you have. I'm not a Scalafix expert but I'm not sure if your changes cover some pretty common renaming issues. You cover the package name fixing but there are class names with Akka in them and we replace those with Pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWxjt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWx27,pekko,1566252475,22,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T20:27:14Z,2023-05-28T20:27:14Z,"https://pekko.apache.org/docs/pekko/current//project/migration-guides.html covers Pekko core. @jtjeferreira Your changes look a useful tool - and it's good that you've also supported Alpakka migration.

Is there anything that can be done to migrate configs?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWx27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dhxxd,pekko,1569135709,22,NA,jtjeferreira,943051,João Ferreira,,NA,2023-05-30T21:34:24Z,2023-05-30T21:34:24Z,"> You cover the package name fixing but there are class names with Akka in them and we replace those with Pekko.

Thanks, I fixed those

> Is there anything that can be done to migrate configs?

I am not s scalafix expert either, but I don't think so...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dhxxd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/22,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pzFI4,pekko,1774998072,22,NA,mkurz,644927,Matthias Kurz,,NA,2023-10-23T11:35:00Z,2023-10-23T11:35:00Z,scala-steward can also run scalafix migration rules (https://github.com/scala-steward-org/scala-steward/blob/main/docs/scalafix-migrations.md) when opening pull requests.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pzFI4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/24,pekko,1437338868,24,Migrate relevant discussions from akka-apache-project,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2022-11-06T09:13:13Z,2023-03-13T13:50:08Z,"Now that we have github discussions enabled in incubator pekko, we should try to see if its possible to migrate relevant discussions from https://github.com/mdedetrich/akka-apache-project/discussions to https://github.com/apache/incubator-pekko/discussions.

On the right hand side there is a ""Transfer this Discussion"" link, I tried doing it myself but since I don't have write permissions to this repo I cannot move it. @pjfanning I just added you as a collaborator to https://github.com/mdedetrich/akka-apache-project, let me know if this ends up working out. If it doesn't I think we will just have to start from scratch again.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxRcm,pekko,1304762150,24,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-06T09:58:53Z,2022-11-06T09:58:53Z,"ASF is still discouraging us from using Github Discussions for Pekko team business - that Discussions is meant more for user forums.

https://issues.apache.org/jira/browse/INFRA-23862 - see 1st comment from Daniel Gruno

I don't think all the discussions in https://github.com/mdedetrich/akka-apache-project/discussions need to be brought to the pekko dev mailing list but we could email any that don't relate to the Pekko incubation proposal.

We could possibly do this on a lazy basis - any discussions that start up again could be moved to the dev mailing list. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxRcm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxUeF,pekko,1304774533,24,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-06T11:03:11Z,2022-11-06T11:03:11Z,"So one of the underlying motivations for making this issue is that I actually want to delete (not just archive) the old repos to avoid confusion and also help in things like SEO and I don't want to lose the original discussions, particularly the polls.

If as said in the INFRA question we need to be strict in which way we use github discussions then maybe archiving everything in github discussions is the way to go although I don't know if archiving them as emails works. Maybe we can transfer the discussions but lock them with a comment saying these discussions occurred pre incubator?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxUeF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxYLN,pekko,1304789709,24,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-06T12:25:29Z,2022-11-06T12:25:29Z,"It looks like you can only transfer a discussion to a project in the same Github org.

<img width=""464"" alt=""Screenshot 2022-11-06 at 13 24 20"" src=""https://user-images.githubusercontent.com/11783444/200170583-3aeca12a-2741-417d-9e9b-3912986c84e4.png"">
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxYLN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxZro,pekko,1304795880,24,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-06T12:57:08Z,2022-11-06T12:57:08Z,"The trick is to use an intermediate free org to which both @mdedetrich  and someone with sufficient admin rights on Apache org have owner permissiond.

@mdedetrich can move them to the staging org and second person from there to Apache org.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxZro/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nxrnm,pekko,1304869350,24,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-06T18:58:38Z,2022-11-06T18:58:38Z,"> The trick is to use an intermediate free org to which both @mdedetrich and someone with sufficient admin rights on Apache org have owner permissiond.

> @mdedetrich can move them to the staging org and second person from there to Apache org.

@pjfanning You want to bother with this or is it just too much effort?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nxrnm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/24,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nxvnp,pekko,1304885737,24,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-06T20:21:53Z,2022-11-06T20:21:53Z,"maybe worth deciding on a discussion by discussion basis - for instance, the 2 issues about moving classes into Scala (or related libs) could become Github issues
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Nxvnp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/23,pekko,1437333788,23,Enable github status checks for CI,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2022-11-06T09:53:11Z,2023-05-23T12:32:25Z,"Currently its possible to merge a PR even if the status checks fail or even in the small span of time before they get triggered. Now that we have CI running properly, we should update the `Require status checks to pass before merging` under `Branch Protection Rules` for the main branch so that people cannot easily merge PR's if one of the status checks fail.

@pjfanning I am not sure if this is to be done directly under github actions or whether it needs to be organised with an INFRA ticket/`.asf.yaml`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxRi0,pekko,1304762548,23,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-06T10:01:03Z,2022-11-06T10:01:03Z,"This is something we will want to implement. I'm not yet sure that we have enough stability in the dev pipelines though.

In the end of the day, we are months away from any releases, anything that sneaks into the main branch can be fixed - this will hopefully be rare.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxRi0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxSjk,pekko,1304766692,23,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-06T10:18:00Z,2022-11-06T10:18:00Z,"Explicitly having to name the status checks for that feature to do anything meaningful, is an additional complication.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxSjk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxUVY,pekko,1304773976,23,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-06T11:00:53Z,2022-11-06T11:00:53Z,"> This is something we will want to implement. I'm not yet sure that we have enough stability in the dev pipelines though.

So we don't have to enable all of the status checks however there are ones that make sense to enable even now, i.e.

* `Scalafmt / Code is formatted (pull_request)`
* `Pull Requests / Check / Headers (pull_request)`

And all of the compile ones (I don't think we ever want to merge code that actually can't compile)

Also do note that even with status checks enabled you can bypass them, you just need to write permissions to the repo (which in the current case I think is PMC members?).

> Explicitly having to name the status checks for that feature to do anything meaningful, is an additional complication.

I don't know what you mean, if you are talking about the logistics of enabling them then its really quite trivial, you get a dropdown of past checks that have triggered (which we are already at this point in time) and you just select the ones that you want to enable.

 I manage projects that I have write/admin access to and this is really a trivial 5 minute job.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxUVY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxZg3,pekko,1304795191,23,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-06T12:53:27Z,2022-11-06T12:53:27Z,"From UI it's not very complicated, from API there's a couple of pitfalls, which I assume will extrapolate to this asf.yml file.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxZg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxrqA,pekko,1304869504,23,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-06T18:59:21Z,2022-11-06T18:59:21Z,"> From UI it's not very complicated, from API there's a couple of pitfalls, which I assume will extrapolate to this asf.yml file.

Ah thats what you mean, I assume if there is an example Apache project with a configuration it shouldn't be too hard to figure out.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5NxrqA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1x3U,pekko,1507270100,23,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T16:39:20Z,2023-04-13T16:39:20Z,"Is there anything left on this? 
It seems we have pipelines working, and we have mandatory pipeline passing + 1 review before merge. So the card is done.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1x3U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z3AzV,pekko,1507593429,23,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-13T20:49:52Z,2023-04-13T20:49:52Z,I would say it's still currently being worked on (as in I am going through each pekko git report and putting the checks in),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z3AzV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/23,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c76F_,pekko,1559208319,23,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T12:32:24Z,2023-05-23T12:32:24Z,"This has already been done, closed.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c76F_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/28,pekko,1438482466,28,Update documentation (.MD files)  to remove references to akka and lightbend where appropriate,Claudenw,2439838,Claude Warren,claude@xenei.com,CLOSED,2022-11-07T14:44:31Z,2023-01-05T17:57:53Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->
Currently the README and CONTRIBUTING files contain references to akka and lightbend.  While it may be correct and proper to reference them as original sources for the code base, other uses seem inappropriate.  This change should removed most of the akka and lightbend phrases from the documentation.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4f-t,pekko,1306656685,28,NA,softinio,3371635,Salar Rahmanian,,NA,2022-11-08T05:27:19Z,2022-11-08T05:27:19Z,The CONTRIBUTING guide references [this](https://www.lightbend.com/contribute/cla) what would replace this? ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4f-t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4m7N,pekko,1306685133,28,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-08T06:11:09Z,2022-11-08T06:11:09Z,"We're also going to have to replace the [akka-paradox](https://github.com/akka/akka-paradox) sbt plugin to brand the documentation with Pekko.

Since it doesn't have a license attached we might want to start from scratch with that.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4m7N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4vRT,pekko,1306719315,28,NA,softinio,3371635,Salar Rahmanian,,NA,2022-11-08T06:56:39Z,2022-11-08T06:56:39Z,"> We're also going to have to replace the [akka-paradox](https://github.com/akka/akka-paradox) sbt plugin to brand the documentation with Pekko.
> 
> Since it doesn't have a license attached we might want to start from scratch with that.

At a glance looks like its just [paradox](https://github.com/lightbend/paradox) with a custom theme. Maybe easiest path of resistance is to replace [akka-paradox](https://github.com/akka/akka-paradox) with [paradox](https://github.com/lightbend/paradox)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4vRT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4wl5,pekko,1306724729,28,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-08T07:03:30Z,2022-11-08T07:03:30Z,"Yep, it is just a custom theme. Short term we could just switch to the basic [sbt-paradox](https://developer.lightbend.com/docs/paradox/current/getting-started.html) to get rid of the Akka theme, but mid term we should create our own theme.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4wl5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4zhF,pekko,1306736709,28,NA,softinio,3371635,Salar Rahmanian,,NA,2022-11-08T07:14:22Z,2022-11-08T07:14:22Z,"@nvollmar created a separate issue for the akka-paradox plugin replacement as I thought it can be worked on separately: 

https://github.com/apache/incubator-pekko/issues/32

If no objection happy to start work on it tomorrow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4zhF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N5j07,pekko,1306934587,28,NA,samikrc,2153945,Samik R,,NA,2022-11-08T09:55:55Z,2022-11-08T09:55:55Z,"I would like to work on this issue (doc update) as much as I can. Will raise a PR.
Quick question: are we eventually planning to update the folder names from ""akka-*"" to ""pekko-*"" as well?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N5j07/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N5kbU,pekko,1306937044,28,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-08T09:58:00Z,2022-11-08T09:58:00Z,I am working on the folder renames - see https://github.com/apache/incubator-pekko/issues/21,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N5kbU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N6flX,pekko,1307179351,28,NA,samikrc,2153945,Samik R,,NA,2022-11-08T13:01:49Z,2022-11-08T13:01:49Z,Created a PR with updates to markdown files: https://github.com/apache/incubator-pekko/pull/36,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N6flX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/28,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2d3,pekko,1372546935,28,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-05T17:57:53Z,2023-01-05T17:57:53Z,I think this is done. Please reopen if you find specific items in the .md files that need fixing.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Rz2d3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/32,https://api.github.com/repos/apache/pekko/issues/32,pekko,1439621082,32,Replace akka-paradox plugin with paradox,softinio,3371635,Salar Rahmanian,,CLOSED,2022-11-08T07:12:37Z,2023-01-07T23:07:07Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

As a quick way to remove the akka branding, lets replace [akka-paradox](https://github.com/akka/akka-paradox) plugin with [paradox](https://github.com/lightbend/paradox) basic theme. We can make better with more Pekko branding later.

As discussed in https://github.com/apache/incubator-pekko/issues/28 with @nvollmar ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/32,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4zzH,pekko,1306737863,32,NA,softinio,3371635,Salar Rahmanian,,NA,2022-11-08T07:15:21Z,2022-11-08T07:15:21Z,"If no objection, I will start working on this tomorrow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N4zzH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/32,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7WFD,pekko,1374511427,32,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-07T15:11:49Z,2023-01-07T15:11:49Z,"@seglo @softinio @pjfanning So I tried to do just simply replace the akka paradox theme with the standard one and this made me fall down a rabbit hole. Here are the problems

* Due to the current Pekko sbt build only loading on an ancient JDK 1.8 version (it actually refuses to load otherwise) we are forced to downgrade to a version of parboiled that is bytecode compatible with JDK 1.8. I have managed to do this locally
* Although initially it might make sense to just replace `addSbtPlugin(""com.lightbend.akka"" % ""sbt-paradox-akka"" % ""0.44"")` with the various sbt paradox plugins initially, this will have to be repeated for every single pekko project. Furthermore at some point we would actually like to create a pekko theme, and in order to not repeat boilerplate in the 10+ repos we maintain it makes sense to create a `sbt-paradox-pekko` sbt plugin akin to [sbt-paradox-akka](https://github.com/akka/akka-paradox). Initially it can be blank and essentially just contain the following dependencies
  ```scala
  addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox"" % 0.10.3"")
  addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox-apidoc"" % ""1.0.0"")
  addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox-project-info"" % ""3.0.0"")
  ```
  but later on an actual css/js theme can be added. I already have a sample `sbt-paradox-pekko` locally . The problem here 
  is I haven't been able to figure out how to get override the parboiled version when using `addSbtPlugin(""org.apache.pekko"" % ""sbt-paradox-pekko"" % ""HEAD+20230107-1453"")`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7WFD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/32,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R73Hy,pekko,1374646770,32,NA,softinio,3371635,Salar Rahmanian,,NA,2023-01-07T23:07:07Z,2023-01-07T23:07:07Z,"@mdedetrich thanks for pushing this over the finish line. Last quarter I ended having unplanned bandwidth shortage. Happy New Year. Looking forward to contributing this quarter.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R73Hy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/34,pekko,1440021154,34,change org id from `com.typesafe.akka` to `org.apache.pekko`,pjfanning,11783444,PJ Fanning,,CLOSED,2022-11-08T11:32:59Z,2022-12-06T17:37:08Z,part of https://github.com/apache/incubator-pekko/issues/16,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKNYq,pekko,1311299114,34,NA,joesan,3284487,Joesan,,NA,2022-11-11T06:54:18Z,2022-11-11T06:54:18Z,How is the backwards compatibility going to be? Is this issue about fixing the whole codebase to the new org id?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKNYq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKYGS,pekko,1311342994,34,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-11T07:42:09Z,2022-11-11T07:42:09Z,"@joesan We do not own the 'com.typesafe.akka' org id. We will provide docs and probably migration scripts to try to help users to switch to Pekko.

Users can always stick with https://github.com/akka/akka if that suits them better. Such users will need to look at the new Lightbend licensing terms and work out how that affects them.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKYGS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOfmm,pekko,1312422310,34,NA,joesan,3284487,Joesan,,NA,2022-11-12T09:21:17Z,2022-11-12T09:21:17Z,"@pjfanning I understand the licensing part and I guess providing a migration script is a good idea to seamlessly switch the users to use Pekko without breaking backwards compatibility. So this task is about moving all the packages, build files, pipelines etc., to Pekko. Correct?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOfmm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOhlI,pekko,1312430408,34,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-12T09:43:10Z,2022-11-12T09:43:10Z,"this is just a small step to removing akka, typesafe and lightbend branding from pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OOhlI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/34,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2sOu,pekko,1339737006,34,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-06T17:37:08Z,2022-12-06T17:37:08Z,done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2sOu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/38,pekko,1441845248,38,Merging Lightbend copyright and ASF headers for existing source files,spangaer,677147,Jean-Luc Deprez,,CLOSED,2022-11-09T10:36:10Z,2023-06-19T23:10:46Z,"Using this issue to gather some feedback before posting the proposal to the Apache legal JIRA

Current proposal (will be updated, based on feedback)

```scala
/*
 * Copyright (C) 2009-2022 Lightbend Inc. <https://www.lightbend.com>
 *
 * Updates since 2022-10-24 are licensed to the Apache Software Foundation (ASF) under
 * one or more contributor license agreements.  See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership.
 *
 * Lightbend and ASF license this file to you under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied.  See the License for the specific language
 * governing permissions and limitations under the License.
 */
```

Next to including the Lightbend notice, changes form the default header text are

```
Updates since 2022-10-24 are 
```
```

Lightbend and ASF license
````

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_vZm,pekko,1308554854,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T10:41:38Z,2022-11-09T10:41:38Z,"In case anybody wonders, the date is the date that the incubation vote result was published.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_vZm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_yEI,pekko,1308565768,38,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-11-09T10:51:10Z,2022-11-09T10:51:10Z,"```
/*
 * Copyright (C) 2014-2022 Lightbend Inc. <https://www.lightbend.com>
 * Copyright (C) 2022 The Apache Software Foundation. <https://www.apache.org/>
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
```

@alexandru suggested this once.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_yEI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_0_O,pekko,1308577742,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T11:01:06Z,2022-11-09T11:01:06Z,"Right, I recall that passing by at some point.
But here
https://www.apache.org/legal/src-headers.html#headers
 it says, we should not include an Apache copyright notice.

Both that paragraph and the next one indicate that we can't remove the copyright notice without written permission.

I've added what changed specifically for clarity btw.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5N_0_O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAAuh,pekko,1308625825,38,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-09T11:42:21Z,2022-11-09T11:42:21Z,"this needs to go to legal team

I don't know why new threads keep being formed without any attempt to link the threads.

This is the existing discussion: https://lists.apache.org/thread/z0r4sr4kdvmh52mlhc5porot2sh1wtok

To summarise that thread:
* we should aim not to remove the existing Lightbend copyrights 
* new files should have the standard Apache license header unmodified - example: https://github.com/apache/poi/blob/trunk/poi/src/main/java/org/apache/poi/POIDocument.java
* if we modify an existing file with major changes then we need to have some new header setup that acknowledges the Lightbend and ASF contributions - the format should be discussed with legal
  * there is no plan to have any major changes to existing files - it will be months before we need to do this ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAAuh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OACBA,pekko,1308631104,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T11:47:28Z,2022-11-09T11:47:28Z,"@pjfanning 
This issue takes all of that in to account. It just that the mailing list, with it automatic line breaking will make the above look like dung.

I'm trying to come up with what ""bullit 3"" should look like, but gathering some feedback within the project team before sending it to the legal JIRA. Seems like better to come with a proposal, then empty handed.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OACBA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAC5r,pekko,1308634731,38,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-09T11:51:08Z,2022-11-09T11:51:08Z,"All legal will need are these 2 links.

[1] https://github.com/mdedetrich/akka-apache/blob/6680c47dcc2305906a44d7794081682211d7ee0b/akka-actor/src/main/scala/akka/actor/AbstractActor.scala
[2] https://github.com/apache/poi/blob/trunk/poi/src/main/java/org/apache/poi/POIDocument.java

I can raise the legal issue, if that's ok.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAC5r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAHjR,pekko,1308653777,38,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-09T12:07:29Z,2022-11-09T12:07:29Z,"Proposal for the NOTICE file.

```
Apache Pekko
Copyright 2022 The Apache Software Foundation

This product includes software developed at
The Apache Software Foundation (https://www.apache.org/).

This product contains significant parts that were originally based on software from Lightbend (Akka <https://akka.io/>).
Copyright (C) 2009-2022 Lightbend Inc. <https://www.lightbend.com>

Apache Pekko is a descendant of Akka 2.6.x, the last version that was distributed under the
Apache License, Version 2.0 License.

`pekko-protobuf` includes protobuf v2.5.0 code developed by Google Inc.
```

We may need to further extend this NOTICE with details of other non-Lightbend software that is used by Akka/Pekko .

This NOTICE is based on some existing files in other ASF projects - specifically, https://github.com/apache/poi/blob/trunk/legal/NOTICE","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAHjR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAJNj,pekko,1308660579,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T12:12:22Z,2022-11-09T12:12:22Z,"> All legal will need are these 2 links.
> 
> [1] https://github.com/mdedetrich/akka-apache/blob/6680c47dcc2305906a44d7794081682211d7ee0b/akka-actor/src/main/scala/akka/actor/AbstractActor.scala [2] https://github.com/apache/poi/blob/trunk/poi/src/main/java/org/apache/poi/POIDocument.java
> 
> I can raise the legal issue, if that's ok.


I was going to adapt the proposal to the `/*==*/`, notation, but I see it's not a universal thing
https://github.com/apache/kafka/blob/trunk/server-common/src/main/java/org/apache/kafka/server/util/ToolsUtils.java

Other than that, I I don't think they need any examples for point 2, given that there's just the official docs, which I was referring
https://www.apache.org/legal/src-headers.html#headers

Finally, just trying to help get some paperwork out of the way 🤷 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAJNj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OALit,pekko,1308670125,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T12:20:07Z,2022-11-09T12:20:07Z,"I think this part should be shortened

```
Until 7 September 2022, the Akka code base was licensed using the Apache License, Version 2.0. Akka changed to
the Business Source License (BSL) v1.1 <https://www.lightbend.com/akka/license> from that date.

A number of Akka contributors have come together and forked the code base as Apache Pekko, using the
final Apache Licensed commit as their starting point.
```

```
Apache Pekko is a descendant of Akka 2.6.x, the last version that was distributed under the
Apache License, Version 2.0 License.
```

I'd avoid that 7 sept or BSL refs.
Clearly  `Akka 2.6.x` is actually `Akka <module> <module version>`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OALit/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAR0Q,pekko,1308695824,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T12:43:46Z,2022-11-09T12:43:46Z,"**On the NOTICE**
I would have expected the `---------------` separator, but as it turns out I didn't see it appear elsewhere, so without seems to be common (just making note in case anybody else makes that consideration).

**On the header**
Reason to write up a proposal to post in the legal JIRA is following statements:
> 3\. Do not add the standard Apache License header to the top of third-party source files.
> 5\. The project's PMC should deal with major modifications/additions to third-party source files on a case-by-case basis.

https://www.apache.org/legal/src-headers.html#3party

If you fear that coming with a proposal in hand won't be appreciated it can go without.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAR0Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAX3b,pekko,1308720603,38,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2022-11-09T13:04:36Z,2022-11-09T13:04:36Z,"IMHO

The entire code base is a 3rd party work as defined in https://www.apache.org/legal/src-headers.html#headers

- As such we will make no changes to the copyright or licence notices in any source file until _MUCH_ later
- We will create a NOTICE file that will list both Lightbend and Apache as copyright holders.

We will only change this for source code that has significant changes from the original.  We will cross that bridge when we come to it.

In addition we should take up Justin McLean's offer as he has in-depth experience in this area.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAX3b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAekT,pekko,1308748051,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T13:23:07Z,2022-11-09T13:23:07Z,"Well, I tend to disagree on that for 2 reasons:

1. The format and rename, while not very original, are already significant changes.
2. Postponing it until a file changes, is not a very Poka Yoke process. If you can just do a find and replace now for all existing notice headers. That means that you only have to document ""leave what is in place if it exists"" or ""use the standard official"" header for new files. (this discussion to be precise https://github.com/apache/incubator-pekko/pull/36#discussion_r1017763314)

I sure had no intention to dismiss the offer of @justinmclean and sure hope he iterates through this. Yet, correct me if I'm wrong, but the new header better get a formal stamp from legal, right?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAekT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAkSW,pekko,1308771478,38,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2022-11-09T13:36:10Z,2022-11-09T13:36:10Z,"The format and rename does not change the operation of the code, and therefor is not a change in the intellectual property.

Unless you can argue that the code is not 3rd party then we are not allowed to change the copyright notice as per the link above.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAkSW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAmY_,pekko,1308780095,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T13:41:27Z,2022-11-09T13:41:27Z,"Well, if you look carefully line 1 of the header statement is the original notice is unmodified, so the proposal does not conflict with your statements.

If anything, it adds a clarification of the current state and covers future work, but it does not modify the copyright as it existed up to the point of fork.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OAmY_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OA71j,pekko,1308867939,38,NA,alexandru,11753,Alexandru Nedelcu,,NA,2022-11-09T14:42:23Z,2022-11-09T14:42:23Z,"Renaming the `akka` package to `pekko` will create a derived work that justifies adding the Apache copyright notice.

The question is, is such a header change legal? I think it is, as we won't be removing Lightbend's copyright notice, rather we are adding to it.

Surely this is legal:

```
/*
 * Copyright (C) 2014-2022 Lightbend Inc. <https://www.lightbend.com>
/*

/*
 * Copyright (C) 2022 The Apache Software Foundation. <https://www.apache.org/>
 */

package pekko
```

And, so is this:

```
/*
 * Copyright (C) 2014-2022 Lightbend Inc. <https://www.lightbend.com>
 * Copyright (C) 2022 The Apache Software Foundation. <https://www.apache.org/>
 */

package pekko
```

And so is this:

```
/*
 * Copyright (C) 2014-2022 Lightbend Inc. <https://www.lightbend.com>
 * Copyright (C) 2022 The Apache Software Foundation. <https://www.apache.org/>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * ...
 */

package pekko
```

Lightbend's copyright stays in place, where it was, nobody's touching it. And the change is very helpful, as it informs of the project's history, and this project will indeed have multiple copyright owners.

Plus, at some point we will add new files. What will happen to those? Will they have a different header? I don't think they should have a different header, because even new files can be considered derived works of Lightbend's work. But then this header would be incorrect for new files, right?

```
/*
 * Copyright (C) 2014-2022 Lightbend Inc. <https://www.lightbend.com>
/*
```

And if we go with it for all files, what will we do when the year 2023 comes?

Sure, legal needs to weigh in, however managing headers becomes impractical if we don't have the same header everywhere, and it would be best to use [sbt-header](https://github.com/sbt/sbt-header).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OA71j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OA-Ac,pekko,1308876828,38,NA,alexandru,11753,Alexandru Nedelcu,,NA,2022-11-09T14:48:39Z,2022-11-09T14:48:39Z,"@Claudenw 
> The format and rename does not change the operation of the code, and therefor is not a change in the intellectual property.

IANAL, but I disagree. Both formatting and naming things is creative work. Whether it's not significant enough to be meaningfully protected by copyright, that's another discussion.

IMO, it's not practical to micromanage headers, file by file, or to declare `Copyright 2014-2022 Lightbend` from now on, on everything. If we want to avoid some discussions, for sure we can delay it, but not because it's illegal.

Again, IANAL, and someone from legal should definitely weigh in on any header changes, to the dot.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OA-Ac/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OCOTS,pekko,1309205714,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T18:42:35Z,2022-11-09T18:42:35Z,"> I don't think they should have a different header, because even new files can be considered derived works of Lightbend's work.

It probably is a derivative work, but unless it's mostly copy-paste of existing files, the new work (thus file) has it's own copyright so certainly should not contain a notice attributing it to Lightbend, hence should hold the official Apache header. So sadly one header fits all won't fly I fear.

I don't think there's any dispute we can't remove the existing Lightbend notices (can be asked to legal).

Other than that. Whether the rename consist of novel work is a completely symbolic discussion. If we're serious about this fork we'll need it sooner or later.

As with the rename, let's agree on a header, get it reviewed and stamped. Then get it in.

Postponing it only makes it harder, not simpler.

So TBH I really have a hard time understanding the too soon side here.

Does anyone object getting the ball rolling on legal JIRA?

I have no problem with chasing this, though it could be Monday before it gets to JIRA.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OCOTS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OCcec,pekko,1309263772,38,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-09T19:37:12Z,2022-11-09T19:37:12Z,"I've created https://issues.apache.org/jira/browse/LEGAL-626
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OCcec/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODCeb,pekko,1309419419,38,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2022-11-09T21:47:55Z,2022-11-09T21:47:55Z,"Sorry I missing this conversation as it was not happening on the dev list. 

As I mentioned in the legal JIRA reformatting code would not can't as major changes and the 3rd party headers need to stay as they are unless you have permission from Akka to change them.

There is no need to mention protobuf v2.5.0 in you NOTICE file. License information should go in your LICENSE file.

Please do not use ""Copyright 2022 and onwards"", as copyright has an expiry date.

On the subject of ASF copyright notices in headers, please do not state ""Copyright (C) XXXX The Apache Software Foundation."".  The standard header states ""Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements"". Only 3rd party ASF headers include a copyright line with the year.

Also ask yourself, who actually owns the copyright of a contribution? And does the ASF ask for IP transfer?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODCeb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODEzf,pekko,1309428959,38,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-09T21:56:41Z,2022-11-09T21:56:41Z,"> Also ask yourself, who actually owns the copyright of a contribution? And does the ASF ask for IP transfer?

That's an interesting point, because Lightbend doesn't actually own all the copyrights of contributions, right? The Lightbend CLA doesn't transfer the IP, it just licenses your contributions to Lightbend. So is the existing Lightbend header incorrect?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODEzf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODNzo,pekko,1309465832,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-09T22:25:08Z,2022-11-09T22:25:08Z,"> Sorry I missing this conversation as it was not happening on the dev list.

That one's on me, but for the practical reasons mentioned above.

> The Lightbend CLA doesn't transfer the IP, it just licenses your contributions to Lightbend. So is the existing Lightbend header incorrect?

Well, the sublicense encompasses a right to copy. So I'm quite sure they do no wrong to slab their copy'right' on there. Without that they wouldn't be able to go proprietary either.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODNzo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODS1B,pekko,1309486401,38,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-09T22:43:12Z,2022-11-09T22:43:12Z,"My question was in the context of that the standard ASF header says `Licensed to the Apache Software Foundation (ASF)` versus `Copyright ... The Apache Software Foundation`. I was just curious if from a legal standpoint it is technically incorrect to include a regular copyright header when you only hold a license to use someone else's copyrighted work.

IANAL, but the right to copy is only one aspect of what copyright means. If you hold the copyright, you have the right to, for example, contribute that work to another OSS project. If Lightbend holds the copyright you can't do that. But I'm not exactly sure how that applies to copyright notices.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ODS1B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OFEL9,pekko,1309950717,38,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2022-11-10T08:42:12Z,2022-11-10T08:42:12Z,"Copyright is an attribution of creation.  When you create something the copyright comes into being.  For example as of now I hold the copyright on this message.  (This is why publishing letters written by someone else is legally tricky).  I can assign the copyright to someone else if I wish.

License is what I say you can do with material I have the copyright on.  And now we get into what others can do with my copyrighted material.  Under the Apache v2 license grant `a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.`  Thus once I put code I authored (copyright) out under the Apache v2 license others can do anything they like with it.  Even though I have given anyone the right to do anything with it,  it is still my code (copyright).

The Apache Foundation does not require the transfer of the copyright, it requires that you provide your code to Apache under the Apache v2 license so that Apache may do with it as it pleases.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OFEL9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIa8v,pekko,1310830383,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-10T20:02:03Z,2022-11-10T20:02:03Z,"Starting to feel like this issue is or has become one of those gorilla dances 🤷 

I sure had hoped the outcome on the header subject would be more actionable.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIa8v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKHjS,pekko,1311275218,38,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2022-11-11T06:18:39Z,2022-11-11T06:18:39Z,How is what I suggested above not actionable? i.e The 3rd party headers need to stay as they are unless you have permission from Akka to change them.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKHjS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKl-V,pekko,1311399829,38,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-11T08:44:14Z,2022-11-11T08:44:14Z,"https://github.com/apache/incubator-pekko/issues/38#issuecomment-1308748051

https://github.com/apache/incubator-pekko/issues/38#issuecomment-1309205714","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OKl-V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OK2ps,pekko,1311468140,38,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2022-11-11T09:46:18Z,2022-11-11T09:46:18Z,"I think we all agree this is 3rd-party code.  As such the following rules are in play:

**TREATMENT OF THIRD-PARTY WORKS**
- The term ""third-party work"" refers to a work not submitted directly to the ASF by the copyright owner or owner's agent. This includes parts of a work submitted directly to the ASF for which the submitter is not the copyright owner or owner's agent.
- Do not modify or remove any copyright notices or licenses within third-party works.
- Make sure that every third-party work includes its associated license, even if that requires adding a copy of the license from the third-party download site into the distribution.
- Do not add the standard Apache License header to the top of third-party source files.
- Minor modifications/additions to third-party source files should typically be licensed under the same terms as the rest of the third-party source for convenience.
- The project's PMC should deal with major modifications/additions to third-party source files on a case-by-case basis.

Is is official Apache policy and thus has been reviewed by legal.

So the upshot is:

DO NOT remove or modify any existing copyright notices.
DO NOT add Apache license information to the existing files.

Change of package name is a minor modification.
The PMC will determine when the modification has become ""Major"" and will act at that time.

Modifications contrary to these restrictions will lead to the PMC not approving the pull request or not approving the release.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OK2ps/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Op3M0,pekko,1319596852,38,NA,hen,114886,hen,,NA,2022-11-18T06:17:55Z,2022-11-18T06:17:55Z,Noting that I've proposed a simpler approach here of a new forked-file source header: https://issues.apache.org/jira/browse/LEGAL-626?focusedCommentId=17635668&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17635668,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Op3M0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrMZa,pekko,1319945818,38,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-11-18T12:41:47Z,2022-11-18T12:41:47Z,"So should I just added befer the current lightbend copyright?
```
/*
 * Pekko is a fork of Akka 2.6.20. Any modifications are:
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License. 
 *
 * See source control history for modification details.
 */
/*
 * Akka 2.6.20 is provided under the Apache-2.0 license.
 */
```
as @hen pointed out, I think even it's combersom but very clear.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrMZa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OvHQg,pekko,1320973344,38,NA,hen,114886,hen,,NA,2022-11-19T21:28:04Z,2022-11-19T21:28:04Z,Let's get the JIRA legal issue resolved first. I want to see what other thoughts there are from the licensing committee folk.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OvHQg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/38,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shjzd,pekko,1384529117,38,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T20:37:45Z,2023-01-16T20:37:45Z,Closing this as solved in https://github.com/apache/incubator-pekko/pull/50,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shjzd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/39,pekko,1443384033,39,Drop 2.12 support,He-Pin,501740,He-Pin(kerr),,OPEN,2022-11-10T07:18:35Z,2023-09-21T11:47:42Z,"Scala 2.12 support (e.g. ByteString has forked sources for 2.12 and 2.13 that lead to various bugs in the past), see also https://github.com/mdedetrich/akka-apache-project/discussions/27

_Originally posted by @jrudolph in https://github.com/mdedetrich/akka-apache-project/discussions/8#discussioncomment-3904101_
   
And now JDK 21 is released too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OEzg5,pekko,1309882425,39,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-10T07:30:49Z,2022-11-10T07:30:49Z,"I agree, it should be good enough to support the last two major versions","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OEzg5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OE0gA,pekko,1309886464,39,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-11-10T07:36:06Z,2022-11-10T07:36:06Z,"Yes, Scala 3.3 lts is near the corner too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OE0gA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIYVT,pekko,1310819667,39,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-10T19:51:09Z,2022-11-10T19:51:09Z,"Still on 2.12 ✅ 

Admittedly, we're not on the latest Akka either and we sure had the intention to move Scala 2.13 before doing so.

We're blocked from doing that before, but metals/VSCode is our route forward now.

Anyhow, am I wrong to state it's an Apache ""thing"" to support fairly ""mature"" runtimes?

Is it odd to suggest that dropping support should align with Scala center end-of-life of a version?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIYVT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIySe,pekko,1310925982,39,NA,SethTisue,161079,Seth Tisue,seth@tisue.net,NA,2022-11-10T21:34:04Z,2022-11-10T21:34:04Z,"> Is it odd to suggest that dropping support should align with Scala center end-of-life of a version?

Scala 2.12.x itself would quite conceivably have been EOLed by now if it weren't for commercial sponsorship for its continued maintenance.

So you can argue that for a pure OSS effort such as Pekko to drop 2.12 is actually consistent with the approach that Lightbend and the Center have taken with our stewardship of Scala 2.12.x — namely, yes if commercially funded, otherwise perhaps no.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OIySe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ONn6D,pekko,1312194179,39,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-11T21:10:15Z,2022-11-11T21:10:15Z,"I did do some research before writing that response, but it seems like these things aren't communicated very openly. (Till what you just wrote).
A published timeline for such things would really be helpful to base a decision on.
If not EOL, call it deep maintenance.

If it where Java, I'd think you'd target lts's and could start considering dropping 8.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ONn6D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Od7Mu,pekko,1316467502,39,NA,yishenggudou,380657,Abigail Smithson,yishenggudou@gmail.com,NA,2022-11-16T06:56:11Z,2022-11-16T06:56:11Z,"I feel that many people are still using version 2.12, including me

[Still on 2.12](https://trends.google.com/trends/explore?q=scala%202.12,scala%202.13&hl=en-US)

<img width=""1133"" alt=""image"" src=""https://user-images.githubusercontent.com/380657/202107334-139b5d82-e7ca-4b01-bde4-addd2e3615e4.png"">
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Od7Mu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Oew3S,pekko,1316687314,39,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-16T09:36:04Z,2022-11-16T09:36:04Z,"To get more facts, what is preventing you from upgrading to Scala 2.13?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Oew3S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmRAr,pekko,1318653995,39,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2022-11-17T13:39:27Z,2022-11-17T13:39:27Z,"I'd like to invite everyone to view issues like this from a community perspective. The whole first goal of this project is to preserve the existing status of the open source project and set up administrative structures to enable broader participation. So, there's no attempt to drop 2.12 from the initial release.

From there on, we'll see where it will go. In any case, it will require offers from the community to take on issues they see as pressing. Maintaining such a big project really is difficult and time consuming. I created these items originally, to show which current properties of the existing codebase make evolution more difficult (in this case, making sure everything works on at least 3 Scala versions can be a significant drain in productivity and often caused bugs).

IMO, the situation is pretty good even for 2.12 support: there will be an initial release supporting 2.12 and the basic organizational structures are set up that will allow the community to backport pressing issue to that first release branch and have some hope to get them released.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmRAr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmiDM,pekko,1318723788,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-17T14:30:26Z,2022-11-17T14:30:26Z,"I would disagree with dropping 2.12, even though technically speaking with Scala 3 its outside of the ""latest 2 stable versions"", adoption of Scala 3 is really slow and I wouldn't say its controversial that a lot of current Akka users would still be using and/or expecting 2.12 support.

In my opinion I would advocate for supporting 2.12 until it becomes painful to maintain it, then we can drop it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmiDM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmjW3,pekko,1318729143,39,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2022-11-17T14:33:57Z,2022-11-17T14:33:57Z,"> In my opinion I would advocate for supporting 2.12 until it becomes painful to maintain it, then we can drop it.

It is painful for pekko-http as soon as we merge the Scala 3 branch.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmjW3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmkTc,pekko,1318733020,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-17T14:36:59Z,2022-11-17T14:36:59Z,"> It is painful for pekko-http as soon as we merge the Scala 3 branch.

I guess this would be because we would rely on Scala 3 to provide Scala 2.13 support so we would only have a single source directory?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmkTc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Omkzh,pekko,1318735073,39,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-17T14:38:34Z,2022-11-17T14:38:34Z,"Even if we decide to drop Scala 2.12 support for http module, we could keep it for other modules where the maintenance would be less of an issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Omkzh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om3P3,pekko,1318810615,39,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2022-11-17T15:32:17Z,2022-11-17T15:32:17Z,"> In my opinion I would advocate for supporting 2.12 until it becomes painful to maintain it, then we can drop it.

IMO, pain does not really work as a good metric because the pains will usually be small but consistent. E.g. just having that third version in the test and release matrix, it will add 50% more cost, possibility for flaky tests, missed test coverage, extra reasons for mima to fail etc. On the other hand, 2.13 has been released more than 3 years ago and has been super stable since a long while. There's little reason to stay on 2.12, so why should we?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om3P3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om3vE,pekko,1318812612,39,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2022-11-17T15:33:36Z,2022-11-17T15:33:36Z,"> > It is painful for pekko-http as soon as we merge the Scala 3 branch.
> 
> I guess this would be because we would rely on Scala 3 to provide Scala 2.13 support so we would only have a single source directory?

Because, we would have to support hacky support structures to make it work at all and because of the general problems and costs of supporting an extra version in such a big project.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om3vE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om8y7,pekko,1318833339,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-17T15:46:38Z,2022-11-17T15:46:38Z,"> There's little reason to stay on 2.12, so why should we?

I can't answer this, I have no idea how much people are currently running akka-http on 2.12 which could cause a problem or whether we even care.

> Because, we would have to support hacky support structures to make it work at all and because of the general problems and costs of supporting an extra version in such a big project.

Yeah the reason I asked this is whether we have pekko-http already has separate source folders for `scala-2.13+`/`scala-2.13-`. I just had a look and `akka-http-core` appears to have such a structure. My original assumption is that with Scala 3 support, one would have to have a `scala-2.13-` along with a `scala-3` folder and hence there wouldn't be that much extra effort as long as subtle things don't change in core of pekko-http since the source for both Scala 2.12 and 2.13 seems to be the same (this is goes back to the ""pain"" part before)?

If it was just a `scala-3` folder which would back compile to Scala 2.13 then that to me a much stronger argument since the mere presence of other source folders aside from `scala-3` is to me the main complicating factor but I may be wrong here (and also my tolerance for ""pain"" might be higher).

The other part which might influence this that just came to mind is the rest of the ecosystem as a whole. For example Kafka currently supports 2.12 and 2.13, I am not sure if they plan to support 2.12/2.13 and 3 when scala 3 is ready but since we have connectors (i.e. pekko-connectors-kafka) it might be problematic that Kafka itself is supporting older versions than pekko itself but I may be exaggerating things here. Spark is another library that also is currently support Scala 2.12.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Om8y7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Or5Mv,pekko,1320129327,39,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-18T14:57:06Z,2022-11-18T14:57:06Z,"Scala 2.13 has compiler flags to support certain Scala 3 syntax. Scala 3.0 supports both old and new styles, but newer Scala 3 versions will going to drop that. So mid to long term only Scala 2.13 in addition to Scala 3 will be viable to support without cloning the code base for Scala 2.12.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Or5Mv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Or8OK,pekko,1320141706,39,NA,nvollmar,919730,Nicolas Vollmar,,NA,2022-11-18T15:03:25Z,2022-11-18T15:03:25Z,"And on the other hand, migrating from Akka to Pekko will be more effort/risker than upgrading from Scala 2.12 to Scala 2.13 from my experience.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Or8OK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PIrh2,pekko,1327675510,39,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-25T16:23:44Z,2022-11-25T16:23:44Z,"Well, before we had standardized on ScalaIDE, which meant that we were stuck on Scala 2.12 since 2018 😔 

We've started adopting VSCode/Metals, but that setup still needs plenty of refinement, so only a couple of services use that already. It does look like this will be our way forward to Scala 2.13 and up.

But yes, it's unlikely that we bother to adopt Pekko before we can switch to 2.13, so I concur with many of the above statements.

To generalize, I actually think it's fair to consider dropping 2.12.

I just notice that Scala 2.12 isn't that dead yet. There's the Kafka example from above and afaik, writing an SBT plugin is also still 2.12.x.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PIrh2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PItuK,pekko,1327684490,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-25T16:36:41Z,2022-11-25T16:36:41Z,"> I just notice that Scala 2.12 isn't that dead yet. There's the Kafka example from above and afaik, writing an SBT plugin is also still 2.12.x.

The main thing I am afraid of is jumping the gun when dropping 2.12 support even though a lot of other major Scala OS projects still support it (for various reasons), so at least in my opinion the optics of dropping 2.12 support in light of the rest of the Scala ecosystem wouldn't look the best. The only counter examples I can think of are projects like Flink, who have much bigger pains in supporting multiple Scala versions due to them using Maven (and in any case they are trying to completely phase out Scala as we speak so they aren't the best example to use).

Heck, even as you pointed out with SBT still on 2.12, unless SBT 2.x comes out then historically SBT kind of creates a lower floor for what is reasonable to support in terms of Scala open source libraries (at least if we are dealing with Scala libraries which are used for sbt plugins). So I would in fact say that 2.12 is far from dead, in fact its very much as alive as 2.13 is considering at least in the Scala space almost every major OS library I can see still supports 2.12.

Ultimately I think we should formalise this as a process and also try and rationally quantify what the ""pain"" is.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PItuK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2a6K,pekko,1658433162,39,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-31T14:00:56Z,2023-07-31T14:00:56Z,This is going to be contentious. I think we would need a community vote before proceeding.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2a6K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i72Yh,pekko,1659856417,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-01T08:46:43Z,2023-08-01T08:46:43Z,"> This is going to be contentious. I think we would need a community vote before proceeding.

Agreed.

Also to add more to the debate, when pekko-http gets released I plan on adding pekko-http support to [scalaxb](https://github.com/eed3si9n/scalaxb) and since scalaxb is an sbt plugin (sbt plugins are built with Scala 2.12 only) it would essentially mean that scalaxb would be stuck with pekko-http 1.0.x series of updates.

While this may not be the end of the world since sbt 1.x will be around for a while it would essentially mean that scalaxb's pekko-http backend wouldn't get new feature requests since that will only be for the 1.1.x series.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i72Yh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i738k,pekko,1659862820,39,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-01T08:49:49Z,2023-08-01T08:49:49Z,"I think we should start by agreeing how long we will maintain the 1.0.x release lines. If we agree to make critical fixes to 1.0.x release lines, then I think we can make big changes in 1.1.x lines. People who can't use 1.1.x release lines because of the changes can continue to use 1.0.x releases.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i738k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i8Fc9,pekko,1659918141,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-01T09:20:57Z,2023-08-01T09:20:57Z,"> I think we should start by agreeing how long we will maintain the 1.0.x release lines. 

I would rephrase the question by asking how much effort rather than how long. Since the agreement of 1.0.x is only backport of security/critical fixes we could ""support"" 1.0.x for a while assuming that these fixes are trivial to backport. If that stops becoming the case then we can consider dropping 1.0.x support.

The reasoning behind this is that our treatment from 1.0.x is special in the sense that its designed to be a bridge for people on Akka 2.6 and in this regard its not a ""normal"" release branch, i.e. the reason for its special status is the Akka fork. Hence our ""normal"" release branch is essentially 1.1.x, which means that major changes like dropping 2.12 should happen in 1.2.x. It also means that are incentivised to ""support"" 1.0.x as long as we can, because of that bridge status.

Also note that in terms of supporting Scala 2.12, with the changes I did in https://github.com/apache/incubator-pekko/pull/281 and the subsequent related PR's, the maintenance cost in supporting 2.12 is largely trivialised.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i8Fc9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i9S5Z,pekko,1660235353,39,NA,jtjeferreira,943051,João Ferreira,,NA,2023-08-01T12:41:06Z,2023-08-01T12:41:06Z,"> I plan on adding pekko-http support to scalaxb and since scalaxb is an sbt plugin (sbt plugins are built with Scala 2.12 only

Scalaxb SBT plugin is just generating code. It does not need to run pekko-http in scala 2.12...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i9S5Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/39,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i-kFm,pekko,1660567910,39,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-01T15:33:02Z,2023-08-01T15:33:02Z,"> Scalaxb SBT plugin is just generating code. It does not need to run pekko-http in scala 2.12...

Yes I know but testing it within context of an sbt plugin its easier to test/implement if it supports Scala 2.12, we had similar issues with pekko-grpc sbt plugin (which also just generates code).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i-kFm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/40,pekko,1443385070,40,Drop Artery UDP based on Aeron,He-Pin,501740,He-Pin(kerr),,OPEN,2022-11-10T07:19:27Z,2024-05-01T15:16:48Z,"Artery UDP based on Aeron (hard to deploy, little used, one extra dimension in hard to stabilize remoting (and everything above like cluster, persistence etc) tests)

_Originally posted by @jrudolph in https://github.com/mdedetrich/akka-apache-project/discussions/8#discussioncomment-3904101_

The design blog: https://akka.io/blog/article/2016/12/02/streams-in-artery & https://akka.io/blog/article/2016/12/05/aeron-in-artery","{""url"": ""https://api.github.com/repos/apache/pekko/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2bUt,pekko,1658434861,40,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-31T14:01:54Z,2023-07-31T14:01:54Z,This may or may not be contentious but should be discussed on the pekko dev list before proceeding.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2bUt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58Syv6,pekko,2085301242,40,NA,zhenyanghua,6165894,Zhenyang Hua,,NA,2024-04-30T13:11:32Z,2024-04-30T13:11:32Z,Could you please reshare the original discussion thread? The link is invalid today.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58Syv6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58T2H8,pekko,2085577212,40,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-30T15:01:12Z,2024-04-30T15:01:12Z,"> Could you please reshare the original discussion thread? The link is invalid today.

Hi, he origin comments said it not easy to tune ,but on reddit, We cam see some people are using it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58T2H8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58W9nQ,pekko,2086394320,40,NA,pjfanning,11783444,PJ Fanning,,NA,2024-04-30T18:17:39Z,2024-04-30T18:17:39Z,It will take a lot of backing for us to remove support. We need to a really good reason to abandon support for some users.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58W9nQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/40,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58fcet,pekko,2088617901,40,NA,zhenyanghua,6165894,Zhenyang Hua,,NA,2024-05-01T15:16:47Z,2024-05-01T15:16:47Z,"I think some cases if performance is key while message dropping is acceptable, UDP is preferred. I am curious on the reasons listed in the issue:
> hard to deploy, little used, one extra dimension in hard to stabilize remoting

Could you elaborate more on those 3 concerns?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58fcet/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/41,https://api.github.com/repos/apache/pekko/issues/41,pekko,1443386394,41,Drop Classic remoting,He-Pin,501740,He-Pin(kerr),,OPEN,2022-11-10T07:20:42Z,2023-10-21T11:42:18Z,"Classic remoting (old, hard to diagnose bugs, another axis in difficult remoting test suite)

_Originally posted by @jrudolph in https://github.com/mdedetrich/akka-apache-project/discussions/8#discussioncomment-3904101_

It's currently using Netty 3","{""url"": ""https://api.github.com/repos/apache/pekko/issues/41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/41,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P4-nm,pekko,1340336614,41,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-12-07T03:54:21Z,2022-12-07T03:54:21Z,"refs : https://github.com/akka/akka/issues/31764

Akka dropped it in release 2.8.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P4-nm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/41,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hj5E3,pekko,1636798775,41,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-07-15T15:17:56Z,2023-07-15T15:17:56Z,Does the old transport really so slow？,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hj5E3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/41,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2cJR,pekko,1658438225,41,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-31T14:03:48Z,2023-07-31T14:03:48Z,I like the idea of doing this. Netty 3 is not a good version to be relying on. I don't think Netty 3 will have issues fixed in it any more. Would still need to be discussed on the Pekko dev list before proceeding.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2cJR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/41,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYRG,pekko,1773765702,41,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:41:16Z,2023-10-21T11:41:16Z,Adjusting milestone for 2.0.0 since community decision was made to keep classic remoting in order to comply with semver,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYRG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/46,https://api.github.com/repos/apache/pekko/issues/46,pekko,1450725806,46,Avoid subMaterialization for lazyFuture and lazySingle,He-Pin,501740,He-Pin(kerr),,CLOSED,2022-11-16T02:38:45Z,2024-08-14T18:02:27Z,"Currently, `lazyFuture` and `lazySingle` is implemented with `lazySource` which require a sub materialization, which can be avoid by composing or providing a dedicated graphstage.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/51,https://api.github.com/repos/apache/pekko/issues/51,pekko,1451339602,51,Update Git rules to follow work pattern.,Claudenw,2439838,Claude Warren,claude@xenei.com,CLOSED,2022-11-16T10:41:38Z,2023-04-14T10:40:45Z,"The github rules should not allow merging of pull requests when there are 

1. open changes requested.
2. ongoing conversations (not resolved conversations).

I am not certain how to configure this on the Apache git system.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/51,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OfJz7,pekko,1316789499,51,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2022-11-16T10:46:24Z,2022-11-16T10:46:24Z,pj assigning to you because you seem to have the experience in this realm.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OfJz7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/51,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OfNQZ,pekko,1316803609,51,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-16T10:55:38Z,2022-11-16T10:55:38Z,The documented features are at https://cwiki.apache.org/confluence/display/INFRA/git+-+.asf.yaml+features - I'll look later to see if I can spot something that we can use,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OfNQZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/51,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmjKS,pekko,1318728338,51,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-17T14:33:21Z,2022-11-17T14:33:21Z,"Especially with point 2, this to me I think this is too strict. I have been in cases where pull requests stuck open in perpetuity because someone forgets to click the ""resolve"" button. Either that or committers will just blindly hit resolve which at that point defeats the purpose of it.

Should we discuss in the mailing list? I think for now this is fine, we can always add stricter checks later if there is a consensus on it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmjKS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/51,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1yZL,pekko,1507272267,51,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T16:41:04Z,2023-04-13T16:41:04Z,"seems like we've got a resolution on this now, with the mandatory single reviewer . Could this be closed?

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1yZL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/54,pekko,1452548201,54,Should use `pekko` as HOCON config prefix rather than `akka`,gmethvin,171663,Greg Methvin,greg@methvin.net,CLOSED,2022-11-17T01:28:47Z,2022-12-02T12:53:50Z,"We should change our config loading and `reference.conf` to use `pekko` everywhere rather than `akka`. It looks like the config loading is mostly in the [`Settings`](https://github.com/apache/incubator-pekko/blob/9edbc602928c45822a695789589cd3371b3f9c6d/akka-actor/src/main/scala/akka/actor/ActorSystem.scala#L374) class, but that also exposes the raw `Config` instance, which is used directly to load `akka.*` configs in other classes.

It makes sense to have a way to support the `akka` configuration prefix instead of or in addition to the `pekko` prefix, but I know there was some question about whether to do it for 1.0. Given that config loading is mostly centralized it should be relatively simple to do.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmfIk,pekko,1318711844,54,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-17T14:21:54Z,2022-11-17T14:21:54Z,"Regarding making pekko work with akka configs, another option (which I have to look into whether its possible) is to create a pekko-akka-config-compat module which can use typesafe config's substitution capabilities to just load pekko modules as akka ones.

I have a personal preference to abstract these things away into a separate module so the main codebase is clean.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OmfIk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Oo-IO,pekko,1319363086,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-17T23:54:48Z,2022-11-17T23:54:48Z,"Right, I was thinking that too. Actually I think for most cases you could add `pekko = ${akka}` at the end of your config file. That wouldn't work for overrides using system properties but would probably get you most of the way there.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Oo-IO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PG6fd,pekko,1327212509,54,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-25T09:34:25Z,2022-11-25T09:34:25Z,"So after working on this PR https://github.com/apache/incubator-pekko/pull/58 I don't think that the naive `pekko = ${akka}` will work. This is due to the fact that its typical in akka's typesafe to have values that are direct references to other typesafe keys, i.e.

```
akka.persistence.journal.inmem {
    # Class name of the plugin.
    class = ""org.apache.pekko.persistence.journal.inmem.InmemJournal""
    # Dispatcher for the plugin actor.
    plugin-dispatcher = ""akka.actor.default-dispatcher""

    # Turn this on to test serialization of the events
    test-serialization = off
}
```

and in this case `akka.actor.default-dispatcher` refers to an actual `akka.actor.default-dispatcher` setting, i.e.

```
    default-dispatcher {
      # Must be one of the following
      # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a public constructor with
      # both com.typesafe.config.Config parameter and
      # org.apache.pekko.dispatch.DispatcherPrerequisites parameters.
      # PinnedDispatcher must be used together with executor=thread-pool-executor.
      type = ""Dispatcher""

      # Which kind of ExecutorService to use for this dispatcher
      # Valid options:
      #  - ""default-executor"" requires a ""default-executor"" section
      #  - ""fork-join-executor"" requires a ""fork-join-executor"" section
      #  - ""thread-pool-executor"" requires a ""thread-pool-executor"" section
      #  - ""affinity-pool-executor"" requires an ""affinity-pool-executor"" section
      #  - A FQCN of a class extending ExecutorServiceConfigurator
      executor = ""default-executor""

      # This will be used if you have set ""executor = ""default-executor"""".
      # If an ActorSystem is created with a given ExecutionContext, this
      # ExecutionContext will be used as the default executor for all
      # dispatchers in the ActorSystem configured with
      # executor = ""default-executor"". Note that ""default-executor""
      # is the default value for executor, and therefore used if not
      # specified otherwise. If no ExecutionContext is given,
      # the executor configured in ""fallback"" will be used.
      default-executor {
        fallback = ""fork-join-executor""
      }

      # This will be used if you have set ""executor = ""affinity-pool-executor""""
      # Underlying thread pool implementation is org.apache.pekko.dispatch.affinity.AffinityPool.
      # This executor is classified as ""ApiMayChange"".
      affinity-pool-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 4

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 0.8

        # Max number of threads to cap factor-based parallelism number to.
        parallelism-max = 64

        # Each worker in the pool uses a separate bounded MPSC queue. This value
        # indicates the upper bound of the queue. Whenever an attempt to enqueue
        # a task is made and the queue does not have capacity to accommodate
        # the task, the rejection handler created by the rejection handler specified
        # in ""rejection-handler"" is invoked.
        task-queue-size = 512

        # FQCN of the Rejection handler used in the pool.
        # Must have an empty public constructor and must
        # implement org.apache.pekko.actor.affinity.RejectionHandlerFactory.
        rejection-handler = ""org.apache.pekko.dispatch.affinity.ThrowOnOverflowRejectionHandler""

        # Level of CPU time used, on a scale between 1 and 10, during backoff/idle.
        # The tradeoff is that to have low latency more CPU time must be used to be
        # able to react quickly on incoming messages or send as fast as possible after
        # backoff backpressure.
        # Level 1 strongly prefer low CPU consumption over low latency.
        # Level 10 strongly prefer low latency over low CPU consumption.
        idle-cpu-level = 5

        # FQCN of the org.apache.pekko.dispatch.affinity.QueueSelectorFactory.
        # The Class of the FQCN must have a public constructor with a
        # (com.typesafe.config.Config) parameter.
        # A QueueSelectorFactory create instances of org.apache.pekko.dispatch.affinity.QueueSelector,
        # that is responsible for determining which task queue a Runnable should be enqueued in.
        queue-selector = ""org.apache.pekko.dispatch.affinity.FairDistributionHashCache""

        # When using the ""org.apache.pekko.dispatch.affinity.FairDistributionHashCache"" queue selector
        # internally the AffinityPool uses two methods to determine which task
        # queue to allocate a Runnable to:
        # - map based - maintains a round robin counter and a map of Runnable
        # hashcodes to queues that they have been associated with. This ensures
        # maximum fairness in terms of work distribution, meaning that each worker
        # will get approximately equal amount of mailboxes to execute. This is suitable
        # in cases where we have a small number of actors that will be scheduled on
        # the pool and we want to ensure the maximum possible utilization of the
        # available threads.
        # - hash based - the task - queue in which the runnable should go is determined
        # by using an uniformly distributed int to int hash function which uses the
        # hash code of the Runnable as an input. This is preferred in situations where we
        # have enough number of distinct actors to ensure statistically uniform
        # distribution of work across threads or we are ready to sacrifice the
        # former for the added benefit of avoiding map look-ups.
        fair-work-distribution {
          # The value serves as a threshold which determines the point at which the
          # pool switches from the first to the second work distribution schemes.
          # For example, if the value is set to 128, the pool can observe up to
          # 128 unique actors and schedule their mailboxes using the map based
          # approach. Once this number is reached the pool switches to hash based
          # task distribution mode. If the value is set to 0, the map based
          # work distribution approach is disabled and only the hash based is
          # used irrespective of the number of unique actors. Valid range is
          # 0 to 2048 (inclusive)
          threshold = 128
        }
      }
      // etc etc...
```

I think due to this plus other things (i.e. incompatibility in the wire protocol when changing from `akka` address to `pekko`) it makes more sense to just literally translate from akka to pekko and then only for the 1.0.x release branch of akka to write custom code that translates from akka to pekko. This allows current people who are running an Akka cluster to migrate to pekko and only having it in the 1.0.x branch means that we don't pollute the main codebase with these changes.

Thoughts?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PG6fd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PIs96,pekko,1327681402,54,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-25T16:31:52Z,2022-11-25T16:31:52Z,"> I think due to this plus other things (i.e. incompatibility in the wire protocol when changing from akka address to pekko) it makes more sense to just literally translate from akka to pekko and then only for the 1.0.x release branch of akka to write custom code that translates from akka to pekko.

1.1.x ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PIs96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PI3HP,pekko,1327722959,54,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-25T17:08:05Z,2022-11-25T17:08:05Z,"> 1.1.x ?

So if you are referring to code that is dealing with translating from Akka to Pekko (i.e. rolling release upgrades) I do earnestly think this should only sit in 1.0.x branch, the main reason being is that once 1.0.x is released I envisage that our `main` branch will be the `1.1.x` release branch and I believe there is merit in keeping that branch clean.

Furthermore, over time the `1.1.x` branch will divert from mainstream Akka and having such functionality in the 1.1.x branch can give the misleading impression that you can do a roll over upgrade from Akka to Pekko 1.1.x which I don't think is desirable because we are then going to be shooting yourselves in the foot (both technically speaking in making sure that such upgrades still work and even legally).

In short, if we are only going to guarantee migrating from Akka to Pekko 1.0.x (which I think is sensible) then these compatibility features (i.e. handling any wire incompatibilities, custom code to translate from Akka HOCON to Pekko HOCON) should only sit in 1.0.x branch. This to me is a good compromise, people currently running Akka clusters can migrate to Pekko, i.e. Akka (current version) -> Akka 2.6 (if neccessary) -> Pekko 1.0.x -> change current Akka config/s to Pekko config -> upgrade to Pekko 1.1.x while at the same time we can keep our `main` branch free of any Akka compatibility code cruft.

The only exception to this is making the `akka://` address configurable, I think there is general merit for this as a feature so I don't have a problem with that sitting in 1.1.x branch however only 1.0.x should have it as `[""pekko"", ""akka""]` for the default configuration where as 1.1.x should default to `[""pekko""]` (remember with HOCON you can always add more options to the list if you still want to use `""akka""`). To be clear, my though process in advocating for this is that aside from technical considerings, doing such a thing also sends a strong signal on what we are willing to support.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PI3HP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PJIyl,pekko,1327795365,54,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-25T19:04:18Z,2022-11-25T19:04:18Z,"I think we should change all the config names to `pekko.` in v1.0.0. We can provide migration support with external tools, maybe Scalafix scripts.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PJIyl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKrbE,pekko,1328199364,54,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-27T08:55:26Z,2022-11-27T08:55:26Z,"I understand the reasoning of 1.1 already diverging.

I would leave some space for vanilla rename bugfix releases, before adding sparkles on top.

So don't put the config compat code in 1.0.1, but in e.g 1.0.10 or 1.0.100. That leaves 9 or 99 slots for fixes on the vanilla rename code and leaves the choice to pick up additional bugs due to compat code.

I for one rather hit the rename bugs than have those occluded by compat code.

I know this will be another one of those color and taste situations.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKrbE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKuC2,pekko,1328210102,54,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-27T09:59:02Z,2022-11-27T09:59:02Z,"Thats perfectly reasonable for more, in fact I would say its preferable to have more iterative releases then doing it in one big bang.

@gmethvin Do you want to take this on?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKuC2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKuNb,pekko,1328210779,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-27T10:02:24Z,2022-11-27T10:02:24Z,"Ideally we can do this without having to complicate the existing code much. If we can put the compat code in a separate module or make it customizable by the user, then I don't see any reason why we need to only have it in certain versions. We can just add a hook to customize the config loading and keep it there.

For example, we could define an interface `PekkoConfigLoader.load()` to replace our existing `ConfigFactory.load()`:

```scala
trait PekkoConfigLoader {
  def load(): Config
}
object PekkoConfigLoader {
  def load(): Config = sys.props.get(""pekko.config-loader"") match {
    case Some(className) =>
      Class.forName(className).getConstructor().newInstance().asInstanceOf[PekkoConfigLoader].load()
    case None =>
      ConfigFactory.load()
  }
}
```

Then anyone can define their own class that extends this trait and set a system property `pekko.config-loader=com.example.MyConfigLoaderImpl`. That way we could include this logic in a separate module and have the user configure it themselves.

I'm happy to take this on if we can agree on the right approach here.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKuNb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PK0ab,pekko,1328236187,54,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-27T12:26:28Z,2022-11-27T12:26:28Z,"If it requires a separate module to activate, that's probably sufficient shielding. I agree this proposal is simple enough to state that without the module it equates to the original.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PK0ab/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM8FW,pekko,1328791894,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-28T09:41:38Z,2022-11-28T09:41:38Z,"Just to expand on what I was suggesting above: it should be possible to generate an equivalent Pekko config from an existing Akka config using a custom config loader. We can handle the dispatcher references by also cloning the generated `pekko` config to the `akka` config prefix. In other words we'd make `akka` and `pekko` act like aliases of each other.

We really should do this at each level of config loading: `reference.conf`, `application.conf`, and system/env overrides. For example, we want `akka` settings in `application.conf` to override `pekko` settings in `reference.conf`. Within the same config file, it probably makes sense to just prefer `pekko` over `akka` and assume users will migrate everything in the file all at once, though it gets more complicated when you consider includes.

The loading logic might look something like this:

```scala
def alias(config: Config): Config = {
  val pekkoCloned =
    if (config.hasPath(""pekko""))
      config.getConfig(""pekko"").atPath(""pekko"")
        .withFallback(config.getConfig(""pekko"").atPath(""akka""))
    else ConfigFactory.empty
  val akkaCloned =
    if (config.hasPath(""akka""))
      config.getConfig(""akka"").atPath(""pekko"")
        .withFallback(config.getConfig(""akka"").atPath(""akka""))
    else ConfigFactory.empty
  config.withoutPath(""pekko"").withoutPath(""akka"").withFallback(pekkoCloned).withFallback(akkaCloned)
}

alias(ConfigFactory.defaultOverrides())
  .withFallback(alias(ConfigFactory.defaultApplication()))
  .withFallback(alias(ConfigFactory.defaultReference()))
  .resolve()
```

I think this is probably good enough for most purposes, assuming it works as intended.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM8FW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM_Ev,pekko,1328804143,54,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-28T09:53:04Z,2022-11-28T09:53:04Z,"I still have a preference for only having this in the 1.0.x branch, I think there is a lot of merit gained in having the main codebase as simple as possible (plus the other concerns I stated earlier). However this decision is something that will likely need to be voted on and it shouldn't stop prototyping to figure out the best path forward.

> The loading logic might look something like this:

Is this going to work with the problem I described at https://github.com/apache/incubator-pekko/issues/54#issuecomment-1327212509 ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM_Ev/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PNOaz,pekko,1328866995,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-28T10:43:00Z,2022-11-28T10:43:00Z,"> I still have a preference for only having this in the 1.0.x branch, I think there is a lot of merit gained in having the main codebase as simple as possible (plus the other concerns I stated earlier).

Sure, that's why I'd want to make sure we keep the changes in Pekko simple (e.g. adding a config loader hook) and put the complex logic somewhere else. Still maybe we only want to keep this hook for compatibility in 1.0.x, but I don't really have a sense of how it would be used in the real world, so it's hard to tell if that's a good decision.

> Is this going to work with the problem I described at https://github.com/apache/incubator-pekko/issues/54#issuecomment-1327212509 ?

I think it should handle that case, yes, because it clones the final merged Pekko config to the `akka` prefix as well. So in the example you gave, Pekko would read the value for `pekko.persistence.journal.inmem.plugin-dispatcher` as `akka.actor-default-dispatcher`, since that's just a string in the config. It would then look up the config at `akka.actor.default-dispatcher` which would have the same value as `pekko.actor.default-dispatcher`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PNOaz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PN7Bx,pekko,1329049713,54,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-11-28T12:59:55Z,2022-11-28T12:59:55Z,"If the hook is really simple and defaults to the classic behavior I think it's reasonable to have in `1.0.x` releases.
With the compat code split out to a completely separate codebase, so it's opt-in. It also means the compat code ca have a separate release cycle.

I'd argue you can use .conf files, or Java SPI so that the act of including the compat module on the classpath activates it (be it that you can also explicitly deactivate it). ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PN7Bx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PSPoi,pekko,1330182690,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-29T07:13:00Z,2022-11-29T07:13:00Z,"For 1.1.x, are we thinking to just remove the hook for config and defaulting back to the old behavior? That seems pretty dangerous because it might not be obvious to the user if the behavior changed after an upgrade. If we want to remove the hook, I'd suggest maybe deprecating it first, then in a future version have it throw an exception when you attempt to use it.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PSPoi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PSU8n,pekko,1330204455,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-29T07:38:02Z,2022-11-29T07:38:02Z,"Also I noticed Typesafe Config already has a mechanism to customize the config loading called [`ConfigLoadingStrategy`](https://github.com/lightbend/config/blob/main/config/src/main/java/com/typesafe/config/ConfigLoadingStrategy.java), but unfortunately that only works for the application config, not system properties or reference config, so it's not quite what we want. We might be able to hack it to do what we want though...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PSU8n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/54,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Pd-ai,pekko,1333257890,54,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-12-01T06:05:26Z,2022-12-01T06:05:26Z,"I'm working on the akka to pekko config change in #63.

I noticed also in some of the serialization configs there are values that contain `akka` that need to be changed, for example: https://github.com/apache/incubator-pekko/blob/9be4cad14fdab9702a8db1c657a3fcac135bba48/akka-cluster/src/main/resources/reference.conf#L372

That would require some more specific logic to support in the akka compatibility layer.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Pd-ai/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/56,pekko,1453612133,56,Submit pekko to scala-steward?,He-Pin,501740,He-Pin(kerr),,CLOSED,2022-11-17T16:13:59Z,2023-10-13T11:32:33Z,"I think only Akka is there, but not pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Op7do,pekko,1319614312,56,NA,jxnu-liguobin,29496873,梦境迷离,dreamylost@outlook.com,NA,2022-11-18T06:47:14Z,2022-11-18T06:47:14Z,Why did you become a member? 😅 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Op7do/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OqD__,pekko,1319649279,56,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-11-18T07:37:49Z,2022-11-18T07:37:49Z,"> Why did you become a member? 😅 

MAKE YOUR PROGRESS BROS","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OqD__/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM-X2,pekko,1328801270,56,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-28T09:50:27Z,2022-11-28T09:50:27Z,"I was also thinking of this, nothing against it. Just need to find the right time to do it.

Only thing that comes to mind is that we need to be quite cautious at least when it comes to pekko core using scala steward due to strict binary compatibility guarantees however for repos like pekko-connectors it makes definite sense.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PM-X2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5POM7B,pekko,1329123009,56,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-28T13:45:40Z,2022-11-28T13:45:40Z,"For v1.0.0 release, we probably only want to upgrade dependency jar versions where there is a security issue or serious bug in the dependency jar.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5POM7B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5POk2z,pekko,1329221043,56,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-28T14:38:23Z,2022-11-28T14:38:23Z,"> For v1.0.0 release, we probably only want to upgrade dependency jar versions where there is a security issue or serious bug in the dependency jar.

Actually for that same reason I think it might make sense to just add scala-steward to the `1.1.x` branch when its setup. If there is some CVE/serious bug in a dependency we would likely know about it aside from scala-steward.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5POk2z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R0cgc,pekko,1372702748,56,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-05T20:23:13Z,2023-01-05T20:23:13Z,"https://github.com/apache/incubator-pekko/pull/86 might be a useful first step - allowing users to run `sbt dependencyUpdates`.

The output is currently:
```
[info] Found 1 dependency update for pekko-root
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 1 dependency update for pekko-protobuf-v3
[info]   com.google.protobuf:protobuf-java:optional;provided : 3.16.1 -> 3.16.3 -> 3.21.12
[info] Found 2 dependency updates for pekko-actor
[info]   org.scala-lang.modules:scala-java8-compat : 1.0.0  -> 1.0.2  
[info]   org.scala-lang:scala-library              : 2.13.8 -> 2.13.10
[info] Found 4 dependency updates for pekko-pki
[info]   com.hierynomus:asn-one       : 0.5.0             -> 0.6.0          
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10                   
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14         
[info]   org.slf4j:slf4j-api          : 1.7.36                      -> 2.0.6
[info] Found 4 dependency updates for pekko-osgi
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5                    
[info]   commons-io:commons-io:test          : 2.11.0                      -> 20030203.000550
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10                             
[info]   org.scalatest:scalatest:test        : 3.1.4             -> 3.2.14                   
[info] Found 4 dependency updates for pekko-testkit
[info]   io.dropwizard.metrics:metrics-core:test : 4.2.10 -> 4.2.15           
[info]   io.dropwizard.metrics:metrics-jvm:test  : 4.2.10 -> 4.2.15           
[info]   org.scala-lang:scala-library            : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test            : 3.1.4             -> 3.2.14
[info] Found 4 dependency updates for pekko-stream
[info]   com.typesafe:ssl-config-core         : 0.4.3             -> 0.6.1 
[info]   org.reactivestreams:reactive-streams : 1.0.3  -> 1.0.4            
[info]   org.scala-lang:scala-library         : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test         : 3.1.4             -> 3.2.14
[info] Found 5 dependency updates for pekko-actor-tests
[info]   com.google.jimfs:jimfs:test       : 1.1                -> 1.2                        
[info]   commons-codec:commons-codec:test  : 1.15                           -> 20041127.091804
[info]   org.scala-lang:scala-library      : 2.13.8  -> 2.13.10                               
[info]   org.scalatest:scalatest:test      : 3.1.4              -> 3.2.14                     
[info]   org.scalatestplus:junit-4-13:test : 3.1.4.0            -> 3.2.14.0                   
[info] Found 3 dependency updates for pekko-slf4j
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5         
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10                  
[info]   org.slf4j:slf4j-api                 : 1.7.36                     -> 2.0.6
[info] Found 2 dependency updates for pekko-stream-testkit
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 5 dependency updates for pekko-persistence
[info]   commons-codec:commons-codec:test  : 1.15                           -> 20041127.091804
[info]   commons-io:commons-io:test        : 2.11.0                         -> 20030203.000550
[info]   org.scala-lang:scala-library      : 2.13.8  -> 2.13.10                               
[info]   org.scalatest:scalatest:test      : 3.1.4              -> 3.2.14                     
[info]   org.scalatestplus:junit-4-13:test : 3.1.4.0            -> 3.2.14.0                   
[info] Found 2 dependency updates for pekko-coordination
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 2 dependency updates for pekko-discovery
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 2 dependency updates for pekko-actor-typed
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10         
[info]   org.slf4j:slf4j-api          : 1.7.36            -> 2.0.6
[info] Found 4 dependency updates for pekko-stream-tests-tck
[info]   org.reactivestreams:reactive-streams-tck:test : 1.0.3   -> 1.0.4              
[info]   org.scala-lang:scala-library                  : 2.13.8  -> 2.13.10            
[info]   org.scalatest:scalatest:test                  : 3.1.4              -> 3.2.14  
[info]   org.scalatestplus:testng-6-7:test             : 3.1.4.0            -> 3.2.10.0
[info] Found 2 dependency updates for pekko-persistence-tck
[info]   org.scala-lang:scala-library    : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:compile : 3.1.4             -> 3.2.14
[info] Found 4 dependency updates for pekko-actor-testkit-typed
[info]   ch.qos.logback:logback-classic:optional;provided;test : 1.2.11             -> 1.4.5   
[info]   org.scala-lang:scala-library                          : 2.13.8  -> 2.13.10            
[info]   org.scalatest:scalatest:optional;provided;test        : 3.1.4              -> 3.2.14  
[info]   org.scalatestplus:junit-4-13:test                     : 3.1.4.0            -> 3.2.14.0
[info] Found 10 dependency updates for pekko-serialization-jackson
[info]   com.fasterxml.jackson.core:jackson-annotations              : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.core:jackson-core                     : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.core:jackson-databind                 : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.dataformat:jackson-dataformat-cbor    : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.datatype:jackson-datatype-jdk8        : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.datatype:jackson-datatype-jsr310      : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.module:jackson-module-parameter-names : 2.11.4            -> 2.14.1
[info]   com.fasterxml.jackson.module:jackson-module-scala           : 2.11.4            -> 2.14.1
[info]   org.scala-lang:scala-library                                : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test                                : 3.1.4             -> 3.2.14
[info] Found 1 dependency update for pekko-actor-typed-tests
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 7 dependency updates for pekko-remote
[info]   com.google.jimfs:jimfs:test            : 1.1               -> 1.2    
[info]   com.google.protobuf:protobuf-java:test : 3.16.1 -> 3.16.3  -> 3.21.12
[info]   io.aeron:aeron-client:optional         : 1.38.1            -> 1.40.0 
[info]   io.aeron:aeron-driver:optional         : 1.38.1            -> 1.40.0 
[info]   org.agrona:agrona                      : 1.15.1 -> 1.15.2  -> 1.17.1 
[info]   org.scala-lang:scala-library           : 2.13.8 -> 2.13.10           
[info]   org.scalatest:scalatest:test           : 3.1.4             -> 3.2.14 
[info] Found 1 dependency update for pekko-stream-typed
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 1 dependency update for pekko-multi-node-testkit
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 2 dependency updates for pekko-persistence-shared
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10         
[info] Found 4 dependency updates for pekko-stream-tests
[info]   com.google.jimfs:jimfs:test  : 1.1               -> 1.2                      
[info]   commons-io:commons-io:test   : 2.11.0                      -> 20030203.000550
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10                             
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14                   
[info] Found 3 dependency updates for pekko-persistence-query
[info]   commons-io:commons-io:test   : 2.11.0                      -> 20030203.000550
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10                             
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14                   
[info] Found 4 dependency updates for pekko-remote-tests
[info]   io.aeron:aeron-client        : 1.38.1            -> 1.40.0
[info]   io.aeron:aeron-driver        : 1.38.1            -> 1.40.0
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 2 dependency updates for pekko-cluster
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 3 dependency updates for pekko-distributed-data
[info]   org.lmdbjava:lmdbjava        : 0.7.0             -> 0.8.2 
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 2 dependency updates for pekko-cluster-tools
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14
[info] Found 6 dependency updates for pekko-cluster-metrics
[info]   ch.qos.logback:logback-classic:test          : 1.2.11                  -> 1.4.5            
[info]   io.kamon:sigar-loader:optional;provided;test : 1.6.6-rev002 -> 1.6.6                       
[info]   org.scala-lang:scala-library                 : 2.13.8       -> 2.13.10                     
[info]   org.scalatestplus:mockito-3-4:test           : 3.1.4.0                 -> 3.2.10.0         
[info]   org.slf4j:jul-to-slf4j:test                  : 1.7.36                              -> 2.0.6
[info]   org.slf4j:log4j-over-slf4j:test              : 1.7.36                              -> 2.0.6
[info] Found 3 dependency updates for pekko-bench-jmh
[info]   ch.qos.logback:logback-classic : 1.2.11            -> 1.4.5         
[info]   org.jctools:jctools-core       : 3.3.0                      -> 4.0.1
[info]   org.scala-lang:scala-library   : 2.13.8 -> 2.13.10                  
[info] Found 1 dependency update for pekko-cluster-typed
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 3 dependency updates for pekko-cluster-sharding
[info]   commons-io:commons-io:test   : 2.11.0                      -> 20030203.000550
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10                             
[info]   org.scalatest:scalatest:test : 3.1.4             -> 3.2.14                   
[info] Found 2 dependency updates for pekko-persistence-typed
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10         
[info] Found 3 dependency updates for pekko-persistence-testkit
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5 
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test        : 3.1.4             -> 3.2.14
[info] Found 1 dependency update for pekko-cluster-sharding-typed
[info]   org.scala-lang:scala-library : 2.13.8 -> 2.13.10
[info] Found 3 dependency updates for pekko-persistence-typed-tests
[info]   ch.qos.logback:logback-classic:test : 1.2.11            -> 1.4.5 
[info]   org.scala-lang:scala-library        : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test        : 3.1.4             -> 3.2.14
[info] Found 3 dependency updates for pekko-docs
[info]   com.google.code.gson:gson:test : 2.9.1             -> 2.10  
[info]   org.scala-lang:scala-library   : 2.13.8 -> 2.13.10          
[info]   org.scalatest:scalatest:test   : 3.1.4             -> 3.2.14
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R0cgc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2kwx,pekko,1658473521,56,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-31T14:23:42Z,2023-07-31T14:23:42Z,"Regarding adding this to scala steward (I think now is a good time with v1.1.x), one option is to use the public github actions runner and the other is to use a runner within the Apche org (which is quite easy to setup, see https://github.com/aiven/guardian-for-apache-kafka/blob/main/.github/workflows/scala-steward.yml as an example).

There are advantages to having the github actions run within Apache, aside from them being able to audit it/specify a specific signing key for commits the biggest one is that since the github runner is running within the Apache org, it is able to access secrets which is useful for modules such as pekko-connectors which do integration tests against external services such as s3. Long story short it will mean that when scala-steward makes a bump to a library version, we can validate that it doesn't some regression since that PR that scala steward creates can do integration tests.

@pjfanning wdyt? I think the Apache option is worth exploring, I can make an INFRA ticket about it and see how open they are to it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2kwx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2xvF,pekko,1658526661,56,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-31T14:49:13Z,2023-07-31T14:49:13Z,@mdedetrich see what INFRA say. That is a lot of very specific secrets that we need.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i2xvF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nrzzL,pekko,1739537611,56,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-28T15:29:24Z,2023-09-28T15:29:24Z,@mdedetrich can we just use VirtusLabs hosted approach for now? It is better than nothing.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nrzzL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/56,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nsV0p,pekko,1739676969,56,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-09-28T16:43:03Z,2023-09-28T16:43:03Z,"> @mdedetrich can we just use VirtusLabs hosted approach for now? It is better than nothing.

I just pinged INFRA and they updated the urgency of the ticket","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nsV0p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/57,https://api.github.com/repos/apache/pekko/issues/57,pekko,1454978205,57,Add CodeQL workflow for GitHub code scanning?,He-Pin,501740,He-Pin(kerr),,CLOSED,2022-11-18T11:51:22Z,2022-11-19T02:03:13Z,"Which will help reviewing.
demo: https://github.com/real-logic/agrona/pull/268
https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/57,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrIJR,pekko,1319928401,57,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-18T12:22:35Z,2022-11-18T12:22:35Z,I don't think codeql supports Scala. Might be worth testing on a separate Github fork before we turn it on for Pekko.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrIJR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/57,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrVYh,pekko,1319982625,57,NA,He-Pin,501740,He-Pin(kerr),,NA,2022-11-18T13:16:33Z,2022-11-18T13:16:33Z,"Close for now, will reopen one day.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OrVYh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/57,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OuQRa,pekko,1320748122,57,NA,gmethvin,171663,Greg Methvin,greg@methvin.net,NA,2022-11-19T02:03:12Z,2022-11-19T02:03:12Z,Snyk is a similar solution and supports Scala: https://docs.snyk.io/products/snyk-open-source/language-and-package-manager-support/snyk-for-scala,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5OuQRa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/59,https://api.github.com/repos/apache/pekko/issues/59,pekko,1461259559,59,Don't use sbtx in the CI,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2022-11-23T08:17:53Z,2023-01-03T10:32:49Z,"In this PR https://github.com/apache/incubator-pekko/pull/53#discussion_r1024985382 to get CI running we ended up having to use sbtx instead of plain sbt due to having to upgrade a github action. It turns out that the change to sbtx was that in the older versions of the github action, it was aliasing `sbt` to `sbtx` (see https://discord.com/channels/632150470000902164/922600050989875282/1042858091387043872). We should investigate into using pure sbt rather than sbtx since sbtx isn't really supported that much anymore

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/59,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PJJ_l,pekko,1327800293,59,NA,pjfanning,11783444,PJ Fanning,,NA,2022-11-25T19:13:43Z,2022-11-25T19:13:43Z,sbtx is just a script to run sbt commands. It still respects the projects/build.properties and the actual sbt runtime that is needed to run the sbt version are still downloaded as they would be with the standard sbt script.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PJJ_l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/59,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKNaS,pekko,1328076434,59,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2022-11-26T16:35:30Z,2022-11-26T16:35:30Z,"This I understand, the reason behind this issue is that sbtx is an ancient script (originally created by paulp) which was mainly created because in the old days of sbt there was a lot of ceremony in setting up sbt, something that is now largely irrelevant because a lot of that functionality was moved into official sbt. If you read the linked discord ticket you will also gets similar sentiment regarding the usage of sbtx.

Due to this (and hence the main motivator for this ticket), sbtx is not installed anymore on distros/Windows/OSX. Everyone just downloads/installs/sets up pure SBT which comes to the final point which I want to get to, which is simulating the CI on your local machine (a problem that I experienced when I worked on non trivial PR's).

Note that this ticket is not high priority, but its definitely ideal to use `sbt` rather than `sbtx` for these reasons.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5PKNaS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/66,https://api.github.com/repos/apache/pekko/issues/66,pekko,1472057937,66,Classes use Akka in their names,gmethvin,171663,Greg Methvin,greg@methvin.net,CLOSED,2022-12-01T22:47:34Z,2022-12-03T10:49:32Z,"There are many classes that use `Akka` in their names in the public API—like `AkkaException`, `AkkaClusterTypedSerializer`, `AkkaJacksonModule`, etc.—as well as many tests that start with `Akka`. The `Akka` name should either renamed to `Pekko` or removed entirely. In several cases these names are used in configuration as well.

This will also complicate the code migration for Akka projects, so we should take note of which classes have changed names.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/68,pekko,1473909940,68,Figure out classes that need to be renamed for migration script,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2022-12-03T10:51:29Z,2023-05-24T14:19:17Z,In https://github.com/apache/incubator-pekko/pull/67 we renamed all of the classes that contain `Akka` in the name to `Pekko`. We should prune these renamed classes and figure out which ones are relevant for the migration script.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2se8,pekko,1339738044,68,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-06T17:38:00Z,2022-12-06T17:38:00Z,part of #22 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5P2se8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aESSt,pekko,1511072941,68,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-17T10:14:15Z,2023-04-17T10:14:15Z,"Following discussion in #22 , Could we label as 'nice to have (low prio)' ? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aESSt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEcJ2,pekko,1511113334,68,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-17T10:46:51Z,2023-04-17T10:46:51Z,"Not entirely sure if this is low priority or not, my initial assumption is that this would in fact be very useful and hence somewhat critical for people migrating massive akka to pekko codebases.

It is true that this will be a bit of work however there is already prior art for using scala-migrate in pekko http. I will remove it from the project since it does require quite a bit of work. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEcJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEdSm,pekko,1511117990,68,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-04-17T10:51:11Z,2023-04-17T10:51:11Z,"But I think that part can come up later, a 1.0.0 release can be used for newly started projects.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEdSm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEeWE,pekko,1511122308,68,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-17T10:54:51Z,2023-04-17T10:54:51Z,"True. I also just realized that while scala-migrate works for Scala projects, it doesn't work for Java and a lot of people do use akka in Java projects.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEeWE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/68,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDs5F,pekko,1561251397,68,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T14:19:17Z,2023-05-24T14:19:17Z,removed from 1.0.0 milestone - it might be useful just to close it (@mdedetrich) - we have https://github.com/apache/incubator-pekko/issues/22 already,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDs5F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/73,https://api.github.com/repos/apache/pekko/issues/73,pekko,1488226760,73,Build fails on windows,sdeigm,46769049,,,CLOSED,2022-12-10T08:39:29Z,2023-01-05T14:17:32Z,"Building the project on windows using sbt compile fails with the following exception:

`[info] welcome to sbt 1.7.1 (Temurin Java 1.8.0_332)
[info] loading settings for project incubator-pekko-build from plugins.sbt ...
[info] loading project definition from C:\Entwicklung\incubator-pekko\project
[info] loading settings for project pekko from build.sbt ...
[info] resolving key references (62652 settings) ...
java.util.regex.PatternSyntaxException: Unexpected internal error near index 1
\
        at java.util.regex.Pattern.error(Pattern.java:1969)
        at java.util.regex.Pattern.compile(Pattern.java:1708)
        at java.util.regex.Pattern.<init>(Pattern.java:1352)
        at java.util.regex.Pattern.compile(Pattern.java:1028)
        at java.lang.String.split(String.java:2380)
        at java.lang.String.split(String.java:2422)
        at org.apache.pekko.PekkoValidatePullRequest$$anonfun$$nestedInanonfun$buildSettings$1$1.applyOrElse(ValidatePullRequest.scala:49)
        at org.apache.pekko.PekkoValidatePullRequest$$anonfun$$nestedInanonfun$buildSettings$1$1.applyOrElse(ValidatePullRequest.scala:47)
        at scala.PartialFunction.$anonfun$runWith$1$adapted(PartialFunction.scala:145)
        at scala.collection.Iterator.foreach(Iterator.scala:943)
        at scala.collection.Iterator.foreach$(Iterator.scala:943)
        at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
        at scala.collection.IterableLike.foreach(IterableLike.scala:74)
        at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
        at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
        at scala.collection.TraversableLike.collect(TraversableLike.scala:407)
        at scala.collection.TraversableLike.collect$(TraversableLike.scala:405)
        at scala.collection.AbstractTraversable.collect(Traversable.scala:108)
        at org.apache.pekko.PekkoValidatePullRequest$.$anonfun$buildSettings$1(ValidatePullRequest.scala:47)`


The problem is caused by using the file.separator system property as regular expression in ValidatePullRequest.scala:49. On Windows this is the backslash which is not a valid regular expression.

The problem can be fixed by using a hardcoded slash as splitting regular expression. This also works on windows.        
        
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/73/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/73,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qv90O,pekko,1354751246,73,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-16T13:16:36Z,2022-12-16T13:16:36Z,@sdeigm any interest in submitting a PR yourself? A lot of us don't have Windows machines to try out build changes like this. The CI build will find out if you break the Linux build.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qv90O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/73,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qv_Ox,pekko,1354757041,73,NA,sdeigm,46769049,,,NA,2022-12-16T13:20:30Z,2022-12-16T13:20:30Z,"Ok, I will give it a try.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qv_Ox/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/74,https://api.github.com/repos/apache/pekko/issues/74,pekko,1500181229,74,Need to put LICENSE and NOTICE file in every pekko jar META-INF/ dir,pjfanning,11783444,PJ Fanning,,CLOSED,2022-12-16T13:10:05Z,2023-01-06T11:31:44Z,"If you look at any ASF jar, you will find these 2 files.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/74/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/74,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qw9Qd,pekko,1355011101,74,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-12-16T14:58:33Z,2022-12-16T14:58:33Z,Any known ASF SBT built projects? (hence prior art),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Qw9Qd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/74,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5RIQP_,pekko,1361118207,74,NA,pjfanning,11783444,PJ Fanning,,NA,2022-12-21T10:12:59Z,2022-12-21T10:12:59Z,"I did a quick search around Apache projects and didn't find any using sbt. I'm sure other projects use sbt, just not the obvious Scala ones like Spark, Kafka, Linkis, Sedona, Flink, Kyuubi.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5RIQP_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/74,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5RO4EJ,pekko,1362854153,74,NA,spangaer,677147,Jean-Luc Deprez,,NA,2022-12-22T13:42:17Z,2022-12-22T13:42:17Z,"Bummer.

If this hasn't moved by second half of January, I might have stab at it. When the project started I already thought this was a wonderfully boring task, that someone would have to do eventually 😋 

If someone else want to take it up before, I really don't mind 😉 . No dibs here, I just won't get to it sooner.


Unless it should just be a copy of the files sitting at the repo root? Because in that case 2 symlinks can do wonders. 🤷 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5RO4EJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/74,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R3fl6,pekko,1373501818,74,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-06T11:31:44Z,2023-01-06T11:31:44Z,#77 is merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R3fl6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/78,https://api.github.com/repos/apache/pekko/issues/78,pekko,1508701786,78,need to build source distributions,pjfanning,11783444,PJ Fanning,,CLOSED,2022-12-23T00:18:12Z,2023-05-28T10:23:08Z,"Under ASF guidelines, projects deliver source releases. Binaries like jars are a convenience.

See https://logging.apache.org/log4j/2.x/download.html for an idea of what the official downloads are meant to look like.

We will deliver jars to Maven Central too - but we also need to these source and binary distributions - typically in tgz and zip formats.

https://github.com/apache/daffodil appears to use sbt-native-packager plugin to create these. Release are downloaded from https://daffodil.apache.org/releases/3.4.0/

https://github.com/apache/incubator-nlpcraft also has a sbt build (not many ASF projects do) - but it also has a maven build and it isn't immediately clear how they package their distros.

There are other sbt plugins that may be a better fit - https://index.scala-lang.org/xerial/sbt-pack is one worth looking at

The source archive will probably just be a snapshot of the files in the git repo at release time - possibly with some stuff pruned. We should probably have a separate markdown file that describes the sbt commands to build the jars and docs.

The binary archive is a bit more problematic. For an app like Apache Spark, the bin archive provides a 1 stop solution for getting all the jars and the shell scripts to run spark-submit, the Spark REPL, etc.
A Pekko binary archive would include all the Pekko jars built for this Git repo and all the dependency jars. We should probably aim to have one or more sample apps and the shell (or sbt) scripting necessary to run those sample apps. These sample apps can be very simple examples that just prove that the jars all work together.

## References

* https://infra.apache.org/release-distribution","{""url"": ""https://api.github.com/repos/apache/pekko/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/78,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T_7Jf,pekko,1409266271,78,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-30T20:11:29Z,2023-01-30T20:11:29Z,"I couldn't really find any sbt plugins that support generating source distributions in the right format.

I have worked on some prototype code that can ultimately be rewritten to work in sbt - https://github.com/pjfanning/source-dist","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T_7Jf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/78,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFfa,pekko,1566070746,78,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T10:23:07Z,2023-05-28T10:23:07Z,we have a solution - I'm sure it could be better but I think it is sufficient for a 1.0.0 release,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFfa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/85,pekko,1521143763,85,Automate the release,pjfanning,11783444,PJ Fanning,,OPEN,2023-01-05T17:55:20Z,2023-05-24T14:14:07Z,"* sbt has good plugins for doing releases to Nexus - note ASF has its own Nexus instance, we don't use Sonatype. https://repository.apache.org/
* also need to gpg sign and generate SHA256/SHA512 digests for the source and binary distributions (#78)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7c-Z,pekko,1374539673,85,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-07T16:58:50Z,2023-01-07T16:58:50Z,"Since the core pekko build is really complicated, we could use https://github.com/apache/incubator-pekko/issues/92 as a test bed for creating an automated release (its going to be needed at some point anyways). Once its figured out and working for `sbt-paradox-pekko` its going to be a lot simpler to then just add it into pekko.

In regards to the plugins to automate a release, the most ideal would be to use [sbt-ci-release](https://github.com/sbt/sbt-ci-release) however it does seem to be tied to sonatype, the nice thing about sbt-ci-release is it completely automates the process, a release is triggered just be pushing a git tag but this may be too modern for Apache and might go against some of their established processes. Another option is [sbt-release](https://github.com/sbt/sbt-release) which is a bit more manual/old-school however it allows you to customize the release process as you want and then you would just do an `sbt release` to trigger a release. Also as a bonus, @jrudolph has actually contributed to sbt-release so we have some familiarity with it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7c-Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7lvY,pekko,1374575576,85,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-07T19:00:27Z,2023-01-07T19:00:27Z,I use sbt-typelevel-ci-release - which appears to be a more active copy of [sbt-ci-release](https://github.com/sbt/sbt-ci-release).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7lvY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R8SJ8,pekko,1374757500,85,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-08T08:28:31Z,2023-01-08T08:28:31Z,"Afaik its not that sbt-typelevel-ci-release is more maintained but rather it contains additional typelevel'isms related to their org's standards for releasing software.

In any case I was talking casually about these sbt release plugins to other Apache people and there appeared to be some hesitation, one given example is whether its proper in the eyes of Apache Security to store keys as secrets on github (which would be necessary for sbt-ci-reease/sbt-typelevel-ci-release). On the surface sbt-release seems to be closer to the Apache way of releasing things and most importantly isn't tied to sonatype.

As an example, since the steps in sbt-release can be completely customized, its possible to put the ""copy source code into Apache's SVN repo"" as part of the release step (at least in Apache's view, this is the only thing that constitutes as an actual release. Everything additional such as uploading jar's to maven is just for user convenience).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R8SJ8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvMB1,pekko,1404878965,85,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T11:32:53Z,2023-01-26T11:32:53Z,"This PR is related to using sbt-ci-release to do release management https://github.com/apache/incubator-pekko/pull/129 . In summary it may be possible to use sbt-ci-release by just changing the sonatype host to `repository.apache.org`, hopefully the Apache Nexus repo is close enough to OS sonatype that they accept the same way of publishing (i.e. bundle releases may not work with Apache Nexus, we will have to find out).

If not then we will have to use something like sbt-release which isn't hardcoded to use sbt-sonatype.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvMB1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvOqr,pekko,1404889771,85,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T11:44:51Z,2023-01-26T11:44:51Z,"> * we don't use Sonatype

Maybe we should clarify what a release is and what the desired outcome of doing a release is. How do artifacts end up on Maven Central if not going through Sonatype? Let's start listing all the steps necessary to do different kinds of releases (snapshots, RCs, and GA) and only then start about automating any of it. I imagine this is at least partly about what Apache considers a release? If yes, then we should clarify what it entails.

I would consider `sbt-ci-release` to be a tool to work with sonatype. If we don't go through sonatype (or a process very similar to sonatype with staging repos etc), we probably should not use it. Afaik, the main reason it was created was that sonatype (Nexus) needs some manual handholding to finally publish something to Maven Central.

AFAIK sbt-release is a plugin to organize a release-process that has multiple steps but is more abstract than publishing to a repository.

If this is just about pushing artifacts to a maven-compatible repository, we might not need any plugins for just that.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvOqr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvPtK,pekko,1404894026,85,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T11:49:40Z,2023-01-26T11:49:40Z,"One of the nice things about using sbt-release instead of sbt-ci-release is that as you just pointed out, you can customize it to do whatever you want. For example even though we publish generated library jars to Apache's Nexus repo, this is not considered an official. An official release involves copying the sources over using rsync, so we can theoritically use [sbt-publish-rsync](https://github.com/lightbend/sbt-publish-rsync) or fork it for Apache's needs, and then we can can completely automate publishing both to Nexus and making an official Apache release.

For now I am just trying to get snapshots working, so I don't see a problem to see if we can adjust sbt-ci-release to work with Apache's Nexus repo however I am still personally leaning to using sbt-release for reasons stated earlier.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvPtK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvWf1,pekko,1404921845,85,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T12:17:49Z,2023-01-26T12:17:49Z,I created https://github.com/apache/incubator-pekko/issues/130 to try to collect an overview over all the steps that are needed. This ticket would be a subticket of the complete process.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvWf1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvd13,pekko,1404951927,85,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-26T12:42:37Z,2023-01-26T12:42:37Z,@jrudolph repository.apache.org artifacts get synched to Maven Central - but I think only when you do full releases. Snapshots and staged (pre-release) artifacts are probably only accessible by adding an sbt resolver that has the repository.apache.org url set up.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvd13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvekc,pekko,1404954908,85,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T12:44:14Z,2023-01-26T12:44:14Z,"> @jrudolph repository.apache.org artifacts get synched to Maven Central - but I think only when you do full releases. Snapshots and staged (pre-release) artifacts are probably only accessible by adding an sbt resolver that has the repository.apache.org url set up.

True but its also nothing special, at least for sbt even the OS Sonatype snapshot repository needs to be manually added as a resolver (i.e. its not there by default).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvekc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/85,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvfva,pekko,1404959706,85,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T12:48:57Z,2023-01-26T12:48:57Z,"Yes, and that's totally fine and also pretty much wanted (also according to https://infra.apache.org/release-distribution.html#unreleased which explicitly require ""must not be distributed through channels which encourage use by anyone outside the project development community"").","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvfva/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/92,pekko,1523977563,92,Create a `sbt-paradox-pekko` sbt plugin,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-01-07T16:53:46Z,2023-02-15T12:36:08Z,"With https://github.com/apache/incubator-pekko/pull/91 we have managed to replace the `sbt-paradox-akka` theme with the standard one from paradox however it was just done by manually putting in all of the `sbt-paradox-*` plugins. Ideally however we would like to create our own `sbt-paradox-pekko` sbt plugin akin to `sbt-paradox-akka`. This will become especially important when we actually want to create our own bespoke pekko doc theme which we will share within all of our pekko modules.

The only slightly complicating factor is that currently pekko core sbt build enforces JDK 1.8 (sbt doesn't even load unless SBT is its run with JDK 1.8 on the path). The problem here is due to the design of one of `sbt-paradox`'s core dependencies parboiled, you can only use specific versions of parboiled on JDK 1.8 versus later. In summary, pekko core only only use an outdated set of `sbt-paradox-*` dependencies where as other pekko modules which are built with newer JDK's will only support the newer `sbt-paradox-*` dependencies.

Thankfully I have managed to resolve this issue, assuming you have `sbt-paradox-pekko` with the newer `sbt-paradox-*` dependencies you can do this in pekko core's `build.sbt`

```sbt
// We have to deliberately use older versions of sbt-paradox because current Pekko sbt build
// only loads on JDK 1.8 so we need to bring in older versions of parboiled which support JDK 1.8
addSbtPlugin(""org.apache.pekko"" % ""sbt-paradox-pekko"" % ""HEAD+20230107-1453"" excludeAll(
  ""com.lightbend.paradox"",""sbt-paradox"",
  ""com.lightbend.paradox"" % ""sbt-paradox-apidoc"",
  ""com.lightbend.paradox"" % ""sbt-paradox-project-info""
))
addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox"" % ""0.9.2"" force())
addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox-apidoc"" % ""0.10.1"" force())
addSbtPlugin(""com.lightbend.paradox"" % ""sbt-paradox-project-info"" % ""2.0.0"" force())
```

I already have a prototype `sbt-paradox-pekko` plugin locally, it doesn't implement any theme but at least it brings in the `sbt-paradox-*` dependencies and will allow us to enforce a consistent theme.

- [ ] Upload `sbt-paradox-pekko` sbt plugin from local git repo to a temporary org
- [ ] Create an INFRA ticket to setup an `incubator-sbt-paradox-pekko` git repo
- [ ] Publish the `sbt-paradox-pekko` sbt plugin to the apache maven repo so it can be used in pekko repos. Can also use this simple project as a test bed for https://github.com/apache/incubator-pekko/issues/85

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7mBk,pekko,1374576740,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-07T19:03:58Z,2023-01-07T19:03:58Z,you don't need an INFRA ticket  - they have created https://selfserve.apache.org/ - I can create the extra repo.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7mBk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7mV9,pekko,1374578045,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-07T19:08:06Z,2023-01-07T19:08:06Z,created https://github.com/apache/incubator-pekko-sbt-paradox - it has to start with incubator-pekko - the main branch is not yet protected,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R7mV9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R8R_d,pekko,1374756829,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-08T08:25:59Z,2023-01-08T08:25:59Z,Thanks for organizing this! Will get onto it in the next few days,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R8R_d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SQ_Kj,pekko,1380184739,92,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-12T11:23:22Z,2023-01-12T11:23:22Z,"> The problem here is due to the design of one of `sbt-paradox`'s core dependencies parboiled, you can only use specific versions of parboiled on JDK 1.8 versus later.

Ok, that's because the latest paradox depends on parboiled 1.4.1 which is the first version to remove Java 8 support and consequently paradox itself had to remove Java 8 support (otherwise we could just pin parboiled to 1.4.0 here). I guess that was something of an oversight when releasing paradox 0.10.0 because it could (and maybe should) have stayed on parboiled 1.4.0 to keep Java 8 compatibility (if only to make upgrading to latest paradox easier for Akka itself going forward).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SQ_Kj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T6DnF,pekko,1407728069,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-29T17:52:58Z,2023-01-29T17:52:58Z,"The incubator-pekko-sbt-paradox plugin will need to add the following to the HTML pages we generate.
* An Apache copyright statement (probably at bottom of each page) - eg https://spark.apache.org/
* A tab or menu (probably accessible on all pages) that provides links for pre-existing Apache pages
  * Apache home page 
  * Sponsoring
  * License
  * Trademark
  * Security
  * Thanks
  * Upcoming Apache Event (a gif - or a link to a page) 
  * see the 'Apache Software Foundation' menu at top right of https://spark.apache.org/
* Other tabs/menus for (see top banner on https://spark.apache.org/)
  * Downloads
  * Developer Resources
  * Community
  * we will need to create the pages for these items to link to
* An Apache Pekko logo (probably including 'Apache Pekko' name) - see top left of https://spark.apache.org/
* A favicon
* The [Akka](https://doc.akka.io/docs/akka/current/typed/index.html) docs have a search box, while https://pekko.apache.org does not
* ideally, we would add a comment to all the generated HTML, Javascript, etc. which contains an Apache license header - if this is hard, we might be able to defer this","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T6DnF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJx6H,pekko,1411849863,92,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-01T10:45:37Z,2023-02-01T10:45:37Z,"I'm looking into setting this up. One problem, is that we have a kind of chicken and egg problem here, that AFAIU we cannot easily just make a public release of any kind of plugin even if it's just for internal consumption (especially, as it will likely need some iterations to stabilize). What options do we have?

 * publish snapshots of the plugin to nightly repo and use those
 * include sbt plugin by source reference (will slow down starting sbt quite a bit, as it will then include the full plugin sbt as well)
 * include the plugin sources as a git submodule into the sbt builds (faster than source reference but will be the first submodule, so extra steps needed while cloning)
 * defer using a plugin for the time being until we have released at least a first version of the main pekko repo and just put everything in the build here (some extra work to make it work in other modules later either by manual copying or by figuring out a better setup later on)

I'd start with setting docs up in the main repo first, so that we are not blocked by a missing docs page for the first release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJx6H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJyr8,pekko,1411853052,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T10:48:14Z,2023-02-01T10:48:14Z,"> I'm looking into setting this up.

So I already have a local plugin as a template, should I just send it over to you or should I just push what I have? What I have locally doesn't have any theme, it just contains the other sbt plugins (i.e. project-info) and its been adapted from https://github.com/akka/akka-paradox

> One problem, is that we have a kind of chicken and egg problem here, that AFAIU we cannot easily just make a public release of any kind of plugin even if it's just for internal consumption (especially, as it will likely need some iterations to stabilize). What options do we have?

To me the most pragmatic solution would be to just publish it as a snapshot as the `org.apache.pekko` org into the Apache Nexus Maven repo just as we have done with Pekko. I would set it up to just publish snapshots after something is pushed into main, that way its not so annoying to deal with incremental snapshot versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJyr8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ3Uj,pekko,1411872035,92,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-01T11:02:56Z,2023-02-01T11:02:56Z,"Hi,

Out of interest what’s stopping you from making a pubic source release?

Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ3Uj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ6SC,pekko,1411884162,92,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-01T11:10:59Z,2023-02-01T11:10:59Z,"> Out of interest what’s stopping you from making a pubic source release?

We need a ivy/Maven binary release of the plugin to be able to consume it (which is somewhat difficult in itself, because sbt plugins usually need an ivy repository to publish to (though, Maven usually also works even if it uses non-standard naming)). 

In general, I do not exactly know what it would entail to make a public release of any kind for a tool used for only developer consumption (does it have to go through the IPMC voting process etc.?) but I also do not have time to figure that out right for something that is just a potential convenience later on.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ6SC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ6nW,pekko,1411885526,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T11:11:55Z,2023-02-01T11:11:55Z,"> Out of interest what’s stopping you from making a pubic source release?

The reason why we are not looking at a public source release initially, is that similar to a JVM library like Apache Commons dependency resolution rely on resolving artifacts from Maven, not from a local source directory. Specifically with sbt, it uses `addSbtPlugin` which works by resolving a maven repository (see https://www.scala-sbt.org/1.x/docs/Using-Plugins.html). Do note that this is an plugin for sbt which is a build tool, its not going to be code that will be executed as part of using the library.

I would imagine this is not dissimilar to projects like Apache Commons which even though has to make a source release to comply with ASF guidelines, since its a library the vast majority of users are not going to download the source package. They will add it as a dependency in their `pom.xml`, `build.sbt`, `build.grade` etc etc which will download the binary from ASF Nexus repo.

This is one of the disconnects I was talking about earlier, if the Apache Project happens to be a library and not an ""executable application"" almost no users will download the source package and in cases like this its not even technically feasible (or desirable) to use a source package and Pekko is not unique in this regard, other TLP's which are libraries like Apache Commons are also treated in the same way.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ6nW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ9W4,pekko,1411896760,92,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-01T11:20:12Z,2023-02-01T11:20:12Z,"Hi,

Apache makes source releases, binaries can be created to help users but they are optional. 3rd parties (which could involve people in the project) can also provide binary releases based on Apache source releases.

This may help https://infra.apache.org/publishing-maven-artifacts.html <https://infra.apache.org/publishing-maven-artifacts.html>

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ9W4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ_Gv,pekko,1411903919,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T11:26:08Z,2023-02-01T11:26:08Z,"A source release package can be made for this sbt plugin, but doing it right now is incredibly premature. Its also an exceptional case because we are dealing with a plugin whose goal is to remove boilerplate from pekko sbt projects. If we just repeated the boilerplate that this plugin would be abstracting over in every sbt build definition we wouldn't even be having this discussion.

> Apache makes source releases, binaries can be created to help users but they are optional. 3rd parties (which could involve people in the project) can also provide binary releases based on Apache source releases.

In the case of JVM libraries, from the perspective of users the binaries are not optional because the entire JVM ecosystem is built around resolving libraries as binaries. Almost all users in this context will ignore source packages, not willingly or out of malice but because none of the build tools for JVM projects are built around and/or expect source packages. This especially so in the case of sbt, as I said before sbt plugins only work with binaries published to maven.

This is the disconnect I am talking about and in my view it would be more appropriate to discuss this in a proper channel (I don't even know what channel this is, INFRA?)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJ_Gv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKAY8,pekko,1411909180,92,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-01T11:30:42Z,2023-02-01T11:30:42Z,"Let's not get misled that we need a release (in Apache terms) of the plugin discussed here. The whole idea of the plugin is just an optimization for us developers. In the end, creating a package of the plugin is just like caching some intermediate results, so let's treat it like that and try to find a solution that does not require an Apache release or which would treat the plugin as a full-fledged module of pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKAY8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKBAc,pekko,1411911708,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T11:32:55Z,2023-02-01T11:32:55Z,"> Let's not get misled that we need a release (in Apache terms) of the plugin discussed here. The whole idea of the plugin is just an optimization for us developers. In the end, creating a package of the plugin is just like caching some intermediate results, so let's treat it like that and try to find a solution that does not require an Apache release or which would treat the plugin as a full-fledged module of pekko.

Agreed, I also do not want to treat this as an official ASF project. The best way to think of it is a common script that is shared between multiple Pekko projects.

There **might** (and real emphasis on **might**) be a reason to make it a proper release, but this would be way down the line, again re-iterating its premature now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKBAc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKSwV,pekko,1411984405,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-01T12:32:17Z,2023-02-01T12:32:17Z,"One option would be for someone to just create this repo as a personal, non-ASF, repo.

I don't see the harm in keeping this as an ASF repo and using snapshot jars for the next while, while the plugin code is still changing a lot. We could later do a 1.0.0 ASF release and include bin and src distributions. Once we learn how to build those for the main pekko repos, it should be straightforward to apply that here.

FYI, I plan to develop https://github.com/pjfanning/sbt-source-dist as a non-ASF project (at least, for now).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UKSwV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UL8HB,pekko,1412415937,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T17:11:12Z,2023-02-01T17:11:12Z,"> FYI, I plan to develop https://github.com/pjfanning/sbt-source-dist as a non-ASF project (at least, for now).

I was also planning to develop/prototype a `sbt-apache-release` plugin which would use sbt-sonatype/sbt-pgp along with your new sbt-source-dist as a way to collect all of the steps (that make sense to do so) to create a single `sbt release` step. I will wait until your sbt-source-dist plugin is usable in sbt though","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UL8HB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UMDvS,pekko,1412447186,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T17:30:38Z,2023-02-01T17:30:38Z,@jrudolph I have just pushed a template to https://github.com/apache/incubator-pekko-sbt-paradox and also created an INFRA ticket to set it up for Apache Nexus deployment (see https://issues.apache.org/jira/browse/INFRA-24157),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UMDvS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyXxW,pekko,1422490710,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-08T12:06:41Z,2023-02-08T12:06:41Z,https://github.com/apache/incubator-pekko-sbt-paradox exists - we should use that repo (issues/PRs/discussions) to track status of that work,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyXxW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT6rR,pekko,1431284433,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-15T12:20:57Z,2023-02-15T12:20:57Z,"@justinmclean I just had a discussion with @Claudenw so I just want to clarify some things.

Earlier when I (and others) was talking about a ivy/Maven binary release, this terminology might be a bit confusing because it doesn't just contain a binary (specifically for JVM we are talking about `.class` files) but also sources and other files. To illustrate this, in the https://github.com/apache/incubator-pekko-sbt-paradox project if you run `sbt publishLocal` it will create the artifacts and deploy them into a local repository, i.e.

```
[info] :: delivering :: org.apache.pekko#pekko-sbt-paradox;0.0.0+18-8f2ba638-SNAPSHOT :: 0.0.0+18-8f2ba638-SNAPSHOT :: integration :: Wed Feb 15 11:39:15 CET 2023
[info] 	delivering ivy file to /Users/mdedetrich/github/incubator-pekko-sbt-paradox/plugin/target/scala-2.12/sbt-1.0/ivy-0.0.0+18-8f2ba638-SNAPSHOT.xml
[info] 	published pekko-sbt-paradox to /Users/mdedetrich/.ivy2/local/org.apache.pekko/pekko-sbt-paradox/scala_2.12/sbt_1.0/0.0.0+18-8f2ba638-SNAPSHOT/poms/pekko-sbt-paradox.pom
[info] 	published pekko-sbt-paradox to /Users/mdedetrich/.ivy2/local/org.apache.pekko/pekko-sbt-paradox/scala_2.12/sbt_1.0/0.0.0+18-8f2ba638-SNAPSHOT/jars/pekko-sbt-paradox.jar
[info] 	published pekko-sbt-paradox to /Users/mdedetrich/.ivy2/local/org.apache.pekko/pekko-sbt-paradox/scala_2.12/sbt_1.0/0.0.0+18-8f2ba638-SNAPSHOT/srcs/pekko-sbt-paradox-sources.jar
[info] 	published pekko-sbt-paradox to /Users/mdedetrich/.ivy2/local/org.apache.pekko/pekko-sbt-paradox/scala_2.12/sbt_1.0/0.0.0+18-8f2ba638-SNAPSHOT/docs/pekko-sbt-paradox-javadoc.jar
```

As you can see it creates a `pekko-sbt-paradox-sources.jar` and this jar file does contain the sources used to build the plugin (actually in contrast to a standard Apache source distribution, the `*-sources.jar` file is far more accurate because it contains **ONLY**  the sources which are used to build the plugin and nothing else). For each of these jar files there is also `.sha1` and `.md5` hashes, i.e.

```
<~/.i/l/o/p/s/s/0/srcs>-> ls
pekko-sbt-paradox-sources.jar       pekko-sbt-paradox-sources.jar.md5   pekko-sbt-paradox-sources.jar.sha1
```

Additionally if you were to create a signed package (i.e. `publishLocalSigned`) which signs it via gpg/pgp it would also contain expected signature files (such as `.asc`) which you can use to verify the signature.

I have attached an example distribution [0.0.0+18-8f2ba638-SNAPSHOT.zip](https://github.com/apache/incubator-pekko/files/10742781/0.0.0%2B18-8f2ba638-SNAPSHOT.zip), note that `.jar` files are just standard zip files if you want to introspect them.

In summary in regards to sbt and hence pekko and these plugins that we talk about, there is nothing special/bespoke/unique about this. The sbt build tool by default will make sure that not only the binaries but the sources and other relevant meta information are distributed in Maven Repositories (whether that be Apache's Maven repo, Sonatypes OSS repo or a local folder repository as used in the previous example).

The only exception to this is the various `LICENSE`/`NOTICE`/`DISCLAIMER` and other files which as you have noticed from the other repositories are being handled additionally.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT6rR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT8lg,pekko,1431292256,92,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-15T12:27:26Z,2023-02-15T12:27:26Z,"Since this is an Apache project, we will still need to produce source releases (using sbt-source-dist) and go through the release process, including votes in the Pekko PPMC and the Incubator PMC.

I don't see anything significantly different in the Maven publish of this project - compared to incubator-pekko, for instance.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT8lg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/92,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT_Cx,pekko,1431302321,92,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-15T12:36:08Z,2023-02-15T12:36:08Z,"> Since this is an Apache project, we will still need to produce source releases (using sbt-source-dist) and go through the release process, including votes in the Pekko PPMC and the Incubator PMC.

Yes, I was just clarifying that when we talked about a ""Maven binary release"", its strictly speaking not just a pure binary.

> I don't see anything significantly different in the Maven publish of this project - compared to incubator-pekko, for instance.

Agreed","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VT_Cx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/95,https://api.github.com/repos/apache/pekko/issues/95,pekko,1525128090,95,Whitelist for custom serializer of classes in pekko package,nvollmar,919730,Nicolas Vollmar,,OPEN,2023-01-09T08:16:27Z,2023-01-09T08:16:27Z,"The query view implementation we use need access to certain Actor internals and therefore has to reside within the akka/pekko package. 
As we want to use our persistence serializer for snapshots, this normally generates a warning which we want to ignore by using a whitelist to mark those serializers as accepted.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/96,https://api.github.com/repos/apache/pekko/issues/96,pekko,1525535955,96,Contributor License Agreement,kw217,587036,Keith Wansbrough,keithw@lochan.org,CLOSED,2023-01-09T12:49:15Z,2023-01-16T16:27:30Z,"Please document the CLA requirement, and explain how to fulfil it.

[CONTRIBUTING.md line 91](https://github.com/apache/incubator-pekko/blob/main/CONTRIBUTING.md?plain=1#L91) mentions ""Sign the CLA"", but I can't find the CLA. There should be a link to the CLA and details of how to sign it.

Is the required CLA https://www.apache.org/licenses/contributor-agreements.html ? If so, does that process have to be followed (i.e., send a signed PDF to Apache) or is there bot assistance?

Separately - how does the project validate that CLAs have been signed by all contributors?

Thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/96,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R_bkZ,pekko,1375582489,96,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-09T12:54:01Z,2023-01-09T12:54:01Z," https://www.apache.org/licenses/contributor-agreements.html is the right page (as you already attest)

* We do not insist on CLAs for minor changes.
* ASF members have access to check if you CLAs are registered","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R_bkZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/96,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R_vzE,pekko,1375665348,96,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-09T14:00:51Z,2023-01-09T14:00:51Z,Thanks. Is it OK if I make a PR to add the above details to CONTRIBUTORS.md? My employer needs to know what CLA I would be signing.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5R_vzE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/96,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sgp5R,pekko,1384291921,96,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-16T16:27:29Z,2023-01-16T16:27:29Z,Thanks! #97 is what I was after.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sgp5R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/98,pekko,1526375556,98,Remove references to Akka or Lightbend in the doc,jchapuis,7502497,Jonas Chapuis,,CLOSED,2023-01-09T21:46:44Z,2023-05-24T14:14:31Z,"Remove any remaining references to Lightbend or Akka in the documentation (including logos)

Remove external links to Akka books, blog articles, etc.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SCcqV,pekko,1376373397,98,NA,jchapuis,7502497,Jonas Chapuis,,NA,2023-01-09T21:47:52Z,2023-01-09T21:47:52Z,@mdedetrich @pjfanning ok for you? anything special to pay attention to when doing this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SCcqV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SCc5-,pekko,1376374398,98,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-09T21:48:50Z,2023-01-09T21:48:50Z,"Nothing from me specifically, I just believe most of it is common sense.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SCc5-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SD8eR,pekko,1376765841,98,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-01-10T05:49:02Z,2023-01-10T05:49:02Z,In some contexts it would be fine to leave in links to blogs if they are helpful and apply to the OS software and don't overly promote Lightbend/Akka.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SD8eR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SFblC,pekko,1377155394,98,NA,jchapuis,7502497,Jonas Chapuis,,NA,2023-01-10T12:01:27Z,2023-01-10T12:01:27Z,"Another point, there are lots of direct inline links with urls starting with `https://doc.akka.io/`, what should we do for those? do we already have a prospective base URL for the Pekko doc? otherwise we can update them in a second step ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SFblC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SFc5F,pekko,1377160773,98,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-10T12:05:45Z,2023-01-10T12:05:45Z,"Let's leave the doc.akka.io URLs till later. Eventually, we will publish these docs to pekko.apache.org","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SFc5F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SGWFg,pekko,1377395040,98,NA,jchapuis,7502497,Jonas Chapuis,,NA,2023-01-10T14:51:52Z,2023-01-10T14:51:52Z,"Cool, are we planning to somehow provide an adapted platform guide? the doc has links in various places to https://developer.lightbend.com/docs/akka-platform-guide/. Should I remove those references? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SGWFg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SGj4_,pekko,1377451583,98,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-10T15:33:22Z,2023-01-10T15:33:22Z,We have a copy of that platform guide repo and will look at updating it ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SGj4_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/98,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDq7N,pekko,1561243341,98,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T14:14:31Z,2023-05-24T14:14:31Z,This is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDq7N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/99,pekko,1530026009,99,Fix publish doc on main,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-01-12T03:11:03Z,2023-02-08T12:05:18Z,"https://github.com/apache/incubator-pekko/actions/runs/3898732569

Will look into it soon, on meeting","{""url"": ""https://api.github.com/repos/apache/pekko/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SUN_I,pekko,1381031880,99,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-12T21:49:09Z,2023-01-12T21:49:09Z,"I've never used these features but in theory, we need to set up .asf.yaml to automatically publish the site.

https://cwiki.apache.org/confluence/display/INFRA/git+-+.asf.yaml+features#Git.asf.yamlfeatures-WebsitedeploymentserviceforGitrepositories

Pekko uses `sbt docs/paradox` to build the html but we somehow need to find the right .asf.yaml settings to publish that html.

sbt docs/paradox publishes to `docs/target/paradox/html/main`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SUN_I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SUPWI,pekko,1381037448,99,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-12T21:55:45Z,2023-01-12T21:55:45Z,It may also be possible to create a git repo for the web site - something like incubator-pekko-site.git. (`-site` is an ASF convention).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SUPWI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sl9BT,pekko,1385680979,99,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-17T16:21:24Z,2023-01-17T16:21:24Z,"From https://infra.apache.org/project-site.html and https://cwiki.apache.org/confluence/display/INFRA/git+-+.asf.yaml+features#Git.asf.yamlfeatures-Staticwebsitecontentgeneration it looks to me like if we're not using Pelican or Jekyll, we're supposed to have our generator pipeline check in the updated docs to the `asf-site` branch of our repository, and have a simple `publish` rule in `.asf.yaml`. Feels a bit icky but workable.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sl9BT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmQlO,pekko,1385761102,99,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-17T17:16:53Z,2023-01-17T17:16:53Z,https://github.com/apache/incubator-pekko-site describes how doc publish will work for time being,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmQlO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmSGv,pekko,1385767343,99,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-17T17:21:33Z,2023-01-17T17:21:33Z,"Nice! What does ""once the site has been approved"" refer to - is that just the review mentioned in step 6, or does it need to be approved by someone in ASF?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmSGv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/99,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyXVO,pekko,1422488910,99,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-08T12:05:18Z,2023-02-08T12:05:18Z,closing this in favour of https://github.com/apache/incubator-pekko/issues/149,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyXVO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/101,https://api.github.com/repos/apache/pekko/issues/101,pekko,1530904905,101,Upgrade Jackson dependency to  2.13.4 for CVE-2020-36518 CVE-2022-42004 CVE-2022-42003,codeGuru775,4134042,codeGuru,mishrapiyush6@gmail.com,CLOSED,2023-01-12T15:20:58Z,2023-01-12T16:25:09Z,"Upgrade Jackson dependency to  2.13.4 for
1: [CVE-2020-36518](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-36518) 
2: [CVE-2022-42004](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-42004) 
3: [CVE-2022-42003](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-42003)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/101,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SS3BB,pekko,1380675649,101,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-12T16:25:08Z,2023-01-12T16:25:08Z,Duplicate of #7 . We are in no hurry to upgrade any dependencies. Users can modify their own builds to force transitive dependencies onto latest versions.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SS3BB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/103,https://api.github.com/repos/apache/pekko/issues/103,pekko,1534495880,103,Publish nightlies to official Apache Maven repository,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-01-16T08:21:57Z,2023-01-26T15:08:03Z,"In https://github.com/apache/incubator-pekko/pull/60 we managed to get nightly builds published to the Apache directory. While this is the official place to publish Apache nightlies, its technically not a maven repository (its just a directory where you rsync the contents).

Apache does have an official maven where you can publish snapshots too (see https://repository.apache.org/content/groups/snapshots/, https://repository.apache.org/ and https://infra.apache.org/publishing-maven-artifacts.html), so in addition to rsyncing our nightlies we should also publish this as an a snapshot to Apache's maven repo.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/103,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SeX31,pekko,1383693813,103,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T09:01:26Z,2023-01-16T09:01:26Z,Apache JIRA Infra ticket created at https://issues.apache.org/jira/browse/INFRA-24087,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SeX31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/103,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TwOXu,pekko,1405150702,103,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T15:08:02Z,2023-01-26T15:08:02Z,"Closing issue as its working now, see https://repository.apache.org/content/groups/snapshots/org/apache/pekko/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TwOXu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/104,pekko,1534521942,104,Use sbt-rsync plugin instead of github action or remove sbt-publish-rsync,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-01-16T08:44:31Z,2023-07-02T08:19:59Z,"While looking at https://github.com/apache/incubator-pekko/issues/103 I noticed that the pekko project already happens to have infrastructure setup to publish nightlies (aka snapshots) to an rsync directory in the exact same manner that was implemented in https://github.com/apache/incubator-pekko/pull/60.

This is done by using https://github.com/lightbend/sbt-publish-rsync and you can see the details at https://github.com/apache/incubator-pekko/blob/main/project/Publish.scala.

We should either investigate using the sbt-publish-rsync plugin or remove it entirely from pekko since https://github.com/apache/incubator-pekko/blob/main/.github/actions/sync-nightlies/action.yml exists. My own personal preference would be to use sbt-publish-rsync since its far simpler (due to it being done by sbt the command to publish would be quite trivial especially when combined with publishing to Maven snapshots directory, see https://github.com/apache/incubator-pekko/issues/103) and I like reducing the direct dependance on shell scripts. From a cursory glance of looking at https://github.com/lightbend/sbt-publish-rsync/blob/master/src/main/scala/com/lightbend/sbt/publishrsync/PublishRsyncPlugin.scala#L45-L49 it shouldn't be problematic however there is a risk that changes might need to be done to sbt-publish-rsync plugin for Apache's use, if needed this does present an opportunity to create an sbt-publish-rsync-apache plugin.

@seglo @pjfanning Thoughts?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/104/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sgben,pekko,1384232871,104,NA,seglo,1148412,Sean Glover,sean@seanglover.com,NA,2023-01-16T15:44:49Z,2023-01-16T15:44:49Z,"The Akka team used rsync to publish documentation assets to a Lightbend maintained server (`gustav`). Java snapshots were published to maven repositories, originally a bintray repo, and then the actual sonatype snapshots repo when bintray went away. I briefly considered repurposing the `Publish` and `sbt-publish-rsync` infra, but when I found Apache Arrow's nightlies implementation with a GitHub Action I opted to use it because the precedent was already established by another Apache project and I liked that it was setup to automatically truncate the number of snapshots kept on nightlies. 

One of the issues with Akka's current snapshot publishing is that snapshots are available indefinitely until they're deleted manually or until the sonatype infra team decides to do some cleanup, Arrow's solution to keep the last 30 versions seemed like a nice solution. To achieve the same thing using `sbt-publish-rsync` would require some customization either in the form of a shell script sbt commands (i.e. steps in an `sbt-release` setup), or customization of `sbt-publish-rsync`. I think that given publishing snapshots to nightlies is realistically only going to be done by the Pekko project there's not a lot of value in making the process portable.

I think we should drop the existing rsync functionality found in the project infra since it no longer serves a purpose.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sgben/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SgfwC,pekko,1384250370,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T16:00:05Z,2023-01-16T16:00:05Z,"Thanks, after thinking about this I agree with your conclusion to just remove sbt-publish-rsync. There may be a use for it later down the track (if I can figure out the 30 day expiry) but for now its far simpler to just leave your solution.

There is also the fact that implementing this in sbt also requires a workaround due to the fact that sbt only currently allows to publish to one repo, so you would have to do something like https://stackoverflow.com/a/21032721","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SgfwC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SglAo,pekko,1384271912,104,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-16T16:15:37Z,2023-01-16T16:15:37Z,"I like the current pekko nightly solution. One minor quibble is that the version numbers for Scala 2.12 jars differ from the 2.13 jars. Likewise, for Scala 3 jars.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SglAo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SgmDp,pekko,1384276201,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T16:17:34Z,2023-01-16T16:17:34Z,"> I like the current pekko nightly solution. One minor quibble is that the version numbers for Scala 2.12 jars differ from the 2.13 jars. Likewise, for Scala 3 jars.

Are you talking about the artifact prefixes? If so this is intentional, its how Scala deals with binary compatibility","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SgmDp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShWb0,pekko,1384474356,104,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-16T19:34:36Z,2023-01-16T19:34:36Z,"The most recent Scala 2.13 jars are 0.0.0+26529-29e5cf4b+20230116-1205-SNAPSHOT
https://nightlies.apache.org/pekko/snapshots/org/apache/pekko/pekko-actor_2.13/

The most recent Scala 2.12 jars are 0.0.0+26529-29e5cf4b-SNAPSHOT
https://nightlies.apache.org/pekko/snapshots/org/apache/pekko/pekko-actor_2.12/

The most recent Scala 3 jars are 0.0.0+26529-29e5cf4b+20230116-1213-SNAPSHOT
https://nightlies.apache.org/pekko/snapshots/org/apache/pekko/pekko-actor_3/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShWb0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShX_w,pekko,1384480752,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T19:44:45Z,2023-01-16T19:44:45Z,"Ah I see what you mean now, its the version numbers being off (i.e. different) for the same single run of publish. We should probably make an issue for this because its going to create confusion for end users.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShX_w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shdhw,pekko,1384503408,104,NA,seglo,1148412,Sean Glover,sean@seanglover.com,NA,2023-01-16T20:07:08Z,2023-01-16T20:07:08Z,"The only difference is the timestamp component of the version. I think it's because the publish command is a cross-build task `+publishM2` and I guess the timestamp is derived for each version of Scala. We could customize the version format to drop that component if we want them to be consistent, but I think the timestamp is useful when you're experimenting locally and you don't have local commits yet to differentiate versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shdhw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shexf,pekko,1384508511,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T20:11:38Z,2023-01-16T20:11:38Z,"The principled solution would be the ability to parameterize the timestamp as an input in the publish command so you only generate the timestamp once (i.e. when just before `publish` is executed) and then feed it into the publish command so the timestamp is consistent across versions.

I don't know if this is possible in sbt especially with the usage of `+<command>` for cross publishing.

>  but I think the timestamp is useful when you're experimenting locally and you don't have local commits yet to differentiate versions.

There is truth to this but I would assume that if you are publishing locally you would use `publishLocal` and at least personally for me I don't care about the timestamp as I am only interested in using the latest version as its an iterative developer flow with quick turnaround","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shexf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShfhQ,pekko,1384511568,104,NA,seglo,1148412,Sean Glover,sean@seanglover.com,NA,2023-01-16T20:14:22Z,2023-01-16T20:14:22Z,I found a stack overflow answer that has a recipe for pushing the timestamp to the filesystem and reading it across builds. https://stackoverflow.com/questions/21053785/setting-unique-snapshot-version-when-cross-building-in-sbt,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShfhQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shgcn,pekko,1384515367,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-16T20:18:27Z,2023-01-16T20:18:27Z,"> I found a stack overflow answer that has a recipe for pushing the timestamp to the filesystem and reading it across builds. https://stackoverflow.com/questions/21053785/setting-unique-snapshot-version-when-cross-building-in-sbt

Not the nicest solution but it works and is a nice improvement, ill make an issue for it","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Shgcn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShhcW,pekko,1384519446,104,NA,seglo,1148412,Sean Glover,sean@seanglover.com,NA,2023-01-16T20:22:58Z,2023-01-16T20:22:58Z,"> There is truth to this but I would assume that if you are publishing locally you would use publishLocal and at least personally for me I don't care about the timestamp as I am only interested in using the latest version as its an iterative developer flow with quick turnaround

Yes, it's extremely anecdotal but it is something I've done before!

I think in general the timestamp is nice to have for reference sake, at least the date component is.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ShhcW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdngb,pekko,1400272923,104,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:35:40Z,2023-01-23T12:35:40Z,"Usually, the timestamp is only added when the workspace is not clean, so we need to figure out why that's the case. Otherwise, using the `git describe` output (as usual) should give enough details to order snapshot releases and associate them with the corresponding commit.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdngb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdn70,pekko,1400274676,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T12:37:27Z,2023-01-23T12:37:27Z,"@jrudolph I think this is the wrong place for your comment, I think this discussion is of relevance https://github.com/apache/incubator-pekko/pull/105#discussion_r1071912938","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdn70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XZCH0,pekko,1466180084,104,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-13T13:48:50Z,2023-03-13T13:48:50Z,are we in a position to close this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XZCH0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z-8aK,pekko,1509672586,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T09:09:31Z,2023-04-15T09:09:31Z,So I think there is merit in the premise of this ticket but its definitely not required for our first release so removing it from the milestone.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z-8aK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4qPr,pekko,1591911403,104,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-14T20:16:14Z,2023-06-14T20:16:14Z,I think the rsync that we have in CI is fine - so we need this @mdedetrich ?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4qPr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4t7Z,pekko,1591926489,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-14T20:24:11Z,2023-06-14T20:24:11Z,"Its an improvement I would like to do because although the CI solution works its a very basic/primitive one, i.e. it needs to have knowledge of Scala internals so if we for example change scala versions we can break publishing, see https://github.com/apache/incubator-pekko/blob/main/.github/workflows/publish-nightly-docs.yml#L63

The most ideal solution is still an SBT plugin because its easier to maintain/automatic/much less boilerplate since we can use it in a common sbt-pekko plugin but its def not a priority","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4t7Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/104,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gWOGB,pekko,1616437633,104,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-02T08:19:59Z,2023-07-02T08:19:59Z,"> I think the rsync that we have in CI is fine - so we need this @mdedetrich ?

Just want to add that with the recent work happening on doc publishing due to release, I would argue that its further increasing the the legitimacy of such a plugin.

If you have a look at our standard publish action right now (i.e. https://github.com/apache/incubator-pekko/blob/main/.github/workflows/publish-1.0-docs.yml#L61-L95) you can see how unwieldy its starting to become. The main reason behind this is binary/project/scala versions is all a black box to github actions and so questions like ""what is the last patch version of pekko"" and ""only maintain patch version docs for the latest x releases"" are much easier to automate via an sbt-plugin.

And remember that the current solution (which is a workaround with hardcoded constants) is only for a **single** repo, we have like 10-12","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gWOGB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/107,pekko,1535454039,107,Use a single unique timestamp across scala versions per snapshot publish,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-01-16T20:27:43Z,2023-05-29T14:07:09Z,"As discussed in https://github.com/apache/incubator-pekko/issues/104#issuecomment-1384503408, due to a current limitation in sbt, when doing a cross publish amongst Scala versions using the `+` prefix it generates a separate timestamp for each Scala version where as ideally we should have a unique timestamp for an entire single publish operation.

A workaround as described in https://stackoverflow.com/a/21062454/1519631 is to pre-save the unique timestamp to a file and then read that timestamp along with a custom command alias.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/107/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdlSP,pekko,1400263823,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T12:27:48Z,2023-01-23T12:27:48Z,So since this is blocking a few things from pekko-http's side I have labelled this as a bug,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdlSP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdmt5,pekko,1400269689,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:32:48Z,2023-01-23T12:32:48Z,"The timestamp shouldn't be part of the artifact version. It is only added when the workspace is not clean. Otherwise, it will only be the commit id.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdmt5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdocv,pekko,1400276783,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T12:39:31Z,2023-01-23T12:39:31Z,"@jrudolph This discussion is of relevance https://github.com/apache/incubator-pekko/pull/105#discussion_r1071912938 to your point. Currently @seglo set up nightlies which do contain a timestamp (which for a nightly makes sense) but I also want to setup snapshots which as you point out wouldn't need timestamp id's, but we need a strategy here because there is massive overlap between nightlies and snapshots (in my view nightlies are snapshots, just a specific way of handling them).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdocv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdpsl,pekko,1400281893,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:44:13Z,2023-01-23T12:44:13Z,"Indeed, I think the timestamp is currently included in the nightlies because the current main is not clean and while building the git workspace is changed, see

https://github.com/apache/incubator-pekko/actions/runs/3982251774/jobs/6826550691#step:4:173

and following.

Regarding, snapshots vs. nightlies, I agree. There's two potential solutions:

 * Either, push snapshots from nightlies, make sure to run only once per version on `main`
 * or, push snapshots for every commit and use nightlies only for more extensive testing than would be possible for each commit

I think we used the second option at least in akka-http.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdpsl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdqG2,pekko,1400283574,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:45:50Z,2023-01-23T12:45:50Z,"> because the current main is not clean

The reason is probably that PR validation is not run for every Scala version (or at least `headerCheck` / `scalafmtCheckAll`).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdqG2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdqfb,pekko,1400285147,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:47:19Z,2023-01-23T12:47:19Z,"```
pekko > +headerCheck
[info] Setting Scala version to 2.12.16 on 40 projects.
[info] Excluded 2 projects, run ++ 2.12.16 -v for more details.
[info] Reapplying settings...
[...]
[error] There are files without headers!
[error]   /home/johannes/git/opensource/pekko/actor-typed/src/main/scala-2.12/org/apache/pekko/actor/typed/internal/receptionist/Platform.scala
[error] There are files without headers!
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ByteString.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ByteIterator.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/compat/Future.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/package.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/dispatch/internal/ScalaBatchable.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/dispatch/internal/SameThreadExecutionContext.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/CompatImpl.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/compat/PartialFunction.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/ccompatUsedUntil213.scala
[error] There are files without headers!
[error]   /home/johannes/git/opensource/pekko/cluster-typed/src/main/scala-2.12/org/apache/pekko/cluster/typed/internal/receptionist/ClusterReceptionistProtocol.scala
[error] (actor-typed / Compile / headerCheck) There are files without headers!
[error]   /home/johannes/git/opensource/pekko/actor-typed/src/main/scala-2.12/org/apache/pekko/actor/typed/internal/receptionist/Platform.scala
[error] (actor / Compile / headerCheck) There are files without headers!
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ByteString.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ByteIterator.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/compat/Future.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/package.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/dispatch/internal/ScalaBatchable.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/dispatch/internal/SameThreadExecutionContext.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/CompatImpl.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/compat/PartialFunction.scala
[error]   /home/johannes/git/opensource/pekko/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/ccompatUsedUntil213.scala
[error] (cluster-typed / Compile / headerCheck) There are files without headers!
[error]   /home/johannes/git/opensource/pekko/cluster-typed/src/main/scala-2.12/org/apache/pekko/cluster/typed/internal/receptionist/ClusterReceptionistProtocol.scala
[error] Total time: 0 s, completed Jan 23, 2023 1:44:47 PM
pekko >
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdqfb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdqrv,pekko,1400285935,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T12:47:54Z,2023-01-23T12:47:54Z,"Just to clarigy regarding `scamafmtCheckAll`, this has been removed because instead we are using a github action that runs a native GraalVM binary version of scalafmt, the reason to do this is because of developer ergonomics and speed (the idea with the github action is that it will be a mandated check before merging a PR). See https://github.com/apache/incubator-pekko/blob/main/.github/workflows/format.yml","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdqrv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdrlT,pekko,1400289619,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T12:51:25Z,2023-01-23T12:51:25Z,"> the idea with the github action is that it will be a mandated check before merging a PR

Yes, it should be a mandatory check but it also needs to be able to pick up all the relevant paths from sbt and don't think that will work right now with a project as complex as pekko. If we really care for speed in that particular case, we can cache the sbt cache of scalafmt in the Action, so it does not rerun on file versions seen before.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TdrlT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdslp,pekko,1400293737,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T12:55:17Z,2023-01-23T12:55:17Z,"> Yes, it should be a mandatory check but it also needs to be able to pick up all the relevant paths from sbt and don't think that will work right now with a project as complex as pekko.

It does actually pick up everything relevance, I checked this many times when doing it. The part of the code that checks which paths are being formatted are part of core scalafmt which is defined in `.scalafmt.conf` and is common between scalafmt, sbt-scalafmt and scalafmt-native (this in fact was a deliberate decision by the devs of the latest 3.x version of scalafmt). That is it doesn't matter how scalafmt is run, whether its via sbt or on the cli with the JVM scalafmt runner or a GraalVM scalafmt, the results will be deterministic (and this to me is a feature, not a bug).

> If we really care for speed in that particular case, we can cache the sbt cache of scalafmt in the Action, so it does not rerun on file versions seen before.

At least for me, caching wouldn't solved the speed issue that I was experiencing the most. Its having to run scalafmt every time on small incremental changes. The current scalafmt github action typically takes 5-10 seconds to complete on the CI and also runs concurrently from the rest of the build.

I think this is going a bit offtopic though, feel free to make a thread on the dev mailing list where we can discuss this specifically","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdslp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdzuu,pekko,1400322990,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T13:16:23Z,2023-01-23T13:16:23Z,"> That is it doesn't matter how scalafmt is run, whether its via sbt or on the cli with the JVM scalafmt runner or a GraalVM scalafmt, the results will be deterministic (and this to me is a feature, not a bug).

:+1: I see, we are using `--mode diff` which should be good enough for PR validation (as long as you cannot slip files past the PR check). Sorry for the noise.

I created #125 to run `headerCheck` on all Scala versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tdzuu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TeaWo,pekko,1400481192,107,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-23T14:52:04Z,2023-01-23T14:52:04Z,"an untidy but workable solution to unblock work on pekko-http, etc. - https://github.com/pjfanning/micrometer-akka/pull/3/files#diff-5634c415cd8c8504fdb973a3ed092300b43c4b8fc1e184f7249eb29a55511f91R34-R43  ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TeaWo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Te-7k,pekko,1400631012,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-23T16:27:18Z,2023-01-23T16:27:18Z,"> an untidy but workable solution to unblock work on pekko-http, etc. - https://github.com/pjfanning/micrometer-akka/pull/3/files#diff-5634c415cd8c8504fdb973a3ed092300b43c4b8fc1e184f7249eb29a55511f91R34-R43

So the problem here is that pekko-http already happens to have a custom built code for handling snapshots and at least currently I am unsure if I want to rip it all out/modify it, you can see it at https://github.com/apache/incubator-pekko-http/blob/main/project/AkkaDependency.scala, I wanted to ask @jrudolph about this to get the context of whats going on.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Te-7k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tis2w,pekko,1401605552,107,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-24T09:16:13Z,2023-01-24T09:16:13Z,"The last nightly snapshot was now generated without the timestamp (after
fixing the headers).

Matthew de Detrich ***@***.***> schrieb am Mo., 23. Jan.
2023, 17:27:

> an untidy but workable solution to unblock work on pekko-http, etc. -
> https://github.com/pjfanning/micrometer-akka/pull/3/files#diff-5634c415cd8c8504fdb973a3ed092300b43c4b8fc1e184f7249eb29a55511f91R34-R43
>
> So the problem here is that pekk-http already happens to have a custom
> built code for handling snapshots and at least currently I am unsure if I
> want to rip it all out/modify it, you can see it at
> https://github.com/apache/incubator-pekko-http/blob/main/project/AkkaDependency.scala,
> I wanted to ask @jrudolph <https://github.com/jrudolph> about this to get
> the context of whats going on.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/apache/incubator-pekko/issues/107#issuecomment-1400631012>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAACNDCMWPK2ETK2JHVXVFLWT2WPDANCNFSM6AAAAAAT5DWZUA>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tis2w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WIqiB,pekko,1445111937,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-25T12:39:28Z,2023-02-25T12:39:28Z,"@pjfanning In practice I would say this isn't really a blocker for the v1.0.0-M0 release because this behaviour only occurs when a version is derived from a state when `pullRequestValidation` fails which has now been solved thanks to @jrudolph .

For this reason its not really blocking anything as of now, I would only see this as being useful when we end up implementing the functionality such as creating snapshots from an ongoing unmerged PR but I would consider this as a nice to have to implement sometime in the future.

Do you agree to remove this from the milestone?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WIqiB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daVSO,pekko,1567184014,107,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-29T14:06:08Z,2023-05-29T14:06:08Z,@mdedetrich is this closeable?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daVSO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/107,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daVm1,pekko,1567185333,107,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-29T14:07:01Z,2023-05-29T14:07:01Z,Yes,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daVm1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/108,pekko,1536041310,108,Provide a way to handle upcoming remote wire incompatibility,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-01-17T09:22:46Z,2023-12-19T09:39:35Z,"As discussed in https://github.com/mdedetrich/akka-apache-project/discussions/28, pekko core will need to handle wire incompatibility issues arising from the change in the `akka://` address prefix to `pekko://`. There may also be other wire incompatibility changes, for example if we decide to change the default `2552` port and anything else that we may have missed.

The solution will also need to play with the release strategy that we decide for pekko. Since the previous discussion I have done some thinking about it and at least to me the most amicable solution would be to make these fields configurable with typesafe config with different default values depend on the pekko release branch, i.e.

For pekko 1.0.x we would have

```
acceptPrefix = [""akka"", ""pekko""] // The prefix's to use when checking against incoming requests
sendPrefix = ""pekko"" // The prefix to use when making send requests
```

And for pekko 1.1.x (on the assumption that we don't want to accept migrating current Akka clusters to this Pekko branch by default)

```
acceptPrefix = [""pekko""] // The prefix's to use when checking against incoming requests
sendPrefix = ""pekko"" // The prefix to use when making send requests
```
(Note that the same strategy can also be applied to the port 2552`.

This means that when doing a rolling upgrade from an existing akka cluster to pekko 1.0.x you would temporarily change `sendPrefix` to `""akka""` (so that currently existing Akka clusters don't refuse connections from new pekko nodes) and once the rolling upgrade is complete then you would change `sendPrefix` to `""pekko""`. After that point you are then free to upgrade to pekko 1.1.x with `acceptPrefix` as `[""pekko""]` without any problems and making this configurable with typesafe config means that if users have bespoke update requirements its relatively easy for them to handle it.

This also leaves the door open to first deprecating the `acceptPrefix`/`sendPrefix` settings later down the Pekko 1.1.x release cycle and then at some point in the future hardcoding it as `pekko`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sj2rj,pekko,1385130723,108,NA,nvollmar,919730,Nicolas Vollmar,,NA,2023-01-17T09:59:59Z,2023-01-17T09:59:59Z,"Can we deserialize protobuf messages sent by an Akka node with Pekko? I'm not too familiar with Protobuf, but akka-kryo-serialization defaults to FQCN for message serialization for example.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sj2rj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sj5-4,pekko,1385144248,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-17T10:08:38Z,2023-01-17T10:08:38Z,"> Can we deserialize protobuf messages sent by an Akka node with Pekko? I'm not too familiar with Protobuf, but akka-kryo-serialization defaults to FQCN for message serialization for example.

From my first impression this should work because the only thing that got changed in the https://github.com/apache/incubator-pekko/pull/58 PR is the `option java_package` in the `*.proto` files which isn't used by the wire protocol but rather in generating the typed sources from the proto definitions.

This obviously needs to be tested to be verified, it seems like the serialization related protobuff messages may need extra handling due to explicitly using FQCN.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sj5-4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tc4E0,pekko,1400078644,108,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-23T09:58:22Z,2023-01-23T09:58:22Z,"> Can we deserialize protobuf messages sent by an Akka node with Pekko? I'm not too familiar with Protobuf, but akka-kryo-serialization defaults to FQCN for message serialization for example.

Most (all?) of the internal serialization formats use short custom strings as manifests instead of FQCN, so many serializers should just keep working:

https://github.com/apache/incubator-pekko/blob/4ac0f00a477873965ee7d52e16faefb1de91fe3a/remote/src/main/scala/org/apache/pekko/remote/serialization/MiscMessageSerializer.scala#L313-L320","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tc4E0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vhj6E,pekko,1434861188,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-17T16:11:14Z,2023-02-17T16:11:14Z,"Just relaying what was stated in the mailing list at https://lists.apache.org/thread/nr7q9orzffolwo9tj753cvkrohr9875o, it appears that this issue is not as high priority as I originally anticipated so that means we don't have to worry about this for 1.0.x (or even at all)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vhj6E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5leCZ0,pekko,1702372980,108,NA,codeGuru775,4134042,codeGuru,mishrapiyush6@gmail.com,NA,2023-09-01T08:30:38Z,2023-09-01T08:30:38Z,I suppose this would be needed by every large scale live application that uses akka and can not afford a downtime. Most of the large gaming firms use akka .. and they can not afford a downtime. so remote wire compatibility looks like a must have,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5leCZ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5leJDy,pekko,1702400242,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-09-01T08:50:48Z,2023-09-01T08:50:48Z,"> I suppose this would be needed by every large scale live application that uses akka and can not afford a downtime. Most of the large gaming firms use akka .. and they can not afford a downtime. so remote wire compatibility looks like a must have

To be clear we are not against this change and it is something that we planned for originally in Pekko 1.0.0, its just that we didn't have the capacity to do such a change especially considering that it needs to have extensive testing. Our priority was to get the Pekko modules out so the community would at least have something to use.

If the issue is really that critical then it makes sense for someone to own up to it and contribute it and we will do our best to support such an endeavour","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5leJDy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYpH,pekko,1773767239,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:50:22Z,2023-10-21T11:50:22Z,Assigning this to myself as per https://github.com/apache/incubator-pekko/issues/146#issuecomment-1773766845. Also removing low priority because I don't think this is accurate (I know for a fact that there are companies that need rolling upgrade and this is blocking them from moving to Pekko).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYpH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pv2nP,pekko,1774152143,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-22T17:29:24Z,2023-10-22T17:29:24Z,"I created a draft PR at https://github.com/apache/incubator-pekko/pull/765 which contains a skeleton of the desired implementation, still more to do","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pv2nP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s8lpl,pekko,1827822181,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-27T13:20:36Z,2023-11-27T13:20:36Z,"I wrote a demo app that shows the #765 do allow Pekko actors to send messages to Akka remote actor instances.

https://github.com/pjfanning/pekko-akka-compat","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s8lpl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s_Kp1,pekko,1828498037,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-27T19:50:03Z,2023-11-27T19:50:03Z,"@mdedetrich @kerr I've added a cluster test to https://github.com/pjfanning/pekko-akka-compat (PekkoAkkaAeronCluster)

The simple remote examples work but the clustering code is more complicated.

The 1st issue that PekkoAkkaAeronCluster runs into is that akka.cluster.JoinConfigCompatCheckCluster checks the compatibility. I am no expert on akka/pekko cluster code but it looks like when akka/pekko nodes try to join a cluster they send a message with HOCON data. Our pekko nodes wrap this data with a `pekko` wrapper while akka nodes use an `akka` wrapper.

It seems like there could be 2 solutions.
* We add a further Pekko change so that the message it sends has an `akka` wrapper instead of a `pekko` wrapper.
    * we would also need to change the pekko.cluster.JoinConfigCompatCheckCluster to accept akka wrappers
* We create a new JoinConfigCompatChecker class that can be used in Pekko and we could release one for Akka
    * users would need to set these classes in their configs

The HOCON message seems to contain at least these 2 configs (or their Akka equivalents).

```
  private val DowningProviderPath = ""pekko.cluster.downing-provider-class""
  private val SbrStrategyPath = ""pekko.cluster.split-brain-resolver.active-strategy""
```

I think one place to start is with pekko.cluster.SeedNodeProcess and adjusting the config in the InitJoin message. If the protocol-name config is set to `akka` then the config wrapper should be changed to `akka` and any class names that appear in config values should have `org.apache.pekko` changed to `akka`. It might be best to have the original config and the adjusted config sent together just in case we are talking to a seed node that is a Pekko node pretending to be an Akka node.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s_Kp1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s_S5R,pekko,1828531793,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-11-27T20:22:46Z,2023-11-27T20:22:46Z,"Thanks, ill have a look at it in a few days","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s_S5R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tEfW5,pekko,1829893561,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-28T13:54:30Z,2023-11-28T13:54:30Z,"I had a slightly closer look and am becoming more pessimistic about whether we can support mixed akka/pekko clusters.

Look at this line from the SplitBrainResolver.

context.system.eventStream.subscribe(self, classOf[ThisActorSystemQuarantinedEvent])

ThisActorSystemQuarantinedEvent is in package org.apache.pekko.remote.artery. There is also a similar Akka class but the Pekko SplitBrainResolver will not be listening for Akka ThisActorSystemQuarantinedEvent events - only Pekko ones.

I think if we look around, we'll find this subscribing to the eventStream is common in the cluster code with separate Akka and Pekko classes, I think nodes of different Akka/Pekko type will ignore event stream events of the other type.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tEfW5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tEjh5,pekko,1829910649,108,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-11-28T14:04:42Z,2023-11-28T14:04:42Z,"> ThisActorSystemQuarantinedEvent is in package org.apache.pekko.remote.artery. There is also a similar Akka class but the Pekko SplitBrainResolver will not be listening for Akka ThisActorSystemQuarantinedEvent events - only Pekko ones.

How are these events serialized between nodes? If they are serialized using protobuf, it may be transparent: the protobuf binary doesn't contain class names, only numeric id's - so as long as the object structure and the numeric ids are consistent a serialized Akka ThisActorSystemQuarantinedEvent might be deserialized into a Pekko one and vice-versa.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tEjh5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tIDcu,pekko,1830827822,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-28T21:59:49Z,2023-11-28T21:59:49Z,"I have a branch where I have the #765 changes and also an extra change to pekko-cluster jar that hacks the config data that is sent by a cluster node when trying to join the cluster (to make it look like akka node data) - https://github.com/pjfanning/incubator-pekko/commits/remote-release

https://github.com/pjfanning/pekko-akka-compat (PekkoAkkaAeronCluster) gets a bit further when the pekko node tries to join an akka cluster. The latest issue now seems to be the 'version' - Pekko 1.0.1 vs Akka 2.6.21. It looks like I might need to add a new config that let's Pekko pretend that it is running a particular Akka version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tIDcu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tIMQ5,pekko,1830863929,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-28T22:32:09Z,2023-11-28T22:32:09Z,I added a further change to get the pekko node to include akka.version in its init-join message - a valid akka.version (not a pekko version). This seems to get the pekko cluster member to join the akka cluster. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tIMQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u99d_,pekko,1861736319,108,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-18T21:46:38Z,2023-12-18T21:46:38Z,"@mdedetrich what do you think we need to do this move this on? With your #765 and the extra changes in https://github.com/pjfanning/incubator-pekko/commits/remote-release, it appears that we have some support. See note about PekkoAkkaAeronCluster above.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u99d_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/108,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vAl2P,pekko,1862425999,108,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-12-19T09:39:33Z,2023-12-19T09:39:33Z,@pjfanning  I haven't really been ontop if this lately (I am focusing on other stuff) but feel free to add commits onto the #765 branch (it should be open for maintainers) to close it off,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vAl2P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/109,pekko,1536705935,109,Create a migration guide to migrate from Akka to Pekko,kw217,587036,Keith Wansbrough,keithw@lochan.org,OPEN,2023-01-17T16:45:32Z,2023-05-28T10:26:50Z,"Create a migration guide explaining to a user of Akka how to migrate their project to Pekko.

We hope to automate as much of this as possible under #22 but first we need to determine the steps and lay them out so early adopters can follow them and gain experience.

This should be documented in `docs/src/main/paradox/project/migration-guide-akka-pekko.md`, linked from `migration-guides.md` in the same location, and also linked prominently from the GitHub homepage `README.md` and the project homepage `docs/src/main/paradox/index.md`.

Steps include:
* adapting Akka dependencies `""com.typesafe.akka""` -> `""org.apache.pekko""`
* adapting JAR names `akka-actor_2.13.jar` -> `pekko-actor_2.13.jar`
* adapting imports `import akka.actor` -> `import org.apache.pekko; import pekko.actor` - see #58 
* adapting class names `Akka*` to `Pekko*` - see #67 
* adapting packages and corresponding paths `akka` -> `org.apache.pekko`, if the codebase inserts code into the Akka namespace
* updating third-party dependencies to versions that depend on Pekko
* adapting configuration to use the `pekko` key - see #63 
* discussion of how to approach Akka remote applications - see #108
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/109/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SnYjk,pekko,1386055908,109,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-17T21:11:37Z,2023-01-17T21:11:37Z,"* don't forget the pekko name in the jars (akka-actor becomes pekko-actor, etc.)
* the guide will go into the docs - there is a placeholder for the migration section in there (or at least once an inflight PR is merged)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SnYjk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sp85V,pekko,1386729045,109,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-18T09:17:44Z,2023-01-18T09:17:44Z,"Cool, thanks - added that to the description.

Docs location - presumably you're referring to https://github.com/apache/incubator-pekko/blob/main/docs/src/main/paradox/project/migration-guides.md which just got updated? Perfect. Should we just put the migration guide in that doc, rather than a separate doc linked from there?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Sp85V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UZl4p,pekko,1415994921,109,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-02-03T15:02:30Z,2023-02-03T15:02:30Z,Example migration (thanks @pjfanning): https://github.com/pjfanning/micrometer-akka/pull/3,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UZl4p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDsb1,pekko,1460586229,109,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-08T17:50:51Z,2023-03-08T17:50:51Z,"Just reviewing the status of this issue, I think that the next steps on this card are to complete the following TODOs:

- Flesh out existing parts of migration guide with more details. 
- Address the final three bullets still not covered in issue description. 
- Add clear linking from GitHub homepage to migration guide.
- Add clear linking from the project website homepage: The migration guide is on the homepage (index.html) but the link is buried down in the Project Information subheading. Since the large proportion of PEKKO users will initially be migrating from AKKA I think that it is important that we place this in a clearer location e.g. the docs 'Getting Started' Guide. 
- Add at link to a clean example migration to this migration guide OR copy snippets of it into the migration guide subsections when we flesh it out.

Following the above, test out the migration guide to identify remaining gaps/issues.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDsb1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFsI,pekko,1566071560,109,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T10:24:48Z,2023-05-28T10:24:48Z,"We have a migration guide. It's not perfect but we can adjust it. Please raise PRs if you want to suggest changes - or comment on this issue.

https://pekko.apache.org/docs/pekko/current//project/migration-guides.html

Removing the milestone as I want to not have open issues in it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFsI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/110,pekko,1536716109,110,Podling scan reports errors,kw217,587036,Keith Wansbrough,keithw@lochan.org,OPEN,2023-01-17T16:51:49Z,2023-03-09T10:33:48Z,"The podling scan at https://incubator.apache.org/clutch/pekko.html currently reports a long list of errors. This seems to be because the project site at http://pekko.apache.org/ is currently missing.

* Creating the site is already covered by #99 
* This issue covers following the guidance at https://infra.apache.org/project-site.html to ensure the necessary data is provided on the landing page (i.e., currently, `docs/src/main/paradox/index.md`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmQK4,pekko,1385759416,110,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-17T17:15:36Z,2023-01-17T17:15:36Z,the web site will be https://pekko.apache.org/ and this is allowed - if you check the podling scan output.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmQK4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmRSP,pekko,1385763983,110,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-17T17:19:07Z,2023-01-17T17:19:07Z,"> the web site will be https://pekko.apache.org/ and this is allowed - if you check the podling scan output.

Thanks, corrected in description.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SmRSP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SsmTe,pekko,1387422942,110,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-18T17:06:25Z,2023-01-18T17:06:25Z,"The Apache Pekko landing page https://github.com/apache/incubator-pekko/blob/main/docs/src/main/paradox/index.md is currently just a TOC page (rendered: https://pekko.staged.apache.org/).

There are two ways we could ensure the project landing page meets the [Apache project site requirements](https://infra.apache.org/project-site.html):
* We could add content to the existing TOC page, so it has the intro material and then the TOC below that.
* We could replace the existing TOC page with the intro material, move the TOC to a new page, and add a link from the landing page.

Does anyone have a preference?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5SsmTe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ssv9v,pekko,1387462511,110,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-18T17:38:07Z,2023-01-18T17:38:07Z,We are likely to clone sbt-paradox - we have an empty repo earmarked and an issue open. My preference would be to have a collapsible tab on all pages with all the required links.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ssv9v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TP3S2,pekko,1396667574,110,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-19T09:21:29Z,2023-01-19T09:21:29Z,"That's a great solution, I like it. Obviously we should wait for that issue #92 to be resolved.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TP3S2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDykm,pekko,1460611366,110,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-08T18:02:59Z,2023-03-08T18:02:59Z,"Update on the status of this issue:

The podling scan at https://incubator.apache.org/clutch/pekko.html is still failing with errors stating that the Text and URIs to the ASF websites are not present. See https://whimsy.apache.org/pods/project/pekko .

From looking at the pekko docs homepage (https://pekko.apache.org/docs/pekko/current/), at least some of these are present, however the errors are still raised.

**Impact**

For pekko to go to 1.0.0 I believe these incubator errata must be resolved. Therefore I think that we should place this task in the [1.0.0 Milestone (github.com)](https://github.com/apache/incubator-pekko/milestone/1)

**Root cause**:

To me it looks like the issue may be related to the fact that our homepage URI is not actually https://pekko.apache.org (per expecatation from the crawler code) but is https://pekko.apache.org/docs/pekko/current/ (since we're matching the behaviour performed by the non-apache sbt-paradox [homepage](https://developer.lightbend.com/docs/paradox/current/) which also has a redirect to /docs/paradox/current). 

The redirect from https://pekko.apache.org -> https://pekko.apache.org/docs/pekko/current/ might be causing an issue with the crawler code, such that the crawler does not read the correct file and therefore does not find the regex matches for text and URIs.

**Proposed Fix**
Other apache projects: e.g. see [Apache Annotator (incubating)](http://annotator.incubator.apache.org/) go straight to the apache.org without do not redirect to a 'docs/pekko/current' URL ending. I propose we do that here.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDykm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XD7eX,pekko,1460647831,110,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-08T18:21:43Z,2023-03-08T18:21:43Z,Thanks for your interest. We are working closely with the Incubator PMC. We are aware of the issues. We will not do a release until we meet the requirements of the PMC. This release is many months away.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XD7eX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/110,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XILLz,pekko,1461760755,110,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-09T10:33:48Z,2023-03-09T10:33:48Z,Thanks for the quick response. Can we add this task into the 1.0.0 milestone so that it is tracked there?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XILLz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/112,https://api.github.com/repos/apache/pekko/issues/112,pekko,1536792222,112,Clearly describe current project state and how to contribute,kw217,587036,Keith Wansbrough,keithw@lochan.org,OPEN,2023-01-17T17:47:22Z,2023-03-20T13:49:38Z,"Update `README.md` and `CONTRIBUTING.md` to clearly describe the current state of the project and how best to contribute to it.

We want to encourage people to help get Pekko to v1.0, and ensure it's clear that this is being actively worked on. We don't want to discourage people with inaccurate docs, or by appearing to claim Pekko is ready for use now when it's not.

I'm keen to hear other folks' thoughts, but here are some things I think we could do to improve the situation:

* Near the top of the README, say ""Pekko is part of the Apache Incubator program and we are actively working towards a v1.0 release. It's not yet ready for production use, but please get involved with the community and contribute to the effort.""
* In CONTRIBUTING (or possibly even README), add a section explaining that we are working on `incubator-pekko` first and not touching any of the other repos. This is quite important and not immediately obvious.
* In CONTRIBUTING, remove (or demote) the section that lists how Akka used to use tags (labels). We aren't using these yet. If we are using labels etc, explain that instead.
* Agree on label/milestone usage: I can see we're using `milestone:1.1.0` for things that don't belong in the initial release; I think we should use `blocked` for issues that are blocked, e.g., #101. I wonder if there's a way we can label priorities or classes of issues to make the list more manageable?
* In CONTRIBUTING, add some kind of table of contents - otherwise it's not obvious that build instructions are down below.

I also think we should try to get the complete list of things needed to reach v1.0 raised as issues, rather than relying on memory and mailing lists. That way we have an accurate work list, and we can tell folks ""check GitHub for the current list of open issues, read the discussion, and dive in"".

Feedback welcome - I'm new to this project and am probably missing important context. Thanks!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/112,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDmfE,pekko,1460561860,112,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-08T17:38:25Z,2023-03-08T17:38:25Z,"Responding to the above points in order with some more context and proposals:

1. There is already basic entry in the README [contributing](https://github.com/apache/incubator-pekko#contributing) section which states ""Contributions are very welcome"" however yes, more encouragement and clarity on status for potential contributors doesn't feel like a bad thing. 

Proposal: Add this

2. For long term, I propose add a comment describing the process:

> Release tracking: The Pekko project spans multiple Github repositories. Work required for a whole Pekko project release (multiple repositories) is tracked in the [Pekko Github project](https://github.com/orgs/apache/projects/220/views/1). Note that due to Apache Software Foundation regulations this cannot be made public and is viewable only by Apache project [committers ](https://www.apache.org/foundation/how-it-works.html#committers). Therefore non-committers check up on the Github Discussions and dev mailing list to confirm contents of the current in-development release.
> On individual git repositories, the work required for releases will be tracked using a Github Milestone on that repository, e.g. the `incubator-pekko` [1.0.0 Milestone](https://github.com/apache/incubator-pekko/milestone/1). 
> Therefore the work required for a Pekko release will be tracked in the Github project and this project will reference the milestones required for each of the repositories it will contain.
>

And a short term status: 
> Current status: For the initial Pekko release, we will be initially releasing incubator-pekko [1.0.0 Milestone](https://github.com/apache/incubator-pekko/milestone/1) and [incubator-pekko-sbt-paradox](https://github.com/apache/incubator-pekko-sbt-paradox/issues).

3. Agreed, it doesn't look like we're using any of these labels on the incubator-pekko issues right now ([Issues · apache/incubator-pekko (github.com)](https://github.com/apache/incubator-pekko/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22+label%3Ablocked+label%3Abug+label%3Adocumentation+label%3Aduplicate+label%3Aenhancement+label%3A%22help+wanted%22+label%3Ainvalid+label%3Aquestion+label%3Awontfix)) so I would vote to remove this for now. 

**TODO:** Start a discussion on this in mailing list to get some consensus.

4. Will go in mailing list discussion above

5. Propose: Add this.

6. From a newcomers perspective I've spend ~1d looking around the pekko documentation + mailing list and haven't yet got a clear picture of whether we've got a complete list for 1.0.0 requirements or not. # 2 should help this.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XDmfE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/112,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X_hi7,pekko,1476270267,112,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-03-20T13:49:37Z,2023-03-20T13:49:37Z,"@sam-byng , this proposal looks good.  I suggest creating a pull request with the changes and a [DISCUSS] tagged message on the dev mailing list pointing to it.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X_hi7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/115,pekko,1549283333,115,ActorSystem start code has ref to Akka,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-19T14:33:24Z,2023-01-29T17:39:36Z,"```
ManifestInfo(this).checkSameVersion(""Akka"", allModules, logWarning = true)
```

Need to work out what to replace this with","{""url"": ""https://api.github.com/repos/apache/pekko/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXgIb,pekko,1398669851,115,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-20T17:01:39Z,2023-01-20T17:01:39Z,"As far as I can see this `$productName` is just used in the error string `""You are using version $highestVersion of $productName, but...""`, so we can safely change all occurrences to `""Pekko""`.

https://github.com/apache/incubator-pekko/blob/4ac0f00a477873965ee7d52e16faefb1de91fe3a/actor/src/main/scala/org/apache/pekko/util/ManifestInfo.scala#L102","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXgIb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXhd3,pekko,1398675319,115,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-20T17:05:51Z,2023-01-20T17:05:51Z,"Though this does raise the question of what ""older"" means. Do we plan to release Pekko at `1.0.0` or `2.6.x`? If the former, we will need to tweak code like this to be a bit smarter.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXhd3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXjU5,pekko,1398682937,115,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-20T17:09:33Z,2023-01-20T17:09:33Z,"> Though this does raise the question of what ""older"" means. Do we plan to release Pekko at `1.0.0` or `2.6.x`? If the former, we will need to tweak code like this to be a bit smarter.

It will be pekko 1.0.0. Why does this matter? Pekko versions will go up - pekko and akka are unrelated - different packages and jars - if someone has akka and pekko on their classpath, they should not interfere with each other.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TXjU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TYwjI,pekko,1398999240,115,NA,kw217,587036,Keith Wansbrough,keithw@lochan.org,NA,2023-01-20T21:56:05Z,2023-01-20T21:56:05Z,"Ah good point - in which case you'll want to remove most of the content of this list then:

https://github.com/apache/incubator-pekko/blob/main/actor/src/main/scala/org/apache/pekko/util/ManifestInfo.scala#L46","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TYwjI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/115,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T6C9H,pekko,1407725383,115,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-29T17:39:36Z,2023-01-29T17:39:36Z,this is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T6C9H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/116,https://api.github.com/repos/apache/pekko/issues/116,pekko,1549292481,116,pekko-cluster shell script needs to remove akka refs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-19T14:38:12Z,2023-01-27T19:16:20Z,"https://github.com/apache/incubator-pekko/blob/main/cluster/jmx-client/pekko-cluster

* Not just superficial println text
* also JMX and other `akka` refs in the script","{""url"": ""https://api.github.com/repos/apache/pekko/issues/116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/116,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TuN7X,pekko,1404624599,116,NA,dnychennnn,7877286,Denny Yung-Yu Chen,,NA,2023-01-26T07:04:00Z,2023-01-26T07:04:00Z,"Hi,

here's the [PR](https://github.com/apache/incubator-pekko/pull/127) for the fix.

Best,
Denny","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TuN7X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/116,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T3JzM,pekko,1406966988,116,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-27T19:16:19Z,2023-01-27T19:16:19Z,PR is merged- https://github.com/apache/incubator-pekko/pull/127,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T3JzM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/121,https://api.github.com/repos/apache/pekko/issues/121,pekko,1551923775,121,review the version numbers on deprecated code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-21T22:02:49Z,2023-02-12T00:26:15Z,"We don't yet want to remove deprecated code. Not for v1.0.0 anyway.

The `@deprecated` annotations have Akka versions in them. We should probably fix the annotations to highlight that the version is an Akka version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/122,https://api.github.com/repos/apache/pekko/issues/122,pekko,1552071258,122,remove the Akka-Enhancements/Pekko-Enhancements docs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-22T10:35:56Z,2023-01-25T12:40:22Z,"These docs are Lightbend specific.

https://lists.apache.org/thread/8orjtlx2w42y3j45pswmf9nbtf64gp77","{""url"": ""https://api.github.com/repos/apache/pekko/issues/122/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/122,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TpFtd,pekko,1403280221,122,NA,dnychennnn,7877286,Denny Yung-Yu Chen,,NA,2023-01-25T08:56:41Z,2023-01-25T08:56:41Z,"Hi @pjfanning,

I'd like to start with this in #126.

Regards,
Denny","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TpFtd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/122,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TqG3K,pekko,1403547082,122,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-25T12:40:21Z,2023-01-25T12:40:21Z,thanks @dnychennnn - I'll close this,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TqG3K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/123,pekko,1552087265,123,docs: fix up references to akka-quickstart-scala,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-22T11:40:09Z,2023-05-19T09:30:57Z,"We need to produce a Pekko equivalent and fix up the `docs` references to https://developer.lightbend.com/guides/akka-quickstart-scala/

Likewise for akka-quickstart-java

If we don't produce new g8 templates for pekko, we need to ensure that the docs either remove the refs to the g8 templates or we keep the refs to the akka g8 templates but ensure the text about them is correct (including mentioning the need to migrate the code generated for the generated projects). ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XYv49,pekko,1466105405,123,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-13T13:03:08Z,2023-03-13T13:03:08Z,Blocked until we get agreement on how to proceed with the similar issue in https://github.com/apache/incubator-pekko-http/pull/112,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XYv49/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1hPs,pekko,1507202028,123,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T15:48:51Z,2023-04-13T15:48:51Z,"Looking to update the status here:

From the discussion in [pekko-http #112](https://github.com/apache/incubator-pekko-http/pull/112) and subsequent move to [pekko-http #124](https://github.com/apache/incubator-pekko-http/issues/124) it looks to me like the resolution was:

- For pekko 1.0.0, use the 'theiterators' docs (DONE for pekko-http but not `pekko`) and move the g8 template references to 'Examples and Extensions' page in pekko-http (still TODO). 

- Going forwards (after 1.0.0), have a further discussion on plan here https://github.com/apache/incubator-pekko-http/issues/124 - continue with theIterators or 

Is that right? 

If so, it looks like this card can be marked unblocked and then closed by doing the actions in bullet no. 1","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1hPs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1wcM,pekko,1507264268,123,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T16:34:50Z,2023-04-13T16:34:50Z,@sam-byng could you clone the quickstart repo and update it and then we'll see if theiterators will take it and publish it? Better to have the same org as the http one. We can then discuss how to update the pekko docs.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1wcM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aHxmb,pekko,1511987611,123,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T19:48:00Z,2023-04-17T19:48:00Z,"@luksow @rotifyld thanks for your work on https://github.com/theiterators/pekko-http-quickstart-scala.g8

Would you consider supporting a theiterators clones of akka-quickstart-scala and akka-quickstart-java ?

For me, it would be tidier if these g8 templates for pekko (core) and pekko-http were in the same org.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aHxmb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aK_uU,pekko,1512831892,123,NA,rotifyld,40581598,Olsza,olszaborys@gmail.com,NA,2023-04-18T10:25:23Z,2023-04-18T10:25:23Z,"Sure, I can take care of it. It's not a lot of work, but I have some other commitments now, so I'll work on it next week.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aK_uU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bnrky,pekko,1537128754,123,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-06T12:10:14Z,2023-05-06T12:10:14Z,I've started work on this myself - see https://github.com/pjfanning/pekko-quickstart-scala.g8,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bnrky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/123,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bn7lB,pekko,1537194305,123,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-06T18:09:19Z,2023-05-06T18:09:19Z,"I now have https://github.com/apache/incubator-pekko/pull/311

I've created:
* https://github.com/apache/incubator-pekko-quickstart-java.g8
* https://github.com/apache/incubator-pekko-quickstart-scala.g8

Later, I will look into possibilities around publishing the paradox docs for the 2 new repos","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bn7lB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/124,pekko,1552091312,124,docs: fix up references to lightbend portal,Seetaramayya,3521036,Seeta Ramayya,,CLOSED,2023-01-22T11:57:02Z,2023-04-13T12:22:23Z,We need to produce a Pekko equivalent for `samples` or `start` guides and fix up the docs references to  https://developer.lightbend.com/start/?group=,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XYsT8,pekko,1466090748,124,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-13T12:54:10Z,2023-03-13T12:54:10Z,#243 is open for the samples,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XYsT8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzTgI,pekko,1506621448,124,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T09:11:15Z,2023-04-13T09:11:15Z,"This has been done in samples as part of #243 . (https://github.com/apache/incubator-pekko-samples/search?q=lightbend , remaining references are in legal docs / non akka dependencies)

Remaining here for samples are: https://github.com/apache/incubator-pekko-samples/blob/74f578c9cd4c0e13d0450ed1fe14ced8d1d325e2/pekko-sample-persistence-dc-java/src/main/resources/application.conf and https://github.com/apache/incubator-pekko-samples/blob/74f578c9cd4c0e13d0450ed1fe14ced8d1d325e2/pekko-sample-persistence-dc-scala/src/main/resources/application.conf 


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzTgI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzUWW,pekko,1506624918,124,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T09:13:42Z,2023-04-13T09:13:42Z,"@sam-byng could you create an issue for those comments in https://github.com/apache/incubator-pekko-samples/issues ?

edit: I created https://github.com/apache/incubator-pekko-samples/pull/31","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzUWW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Zz8YB,pekko,1506788865,124,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T11:18:27Z,2023-04-13T11:18:27Z,"That LGTM. On ""start guides"" , is this card referencing anything that is not already covered by https://github.com/apache/incubator-pekko/issues/123 and https://github.com/apache/incubator-pekko/issues/244 ?

If not then I propose closing this card.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Zz8YB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/124,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z0Qlr,pekko,1506871659,124,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T12:22:22Z,2023-04-13T12:22:22Z,"sure - #123, #244 and #284 cover the remaining work","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z0Qlr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/130,pekko,1558053030,130,Setup the release process,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,OPEN,2023-01-26T12:17:17Z,2023-05-27T12:28:37Z,"Apache has certain requirements for releasing a public version. We should strive for as much automation as possible. This ticket should be an overview over all steps necessary and the progress on those items. Please add items as needed.

Let's only consider public releases like RCs and GAs here (but not snapshots).

(Please add your name and/or PRs and issues to the items as needed)

References:
 * [Apache Release Management](https://incubator.apache.org/guides/releasemanagement.html)
 * [Apache Release Distribution Policy](https://infra.apache.org/release-distribution.html)
 * [Apache Publishing Maven Artifacts](https://infra.apache.org/publishing-maven-artifacts.html)
 * [Apache Release Signing](https://infra.apache.org/release-signing.html)

## Organizational steps
 * [ ] Create release template to keep track progress of release process per release (see the old template at https://github.com/apache/incubator-pekko/blob/main/scripts/release-train-issue-template.md)
 * [ ] Setup release managers (Who will it be?)

## Maven-related steps

 * [ ] Publish to Apache Nexus into staging
 * [ ] Initiate voting
 * [ ] Propagate to Maven Central when vote is positive
 * [ ] ...

## Apache-related steps

 * [ ] (one-time) setup signing infrastructure (how are keys created, where can a release be signed)
 * [ ] Create signed release and upload artifacts (where and when does that happen? Can signing keys be safely used from GHA?)
 * [ ] ...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/130/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvXjg,pekko,1404926176,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T12:22:09Z,2023-01-26T12:22:09Z,"I believe one thing that we have to do under Apache-related steps is that we have to copy the sources (not the generated binaries, i.e. jars in our case) to an SVN repo. In Apache lingo I think this is called a ""source package"", see https://www.apache.org/legal/release-policy.html#source-packages. The sources also need to be signed.

In our case it would just be the contents of the git repo.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvXjg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvd9A,pekko,1404952384,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T12:42:52Z,2023-01-26T12:42:52Z,"> I believe one thing that we have to do under Apache-related steps is that we have to copy the sources (not the generated binaries, i.e. jars in our case) to an SVN repo.

Just creating the source archive shouldn't be a big problem.

One of the main questions is if we can trust GHA enough to make releases there and also sign those releases (it probably makes sense to do both on one machine). Also, even if Apache considers binaries only a convenience, the reality is that > 99% of all users will use the binaries from Maven Central which after all carry a much bigger risk than the distributed source files. If we are not allowed to release from GHA or decide against it, we would have to setup something that would allow to run safe and reproducible releases from the release manager's machine (e.g. using docker).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvd9A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvge9,pekko,1404962749,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T12:52:00Z,2023-01-26T12:52:00Z,"> One of the main questions is if we can trust GHA enough to make releases there and also sign those releases (it probably makes sense to do both on one machine). Also, even if Apache considers binaries only a convenience, the reality is that > 99% of all users will use the binaries from Maven Central which after all carry a much bigger risk than the distributed source files. If we are not allowed to release from GHA or decide against it, we would have to setup something that would allow to run safe and reproducible releases from the release manager's machine (e.g. using docker).

If by release you are talking about a Maven release, I don't think there is any issue in GHA doing this. Many other Apache projects do this, and I think that everything aside from signing has already been setup with the https://github.com/apache/incubator-pekko/pull/129. For context, in order to get the snapshot deploys working I had to make an INFRA ticket to get credentials added as github secrets and in general I have seen that Apache is facilitating doing as much as possible via GHA but judging from the fact that Nexus username/passwords are being stored as secrets it would be surprising if keys are treated any differently.

What I predict could be annoying is the official Apache release (even though 99% of users won't use it). I have spoken to some people involved Apache and apparently the proper way to do this is to manually sign it on a machine with a key that is supposed to be stored externally (i.e. via usb) and then upload it. Such info can be outdated though (and it has been in the past)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvge9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvg0_,pekko,1404964159,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-26T12:53:28Z,2023-01-26T12:53:28Z,I have #78 and #85 open already. Do we need to consolidate these issues?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvg0_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvhN7,pekko,1404965755,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-26T12:55:05Z,2023-01-26T12:55:05Z,"> I have #78 and #85 open already. Do we need to consolidate these issues?

I would say that this issue can work as a general epic meta issue where we can track the other related issues. What would be handy is if we can update the original checklist and reference these specific issues. @jrudolph Do you want to do this? I can also just edit your post.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvhN7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvsJn,pekko,1405010535,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T13:30:22Z,2023-01-26T13:30:22Z,"> Do you want to do this? I can also just edit your post.

Please edit yourself, everyone. :)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5TvsJn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvtxu,pekko,1405017198,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-26T13:36:13Z,2023-01-26T13:36:13Z,"> What I predict could be annoying is the official Apache release (even though 99% of users won't use it). I have spoken to some people involved Apache and apparently the proper way to do this is to manually sign it on a machine with a key that is supposed to be stored externally (i.e. via usb) and then upload it. Such info can be outdated though (and it has been in the past)

Of course, we can just follow the rules as given but let's at least note how paradox the situation is: we would go to great lengths to sign source code securely which no one will use or look at (and which might be signed much more easily e.g. by signing the release tag in git). On the other hand, the binaries which everyone will be *running* directly and which will be much harder to verify will be released on third-party machines in a process which can much more easy be convinced to tamper with the binaries or leak the secrets...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tvtxu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tzrfp,pekko,1406056425,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-27T05:58:47Z,2023-01-27T05:58:47Z,"> Of course, we can just follow the rules as given but let's at least note how paradox the situation is: we would go to great lengths to sign source code securely which no one will use or look at (and which might be signed much more easily e.g. by signing the release tag in git). On the other hand, the binaries which everyone will be _running_ directly and which will be much harder to verify will be released on third-party machines in a process which can much more easy be convinced to tamper with the binaries or leak the secrets...

Oh definitely the irony is not lost on me whatsoever especially considering that Pekko is a library and not an application.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Tzrfp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T0JJp,pekko,1406177897,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-01-27T08:34:11Z,2023-01-27T08:34:11Z,"HI,

Users need to pointed to the offical releases hosted by the ASF. This may help [1][2][3] and of historical interest. [4]

Kind Regards,
Justin

1. https://infra.apache.org/release-distribution#channels
2. https://infra.apache.org/release-distribution#public-distribution
3, https://infra.apache.org/release-distribution#download-links
4. https://cwiki.apache.org/confluence/display/INCUBATOR/Distribution+Guidelines","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T0JJp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T35we,pekko,1407163422,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-01-27T22:49:32Z,2023-01-27T22:49:32Z,"Hi,

I should point out why that ASF does this is that it provides you with legal protection and means you are covered by the insurance the ASF has. Go outside these boundaries and you may not have that legal protection.

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T35we/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4sfK,pekko,1407371210,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T10:45:22Z,2023-01-28T10:45:22Z,"> I should point out why that ASF does this is that it provides you with legal protection and means you are covered by the insurance the ASF has. Go outside these boundaries and you may not have that legal protection.

@justinmclean As you stated (and I suspected) such policies are likely in place due to legal reasons but as @jrudolph said, especially in the case of Pekko and its modules there is an extremely strong disconnect behind the policy and what happens in reality/practice 99% of the time (I can confirm that for the users of Pekko, almost no one is going to download/test the raw source package, they will add it as a dependency to their build tool that will be resolved via Apache's Nexus repo and if they are going to get the source its going to be via git on github).

Of course we are going to follow this rule, this isn't up to debate however is there a general avenue where this can be discussed/raised?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4sfK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4yr2,pekko,1407396598,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-01-28T13:13:29Z,2023-01-28T13:13:29Z,"Hi,

In that case the project might have some work to do to change the user perceptions on where they obtain the software from. Even if they obtain it from elsewhere it must be based on an official ASF release.

Kind Regards,
Justin

> On 28 Jan 2023, at 9:45 pm, Matthew de Detrich ***@***.***> wrote:
> 
> 
> I should point out why that ASF does this is that it provides you with legal protection and means you are covered by the insurance the ASF has. Go outside these boundaries and you may not have that legal protection.
> 
> @justinmclean <https://github.com/justinmclean> As you stated (and I suspected) such policies are likely in place due to legal reasons but as @jrudolph <https://github.com/jrudolph> stated, especially in the case of Pekko and its modules there is an extremely strong disconnect behind the policy and what happens in reality/practice 99% of the time (I can confirm that for the users of Pekko, almost no one is going to download/test the raw source package, they will add it as a dependency to their build tool that will be resolved via Apache's Nexus repo).
> 
> Of course we are going to follow this rule, this isn't up to debate however is there a general avenue where this can be discussed/raised?
> 
> —
> Reply to this email directly, view it on GitHub <https://github.com/apache/incubator-pekko/issues/130#issuecomment-1407371210>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AABDI6BX3IMNU5ZHQXWWTWDWUT2E5ANCNFSM6AAAAAAUHNYHDE>.
> You are receiving this because you were mentioned.
> 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4yr2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4zIy,pekko,1407398450,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T13:23:42Z,2023-01-28T13:23:42Z,"> Even if they obtain it from elsewhere it must be based on an official ASF release

If ""based on"" includes users downloading generated JVM artifacts from the same source package as the official ASF release (which will also be the same as the git repo at the same checksum of the tagged release) then like almost every other Apache JVM project that publishes JVM artifacts then yes that will be the case.

I think the point being raised is that the Apache software package particularly for libraries that are using git is practically ceremonial/checkboxing. As pointed out earlier, pushing a signed git tag to signify a release (which then triggers a pipeline to upload artifacts to repositories generated from that exact source code for that release) technically achieves the exactly same goal, especially with github repo's being synced with gitbox.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4zIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4z7E,pekko,1407401668,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-01-28T13:40:37Z,2023-01-28T13:40:37Z,"Hi,

Releases are not based off ""pushing a signed git tag”, releases need to manually voted on by the (P)PMC and placed in the offical ASF distribution area.. Please read the links I posted earlier.

Justin


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T4z7E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T40Id,pekko,1407402525,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T13:45:53Z,2023-01-28T13:45:53Z,"> Releases are not based off ""pushing a signed git tag”, releases need to manually voted on by the (P)PMC and placed in the offical ASF distribution area.. Please read the links I posted earlier.

I am aware that releases need to be voted on by (P)PMC, I am talking about the steps after a release is voted on (which does currently require placing software in the Apache Distribution area).

To clarify, I am talking about hypothetical alternative for distribution after a (P)PMC vote but I don't think this thread is a productive area for this conversation so I will leave it
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T40Id/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T40fA,pekko,1407403968,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-28T13:54:38Z,2023-01-28T13:54:38Z,"We will need something that essentially splits the release into 2 parts.
* prep candidate artifacts and put them in a staging area where they can be reviewed
* if the vote on the release fails, the candidate artifacts are removed - if the vote succeeds, the the candidate artifacts are released from staging

With the Nexus part of release, we can release to Nexus staging and then after the vote, we can abandon the staged release or complete its release to Maven Central using the [Nexus Repository Manager](https://repository.apache.org/#welcome).

sbt plugins like sbt-release, sbt-ci-release, sbt-sonatype, etc. can be configured not to complete the releases - just to put them in staging. 

With the source and binary distributions, there are repositories where the files can be shared. If and when the release is approved, they can be uploaded to https://dlcdn.apache.org","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T40fA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T415J,pekko,1407409737,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T14:24:06Z,2023-01-28T14:24:06Z,"> We will need something that essentially splits the release into 2 parts.
> 
> * prep candidate artifacts and put them in a staging area where they can be reviewed
> * if the vote on the release fails, the candidate artifacts are removed - if the vote succeeds, the the candidate artifacts are released from staging
> 
> With the Nexus part of release, we can release to Nexus staging and then after the vote, we can abandon the staged release or complete its release to Maven Central using the [Nexus Repository Manager](https://repository.apache.org/#welcome).
> 
> sbt plugins like sbt-release, sbt-ci-release, sbt-sonatype, etc. can be configured not to complete the releases - just to put them in staging.

If this is the process that we use (and its a perfectly reasonable one) then assuming we only want to push a git tag for an actual release that has been successfully voted by (P)PMC on it becomes more complicated about which of these plugins to use and in what order.

For example one way of doing things would be to just use `sbt +publish` to put the artifacts into staging when a (P)PMC voting round is initiated for a release, and then if it is successful then in addition creating the Apache source package we would push a git tag which would trigger sbt-ci-release to close (i.e. promote to release) the staging repository.

If using `sbt +publish` is not enough then in this instance we can use sbt-release to add some more steps, doing this is however somewhat misleading because its not really a release but a pre-release. Alternatively and if allowed, instead of using sbt-ci-release to promote the staging repository one can configure sbt-release to do the proper Apache Software Distribution release after a successfully (P)PMC vote , i.e. the (P)PMC member would initiate on their machine a `sbt release` and if done this way sbt-release would also be responsible for pushing the git tag as well as promoting the staging repository (from a previous `sbt +publish`).

This alternative method I think is cleanest and probably closest to the ""Apache way"", i.e. `sbt +publish` once a release process is initiated and then `sbt release` after a successful vote which will then handle everything behind the scenes. Even the naming of the various sbt commands is very clear in conveying the intent of whats going on.

The main issue I foresee with these method/s is that we would likely have to resort to having a static value for the version of the project in `build.sbt` rather than the current setup of getting the version from a git tag because the git tag won't exist yet when promoting to staging. The problem/s with these method/s can be avoided by pushing the git tag when a release process is initiated however we run into the problem where if a release fails then we have to remove the git tag otherwise its not in sync with the official Apache releases.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T415J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T42X6,pekko,1407411706,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-28T14:35:54Z,2023-01-28T14:35:54Z,"ASF projects tend to use a concept of a release manager - an actual person, who can do some documented manual steps.

We can start with having a few manual steps and automate more later.

It's more important to define a process than to tailor a process to the way that a particular sbt plugin works.

The artifacts that are voted on should be signed and we need to provide a KEYS file with the public key parts of any keys that have ever been used to sign our artifacts. From an sbt perspective, that means we need `sbt publishSigned`.

These keys are typically keys associated with actual people so signing the artifacts is more likely to be done on the release manager's computer than to be automated. I don't see any mechanism by which the release manager's signing key can be made available to a Github Action workflow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T42X6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T42ej,pekko,1407412131,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T14:38:40Z,2023-01-28T14:38:40Z,"> ASF projects tend to use a concept of a release manager - an actual person, who can do some documented manual steps.
> 
> We can start with having a few manual steps and automate more later.
> 
> It's more important to define a process than to tailor a process to the way that particular sbt plugin works.

This is why I prefer sbt-release because it is manual, i.e. it has to be manually triggered on a machine by the release manager (i.e. via `sbt release` or just `release` if you are already in the shell) to go through the documented manual steps and as part of the process sbt-release can also interactively ask for signing keys on the release managers machine (amongst other things).

sbt-release also has some nice quality of life features, for example if your current git status is unclean (i.e. you have unstaged/committed changes) it will immediately halt the release process. I think that some of these preconditions can also be configured.

The issue with sbt-ci-release is that its triggered by git tag pushes and not manually, which means in addition to not being interactive (meaning its quite limited in what we do) if we want to the git tags to be in sync with actual approved Apache releases then sbt-ci-release could only be used to promote a staging repo to release which is kind of overkill, it would be better to just use `sonatypeBundleRelease` from sbt-sonatype directly.

> The artifacts that are voted should be signed and we need to provide a KEYS file with the public key parts of any keys that have ever been used to sign our artifacts. From an sbt perspective, that means we need `sbt publishSigned`.
> 
> These keys are typically keys associated with actual people so signing the artifacts is more likely to be done on the release manager's computer than to be automated. I don't see any mechanism by which the release manager's signing key can be made available to a Github Action workflow.

I already started asking these questions in `#asfinfra`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T42ej/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T433y,pekko,1407417842,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-28T15:08:01Z,2023-01-28T15:08:01Z,"> The artifacts that are voted should be signed and we need to provide a KEYS file with the public key parts of any keys that have ever been used to sign our artifacts. From an sbt perspective, that means we need `sbt publishSigned`.
>
> These keys are typically keys associated with actual people so signing the artifacts is more likely to be done on the release manager's computer than to be automated. I don't see any mechanism by which the release manager's signing key can be made available to a Github Action workflow.


Adding this as another comment as you edited yours, but incase it's not clear sbt-release works by defining a set of already existing steps so nothing is stopped it from calling `+publishSigned` and provide keys as you describe. Its documented at https://github.com/sbt/sbt-release#no-git-and-no-toy-projects on how to do this, the linked example shows how to configure it when git isn't available (which will be our case since release process expects to download source directly, not from git). 

The more important point that we may be missing is that sbt-pgp (which is where `+publishSigned` comes from) may not expect signing keys in the same way as as is documented on ASF so I wouldn't be surprised if we have to tailor some steps due to this reason (and perhaps others)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5T433y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UC9mT,pekko,1410062739,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T09:53:11Z,2023-01-31T09:53:11Z,"> It's more important to define a process than to tailor a process to the way that a particular sbt plugin works.

:+1: Yep, figuring out how we want and need to do the process is the most important part, we can always get the tooling to do what we want afterwards.

Note, how in the happy case (release worked, positive vote), the procedure is not so much different from what we had for akka-http: https://github.com/apache/incubator-pekko-http/blob/main/scripts/release-train-issue-template.md#cutting-the-release. Here we also only automated until staging and then had some manual testing steps and a manual triggering of promotion to Maven Central.

The question is how to deal with the unhappy cases where something goes wrong with a release or the vote fails. A few alternatives come to mind:

 * don't start from git tag but hardcode version number before release, so it can more easily redone (needs a good process to make sure there finally is a tag for the source code version that was used for the release)
 * skip version numbers for unpublished releases and just keep going with the next fix number
 * delete and redo git tag after fixing up problems

In the past, I have been usually quite pragmatic about it. Before a release had been announced, I was ready to just redo the tag in the git repo and restart the whole process after a fix (usually, mutating tags or main branch will only lead to short term hassles if done in a timely fashion). On the other hand, sometimes enough of a release had already slipped (e.g. to Maven Central) so that a new release version was necessary, in which case the process was just redone.

In general, the most principled approached would be just to skip version numbers in case of a problem. That would also have the benefit of reusing most of the past processes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UC9mT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDErb,pekko,1410091739,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T10:13:33Z,2023-01-31T10:13:33Z,"We should make sure that we also help people giving there approving vote according to https://www.apache.org/legal/release-policy.html#release-approval which require

> Before casting +1 binding votes, individuals are REQUIRED to download all signed source code packages onto their own hardware, verify that they meet all requirements of ASF policy on releases as described below, validate all cryptographic signatures, compile as provided, and test the result on their own platform.

Especially, we should clarify/understand what it means to ""test the result on their own platform"".","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDErb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDRJ5,pekko,1410142841,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T10:51:00Z,2023-01-31T10:51:00Z,"> We should make sure that we also help people giving there approving vote according to https://www.apache.org/legal/release-policy.html#release-approval which require
> 
> > Before casting +1 binding votes, individuals are REQUIRED to download all signed source code packages onto their own hardware, verify that they meet all requirements of ASF policy on releases as described below, validate all cryptographic signatures, compile as provided, and test the result on their own platform.
> 
> Especially, we should clarify/understand what it means to ""test the result on their own platform"".

On the same note, one thing I want to explore is that if we end up using sbt-release, adding steps to the release process (initiated by `sbt release`) which would print out messages reminding the release manager on the external steps required.

There are some things we can automate, i.e. compiling and running the test suite (which can be done with `sbt compile` and `sbt test` and more complex tests can also be integrated in this way) but for other things such as announcing a release, sbt-release can just print a message saying ""Did you announce the release according to https://www.apache.org/legal/release-policy.html#release-announcements y/n"" as a helpful reminder for the release manager on what steps need to be done.

Note that the context behind the suggestions that I am making is two things

* Its becoming pretty clear to me that the Apache release process is quite foreign to a lot of Scala OS developers. Most Scala OS projects have quite a simple release process that has been automated as much as possible within sbt (thats why sbt-ci-release even exists in the first place). On the other hand the Apache release process is quite manual and to me this handholding which hopefully can be implemented in sbt-release can help alleviate these issues from both sides. While there is truth to what @jrudolph says that the Apache release process is quite similar to what Lightbend was doing, we currently only have a couple of ex Lightbend people on the PPMC and so for everyone else its quite new. In summary, I see sbt-release as a way to handhold people through the release.
* There is some contention behind the ""sbt way of doing things"" and the typical JVM/Maven (talking about build tool here) way of doing things. Fortunately or unfortunately (depending on how you look at it), sbt is designed in a way to encourage almost everything to be done within sbt. This is why plugins like sbt-publish-rsync or sbt-release even exist, normally for your ""typical JVM project"" such things are outside the realm of the build tool. One can make a general claim that the general way the current ASF release process is conveyed is based on the assumption that the build tool is really only for building and nothing else. This is more of a meta issue, but for me at least personally if we want to justify the continued use of sbt (which for Pekko is going to be non-debatable for some time), we should use its strengths and one of them is sbt providing a framework to automate these things otherwise we kind of have the worst of both worlds.

Note that regarding the release process, I have helped out a couple of times for Kafka release and there are lot of colleagues on my team who are Apache committers/PPMC members for various Apache TLP's so I am continuously speaking with them to get a general idea of how the release process works with other projects because while there is a the strict policy at https://www.apache.org/legal/release-policy.html#release-approval, there is some level of bespoke tailoring depending on the TLP project as long as it conforms to the ASF release process. 

> In the past, I have been usually quite pragmatic about it. Before a release had been announced, I was ready to just redo the tag in the git repo and restart the whole process after a fix (usually, mutating tags or main branch will only lead to short term hassles if done in a timely fashion). On the other hand, sometimes enough of a release had already slipped (e.g. to Maven Central) so that a new release version was necessary, in which case the process was just redone.

I think that for now what need to decide on is how we approach git tags because this will have an effect on how we design the release process, i.e. do we tag immediately when a release vote is started and remove it later if a release vote fails or do suspend the creation of the git tag only when a formal Apache release vote is approved? I have a personal process for suspending the creation of the git tag because its simpler in the exception case but its not a hill that I will die on if we go with other options.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDRJ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDSeP,pekko,1410148239,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-31T10:55:29Z,2023-01-31T10:55:29Z,"* we should not git tag candidate builds as if they are full releases
* so we can tag the candidate as `v1.0.0-rc1`
* when the vote passes for `v1.0.0-rc1`, we can add tag `v1.0.0` to that same commit.
* or we can avoid tagging the commit until we agree the release - if we think the approach above is too noisy","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDSeP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDXnx,pekko,1410169329,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T11:10:41Z,2023-01-31T11:10:41Z,"> * we should not git tag candidate builds as if they are full releases

Is this because it breaks some part of a fundamental ASF process or because it complicates what you mention aftewards (in the sense that if we do git tag release candidates than the last release candidate would need to support multiple git tags if we promote it to release)?

> * so we can tag the candidate as `v1.0.0-rc1`
> * when the vote passes for `v1.0.0-rc1`, we can add tag `v1.0.0` to that same commit.
> * or we can avoid tagging the commit until we agree the release - if we think the approach above is too noisy

My concern here with using RC's as a backdrop for making a release is that a project can make many release candidates before doing an actual release thats voted on, in which case because of the process it can be a bit unclear which release candidate counter can turn into an actual release while its happening.

We would also have to mandate that we always have to a release candidate just before the release which in some cases can be excessive, i.e. think of the case where we have some rc-x that has been fully tested and is likely going to be the last rc before a proper voted release but someone makes some minor non breaking changes afterwards, i.e. some basic documentation is added after rc-x. With this process we would have to make another rc-(x+1) and go through the entire hoopla of getting everyone to test rc-(x+1) even though its kind of pointless because nothing of worth has changed.

Even if we communicate that for that specific rc-(x+1) does not need to be tested because it only has minor documentation changes, it then becomes unclear (at least to me the primary goal of release candidates is to encourage the community to do manual testing on that rc throughout the lifecycle of that release to try and weed out any bugs/concerns).

On a similar note, putting git tags onto release candidates can also help communicate the stage of the lifecycle of the release, i.e. generally speaking during RC's you don't want to merge major changes into the project (that happens after a release) and with git tags its quite clear if the project is in the stage of a release from a git log perspective (you just need to see whether the last git tag is an release candidate).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDXnx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDdnr,pekko,1410193899,130,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-01-31T11:30:49Z,2023-01-31T11:30:49Z,"Take a look at https://cwiki.apache.org/confluence/display/JENA/Release+Process.  This is the release process for Apache Jena.  It is a much simpler project and is strictly java based,  However, if you look at what it does with respect to the git repository you can see the creation of tags, and roll back on failure and other automated steps.  I recommend that Pekko adopt something similar and that it also be written out in the wiki.

The verification is to verify that the build of the system matches the result built by the release.  IMHO if you want to use GHA to build the release you could, but it will be a complex script.  The verification of the build will still have to be done on other accounts, etc.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDdnr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDd5S,pekko,1410195026,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T11:31:52Z,2023-01-31T11:31:52Z,"> when the vote passes for `v1.0.0-rc1`, we can add tag `v1.0.0` to that same commit.

That would mean that we would still have to rebuild because the version number is also included in the binaries. Is that what you mean? The source distribution could probably stay he same (Can it? The sources might also contain the version...), but the binaries would have to be rebuilt.

While the ASF requires the sources distribution to be validated before voting, we also need to make sure that the staged binaries are valid, so that process could still fail after a positive vote (if it had to be rebuilt for a new version number)...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDd5S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDe1S,pekko,1410198866,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-31T11:34:34Z,2023-01-31T11:34:34Z,"Ultimately, we can define the version in the sbt file, we don't necessarily need to derive it from git tags.

This might better suit an ASF compliant release process.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDe1S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDfJt,pekko,1410200173,130,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-01-31T11:35:53Z,2023-01-31T11:35:53Z,This is the process from Cassandra:  https://cassandra.apache.org/_/development/release_process.html,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDfJt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDhku,pekko,1410210094,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T11:45:17Z,2023-01-31T11:45:17Z,"> Ultimately, we can define the version in the sbt file, we don't necessarily need to derive it from git tags.
> 
> This might better suit an ASF compliant release process.

This was also on my mind however the use of git to determine versions makes perfect sense for snapshots which is the current behaviour we have and I would like to keep (also the behaviour where if you have an unclean git status then a timestamp is added, handy if we end up implementing the ""make a snapshot for an in progress PR"" that I was talking about elsewhere).

The reason why I was bringing this up is afaik at least sbt-ci-release (and maybe other plugins/tools) rely on **NOT** having a strict version defined in the sbt build because rather its relies on sbt-dyn-ver to determine the version of the project. Setting strict versions in sbt would also mean having to update every pekko project and come up with a new method (i.e. its a decent amount of work).

Unless I am missing something, from whats being discussed so far the simplest solution with git tags seems to be

* Git tag every release candidate
* If an apache vote is summoned for a release then don't git tag it yet. We go through the entire release process (i.e. (P)PMC voting, testing, etc etc)
  * If the voting passes, make a new commit which can just signify that a new release has been formally voted on (i.e. it can just update README.md with the new version that was just voted on). Note sure if this breaks some rule on the ASF release process, I couldn't find anything
    * Push git tag that new commit with the just newly voted on release version
  * If the (P)PMC vote fails then we simply don't push the git tag and presumably we would continue with future release candidates, looping the described process until a successful vote.
  
@Claudenw thanks for the release process of other TLP projects, will read through them to see if I miss anything and/or get some inspiration.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDhku/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDhz3,pekko,1410211063,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T11:46:14Z,2023-01-31T11:46:14Z,"> Ultimately, we can define the version in the sbt file, we don't necessarily need to derive it from git tags.
> 
> This might better suit an ASF compliant release process.

Yes, I'm starting to accept this (and that's how it has been for many projects including akka in the past). If we put it into the build file and check it in, we cannot reuse the same commit for an RC and a final build. So, I think we shouldn't directly promote an RC to a final release but will have to use the real staged release as the basis to vote on (the process based on published RCs does not seem to be mentioned in the Apache docs or in the existing examples).

So, the approx. proposed process for a final would be:

 * decide to release
 * create a commit which fixes the version to the target version
 * start the staging process (on the release manager's computer or GHA?) to prepare all artifacts
 * start the vote
 * if vote is successful
   * add git tag
   * promote Apache release artifacts
   * promote to Maven Central
 * if release or vote is unsuccessful, revert version fixing

Something like that?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDhz3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDiyJ,pekko,1410215049,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T11:50:00Z,2023-01-31T11:50:00Z,"> So, the approx. proposed process for a final would be:
> 
> * decide to release
> * create a commit which fixes the version to the target version
> * start the staging process (on the release manager's computer or GHA?) to prepare all artifacts
> * start the vote
> * if vote is successful
>   
>   * add git tag
>   * promote Apache release artifacts
>   * promote to Maven Central
> * if release or vote is unsuccessful, revert version fixing
> 
> Something like that?

We commented at the same time and we both came to roughly the same solution however such a solution doesn't actually need a fixed version in the build. Unless I am missing something, we only need strict versions in the sbt build if there is a misalignment between git tags and the version of the software and this only occurs if we decide to create git tag immediately when a release process is started. If however if we do git tag release candidates (as I described in https://github.com/apache/incubator-pekko/issues/130#issuecomment-1410210094) and we push create git tags only when there is a successful vote then I don't see why setting a strict build version in sbt is necessary.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDiyJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDi9H,pekko,1410215751,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-01-31T11:50:38Z,2023-01-31T11:50:38Z,"> > Ultimately, we can define the version in the sbt file, we don't necessarily need to derive it from git tags.
> > This might better suit an ASF compliant release process.
> 
> Yes, I'm starting to accept this (and that's how it has been for many projects including akka in the past). If we put it into the build file and check it in, we cannot reuse the same commit for an RC and a final build. So, I think we shouldn't directly promote an RC to a final release but will have to use the real staged release as the basis to vote on (the process based on published RCs does not seem to be mentioned in the Apache docs or in the existing examples).
> 
> So, the approx. proposed process for a final would be:
> 
> * decide to release
> * create a commit which fixes the version to the target version
> * start the staging process (on the release manager's computer or GHA?) to prepare all artifacts
> * start the vote
> * if vote is successful
>   
>   * add git tag
>   * promote Apache release artifacts
>   * promote to Maven Central
> * if release or vote is unsuccessful, revert version fixing
> 
> Something like that?

Seems like a good starting point. We can always evolve the release process and hopefully simplify it over time.

The first release could require a number of candidates because it is not just the Pekko PPMC that must approve it, the Incubator PMC has to approve it too and and Incubator members may not look at Pekko builds until we have release candidates to look at.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDi9H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDjT7,pekko,1410217211,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T11:51:59Z,2023-01-31T11:51:59Z,Btw. I don't think a tool like sbt-release will be a big help because it cannot keep state during a complex interactive release process. That's why I suggested to use a release train issue as a checklist (which has it's shortcomings) but at least provides some way of keeping track of what's going on (and also some audit by keeping track of who checked which boxes).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDjT7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDlPD,pekko,1410225091,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T11:59:17Z,2023-01-31T11:59:17Z,"> Btw. I don't think a tool like sbt-release will be a big help because it cannot keep state during a complex interactive release process. That's why I suggested to use a release train issue as a checklist (which has it's shortcomings) but at least provides some way of keeping track of what's going on

Honestly I was thinking of prototyping this separately, it is possible for it to keep state between steps but it would involve temporary files (which sounds hacky but is also not something unique to sbt-release, even core sbt has similar issues i.e. see https://github.com/apache/incubator-pekko/issues/107).

> (and also some audit by keeping track of who checked which boxes).

If sbt-release solution is ever successful, things like this would be outside the bounds of sbt-release. The only things that sbt-release could/would do in such a case is print a message that says ""Did you check if other (P)PMC members have done x, y/n"". I wouldn't be surprised if the only things that sbt-release could automate would be compile/test/integration test as well doing signed artifact releases asking for signing/private keys and the other steps are just printed messages as interactive yes/no prompts making sure person is properly following the ASF release guidelines. 

As an aside, can someone point out if the solution described at https://github.com/apache/incubator-pekko/issues/130#issuecomment-1410210094 is problematic? Reason I am pointing this out is that if there aren't any issues with this solution then we don't really need to do any changes aside from describing the process and getting sbt-pgp to work. We can keep all of the current ""version from git tag"" infrastructure and it would work as we want it to. When we get to a point of having our first release candidate, then someone would just push a `1.0.0-RC-1` git tag and that would be it (of course in addition we would have to document the process)

If there are issues with my prescribed solution than we have to plan do some more work and hence plan this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDlPD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDloq,pekko,1410226730,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:00:45Z,2023-01-31T12:00:45Z,"> If however if we do git tag release candidates (as I described in [#130 (comment)](https://github.com/apache/incubator-pekko/issues/130#issuecomment-1410210094)) and we push create git tags only when there is a successful vote then I don't see why setting a strict build version in sbt is necessary.

That sounds as if the release manager would manually run the build and keep the workspace open for the multiple days until the process is done. Is that what you are suggesting? (Of course, you can always also just recreate the tag on the same commit later, so maybe it's not an issue.)

Is it already clear that we cannot prepare artifacts for a release automatically?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDloq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDmDI,pekko,1410228424,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:02:00Z,2023-01-31T12:02:00Z,"> As an aside, can someone point out if the solution described at [#130 (comment)](https://github.com/apache/incubator-pekko/issues/130#issuecomment-1410210094) is problematic?

It's fine for me to use a local git tag to set the version from my side and indeed easier than adapting what we already have.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDmDI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDoK1,pekko,1410237109,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T12:08:26Z,2023-01-31T12:08:26Z,"> That sounds as if the release manager would manually run the build and keep the workspace open for the multiple days until the process is done. Is that what you are suggesting? (Of course, you can always also just recreate the tag on the same commit later, so maybe it's not an issue.)

If you are talking about an actual release then yes this is the idea. I mean the release manager would start a formal release vote and at the same time publish a `1.0.0` release artifact into staging. Others would then start voting (typically takes days) as well as testing (by downloading that staging artifact) and doing all of the other necessary steps. During this whole process then there is no git tag pushed yet, its only when the necessary amount of votes have been cast and the process is successful then the release manager would push the git tag for the actual release (i.e. ""v1.0.0"") which would trigger (via GHA) promoting the already existing staging artifact/s for 1.0.0 into release. In addition to this they would also create the software package and publish it (as is formally required by ASF).

> It's fine for me to use a local git tag to set the version from my side and indeed easier than adapting what we already have.

Actually I was thinking that when a decision is made to create a release candidate (RC) that the git tag would be pushed onto git, i.e. `v1.0.0-RC1`. This would trigger publishing a JVM artifact into Apache nexus release repository which people can then resolve and test. In addition since there is a `v1.0.0-RC1` tag if people want to checkout the source manually at that time to do some additional testing its very easy to do so with git tags.

This makes it also ultra clear that what the release candidates are (i.e. the release candidates in the nexus repo is in perfect sync with git tags). If an RC fails or more RC's are needed, thats easy would just create a new RC and increment the RC version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDoK1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDopV,pekko,1410239061,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:10:05Z,2023-01-31T12:10:05Z,"> and getting sbt-pgp to work

Not sure what you mean with this work? Right now private keys are provided Base64 encoded via environment variable (to make it work on CI). So, the Maven part will just work.

If this is about creating the source release for the official Apache release page, then we still need to script that whole process, right? We could do that in sbt but it might be easier to throw together a bash script for that (e.g. just using `git archive` to create the archive and plain gpg tools to sign) + whatever is need to upload to svn.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDopV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDpcO,pekko,1410242318,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T12:12:45Z,2023-01-31T12:12:45Z,"> Not sure what you mean with this work? Right now private keys are provided Base64 encoded via environment variable (to make it work on CI). So, the Maven part will just work.

Are they? I asked in asfinfra and didn't get a response, could be just reading problems that don't exist. Main reason I posed this question is afaik sbt-pgp is built around gpg and I haven't set up sbt-pgp to accept keys in other formats/ways.

> If this is about creating the source release for the official Apache release page, then we still need to script that whole process, right? We could do that in sbt but it might be easier to throw together a bash script for that (e.g. just using git archive to create the archive and plain gpg tools to sign) + whatever is need to upload to svn.

EDIT: I was talking about JVM artifacts published to Apache's nexus repo, these also should be signed.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDpcO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDqnW,pekko,1410247126,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:16:40Z,2023-01-31T12:16:40Z,"> Are they? I asked in asfinfra and didn't get a response, could be just reading problems that don't exist. Main reason I posed this question is afaik sbt-pgp is built around gpg and I haven't set up sbt-pgp to accept keys in other formats/ways.

Maybe there's a misunderstanding here? Where are other keys than gpg keys used?

I'm currently assuming we are running on the release manager's machine, not on CI if that's the confusion.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDqnW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDrqz,pekko,1410251443,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T12:20:11Z,2023-01-31T12:20:11Z,"> > Are they? I asked in asfinfra and didn't get a response, could be just reading problems that don't exist. Main reason I posed this question is afaik sbt-pgp is built around gpg and I haven't set up sbt-pgp to accept keys in other formats/ways.
> 
> Maybe there's a misunderstanding here? Where are other keys than gpg keys used?
> 
> I'm currently assuming we are running on the release manager's machine, not on CI if that's the confusion.

So according to https://infra.apache.org/release-signing.html, if I read correctly the signing keys are not stored in GPG but should be stored as separate files. This is because for security reasons, keys should not be stored on your local machine (which is typically connected to the internet) but externally on a device that is not connected to the internet (i.e. a usb stick).

Also when I was talking about sbt-pgp, I was referring to JVM artifacts and not the source package, I think a different mechanism for the source package is in order. My question here is I actually don't know whether the JVM artifacts need to use the same signing key as the source package (wouldn't surprise me if that was the case), thats what I asked in https://the-asf.slack.com/archives/CBX4TSBQ8/p1674900528637179","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDrqz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDsb9,pekko,1410254589,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:22:41Z,2023-01-31T12:22:41Z,"> EDIT: I was talking about JVM artifacts published to Apache's nexus repo, these also should be signed.

Maven Central only requires signing and that the public keys used for signing is available in a public key repo. AFAIK there are no additional Apache requirements on Maven artifact signatures than what Maven does. In effect, these Maven signatures are worthless because there is no common process or practice to validate the signatures against anything (e.g. there's no standard that would say to look up valid keys in the `KEYS` file or for users to list trusted keys somewhere).

In any case, I do not think that it even matters, because either we can automate the full release in which case we must release with keys known to CI and can use them both for Maven binaries and for the sources, or we cannot automate and must provide the keys on the local machine, in which case they can also be used for both signing tasks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDsb9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDtjd,pekko,1410259165,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T12:26:29Z,2023-01-31T12:26:29Z,"If thats the case then as you said its kind of arbitrary and doesn't matter, as you would just create your own private key and publish it to some key repo. I just wanted to confirm with ASF if thats the case or whether we should use the same key as the source package for Maven releases (which does provide an actual benefit, as you can securely confirm that a Maven release artifact is signed with the same release managers key that was used to sign the  Apache's official source package).

Since ASF considers maven (and other release channels like docker) as convenience packages it wouldn't surprise me if the process is ""do whatever you want"" since its a convenience package. I guess it could be nice to use the same signing key behind the source package for the Maven artifact for reasons described earlier but I can see how that would be considered excessive.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDtjd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDvJC,pekko,1410265666,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:31:46Z,2023-01-31T12:31:46Z,"> If thats the case then as you said its kind of arbitrary and doesn't matter, as you would just create your own private key and publish it to some key repo.

I've heard that seriously suggested before... (not here).

> I just wanted to confirm with ASF if thats the case or whether we should use the same key as the source package for Maven releases (which does provide an actual benefit, as you can securely confirm that a Maven release artifact is signed with the same release managers key that was used to sign the Apache's official source package).

Yes, I think we should.

It shouldn't be a problem because the whole release should be done on the same machine so the same single key should be available.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDvJC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDwPl,pekko,1410270181,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-01-31T12:35:33Z,2023-01-31T12:35:33Z,"> So according to [infra.apache.org/release-signing.html](https://infra.apache.org/release-signing.html), if I read correctly the signing keys are not stored in GPG but should be stored as separate files. This is because for security reasons, keys should not be stored on your local machine (which is typically connected to the internet) but externally on a device that is not connected to the internet (i.e. a usb stick).

This seems a bit excessive and probably infeasible because it would mean that you have to connect and disconnect the computer in the middle of the process to keep your keys safe. If you care about getting private keys stolen, a more reasonable measure would be to require a key that you have only on a hardware stick like a Yubikey. Having keys stolen in that way actually seems like a minor threat compared to supply chain attacks, attacks against the infrastructure, or against the release machines (or CI) directly.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDwPl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDxHz,pekko,1410273779,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-01-31T12:38:44Z,2023-01-31T12:38:44Z,"> Yes, I think we should.

Agreed

> It shouldn't be a problem because the whole release should be done on the same machine so the same single key should be available.

Well the only technical problem is the one I mentioned before, strictly speaking if we follow ASF's guidelines than that same key that is used for source packages needs to be stored as a file (i.e. *NOT* gpg since it stores the key on the local machine) which means that sbt-pgp would need to accept keys from a file (usually from a mounted usb?).

I don't know if that is possible with how sbt-gpg is currently designed

> This seems a bit excessive and probably infeasible because it would mean that you have to connect and disconnect the computer in the middle of the process to keep your keys safe. If you care about getting private keys stolen, a more reasonable measure would be to require a key that you have only on a hardware stick like a Yubikey. Having keys stolen in that way actually seems like a minor threat compared to supply chain attacks, attacks against the infrastructure, or against the release machines (or CI) directly.

I believe those instructions are deliberately general to allow for things like yubikey (which I was personally thinking of). Regarding disconnecting/reconnecting your computer, that is true if follow the reasoning to its natural conclusion although I would suspect that the primary reason behind these rules is to just not leave the keys stored on the machine typically connected to the internet which is a much larger security attack vector than only having them visible on the internet at the exact time the release manager is doing a release and I agree with this sentiment.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UDxHz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UHuD-,pekko,1411309822,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-01T01:20:42Z,2023-02-01T01:20:42Z,"Hi,

A couple of things to keep in mind about ASF releases:
- You need to vote on a source release, and this needs to be a signed tar or zip archive. You can’t vote on a git tag, as tags can be changed.
- You can’t make changes to the release after it has been voted on. If you make changes, you’d need to have another vote.
- The LICENSE and NOTICE file needs to reflect what is in that archive.
- As the binary may have different contents, its LICENSE and NOICE files may differ from the source release.
- Any anther distributions need to contain what is in the voted-on source release with no modifications or extra bits.
- The Incubator PMC will vote on your release, so it’s best if it follows what the wider IPMC considers best practice.
- Try to make it as easy as possible for the IPMC to vote on your release.

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UHuD-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UIjZP,pekko,1411528271,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T06:22:20Z,2023-02-01T06:22:20Z,"> - You need to vote on a source release, and this needs to be a signed tar or zip archive. You can’t vote on a git tag, as tags can be changed.

Yes this is known, if it wasn't clear before all voting is done on signed tar/zips and a git tag is a convenience measure that is only done after a successful vote

> - You can’t make changes to the release after it has been voted on. If you make changes, you’d need to have another vote. 

Good to know, will have to come up with another method

> - Any anther distributions need to contain what is in the voted-on source release with no modifications or extra bits.

This is also clear, the question/problem we have is whether there is a problem with the release manager signing that distribution method (i.e. signing JVM library jar's) with the same signing key that is used for the source package (tar/zip)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UIjZP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJXoC,pekko,1411742210,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-01T09:35:07Z,2023-02-01T09:35:07Z,"> > * You can’t make changes to the release after it has been voted on. If you make changes, you’d need to have another vote.
> 
> Good to know, will have to come up with another method

What in the proposed process would require changing the sources after the fact?

> This is also clear, the question/problem we have is whether there is a problem with the release manager signing that distribution method (i.e. signing JVM library jar's) with the same signing key that is used for the source package (tar/zip)

What should be the problem here?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJXoC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJbhr,pekko,1411758187,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T09:47:39Z,2023-02-01T09:47:39Z,"> What in the proposed process would require changing the sources after the fact?

Editing the README.md to update the version in order to create a new commit (to avoid having multiple git tags on a single commit due to the already existing RC tag). I just realized though that the solution to do this is simple, just before a release is made a new commit can be created that updates the release version in the README.md and if the release vote fails then we can add another commit reverting the change in version.

Note that currently there isn't any version mention in Pekko's README.md, so we would need to add it in. I think that updating the version is a good excuse to create a new commit anyways

> What should be the problem here?

Apologies, I shouldn't have mentioned problem. There isn't any technical issue, just some previous confusion","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJbhr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJdLD,pekko,1411764931,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-01T09:52:04Z,2023-02-01T09:52:04Z,"> to avoid having multiple git tags on a single commit due to the already existing RC tag

Why do we have to avoid that? Edit: To make sure sbt-dynver does not get confused?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJdLD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJeoY,pekko,1411770904,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-01T09:54:44Z,2023-02-01T09:54:44Z,"> Why do we have to avoid that?

From some primitive googling apparently there are some qol issues with multiple tags on same commit in git (see https://stackoverflow.com/a/56039163) but I in reality it may be a non concern and I might just be overthinking something. 

In any case I think this is irrelevant because at the time a release is being made, the version noted in `README.md` is going to be less than the version thats just about to be initiated so making a new commit with the new version being announced in this case makes sense.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UJeoY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UrobL,pekko,1420723915,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T12:53:10Z,2023-02-07T12:53:10Z,"@raboof Answering https://github.com/apache/incubator-pekko/issues/132#issuecomment-1420654768 here since its relevant thread

> > the reason why I am asking this is that it needs to be documented as part of the release process (and also checked/improved/modified) because a proper ASF release needs to be done on a release managers machine, not CI.
> 
> It might be interesting to know it might be OK to create ASF releases from CI when certain conditions are met, something like:
> 
> * project has reproducible builds for source and binary artifacts
> * RM creates tag
> * CI system builds RC, signs it with a CI specific key and deploys it to staging
> * PMC members review the release which includes building and confirming that source and binary artifacts are as expected (identical to those built by CI)
> * PMC members VOTE
> * RM promotes RC if vote passes
> 
> As you can see this hinges on having reproducible builds for Pekko - which might be a good thing to have in any case, but premature to require for the release? I've done some work towards that in the past, so it might be close, but I'm not sure it's currently complete.
> 
> (more context on the members list at https://lists.apache.org/thread/dytplxdj7cy545oxcvgl2wjombj3gbmc - we might want to clarify https://www.apache.org/legal/release-policy.html#owned-controlled-hardware further at some point)

As far as my understanding goes (unless I am misunderstanding or misreading), this is currently not allowed (also the https://lists.apache.org/thread/dytplxdj7cy545oxcvgl2wjombj3gbmc link doesn't work on my machine), a release manager has to have control over the machine they do the release under. As you said https://www.apache.org/legal/release-policy.html#owned-controlled-hardware may need to be updated but then it opens other issues, for example if you want a CI machine to build a release it also needs to sign it (in this case talking about signing jar artifacts about to be uploaded to maven). Doing so would mean putting your private/signing key as a secret into the CI machine which is not allowed, see https://infra.apache.org/openpgp.html#private-keyring-management.

Also since its strongly recommend to use a passphrase to generate a private key (see https://infra.apache.org/openpgp.html#key-gen-generate-key) this would mean having to also put the passphrase as a secret into CI. This also opens a can of worms which is ""who is doing the release on CI""? i.e. if I am myself doing a release (I am release manager) then it makes sense that the CI would use my private key to make the release which means my private key needs to be stored as a Github secret. This would imply having to store the private key for every ASF project committer as a secret (and the CI would have to grab the relevant key from whoever pushed the tag to trigger the build). For this reason it would make more sense to have a private key specific just for CI, but then this would break the paper trail to the release manager (which I presume is the main point of signing in the first place, even from an ASF legal/insurance standpoint).

Ontop of all of this, I cannot see a procedure (either in confluence wiki or on ASF documentation) on how to store the keys as github secrets. Note that as mentioned before I did ask these questions in `#askinfra` (it was more specific to signing SNAPSHOT releases, but the problem is the same) and I didn't get an answer as of yet.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UrobL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UsGMH,pekko,1420845831,130,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-02-07T14:15:19Z,2023-02-07T14:15:19Z,"> a release manager has to have control over the machine they do the release under

AFAICT the policy says the verification needs to happen on (a) machine(s) owned and controlled by the committer, but the artifact-being-verified might come from another machine.

There's some precedent for this approach in https://github.com/apache/logging-log4j-tools/blob/master/RELEASING.adoc though indeed it's early, and it might still be subject to change after this approach has been more formally described on Confluence and discussed further on the members@ list.

> Doing so would mean putting your private/signing key as a secret into the CI machine which is not allowed, see https://infra.apache.org/openpgp.html#private-keyring-management.

It seems for logging infra has been able to create a separate keypair for this purpose (https://issues.apache.org/jira/browse/INFRA-23996) and gave the individual PMC members revocation rights.

> For this reason it would make more sense to have a private key specific just for CI, but then this would break the paper trail to the release manager (which I presume is the main point of signing in the first place, even from an ASF legal/insurance standpoint).

When the build is reproducible, the RM (and other voters) can independently build&verify the artifact before voting, which I'd say (but IANAL) should close the loop.

Anyway, it's up to you which way to go, and I can imagine perhaps waiting until this process is more broadly vetted - just wanted to make you aware of the option ;)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UsGMH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Usog9,pekko,1420986429,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T15:41:57Z,2023-02-07T15:41:57Z,"Thanks for the response, not trying to be abrasive/obtrusive but to me there is mixed signalling/disconnect going on here, specifically what is stated in the docs and what some projects do

> AFAICT the policy says the verification needs to happen on (a) machine(s) owned and controlled by the committer, but the artifact-being-verified might come from another machine.

This specifically sounds more inline with Apache's policies but is probably not too useful for us because at least for Pekko we would be publishing using `publishSigned` which does all of these steps in one go (artifact creation + signing + publishing) and the workflow of downloading artifacts from another machine would be cumbersome and not typical (at least of Scala/SBT/Java projects). What could be done (and came up in my head earlier) is setting up a Docker image which has JDK 11 + JDK 8 setup with `JAVA_8_HOME` that would mount the pekko-core source to make it easier for release managers to make a release (the docker machine would be used locally on a release managers machine). A Docker image should also help in creating reproducible builds, assuming release managers don't use the `latest` tag.

> It seems for logging infra has been able to create a separate keypair for this purpose (https://issues.apache.org/jira/browse/INFRA-23996) and gave the individual PMC members revocation rights.

Good to know, I was thinking of doing this for `-SNAPSHOT` artifacts.

> Anyway, it's up to you which way to go, and I can imagine perhaps waiting until this process is more broadly vetted - just wanted to make you aware of the option ;)

Many thanks for the help, I think that for now we will probably go with the solution described earlier but as you said there is always room to change especially if alternative solutions become more vetted/accepted.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Usog9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UsqsF,pekko,1420995333,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-07T15:48:04Z,2023-02-07T15:48:04Z,"Just my view, but I would prefer if Pekko team don't try to lead on the release process side. It's much easier for a TLP to innovate on the release process. A podling, like Pekko, does not just need PPMC approval but also IPMC approval for the releases.

And sbt also restricts our options. Maven has good tools to support SBOMs and other secure release innovations. sbt ecosystem is a bit behind the curve on this.

Once we get a v1.0.0 release out, maybe we can review the release process. But for now, we can copy the processes used by other podlings.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UsqsF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UssY1,pekko,1421002293,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T15:52:43Z,2023-02-07T15:52:43Z,"> Once we get a v1.0.0 release out, maybe we can review the release process. But for now, we can copy the processes used by other podlings.

This is my view as well, the only exceptions which are practically infeasible for technical reasons (i.e. sbt plugins not working with source packages) but even then until we are a TLP we should be as accommodating as possible","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UssY1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ut-wJ,pekko,1421339657,130,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-02-07T19:36:39Z,2023-02-07T19:36:39Z,"Well this a word storm if you have to pick it up. (I tried to consider all of the above statements, so apologies if I stupidly missed out on something with following reply).

Just want to throw something on to the table, what if:

1. A tag in Git(Hub) instead of triggering a binary release workflow builds the zip which is considered ""the release"" by the ASF.
2. In the process of constructing that zip 1 file, not in Git, is added to the archive, which holds all Git version info
  - Git commit sha
  - Git version as defined from tag
3. The SBT build is aware that, if above file is defined, all version info is coming from that file and not from Git (the Zip has no Git context)
4. Now you have the artifact on which the ""validation"" and ""voting"" should take place.
5. Once the zip is voted to release and published on the ""official location"" some automation pipeline picks up that zip from that very place and builds and publishes the Maven Central artifacts from it.

I know it doesn't naturally fall in to the SBT plugin ecosystem, but I can't help at feel as this being how the authors of the Apache process envisioned it?

Clearly you should be damn sure about the release before setting the tag, because mutating tags seems really not done. So `4` above should be somewhat of a formality. It's `5` the publishing from the zip, where ""the difference"" sits from proposed strategies sits, I think.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Ut-wJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuPtf,pekko,1421409119,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-07T20:34:47Z,2023-02-07T20:34:47Z,"@spangaer all Pekko releases for the next while will need to be voted on the Pekko PPMC but also the Incubator PMC. The Incubator PMC have a lot of podlings. It is much simpler, for now, for us to follow a similar release process to everyone else.

To summarise what a typical ASF release looks like:
* A release manager (a person) volunteers.
* The release manager gets agreement that it is a good time for a release.
* The release manger builds the release artifacts that act as candidates
  * source zip and tgz
  * binary zip and tgz with the jars and dependency jars needed by them (probably also some tools to test the jars, eg shell scripts that run simple examples)
  * these zips and tgzs are published to an Apache staging website and accompanied by .asc (gpg signing) and .sha256/.sha512 (digests)
  * the release manager's public key must be added to a KEYS file that is accessible from our website (usually in git repo)
  * most ASF teams also publish the jars to repository.apache.org (a Nexus installation) - staged, as opposed to a full release - there are ways to configure sbt resolvers to use these staged jars
  * a git tag for the RC might be useful - but it might be more useful to include the git commit sha in the vote email (to avoid having a lot of tags -- you can be pretty much guaranteed that we will need to do a large number of RCs and votes for every release until we get the process right)
* a vote is called and voters are expected to check the source and binary releases and ideally, the repository.apache.org jars
* if vote fails, all the artifacts are removed (by the release manager)
* if the vote passes, the same artifacts that were voted on are released - they should not be rebuilt
  * the source and binary zips and tgzs are published to the ASF release CDN (by the release manager)
  * these artifacts are removed from the staging area
  * our website is updated to announce the release and our download page is updated to access the new release artifacts (as well as asc and sha files)
  * web site is updated with latest docs and java/scala api docs
  * emails are sent to ASF announce mailing list as well as the Pekko dev and user mailing lists
  * the release manager logs into repository.apache.org and completes the release of the jars/poms to Maven Central
  * git tag should be added for this release

Other than the binary zip/tgz files and setting up the the access to the staging and release web sites, we have basically everything ready for a release manager - particularly one like me who has done ASF releases before - to do a release.

I don't see how adding lots of automation helps. The requirements currently call for a release manager who is going to have to do a lot of manual tasks. Adding automation to replace simple one liners like gpg signing a file and having those automations potentially be brittle - when we have loads of documentation to fix, loads of code to repackage, etc. - seems like a low priority to me.

After we get a release or 2 under our belts, we can look at the release process again - but until we become a TLP, I think we are pretty limited in straying from the current ASF norms.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuPtf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuSSp,pekko,1421419689,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T20:43:04Z,2023-02-07T20:43:04Z,"> I don't see how adding lots of automation helps.

When I am talking about automation, I am talking about checks that make sure release managers don't do something that is actually provably incorrect, i.e. an example of such a check would be making sure that the private/signing key you are using is registered to an apache id and is inside Apache's KEYS file, i.e. https://github.com/apache/kafka-site/blob/asf-site/KEYS

And such a thing would definitely be helpful because accidental releases without the correct signing key (at least for binaries) has happened, even with manual checking. Humans tend to be more fallible then well written programs (or checks in this regard).

Not saying that such checks are critical, but they are definitely helpful especially considering how manual and foreign the process is for the current Pekko community.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuSSp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuUK0,pekko,1421427380,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-07T20:49:50Z,2023-02-07T20:49:50Z,"* The voters are actually supposed to check the asc / sha files - they shouldn't be voting +1 if they haven't done checks like this
* ASF has some automation for checking released artifacts (ones on the release downloads CDN) - I know this is a bit late but in the real world the asc and/or sha files can be regenerated and uploaded to the CDN
* having our own automated checks sounds useful too but there is also a lot of other stuff to do.
 
Approx 10 git repos with dozens of modules overall to get redocumented, repackaged, retested. And a clock ticking with regards to the end of Akka v2.6 support - we really need to have the v1.0.0 releases started in a couple of months because the ecosystem of Akka-based libs are not likely to even look at Pekko until we get that out.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuUK0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuUxI,pekko,1421429832,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T20:51:59Z,2023-02-07T20:51:59Z,"> * The voters are actually supposed to check the asc / sha files - they shouldn't be voting +1 if they haven't done checks like this
> * ASF has some automation for checking released artifacts (ones on the release downloads CDN) - I know this is a bit late but in the real world the asc and/or sha files can be regenerated and uploaded to the CDN
> * having our own automated checks sounds useful too but there is also a lot of other stuff to do.
> 
> Approx 10 git repos with dozens of modules overall to get redocumented, repackaged, retested. And a clock ticking with regards to the end of Akka v2.6 support - we really need to have the v1.0.0 releases started in a couple of months because the ecosystem of Akka-based libs are not likely to even look at Pekko until we get that out.

I know that voters are meant to check the signatures, my point is there is no harm done in adding an additional automatic check which is much less likely to fail. Again re-iterating my point about humans making mistakes.

> Approx 10 git repos with dozens of modules overall to get redocumented, repackaged, retested. And a clock ticking with regards to the end of Akka v2.6 support - we really need to have the v1.0.0 releases started in a couple of months because the ecosystem of Akka-based libs are not likely to even look at Pekko until we get that out.

Yes this is a fair point, I am spending most of time on getting the package renaming/code changes done.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UuUxI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uxt4K,pekko,1422319114,130,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-08T09:49:12Z,2023-02-08T09:49:12Z,"Thanks for all that input. I fully agree we should make sure we stay on the critical path to get a first release out and optimize later on. It's quite useful to have multiple alternatives already evaluated here but let's stay mostly on the well-known path even if that requires a fair bit of manual work. In that regard, I would almost fully support @pjfanning's suggestion.

What I would still like to avoid is for the release-manager to have to paste any commands. We can have a simple setup using shell scripts that does all the required steps and helps that no steps are missed and that they can easily be repeated.

I would not worry about the technicalities of source releases, these require a few steps but they should be easily scripted. I don't think we should even build them into sbt because we just don't have to (because it requires absolutely no information that only the sbt build has). The script should use the same environment variables that sbt uses for providing the GPG keys but other than that it should be easy to do in a script (easier than in sbt).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uxt4K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uxwcy,pekko,1422329650,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-08T09:57:31Z,2023-02-08T09:57:31Z,"> What I would still like to avoid is for the release-manager to have to paste any commands. 

I think the issue here is that Apache release process expects release managers to manually paste commands. My own view is that I do want to automate this

> I would not worry about the technicalities of source releases, these require a few steps but they should be easily scripted. I don't think we should even build them into sbt because we just don't have to (because it requires absolutely no information that only the sbt build has). The script should use the same environment variables that sbt uses for providing the GPG keys but other than that it should be easy to do in a script (easier than in sbt).

One reason I wanted to use sbt is that I want to reuse sbt-pgp to sign both the source package and the JVM artifacts. This would enforce that the same (and correct) key is used for both and would also mean that the key information (i.e. how to lookup the private/signing key) only needs to be in one place.

This would require some upstream changes to sbt-pgp but its actually not that difficult because sbt-pgp is just a wrapper around gpg anyways. I am willing to take this up but aside from scoping I have decided not to spend time on this before the 1.0.0 release because @pjfanning is correct here, the highest priority is to get that 1.0.0 release out even if the first release is manual.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uxwcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U0VBn,pekko,1423003751,130,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-02-08T17:42:35Z,2023-02-08T17:42:35Z,"I think the way to proceed here is to put all the bits into open issues.  Flag the ones critical for release 1 and let's work on them. (not that I actually do much work), my original thought was to put them into a project so that we can see what needs to be done and be very clear about what does not need to be in 1.0.

I agree that the build should be manual to start.  Only after it has been done a few times will it make sense to try to automate, as only after the first few times will we know where the pain points are.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U0VBn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U2nR9,pekko,1423602813,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-09T04:11:12Z,2023-02-09T04:11:12Z,"Hi,
> If thats the case then as you said its kind of arbitrary and doesn't matter, as you would just create your own private key and publish it to some key repo. I just wanted to confirm with ASF if thats the case or whether we should use the same key as the source package for Maven releases (which does provide an actual benefit, as you can securely confirm that a Maven release artifact is signed with the same key as Apache's official source package).
> 
The release manager uses their own KEY see https://infra.apache.org/release-signing.html <https://infra.apache.org/release-signing.html>

Justin

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U2nR9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U4cNK,pekko,1424081738,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-09T12:06:19Z,2023-02-09T12:06:19Z,"> Hi,
> If thats the case then as you said its kind of arbitrary and doesn't matter, as you would just create your own private key and publish it to some key repo. I just wanted to confirm with ASF if thats the case or whether we should use the same key as the source package for Maven releases (which does provide an actual benefit, as you can securely confirm that a Maven release artifact is signed with the same key as Apache's official source package).
> The release manager uses their own KEY see https://infra.apache.org/release-signing.html <https://infra.apache.org/release-signing.html> Justin

Yes this is clear, we are talking about enforcing the use of that same release managers key for signing JVM jar artifacts that will be published to Apache's Maven Repository (which is considered a convenience package)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U4cNK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U5Mc4,pekko,1424279352,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-09T14:29:52Z,2023-02-09T14:29:52Z,"@mdedetrich I'm not dead set against having a docker image but I'd prefer to start by documenting what the release manager needs installed. It could be easier to just let the release manager check their computer. My main concern is gpg and the ~/.gpg folder.

In practice, the release manager needs:
* java 8 and java 11 installed - I like [sdkman](https://sdkman.io/)
* sbt installed - the project/build.properties controls which sbt version is used in the build but you need to have a sbt runtime installed - also sdkman good for this
* gpg - maybe define a version minimum
* the release manager has created a secret key, pushed its public part to a keyserver - and updated the KEYS file (usually kept in git)

I'm not sure that a docker image makes this easier. I know you can mount local dirs when you start a docker container. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U5Mc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U5O4v,pekko,1424289327,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-09T14:35:36Z,2023-02-09T14:35:36Z,"> java 8 and java 11 installed - I like [sdkman](https://sdkman.io/)

Yeah this is the issue, not everyone uses skdman (for example I don't, I instead use jsenv to switch between JDK's). Release managers have different OS's, some which can handle having multiple JDK's installed at once and others not. At least having a basic `Dockerfile` that can set this up I think would solve a lot of annoyance/pain even for a basic initial release. To complicate things further, technically speaking you don't even need multiple JDK's installed, you actually need JDK 11 installed and have the **extracted contents** of JDK 1.8 somewhere on the system.

A `Dockerfile` can cleanly and reliably abstract over this mess.

> sbt installed

This we can defer to the sbt installation documentation. Thankfully nowadays sbt is pretty ergonomic, i.e. it will automatically update and use the correct sbt version as per project

> gpg - maybe define a version minimum

Can also defer to official Apache GPG documentation (i.e. https://infra.apache.org/openpgp.html)

> I'm not sure that a docker image makes this easier. I know you can mount local dirs when you start a docker container.

I have done this before and its a lot easier then it sounds and Apache Daffodil already does this. The `Dockerfile` can build the environment and its a single command to copy the contents of the pekko source into the docker container and the entire release process can be done within the container.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U5O4v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEcew,pekko,1511114672,130,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-17T10:48:06Z,2023-04-17T10:48:06Z,"Hi there, 
Just read through this and i'm wondering what the next steps are here and where we need further investigations.

It looks like we've got a clearer picture on the organizational / maven / apache related steps required here so the original description checklist should be updated. It also seems that discussions here may solve some of the questions in #78 , so that card could do with a status update. 

Echoing @Claudenw , could outstanding subtasks drawn up as issues in the 1.0.0 milestone? 

- It looks like one of these subtasks should be 'Document the release process' , where we update 'Contributing.md' with any specific details or at least point towards relevant ASF documentation. ( I imagine this will roughly be https://github.com/apache/incubator-pekko/issues/130#issuecomment-1421409119 + https://github.com/apache/incubator-pekko/issues/130#issuecomment-1424279352 with any automation specifics added )

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEcew/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aE3Zz,pekko,1511224947,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T12:11:45Z,2023-04-17T12:11:45Z,This task is done by a PMC member. We have mentors and PMC members who have release managed Apache projects before. I'm not sure if this needs to be finalised before the first release. The release manager can readily write up they do. Releasing is not that complicated if you've done it before. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aE3Zz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFDnI,pekko,1511274952,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-17T12:48:17Z,2023-04-17T12:48:17Z,"One technical thing we can do is to integrate the docker image that @jrudolph helped setup at https://github.com/apache/incubator-pekko/pull/188 . We can work more on his branch to clean it up/make it more professional.

I would say this docker image is a requirement because of how complex the release process of Pekko core will be (i.e. requiring multiple jdk's etc etc). Also need to test that the signing works with gpg properly (I am in the process of setting up an Apache master key for releases but it will be stored on a yubikey).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFDnI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFETs,pekko,1511277804,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T12:50:23Z,2023-04-17T12:50:23Z,"I don't understand 'master' key. The releases are signed by the release manager's personal key. The public parts of the keys that are used for signing have to be added to a KEYS file that we make accessible from our download page. The keys file is usually also checked into the main git repo for the project.

Examples:
* https://downloads.apache.org/poi/KEYS
* https://github.com/apache/poi/blob/trunk/KEYS","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFETs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFEci,pekko,1511278370,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-17T12:50:48Z,2023-04-17T12:50:48Z,"> I don't understand 'master' key. The releases are signed by the release manager's personal key.

Thats what I meant","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aFEci/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aJFaW,pekko,1512330902,130,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-04-18T02:04:23Z,2023-04-18T02:04:23Z,"Hi,

Just a reminder that the Incubator PMC will need to vote on your release. They will also likely use their own tools and methods of checking rather than any automation/scripts that you provide. In my experience automation can be helpful, but people can put too much faith in it and it can easily miss issues in the release.

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aJFaW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aL8tq,pekko,1513081706,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-18T12:58:56Z,2023-04-18T12:58:56Z,"> Hi, Just a reminder that the Incubator PMC will need to vote on your release. They will also likely use their own tools and methods of checking rather than any automation/scripts that you provide. In my experience automation can be helpful, but people can put too much faith in it and it can easily miss issues in the release. Kind Regards, Justin

So the specific automation we are talking about right now is just about creating a reproducible environment so we can make deterministic builds for a release which I would argue is necessary for us considering how complex the setup for creating a Pekko build is. (if we don't do this at best we waste a lot of time for release managers to actually make a release and at worst we will create builds that differ in subtle ways depending on who's machine is making a release).

As you pointed out however any additional automation is likely not necessary at least when it comes to the Incubator PMC voting on our release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aL8tq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bkvpS,pekko,1536358994,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-05T14:36:54Z,2023-05-05T14:36:54Z,"@jrudolph @mdedetrich I've set these up for the RCs and releases, respectively.
* https://dist.apache.org/repos/dist/dev/incubator/pekko/
* https://dist.apache.org/repos/dist/release/incubator/pekko/

You can use `svn co <url>` to check out these dirs.
If you commit changes, you need to use your Apache username and password.

Have a look at the https://dist.apache.org/repos/dist/dev/incubator and https://dist.apache.org/repos/dist/release/incubator pages to look at other incubator projects and see what they have published.

I still need to look into what if anything else needs to be done to link our release dir above so that everything that gets published to it gets properly loaded up to the Apache download and archive CDNs. It may be enough to have the dirs set up like this or I might need to find some config setting somewhere that I need to update to have the URL I've set up.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bkvpS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfWX,pekko,1565390231,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T12:21:43Z,2023-05-27T12:21:43Z,"I've created https://github.com/apache/incubator-pekko-site/wiki/Pekko-Release-Process (initially started in my fork but moved on request - to faciliate collaboration).

There is a lot more work and detail needed. Initially, I'm focusing on the non-technical pieces like the sequence of events.

Building the release artifacts is by far the easiest bit.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfWX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfa6,pekko,1565390522,130,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T12:23:35Z,2023-05-27T12:23:35Z,@pjfanning Can you put it on https://github.com/apache/incubator-pekko-site so that others can edit it?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfa6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/130,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfgz,pekko,1565390899,130,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T12:24:32Z,2023-05-27T12:24:32Z,"> @pjfanning Can you put it on https://github.com/apache/incubator-pekko-site so that others can edit it?

sure","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dTfgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/132,pekko,1558300859,132,Publish artifacts using JDK 1.8 or remove sbt JDK 1.8 check?,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-01-26T15:13:34Z,2023-04-15T09:32:50Z,"So I noticed that when publishing Pekko we are doing so using JDK 11. While there is no problem with this, at the same time the current sbt build will refuse to load with a JDK that is newer than 1.8.

We should either pubilsh using JDK 1.8 (at least for the 1.0.x branch) or just remove the sbt check?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/132/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uk6a6,pekko,1418962618,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-06T11:55:26Z,2023-02-06T11:55:26Z,"So I spoke with @raboof at FOSDEM, and the situation with pekko build is quite interesting and complicated. While building documentation only works with JDK 11 (as has been commented in the various github actions workflows), the core build/artifacts of Pekko needs to be built with JDK 1.8.

While typically one would use `source`/`target` tags (such as https://github.com/pjfanning/sbt-source-dist/blob/main/build.sbt#L9), specifically in the case of Pekko this doesn't work because while the `source`/`target` flags force javac to produce the relevant targeted bytecode, it doesn't account for JVM standard library changes and apparently there was some ABI incompatible standard library changes from JDK 1.8 to JDK 11.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uk6a6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UlbAg,pekko,1419096096,132,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-02-06T13:37:10Z,2023-02-06T13:37:10Z,":wave: it was good to meet in person!

I would definitely recommend compiling with JDK11 or later, to unlock some things related to `java.util.concurrent` and JFR, even if for 'the rest' of the artifacts we support running on Java 8.

Indeed normally you'd just build with JDK11 and target Java 8, but because of some JVM standard library changes, for some classes (notably `EnvelopeBuffer`) this isn't sufficient, and you need to provide a reference to the JDK8 runtime library. Additionally, I think some of the `sun.misc.Unsafe` usage should still be removed before this is possible.

So best in the short run would be to build with JDK11, but have JDK8 available on the build machine as well. I think on most systems this should be auto-detected (and throw an error when it is not found, in which case you can point a `JAVA_8_HOME` environment variable to it).

More details at https://github.com/apache/incubator-pekko/blob/main/project/JdkOptions.scala#L60-L67 and https://github.com/apache/incubator-pekko/blob/main/project/JdkOptions.scala#L77-L79.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UlbAg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UqgNz,pekko,1420428147,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T09:06:59Z,2023-02-07T09:06:59Z,"> 👋 it was good to meet in person!

Likewise!

> So best in the short run would be to build with JDK11, but have JDK8 available on the build machine as well. I think on most systems this should be auto-detected (and throw an error when it is not found, in which case you can point a JAVA_8_HOME environment variable to it).

So just to clarify what is going on, it appears that to properly build Pekko (and by build I mean JVM artifacts which are shipped to Maven repo) we need a machine which

1. Has a JDK 11 installation available which I presume can have the standard installation (i.e. `JAVA_HOME`) point to this. Necessary for docs and `java.util.concurrent`.
2. Also has a JDK 8 installation available which `JAVA_8_HOME` needs to point to. From reading the code the Java 8 installation is not used for actually compiling Pekko, the only reason we need it is to grab runtime `rt.jar` which we compile with JDK 11.

From a quick look at the code it does appear to automatically handle which artifacts need to compiled with which JDK. In any case the reason why I am asking this is that it needs to be documented as part of the release process (and also checked/improved/modified) because a proper ASF release needs to be done on a release managers machine, not CI.

It also makes sense that for nightlies/snapshots we also do the same behaviour, if I am correct about JDK 8 this shouldn't be too hard to solve (i.e. we can manually install JDK 8 to some path on a machine that already has JDK 11 and just point `JAVA_8_HOME` to it).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UqgNz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UrXiw,pekko,1420654768,132,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-02-07T11:57:24Z,2023-02-07T11:57:24Z,"Yes, that looks accurate.

> the reason why I am asking this is that it needs to be documented as part of the release process (and also checked/improved/modified) because a proper ASF release needs to be done on a release managers machine, not CI.

It might be interesting to know it might be OK to create ASF releases from CI when certain conditions are met, something like:

- project has reproducible builds for source and binary artifacts
- RM creates tag
- CI system builds RC, signs it with a CI specific key and deploys it to staging
- PMC members review the release which includes building and confirming that source and binary artifacts are as expected (identical to those built by CI)
- PMC members VOTE
- RM promotes RC if vote passes

As you can see this hinges on having reproducible builds for Pekko - which might be a good thing to have in any case, but premature to require for the release? I've done some work towards that in the past, so it might be close, but I'm not sure it's currently complete.

(more context on the members list at https://lists.apache.org/thread/dytplxdj7cy545oxcvgl2wjombj3gbmc - we might want to clarify https://www.apache.org/legal/release-policy.html#owned-controlled-hardware further at some point)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UrXiw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Urojk,pekko,1420724452,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-07T12:53:41Z,2023-02-07T12:53:41Z,Answered in https://github.com/apache/incubator-pekko/issues/130#issuecomment-1420723915 since its a more relevant thread,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Urojk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGO1s,pekko,1427697004,132,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T10:28:09Z,2023-02-13T10:28:09Z,"> Indeed normally you'd just build with JDK11 and target Java 8, but because of some JVM standard library changes, for some classes (notably `EnvelopeBuffer`) this isn't sufficient, and you need to provide a reference to the JDK8 runtime library. Additionally, I think some of the `sun.misc.Unsafe` usage should still be removed before this is possible.

We should check if that is even still correct, that sounds like a bug in one version of JDK 11 that might have been fixed in the meantime...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGO1s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGPa2,pekko,1427699382,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-13T10:29:45Z,2023-02-13T10:29:45Z,"> We should check if that is even still correct, that sounds like a bug in one version of JDK 11 that might have been fixed in the meantime...

This would be nice to verify in the sense that if has been fixed then there is less of a need to create a `Dockerfile` so we can setup a proper build environment for a release manager","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGPa2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGQzw,pekko,1427705072,132,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T10:32:40Z,2023-02-13T10:32:40Z,"I just checked and at least the Unsafe usage would have to be fixed. Additionally, just verifying that one issue might not be enough to validate that there might be other incompatibilities with JDK 8, so I guess we should keep it like this for now...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGQzw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGStw,pekko,1427712880,132,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T10:38:58Z,2023-02-13T10:38:58Z,Do we understand how this is currently working on GHA? We only install JDK 11 but JDK 8 is automatically available on the `ubuntu-20.04` of GHA?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGStw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG846,pekko,1427885626,132,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-02-13T12:49:04Z,2023-02-13T12:49:04Z,"Not sure whether that makes it magically work, but yes:
https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#java
(4 JDKs as it even packs Graal it seems)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG846/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG9gN,pekko,1427888141,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-13T12:51:16Z,2023-02-13T12:51:16Z,"> Not sure whether that makes it magically work, but yes: https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#java (4 JDKs as it even packs Graal it seems)

Thanks but the environment variable is different here than what pekkos sbt seems to be checking? From https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#java it says `JAVA_HOME_8_X64` but the sbt build checks for `JAVA_HOME_8`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG9gN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VHBL5,pekko,1427903225,132,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-02-13T13:01:18Z,2023-02-13T13:01:18Z,"If `JAVA_8_HOME` is not set, the build [consults](https://github.com/apache/incubator-pekko/blob/main/project/JdkOptions.scala#L92) the sbt [fullJavaHomes](https://github.com/sbt/sbt/blob/973cd63e0b6bfe0d06d364f314f391a08a77d38b/main/src/main/scala/sbt/Defaults.scala#L206), which among other sources [auto-detects Java from common distribution paths](https://github.com/sbt/sbt/blob/973cd63e0b6bfe0d06d364f314f391a08a77d38b/main/src/main/scala/sbt/internal/CrossJava.scala#L485)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VHBL5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VHCfn,pekko,1427908583,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-13T13:04:41Z,2023-02-13T13:04:41Z,"> If `JAVA_8_HOME` is not set, the build [consults](https://github.com/apache/incubator-pekko/blob/main/project/JdkOptions.scala#L92) the sbt [fullJavaHomes](https://github.com/sbt/sbt/blob/973cd63e0b6bfe0d06d364f314f391a08a77d38b/main/src/main/scala/sbt/Defaults.scala#L206), which among other sources [auto-detects Java from common distribution paths](https://github.com/sbt/sbt/blob/973cd63e0b6bfe0d06d364f314f391a08a77d38b/main/src/main/scala/sbt/internal/CrossJava.scala#L485)

Thanks.

The good news is that then the CI building pekko-core is then a non issue so snapshots shouldn't have problems related to this thread. If I understand correctly they also happen to offer equivalent docker images (see https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#cached-docker-images) which then makes the just a lot easier for a release manager.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VHCfn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/132,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_C6a,pekko,1509699226,132,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T09:32:49Z,2023-04-15T09:32:49Z,"I am closing this since all questions have been answered, i.e. we are going to release with JDK 8 support.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_C6a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/134,pekko,1563187990,134,add license headers to markdown files,pjfanning,11783444,PJ Fanning,,CLOSED,2023-01-30T20:56:32Z,2023-06-19T23:11:55Z,"ASF generally prefer that all files have Apache license headers - not just the source files. 

There are js and html files in the docs dir too - these probably would be better with license headers too.

Use of `sbt-header` to check for and automate the adding of license headers is preferred.

sbt-paradox may work differently from Github.

Github supports:
```
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  license agreements; and to You under the Apache License, version 2.0:
 
    https://www.apache.org/licenses/LICENSE-2.0

  This file is part of the Apache Pekko project, derived from Akka.
-->
```

It maybe better to start with `<!---` - some tools document it this way.

 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/134/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UAJ1w,pekko,1409326448,134,NA,mkurz,644927,Matthias Kurz,,NA,2023-01-30T21:01:01Z,2023-01-30T21:01:01Z,"I see you use sbt-header, have a look how we do that in Play-Framework (specially the `md` filetype):
https://github.com/playframework/playframework/blob/66f69ce73a97bdf5a3157aea3b991a7b979c1799/project/BuildSettings.scala#L53-L76","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UAJ1w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vuiis,pekko,1438263468,134,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-21T10:49:59Z,2023-02-21T10:49:59Z,"I've done a little experimentation. It seems like Paradox prefers `<!---` (ending with `-->`).

It seems like we may not be able to the license header at the start of every files, Paradox expects certain features to appear right at the start of the .md file so we would need in some cases to put the license header after that intro.

See this example in the Druid build - https://github.com/apache/druid/edit/master/docs/operations/use_sbt_to_build_fat_jar.md

This section only works properly if it appears at the start of the file.
```
---
id: use_sbt_to_build_fat_jar
title: ""Content for build.sbt""
---
```

I have hit trouble with adding the license header to some of the Pekko .md files which causes sbt-paradox to fail. I haven't had time to debug all the issues yet.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vuiis/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_DWG,pekko,1509700998,134,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T09:34:21Z,2023-04-15T09:34:21Z,I would presume that similar to conf files we can use the SPDIF license format?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_DWG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_hqF,pekko,1509825157,134,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-15T13:29:04Z,2023-04-15T13:29:04Z,@mdedetrich this may not be needed based on https://issues.apache.org/jira/browse/LEGAL-634 comments,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_hqF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/134,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_wXZ,pekko,1509885401,134,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T16:18:27Z,2023-04-15T16:18:27Z,Okay let's close the issue if needed once it's clarified then.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_wXZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/139,https://api.github.com/repos/apache/pekko/issues/139,pekko,1565866485,139,try to fix the multi-node CI build,pjfanning,11783444,PJ Fanning,,OPEN,2023-02-01T10:37:09Z,2023-03-13T12:52:44Z,"https://github.com/apache/incubator-pekko/blob/main/.github/workflows/multi-node.yml

This workflow is a copy of a Lightbend Akka workflow. It requires Google Cloud and a set of tokens to access it. 

We need to decide if these tests could be run on alternative infrastructure.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/139/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/139,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vj_hr,pekko,1435498603,139,NA,l2dy,14329097,Zero King,,NA,2023-02-18T06:28:10Z,2023-02-18T06:28:10Z,"The test is based on Kubernetes, so it should be portable. However, 30+ GiB of memory (10 pods and each takes 3 GiB) is required, while GitHub-hosted runners have 7 GB only.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vj_hr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/139,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNwu_,pekko,1446448063,139,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-27T14:39:11Z,2023-02-27T14:39:11Z,"We shouldn't make this a requirement for 1.0.0.

The multi-node tests mean that tests that are run as multi-jvm tests in the regular build are instead run distributed over multiple machines / VMs / containers to cover a more diverse set of working environments. The idea is that some race conditions might only turn up under more realistic environments than running on a single machine over localhost networking.

Since we will not change functionality for 1.0.0, there is no reason to expect any additional failures to turn up that would only show in multi-node tests (the very same tests are still run as multi-jvm tests as part of nightly builds).

They become more important when we start changing functionality and want to ensure changes that might change non-deterministic behavior are stable under a more diverse set of working conditions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNwu_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/140,pekko,1567864050,140,fix issue with license/notice in pekko-protobuf-v3 jar,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-02T11:27:47Z,2023-02-14T12:45:13Z,"* this jar is built using sbt-assembly and it basically shades classes from protobuf-java v3
* the existing project/MetaInfLicenseNoticeCopy.scala works for jars that we build from compiled source and resource files but does not work with sbt-assembly built jars
* sbt-assembly may have an option to add artbitrary files to the output jar but I haven't found it
* one possible solution is to build a local jar as part of the pekko build that just contains the license and notice files in its META-INF dir and let sbt-assembly merge it and the shaded contents of protobuf-java v3
* a more radical solution might be to drop the pekko-protobuf-v3 jar altogether and just use the akka 2.6 one (likewise for the pekko-protobuf jar - this one is similar but built differently, we already have its source copied to our repo and build it like a normal jar)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UQbeZ,pekko,1413592985,140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-02T11:32:43Z,2023-02-02T11:32:43Z,"> sbt-assembly may have an option to add artbitrary files to the output jar but I haven't found it

I just had a look and also couldn't find it but I think this might be a considered a reasonable option and upstream may be open to it. I made an issue on it at https://github.com/apache/incubator-pekko/issues/140","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UQbeZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UQdfj,pekko,1413601251,140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-02T11:39:46Z,2023-02-02T11:39:46Z,"Another option, since jar files follow the zip standard it shouldn't be too hard to just decompress the Jar file manually, add in the LICENSE/NOTICE (and any other necessary files) and then just recreate the jar. Would be a bit annoying as a workaround but it should be possible.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UQdfj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3z8S,pekko,1423916818,140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-09T09:55:49Z,2023-02-09T09:55:49Z,I will try and look into this on the weekend,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3z8S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U30wN,pekko,1423920141,140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-09T09:58:32Z,2023-02-09T09:58:32Z,"So I made an issue on sbt-assembly at https://github.com/sbt/sbt-assembly/issues/491 some time ago and didn't get a response, I might try programming the solution and pinging the stakeholders. 

If that doesn't end up working out (we can define a cutoff) then we can manually do the zip workaround I mentioned before.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U30wN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VCXj-,pekko,1426684158,140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-11T10:09:21Z,2023-02-11T10:09:21Z,I made a draft PR for sbt-assembly at https://github.com/sbt/sbt-assembly/pull/493 but @jrudolph is implying that it may not be necessary and that sbt-assembly should work with sbt's standard mechanism for resources.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VCXj-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/142,https://api.github.com/repos/apache/pekko/issues/142,pekko,1568660675,142,docs: change version numbers in docs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-02T19:29:52Z,2023-04-22T18:41:20Z,"A lot of the docs refer to versioning and use recent Akka release numbers to provide context. Pekko's release will 1.0.x so we are better off talking about 1.0.x and 1.0.y (possibly 1.1.z) instead of 2.5.x and 2.6.y.

Example: https://pekko.apache.org/docs/pekko/current/project/downstream-upgrade-strategy.html
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/145,https://api.github.com/repos/apache/pekko/issues/145,pekko,1569754420,145,Complete Pekko doc updates,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-03T12:17:40Z,2023-05-23T09:36:54Z,"Some work is done but there is plenty more to do:
* [pekko custom sbt-paradox](https://github.com/apache/incubator-pekko-sbt-paradox) (tentatively @jrudolph)
   * https://github.com/apache/incubator-pekko/issues/92 
* continuing work on updating docs (markdown files)
   * removing Akka/Lightbend specific docs (sometimes by linking to the Akka doc)
   * links and other akka references","{""url"": ""https://api.github.com/repos/apache/pekko/issues/145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/145,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UZO8V,pekko,1415900949,145,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-03T13:55:27Z,2023-02-03T13:55:27Z,linked to #98 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UZO8V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/145,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c6xYU,pekko,1558910484,145,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-05-23T09:34:36Z,2023-05-23T09:34:36Z,What is the status here ?  is there a list of things that need to be done to close this issue?  or a tool that can be used to find all the places that need to be checked?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c6xYU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/145,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c6yZJ,pekko,1558914633,145,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T09:36:53Z,2023-05-23T09:36:53Z,"Only humans who check the docs - that's all we have.

This is largely done. I'll close this and let humans report any issues that they find - as new issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c6yZJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/146,pekko,1569874148,146,Investigate forming mixed Pekko and Akka cluster,pjfanning,11783444,PJ Fanning,,OPEN,2023-02-03T13:50:43Z,2023-10-23T14:47:38Z,"* Use [Pekko snapshots](https://repository.apache.org/snapshots/org/apache/pekko/)
* Akka 2.6.20
* Find a simple Akka cluster scenario or sample
* akka-persistence / pekko-persistence interoperability needs testing too
* See if you can form a cluster with an Akka node and a Pekko node and see if they can interact with one another
* There is a fear that the serialized messages may contain Akka or Pekko markers that will see them rejected by nodes of the other type.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uk5k8,pekko,1418959164,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-06T11:51:59Z,2023-02-06T11:51:59Z,Related to https://github.com/apache/incubator-pekko/issues/108,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uk5k8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_Cxz,pekko,1509698675,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T09:30:38Z,2023-04-15T09:30:38Z,"@pjfanning Shall we remove this from the milestone project? There was discussion at https://lists.apache.org/thread/nr7q9orzffolwo9tj753cvkrohr9875o and we agreed that at least of now, no one really has this requirement.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_Cxz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9m6N,pekko,1559654029,146,NA,sergionoviello,1522897,Sergio Noviello,,NA,2023-05-23T15:19:53Z,2023-05-23T15:19:53Z,"This would actually be a nice to have for my project as downtime is not acceptable for my use case,  I thought other projects would have the same requirement. At the moment I'm planning to deploy Pekko nodes while the Akka nodes are running and switch the traffic to the new Pekko cluster, but this is still causing disruption for about ~1 or 2 mins ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9m6N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9osR,pekko,1559661329,146,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T15:23:53Z,2023-05-23T15:23:53Z,@sergionoviello I'm afraid that noone else needs this and I am not going to block the RC1 release to wait for this. I think the boat has sailed on this.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9osR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9qWF,pekko,1559668101,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T15:28:01Z,2023-05-23T15:28:01Z,When it comes to 1.0.0 release I definitely agree but I guess there is room for a discussion/consensus to include it for a later 1.0.x release. The main concern from my end is that such a migration is non trivial and hence it would really delay the first Pekko release by quite a margin (there is already enough tension on this aspect). Ontop of that we don't even have tests written for such a feature and our existing cluster tests had to be disabled because we don't have dedicated hardware yet.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9qWF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9sa2,pekko,1559676598,146,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T15:33:08Z,2023-05-23T15:33:08Z,"@mdedetrich if you see Johannes' answers on https://github.com/apache/incubator-pekko/issues/139, you'll see that we do have cluster tests running but not the multi node variant - so we do have reasonable coverage but it could be better.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9sa2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9ttc,pekko,1559681884,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T15:35:00Z,2023-05-23T15:35:00Z,"> @mdedetrich if you see Johannes' answers on #139, you'll see that we do have cluster tests running but not the multi node variant - so we do have reasonable coverage but it could be better.

Multi node was what I was referring to. At least to me if we are going to release such a feature it makes sense to be really sure that it works (people are after all going to be using it to do production migrations).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9ttc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9yMk,pekko,1559700260,146,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T15:44:40Z,2023-05-23T15:44:40Z,"I honestly doubt whether this is going to be done. Most users will happily have some down time to switch from Akka to Pekko - after testing out the Pekko cluster first. Other users will be able to run an independent Akka cluster and Pekko cluster simultaneously and control which work happens on each cluster, gradually switching more work to the Pekko cluster before decommissioning the Akka cluster.

The cost-benefit on this really comes out as too much cost and too little benefit.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9yMk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9zsO,pekko,1559706382,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T15:47:26Z,2023-05-23T15:47:26Z,"> The cost-benefit on this really comes out as too much cost and too little benefit.

Well yes this is the crux, if its really critical for enough people then personally I would hesitate to kill off the idea but someone/some people definitely needs to own it in creating a concrete proposal/implementation as well as testing.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c9zsO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYi9,pekko,1773766845,146,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:48:01Z,2023-10-21T11:48:01Z,"After attending Scala Matters, I realized the case of needing to do a rolling upgrade is more common than what the current Pekko maintainers assume.

I know that @He-Pin wanted to either work on this himself or find another person but I for now I will assign this to myself since if we are going to do this (highly likely) we need to make sure that its out before Pekko 1.1.0 is out since there is going to be bridging from 1.0.x to 1.1.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYi9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5p0bo_,pekko,1775352383,146,NA,zhenyanghua,6165894,Zhenyang Hua,,NA,2023-10-23T14:37:25Z,2023-10-23T14:37:25Z,Great news! Is there a timeline for this milestone?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5p0bo_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/146,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5p0g9H,pekko,1775374151,146,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-23T14:47:38Z,2023-10-23T14:47:38Z,"@zhenyanghua the changes themselves are pretty small. The biggest issue is testing them with mixed clusters. If people are willing to help out with this testing, that would be a great help.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5p0g9H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/149,https://api.github.com/repos/apache/pekko/issues/149,pekko,1575922412,149,Upload paradox/scala+java docs into nightlies folder,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-02-08T11:07:44Z,2023-02-10T09:35:03Z,"As discussed in https://the-asf.slack.com/archives/C0491A12EP2/p1675850262146849, at least initially there is a preliminary decision to upload generated paradox/scala+java docs into the apache nightlies (i.e. https://nightlies.apache.org/). The idea is the main website (which is separate and hosted at http://pekko.apache.org/) would point to the docs uploaded to nightlies. The reasons why to do this are

* Nightlies will automatically host any content that happens to have an `index.html` in a root folder. This makes it really trivial to host generated docs (see https://nightlies.apache.org/flink/flink-ml-docs-master/ as an example)
* Uploading to nightlies is very easy and almost all of the work has already been done, see https://github.com/apache/incubator-pekko/blob/main/.github/actions/sync-nightlies/action.yml. The only changes we would need to do is to run `sbt unidoc paradox` and change the `LOCAL_PATH` and `REMOTE_PATH`)
  * Each pekko module would have its own folder (i.e. pekko core would sit in `/pekko` folder, pekko-http would sit in `/pekko-http`)
    * Under that module folder there would be another one which would designate the version, i.e. `1.0.0` would sit under `/pekko/1.0.0`. Same deal with snapshots but they would have an expiry.
    * There will also be a `/pekko/current/<content>` folder which will always point to the latest release
* The core website at http://pekko.apache.org/ will then link to these docs

The Flink TLP project uses this method (go to https://flink.apache.org/ and on the left menu navigate to Documentation), so there is prior art for this and we can also ask them any questions. The reason why I am advocating for this solution is that its by far the simplest and easiest to get going, its quite similar to what other Scala/OS projects do (especially Scala projects that use Paradox), in fact Lightbend used almost exactly the same method with Akka (thats why Akka/Pekko contains https://github.com/lightbend/sbt-publish-rsync). Its more principled in design especially when taking into account the fact that docs generated from a release (i.e. paradox/scala+java doc) have a different life/update cycle compared to the main website at https://github.com/apache/incubator-pekko-site. The main site would be updated on the https://github.com/apache/incubator-pekko-site  git repo where as the doc updating would be handed by a github action/release manager within sbt.

The potential drawbacks are the size of the generated docs (~510 megabytes) although there isn't much we can do about this (scala/javadocs take up almost all of the size and its just how they are generated) and whether putting release documentation in Apache nightlies is problematic (considering that Flink does this I don't think its a concern 🤷 ). Irregardless we should also look into this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/149,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyZqa,pekko,1422498458,149,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-08T12:12:12Z,2023-02-08T12:12:12Z,"Alternatively, here's a script draft to upload generated docs and apidocs to https://github.com/apache/incubator-pekko-site:

```sh
#!/bin/sh

set -ex

# Expects generated docs in these folders
# target/javaunidoc
# target/scala-2.13/unidoc
# docs/target/paradox

TARGET_REPO=""https://github.com/apache/incubator-pekko-site""
REPO=""https://github.com/jrudolph/incubator-pekko-site""
TMPDOCS=""/tmp/docstmp""
BRANCH=""new-docs""
TARGET_BRANCH=""asf-staging""
GITOPTS=""--git-dir $TMPDOCS/.git --work-tree $TMPDOCS""

mkdir $TMPDOCS

git clone --depth 1 -b $TARGET_BRANCH $TARGET_REPO $TMPDOCS
git $GITOPTS remote add my $REPO
git $GITOPTS checkout -b $BRANCH
git $GITOPTS rm -r content/api content/japi content/docs

cp -r target/javaunidoc $TMPDOCS/content/japi
cp -r target/scala-2.13/unidoc $TMPDOCS/content/api
cp -r docs/target/paradox $TMPDOCS/content/docs
git $GITOPTS add -A content
git $GITOPTS commit -m ""publish docs""
git $GITOPTS push my $BRANCH

echo ""Now open $REPO/pull/new/$BRANCH to open PR""
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UyZqa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/149,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UybJ8,pekko,1422504572,149,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-08T12:17:04Z,2023-02-08T12:17:04Z,"Thanks! Because it makes sense to upload docs for snapshots to nightly (along with an expiry due to their size) I will go ahead and do this anyways. Since the flow is the same we can then also put docs for releases into nightlies and point to that, if there is an ASF process/incubator issue then we can look into using this script.

I also think that the script is not enough, we would also have to either have to document or automate changing the relevant paradox/unidoc settings in sbt to update the absolute link host (since its going to be in a different location), this is one advantage that using nightlies has is that we can just (for now) hardcode the URI in the sbt settings","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UybJ8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/149,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UybjI,pekko,1422506184,149,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-08T12:18:21Z,2023-02-08T12:18:21Z,One consideration regarding regular site vs. nightlies is also how these domains are served and how CDNs get involved.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5UybjI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/149,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uyb2_,pekko,1422507455,149,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-08T12:19:23Z,2023-02-08T12:19:23Z,"> One consideration regarding regular site vs. nightlies is also how these domains are served and how CDNs get involved.

True, I would assume that since Flink (one of the most popular ASF TLP's) is doing it its a non concern but thats a bold assumption","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Uyb2_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/150,https://api.github.com/repos/apache/pekko/issues/150,pekko,1576018157,150,build binary distribution,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-08T12:18:23Z,2023-02-09T10:00:44Z,"Split out from https://github.com/apache/incubator-pekko/issues/78

This item may not be needed for a v1.0.0 release. A source distribution may be enough.

* https://infra.apache.org/release-distribution -- talks mainly about the source distributions (handled in #78)
* ASF projects seem to always produce binary distributions too (example -  https://logging.apache.org/log4j/2.x/download.html)
* the binary distribution is not to be confused with the jars with push to Maven
* it is a standalone zip (and tgz) that contains all the jars we build and the dependency jars that are needed
* probably also some sample code and associated scripting that can be used to try out the jars
* there might be an existing sbt plugin that could be used - but commonly used ones like sbt-assembly don't produce exactly what we need (it creates an uber jar)
* we may need to write our own sbt plugin
* or possibly a script 
* one of the trickiest bits is going to be getting all the dependency jars dowloaded and to handle version conflicts (eg one pekko module might need a different version of a dependency jar from another) - how will our binary distribution be structured to handle this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/150,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U31au,pekko,1423922862,150,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-09T10:00:44Z,2023-02-09T10:00:44Z,https://incubator.apache.org/guides/releasemanagement.html only mentions source releases. We will also publish jars to Maven Central via repository.apache.org. There is no requirement to produce additional binary artifacts like the one described in the issue description.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U31au/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/151,pekko,1576430689,151,Investigate how to scan for problematic licenses,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-02-08T16:25:45Z,2023-10-22T10:29:13Z,"One place to look is Apache Daffodil which is another Scala/SBT Apache project that uses Apache Rat via sbt to check for licenses, see https://github.com/Apache/daffodil#license-check","{""url"": ""https://api.github.com/repos/apache/pekko/issues/151/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U06Hi,pekko,1423155682,151,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-08T19:48:24Z,2023-02-08T19:48:24Z,"Don't we already have sbt-header and https://github.com/apache/incubator-pekko/blob/main/project/CopyrightHeader.scala? Maybe we could fill any missing functionality?

One example is that the .md files don't have Apache licenses and apparently, sbt-header can be configured to check these files as well as the .scala files.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U06Hi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U2oEE,pekko,1423606020,151,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-09T04:16:16Z,2023-02-09T04:16:16Z,"HI,

It very likely that Incubator PMC members will use rat when voting on your releases.

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U2oEE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3nbv,pekko,1423865583,151,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-09T09:14:49Z,2023-02-09T09:14:49Z,"So I am under the impression that rat and sbt-header are solving different problems. sbt-header is just checking for license text within the project as well as updating license headers when a file is touched (typical example of this is bumping the copyright year). On the other hand Apache Rat is for checking licenses although from their website it isn't clear how this is done (I haven't actually used Apache Rat), i.e. if its actually checking for dependencies (direct and transitive).

If we are talking about checking for the licenses of dependencies (direct and transitive) there is also another option, [sbt-license-report](https://github.com/sbt/sbt-license-report). I have used this before in open source projects as well as companies and can vouch for it. Its configurable, both in how it does license detection and also what the generated report looks like. The nice thing about sbt-license-report is that since its aware of sbt which means you can also configure the scopes for what licenses to check, i.e. if you want to for some reason check all of the licenses used for the `test` scope you can do that (see https://github.com/sbt/sbt-license-report#configuration)

In any case I wouldn't throw away sbt-header, its already set up and working and most importantly we know its working because its actually found cases of incorrect headers and its also integrated into our CI to make sure that no one can commit incorrect headers. If sbt-rat (which uses Apache Rat underneath) helps us get through the Incubator PMC we can look into it but depending on how Apache Rat does ""license detection"" there may be far simpler solutions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3nbv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3qAs,pekko,1423876140,151,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-09T09:23:13Z,2023-02-09T09:23:13Z,"Hi,

Rat is just a simple tool to help, it doesn’t remove the need for manual checking.

From its help output:
Rat is really little more than a grep ATM
Rat is also rather memory hungry ATM
Rat is very basic ATM
Rat highlights possible issues
Rat reports require intepretation
Rat often requires some tuning before it runs well against a project
Rat relies on heuristics: it may miss issues

I have however used it to check more than an 1000 ASF releases and it's useful.

Kind Regards,
Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U3qAs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WOAMV,pekko,1446511381,151,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-27T15:13:06Z,2023-02-27T15:13:06Z,"There's also the built-in `dependencyLicenseInfo` (merged from my sbt-dependency-graph plugin into sbt itself), which we could adapt to whatever we'd like.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WOAMV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_STt,pekko,1509762285,151,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T12:25:40Z,2023-04-15T12:25:40Z,"So I created a PR against https://github.com/sbt/sbt-license-report/pull/55 which when merged would allow us to generate a report of all of the aggregated licenses for all of the transitive dependencies for this project which we can then inspect to make sure we don't see something weird. The plugin also lets us configure what Ivy scopes we want to generate the licenses for (see `licenseConfigurations`) so its possible to, for example, only generate licenses for the `compile` scope (if we don't care about licenses used for `test`)

Its also possible to add functionality that will ""break"" the build if it picks up a problematic license (i.e. similar to `dependencyCheckFailBuildOnCVSS` for https://github.com/albuch/sbt-dependency-check).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_STt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cpAaD,pekko,1554253443,151,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-19T08:52:42Z,2023-05-19T08:52:42Z,"Should I go ahead and close this issue since sbt-license-report has already been integrated (see https://github.com/apache/incubator-pekko/pull/319)? While it may not report if a license is problematic, it generates an entire report of all of the licenses for all of the transitive dependencies (and it does it correctly since it uses the same dependency resolution that sbt uses).

Regarding licenses within this project we have sbt-header for this, its already been configured to not accept any source headers for code that isn't explicitly required.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cpAaD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFUS,pekko,1566070034,151,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T10:21:25Z,2023-05-28T10:21:25Z,"@mdedetrich Can we remove this from the 1.0.0 milestone? It's useful but in the end, voters on the releases will have their own mechanisms to check. And having it in the milestone makes it look like a blocker.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFUS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFcT,pekko,1566070547,151,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-28T10:22:17Z,2023-05-28T10:22:17Z,"Yes, I don't have time to fully fix this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFcT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pvZCb,pekko,1774031003,151,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-22T08:28:41Z,2023-10-22T08:28:41Z,@pjfanning Shall we close this? I think that sbt-license-report should solve this well enough.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pvZCb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/151,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pvfPC,pekko,1774056386,151,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-22T10:29:13Z,2023-10-22T10:29:13Z,sure - seems to be ok to close,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pvfPC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/153,https://api.github.com/repos/apache/pekko/issues/153,pekko,1577117892,153,docs: uptake incubator-pekko-sbt-paradox,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-09T02:21:30Z,2023-02-10T08:55:36Z,"When it is ready, we need to uptake https://github.com/apache/incubator-pekko-sbt-paradox","{""url"": ""https://api.github.com/repos/apache/pekko/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/157,pekko,1578529954,157,investigate unusual header on Bench.scala,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-09T20:18:40Z,2023-02-13T09:57:07Z,"https://github.com/apache/incubator-pekko/blob/main/actor-tests/src/test/scala/org/apache/pekko/actor/Bench.scala

```
/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Julien Gaugaz
   inspired by the version contributed by Yura Taras and modified by Isaac Gouy
 */
```

Doesn't appear to assert a copyright or a license.

We can keep it but maybe don't need to.

If it is decided that this does assert a copyright and/or a license, we may need to update the LICENSE or NOTICE for this repo.

If this is not a valid copyright and/or license - then we should remove the check in project/CopyrightHeader.scala","{""url"": ""https://api.github.com/repos/apache/pekko/issues/157/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U8WbP,pekko,1425106639,157,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-10T02:57:25Z,2023-02-10T02:57:25Z,"Hi,

You do need to know how it is licensed. Looks to be this? Although the names are different.

https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame/-/blob/master/LICENSE.md <https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame/-/blob/master/LICENSE.md>

Justin

> On 10 Feb 2023, at 7:18 am, PJ Fanning ***@***.***> wrote:
> 
> 
> https://github.com/apache/incubator-pekko/blob/main/actor-tests/src/test/scala/org/apache/pekko/actor/Bench.scala <https://github.com/apache/incubator-pekko/blob/main/actor-tests/src/test/scala/org/apache/pekko/actor/Bench.scala>
> /* The Computer Language Benchmarks Game
>    http://shootout.alioth.debian.org/
>    contributed by Julien Gaugaz
>    inspired by the version contributed by Yura Taras and modified by Isaac Gouy
>  */
> Doesn't appear to assert a copyright or a license.
> 
> We can keep it but maybe don't need to.
> 
> If it is decided that this does assert a copyright and/or a license, we may need to update the LICENSE or NOTICE for this repo.
> 
> —
> Reply to this email directly, view it on GitHub <https://github.com/apache/incubator-pekko/issues/157>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AABDI6DZUPFRSXEGIFDHVHLWWVGKXANCNFSM6AAAAAAUW7XTUQ>.
> You are receiving this because you are subscribed to this thread.
> 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U8WbP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U9nO9,pekko,1425437629,157,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-10T08:53:30Z,2023-02-10T08:53:30Z,"If in doubt, it would probably also ok to just remove it, it's just benchmark code.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U9nO9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDNqT,pekko,1426905747,157,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-12T00:18:31Z,2023-02-12T00:18:31Z,"it is basically https://salsa.debian.org/benchmarksgame-team/archive-alioth-benchmarksgame/-/blob/master/contributed-source-code/shootout/chameneos/chameneos.scala-2.scala

I suspect removing this benchmark test might be the best way forward.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDNqT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDOGY,pekko,1426907544,157,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-02-12T00:27:44Z,2023-02-12T00:27:44Z,The license is compatible with the Apache license you could leave it in and add that information to LICENSE,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDOGY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDOLN,pekko,1426907853,157,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-12T00:29:37Z,2023-02-12T00:29:37Z,"I'm running a build, it so far looks like that file is not even used.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VDOLN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/157,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGC22,pekko,1427647926,157,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T09:57:06Z,2023-02-13T09:57:06Z,Fixed by removing the file in #171.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGC22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/162,pekko,1579331836,162,(Nightly) tests are failing,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,CLOSED,2023-02-10T09:27:06Z,2023-02-27T14:39:44Z,"It seems some tests have been failing for a long time as seen in https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds.yml. Not sure how that slipped but note that PR validation tries to minimize the test set to speed up PR validation. In any case, we need to keep nightlies green to make sure that all Scala/JDK variations still work and that no test failures slipped through PR validation.

```
[02-10 01:28:45.154] [error] (cluster-typed / Test / test) sbt.TestsFailedException: Tests unsuccessful
[02-10 01:28:45.154] [error] (actor-tests / Test / test) sbt.TestsFailedException: Tests unsuccessful
```

 * [x] LineNumberSpec on Scala 2.12: https://github.com/apache/incubator-pekko/issues/163
 * [x] ClusterReceptionistSpec: https://github.com/apache/incubator-pekko/issues/164","{""url"": ""https://api.github.com/repos/apache/pekko/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGMQQ,pekko,1427686416,162,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T10:21:52Z,2023-02-13T10:21:52Z,Latest run after merging fixes is running here: https://github.com/apache/incubator-pekko/actions/runs/4162081891/jobs/7200808703,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGMQQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGbpD,pekko,1427749443,162,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T11:06:21Z,2023-02-13T11:06:21Z,"Looking slightly better now, one main run succeeded others failed because of https://github.com/apache/incubator-pekko/pull/177 and probably because of a flaky test.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGbpD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGeq3,pekko,1427761847,162,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T11:14:34Z,2023-02-13T11:14:34Z,Similar problems in the Scala 3 nightly build.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGeq3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8N1,pekko,1427882869,162,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T12:46:37Z,2023-02-13T12:46:37Z,Scala 3 nightlies now green. Other nightlies now also mostly green (https://github.com/apache/incubator-pekko/actions/runs/4162910938/jobs/7202654074) apart from flaky Aeron tests (maybe we should split those off into an extra nightly task).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8N1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNxCA,pekko,1446449280,162,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-27T14:39:44Z,2023-02-27T14:39:44Z,Seems all nightlies but multi-node tests have at least one green run right now.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNxCA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/163,https://api.github.com/repos/apache/pekko/issues/163,pekko,1579351223,163,FAILED: LineNumberSpec with Scala 2.12,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,CLOSED,2023-02-10T09:38:07Z,2023-02-10T15:52:27Z,"See https://github.com/apache/incubator-pekko/actions/runs/4139596533/jobs/7157347234#step:6:1612

```
2023-02-10T00:24:00.2925264Z [02-10 00:24:00.292] [info] LineNumbers
2023-02-10T00:24:00.2925935Z [02-10 00:24:00.292] [info]   when writing Scala
2023-02-10T00:24:00.3202353Z [02-10 00:24:00.318] [info]   - must work for small functions *** FAILED *** (12 milliseconds)
2023-02-10T00:24:00.3203513Z [02-10 00:24:00.318] [info]     LineNumberSpecCodeForScala.scala:22 did not equal LineNumberSpecCodeForScala.scala:13 (LineNumberSpec.scala:28)Z [02-10 00:24:00.318] [info]     org.scalatest.exceptions.TestFailedException:
2023-02-10T00:24:00.3205590Z [02-10 00:24:00.318] [info]     at org.scalatest.matchers.MatchersHelper$.indicateFailure(MatchersHelper.scala:339)
2023-02-10T00:24:00.3206473Z [02-10 00:24:00.318] [info]     at org.scalatest.matchers.should.Matchers$AnyShouldWrapper.should(Matchers.scala:6922)23-02-10T00:24:00.3207382Z [02-10 00:24:00.318] [info]     at org.apache.pekko.util.LineNumberSpec.$anonfun$new$3(LineNumberSpec.scala:28)
2023-02-10T00:24:00.3209211Z [02-10 00:24:00.318] [info]     at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
2023-02-10T00:24:00.3209902Z [02-10 00:24:00.318] [info]     at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/163/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/164,https://api.github.com/repos/apache/pekko/issues/164,pekko,1579360028,164,FAILED: ClusterReceptionistSpec,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,CLOSED,2023-02-10T09:44:45Z,2023-02-13T09:38:45Z,"https://github.com/apache/incubator-pekko/actions/runs/4139596533/jobs/7157347234#step:6:26963

```
Uncaught error from thread [ClusterReceptionistSpec-13-pekko.actor.internal-dispatcher-10]: null, shutting down JVM since 'pekko.jvm-exit-on-fatal-error' is enabled for ActorSystem[ClusterReceptionistSpec-13]
java.lang.ExceptionInInitializerError
	at org.apache.pekko.cluster.ddata.protobuf.msg.ReplicatorMessages$OtherMessage.getDescriptor(ReplicatorMessages.java:21503)
	at org.apache.pekko.cluster.ddata.protobuf.msg.ReplicatorMessages$OtherMessage.hashCode(ReplicatorMessages.java:21658)
	at scala.runtime.Statics.anyHash(Statics.java:122)
	at scala.collection.immutable.HashMap.elemHashCode(HashMap.scala:104)
	at scala.collection.immutable.HashMap.computeHash(HashMap.scala:113)
	at scala.collection.immutable.HashMap.updated(HashMap.scala:79)
	at scala.collection.immutable.Map$Map4.updated(Map.scala:467)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.$anonfun$orsetToProtoImpl$1(ReplicatedDataSerializer.scala:488)
	at scala.collection.Iterator.foreach(Iterator.scala:943)
	at scala.collection.Iterator.foreach$(Iterator.scala:943)
	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.orsetToProtoImpl(ReplicatedDataSerializer.scala:479)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.orsetToProto(ReplicatedDataSerializer.scala:468)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.$anonfun$multimapToProto$2(ReplicatedDataSerializer.scala:954)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.$anonfun$getEntries$1(ReplicatedDataSerializer.scala:682)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.$anonfun$getEntries$1$adapted(ReplicatedDataSerializer.scala:677)
	at scala.collection.immutable.Map$Map1.foreach(Map.scala:193)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.getEntries(ReplicatedDataSerializer.scala:677)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.multimapToProto(ReplicatedDataSerializer.scala:954)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatedDataSerializer.toBinary(ReplicatedDataSerializer.scala:396)
	at org.apache.pekko.cluster.ddata.protobuf.SerializationSupport.buildOther$1(SerializationSupport.scala:156)
	at org.apache.pekko.cluster.ddata.protobuf.SerializationSupport.otherMessageToProto(SerializationSupport.scala:172)
	at org.apache.pekko.cluster.ddata.protobuf.SerializationSupport.otherMessageToProto$(SerializationSupport.scala:150)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatorMessageSerializer.otherMessageToProto(ReplicatorMessageSerializer.scala:161)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatorMessageSerializer.dataEnvelopeToProto(ReplicatorMessageSerializer.scala:512)
	at org.apache.pekko.cluster.ddata.protobuf.ReplicatorMessageSerializer.toBinary(ReplicatorMessageSerializer.scala:243)
	at org.apache.pekko.cluster.ddata.Replicator.digest(Replicator.scala:2009)
	at org.apache.pekko.cluster.ddata.Replicator.getDigest(Replicator.scala:1994)
	at org.apache.pekko.cluster.ddata.Replicator.$anonfun$gossipTo$1(Replicator.scala:2145)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:286)
	at scala.collection.immutable.Map$Map1.foreach(Map.scala:193)
	at scala.collection.TraversableLike.map(TraversableLike.scala:286)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:279)
	at scala.collection.AbstractTraversable.map(Traversable.scala:108)
	at org.apache.pekko.cluster.ddata.Replicator.gossipTo(Replicator.scala:2145)
	at org.apache.pekko.cluster.ddata.Replicator.$anonfun$receiveGossipTick$1(Replicator.scala:2137)
	at org.apache.pekko.cluster.ddata.Replicator.$anonfun$receiveGossipTick$1$adapted(Replicator.scala:2137)
	at scala.Option.foreach(Option.scala:407)
	at org.apache.pekko.cluster.ddata.Replicator.receiveGossipTick(Replicator.scala:2137)
	at org.apache.pekko.cluster.ddata.Replicator$$anonfun$4.applyOrElse(Replicator.scala:1675)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.cluster.ddata.Replicator.aroundReceive(Replicator.scala:1533)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)
Caused by: java.lang.IllegalArgumentException: Failed to parse protocol buffer descriptor for generated code.
	at org.apache.pekko.protobufv3.internal.Descriptors$FileDescriptor.internalBuildGeneratedFileFrom(Descriptors.java:412)
	at org.apache.pekko.cluster.ddata.protobuf.msg.ReplicatorMessages.<clinit>(ReplicatorMessages.java:23982)
	... 52 more
Caused by: org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException: Protocol message end-group tag did not match expected tag.
	at org.apache.pekko.protobufv3.internal.InvalidProtocolBufferException.invalidEndTag(InvalidProtocolBufferException.java:129)
	at org.apache.pekko.protobufv3.internal.CodedInputStream$ArrayDecoder.checkLastTagWas(CodedInputStream.java:636)
	at org.apache.pekko.protobufv3.internal.AbstractParser.parsePartialFrom(AbstractParser.java:160)
	at org.apache.pekko.protobufv3.internal.AbstractParser.parseFrom(AbstractParser.java:191)
	at org.apache.pekko.protobufv3.internal.AbstractParser.parseFrom(AbstractParser.java:203)
	at org.apache.pekko.protobufv3.internal.AbstractParser.parseFrom(AbstractParser.java:208)
	at org.apache.pekko.protobufv3.internal.AbstractParser.parseFrom(AbstractParser.java:48)
	at org.apache.pekko.protobufv3.internal.DescriptorProtos$FileDescriptorProto.parseFrom(DescriptorProtos.java:2297)
	at org.apache.pekko.protobufv3.internal.Descriptors$FileDescriptor.internalBuildGeneratedFileFrom(Descriptors.java:410)
	... 53 more
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/164/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/164,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U_wGV,pekko,1425998229,164,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-10T15:47:08Z,2023-02-10T15:47:08Z,"This is caused by the protobuf message classes (like `org.apache.pekko.cluster.ddata.protobuf.msg.ReplicatorMessages`) have not been regenerated after the rename of packages etc in the corresponding protobuf files. Instead, it seems in some strings in the binary data encoded as strings in those classes some oversimple replacements of akka->pekko has happened.

That does not work as those generated message files contain a binary representation of the corresponding protobuf files which is now broken. Instead those message classes need to be regenerated from the protobuf files. Hopefully, the protobuf format itself is still compatible (I think so, as plain protobuf does not carry metadata tags for data, though special wrappers like `Any` may be more problematic).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U_wGV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/164,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VAZ_U,pekko,1426169812,164,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-10T18:15:52Z,2023-02-10T18:15:52Z,"> This is caused by the protobuf message classes (like org.apache.pekko.cluster.ddata.protobuf.msg.ReplicatorMessages) have not been regenerated after the rename of packages etc in the corresponding protobuf files. Instead, it seems in some strings in the binary data encoded as strings in those classes some oversimple replacements of akka->pekko has happened.

> That does not work as those generated message files contain a binary representation of the corresponding protobuf files which is now broken. Instead those message classes need to be regenerated from the protobuf files. Hopefully, the protobuf format itself is still compatible (I think so, as plain protobuf does not carry metadata tags for data, though special wrappers like Any may be more problematic).

So I am responsible for this, when I did the package rename change in Pekko I also had to deal with the fact that classes generated from Protobuff also change (or more specifically the packages). I installed protobuff locally and regenerated  the binary data in the ``java.lang.String[] descriptorData` fields but evidently in some places it was either missed or done incorrectly.

FWIW, I couldn't actually install the ancient version of protobuff that Pekko is tied to, so I had to use the latest one, regenerated the class with the newer protobuff and then manually copy the `java.lang.String[] descriptorData` into the existing source.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VAZ_U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/164,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VAe27,pekko,1426189755,164,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-10T18:34:12Z,2023-02-10T18:34:12Z,"> FWIW, I couldn't actually install the ancient version of protobuff that Pekko is tied to,

I just copied the `protoc` executable from https://github.com/protocolbuffers/protobuf/releases/download/v3.11.4/protoc-3.11.4-linux-x86_64.zip somewhere in the filesystem and adapted the `protoc` setting in sbt to make it work.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VAe27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/164,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VCRJd,pekko,1426657885,164,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-11T08:19:30Z,2023-02-11T08:19:30Z,"> I just copied the protoc executable from https://github.com/protocolbuffers/protobuf/releases/download/v3.11.4/protoc-3.11.4-linux-x86_64.zip somewhere in the filesystem and adapted the protoc setting in sbt to make it work.

My issue is that I am on an M1 and they didn't provide binaries for ARM at that point.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VCRJd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/167,https://api.github.com/repos/apache/pekko/issues/167,pekko,1579928484,167,Fix generated protobuf message classes,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,CLOSED,2023-02-10T15:48:50Z,2023-02-13T09:38:45Z,"As observed in #164 at least some generated protobuf classes have been broken by literal search/replace of `akka` -> `pekko`. Instead, we will likely have to regenerate those message classes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/167/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/167,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U_zQR,pekko,1426011153,167,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-10T15:56:44Z,2023-02-10T15:56:44Z,This might only pop up when a protobuf message instance is hashed because the `hashCode` includes the `hashCode` of the descriptor in which case the descriptor is loaded which fails after the rename.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5U_zQR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/179,pekko,1582183228,179,change location where we store nightlies docs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-13T11:34:30Z,2023-02-27T14:40:30Z,"It might be useful to change the directory structure we store the docs in when rsync to nightlies - so that URLs more closely match those traditionally used in the docs.akka.io site.

The URL will start https://nightlies.apache.org/pekko but the rest of the path is under our control.

https://nightlies.apache.org/pekko/pekko-docs-main/docs/typed/actors.html -- could be changed to https://nightlies.apache.org/pekko/docs/pekko/current/typed/actors.html

After `docs`, the path elements are `pekko` (this is `pekko-http` for http docs, etc.) and `current` for the version.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/179/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGmg9,pekko,1427793981,179,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-13T11:35:47Z,2023-02-13T11:35:47Z,@jrudolph @mdedetrich would this change make sense? We could then redirect pekko.apache.org to the https://nightlies.apache.org/pekko site using a .htaccess file.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGmg9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGm7w,pekko,1427795696,179,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-13T11:37:25Z,2023-02-13T11:37:25Z,I am fine with this but I may be missing something.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VGm7w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG6j1,pekko,1427876085,179,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-13T12:40:32Z,2023-02-13T12:40:32Z,"First of all, let's not optimize paths on the nightly server for public consumption. If we have to serve using redirects from this domain, it's just a bandaid we should try to get rid of. In any case, we should never point any public links to it (but we might be required to use `.htaccess` to serve documentation).

That said, we should just choose a folder layout that helps organizing all the bits in the best way. I assumed we would get a top-level folder for all subprojects but I might have misunderstood that. The current layout is modeled after what flink does but they don't have many subprojects so deviating from that makes sense.

The `current` folder (or symlink) in Akka does not point to the latest snapshot but to the latest released public version, so if we are for consistency we shouldn't be using `current` for snapshots. Maybe we could organize it like this:

 * pekko/docs/pekko/snapshot-main/{docs,api,japi}: published from main branch of pekko
 * pekko/docs/pekko-http/snapshot-main/{docs,api,japi}: published from main branch of pekko-http
 * etc
 * pekko/docs/pekko/snapshot-release-1.0/{docs,api,japi}: published from release 1.0 branch of pekko
 * (if necessary) pekko/docs/pekko/1.0.0/{docs,api,japi}: released version of docs for public 1.0.0 version
 * (if necessary) pekko/docs/pekko/current/: link to the latest released version of docs

We should still strive to serve public release docs from the proper domain and it's probably totally possible to use the git based infra for that.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG6j1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG7BU,pekko,1427877972,179,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-13T12:42:17Z,2023-02-13T12:42:17Z,"We have one https://nightlies.apache.org/pekko site for our whole project. The pekko, pekko-http, etc. docs would all be uploaded there.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG7BU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8Wh,pekko,1427883425,179,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-13T12:47:10Z,2023-02-13T12:47:10Z,"I'm happy with all of @jrudolph's suggestions. pekko.apache.org could be pointed at the snapshot-main docs on nightlies site as a short term convenience. When we do a 1.0.0 release, we will probably change so that pekko.apache.org site does not use the artifacts on the nightlies site (Flink do use the nightlies site, even to serve their release docs -- but I think this is untidy - and Incubator PMC might also think is untidy if we went this route for the post-release pekko site).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8Wh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8dN,pekko,1427883853,179,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-13T12:47:31Z,2023-02-13T12:47:31Z,"> pekko/docs/pekko/snapshot-release-1.0/{docs,api,japi}: published from release 1.0 branch of pekko

Is this necessary? To me just having snapshots from `main` should be enough because I don't see how useful granular release branch snapshots docs would be to users.

> (if necessary) pekko/docs/pekko/current/: link to the latest released version of docs

I would classify this as necessary because its very useful to have a consistent reference to the latest released versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VG8dN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VNCGb,pekko,1429479835,179,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-14T10:19:49Z,2023-02-14T10:19:49Z,"> > (if necessary) pekko/docs/pekko/current/: link to the latest released version of docs
> 
> I would classify this as necessary because its very useful to have a consistent reference to the latest released versions.

Yes, sure, but not necessarily on the nightlies domain.

> > pekko/docs/pekko/snapshot-release-1.0/{docs,api,japi}: published from release 1.0 branch of pekko
> 
> Is this necessary? To me just having snapshots from `main` should be enough because I don't see how useful granular release branch snapshots docs would be to users.

True, depends a bit on how long we will be supporting release branches.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VNCGb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/179,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNxeU,pekko,1446451092,179,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-02-27T14:40:29Z,2023-02-27T14:40:29Z,AFAICS finished in #180.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNxeU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/182,https://api.github.com/repos/apache/pekko/issues/182,pekko,1584769856,182,remove `@author` from scaladoc (and javadoc),pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-14T20:18:59Z,2023-02-17T11:28:59Z,"* Worth checking with Incubator PMC if this is needed
* it is not the norm for ASF code to use author tags - the code belongs to everyone - Git has tools to allow research on authorship","{""url"": ""https://api.github.com/repos/apache/pekko/issues/182/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VgOBz,pekko,1434509427,182,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-17T11:28:58Z,2023-02-17T11:28:58Z,I think this is ok. The only source with `@author` tags appears to be code that is not of Lightbend or Apache origin (Google protobuf and MurmurHash.scala).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VgOBz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/183,https://api.github.com/repos/apache/pekko/issues/183,pekko,1584771211,183,pekko urls still have `akka://`,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-14T20:20:17Z,2023-02-22T21:30:18Z,* appearing in log messages but probably also affecting pekko-remote usage,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/183/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/183,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5V4Ufe,pekko,1440827358,183,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-22T21:30:18Z,2023-02-22T21:30:18Z,#184 is merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5V4Ufe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/185,https://api.github.com/repos/apache/pekko/issues/185,pekko,1584832375,185,remove support for Lightbend legacy SplitBrainResolverProvider,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-14T21:06:14Z,2023-02-16T10:46:52Z,"`private val LightbendSbrProviderClass = ""com.lightbend.akka.sbr.SplitBrainResolverProvider""` appears in the code and this is likely to not be compatible with Pekko","{""url"": ""https://api.github.com/repos/apache/pekko/issues/185/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/186,https://api.github.com/repos/apache/pekko/issues/186,pekko,1584967859,186,investigate pekko-osgi test artifact blueprint.xml,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-14T23:15:47Z,2023-02-16T13:36:16Z,"```
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:akka=""http://akka.io/xmlns/blueprint/v1.0.0"">

    <akka:actor-system name=""BlueprintSystem"" />

    <akka:actor-system name=""BlueprintSystemWithConfig"">
        <akka:config>
            some.config {
              key=value
            }
        </akka:config>
    </akka:actor-system>
</blueprint>
```

Can this just be modified to use `pekko` instead of `akka`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/186/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/186,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VSf5b,pekko,1430912603,186,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-02-15T08:08:15Z,2023-02-15T08:08:15Z,"Now my xml tags are a bit rusty, but if you update the URL it seems fine
https://stackoverflow.com/a/11602530/574370

Merely a means of namespacing XML tags not to collide with those of OSGi.
(matter of updating the parsing code of course)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VSf5b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/186,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VTHha,pekko,1431074906,186,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-15T10:14:56Z,2023-02-15T10:14:56Z,Sometimes the URI matters because it may relate to an XML schema - but changing the URI appears to break no tests.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VTHha/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/186,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Va1rY,pekko,1433098968,186,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-16T13:36:15Z,2023-02-16T13:36:15Z,https://github.com/apache/incubator-pekko/pull/201 was merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Va1rY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/203,https://api.github.com/repos/apache/pekko/issues/203,pekko,1589106303,203,regenerate the keystore/truststore used in `remote` tests,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-17T10:17:40Z,2023-04-28T16:44:27Z,"* Current key has Lightbend and 'akka-remote'.
* https://github.com/apache/incubator-pekko/blob/main/remote/src/test/resources/Makefile
* will affect a few tests (if we rename 'akka-remote' to 'pekko-remote', a few expected values in tests will need to change)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/203,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5avDFN,pekko,1522282829,203,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-25T19:09:33Z,2023-04-25T19:09:33Z,I will take this,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5avDFN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/207,pekko,1589383748,207,support adding custom dispatchers,pjfanning,11783444,PJ Fanning,,OPEN,2023-02-17T13:48:21Z,2023-04-21T11:46:17Z,"Akka/Pekko may already have a mechanism for adding custom dispatcher implementations. I just haven't found anything obvious.

With [Java Virtual Threads](https://blogs.oracle.com/javamagazine/post/java-loom-virtual-threads-platform-threads), it would be nice if an external party could create a custom dispatcher that uses throwaway virtual threads instead of pooling them.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/207/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vg93E,pekko,1434705348,207,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-02-17T14:12:02Z,2023-02-17T14:12:02Z,"You mean something else than?

```
  akka.actor {
    default-dispatcher = {
      type = ""....MyDispatcherConfigurator""
    }
  }
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Vg93E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhAHj,pekko,1434714595,207,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-17T14:19:31Z,2023-02-17T14:19:31Z,"something like:

```
my-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = ""com.acme.pekko.extensions.JavaVirtualThreadDispatcher""
  ..
}
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhAHj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhAqg,pekko,1434716832,207,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-02-17T14:21:21Z,2023-02-17T14:21:21Z,"But isn't point that that Configurator can produce a custom dispatcher/executor?

https://gist.github.com/yanns/f7da61c582ab1da3535d#file-gistfile1-scala-L41","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhAqg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhBUV,pekko,1434719509,207,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-17T14:23:34Z,2023-02-17T14:23:34Z,thanks - that gist looks like a good example - maybe we should include something like that in the Pekko docs,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VhBUV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ViEjG,pekko,1434994886,207,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-02-17T17:31:44Z,2023-02-17T17:31:44Z,"it's currently using the fork join pool, maybe we can change that as CE to include a WSTP。","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ViEjG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/207,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5adkm4,pekko,1517701560,207,NA,spangaer,677147,Jean-Luc Deprez,,NA,2023-04-21T11:46:17Z,2023-04-21T11:46:17Z,"The what from the what now?

Anyhow, using the fork join pool is also about the interaction with the scala.concurrent.blocking code block of course.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5adkm4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/208,https://api.github.com/repos/apache/pekko/issues/208,pekko,1590163930,208,switch port number defaults away from those used by akka,pjfanning,11783444,PJ Fanning,,CLOSED,2023-02-18T02:02:30Z,2023-03-09T11:31:28Z,"* akka remote uses 2552, by default
* akka remore reference.conf mentions an optional bind port that comments suggest using 2553 for
* artery canonical uses 25520, by default

There may be more.

Seems safer for Pekko to choose new defaults.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/208/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/208,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM6tY,pekko,1446226776,208,NA,aalleexxeeii,12149233,Alexei,,NA,2023-02-27T12:16:04Z,2023-02-27T12:16:04Z,"2552 actually comes from a phoneword AKKA. Pekko could use something like these:

- PEKK: 7355
- PEKO: 7350

None is used by any well-known service.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM6tY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/208,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XIiUE,pekko,1461855492,208,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-09T11:31:27Z,2023-03-09T11:31:27Z,I used 7355 (classic remoting) and 17355 (artery remoting) in #235 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XIiUE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/210,pekko,1592556937,210,Create sbt plugin for header check?,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-02-20T23:18:50Z,2023-03-04T12:07:12Z,"So I just realized that we probably have to abstract all of the `sbt-header-check` logic that is done for checking the Apache copyright headers into its own sbt plugin because in the current setup, while it does correctly check for the sources that are part of the main project, it doesn’t check for the sources that are extending the sbt build (i.e. `*.scala` files in `project/`).

Theoretically to solve this you would have to add do `addSbtPlugin(""de.heikoseeberger"" % ""sbt-header"" % ""5.7.0"")` in `project/project/plugins.sbt` (take note of the additional nested `project` folder) so that the plugin applies to the sbt source files however we would also have to redefine all of the logic in `CopyrightHeader.scala` (hence the need to put it into a sbt plugin).

@pjfanning What do you think?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/210/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VsS9M,pekko,1437675340,210,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-20T23:51:09Z,2023-02-20T23:51:09Z,"Possibly, a new sbt plugin might help - sbt-header works pretty well but it does seem to have its intricacies. @He-Pin created a CopyrightHeaderForBuild.scala in incubator-pekko and it seems to update some project scala files but not all. Not really sure why it seems to update some but certainly seeing many that don't get updated. In the end, we can hand modify some files if it is easier.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VsS9M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VsTfB,pekko,1437677505,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-20T23:56:44Z,2023-02-20T23:56:44Z,"So to clarify, I am not talking about re-implementing sbt-header. Rather the proposed sbt plugin that I speak of would just be an `AutoPlugin` that extends sbt-header with the logic in `CopyrightHeader`, so you can think of it more as just abstracting away our current header checking into a library.

> it seems to update some project scala files but not all. Not really sure why it seems to update some but certainly seeing many that don't get updated. In the end, we can hand modify some files if it is easier.

This is due to what I mentioned, sbt plugins/settings generally only apply to the parent project, not itself. It might be hard to conceptualize, but basically any plugins in `project` only apply to the root source, so if you want a sbt plugin to apply to the sources of an sbt project then you need to add the plugin to `project/project/plugins.sbt` (and you can do this endlessly but in our case we only need to do it once).

Even aside of this limitation, there is merit at last at some point in having this as an sbt plugin because just like the other sbt plugins we created, this is going to be common logic that will have to apply to every single Pekko project.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5VsTfB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMkKx,pekko,1446134449,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-27T11:09:13Z,2023-02-27T11:09:13Z,"@pjfanning Due to the recent work that is being done on header checks, I have thought about this again and I think the case for making a sbt plugin to specifically check for pekko headers is a good one. There is a large amount of code being duplicated and its good to have a centralized place for the header check logic so it can be audited better.

If you have no qualms would it be possible to create an `incubator-pekko-sbt-header` github repo in the apache org just like with https://github.com/apache/incubator-pekko-sbt-paradox?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMkKx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMwTE,pekko,1446184132,210,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-27T11:44:27Z,2023-02-27T11:44:27Z,I'd prefer to create sbt plugins outside of Apache. We end up with all the Apache release rules and other things like that.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMwTE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMzOG,pekko,1446196102,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-27T11:55:23Z,2023-02-27T11:55:23Z,"I was personally contemplating about whether to make an `sbt-apache-header` vs a `incubator-pekko-apache-header`. The reason why I was suggesting the latter is because we do have some bespoke pekko stuff, i.e. our own Apache License header is not the standard one e.g.

```
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, derived from Akka.
 */
```

Now this isn't the worst problem in the world, i.e. I can make this configurable via an sbt setting but it would meant that at least for the standard license header we would have to configure this in every project. 

Specifically regarding having to deal with the ceremony of dealing with ASF release, as far as I understand this is a non issue until we decide to make the first release of Pekko (i.e. we would treat it the exact same way as `incubator-pekko-apache-header` and just publish snapshots).

As a compromise and I guess a technically more well designed solution, I can create `sbt-apache-header` under my own repo, configure the apache header manually in each Pekko project and when the time is more fitting we can create a `incubator-pekko-apache-header` in the future which would just extend `sbt-apache-header` with the custom Pekko stuff. Is this preferable for you?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMzOG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMzo0,pekko,1446197812,210,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-27T11:56:52Z,2023-02-27T11:56:52Z,seems fine,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WMzo0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM0ma,pekko,1446201754,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-27T11:59:32Z,2023-02-27T11:59:32Z,"We would also have to duplicate the license check, i.e .making an sbt setting in `sbt-apache-header` for custom license checks (i.e. `additionalLicenseChecks`) where we would then add a check for the Lightbend license. The lightbend license check would have to be duplicated in every Pekko repo, as well as additional license header checks for the other cases.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM0ma/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM2Zk,pekko,1446209124,210,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-27T12:04:16Z,2023-02-27T12:04:16Z,"I'm not sure we need to check for whether the files have Lightbend headers. We should just stick our header on top anyway - regardless of whether it has a Lightbend header or not. Just to be clear, we need to keep the existing headers - all we need to do is check if the file has our header and if not then add it on top without changing any existing text.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM2Zk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM32r,pekko,1446215083,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-27T12:08:28Z,2023-02-27T12:08:28Z,"> I'm not sure we need to check for whether the files have Lightbend headers

We are currently checking for this, and iirc the way the check is codes is to make sure that someone doesn't remove an existing Lightbend header (which is possible since sbt header gives you the previous and current state).

Should confirm this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WM32r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNTaa,pekko,1446327962,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-02-27T13:29:24Z,2023-02-27T13:29:24Z,"> We are currently checking for this, and iirc the way the check is codes is to make sure that someone doesn't remove an existing Lightbend header (which is possible since sbt header gives you the previous and current state).

So I just checked pekko core and my understanding of this check was incorrect, i.e. it doesn't check if you remove a Lightbend header from an existing source file. I think this is technically possible and should be looked into, and would also be useful in `sbt-apache-header` i.e. having an `existingHeaderFileCheck` key which ensures that for existing source files a specific header isn't removed (in our case Lightbend copyright), but will not add this header to new source files.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WNTaa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WgRCX,pekko,1451298967,210,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-02T04:57:09Z,2023-03-02T04:57:09Z,"I think this should be good, and there are many common settings for pekko and satellite projects.
 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WgRCX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/210,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WtOdP,pekko,1454696271,210,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-04T10:45:18Z,2023-03-04T10:45:18Z," > As a compromise and I guess a technically more well designed solution, I can create `sbt-apache-header` under my own repo, configure the apache header manually in each Pekko project and when the time is more fitting we can create a `incubator-pekko-apache-header` in the future which would just extend `sbt-apache-header` with the custom Pekko stuff. Is this preferable for you?

So I just thought about this more comprehensively and I at least came to the conclusion that due to how bespoke the situation with headers is for Pekko (as mentioned before even our standard Apache header is unique!) this is not really worth it because you would end up spending the same amount (if not more) effort in doing all of these bespoke changes in each Pekko repo which kind of defeats the purpose.

For this reason at least in my mind we either implement an `incubator-pekko-sbt-header` (which would handle everything, i.e. our custom Apache header/Lightbend copyright etc etc) or not at all, however as @pjfanning stated when taking into account what happened historically along with possible future implications this ends up taking a lot of our bandwidth, something which is a precious resource. I could create an `incubator-pekko-sbt-header` under my own org just to bypass this but I don't know how this would fly (and whether it would create even more problems in the future once we do end up moving it to Apache Pekko project, which is where it should sit).

One counter argument I can think of is that by virtue of having everything centralized in `incubator-pekko-sbt-header` it might make the incubation process faster because its easier to audit so it could go a long way in cancelling out the expected extra process effort, but that is one big assumption.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WtOdP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/220,https://api.github.com/repos/apache/pekko/issues/220,pekko,1601325659,220,Report nightly failures on one of the mailing lists,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,OPEN,2023-02-27T14:42:41Z,2023-02-27T14:46:56Z,"Github doesn't seem to provide fine grained control over when you get notifications over regularly scheduled action runs. (You seem to get if your commit is the one that is tested but apart from that unclear for me.)

So, we should send nightly build failures to one of our mailing lists (e.g. notifications). Otherwise, we might miss when they start failing again.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/220/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/220,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WN0Zw,pekko,1446463088,220,NA,pjfanning,11783444,PJ Fanning,,NA,2023-02-27T14:46:55Z,2023-02-27T14:46:55Z,I get notified by github email - but I think that is because I created the github repos. The Github workflow scripts have commented out setup for sending emails. So dusting that off and emailing to our notifications mailing list seems like a good idea.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WN0Zw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/224,https://api.github.com/repos/apache/pekko/issues/224,pekko,1607871759,224,Remove the deprecation of Flow#recoverWith,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-03-03T03:14:29Z,2023-03-07T03:26:13Z,"This was first reported to akka at https://github.com/akka/akka/issues/31670

And I think we should remove this deprecation in the first release too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/224,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WnOEV,pekko,1453121813,224,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-03T07:57:56Z,2023-03-03T07:57:56Z,seems reasonable - would you be able to so the Pekko PR?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WnOEV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/224,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WsSK8,pekko,1454449340,224,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-04T05:09:21Z,2023-03-04T05:09:21Z,"Yes, I will work on this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WsSK8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/225,https://api.github.com/repos/apache/pekko/issues/225,pekko,1608327445,225,license: acknowledge use of scala-collection-compat inspired code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-03T10:02:45Z,2023-06-19T23:10:47Z,Search code for `Based on https://github.com/scala/scala-collection-compat/blob/master/compat`,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/225/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/225,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5W9KEZ,pekko,1458872601,225,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-07T21:04:33Z,2023-03-07T21:04:33Z,#236 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5W9KEZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/226,https://api.github.com/repos/apache/pekko/issues/226,pekko,1608333512,226,license: acknowledge licenses due to MurmurHash code in CountMinSketch.java,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-03T10:05:35Z,2023-06-19T23:10:47Z,"CountMinSketch is itself borrowed from:
https://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/stream/frequency/CountMinSketch.java

But it uses a Java port of MurmurHash:
https://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/hash/MurmurHash.java","{""url"": ""https://api.github.com/repos/apache/pekko/issues/226/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/226,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WzBet,pekko,1456215981,226,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-06T14:15:31Z,2023-03-06T14:15:31Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5WzBet/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/230,https://api.github.com/repos/apache/pekko/issues/230,pekko,1608505895,230,license: acknowledge use of Lagom code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-03T11:58:55Z,2023-06-19T23:10:48Z,"This is also Lightbend derived but it is separate to Akka.

We may or may not need to include a notice in our source LICENSE

See https://github.com/apache/incubator-pekko/blob/4a36d2600e7a5cb311418a7ef98ca7899c4a8f4d/persistence-typed/src/test/java/jdocs/org/apache/pekko/persistence/typed/auction/AuctionEntity.java#L31","{""url"": ""https://api.github.com/repos/apache/pekko/issues/230/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/230,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aH7Xq,pekko,1512027626,230,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T20:20:27Z,2023-04-17T20:20:27Z,@jrudolph @jrudolph any thoughts on this? Do you think we need to acknowledge that Pekko includes Lagom code - or should we just treat it as being from the same source as the Akka code generally?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aH7Xq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/230,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bZfGY,pekko,1533407640,230,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-03T17:10:10Z,2023-05-03T17:10:10Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bZfGY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/231,https://api.github.com/repos/apache/pekko/issues/231,pekko,1608508856,231,license: acknowledge use of netty code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-03T12:00:56Z,2023-06-19T23:10:49Z,See https://github.com/apache/incubator-pekko/blob/4a36d2600e7a5cb311418a7ef98ca7899c4a8f4d/actor/src/main/scala/org/apache/pekko/io/dns/DnsSettings.scala#L164,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/231/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/231,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XLCaD,pekko,1462511235,231,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-09T17:56:40Z,2023-03-09T17:56:40Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XLCaD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/232,pekko,1608516113,232,license: acknowledge use of codahale code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-03T12:05:48Z,2023-06-19T23:10:49Z,"See https://github.com/apache/incubator-pekko/blob/4a36d2600e7a5cb311418a7ef98ca7899c4a8f4d/cluster/src/main/scala/org/apache/pekko/cluster/VectorClock.scala#L24

This needs some research. We may need to track down original class to see VectorClock.scala is based on porting the code to Scala or if the class was written based on a high level understanding of the original code.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/232/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XMMSR,pekko,1462813841,232,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-09T21:02:10Z,2023-03-09T21:02:10Z,I checked the code and this comment have been in the code since 2012. It appears to be based on https://github.com/codahale/vlock. That code has no license or headers specified. I think we can skip making any changes in Pekko to acknowledge this better.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XMMSR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XVkwC,pekko,1465273346,232,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-03-12T18:56:06Z,2023-03-12T18:56:06Z,"HI,
> I checked the code and this comment have been in the code since 2012. It appears to be based on https://github.com/codahale/vlock <https://github.com/codahale/vlock>. That code has no license or headers specified. I think we can skip making any changes in Pekko to acknowledge this better.
> 

Which probably means we need to get permission from the author (or copyright holder) to use it.

Justin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XVkwC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XVmrv,pekko,1465281263,232,NA,codahale,207,Coda Hale,,NA,2023-03-12T19:34:50Z,2023-03-12T19:34:50Z,"You could have just mentioned me here instead of opening an issue on a random project of mine. Or, like, emailed me at the email address associated with every one of my commits on GitHub.

I hereby grant you permission to use that code under any OSS license of your choosing.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XVmrv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YbgWU,pekko,1483605396,232,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-24T23:56:19Z,2023-03-24T23:56:19Z,"> You could have just mentioned me here instead of opening an issue on a random project of mine. Or, like, emailed me at the email address associated with every one of my commits on GitHub.
> 
> I hereby grant you permission to use that code under any OSS license of your choosing.

We will use an Apache License, v2.0. Thanks @codahale ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YbgWU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/232,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YcRlN,pekko,1483807053,232,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-25T12:03:49Z,2023-03-25T12:03:49Z,#272 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YcRlN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/238,https://api.github.com/repos/apache/pekko/issues/238,pekko,1617395959,238,other source files to add licenses to,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-09T14:44:45Z,2023-07-15T14:44:07Z,"Follow up to https://github.com/apache/incubator-pekko/issues/134

* again sbt-header usage is preferred to automate header checks and creation
* #134 covers markdown files in the docs dir (used to generate the web site)
* we also have shell scripts, sbt files, github yml files - probably more types
* we may not need to put headers on absolutely everything","{""url"": ""https://api.github.com/repos/apache/pekko/issues/238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a833S,pekko,1525906898,238,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-27T15:31:10Z,2023-04-27T15:31:10Z,"So it seems that discussion in [LEGAL-634](https://issues.apache.org/jira/browse/LEGAL-634) has resulted in the following position for .md files:

> - We don't adjust the Pekko copy of the markdown files to add any Apache headers
> - The HTML pages that we deploy to the Pekko web site, will have a Lightbend copyright in the page footers or perhaps no copyright at all 

I.e. Copyrights will be whatever was there for the akka docs.

Correct?

**Next questions**: 
1. For the other files in this repo (sbt files, shell scripts, github yml, ...) does the following sound ok?

Proposal: To all of these file types, add the same header that resulted from discussions in [LEGAL-626](https://issues.apache.org/jira/browse/LEGAL-626).
If the file has already got a Lightbend header, then this will go above that. If the file has no copyright header at the moment, then this will be the first license header to be added.

```
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Pekko project, which is derived from Akka.
 */
```

If possible, do this using the `sbt-header` scala code.

2. Does this card cover updating the other pekko modules going into 1.0.0? (pekko-samples, pekko-sbt-paradox, pekko-http, pekko-platform guide)

3. The discussion in  [LEGAL-626](https://issues.apache.org/jira/browse/LEGAL-626?focusedCommentId=17648595&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17648595) resolved to use `This file is part of the Apache Pekko project, **which is** derived from Akka.` - we didn't do this - does this need a fix?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a833S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a99d3,pekko,1526191991,238,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-27T19:03:38Z,2023-04-27T19:03:38Z,"* The .md files will be left as is - no ASF licensing
* the license header text is fine - let's leave it as is
* whether to bother adding license headers to more files - maybe - I'm not too pushed - we have the main ones sorted out
* if we do proceed with more - maybe `.sbt` and `.yml`. I would prefer not to touch the shell scripts because there is a risk that they are not well tested in CI.
* other modules - some header work has been done already - I don't see anything major that needs doing - the samples are not being changed - if we do more work in this module, then we will need to replicate that in the other modules","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a99d3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB-nY,pekko,1527245272,238,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-28T09:13:43Z,2023-04-28T09:13:43Z,"Ok, I'm going to leave this for now. Sounds like they're not _must-have_ for 1.0.0 . 

If we change our mind/in future, someone can pick up .sbt (2 files), .yml (~15 files) files and other (conf?/xml?) , and do the same in the other modules.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB-nY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWGPR,pekko,1566073809,238,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T10:30:56Z,2023-05-28T10:30:56Z,"I think we can leave this for now. When we vote on the releases, one of the voters may highlight something and we can review that then.

I think anything that does not have an Apache header now falls in 2 categories:
* was written in Akka days and has not been significantly changed by us
* the file is not an important file - it may or may not be nice to have a header, but it is not required to have a header","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWGPR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/239,https://api.github.com/repos/apache/pekko/issues/239,pekko,1617647285,239,Drop the shaded protobuf?,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-03-09T17:07:13Z,2024-08-14T18:02:28Z,"[protobuf](https://github.com/apache/incubator-pekko/tree/main/protobuf/src/main/java/org/apache/pekko/protobuf
)

Maybe we can dropped it in next major version?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/239/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/239,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XK8E2,pekko,1462485302,239,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-09T17:41:32Z,2023-03-09T17:41:32Z,I think it's safe to remove this in v1.1,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XK8E2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/239,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i8j3V,pekko,1660042709,239,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-01T10:36:30Z,2023-08-01T10:36:30Z,#489 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5i8j3V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/241,https://api.github.com/repos/apache/pekko/issues/241,pekko,1619767027,241,use standard pekko notice in jars (except when additions needed),pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-10T23:49:09Z,2023-03-15T14:18:07Z,"* already using standard Apache license in most jars
* should also use standard Pekko notice in most jars
* see https://github.com/apache/incubator-pekko-http/pull/119
* currently, we default to use the source repo NOTICE and this has a lot of additions and they only affect some jars","{""url"": ""https://api.github.com/repos/apache/pekko/issues/241/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/241,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xn9SE,pekko,1470092420,241,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-15T14:18:06Z,2023-03-15T14:18:06Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xn9SE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/243,pekko,1620145913,243,migrate incubator-pekko-samples to use pekko snapshots,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-11T21:06:51Z,2023-04-13T10:17:32Z,"Most samples in https://github.com/apache/incubator-pekko-samples should be already in a position to uptake pekko snapshot libs instead of akka ones.

There might be a few samples that need to wait for one or more pekko libs.

This is no reason not to start.

It would be very useful if at least some samples were migrates before the release of the main Pekko libs.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XaodO,pekko,1466599246,243,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-13T17:34:20Z,2023-03-13T17:34:20Z,The core Pekko docs reference these samples. Thus the importance of making progress. It would be great if PRs take on 1 or a small number of samples at a time. This would facilitate having multiple contributors.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XaodO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xf7o1,pekko,1467988533,243,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-14T12:11:31Z,2023-03-14T12:11:31Z,"I'll look at directories starting akka-samples-cluster and akka-samples-cqrs today.

Note there are still locations in incubator pekko referencing akka-samples, presume these will need update following this work.
- https://github.com/apache/incubator-pekko/blob/main/scripts/publish_samples.sh#L87 -- probably most important, the publish samples script
- DOC: https://github.com/apache/incubator-pekko/blob/main/docs/src/main/paradox/additional/rolling-updates.md?plain=1#L148
- URL in a comment: https://github.com/apache/incubator-pekko/blob/main/project/Dependencies.scala#L108 ( URL is now NotFound)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xf7o1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xh-vJ,pekko,1468525513,243,NA,sam-byng,43856946,Sam Byng,,NA,2023-03-14T17:27:32Z,2023-03-14T17:27:32Z,I've also made minor update to migration docs in line with my experience. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Xh-vJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XiFlZ,pekko,1468553561,243,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-14T17:45:20Z,2023-03-14T17:45:20Z,-1 to any docs about specific build tools. Existing docs draw a nice line in avoiding excessive tangential build tool doc. The build tools themselves have lots of doc and training resources ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5XiFlZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZE_1u,pekko,1494482286,243,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-03T14:57:10Z,2023-04-03T14:57:10Z,"Closing since according to @sam-byng this should be done, if not we can just re-open","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZE_1u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/243,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzqM6,pekko,1506714426,243,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T10:17:32Z,2023-04-13T10:17:32Z,I created #284 for the next steps,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ZzqM6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/244,pekko,1621441030,244,rewrite pekko-platform-guide to use pekko artifacts and to remove Akka refs,pjfanning,11783444,PJ Fanning,,OPEN,2023-03-13T12:59:56Z,2023-05-24T14:16:58Z,"https://github.com/apache/incubator-pekko-platform-guide

This guide is referenced quite a bit from the main docs associated with this repo.

Edit: the doc refs from this repo have been temporarily removed which means that updating the pekko-platform-guide is not as urgent. See https://github.com/apache/incubator-pekko/commit/658e4bc4b0b9fd0305f435ab02c445a5344783aa

If and when the pekko-platform-guide is updated and published, we could revert that commit and tidy up the links to ensue they point to the right place (where the new pekko-platform-guide docs are published).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/244/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z0BAJ,pekko,1506807817,244,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T11:34:59Z,2023-04-13T11:34:59Z,I will take this. @pjfanning  could you assign the card to me?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z0BAJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1XKx,pekko,1507160753,244,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-13T15:20:19Z,2023-04-13T15:20:19Z,"I think there's ~ 2d work here.

Key steps:
	1. Investigate: Doc building + publishing process: What is the current process + Do we need to change anything here?
	2. Investigate: Doc hosting platform: How will we host the website? Should we do anything to use the same platform as the other apache-pekko docs? 

(i.e. put these docs onto https://pekko.apache.org/ / add these docs into [apache/incubator-pekko-site: Apache pekko (github.com)](https://github.com/apache/incubator-pekko-site) ) 

3. Converting the docs themselves to reference pekko and not akka. 

1 and 2 require more investigation and discussion.
3 is pretty straight forward text changes and URL changes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z1XKx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z9NqX,pekko,1509218967,244,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-14T20:30:40Z,2023-04-14T20:30:40Z,"@sam-byng I've already removed the pekko doc links to the platform guide docs. See https://github.com/apache/incubator-pekko/commit/658e4bc4b0b9fd0305f435ab02c445a5344783aa 

This makes this a nice-to-have as opposed to something that blocks a v1.0.0 release. If we do get the pekko-platform-guide fixed up though, we can easily add back the links.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z9NqX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a9b6j,pekko,1526054563,244,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-27T17:14:02Z,2023-04-27T17:14:02Z,"## On doc builds/tests
The current solution seems relatively straight forward:

locally: 
make html-author-mode
start target/index.html

In github pipelines: current solution looks fine
https://github.com/apache/incubator-pekko-platform-guide/blob/main/.github/workflows/build-and-test.yml

**TODO** So next steps here are to do the grunt work of converting the docs themselves. <- @sam-byng to take

It looks like test main branch builds were then deployed onto a test VM @[ akkarepo@gustav.akka.io ](https://github.com/apache/incubator-pekko-platform-guide/blob/main/scripts/deploy-site.sh)

**TODO:** If we still use this workflow, this may need update to a pekko hosted VM. The exact owner of this etc needs discuss.

## On publishing releases:
On akka, the [The guide is published via tech hub via a webhook.
](https://github.com/apache/incubator-pekko-platform-guide/blob/main/RELEASING.md) 

**TODO**: I don't have experience in this so I don't know what the correct process should be here. Possibly some crossover with 
https://github.com/apache/incubator-pekko-site

## On hosting:
See point 2 above. If we decide to host @ pekko.apache.org/ then the discussions on mailing list of [DISCUSS] using a VM to serve the pekko.apache.org web site will be pertinent

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a9b6j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a935v,pekko,1526169199,244,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-27T18:53:06Z,2023-04-27T18:53:06Z,"Let's not assume that ASF will be able to host a VM. We might be able to but it may not be worth the cost for a non-profit org. If the gustav VM (or possible ASF equivalent) is an important part of someone being able to follow the instructions and run the samples, then we might need to consider whether this guide is a good thing for us.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a935v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a94T4,pekko,1526170872,244,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-27T18:54:12Z,2023-04-27T18:54:12Z,doc pages can be hosted at https://pekko.apache.org/docs/platform-guide/current - or something similar.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a94T4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB4i0,pekko,1527220404,244,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-28T08:57:59Z,2023-04-28T08:57:59Z,"> If the gustav VM (or possible ASF equivalent) is an important part of someone being able to follow the instructions and run the samples, then we might need to consider whether this guide is a good thing for us.

AFIACT The use of the Gustav VM in this case is for test purposes. It looks like there's a long-lifetime akka.io website that is kept live and redeployed with the latest `main` w[henever any main pipeline runs](https://github.com/apache/incubator-pekko-platform-guide/blob/main/.github/workflows/deploy-wip.yml#L18). This seems like a non-essential add-on that just lets devs easily view the current state of the docs on a server instead of needing to build locally. 

So I propose just remove this since it looks like we won't want to use it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB4i0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB541,pekko,1527225909,244,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-28T09:01:38Z,2023-04-28T09:01:38Z,"I'd vote https://pekko.apache.org/docs/pekko-platform-guide/current , since the other modules are prefixed with `pekko` in https://pekko.apache.org/docs/ and the previous URL was @ `akka-platform-guide`



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bB541/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/244,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDr7v,pekko,1561247471,244,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T14:16:58Z,2023-05-24T14:16:58Z,This has been de-prioritised to speed up the '1.0.0' release but it would still be great if someone could take it on.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dDr7v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/245,https://api.github.com/repos/apache/pekko/issues/245,pekko,1621501256,245,remove or replace algolia and google analytics properties,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-13T13:33:47Z,2023-04-19T20:35:38Z,The values in project/Paradox.scala are Akka specific. We may not need the values at all. We might need developers with Lightbend background to review if they can be simply removed - or if we need to replace them with new Pekko values.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/245,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUlcB,pekko,1515345665,245,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-19T20:35:38Z,2023-04-19T20:35:38Z,removed in #295,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUlcB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/246,https://api.github.com/repos/apache/pekko/issues/246,pekko,1621523753,246,update signature and fiddle properties in project/Paradox.scala,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-13T13:46:53Z,2023-05-03T17:12:29Z,"These props are used in the Paradox doc generation.

```
      ""signature.akka.base_dir"" -> (ThisBuild / baseDirectory).value.getAbsolutePath,
      ""fiddle.akka.base_dir"" -> (ThisBuild / baseDirectory).value.getAbsolutePath,
```

They should (probably) be updated to replace 'akka' with 'pekko'.

They relate to `@@signature` and `@@fiddle` annotations in the doc markdown files.

We also have `scalafiddle.js`. It has:
```
window.scalaFiddleTemplates = {
  ""Pekko"": {
    pre: ""// $FiddleDependency org.pekko-js %%% pekkojsactor % 2.2.6.1 \n"" +
    ""// $FiddleDependency org.pekko-js %%% pekkojsactorstream % 2.2.6.1 \n"" +
    ""// $FiddleDependency org.pekko-js %%% pekkojsactortyped % 2.2.6.1 \n"",
    post: """"
  }
}
```
These values look wrong.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/246/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/246,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bZgo5,pekko,1533413945,246,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-03T17:12:29Z,2023-05-03T17:12:29Z,done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bZgo5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/247,https://api.github.com/repos/apache/pekko/issues/247,pekko,1623106327,247,correct values for project-info.conf jdk-versions,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-14T09:48:38Z,2023-04-19T20:36:07Z,"currently have:
```
  shared-info {
    jdk-versions: [""Adopt OpenJDK 8"", ""Adopt OpenJDK 11""]
```

Adopt JDK is no longer supported. Maybe Temurin or Adoptium.

Generally need to work out what we want to appear in the docs.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/247/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/247,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUlkA,pekko,1515346176,247,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-19T20:36:07Z,2023-04-19T20:36:07Z,#293 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUlkA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/248,https://api.github.com/repos/apache/pekko/issues/248,pekko,1623108104,248,current value for project-info.conf release notes link,pjfanning,11783444,PJ Fanning,,CLOSED,2023-03-14T09:49:46Z,2023-04-27T10:55:52Z,Affects our docs. Currently set to an akka.io value.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/248/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/248,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a7ISE,pekko,1525449860,248,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-27T10:45:04Z,2023-04-27T10:45:04Z,"Looks like this can be closed now since release notes link was updated to ""https://github.com/apache/incubator-pekko/releases""","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5a7ISE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/253,pekko,1630291749,253,Introduce a timer source api?,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-03-18T11:52:25Z,2023-03-20T04:09:33Z,"I was wanted this once https://github.com/akka/akka/issues/31705, and today after read this:

https://github.com/netty/netty/pull/13169

So I open this issue here too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/253/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X72FO,pekko,1475305806,253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-19T16:07:45Z,2023-03-19T16:07:45Z,"I think this would be a candidate for a PIP (Pekko Improvement Proposal) which would be created at the cwiki here (see https://cwiki.apache.org/confluence/display/PEKKO/Processes, as far as I understand at least for Pekko Improvement Proposal you need to use cwiki, if not I have a personal preference for github).

The idea behind a PIP is for you to state motivations, claim, design considerations(i.e. specifically in this case do we want to add a dependency or directly implement a correct timer etc etc). Once a proposal is made then you can create a `[DISCUSS]` thread on the mailing list where people can talk about it, and afterwards if there are not strong objections in `[DISCUSS]` you can then initiate a vote which if accepted with a lazy 3 majority then you are free to implement it.

As an inspiration to PIP's, you can look at Kafka's KIP's to see the format https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Improvement+Proposals. I noticed that on our cwiki page we don't even have a section for PIP's, @pjfanning shall we get the process started/solidified?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X72FO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Afh,pekko,1475348449,253,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-19T18:02:52Z,2023-03-19T18:02:52Z,"I'm not sure. Until we start doing releases, it's hard to consider anything that we don't intend for the initial release. It's useful to log the requirement but I don't see much point expending a lot of discussion time about them.

Is there a resaon why this timer feature could not be a separate project that uses Pekko APIs but that exists as its own non-ASF jar? I would prefer if Pekko was extensible instead of every feature having to become part of Pekko itself.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Afh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Aoa,pekko,1475349018,253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-19T18:04:48Z,2023-03-19T18:04:48Z,"I was under the presumption that a PIP process is part and parcel of incubation process and that releases don't really play into it?

> Is there a resaon why this timer feature could not be a separate project that uses Pekko APIs but that exists as its own non-ASF jar? I would prefer if Pekko was extensible instead of every feature having to become part of Pekko itself.

The intention of a PIP is to force the person to think about these considerations and come up with a proposal so that it can be discussed, no?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Aoa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Cd4,pekko,1475356536,253,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-19T18:37:42Z,2023-03-19T18:37:42Z,"We can choose to have a PIP process but there is no requirement for an ASF project to have one.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Cd4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Om2,pekko,1475406262,253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-19T21:36:50Z,2023-03-19T21:36:50Z,"Oh I had no idea

@He-Pin In that case I would recommend making a discuss thread so we can talk about it, I think the biggest issue might be adding a dependency","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X8Om2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X888w,pekko,1475596080,253,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-20T04:09:33Z,2023-03-20T04:09:33Z,"Ok, thanks. I will open up one there.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5X888w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/259,https://api.github.com/repos/apache/pekko/issues/259,pekko,1634060445,259,Remove explicit handling of `java8Home` entirely in Pekko sbt build,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-03-21T14:32:51Z,2023-03-21T18:51:20Z,With a result of the changes in https://github.com/apache/incubator-pekko/pull/258 that removes the `-release`/`-target` workaround it appears that all of this special case handling for JDK 1.8 in Pekko (i.e. https://github.com/apache/incubator-pekko/blob/main/project/JdkOptions.scala#L26 and all of the relevant places where its referenced) is no longer necessary.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/259/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/259,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YGiDn,pekko,1478107367,259,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-21T16:00:45Z,2023-03-21T16:00:45Z,"Closing this for now because its still needed, see https://github.com/apache/incubator-pekko/pull/258#discussion_r1143532066","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YGiDn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/259,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YHt5m,pekko,1478418022,259,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-21T18:47:31Z,2023-03-21T18:47:31Z,Re-opening this,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YHt5m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/259,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YHu9r,pekko,1478422379,259,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-21T18:51:12Z,2023-03-21T18:51:12Z,Blocked by https://github.com/apache/incubator-pekko/issues/262,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YHu9r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/260,https://api.github.com/repos/apache/pekko/issues/260,pekko,1634228722,260,See if `scripts/link-validator.conf` can accept wildcards to remove needing to specify Scala minor versions,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-03-21T16:00:13Z,2023-03-21T16:00:13Z,See https://github.com/apache/incubator-pekko/pull/258#discussion_r1143613192,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/261,https://api.github.com/repos/apache/pekko/issues/261,pekko,1634277829,261,Make BroadcastHub only start pulling after atleast one Consumer attached to it?,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-03-21T16:20:18Z,2023-03-23T16:23:34Z,"### Discussed in https://github.com/apache/incubator-pekko/discussions/255

<div type='discussions-op-text'>

<sup>Originally posted by **He-Pin** March 20, 2023</sup>
Refs: https://github.com/akka/akka/issues/28327

I just made a PR in akka/akka, which added a `startAfterNrOfConsumers` to `BroadcastHub`. And surely I will send the PR to pekko too.

I think we should make the current `BroadcastHub.sink[T]` with `BroadcastHub.sink[T] = BroadcastHub.sink(startAfterNrOfConsumers = 1, defaultBufferSize)` in pekko by default, which is `0` now.</div>

https://stackoverflow.com/questions/58974630/broadcasthub-doesnt-wait-for-first-materialization-of-source

And when I try to reimplement the current `Sink.fromPublisher` with `BroadcastHub`, I found some other behavior need to address to unlock it.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/261/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/262,https://api.github.com/repos/apache/pekko/issues/262,pekko,1634520541,262,Investigate removal of bespoke JDK 1.8 `rt.jar` handling,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-03-21T18:48:52Z,2023-10-21T11:45:59Z,See merged scalac PR at https://github.com/scala/scala/pull/10336 and discussion at https://github.com/apache/incubator-pekko/pull/258#discussion_r1143532066 for context.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/262,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYdk,pekko,1773766500,262,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:45:58Z,2023-10-21T11:45:58Z,"Closing this for now since its actually needed, the proper way to solve this issue is to use mult-release jar and/or drop JDK 8","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYdk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/265,pekko,1635451241,265,Investigate fixing exhaustive match issues in Pekko codebase,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-03-22T10:09:18Z,2023-04-15T10:29:23Z,"In https://github.com/apache/incubator-pekko/pull/264/files#diff-676691b2e85cad6026adb107942b7c9325394e20e015b131fdcebd3b2b7794b0R132-R133 we had to silence pattern match exhaustiveness warnings because the `strict-unsealed-patmat` lint option was exposing cases such as this

```
[error] /Users/mdedetrich/github/incubator-pekko/docs/src/test/scala/typed/tutorial_4/DeviceGroup.scala:51:5: match may not be exhaustive.
[error] It would fail on the following input: (x: typed.tutorial_4.DeviceGroup.Command forSome x not in (typed.tutorial_4.DeviceGroup.DeviceTerminated, typed.tutorial_4.DeviceManager.RequestDeviceList, typed.tutorial_4.DeviceManager.RequestTrackDevice))
[error]     msg match {
```

We should investigate if we can just simply fix these exhaustiveness issues without creating any regressions, and if so then remove the silencing of this lint option.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YLgoy,pekko,1479412274,265,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-22T11:47:18Z,2023-03-22T11:47:18Z,"how about add a 
```scala
case _ => throw new IllegalStateException() // won't happen, compiler exhaustiveness check pleaser
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YLgoy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMFjg,pekko,1479563488,265,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-22T13:24:41Z,2023-03-22T13:24:41Z,"Sure we can do this, the point of making the issue is looking at it in more detail because there may be some legitimate situations where we should add the extra case and handle it rather than just doing `case _ => throw ...`).

I would also argue that if we are just going to add `case _ => throw new IllegalStateException()` in every single case (of which there are many, its not just one or two) its then just better leave the silencing of `strict-unsealed-patmat` just like what was done with  `infer-any`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMFjg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMaRX,pekko,1479648343,265,NA,JD557,1187242,João Costa,jdpc557@gmail.com,NA,2023-03-22T14:18:18Z,2023-03-22T14:18:18Z,"Just to add my 2 cents regarding the `case _ => throw new IllegalStateException()` (especially the `// won't happen, compiler exhaustiveness check pleaser`):

The example linked was from a tutorial, so I think it would probably be better to have a ""good example"" there. That comment might make an user think ""oh, it's OK to just ignore the compiler warnings"".
At least make it a `case unknown => throw new IllegalStateException(s""Received unexpected message: $unknown"")`.

Although personally I would prefer if the examples actually incentivized users to use `sealed trait` everywhere, I can see why that's not the case in tutorial 4 (if only union types were available... 😢 ).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMaRX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMbjh,pekko,1479653601,265,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-03-22T14:21:28Z,2023-03-22T14:21:28Z,"Indeed, this is one of the main reasons why I want to look at the cases specifically. As you rightly pointed out, this is from a tutorial and we shouldn't be encouraging people to throw exceptions like this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YMbjh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/265,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_D_t,pekko,1509703661,265,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-04-15T09:36:53Z,2023-04-15T09:36:53Z,@pjfanning Can we remove this from the 1.0.0 project release? Its a nice to have but its not strictly blocking anything,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z_D_t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/267,https://api.github.com/repos/apache/pekko/issues/267,pekko,1636767308,267,Move akka.japi. to java.util.function.,He-Pin,501740,He-Pin(kerr),,OPEN,2023-03-23T02:54:15Z,2023-03-23T14:03:42Z,"There are:
`akka.japi.*`

and 

`akka.japi.pf.*` `akka.stream.javadsl.japi.` and etcs . how about we switch some of them to `java.util.function.*` in `1.0.0` or `1.1.0`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/267/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/267,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YRN1b,pekko,1480908123,267,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-03-23T10:02:55Z,2023-03-23T10:02:55Z,(see also some discussion around this at https://lists.apache.org/thread/rttvbmvjxw76cr6v34tg0o00soycfm8q),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YRN1b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/267,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YSi6J,pekko,1481256585,267,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-23T14:03:41Z,2023-03-23T14:03:41Z,"The general consensus is to maintain as much compatibility with Akka 2.6 API norms as possible so Pekko v1.0.0 - so this change will not happen in v1.0.0 without getting the Pekko PMC to agree to it.

One thing that is more likely to be agreed to is to add extra APIs that directly support java.util.function - and to possibly deprecate the ones that use the Pekko Java Function classes (and APIs that use them).

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YSi6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/276,https://api.github.com/repos/apache/pekko/issues/276,pekko,1642261339,276,FAILED: HandshakeRetrySpec,He-Pin,501740,He-Pin(kerr),,OPEN,2023-03-27T14:55:14Z,2023-03-28T04:07:24Z,"https://github.com/apache/incubator-pekko/actions/runs/4532716547/jobs/7984495441?pr=275#step:6:3640
```
[03-27 14:07:18.972] [info] - must be retried during handshake-timeout (no message loss) *** FAILED *** (7 seconds, 90 milliseconds)
[03-27 14:07:18.973] [info]   java.lang.AssertionError: assertion failed: timeout (6 seconds) during expectMsg while waiting for hello
[03-27 14:07:18.973] [info]   at scala.Predef$.assert(Predef.scala:279)
[03-27 14:07:18.974] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[03-27 14:07:18.974] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[03-27 14:07:18.975] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[03-27 14:07:18.975] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:984)
[03-27 14:07:18.976] [info]   at org.apache.pekko.remote.artery.HandshakeRetrySpec.$anonfun$new$2(HandshakeRetrySpec.scala:48)
[03-27 14:07:18.976] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[03-27 14:07:18.977] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[03-27 14:07:18.977] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[03-27 14:07:18.978] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[03-27 14:07:18.979] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[03-27 14:07:18.979] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1076)
[03-27 14:07:18.980] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[03-27 14:07:18.981] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[03-27 14:07:18.981] [info]   at org.apache.pekko.remote.artery.ArteryMultiNodeSpec.withFixture(ArteryMultiNodeSpec.scala:58)
[03-27 14:07:18.982] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1074)
[03-27 14:07:18.982] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1086)
[03-27 14:07:18.983] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[03-27 14:07:18.983] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1086)
[03-27 14:07:18.985] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1068)
[03-27 14:07:18.985] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
[03-27 14:07:18.986] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1145)
[03-27 14:07:18.986] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[03-27 14:07:18.987] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[03-27 14:07:18.987] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[03-27 14:07:18.988] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[03-27 14:07:18.988] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[03-27 14:07:18.989] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[03-27 14:07:18.989] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[03-27 14:07:18.990] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[03-27 14:07:18.990] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[03-27 14:07:18.991] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1145)
[03-27 14:07:18.991] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1144)
[03-27 14:07:18.992] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
[03-27 14:07:18.992] [info]   at org.scalatest.Suite.run(Suite.scala:1112)
[03-27 14:07:18.992] [info]   at org.scalatest.Suite.run$(Suite.scala:1094)
[03-27 14:07:18.993] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
[03-27 14:07:18.993] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1190)
[03-27 14:07:18.994] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[03-27 14:07:18.994] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1190)
[03-27 14:07:18.995] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1188)
[03-27 14:07:18.995] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
[03-27 14:07:18.996] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[03-27 14:07:18.996] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[03-27 14:07:18.997] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[03-27 14:07:18.997] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
[03-27 14:07:18.998] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:318)
[03-27 14:07:18.998] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:513)
[03-27 14:07:18.999] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:413)
[03-27 14:07:18.999] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[03-27 14:07:19.000] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[03-27 14:07:19.000] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[03-27 14:07:19.000] [info]   at java.lang.Thread.run(Thread.java:750)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/276/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/276,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YlV7p,pekko,1486184169,276,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-28T04:07:24Z,2023-03-28T04:07:24Z,https://github.com/apache/incubator-pekko/actions/runs/4538776467/jobs/7998007869#step:6:3552,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YlV7p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/277,https://api.github.com/repos/apache/pekko/issues/277,pekko,1646187361,277,Update the deprecate messages,He-Pin,501740,He-Pin(kerr),,OPEN,2023-03-29T16:58:09Z,2023-04-01T09:21:37Z,"![image](https://user-images.githubusercontent.com/501740/228612666-8c54ba22-3661-4174-9a47-e264c3dcab42.png)

1. First we need to deal with the version
2. We need to rename the Akka to Pekko I think.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/277/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/277,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Yv9jO,pekko,1488967886,277,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-03-29T16:58:51Z,2023-03-29T16:58:51Z,"And for this prestart method is not that easy to mark this method final, you can try.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Yv9jO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/277,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YwqLx,pekko,1489150705,277,NA,pjfanning,11783444,PJ Fanning,,NA,2023-03-29T19:05:32Z,2023-03-29T19:05:32Z,Akka 2.5.0 is correct. There are no Pekko releases. But we don't to confuse people by having a version number without highlighting that the version relates to a previous Akka release.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5YwqLx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/277,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Y-7MY,pekko,1492890392,277,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-04-01T09:21:37Z,2023-04-01T09:21:37Z,So this will be updated to Pekko once Pekko is released?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Y-7MY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/279,https://api.github.com/repos/apache/pekko/issues/279,pekko,1656068160,279,[Feature request] Test on Arm box,He-Pin,501740,He-Pin(kerr),,OPEN,2023-04-05T18:05:37Z,2023-04-15T09:14:33Z,"There are cases where CAS code will not work as expected on ARM box, and cat-effects is currently running CI with ARM box, so maybe pekko should do this too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/284,https://api.github.com/repos/apache/pekko/issues/284,pekko,1665319905,284,plan where to publish the pekko-samples docs and then how to link to them via the pekko docs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-04-12T21:59:09Z,2023-04-19T20:32:52Z,"* Pekko docs still link the 'pekko-samples' to developer.lightbend.com URLs.
* https://github.com/apache/incubator-pekko-samples has been updated but when you enter the 'docs-gen' dir and run `sbt paradox`, we generate HTML but we need to publish it
* when we publish it, we need to fix the links in this repos docs to point at published incubator-pekko-samples docs
* some README.md files in individual samples in incubator-pekko-samples still refer to Akka samples docs (on Lightbend site) - we should change those links to refer to these pekko-samples docs when we wget them published
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/284/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/284,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z2i87,pekko,1507471163,284,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-13T18:59:12Z,2023-04-13T18:59:12Z,I've started publishing samples at URLs like https://pekko.apache.org/docs/pekko-samples/current/pekko-sample-persistence-scala/ (replace the name of the sample as the last part of the path),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5Z2i87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/284,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUkrG,pekko,1515342534,284,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-19T20:32:51Z,2023-04-19T20:32:51Z,have a solution that works for now,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aUkrG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/286,pekko,1667985398,286,Migrate akka k8s samples to pekko,pjfanning,11783444,PJ Fanning,,CLOSED,2023-04-14T10:26:20Z,2023-04-26T13:00:22Z,"Migrate akka k8s samples to pekko

* https://github.com/akka/akka-sample-cluster-kubernetes-scala
* https://github.com/akka/akka-sample-cluster-kubernetes-java

these 2 samples are linked to from the Pekko docs and it would be good to link to Pekko versions instead of Akka versions","{""url"": ""https://api.github.com/repos/apache/pekko/issues/286/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aD87V,pekko,1510985429,286,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-17T09:12:47Z,2023-04-17T09:12:47Z,"Proposal: Could these be added as directories in https://github.com/apache/incubator-pekko-samples , to avoid creating new git repositories?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aD87V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEAyX,pekko,1511001239,286,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T09:23:55Z,2023-04-17T09:23:55Z,sure - these can be added to incubator-pekko-samples,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEAyX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aR3yb,pekko,1514634395,286,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-19T12:18:08Z,2023-04-19T12:18:08Z,i'll do this today,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aR3yb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azG66,pekko,1523347130,286,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-26T12:36:01Z,2023-04-26T12:36:01Z,this is done (I think),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azG66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/286,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azPUE,pekko,1523381508,286,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-26T13:00:21Z,2023-04-26T13:00:21Z,"Correct, thanks","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azPUE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/287,pekko,1667991378,287,migrate akka docker compose samples to pekko,pjfanning,11783444,PJ Fanning,,CLOSED,2023-04-14T10:30:20Z,2023-04-26T12:35:22Z,"* https://github.com/akka/akka-sample-cluster-docker-compose-java
* https://github.com/akka/akka-sample-cluster-docker-compose-scala

These are linked to from the Pekko docs and it would be good to have Pekko versions instead","{""url"": ""https://api.github.com/repos/apache/pekko/issues/287/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aD8zb,pekko,1510984923,287,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-17T09:12:28Z,2023-04-17T09:12:28Z,"Could these be added as directories in https://github.com/apache/incubator-pekko-samples , to avoid creating new git repositories?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aD8zb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEAj5,pekko,1511000313,287,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-17T09:23:08Z,2023-04-17T09:23:08Z,I like the idea of copying the samples to the incubator-pekko-samples repo.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aEAj5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aR3wZ,pekko,1514634265,287,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-19T12:18:02Z,2023-04-19T12:18:02Z,I'll do this today,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5aR3wZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ayh-0,pekko,1523195828,287,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-26T10:34:32Z,2023-04-26T10:34:32Z,Additions have been merged. This card can be closed.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ayh-0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/287,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azGcw,pekko,1523345200,287,NA,pjfanning,11783444,PJ Fanning,,NA,2023-04-26T12:35:13Z,2023-04-26T12:35:13Z,thanks - closing,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5azGcw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/304,https://api.github.com/repos/apache/pekko/issues/304,pekko,1688946087,304,Simplify the logging in pekko CI tests,sam-byng,43856946,Sam Byng,,OPEN,2023-04-28T18:04:08Z,2023-04-28T18:05:35Z,"The pullRequest CI workflows `sbt validatePullRequest` step logs a large amount of information to stdout (over 15k) lines such that it is very difficult to identify where the source of a failure is.

For example:

https://github.com/apache/incubator-pekko/actions/runs/4818338277

There are multiple `Error` messages, though some of these are for tests that want to generate errors. 

The actual error is found by searching the logs for `** FAIL`.

Can we improve observability here by reducing the amount of solution logs that are output to CI terminal? We could extract full logs to a cache file. When a failure is encountered for a specific test, the log output should show <test name> : <Failure message> , see logs in <logfile>.txt for more information.

Obviously we want to take care not to affect solution logging here.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/304/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/304,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bEhhk,pekko,1527912548,304,NA,sam-byng,43856946,Sam Byng,,NA,2023-04-28T18:04:40Z,2023-04-28T18:04:40Z,(( related PR: separate compile and 'test' steps in the PullRequest workflow: https://github.com/apache/incubator-pekko/pull/300 )),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5bEhhk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/318,pekko,1706398242,318,Error materializing flow,samirbajaj,37282578,Samir Bajaj,,CLOSED,2023-05-11T19:12:24Z,2023-05-26T14:01:37Z,"I ported my app from Akka 2.6 to pekko (see below for snapshot versions), and although I am able to build it successfully, I am seeing this runtime error -- strangely enough a `ClassCastException` between pekko and akka:

```
[ERROR] [05/11/2023 11:19:38.017] [some-actor-system-pekko.actor.default-dispatcher-11] [org.apache.pekko.actor.ActorSystemImpl(tungsten-actor-system)] Could not materialize handling flow for IncomingConnection(/127.0.0.1:19000,/127.0.0.1:52055,Flow(FlowShape(IncomingTCP.in(1076416245),GraphStages$Detacher$.out(250680658))))
java.lang.ClassCastException: class org.apache.pekko.http.ParsingErrorHandler is not assignable from class akka.http.DefaultParsingErrorHandler$
	at org.apache.pekko.actor.ReflectiveDynamicAccess.$anonfun$getClassFor$1(ReflectiveDynamicAccess.scala:41)
	at scala.util.Try$.apply(Try.scala:213)
	at org.apache.pekko.actor.ReflectiveDynamicAccess.getClassFor(ReflectiveDynamicAccess.scala:38)
	at org.apache.pekko.actor.ReflectiveDynamicAccess.createInstanceFor(ReflectiveDynamicAccess.scala:57)
	at org.apache.pekko.http.impl.settings.ServerSettingsImpl.parsingErrorHandlerInstance(ServerSettingsImpl.scala:69)
	at org.apache.pekko.http.impl.engine.server.HttpServerBluePrint$ControllerStage$$anon$9.<init>(HttpServerBluePrint.scala:428)
	at org.apache.pekko.http.impl.engine.server.HttpServerBluePrint$ControllerStage.createLogicAndMaterializedValue(HttpServerBluePrint.scala:426)
	at org.apache.pekko.stream.impl.GraphStageIsland.materializeAtomic(PhasedFusingActorMaterializer.scala:709)
	at org.apache.pekko.stream.impl.PhasedFusingActorMaterializer.materialize(PhasedFusingActorMaterializer.scala:508)
	at org.apache.pekko.stream.impl.PhasedFusingActorMaterializer.materialize(PhasedFusingActorMaterializer.scala:458)
	at org.apache.pekko.stream.impl.PhasedFusingActorMaterializer.materialize(PhasedFusingActorMaterializer.scala:450)
	at org.apache.pekko.stream.scaladsl.RunnableGraph.run(Flow.scala:774)
	at org.apache.pekko.http.scaladsl.HttpExt.$anonfun$bindAndHandle$1(Http.scala:269)
	at org.apache.pekko.stream.impl.fusing.MapAsyncUnordered$$anon$31.onPush(Ops.scala:1443)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:555)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.processEvent(GraphInterpreter.scala:506)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:400)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell$AsyncInput.execute(ActorGraphInterpreter.scala:532)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)
```

I'm on Scala 2.12. Here are the pekko dependencies:

```
lazy val pekkoSettings = Seq(
  libraryDependencies ++= Seq(

    ""org.apache.pekko"" %% ""pekko-actor""            % ""0.0.0+26550-2fc481bc-SNAPSHOT"",
    ""org.apache.pekko"" %% ""pekko-slf4j""            % ""0.0.0+26549-195904f2-SNAPSHOT"",
    ""org.apache.pekko"" %% ""pekko-connectors-kafka"" % ""0.0.0+1715-d36a8e1a-SNAPSHOT"",
    ""org.apache.pekko"" %% ""pekko-http""             % ""0.0.0+4270-1cfacad4-SNAPSHOT"",
    ""org.apache.pekko"" %% ""pekko-http-spray-json""  % ""0.0.0+4270-1cfacad4-SNAPSHOT"",
    ""org.apache.pekko"" %% ""pekko-stream""           % ""0.0.0+26550-2fc481bc-SNAPSHOT"",

    ""com.github.swagger-akka-http"" %% ""swagger-pekko-http"" % ""2.10.0+13-ec2a1564-SNAPSHOT"",
    ""com.github.swagger-akka-http"" %% ""swagger-scala-module"" % ""2.9.1"",
    ""com.github.swagger-akka-http"" %% ""swagger-enumeratum-module"" % ""2.6.1"",

    ""org.apache.pekko"" %% ""pekko-testkit""                  % ""0.0.0+26546-767209a8-SNAPSHOT"" % Test,
    ""org.apache.pekko"" %% ""pekko-stream-testkit""           % ""0.0.0+26546-767209a8-SNAPSHOT"" % Test,
    ""org.apache.pekko"" %% ""pekko-http-testkit""             % ""0.0.0+4270-1cfacad4-SNAPSHOT""  % Test,
    ""org.apache.pekko"" %% ""pekko-connectors-kafka-testkit"" % ""0.0.0+1717-267012de-SNAPSHOT""  % Test
  )
)
```

What did I miss?

Thank you for your help.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/318/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cD_W2,pekko,1544549814,318,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-11T19:18:34Z,2023-05-11T19:18:34Z,Check your config files (application.conf  - for instance). Those files can include class names as config values. You might have left over 'akka' values.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cD_W2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEBFc,pekko,1544556892,318,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-11T19:24:55Z,2023-05-11T19:24:55Z,"The pekko-http reference.conf has https://github.com/apache/incubator-pekko-http/blob/54c9b20c48b02b9c62fc903984c09a92bbc6a12b/http-core/src/main/resources/reference.conf#L199

So it is not pekko-http reference.conf that is providing the 'akka.http.DefaultParsingErrorHandler$' value.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEBFc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEXG4,pekko,1544647096,318,NA,samirbajaj,37282578,Samir Bajaj,,NA,2023-05-11T20:39:36Z,2023-05-11T20:39:36Z,"This is very interesting ... I'm building an assembly, and one of the `reference.conf` files being pulled in is the following:

```
########################################
# akka-http-core Reference Config File #
########################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

# Akka HTTP version, checked against the runtime version of Akka HTTP.
# Loaded from generated conf file.
include ""pekko-http-version""

akka.http {

  server {
    # The default value of the `Server` header to produce if no
    # explicit `Server`-header was included in a response.
    # If this value is the empty string and no header was included in
    # the request, no `Server` header will be rendered at all.
    server-header = pekko-http/${pekko.http.version}

    # ""PREVIEW"" features that are not yet fully production ready.
    # These flags can change or be removed between patch releases.
    preview {
      # If this setting is enabled AND the akka-http2-support is found
      # on the classpath, `Http().newServerAt(...).bind` and `bindSync`
      # will be enabled to use HTTP/2.
      #
      # `Http().newServerAt(...).bindFlow` and `connectionSource()` are not supported.
      enable-http2 = off
    }

...
```
Notice that the block begins with `akka.http` but references `pekko` all over the place. Is that how it is supposed to be?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEXG4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEdR7,pekko,1544672379,318,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-11T20:59:51Z,2023-05-11T20:59:51Z,"try upgrading the pekko snapshots - maybe you have an early pekko-http snapshot from before we finished all the code changes

maybe have a look at https://github.com/pjfanning/swagger-pekko-http-sample - that works fine","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5cEdR7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dPUXj,pekko,1564296675,318,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-26T12:09:18Z,2023-05-26T12:09:18Z,No word on this from OP. Information has been provided. Please reopen if there is a reproducible test case that can be investigated. There are examples and tests that show this to be working (at least in those scenarios).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dPUXj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/318,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dP3q4,pekko,1564441272,318,NA,samirbajaj,37282578,Samir Bajaj,,NA,2023-05-26T14:01:37Z,2023-05-26T14:01:37Z,Thank you for your help @pjfanning ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dP3q4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/324,https://api.github.com/repos/apache/pekko/issues/324,pekko,1718820426,324,Add JDK 21 to build matrix,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-05-22T03:20:39Z,2023-12-03T08:39:58Z,"As JDK 21 is the next LTS, It would be helpful to add JDK 21 to the build matrix now to help find issues in Scala and Pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/324/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/324,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYcU,pekko,1773766420,324,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:45:26Z,2023-10-21T11:45:26Z,"@He-Pin This is completed, no?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYcU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/324,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5thKlg,pekko,1837410656,324,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-03T08:39:58Z,2023-12-03T08:39:58Z,this is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5thKlg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/325,https://api.github.com/repos/apache/pekko/issues/325,pekko,1719575254,325,Provide reliable/reproducible builds for Scala 3,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-05-22T12:18:14Z,2025-01-06T08:53:57Z,Currently blocked by https://github.com/lampepfl/dotty/issues/17330. In the meantime should document that artifacts for Scala 3 are not reproducible.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/325/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5h21tz,pekko,1641765747,325,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-19T09:42:04Z,2023-07-19T09:42:04Z,"Found another case of non determinism, issue filed at https://github.com/lampepfl/dotty/issues/18248","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5h21tz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_hJz9,pekko,2139397373,325,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-05-30T11:57:43Z,2024-05-30T11:57:43Z,"> Found another case of non determinism, issue filed at [scala/scala3#18248](https://github.com/scala/scala3/issues/18248)

We attempted to work around this issue with #708, except it appears this workaround is not yet effective. I guess we can change the workaround.

In the process of 1.1.0-M1 we additionally discovered https://github.com/scala/scala3/issues/20496 . No obvious workaround in this case.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_hJz9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZVurG,pekko,2572610246,325,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-06T08:53:56Z,2025-01-06T08:53:56Z,"https://github.com/scala/scala3/issues/20496 is now fixed, and we haven't seen https://github.com/scala/scala3/issues/18248 recently, so let's tentatively close this issue for now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZVurG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/326,https://api.github.com/repos/apache/pekko/issues/326,pekko,1719798961,326,link validator check broken by license-report,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-22T14:17:29Z,2023-05-23T20:01:10Z,"Not urgent. Just spotted the broken CI job.

https://github.com/apache/incubator-pekko/actions/runs/5042361658

fyi @mdedetrich ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/326/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/326,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c0uM4,pekko,1557324600,326,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-22T14:29:17Z,2023-05-22T14:29:17Z,"I just did a quick cursory look and aside from the link validator failing due to docs not being fully fixed (which is expected) it appears to also fail if use non https links, i.e.

```
 * Failure responses found.
 * Non-https URLs found (configure `non-https-accepted` if needed).
Error: Process completed with exit code 255.
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c0uM4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/326,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-jTL,pekko,1559901387,326,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T17:58:33Z,2023-05-23T17:58:33Z,"Ah I see the issue now, sbt-license-report is putting links in the report that are derived from the pom fields in the transitive dependencies. Some of those fields are only http, so a low hanging fruit improvement can be enabling http.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-jTL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/326,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-kWx,pekko,1559905713,326,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T18:02:00Z,2023-05-23T18:02:00Z,"is it possible to get link-validator to skip this file altogether?

Then we can validate only https is used in our main pages.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-kWx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/326,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-mDg,pekko,1559912672,326,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T18:07:34Z,2023-05-23T18:07:34Z,"After checking both the example [application.conf](https://github.com/ennru/site-link-validator/blob/master/core/src/main/resources/application.conf) and the [source-code](https://github.com/ennru/site-link-validator/blob/d8fa59afbe2228115868bb88d145e7578ae7e5fa/core/src/main/scala/net/runne/sitelinkvalidator/Main.scala#L68) I can't seem to find any such config.

Ill manually add the links for know, its a bit annoying but we only need to do it once and the dependencies don't get updated that often anyways.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c-mDg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/328,pekko,1721779056,328,Source and Javadoc Snapshot Jars are missing LICENSE and NOTICE files,Claudenw,2439838,Claude Warren,claude@xenei.com,CLOSED,2023-05-23T10:40:46Z,2023-05-27T22:49:13Z,"LICENSE file should be included in all jars, releases and snapshots.  It is currently missing from the SNAPSHOT jars.  The change should place the LICENSE in **ALL** snapshot jars as well a the release jars when they are bult.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/328/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7QRa,pekko,1559037018,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T10:43:13Z,2023-05-23T10:43:13Z,@Claudenw can you tell us which jar. We have tooling to include LICENSE in jars but maybe this is missing from some places,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7QRa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7SrS,pekko,1559046866,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T10:48:51Z,2023-05-23T10:48:51Z,"@Claudenw can you look at https://repository.apache.org/content/groups/snapshots/org/apache/pekko/pekko-actor_2.13/0.0.0+26660-7809c783-SNAPSHOT/ - last night's pekko-actor jars?

* Download pekko-actor_2.13-0.0.0+26660-7809c783-SNAPSHOT.jar 
* It has these files in the jar

```
      551  01-01-2000 00:00   META-INF/DISCLAIMER
    12128  01-01-2000 00:00   META-INF/LICENSE
     1732  01-01-2000 00:00   META-INF/NOTICE
```



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7SrS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7VSr,pekko,1559057579,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T10:56:46Z,2023-05-23T10:56:46Z,"@mdedetrich we don't include LICENSE, NOTICE, DISCLAIMER in the `-sources` and `-javadoc` jars. Is that something that can be changed in sbt-apache-sonatype?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7VSr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7V72,pekko,1559060214,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T10:58:38Z,2023-05-23T10:58:38Z,Can we clarify if we need to add them into the `-sources` and `-javadoc` jars as well? Both suggestions are highly suspect because they are **only** meant to contain either Java/Scala sources or generated documentation.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7V72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7XYe,pekko,1559066142,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T11:02:21Z,2023-05-23T11:02:21Z,"I checked some random Apache `-sources` and `-javadoc` jars and found that they had LICENSE and NOTICE files. I doubt whether it's universal but it does seem like something that many teams try to support.

* https://repo1.maven.org/maven2/org/apache/spark/spark-core_2.13/
* https://repo1.maven.org/maven2/org/apache/streampark/streampark-common_2.12/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7XYe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7YSz,pekko,1559069875,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T11:05:01Z,2023-05-23T11:05:01Z,I'm not guaranteeing that sbt makes this easy - the sources and javadoc jars are basically generated using black box code and there doesn't appear to be straightforward ways to manipulate them to add extra files.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7YSz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7ZmR,pekko,1559075217,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T11:07:14Z,2023-05-23T11:07:14Z,"> I checked some random Apache -sources and -javadoc jars and found that they had LICENSE and NOTICE files. I doubt whether it's universal but it does seem like something that many teams try to support.

I checked some other projects like Apache Daffodil and indeed it does seem to be the case. Do we also have to include `DISCLAIMER` as well?

> I'm not guaranteeing that sbt makes this easy - the sources and javadoc jars are basically generated using black box code and there doesn't appear to be straightforward ways to manipulate them to add extra files.

This shouldn't be that difficult. Apache Daffodil uses sbt so I can just check their code","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7ZmR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7aU0,pekko,1559078196,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T11:09:14Z,2023-05-23T11:09:14Z,"Actually I just checked `-javadoc` for Apache daffodil and it doesn't contain any license files, `-sources` is a lot more clear (see https://repo1.maven.org/maven2/org/apache/daffodil/daffodil-core_2.11/2.7.0/daffodil-core_2.11-2.7.0-javadoc.jar for reference).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7aU0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7aqy,pekko,1559079602,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T11:10:21Z,2023-05-23T11:10:21Z,"with the DISCLAIMER file, I'm not 100% sure we need that in our jars at all - but since it's easy to extend what we have for adding LICENSE/NOTICE to also add DISCLAIMER - it just seems to be simpler to include it.

We will get dragged over coals for missing files but if we add extra ones, we are less likely to get in trouble.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7aqy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c718k,pekko,1559191332,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T12:21:00Z,2023-05-23T12:21:00Z,PR for the `-sources` package is already up https://github.com/mdedetrich/sbt-apache-sonatype/pull/15,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c718k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8HWS,pekko,1559262610,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T12:53:48Z,2023-05-23T12:53:48Z,Release for `v0.1.8` of sbt-apache-sonatype has been triggered. It should be available/downloadable on Maven in around half an hour. Bumping the version is enough for it to include the files in the `-sources` package.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8HWS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8Yqt,pekko,1559333549,328,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-05-23T13:19:34Z,2023-05-23T13:19:34Z,"https://nightlies.apache.org/pekko/snapshots/org/apache/pekko/pekko-cluster_3/0.0.0+26660-7809c783-SNAPSHOT/pekko-cluster_3-0.0.0+26660-7809c783-SNAPSHOT-sources.jar

A snapshot from May 23.  Does not have the License file included.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8Yqt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8Zfe,pekko,1559336926,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T13:20:53Z,2023-05-23T13:20:53Z,"> https://nightlies.apache.org/pekko/snapshots/org/apache/pekko/pekko-cluster_3/0.0.0+26660-7809c783-SNAPSHOT/pekko-cluster_3-0.0.0+26660-7809c783-SNAPSHOT-sources.jar
> 
> A snapshot from May 23. Does not have the License file included.

Snapshots are published nightly and the fix for this has only been published recently (see https://github.com/apache/incubator-pekko/issues/328#issuecomment-1559262610)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8Zfe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8aVI,pekko,1559340360,328,NA,Claudenw,2439838,Claude Warren,claude@xenei.com,NA,2023-05-23T13:22:12Z,2023-05-23T13:22:12Z,I was simply providing a reference to one that was broken.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8aVI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8a92,pekko,1559342966,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-23T13:23:12Z,2023-05-23T13:23:12Z,"No worries, I will create a PR to fix this now (the sbt-apache-sonatype fix should be available in maven now).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8a92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dPTbO,pekko,1564292814,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-26T12:06:51Z,2023-05-26T12:06:51Z,"@Claudenw this is partially done now - the sources jars now have LICENSE/NOTICE (the runtime jars already had them).

We don't yet support them on javadoc jars. It's not clear how hard it is to make this change. From checking other Apache projects, javadoc jars do not always contain the LICENSE/NOTICE. Is that going to be an issue? Should we take this to Legal team?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dPTbO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRETd,pekko,1564755165,328,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-26T18:16:00Z,2023-05-26T18:16:00Z,@mdedetrich there is https://issues.apache.org/jira/browse/LEGAL-28 and it seems to indicate that we should put LICENSE/NOTICE in javadoc jar. Even if it is ambiguous whether this is the case - it is going to cost time to discuss the issue. is there any chance that sbt-apache-sonatype could just be changed to add LICENSE/NOTICE to the javadoc jars?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRETd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dREyX,pekko,1564757143,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-26T18:17:47Z,2023-05-26T18:17:47Z,"No worries, ill add it into sbt-apache-sonatype. Will also use this ticket as a reference.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dREyX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRLtd,pekko,1564785501,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-26T18:42:03Z,2023-05-26T18:42:03Z,"@pjfanning PR created at https://github.com/mdedetrich/sbt-apache-sonatype/pull/16, can you review it","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRLtd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRN1h,pekko,1564794209,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-26T18:50:33Z,2023-05-26T18:50:33Z,"@pjfanning Release of `v0.1.9` was just triggered, should be on Maven in ~30 min, see https://github.com/mdedetrich/sbt-apache-sonatype/actions/runs/5094036357","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dRN1h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/328,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUwm1,pekko,1565723061,328,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T22:49:12Z,2023-05-27T22:49:12Z,"Closing this as I have updated all pekko projects with `sbt-apache-sonatype` that makes sure these files are put into source and javadoc jars.

If there is something missing/wrong, feel free to re-open issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUwm1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/329,https://api.github.com/repos/apache/pekko/issues/329,pekko,1721781026,329,Snapshot missing NOTICE file,Claudenw,2439838,Claude Warren,claude@xenei.com,CLOSED,2023-05-23T10:42:01Z,2023-05-23T13:21:59Z,"NOTICE file should be included in all jars, releases and snapshots.  It is currently missing from the SNAPSHOT jars.  The change should place the NOTICE in **ALL** snapshot jars as well a the release jars when they are built.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/329/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/329,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7Q8s,pekko,1559039788,329,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T10:44:51Z,2023-05-23T10:44:51Z,"Can we use one issue? LICENSE in jar support also tries to support NOTICE files. Again, without telling us where the problem jar is, we are sort of lost.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7Q8s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/329,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7R1c,pekko,1559043420,329,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T10:47:35Z,2023-05-23T10:47:35Z,see #328 - I'm going to only comment on that other issue from now,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c7R1c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/329,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8aIq,pekko,1559339562,329,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-23T13:21:54Z,2023-05-23T13:21:54Z,closing in favour of doing all the work in #328,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5c8aIq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/334,pekko,1723607894,334,release notes for 1.0.0 release,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-24T09:53:14Z,2023-07-15T14:43:14Z,"We can put a 'Release Notes' page on https://pekko.apache.org or we can use https://github.com/apache/incubator-pekko/releases

For a v1.0.0 release, we probably will only want a set of headline changes (compared to Akka).

For example:
* Changed the package names from `akka.*` to `org.apache.pekko.*`
* Updated the Docs to refer to Pekko instead of Akka
* etc.

We should go through the merged PRs anyway to see if there is anything that doesn't fit under the headline changes and needs to be called out separately. For instance, we did change the Jackson dependency version to 2.14.3 - and the reactivestreams version to 1.0.4 (off the top of my head).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/334/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daXo4,pekko,1567193656,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-29T14:12:48Z,2023-05-29T14:12:48Z,"I've created https://cwiki.apache.org/confluence/display/PEKKO/Pekko+Core+Release+Notes

Using Confluence as it allows for comments and collaborative edits.

I tried using GitHub to get diffs from the 'forked-from-akka' git tag to the HEAD of trunk but GitHub only displays a small subset because the diff is so big. This is unfortunate but it is a reflection of how big the code base is and with all the package name changes, etc, the diff is just too big to display.

I would welcome some outside perspectives on draft release notes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5daXo4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dalBY,pekko,1567248472,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-29T15:02:27Z,2023-05-29T15:02:27Z,@He-Pin @mdedetrich would either of you have time to review the release notes (see previous comment)?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dalBY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dapu8,pekko,1567267772,334,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-29T15:18:23Z,2023-05-29T15:18:23Z,I'll have tomorrow ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dapu8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4q1_,pekko,1591913855,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-14T20:17:23Z,2023-06-14T20:17:23Z,@mdedetrich would you be able to review  https://cwiki.apache.org/confluence/display/PEKKO/Pekko+Core+Release+Notes ?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4q1_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e44or,pekko,1591970347,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-14T20:54:20Z,2023-06-14T20:54:20Z,"When do you expect to release 1.0? Or a milestone / RC? Like weeks?
Do you publish sonatype snapshots?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e44or/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e45Cn,pekko,1591972007,334,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-14T20:55:47Z,2023-06-14T20:55:47Z,"> When do you expect to release 1.0? Or a milestone / RC? Like weeks?

We are nearing the finish line, it will likely be announced in the coming days

> Do you publish sonatype snapshots

Yes and we have been doing so for some time https://repository.apache.org/content/groups/snapshots/org/apache/pekko/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e45Cn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e46C0,pekko,1591976116,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-14T20:59:18Z,2023-06-14T20:59:18Z,"@mkurz it's only the jars related to this git repo that are part of the first release cycle. Once we get this set of jars released, we'll quickly push onto pekko-http repo, etc. Snapshots are there for all repos.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e46C0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e48-e,pekko,1591988126,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-14T21:08:35Z,2023-06-14T21:08:35Z,"> Once we get this set of jars released, we'll quickly push onto pekko-http repo, etc. Snapshots are there for all repos.

Sure, that's what I expected :wink: ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e48-e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fBquB,pekko,1594272641,334,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-16T07:57:40Z,2023-06-16T07:57:40Z,"@mkurz  Regarding my earlier comment with snapshots, I didn't realize that you mentioned sonatype specifically. We do publish snapshots but as you may have noticed from the link provided earlier its to Apache repo, not Sonatype. If you are using latest version of SBT (i.e. 1.9.0) you can just do this to add the resolver

```sbt
resolvers += Resolver.ApacheMavenSnapshotsRepo
```

Otherwise you can do
```sbt
resolvers += ""Apache Nexus Snapshots"".at(""https://repository.apache.org/content/repositories/snapshots/"")
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fBquB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fB_FU,pekko,1594356052,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T08:59:29Z,2023-06-16T08:59:29Z,"@mdedetrich I figured that out already yesterday and pushed a first draft migrating Play to pekko yesterday late night: https://github.com/playframework/playframework/pull/11847
The PR is still incomplete, but in case I experience any problems I will let you know.

Also I want to mention this does not necessarily mean Play will move to pekko, this is not decided yet. I just want to validate and test how the current state is. The final decision will be done by the Play steering committee. It will depend a lot on how we see the commitment to pekko from you, the maintainers, and the community, and maybe even companies that decide to move to pekko, since of course we don't want to move to a framework that might be dead in one year from now. So it's more or less about the trust that the project will be kept alive and not decay anytime soon.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fB_FU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fCpVg,pekko,1594529120,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T11:27:42Z,2023-06-16T11:27:42Z,"The snapshots are a bit inconsistent.
* `pekko-stream_2.13` last snapshot is `0.0.0+26716-f6930d93-SNAPSHOT`: https://repository.apache.org/content/repositories/snapshots/org/apache/pekko/pekko-stream_2.13/
* `pekko-stream_3` does not have that snapshot published: https://repository.apache.org/content/repositories/snapshots/org/apache/pekko/pekko-stream_3/

Makes cross compiling a bit cumbersome.
Using `0.0.0+26705-97cf472a-SNAPSHOT` for now since that is published for both Scala 2.13 and Scala 3","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fCpVg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fCqcA,pekko,1594533632,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T11:31:58Z,2023-06-16T11:31:58Z,"We've been having a few issues with the nightly build the last few days.

0.0.0+26669-ec5b6764-SNAPSHOT is currently the recommended snapshot

See this thread https://lists.apache.org/thread/ln8o1rxmmkz61w5kd8ndh57vqf3omxdh

The thread has recommendations for pekko-http version too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fCqcA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fDDpB,pekko,1594636865,334,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-16T12:58:10Z,2023-06-16T12:58:10Z,"```
pekko: 0.0.0+26669-ec5b6764-SNAPSHOT
pekko-http: 0.0.0+4411-6fe04045-SNAPSHOT
pekko-grpc: 0.0.0-41-ab1c00da-SNAPSHOT
pekko-connectors-kafka: 0.0.0+1738-07a19b8e-SNAPSHOT
```

Are snapshots that are known to consistently work with each other. It's not the latest version but you want get classpath/resolution issues

EDIT: @pjfanning beat me

This will improve once RCs start getting released.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fDDpB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF8rU,pekko,1595394772,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T22:31:10Z,2023-06-16T22:31:10Z,"Found a problem, pretty sure it's a bug in pekko-http Scala 3 (if not then in Scala 3): https://github.com/apache/incubator-pekko-http/issues/183","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF8rU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF-4K,pekko,1595403786,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T22:34:50Z,2023-06-16T22:34:50Z,">  it's a bug in pekko-http Scala 3

sorry, more likely pekko-stream, since `SessionBytes` lives there.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF-4K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGA83,pekko,1595412279,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:46:09Z,2023-06-16T22:46:09Z,SessionBytes and ProtocolSwitch are both in pekko-http-core,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGA83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGCUM,pekko,1595417868,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T22:55:08Z,2023-06-16T22:55:08Z,"> SessionBytes 

Are you sure? Or maybe I am too tired. (I don't really care who is right to be honest :wink: )

https://github.com/apache/incubator-pekko/blob/bed33cd4f00613f033638928904a29b8ce79071a/stream/src/main/scala/org/apache/pekko/stream/SslTlsOptions.scala#L182-L184


`stream/src/main/scala/org/apache/pekko/stream/SslTlsOptions.scala`

```
package org.apache.pekko.stream
```

Or am I missing something?

Thanks for the very quick fix!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGCUM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGDJX,pekko,1595421271,334,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:59:33Z,2023-06-16T22:59:33Z,"My mistake, SessionBytes is in pekko-streams ok. I was confused by the TLS code. I have a draft PR for pekko-http-core to try to work around this. https://github.com/apache/incubator-pekko-http/pull/184

I still think this is more likely to be a Scala3 issue than a problem in the Pekko code but it is worth experimenting nonetheless.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGDJX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGDlL,pekko,1595423051,334,NA,mkurz,644927,Matthias Kurz,,NA,2023-06-16T23:02:19Z,2023-06-16T23:02:19Z,"I too had the suspicion from the beginning this is a bug in Scala 3.
The PR looks good to me.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fGDlL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/335,https://api.github.com/repos/apache/pekko/issues/335,pekko,1723616380,335,detailed build instructions,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-24T09:57:55Z,2023-06-16T22:17:25Z,"As part of Pekko release, we will need the Apache Incubator PMC to vote on our source release. They will need to be able to take the source release and to build Pekko jars using it.

There is an inadequate initial stab at:

https://github.com/apache/incubator-pekko/blob/main/README.md#building-from-source

We need to also spell out that you probably need to have 2 Java Runtimes installed. See #333 for background (and https://lists.apache.org/thread/zz77bc6tjhdp68cojj6vksrmlqqvn7ln)

We probably also want to make the instructions usable by Linux and Windows users.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/335,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dH5tT,pekko,1562352467,335,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T06:30:22Z,2023-05-25T06:30:22Z,"So we should also probably make a clear distinction between ""building/compiling"" and ""making a release"". The reason I am pointing this out is that you can compile/build the project fine on JDK 8 (I only have a single visible JDK installed, JDK 8 which is pointed to Pekko via [jenv](https://github.com/jenv/jenv)), it just won't have the optional JDK 11 features. This will also become important when inlining, i.e. https://github.com/apache/incubator-pekko/pull/305 because since inlining doesn't work with Scala's incremental compilation, you only want to enable it when doing a release build and not during development.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dH5tT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/335,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF5L_,pekko,1595380479,335,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:17:25Z,2023-06-16T22:17:25Z,what's at https://github.com/apache/incubator-pekko/blob/main/README.md#building-from-source will do,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF5L_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/338,https://api.github.com/repos/apache/pekko/issues/338,pekko,1724076211,338,need to remove cluster/jmx-client/jmxsh-R5.jar ,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-24T14:00:33Z,2023-05-24T22:10:35Z,"We can't have binaries in an Apache source release.

We need to change the build so that it downloads this file when the build needs it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/338/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/338,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dGhkF,pekko,1561991429,338,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T22:10:35Z,2023-05-24T22:10:35Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dGhkF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/339,pekko,1724096497,339,source release: document use of version.sbt,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-24T14:09:13Z,2023-05-29T12:20:35Z,"At the moment, when we use sbt to build jars, sbt plugins create a SNAPSHOT version number based on the last git tag - eg `0.0.0+26669-ec5b6764-SNAPSHOT`.

When we put the source in a dir without having the dir under git control, the sbt plugins construct a version with `HEAD-<date>-<time>` - eg `HEAD+20230524-1416`

We have not fully discussed what to do as part of a release but it sort of makes sense to add a `version.sbt` like:

```
ThisBuild / version := ""1.0.0""
```

Note that Apache releases are done manually by Release Managers (humans) and that the release won't be based on an automated job that starts when a git tag is added. The git tag is still useful but it doesn't drive the build.

If we include this file in the source release (generated by the sbt-source-dist plugin), then that affects the jar names that will be created and I think it makes sense that our '1.0.0' source release builds jars with '1.0.0' version on them.

fyi @mdedetrich, @raboof, @jrudolph  ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/339/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFbbv,pekko,1561704175,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T17:58:44Z,2023-05-24T17:58:44Z,"A lot of the points we already discussed in https://github.com/apache/incubator-pekko/issues/130 but unless there is a formal ASF requirement I wouldn't put that much effort/energy into putting `build.sbt` into the source package and using it as a source of truth for the version.

As stated elsewhere, aside from verification purposes there is going to be close to no one actually downloading the source package, everyone will download the binary jars from maven via their JVM based build tool as a dependency. Also as discussed in https://github.com/apache/incubator-pekko/issues/130#issuecomment-1410210094, the reason why we wanted to use git tags is that it works completely seamlessly with sbt-dyn-ver and because of that the entire release process is very simple.

In short, if we start hardcoding the `version` in `build.sbt` at best its largely going to be ceremonial and at worst it can cause problems/conflicts. In fact [sbt-dynver](https://github.com/sbt/sbt-dynver) already states to **NOT** use a static version in build.sbt, directly quoting their README

> Then make sure to NOT set the version setting, otherwise you will override sbt-dynver.

> Note that Apache releases are done manually by Release Managers (humans) and that the release won't be based on an automated job that starts when a git tag is added. The git tag is still useful but it doesn't drive the build.

This was already discussed and its quite easy to handle this problem. Release managers are responsible for creating a git tag when a release is being announced and other committers can either refer to that tag to build the software or just download the source (which the git tag points to).

> If we include this file in the source release (generated by the sbt-source-dist plugin), then that affects the jar names that will be created and I think it makes sense that our '1.0.0' source release builds jars with '1.0.0' version on them.

It will also completely break sbt-dynver which all of our snapshots rely on to work correctly.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFbbv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFhXN,pekko,1561728461,339,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T18:17:59Z,2023-05-24T18:17:59Z,"It does not break sbt-dynver. Having the version explicitly declared just overrides what sbt-dynver does.

There is no reason why we can't set the version explicitly for the release (in build.sbt or version.sbt) and remove it after the release.

We need the Incubator PMC to sign off on our source releases - so making it easy for people to use the source release to build 1.0.0 jars makes a lot of sense.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFhXN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFrhU,pekko,1561770068,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T18:51:32Z,2023-05-24T18:51:32Z,"I understand but I re-iterate my earlier point about it being largely ceremonial and hence its just adding extra steps. This was discussed either in the earlier thread or on the mailing list, but iirc there isn't any problem in creating our own release process which can just state ""clone the git repository at this tag"".

Also the version just controls the filename of the jars being made, everything else about the build is the same. Again I don't really know if this breaks some ASF process, but one thing I have noticed on this journey is that a lot of ""rules"" are in fact just formalities/habits.

If there is an actual rule that committers/IPMC verifying a release are not allowed to clone the git repo and check out a tag then I don't have a problem temporarily setting and deleting the version even though it basically kills the premise of sbt-dynver (which is that the git tag **is the source of truth**). Even in the case where checking out a git repository is not allowed, you can simply set the version when starting sbt avoiding having to manually edit the `build.sbt`/`version.sbt` file, i.e.

```sh
sbt ""set ThisBuild / version := \""1.0.0\""; shell""
```

This force the version for the project before going into the standard sbt shell. You can also do

```sh
sbt ""set ThisBuild / version := \""1.0.0\""; +publishLocal""
```

Which will publish the project with that version locally if you want to verify the jars and then exit. Or if we want to make a source distribution

```sh
sbt ""set ThisBuild / version := \""1.0.0\""; sourceDistGenerate""
```

Another option is to do it the Akka/Pekko way and just pass it as a `-D` system flag, adding this functionality is just a few lines and it has precedent in other Pekko modules. Furthermore when we get the docker build up and running is to just pass a [build-arg](https://stackoverflow.com/a/34254700) to the Docker script which will pass it into sbt.

So my preference is to cross that bridge when we get there, I am sure if this is an actual problem then we will be promptly told when doing the release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFrhU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFtlL,pekko,1561778507,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T18:58:37Z,2023-05-24T18:58:37Z,"I would also add that if we are really forced to specify the version manually in source (i.e. within `build.sbt`/`version.sbt`) then I would suggest we make it so that the version is only set based on a flag/env variable, i.e.

```sbt
ThisBuild / version := {
  if (releaseVersion)
     ""1.0.0""
  else
     (ThisBuild / version).value
}
```

This means that unless you pass in `releaseVersion` it will default to the version provided by sbt-dynver, then at least we don't have to worry about constantly enabling and disabling it and also a lot less confusing to those using pekko outside of the context of the git repo.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFtlL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFufl,pekko,1561782245,339,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T19:01:40Z,2023-05-24T19:01:40Z,"There is 100% a rule that ASF releases involve producing a zip and/or tgz with the source code and that that is the official release artifact. Every other artifact that we produce is a convenience. The voting is all about the source release zip/tgz.

We have no chance of getting away with saying 'check out the git repo' and build it from that.

The git tag is not the source of truth - for ASF, it is the voted on source release zip/tgz.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFufl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFwvn,pekko,1561791463,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T19:08:57Z,2023-05-24T19:08:57Z,"> There is 100% a rule that ASF releases involve producing a zip and/or tgz with the source code and that that is the official release artifact. Every other artifact that we produce is a convenience. The voting is all about the source release zip/tgz.
> 
> We have no chance of getting away with saying 'check out the git repo' and build it from that.

I know this, and the solutions I stated earlier full fill that requirement.

Even if you are only provided the source, its perfectly possible to set the version of sbt when running it in a terminal (as described in https://github.com/apache/incubator-pekko/issues/339#issuecomment-1561770068) or as a last resort, only use the version defined in `build.sbt`/`version.sbt` if you pass a flag to sbt (as described in https://github.com/apache/incubator-pekko/issues/339#issuecomment-1561778507).

I can right now download a `tar.gz` source of Pekko and with no presence of git create a ""1.0.0"" source distribution by doing `sbt ""set ThisBuild / version := \""1.0.0\""; sourceDistGenerate""`.

Removing and adding a hardcoded version in `build.sbt`/`version.sbt` is what I have a problem with. Not even other ASF projects do this, since if you are only reading the source in absence of git you then have no idea what the version is unless you happen to have the source at the exact same time a release is made (if our primary argument is based around not having git and only sources).

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dFwvn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF8SK,pekko,1561838730,339,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T19:48:29Z,2023-05-24T19:48:29Z,"This is getting complicated. We need to block the release and get a release doc written, agreed on and voted on.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF8SK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF-mO,pekko,1561848206,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T19:56:46Z,2023-05-24T19:56:46Z,"> This is getting complicated. We need to block the release and get a release doc written, agreed on and voted on.

I am not entirely sure whats complicated about it. Its actually far simpler and can be done right now without any additional changes to Pekko. You just need to simply document the following

# Release Process

... etc etc
In order to create an Apache Source distribution, please run the following command

```sh
sbt ""set ThisBuild / version := \""<VERSION>\""; sourceDistGenerate""
```

where `<VERSION>` is the version you want to make a release for, i.e. for `1.0.0`

```sh
sbt ""set ThisBuild / version := \""1.0.0\""; sourceDistGenerate""
```

Likewise in order to publish a signed artifact to maven run the following

```sh
sbt ""set ThisBuild / version := \""<VERSION>\""; +publishSigned""
```

... etc etc

And thats it. This will work regardless if its a git repo or just raw sources. I just tried it on my local machine and it works as expected

```
sbt ""set ThisBuild / version := \""1.0.0\""; sourceDistGenerate""
[info] welcome to sbt 1.9.0-RC1 (Homebrew Java 11.0.19)
[info] loading global plugins from /Users/mdedetrich/.sbt/1.0/plugins
[info] loading project definition from /Users/mdedetrich/github/incubator-pekko/project/project
[info] loading settings for project incubator-pekko-build from plugins.sbt ...
[info] loading project definition from /Users/mdedetrich/github/incubator-pekko/project
[info] loading settings for project pekko from build.sbt ...
[info] resolving key references (63038 settings) ...
[info] 
[info] ________     ______ ______        
[info] ___  __ \_______  /____  /_______ 
[info] __  /_/ /  _ \_  //_/_  //_/  __ \
[info] _  ____//  __/  ,<  _  ,<  / /_/ /
[info] /_/     \___//_/|_| /_/|_| \____/   0.0.0+26670-7418680c-SNAPSHOT
[info] 
[info] Useful sbt tasks:
[info] >  compile - Compile the current project
[info] >  test - Run all the tests 
[info] >  testOnly *.AnySpec - Only run a selected test
[info] >  publishLocal - Publish current snapshot version to local ~/.ivy2 repo
[info] >  verifyCodeStyle - Verify code style
[info] >  applyCodeStyle - Apply code style
[info] >  sortImports - Sort the imports
[info] >  mimaReportBinaryIssues  - Check binary issues
[info] >  validatePullRequest  - Validate pull request
[info] >  docs/paradox - Build documentation
[info] >  docs/paradoxBrowse - Browse the generated documentation
[info] >  tips: - prefix commands with `+` to run against cross Scala versions.
[info] >  Contributing guide: - https://github.com/apache/incubator-pekko/blob/main/CONTRIBUTING.md
[info] Defining ThisBuild / version
[info] The new value will be used by Compile / doc / scalacOptions, Compile / packageBin / packageOptions and 969 others.
[info]  Run `last` for details.
[info] Reapplying settings...
[info] 
[info] ________     ______ ______        
[info] ___  __ \_______  /____  /_______ 
[info] __  /_/ /  _ \_  //_/_  //_/  __ \
[info] _  ____//  __/  ,<  _  ,<  / /_/ /
[info] /_/     \___//_/|_| /_/|_| \____/   1.0.0
[info] 
[info] Useful sbt tasks:
[info] >  compile - Compile the current project
[info] >  test - Run all the tests 
[info] >  testOnly *.AnySpec - Only run a selected test
[info] >  publishLocal - Publish current snapshot version to local ~/.ivy2 repo
[info] >  verifyCodeStyle - Verify code style
[info] >  applyCodeStyle - Apply code style
[info] >  sortImports - Sort the imports
[info] >  mimaReportBinaryIssues  - Check binary issues
[info] >  validatePullRequest  - Validate pull request
[info] >  docs/paradox - Build documentation
[info] >  docs/paradoxBrowse - Browse the generated documentation
[info] >  tips: - prefix commands with `+` to run against cross Scala versions.
[info] >  Contributing guide: - https://github.com/apache/incubator-pekko/blob/main/CONTRIBUTING.md
[info] Creating zip archive at /Users/mdedetrich/github/incubator-pekko/target/dist/incubating-pekko-src-1.0.0-20230524.zip
[info] Creating tar archive at /Users/mdedetrich/github/incubator-pekko/target/dist/incubating-pekko-src-1.0.0-20230524.tgz
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF-mO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF_0O,pekko,1561853198,339,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-24T20:01:01Z,2023-05-24T20:01:01Z,I mean completing https://github.com/apache/incubator-pekko/issues/130 and getting that doc on cwiki.apache.org or something similar. The doc should describe what the release manager does to get a release out. It should probably also consider how the source release can be verified because there is a bit of overlap between what the release manager is doing and what someone building from the source release will be doing (this issue and #323).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dF_0O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dGBSz,pekko,1561859251,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-24T20:05:44Z,2023-05-24T20:05:44Z,"If you are happy with it, I can start drafting the release docs with the method described in https://github.com/apache/incubator-pekko/issues/339#issuecomment-1561848206, ill get to it after the Docker image is done. In regards to verification of the source release, at least as far as I know from Kafka release process this is quite malleable but it usually involves compiling, running the full suite of tests etc etc.

Since we have reproducible builds, we can also verify that published jars have the same hash but this won't work for Scala 3 artifacts (see https://github.com/apache/incubator-pekko/issues/325).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dGBSz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dG4LD,pekko,1562084035,339,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-05-25T00:13:33Z,2023-05-25T00:13:33Z,"Note also that git tags are mutable, so when referring to a release it's better to refer to the commit hash.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dG4LD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dG5de,pekko,1562089310,339,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-05-25T00:21:57Z,2023-05-25T00:21:57Z,"Artefacts are usually named with the version number in them e.g. Apache-Foo-incubating-1.0.0-RC1.tar.gz, so in general you do know what version the source is. The README or release notes will also generally state what the version is.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dG5de/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dHx_L,pekko,1562320843,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T05:59:57Z,2023-05-25T05:59:57Z,"> Note also that git tags are mutable, so when referring to a release it's better to refer to the commit hash.

Actually when using github (which Pekko does) its possible to make them immutable via the use of git tag protection rules, see https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-tag-protection-rules. Such a rule means that only admins (i.e ASF Infra) are able to edit or delete git tags once they have been added.

I will check with `#asfinra` if its possible to do this with their `.asf.yaml`.

EDIT: I created an issue for this at https://github.com/apache/incubator-pekko/issues/342 as well as an upstream asfinfra issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dHx_L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dINJm,pekko,1562432102,339,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-05-25T07:43:09Z,2023-05-25T07:43:09Z,"Here's an example where a release got a -1 vote because of that (and other issues). I can provide other examples if you need. I suggest you use git commit SHAs instead.
https://lists.apache.org/thread/8h5fw3cpx81w7nmm385hlx261sbo9m0n","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dINJm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dIN46,pekko,1562435130,339,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T07:45:41Z,2023-05-25T07:45:41Z,"> Here's an example where a release got a -1 vote because of that (and other issues). I can provide other examples if you need. I suggest you use git commit SHAs instead.
https://lists.apache.org/thread/8h5fw3cpx81w7nmm385hlx261sbo9m0n

Pekko already creates source distributions using version and timestamp, please see https://github.com/apache/incubator-pekko/issues/339#issuecomment-1561848206. There was never an intent to use git tags as part of the filename for the source distribution (even though the difference in reality is quite benign because the whole point of git tags is that they are named the same as the official release).

EDIT: I wasn't aware that we can include the git SHA's in the source dist filename. If thats the case @pjfanning to me it sounds reasonable to add the git SHA in the source dist filename, wdyt?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dIN46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/339,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dZ5wc,pekko,1567071260,339,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-29T12:20:34Z,2023-05-29T12:20:34Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dZ5wc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/342,pekko,1725162329,342,Set git tag protection rules on github.,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-05-25T06:19:32Z,2023-06-03T03:51:04Z,"An upstream ticket for asfinfra has been created at https://issues.apache.org/jira/browse/INFRA-24637. I am also asking infra if its possible to set this permission manually for now (see https://the-asf.slack.com/archives/CBX4TSBQ8/p1684995671534989)

@pjfanning How do you feel about removing the `forked-from-akka` git tag? To me this seems out of place, and if we need to keep track of this we can always just document the exact git commit hash when the fork happened (which is probably more approachable for the types of people interested in this anyways).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dINTt,pekko,1562432749,342,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-25T07:43:40Z,2023-05-25T07:43:40Z,"I'd prefer to keep the 'forked-from-akka' tag. One of the Microsoft guys wanted something to mark the fork point. And tags avoid us having to add a documentation page that people may not be able to find.

If a malicious actor manages to interfere with the git tags, then maybe we can reconsider.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dINTt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dIT0L,pekko,1562459403,342,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T08:01:27Z,2023-05-25T08:01:27Z,"My counter argument to this is that it does impact/break a lot of the sbt dynamic version from git tag tooling that has been built in various pekko modules. For example pekko-grpc had an issue with publishing/releasing because of git tag existing that doesn't follow the `v*.*.*` format and iirc I actually had to delete this tag to get things working.

Additionally, at least until git tag protection rules are setup it can be argued that using a git tag is not enough because they are mutable.

> If a malicious actor manages to interfere with the git tags, then maybe we can reconsider.

To me if we do setup a git tag protection rule its not going to cover `forked-from-akka`, it will just cover `v*.*.*`.

> And tags avoid us having to add a documentation page that people may not be able to find.

There is plenty of much higher stakes information in the documentation (i.e. legal/security/commercial related) and people being lazy to read documentation is to me quite a weak argument. Also tbh, the vast majority of people won't care about when exactly Pekko forked from Akka, the only people that will care about such a thing are the ones that care about legal/security/commercial matters and as mentioned before other info on this topic is in the docs.

@sam-byng Are you able to commend on this? Would it be enough for us to just document the exact git hash in pekko documentation (just like other legal/security/commercial related is documented) indicating when the fork happened rather than using a git tag?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dIT0L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dKwCZ,pekko,1563099289,342,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T15:24:17Z,2023-05-25T15:24:17Z,"So asf infrajust responded and they said that they can set the git tag protection rules manually (see https://issues.apache.org/jira/browse/INFRA-24637?focusedCommentId=17726277&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17726277). The idea would be to add git tag protection rule that just covers the version pattern (i.e. `v*.*.*`). It wont have any existing effect on the `forked-from-akka` tag.

@pjfanning Are you happy with this. Should I start a discussion thread in dev mailing list on it?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dKwCZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dKx7L,pekko,1563107019,342,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-25T15:29:08Z,2023-05-25T15:29:08Z,protecting the v tags makes sense - I wouldn't be against protecting all tags either - but the v tags are the most important,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dKx7L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dK7oy,pekko,1563146802,342,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T15:57:15Z,2023-05-25T15:57:15Z,Shall I just go ahead and create the ticket at asfinfra to do this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dK7oy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dLBBx,pekko,1563168881,342,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-25T16:12:27Z,2023-05-25T16:12:27Z,"> Shall I just go ahead and create the ticket at asfinfra to do this?

Sure - give them this link - https://incubator.apache.org/clutch/pekko.html

It has all our repos listed.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dLBBx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dLT-L,pekko,1563246475,342,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-25T17:14:48Z,2023-05-25T17:14:48Z,"Done, https://issues.apache.org/jira/browse/INFRA-24644","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dLT-L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/342,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dQNoj,pekko,1564531235,342,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-26T15:04:38Z,2023-05-26T15:04:38Z,"So I can report that the manual setup of github tag protection is now working, although asfinfra needs to cleanup the implementation a bit. See https://issues.apache.org/jira/browse/INFRA-24644?focusedCommentId=17726630&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17726630 for more info","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dQNoj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/344,pekko,1728329893,344,scala 2.12.18 and 2.13.11,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-26T23:07:01Z,2023-06-16T22:16:51Z,"These should be released soon. See https://contributors.scala-lang.org/t/scala-2-13-11-release-planning/6088 (which links to the 2.12.18 thread too).

I wouldn't block a Pekko release waiting for this but there is a reasonable argument to uptake these versions in Pekko build if they are released soon.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/344/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dS27f,pekko,1565224671,344,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-05-27T06:00:37Z,2023-05-27T06:00:37Z,"It's around the corner.
https://github.com/scala/scala-dev/issues/835 

I think we can wait:)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dS27f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFA2,pekko,1566068790,344,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T10:19:46Z,2023-05-28T10:19:46Z,the release is complicated enough already - let's drop this from 1.0.0 consideration for now,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dWFA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5devFC,pekko,1568338242,344,NA,nvollmar,919730,Nicolas Vollmar,,NA,2023-05-30T12:21:16Z,2023-05-30T12:21:16Z,"I agree, unless there is a good reason I'd not upgrade to a new compiler release shortly before releasing, too many unnecessary risks. Scala 3.3 should stay the exception.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5devFC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5de-EC,pekko,1568399618,344,NA,mkurz,644927,Matthias Kurz,,NA,2023-05-30T13:04:09Z,2023-05-30T13:04:09Z,"I would upgrade to 2.13.11 and 2.12.18 before cutting the release. These Scala 2.1x.xx versions are coordinated together with Scala 3.3.0 and should be released this week. These versions make sure everything works smoothly between these three versions e.g. the tasty thing gets adjusted, etc.
Also it seems sbt 1.9.0 is on hold until 2.12.18 is here, which will then be used as sbt's internal default Scala version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5de-EC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfGIO,pekko,1568432654,344,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-30T13:25:07Z,2023-05-30T13:25:07Z,"I'm not sure - we are talking about the scala libs that we build with. Users of Pekko should use the latest Scala releases. Whether we use the absolutely latest Scala libs to build with is a different matter.

Normally I would say upgrade but we are in the middle of a release and I don't want to add risks to the release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfGIO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/344,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4p3x,pekko,1591909873,344,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-14T20:15:08Z,2023-06-14T20:15:08Z,this is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5e4p3x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/351,pekko,1728818786,351,setup sbt plugin to allow publishing of signed jars to Apache Maven repository,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-27T16:25:51Z,2023-05-28T09:11:12Z,"As part of releasing Pekko, we will need to run an sbt command to publish signed jars to Apache Maven repository

`sbt +publishSigned`

* [sbt-pgp](https://github.com/sbt/sbt-pgp)

Possibly other plugins could be used","{""url"": ""https://api.github.com/repos/apache/pekko/issues/351/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUcLC,pekko,1565639362,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T18:34:56Z,2023-05-27T18:34:56Z,"@mdedetrich I'm fairly surprised that `sbt publishSigned` does not work. I would have thought that sbt-apache-sonatype would be loading sbt-pgp transitively. Anyway, adding sbt-pgp allows me at least to create signed jars locally. 

I'm currently playing with sbt-sonatype commands to try to prepare a release and worrying that I might accidentally get it to publish a release all the way to Maven Central.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUcLC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUcSS,pekko,1565639826,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T18:37:19Z,2023-05-27T18:37:19Z,"> @mdedetrich I'm fairly surprised that `sbt publishSigned` does not work. I would have thought that sbt-apache-sonatype would be loading sbt-pgp transitively. Anyway, adding sbt-pgp allows me at least to create signed jars locally.

By not working I guess you mean we are missing some dependency? If so adding sbt-pgp to sbt-apache-sonatype should solve the issue

> I'm currently playing with sbt-sonatype commands to try to prepare a release and worrying that I might accidentally get it to publish a release all the way to Maven Central.

One thing we need to take note of is sbt-sonatype by default does bundling, which means we may have to do something like https://github.com/sirthias/parboiled2/pull/452","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUcSS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUebO,pekko,1565648590,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T18:48:39Z,2023-05-27T18:48:39Z,@pjfanning Release of sbt-apache-sonatype `v0.1.10` has been triggered which adds sbt-gpg as a dependency. Let me know if it solves your problem,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUebO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUehn,pekko,1565648999,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T18:50:02Z,2023-05-27T18:50:02Z,"@mdedetrich I don't mind adding sbt-pgp directly to each project but if you like we can do it indirectly via a new release of sbt-apache-sonatype.

I was able to generate a bundle in repository.apache.org using `sbt +publishSigned` and `sbt sonatypePrepare sonatypeBundleUpload`. 

This bundle is not closed so it will not yet be in staging. I could use `sbt sonatypeClose` but I think I prefer the idea of using the UI to close the bundle. We absolutely don't want a release manager to use the wrong sbt-sonatype command a do a full release before a vote has happened (ie `sbt sonatypeRelease` or `sbt sonatypeBundleRelease`).
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUehn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUex8,pekko,1565650044,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T18:54:09Z,2023-05-27T18:54:09Z,"> @mdedetrich I don't mind adding sbt-pgp directly to each project but if you like we can do it indirectly via a new release of sbt-apache-sonatype.

Already done, check above comment","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUex8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUeyu,pekko,1565650094,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T18:54:16Z,2023-05-27T18:54:16Z,"@mdedetrich could you have a look at https://repository.apache.org/content/groups/staging/org/apache/pekko/ ?

The contents of this look ok to me. I can drop this later today to avoid confusion.

PS I only built for scala 2.13. But all the jars are there for this scala version and it appears likely to be something that could be released (not that I am releasing this). I picked the 0.1.0-rc0 version number just in case,","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUeyu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUfFy,pekko,1565651314,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T18:56:01Z,2023-05-27T18:56:01Z,"> @mdedetrich could you have a look at https://repository.apache.org/content/groups/staging/org/apache/pekko/ ?

> The contents of this look ok to me. I can drop this later today to avoid confusion.

Can you try with `+publishSigned` to see that it works with all Scala versions?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUfFy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUhlt,pekko,1565661549,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T19:53:00Z,2023-05-27T19:53:00Z,"@mdedetrich unfortunately, I'm hitting recurring issues building Scala 3 artifacts. The scaladoc job keeps just crashing out. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUhlt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUhvw,pekko,1565662192,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T19:58:07Z,2023-05-27T19:58:07Z,"Are you running `scaladoc` manually or this being run as part of `publishSigned`? I might have some idea of whats going on, hit similar issues with pekko-grpc Scala 3 migration.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUhvw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUh7f,pekko,1565662943,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T20:02:41Z,2023-05-27T20:02:41Z,scaladoc issues happen in publishSigned (needed for the javadoc jars),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUh7f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUiHO,pekko,1565663694,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T20:08:03Z,2023-05-27T20:08:03Z,Okay I will look into it tomorrow/day after,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUiHO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUiqz,pekko,1565665971,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T20:22:25Z,2023-05-27T20:22:25Z,"@mdedetrich It seems to be failing at:

`(osgi / Compile / doc) Scaladoc generation failed`

I'm using a Mac (Monterey OS).

edit - I have #355 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUiqz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUodE,pekko,1565689668,351,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-27T21:24:48Z,2023-05-27T21:24:48Z,"@pjfanning 

Is this same problem as https://github.com/apache/incubator-pekko-grpc/actions/runs/5100731826/jobs/9169230377?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUodE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUpDR,pekko,1565692113,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-27T21:30:34Z,2023-05-27T21:30:34Z,"> @pjfanning
> 
> Is this same problem as https://github.com/apache/incubator-pekko-grpc/actions/runs/5100731826/jobs/9169230377?

Looks different to me","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dUpDR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/351,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dV6Gm,pekko,1566024102,351,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-28T09:11:12Z,2023-05-28T09:11:12Z,PR merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dV6Gm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/352,https://api.github.com/repos/apache/pekko/issues/352,pekko,1728869266,352,publish v1.0.0 of docs,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-27T17:58:40Z,2023-10-21T11:47:52Z,"See https://pekko.apache.org/docs/pekko/current/additional/osgi.html and its snapshot pekko version.

This will be confusing after the release.

I would suggest that we create a create a 1.0.0 branch and create a CI workflow that publishes the docs and scaladocs/javadocs but with `ThisBuild / version = ""1.0.0""`. It needs to be a CI job because there are secrets needed to rsync the docs.

Having a branch means that we can fix issues and get the 1.0.0 docs republished.

We can modify the [.htaccess](https://github.com/apache/incubator-pekko-site/blob/main/src/main/paradox/.htaccess) file in pekko-site repo to map 'current' to 1.0.0.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/352/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/352,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gP_HB,pekko,1614803393,352,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-30T15:15:51Z,2023-06-30T15:15:51Z,"https://pekko.apache.org/docs/pekko/current/ and https://pekko.apache.org/docs/pekko/1.0.0/ relate to 1.0.0 docs now.

Will need to update the CI job after the release to use the 1.0 branch. Or a git tag.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gP_HB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/352,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ntJnJ,pekko,1739889097,352,NA,mkurz,644927,Matthias Kurz,,NA,2023-09-28T19:29:23Z,2023-09-28T19:29:23Z,"Hi,
where can I find the api docs? Basically looking for Pekko version of
* https://doc.akka.io/japi/akka/2.6/ and
* https://doc.akka.io/japi/akka-http/10.2/
to replace 

https://github.com/playframework/playframework/blob/57af139ae5c531c8d7bb3e4c8523da85dc07dd9a/project/Docs.scala#L171-L174
Thanks!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ntJnJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/352,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ntMgE,pekko,1739900932,352,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-28T19:39:04Z,2023-09-28T19:39:04Z,@mkurz It's all linked here - https://pekko.apache.org/modules.html,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ntMgE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/352,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYb0,pekko,1773766388,352,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:45:12Z,2023-10-21T11:45:12Z,@pjfanning Is this still valid?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYb0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/353,pekko,1728912242,353,lots of scaladoc warnings in build,pjfanning,11783444,PJ Fanning,,OPEN,2023-05-27T19:34:04Z,2023-07-10T06:28:40Z,"Check out git repo and run `sbt unidoc` and you will lots of warnings like `Could not find any member to link for` (and others).

It would be great if anyone who want to help can look at these and submit some PRs.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/353/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fQ_NS,pekko,1598288722,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-06-20T07:50:23Z,2023-06-20T07:50:23Z,"@pjfanning 
May I work on it?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fQ_NS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fRfVj,pekko,1598420323,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T09:19:56Z,2023-06-20T09:19:56Z,"@ydash - this is still an issue. If you have time to contribute some PRs that would be great.

We are looking to do a release at the moment so we would like to minimise disruption. Could you keep any PRs small? Not one change in each PR but a relatively limited number of changes in each PR.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fRfVj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgpLc,pekko,1602392796,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-06-22T10:23:47Z,2023-06-22T10:23:47Z,"It seems to appear two types of warn log, `Could not find any member to link` and `The link target is ambiguous`.

One of `Could not find any member to link` logs is following:
```
`[warn] \path\incubator-pekko\cluster-sharding-typed\src\main\scala\org\apache\pekko\cluster\sharding\typed\testkit\javadsl\EntityRef.scala:22:1: Could not find any member to link for ""EntityRef"".`
```

This problem can be resolved by explicitly writing a full path of an entity:

```diff
-  * For testing purposes this `EntityRef` can be used in place of a real [[EntityRef]]. 
+  * For testing purposes this `EntityRef` can be used in place of a real [[org.apache.pekko.cluster.sharding.typed.javadsl.EntityRef EntityRef]].
```

https://github.com/apache/incubator-pekko/blob/966204814ecac09b9d7cc6e866fe2a71a660ab05/cluster-sharding-typed/src/main/scala/org/apache/pekko/cluster/sharding/typed/testkit/javadsl/EntityRef.scala#L23

Following is an example of `The link target is ambiguous` logs:
```
[warn] \path\incubator-pekko\actor-testkit-typed\src\main\scala\org\apache\pekko\actor\testkit\typed\javadsl\TestProbe.scala:70:1: The link target ""ActorTestKit#createTestProbe"" is ambiguous. Several members fit the target:
[warn] [M](name: String, clazz: Class[M]): org.apache.pekko.actor.testkit.typed.javadsl.TestProbe[M] in class ActorTestKit [chosen]
[warn] [M](name: String): org.apache.pekko.actor.testkit.typed.javadsl.TestProbe[M] in class ActorTestKit
[warn] [M](clazz: Class[M]): org.apache.pekko.actor.testkit.typed.javadsl.TestProbe[M] in class ActorTestKit
[warn] [M](): org.apache.pekko.actor.testkit.typed.javadsl.TestProbe[M] in class ActorTestKit
```

If a link target is ambiguous, scaladoc seems to automatically generate a link for one candidate.
So, I will resolve this problem by explicitly writing link of a candidate automatically chosen:
```diff
-  * or via [[ActorTestKit#createTestProbe]].
+  * or via [[ActorTestKit#createTestProbe[M](name:String,clazz:Class[M])* ActorTestKit#createTestProbe]].
```

https://github.com/apache/incubator-pekko/blob/966204814ecac09b9d7cc6e866fe2a71a660ab05/actor-testkit-typed/src/main/scala/org/apache/pekko/actor/testkit/typed/javadsl/TestProbe.scala#L72

 
@pjfanning 
What do you think about the above plan?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgpLc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgwQZ,pekko,1602421785,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-22T10:45:29Z,2023-06-22T10:45:29Z,@ydash seems ok to me - but my point in an earlier comment still stands - can we keep any PRs a manageable size - to make them easier to review?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgwQZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fl-s_,pekko,1603791679,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-06-23T07:11:33Z,2023-06-23T07:11:33Z,"@pjfanning 
> can we keep any PRs a manageable size - to make them easier to review?

Probably yes, we can.
I will divide into two PRs based on the warning log type.
One will have about 10 lines modification and the other will have abount 80 lines modification.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fl-s_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gCUE6,pekko,1611219258,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-06-28T11:17:27Z,2023-06-28T11:17:27Z,"I've found links which refer to a private type or member. Those links cause `Could not find any member to link` warn logs.
For example:
https://github.com/apache/incubator-pekko/blob/4ce1095b4b48f5cdd31342ab9f0950bd44a2829a/actor/src/main/scala/org/apache/pekko/dispatch/Dispatchers.scala#L326

Unless specified by `-private` option, scaladoc generate only public and protected types and members.
https://github.com/scala/scala/blob/93d6281876ae53d7eb0d1f1e8369437f0a260015/src/scaladoc/scala/tools/nsc/doc/Settings.scala#L241-L244

@pjfanning 
Which solution do you think is better:
1. Add `-private` option to generate scaladoc of private types and members.
2. Disable links by removing square brackets (e.g. `[[pekko.dispatch.BalancingDispatcher]]` to `pekko.dispatch.BalancingDispatcher`).
3. Ignore warn log. Those links work well in Intellij IDEA. Developers can jump to private members and types under coding.
4. Something else.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gCUE6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gCVbb,pekko,1611224795,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-28T11:21:50Z,2023-06-28T11:21:50Z,"> I've found links which refer to a private type or member. Those links cause `Could not find any member to link` warn logs. For example:
> 
> https://github.com/apache/incubator-pekko/blob/4ce1095b4b48f5cdd31342ab9f0950bd44a2829a/actor/src/main/scala/org/apache/pekko/dispatch/Dispatchers.scala#L326
> 
> Unless specified by `-private` option, scaladoc generate only public and protected types and members. https://github.com/scala/scala/blob/93d6281876ae53d7eb0d1f1e8369437f0a260015/src/scaladoc/scala/tools/nsc/doc/Settings.scala#L241-L244
> 
> @pjfanning Which solution do you think is better:
> 
> 1. Add `-private` option to generate scaladoc of private types and members.
> 2. Disable links by removing square brackets (e.g. `[[pekko.dispatch.BalancingDispatcher]]` to `pekko.dispatch.BalancingDispatcher`).
> 3. Ignore warn log. Those links work well in Intellij IDEA. Developers can jump to private members and types under coding.
> 4. Something else.

`3. Ignore warn log` seems best for now","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gCVbb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gIHBH,pekko,1612738631,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-06-29T09:51:53Z,2023-06-29T09:51:53Z,"Links for java external library also cause `Could not find any member to link` warn logs.
For example.: https://github.com/apache/incubator-pekko/blob/4ce1095b4b48f5cdd31342ab9f0950bd44a2829a/slf4j/src/main/scala/org/apache/pekko/event/slf4j/Slf4jLogger.scala#L200

Similar problem was reported in  [stackoverflow](https://stackoverflow.com/questions/57591379/scaladoc-could-not-find-any-member-to-link-for-external-java-library).
Probably, scaladoc can not generate links for java external library.

@pjfanning 
Which solution do you think is better?:
1. Ignore warn logs. Those links work well in Intellij IDEA.
2. Use URL links (e.g. rewrite `[[org.slf4j.Marker]]` to `[[https://javadoc.io/static/org.slf4j/slf4j-api/1.7.36/org/slf4j/Marker.html org.slf4j.Marker]]`).
    - It can generate valid links in scaladoc, but developers can't jump to library sources in Intellij IDEA.
    - I think It has worse maintainability because of URL links contain library version.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gIHBH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gIJyh,pekko,1612749985,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-29T09:57:27Z,2023-06-29T09:57:27Z,"@ydash Don't do 2.

Just do best effort to fix whatever scaladoc warnings are easily fixed.

I think there is a way to get the external links to slf4j to work. I've done it before but I don't have time today.

Here is an example from another project I work on.

https://github.com/FasterXML/jackson-module-scala/blob/2.16/build.sbt#L19-L36","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gIJyh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gki3C,pekko,1620192706,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-07-04T12:50:02Z,2023-07-04T12:50:02Z,"I tried to add settings to `Doc.scala` like following, but `(Compile / fullClasspath).value` can not get subproject's jar paths in unidoc task.

https://github.com/apache/incubator-pekko/blob/88bf6329f193eedd45091f4f9a515943bd8ecb23/project/Doc.scala#L159

```diff
       Seq(
         ScalaUnidoc / unidocProjectFilter := unidocRootProjectFilter(unidocRootIgnoreProjects.value),
         JavaUnidoc / unidocProjectFilter := unidocRootProjectFilter(unidocRootIgnoreProjects.value),
-        ScalaUnidoc / apiMappings := (Compile / doc / apiMappings).value) ++
+        ScalaUnidoc / apiMappings := (Compile / doc / apiMappings).value,
+        ScalaUnidoc / apiMappings ++= {
+          def mappingsFor(organization: String, names: List[String], location: String, revision: (String) => String = identity): Seq[(File, URL)] =
+            for {
+              entry: Attributed[File] <- (Compile / fullClasspath).value
+              _ = println(s""entry: ${entry}"")
+              module: ModuleID <- entry.get(moduleID.key)
+              if module.organization == organization
+              if names.exists(module.name.startsWith)
+            } yield entry.data -> url(location.format(revision(module.revision)))
+
+          val mappings: Seq[(File, URL)] =
+            mappingsFor(""org.slf4j"", List(""slf4j-api""), ""https://javadoc.io/doc/org.slf4j/slf4j-api/%s/"")
+          mappings.toMap
+        }
+      ) ++
       UnidocRoot.CliOptions.genjavadocEnabled
```

@pjfanning 
Would you suggest any solutions?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gki3C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gklMP,pekko,1620202255,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-04T12:56:13Z,2023-07-04T12:56:13Z,"@ydash I'm busy with release stuff so can't help much here.

I would have thought that Scala would handle api mappings for the various submodules of Pekko and that the only projects that we need to help Scala with are providing javadoc links for 3rd party libs like slf4j-api.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gklMP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5glWAI,pekko,1620402184,353,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-04T14:55:30Z,2023-07-04T14:55:30Z,"@ydash if you feel like it would be easier to start with more straightforward issues, maybe you could start with the doc issues where the Pekko class can't be found (because the doc reference doesn't include enough of the package name)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5glWAI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/353,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hDjPp,pekko,1628320745,353,NA,ydash,52343777,Naoki Yamada,,NA,2023-07-10T06:28:39Z,2023-07-10T06:28:39Z,"I submitted a PR(#477) which solves following problem:

https://github.com/apache/incubator-pekko/issues/353#issuecomment-1612738631

@pjfanning 
Could you see my PR?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hDjPp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/357,https://api.github.com/repos/apache/pekko/issues/357,pekko,1728988800,357,rework link validation CI job,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-27T22:37:46Z,2023-06-27T08:12:20Z,"* Fails very often when using curl to install coursier.
* possibly a rate limiter on git.io
* there is https://github.com/coursier/setup-action
* and this can work with https://github.com/coursier/cache-action
* so that we might be able to have the CI job avoid always downloading coursier on every run","{""url"": ""https://api.github.com/repos/apache/pekko/issues/357/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/362,pekko,1730965751,362,possible need to include scala-java8-compat in LICENSE/NOTICE,pjfanning,11783444,PJ Fanning,,CLOSED,2023-05-29T15:47:04Z,2023-06-19T23:10:50Z,"Some recent refactors have seen us make scala-java8-compat a dependency for Scala 2.12 only.

We need to analyse whether any code was copied into Pekko from scala-java8-compat and update our LICENSE and NOTICE files accordingly.

* https://github.com/apache/incubator-pekko/blob/main/LICENSE
* https://github.com/apache/incubator-pekko/blob/main/NOTICE

@mdedetrich could you confirm if this is needed - I can do a PR if one is needed

It is possible that we need to update other LICENSE/NOTICE files due to similar refactors in other pekko repos too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/362/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5da1we,pekko,1567317022,362,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-29T16:11:57Z,2023-05-29T16:11:57Z,I'll check this properly tomorrow ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5da1we/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfZB-,pekko,1568510078,362,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-30T14:12:32Z,2023-05-30T14:12:32Z,@mdedetrich will you time to do this today? This is an important item to get squared off.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfZB-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfZRP,pekko,1568511055,362,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-30T14:13:10Z,2023-05-30T14:13:10Z,"Yes I will do it tonight, have a meeting soon.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dfZRP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dgAUz,pekko,1568671027,362,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-05-30T15:47:00Z,2023-05-30T15:47:00Z,"Okay so I had a proper look into this including other converter functions which are not explicitly mentioned in this issue (I think its useful to tackle this properly at once)

* `FutureConverters`: This shouldn't require any adjustment to `LICENSE`/`NOTICE`/headers because there is no copied code, its just a wrapper that forwards function calls to the actual implementation which is a standard jar dependency
* `OptionConverters`: This is the same as `FutureConverters` but there is one ""technically"" correct exception which is https://github.com/apache/incubator-pekko/blob/898c69701b7783e6da9e69321ca345ea98ddc86b/actor/src/main/scala-2.12/org/apache/pekko/util/OptionConverters.scala#L28-L37. The reason why I state this is ""technically"" correct is that while its true that the code is the same (not exactly lexically but the compiled meaning of the code is the same) its basically impossible to come up with an alternative implementation since its so trivial (to drive this point further, this is about as trivial as asking someone how to add two numbers, 99% of people would write it as `a + b`). IANAL statement here, I am not going to make a call whether we should make a legal memorandum of this, I just want to be clear about how benign/trivial the code is.
* `FunctionConverters`: Same as `FutureConverters`, its just forwarder functions, i.e. no copying of code.
* `ccompat` ergo collection compat: This is the one area where code was literally copied from `scala-collections-compat`. I guess that due to this we should should also copy the header over (i.e. https://github.com/scala/scala-collection-compat/blob/main/compat/src/main/scala-2.11_2.12/scala/collection/compat/BuildFrom.scala#L1-L11) and mention it in `LICENSE`/`NOTICE`.

@pjfanning Let me know if this answers your questions","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dgAUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dgi8p,pekko,1568812841,362,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-30T17:31:26Z,2023-05-30T17:31:26Z,thanks @mdedetrich - I think we can close this and not make any changes to the licenses,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dgi8p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5diWXj,pekko,1569285603,362,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-05-30T23:47:07Z,2023-05-30T23:47:07Z,Given code was copied from a ALv2 licensed 3rd party and it has a NOTICE file that would impact our LICENSE and NOTICE file. I think that doing nothing is not the right choice here.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5diWXj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5digjr,pekko,1569327339,362,NA,pjfanning,11783444,PJ Fanning,,NA,2023-05-31T00:42:20Z,2023-05-31T00:42:20Z,"@justinmclean in the end no code was copied from the scala-java8-compat library - the Pekko code was refactored to not need that scala-java8-compat library but that did not involve taking any code from that library

I see that @mdedetrich mentions a different library (scala-collections-compat). We have already updated our LICENSE/NOTICE to acknowledge that we copied some of the code from that library. - that was done as part of https://github.com/apache/incubator-pekko/issues/225","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5digjr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dio-v,pekko,1569361839,362,NA,justinmclean,144504,Justin Mclean,justin@classsoftware.com,NA,2023-05-31T01:34:21Z,2023-05-31T01:34:21Z,"""ergo collection compat: This is the one area where code was literally copied from scala-collections-compat"" I assume that was fixed in 255 I took a look and it looks OK. What might be good to mention is the file that contains the code in LICENSE.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5dio-v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/362,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5duGbp,pekko,1572366057,362,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-01T16:28:46Z,2023-06-01T16:28:46Z,Shall this be closed?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5duGbp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/373,https://api.github.com/repos/apache/pekko/issues/373,pekko,1745766081,373,AsyncDnsResolver: track ids to avoid collisions,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-07T12:15:25Z,2023-06-16T22:15:38Z,"* When we generate IDs, we should keep track of them.
* When we know that an ID is no longer in use, we can remove them from the tracked set
  * this is important because the IDs are short, so holding them indefinitely in the tracked set is problematic ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/373/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/373,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4eZ,pekko,1595377561,373,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:15:38Z,2023-06-16T22:15:38Z,basically solved by #371 and #385,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4eZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/376,pekko,1747939841,376,sbt-dependency-submission is submitting wrong versions of libraries,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-06-08T13:51:51Z,2023-06-13T02:54:22Z,"Seems like sbt-dependency-submission is submitting the wrong versions of libraries to github, see upstream issue at https://github.com/scalacenter/sbt-dependency-submission/issues/109
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/376/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emMdN,pekko,1587070797,376,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-12T10:43:47Z,2023-06-12T10:43:47Z,"@pjfanning So scala-center figured out why this is happening, its because its reporting dependencies from sbt plugins as well, not just the run/compile time, see https://github.com/scalacenter/sbt-dependency-submission/issues/109#issuecomment-1586974291.

How should we configure this, i.e. should we be filtering out any sbt plugins on the premise that users of Pekko are not actually going to touch this code because its build related or should we report all potential security issues?

Regardless we should solve this by adding `libraryDependency += ""com.fasterxml.jackson.core:jackson-databind:2.14.3""` to `project/plugins.sbt`. Ill make a PR now","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emMdN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emOTz,pekko,1587078387,376,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-12T10:48:42Z,2023-06-12T10:48:42Z,"It's possible that some of the sbt plugins may not work after being forced to use a newer Jackson version.
It might still be useful to find which ones break because we could see about upgrading that plugin or adding an issue for that plugin to upgrade its Jackson version.

In the end of the day, it is probably better for us if we only post up the lib dependencies and not worry so much about the sbt plugins that we use.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emOTz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emO4V,pekko,1587080725,376,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-12T10:50:34Z,2023-06-12T10:50:34Z,"> It's possible that some of the sbt plugins may not work after being forced to use a newer Jackson version.

I am creating a PR so lets see if this is an actual problem.

> In the end of the day, it is probably better for us if we only post up the lib dependencies and not worry so much about the sbt plugins that we use.

After thinking about this a bit more, it may still be problematic. i.e. people do run the builds locally on the machine and it is run in CI, so theoretically speaking security issues can still be abused.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emO4V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emZZX,pekko,1587123799,376,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-12T11:18:02Z,2023-06-12T11:18:02Z,Is there any way to get a dependency tree for all of the sbt plugins? Equivalent of `sbt dependencyTree` which list the analyses the compile/runtime/test dependency graph.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emZZX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/376,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emeox,pekko,1587145265,376,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-12T11:30:30Z,2023-06-12T11:30:30Z,"> Is there any way to get a dependency tree for all of the sbt plugins? Equivalent of `sbt dependencyTree` which list the analyses the compile/runtime/test dependency graph.

Apparently no, so it seems we have to solve this issue properly https://github.com/scalacenter/sbt-dependency-submission/issues/109#issuecomment-1587136131","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5emeox/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/377,https://api.github.com/repos/apache/pekko/issues/377,pekko,1749014438,377,Remove asyncCleanupCounter  in GraphStage,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-06-09T02:55:35Z,2023-06-17T09:22:41Z,"Use a CCHS for cleanup not a counter on every 256.

@jrudolph Can you resubmit your pr here?
refs： https://github.com/akka/akka/issues/29557

Previous PR in Akka https://github.com/akka/akka/pull/29636

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/377/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/383,https://api.github.com/repos/apache/pekko/issues/383,pekko,1752240792,383,AsyncDnsResolver: examine if its state can be made thread safe,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-12T08:48:41Z,2023-06-16T22:15:05Z,"* this includes state in other classes that AsyncDnsResolver uses
* the state is usually accessed via an Actor - so only 1 message processed at a time
* in a recoverWith scenario (and there is one) - there can be simultaneous access to and update of the state
  * https://github.com/apache/incubator-pekko/pull/288#discussion_r1167197502 
* this code has been like this for years - but it can be improved

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/383/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/383,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4X5,pekko,1595377145,383,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:15:05Z,2023-06-16T22:15:05Z,solved by #371 and #385,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4X5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/384,https://api.github.com/repos/apache/pekko/issues/384,pekko,1752281027,384,Async DNS Resolver should not use predictable IDs in requests,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-12T09:08:14Z,2023-06-16T22:14:52Z,See https://akka.io/security/akka-async-dns-2023-31442.html,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/384/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/384,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4Qk,pekko,1595376676,384,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-16T22:14:29Z,2023-06-16T22:14:29Z,solved by #371 and #385,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fF4Qk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/387,https://api.github.com/repos/apache/pekko/issues/387,pekko,1752658469,387,Remove/replace inactive spotify docker-client test dependency,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-06-12T12:26:55Z,2023-06-12T12:26:55Z,"Pekko currently adds https://github.com/spotify/docker-client as a test dependency however this project is no longer being maintained, we should look into either replacing or removing it. See https://github.com/apache/incubator-pekko/pull/386#issuecomment-1587237908 for more details.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/387/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/411,https://api.github.com/repos/apache/pekko/issues/411,pekko,1761779773,411,Improve performance of `IdGenerator.EnhancedDoubleHashGenerator`,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-06-17T11:12:46Z,2023-06-17T11:59:22Z,"In https://github.com/apache/incubator-pekko/pull/371 `IdGenerator.EnhancedDoubleHashGenerator` was added and in order to make it thread safe we used the simple solution of adding the `synchronized` keyword (see https://github.com/apache/incubator-pekko/blob/f6930d93da4504590b37ed2c4bc35bdc30e127c3/actor/src/main/scala/org/apache/pekko/io/dns/IdGenerator.scala#L73). While this is was a practical and convenient solution at the time (largely because we don't expect much contention on `IdGenerator.EnhancedDoubleHashGenerator` along with time constraints due to needing to push out a release), as @alexandru rightly pointed out in https://github.com/apache/incubator-pekko/pull/371#issuecomment-1592917793 `synchronized` is rarely (if ever) the most optimal solution for any given concurrency problem.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/411/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/412,https://api.github.com/repos/apache/pekko/issues/412,pekko,1761781205,412,Find ACM equivalent of https://dspace.jaist.ac.jp/dspace/bitstream/10119/4784/1/IS-RR-2004-010.pdf,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-06-17T11:18:39Z,2023-06-19T15:11:11Z,"When fixing the issues with link validator in https://github.com/apache/incubator-pekko/pull/392 there was links to a few papers in the docs which I ended up needing to fix. Originally in Akka these papers were hosted on Akka's CDN but as pointed out by @pjfanning , @RyanSkraba and @Claudenw we should directly link to the papers on ACM. While this was possible in one case (see https://github.com/apache/incubator-pekko/blob/8e60ef5c6d42c1cd25ad1a3e33bff22e2c9506d1/docs/src/main/paradox/general/remoting.md#L16 for another paper https://dspace.jaist.ac.jp/dspace/bitstream/10119/4784/1/IS-RR-2004-010.pdf I was unable to find the link of ACM (even when searching for its DOI).

It would be nice if possible to find this paper on ACM because it has failed to resolve once as part of the link validator flow. Furthermore papers on ACM tend to be a lot more stable than on university hosted sites.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/412/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/412,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNYqR,pekko,1597344401,412,NA,RyanSkraba,7744819,Ryan Skraba,,NA,2023-06-19T15:02:26Z,2023-06-19T15:02:26Z,"Hey @mdedetrich thanks for reaching out!  This isn't an ACM paper, and the [DOI](https://doi.org/10.1109/RELDIS.2004.1353004) points to an IEEE pay-site for the paper (published in an IEEE journal) :shrug:   I think as a JAIST paper, it's appropriate to link to the free copy they've graciously provided!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNYqR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/412,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNcVr,pekko,1597359467,412,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-19T15:10:51Z,2023-06-19T15:10:51Z,"Thanks for clarifying this! The only somewhat annoying issue is that resolving the links sometimes times out causing the link validator to fail but there isn't much we can do about that since its the correct link as you stated.

Will close issue as nothing to be done here.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNcVr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/414,https://api.github.com/repos/apache/pekko/issues/414,pekko,1761805287,414,Add/enable scalafix in pekko,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-06-17T12:20:58Z,2023-07-19T16:29:58Z,"It would be ideal to have [scalafix](https://scalacenter.github.io/scalafix/) along with its addons such as [organize-imports](https://github.com/liancheng/scalafix-organize-imports) to automatically

* Remove unused imports
* Organize imports to avoid unnecessary nesting, FQCN usages etc etc
* Sort imports

And many other rules, some of which already exist here https://github.com/apache/incubator-pekko/blob/f84e8db3cbdbc05743cb06a2d4264d1a7ce01b96/.scalafix.conf . Although historically people have used Intellij to sort/clean imports, this is not ideal for many reasons i.e. it ties Pekko to a specific IDE, Intellij isn't always correct due to the same reasons why it also reports uncompilable code incorrectly and most critically we can't use it in github actions CI to enforce the rules are consistently applied and don't rot over time.

It would have been great to have already done this, particularly soon after we integrated scalafix some time ago however there are some features of Pekko's codebase which would cause issues if we enable scalafix. The first one is that in order to avoid excessive boilerplate due to adding `org.apache` to our root package, in Scala source files we have a ""root"" import, i.e.

```scala
import org.apache.pekko
```

So that any future references to code within Pekko packages just needs `pekko.<something>` which is the same as how the code was in Akka and the other one is our complicated usage of [paradox](https://developer.lightbend.com/docs/paradox/current/) directives which when combined with the first problem of root imports makes things even more complicated (i.e. some source files such as https://github.com/apache/incubator-pekko-http/blob/fb224dfba74d03d88866d5c40d63ebd9729cdded/docs/src/test/scala/docs/http/scaladsl/HttpServerExampleSpec.scala have the same `import org.apache.pekko` multiple times but thats because the additional cases of that import is going to be within generated documentation otherwise when people copy code from the docs they will miss an import).

I created issues upstream documenting these cases

* https://github.com/scalacenter/scalafix/issues/1792
* https://github.com/liancheng/scalafix-organize-imports/issues/312
* https://github.com/scalacenter/scalafix/issues/1793","{""url"": ""https://api.github.com/repos/apache/pekko/issues/414/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/414,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fHOua,pekko,1595730842,414,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-17T12:24:24Z,2023-06-17T12:24:24Z,@He-Pin Pinging you because you were asking about this.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fHOua/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/414,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5h5Q6w,pekko,1642401456,414,NA,bjaglin,349077,Brice Jaglin,,NA,2023-07-19T16:29:58Z,2023-07-19T16:29:58Z,"FTR, https://github.com/liancheng/scalafix-organize-imports/issues/312 was transferred to https://github.com/scalacenter/scalafix/issues/1829","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5h5Q6w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/417,pekko,1763637922,417,Avoid usage of `sun.misc.Unsafe`,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2023-06-19T14:11:06Z,2023-09-25T02:51:59Z,"We currently still use `sun.misc.Unsafe` in a number of places. As long-term these interfaces are supposed to go away, it would be nice to try and stop using them.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/417/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNNR7,pekko,1597297787,417,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-19T14:32:30Z,2023-06-19T14:32:30Z,"The bright side is that lots of code is still using this class. Even the Scala runtime - eg https://github.com/scala/scala/blob/2.13.x/src/library/scala/runtime/Statics.java

I'm no expert on migrating away from using `sun.misc.Unsafe` but `MethodHandle`s and `VarHandle`s might be an easy enough solution for some of the use cases.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNNR7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNmp4,pekko,1597401720,417,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-06-19T15:41:18Z,2023-06-19T15:41:18Z,"Some libraries start to using *Handler from    
 Jvm 11","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNmp4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kRmej,pekko,1682335651,417,NA,SirYwell,11150076,Hannes Greule,,NA,2023-08-17T13:56:52Z,2023-08-17T13:56:52Z,"`VarHandle` could replace the usage of `Unsafe` pretty much 1:1. However, `VarHandle` is Java 9+.

Looking at the usages, I'm wondering if much of it can be replaced by using `AtomicReference` instead. For example, consider https://github.com/apache/incubator-pekko/blob/3775a18c2eec1abd46355b656109f282d4115b40/actor/src/main/scala/org/apache/pekko/actor/RepointableActorRef.scala#L62-L80:

To me, the tailrec methods look like overly complicated `getAndSet(...)` implementations, and `underlying` and `lookup` are just `get()`s.
`Unsafe#getAndSetObject` was only added in Java 8, so I assume that's the reason it isn't used, but I'm not sure why the code doesn't make use of `AtomicReference`. Am I missing something?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kRmej/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kSn1s,pekko,1682603372,417,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-17T16:31:11Z,2023-08-17T16:31:11Z,"There is a lot of reluctance to drop Java 8 support. I would favour dropping it because it forces us to support some code usages that are now being discouraged.

One option would to make some pekko jars `Multi-Release: true` so that we can ship variants of classes that can be used with newer Java Runtimes. The basic classes would support Java 8 but we could have override versions of some classes that work with Java 11+. Those override classes could use features like VarHandles.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kSn1s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nSMpi,pekko,1732823650,417,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-25T02:49:53Z,2023-09-25T02:49:53Z,"refs: https://youtrack.jetbrains.com/issue/IDEA-164460/JDK9-Multi-release-JAR-problem-one-type-shown-many-times
refs:https://youtrack.jetbrains.com/issue/IDEA-255308/Maven-import-additional-compile-source-roots-with-multiReleaseOutput-option-as-separate-modules

@raboof @mdedetrich ping~ ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nSMpi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/418,https://api.github.com/repos/apache/pekko/issues/418,pekko,1763715233,418,acknowledge use of Aeron code in Pekko,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-19T14:57:37Z,2023-06-20T11:23:58Z,"See https://lists.apache.org/thread/mo611z4dpro1373r4f5pbgtlyjmhhtz9

These files:
* ./remote/src/test/java/org/apache/pekko/remote/artery/aeron/AeronStat.java
* ./remote/src/test/java/org/apache/pekko/remote/artery/RateReporter.java
* ./remote/src/main/java/org/apache/pekko/remote/artery/aeron/AeronErrorLog.java

possibly come from https://github.com/real-logic/aeron","{""url"": ""https://api.github.com/repos/apache/pekko/issues/418/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/418,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fN7cx,pekko,1597486897,418,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-06-19T16:53:14Z,2023-06-19T16:53:14Z,So aeron is not beening used as a lib？,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fN7cx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/418,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fOAcJ,pekko,1597507337,418,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-19T17:10:14Z,2023-06-19T17:10:14Z,"If you look at the 3 files in the description - they have `Copyright 2014-2017 Real Logic Ltd.`

This is what is getting us in trouble. We need to find out where these files came from and account for them in our LICENSE and NOTICE files.

Presumably, Lightbend copied these files to avoid having a jar depedendency.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fOAcJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/418,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fOBP9,pekko,1597510653,418,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-19T17:13:14Z,2023-06-19T17:13:14Z,AeronStat comes from https://github.com/real-logic/aeron/tree/7d9cb5abd3d5d723158a4c6b9b1a9a8d2caec301/aeron-samples - so maybe aeron-samples is not a jar that Lightbend wanted to have to link to. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fOBP9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/418,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSJ9D,pekko,1598594883,418,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:23:57Z,2023-06-20T11:23:57Z,#422 is merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSJ9D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/419,https://api.github.com/repos/apache/pekko/issues/419,pekko,1763776212,419,acknowledge use of cowtowncoder code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-19T15:32:21Z,2023-06-19T23:10:50Z,"See https://lists.apache.org/thread/mo611z4dpro1373r4f5pbgtlyjmhhtz9

These files:
* actor/src/main/scala/org/apache/pekko/util/UUIDComparator.scala

from https://github.com/cowtowncoder/java-uuid-generator","{""url"": ""https://api.github.com/repos/apache/pekko/issues/419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/419,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNnI4,pekko,1597403704,419,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-19T15:42:57Z,2023-06-19T15:42:57Z,"The code in https://github.com/cowtowncoder/java-uuid-generator does not have any Copyright claim in its LICENSE.
* https://github.com/cowtowncoder/java-uuid-generator/blob/master/LICENSE
* https://github.com/cowtowncoder/java-uuid-generator/blob/master/src/main/resources/META-INF/LICENSE

There is no NOTICE in the root of the folder but there is this file that is built into the jar
* https://github.com/cowtowncoder/java-uuid-generator/blob/master/src/main/resources/META-INF/NOTICE","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fNnI4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/419,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fN7KV,pekko,1597485717,419,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-19T16:51:49Z,2023-06-19T16:51:49Z,#420 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fN7KV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/425,https://api.github.com/repos/apache/pekko/issues/425,pekko,1764177953,425,acknowledge licensing issues in AbstractBoundedNodeQueue,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-19T20:21:33Z,2023-06-20T11:02:55Z,https://github.com/apache/incubator-pekko/blob/532b7173c175c0c379074cb022e98f5002860c22/actor/src/main/java/org/apache/pekko/dispatch/AbstractBoundedNodeQueue.java#L18-L27,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/425/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/425,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fRTTS,pekko,1598371026,425,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-06-20T08:48:05Z,2023-06-20T08:48:05Z,"I think the comment is pretty accurate, it's definitely not a direct code copy but one can see how the algorithms in some methods are very similar.

Personally, I'd say, it's fine as it is, but to avoid any controversy, lets' add a section to LICENSE which says

```
pekko-actor contains code in `org.apache.pekko.dispatch.AbstractBoundedNodeQueue.java` which was based on code from actors <https://github.com/plokhotnyuk/actors> which was released under the Apache 2.0 license, and
code from https://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue which
was released under the Simplified BSD license.
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fRTTS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/425,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fR3u8,pekko,1598520252,425,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-20T10:30:03Z,2023-06-20T10:30:03Z,This seems reasonable to me @justinmclean wdyt ?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fR3u8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/426,pekko,1764180137,426,acknowledge licensing issues in AbstractNodeQueue,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-19T20:23:48Z,2023-06-21T08:40:52Z,https://github.com/apache/incubator-pekko/blob/532b7173c175c0c379074cb022e98f5002860c22/actor/src/main/java/org/apache/pekko/dispatch/AbstractNodeQueue.java#L21-L26,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/426/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSJuM,pekko,1598593932,426,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:23:07Z,2023-06-20T11:23:07Z,@jrudolph @mdedetrich  could the text in https://github.com/apache/incubator-pekko/pull/433 be adapted to include this too? AbstractNodeQueue does not have any inspiration from Andriy Plokhotnyuk's code but it is inspired by the MPSC code.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSJuM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSKo_,pekko,1598597695,426,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-20T11:26:14Z,2023-06-20T11:26:14Z,"> @jrudolph @mdedetrich could the text in #433 be adapted to include this too? AbstractNodeQueue does not have any inspiration from Andriy Plokhotnyuk's code but it is inspired by the MPSC code.

So I just had a look at the referenced code at https://www.1024cores.net/home/lock-free-algorithms/queues/non-intrusive-mpsc-node-based-queue and this does look like its a similar case, i.e. the code is in a different language (C) and is minimal compared to `AbstractNodeQueue`.

So yes from me","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSKo_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSPNj,pekko,1598616419,426,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-20T11:41:33Z,2023-06-20T11:41:33Z,"Closing as completed via https://github.com/apache/incubator-pekko/pull/433, will re-open if more needs to be done.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSPNj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSPpR,pekko,1598618193,426,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:42:58Z,2023-06-20T11:42:58Z,@mdedetrich I think it is better if we modify the text from #433 to also mention 'AbstractNodeQueue.java'.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSPpR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSSRl,pekko,1598628965,426,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:51:40Z,2023-06-20T11:51:40Z,I'm just reopening this while there is some debate on whether we need some changes to our LICENSE to explicitly mention both AbstractNodeQueue and AbstractBoundedNodeQueue,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSSRl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/426,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZKdN,pekko,1600431949,426,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-21T08:40:49Z,2023-06-21T08:40:49Z,#434 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZKdN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/428,https://api.github.com/repos/apache/pekko/issues/428,pekko,1764187466,428,examine potential copy of scala-library code,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-19T20:32:16Z,2023-06-22T09:11:51Z,https://github.com/apache/incubator-pekko/blob/532b7173c175c0c379074cb022e98f5002860c22/actor/src/main/scala/org/apache/pekko/util/Helpers.scala#L117-L130,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/428/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/428,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSO3F,pekko,1598614981,428,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-20T11:40:20Z,2023-06-20T11:40:20Z,"So this is the original code https://github.com/scala/scala/blob/0842f23f6017f93160b115b8bf29ec5347cdbe94/src/library/scala/Predef.scala#L356-L361. Its the same case as me adding `Iterable.single`, i.e. https://github.com/apache/incubator-pekko/blob/d1a94323f5e968196edcadef1937010cb68a7219/actor/src/main/scala-2.12/org/apache/pekko/util/ccompat/package.scala#L80-L102

tl;dr The code is almost the same as the original code with some necessary modifications.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSO3F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/428,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgQNk,pekko,1602290532,428,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-22T09:11:51Z,2023-06-22T09:11:51Z,#436 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgQNk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/430,https://api.github.com/repos/apache/pekko/issues/430,pekko,1764870729,430,Allow building on jdk19,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2023-06-20T08:02:00Z,2023-07-03T19:13:05Z,"Building on jdk19 currently fails because of a newly added deprecation in `sun.misc.Unsafe`:

```
[error] actor/src/main/scala/org/apache/pekko/actor/LightArrayRevolverScheduler.scala:350:41: method objectFieldOffset in class Unsafe is deprecated
[error]   private[this] val taskOffset = unsafe.objectFieldOffset(classOf[TaskHolder].getDeclaredField(""task""))
```

Perhaps we can exclude this warning (until #417 is in place), though for some reason `-Wconf:msg=method objectFieldOffset in class Unsafe is deprecated:silent` didn't seem to be sufficient.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/430/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/430,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fwfS4,pekko,1606546616,430,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-06-26T03:45:18Z,2023-06-26T03:45:18Z,"Maybe just need to add a `@nowarn(""msg=deprecated"")`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fwfS4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/430,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f0xk2,pekko,1607670070,430,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2023-06-26T15:01:11Z,2023-06-26T15:01:11Z,Nice!,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f0xk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/430,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ggGs5,pekko,1619028793,430,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-03T19:13:04Z,2023-07-03T19:13:04Z,"So, after #467 it appears you can compile and test Pekko with JDK 20.

Paradox plugin - for building reference docs - fails with

```
[error] java.lang.RuntimeException: Error creating extended parser class: Could not determine whether class 'org.pegdown.ParserWithDirectives$$parboiled' has already been loaded
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:58)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
[error] 	at com.lightbend.paradox.sbt.ParadoxPlugin$.$anonfun$baseParadoxSettings$2(ParadoxPlugin.scala:83)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:68)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:282)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)
[error] 	at sbt.Execute.work(Execute.scala:291)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:282)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:64)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
[error] 	at java.base/java.lang.Thread.run(Thread.java:1623)
[error] Caused by: java.lang.RuntimeException: Could not determine whether class 'org.pegdown.ParserWithDirectives$$parboiled' has already been loaded
[error] 	at org.parboiled.transform.AsmUtils.findLoadedClass(AsmUtils.java:217)
[error] 	at org.parboiled.transform.ParserTransformer.transformParser(ParserTransformer.java:35)
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:54)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
[error] 	at com.lightbend.paradox.sbt.ParadoxPlugin$.$anonfun$baseParadoxSettings$2(ParadoxPlugin.scala:83)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:62)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:68)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:282)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:23)
[error] 	at sbt.Execute.work(Execute.scala:291)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:282)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:64)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:577)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
[error] 	at java.base/java.lang.Thread.run(Thread.java:1623)
[error] Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.findLoadedClass(java.lang.String) accessible: module java.base does not ""opens java.lang"" to unnamed module @6ae027fd
[error] 	at java.base/java.lang.reflect.AccessibleObject.throwInaccessibleObjectException(AccessibleObject.java:387)
[error] 	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:363)
[error] 	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:311)
[error] 	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:201)
[error] 	at java.base/java.lang.reflect.Method.setAccessible(Method.java:195)
[error] 	at org.parboiled.transform.AsmUtils.findLoadedClass(AsmUtils.java:210)
[error] 	at org.parboiled.transform.ParserTransformer.transformParser(ParserTransformer.java:35)
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:54)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ggGs5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/431,https://api.github.com/repos/apache/pekko/issues/431,pekko,1764979959,431,acknowledge licensing issue in PrettyByteString,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-20T09:08:46Z,2023-06-20T11:17:08Z,"https://github.com/apache/incubator-pekko/blob/60279703a49d0a678de44b3cf14f4904eff9def3/actor/src/main/scala/org/apache/pekko/util/PrettyByteString.scala#L17-L18

Any code comment that has the words 'based on' in it is currently acting as release blocker. The Incubator PMC will not let us do any releases until we account for everything.

@jrudolph would you be able to provide some background on this code and what you would like us to document in the Pekko related license?

The code is not widely used. Not used anyway in this repo and I only found 1 usage in some test code in pekko-http-core.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/431/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/431,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSA_d,pekko,1598558173,431,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T10:57:41Z,2023-06-20T10:57:41Z,see https://github.com/apache/incubator-pekko/pull/427 and https://github.com/apache/incubator-pekko-http/pull/191,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSA_d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/431,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSH9l,pekko,1598586725,431,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:17:07Z,2023-06-20T11:17:07Z,Code was removed in #427 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSH9l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/432,https://api.github.com/repos/apache/pekko/issues/432,pekko,1765070958,432,acknowledge use of riak code in ORSet,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-20T10:03:20Z,2023-06-21T11:22:04Z,"https://github.com/apache/incubator-pekko/blob/60279703a49d0a678de44b3cf14f4904eff9def3/distributed-data/src/main/scala/org/apache/pekko/cluster/ddata/ORSet.scala#L277-L283

May need to also check the INRIA hosted PDFs.

Need to look at license implications of https://github.com/basho/riak_dt/blob/develop/src/riak_dt_orswot.erl","{""url"": ""https://api.github.com/repos/apache/pekko/issues/432/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/432,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSQmi,pekko,1598622114,432,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-20T11:46:10Z,2023-06-20T11:46:10Z,"> Need to look at license implications of https://github.com/basho/riak_dt/blob/develop/src/riak_dt_orswot.erl

Codebase is under Apache 2, see https://github.com/basho/riak_dt/blob/develop/LICENSE

> May need to also check the INRIA hosted PDFs.

Not sure if its relevant, but we shouldn't be hosting PDF's (but referring to them via link is fine).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSQmi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/432,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSRyT,pekko,1598626963,432,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-20T11:50:08Z,2023-06-20T11:50:08Z,"even if the code is ASL, we still probably update the Pekko LICENSE and NOTICE to mention the Riak code","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fSRyT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/432,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZGqv,pekko,1600416431,432,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-21T08:30:44Z,2023-06-21T08:30:44Z,#435 and #440 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZGqv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/437,https://api.github.com/repos/apache/pekko/issues/437,pekko,1767173698,437,acknowledge hash-prospector use in FrequencySketch (public domain),pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-21T09:27:23Z,2023-06-21T11:20:27Z,"* https://github.com/skeeto/hash-prospector
* https://github.com/skeeto/hash-prospector/blob/master/UNLICENSE

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/437/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/437,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5faAuN,pekko,1600654221,437,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-21T11:20:26Z,2023-06-21T11:20:26Z,#438 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5faAuN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/439,pekko,1767212511,439,examine whether there is any Ben Manes' code in FrequencySketch,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-21T09:49:51Z,2023-06-27T08:11:44Z,"https://lists.apache.org/thread/mo611z4dpro1373r4f5pbgtlyjmhhtz9 lists FrequencySketch twice. One relates to #438 

The other case is probably down to https://github.com/apache/incubator-pekko/blob/bd1af56fcead435cb3d730e759223dcb2b0fb4c6/actor/src/main/scala/org/apache/pekko/util/FrequencySketch.scala#L255-L256
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/439/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZkGx,pekko,1600537009,439,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-21T09:51:40Z,2023-06-21T09:51:40Z,"@raboof @jrudolph I think the code is just inspired by Caffeine as opposed to any code being based directly on code lifted from Caffeine. If there is just inspiration, I expect that we don't need to mention it in the Pekko license.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fZkGx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5faeQd,pekko,1600775197,439,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-21T12:49:23Z,2023-06-21T12:49:23Z,"@mdedetrich would you be able to take a look? So far, it looks like this link is in the code purely to acknowledge inspiration from the Caffeine project as opposed to any code being copied directly.

In the end of the day, there is no harm in putting something in our license anyway - if there is any doubt.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5faeQd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fer_7,pekko,1601880059,439,NA,ben-manes,378614,Ben Manes,ben.manes@gmail.com,NA,2023-06-22T01:10:02Z,2023-06-22T01:10:02Z,"It is based on an [older version](https://github.com/ben-manes/caffeine/blob/a6be555f0f2a44d33a9d7e52ea923622e373ac7f/caffeine/src/main/java/com/github/benmanes/caffeine/cache/FrequencySketch.java) of Caffeine’s sketch, prior to a rewrite to be cache line optimized. It is small enough to be fair use and I am fine as is.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fer_7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ffTMb,pekko,1602040603,439,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-06-22T05:40:52Z,2023-06-22T05:40:52Z,@pjfanning Given @ben-manes Comment I think the safest option would be to include a mention in LICENSE mentioning its small enough to be considered fair use (you can even link to his comment in there),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ffTMb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgQ-g,pekko,1602293664,439,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-22T09:14:01Z,2023-06-22T09:14:01Z,"Thanks @ben-manes - I think it is better if we do acknowledge the use of code based on your Caffeine code base. I have created #446. If you see anything wrong in that PR, we will fix it. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgQ-g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/439,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f55R9,pekko,1609012349,439,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-27T08:11:43Z,2023-06-27T08:11:43Z,#446 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f55R9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/442,https://api.github.com/repos/apache/pekko/issues/442,pekko,1767559213,442,include critical TLS fix from Akka 2.6.21 (pekko-stream TLSActor),pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-21T13:02:42Z,2023-06-22T09:10:51Z,"include critical TLS fix from Akka 2.6.21 - Akka 2.6.21 is Apache licensed

* https://github.com/akka/akka/issues/29922
* https://github.com/akka/akka/compare/v2.6.20...v2.6.21","{""url"": ""https://api.github.com/repos/apache/pekko/issues/442/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/442,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgP2M,pekko,1602289036,442,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-22T09:10:50Z,2023-06-22T09:10:50Z,#443 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fgP2M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/448,https://api.github.com/repos/apache/pekko/issues/448,pekko,1769500087,448,acknowledge use of Play based scripts,pjfanning,11783444,PJ Fanning,,CLOSED,2023-06-22T11:38:07Z,2023-06-27T08:11:11Z,"https://github.com/apache/incubator-pekko/blob/966204814ecac09b9d7cc6e866fe2a71a660ab05/remote/src/test/resources/ssl/README.md?plain=1#L4

* The scripts in https://github.com/playframework/play-samples/ have no license headers.
* The code in this directory appears to be in the public domain - see https://github.com/playframework/play-samples/blob/2.8.x/LICENSE

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/448/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/448,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f55E3,pekko,1609011511,448,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-27T08:11:10Z,2023-06-27T08:11:10Z,#449 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5f55E3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/451,https://api.github.com/repos/apache/pekko/issues/451,pekko,1770871019,451,Docs: child actors automatically restarted only if they were created in setup method ??,pawelkaczor,41667,Paweł Kaczor,,OPEN,2023-06-23T06:36:22Z,2023-06-23T09:40:57Z,"https://github.com/apache/incubator-pekko/blob/ae84471e4d2ae497682d08bc3dc1b62cda2cc908/docs/src/main/paradox/typed/fault-tolerance.md?plain=1#L119

The sentence should be changed to avoid confusion:

""If child actors should remain intact (not stopped) when parent is restarted the supervise should be placed inside the setup and using SupervisorStrategy.restart().withStopChildren(false) like this:""","{""url"": ""https://api.github.com/repos/apache/pekko/issues/451/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/451,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fm1q6,pekko,1604016826,451,NA,pjfanning,11783444,PJ Fanning,,NA,2023-06-23T09:40:42Z,2023-06-23T09:40:42Z,"@pawelkaczor I'm not sure your text makes this easier to understand. I can get more people to look at this. In short term, I'm adding a comma to improve the structure of the sentence. #452 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5fm1q6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/462,https://api.github.com/repos/apache/pekko/issues/462,pekko,1783917940,462,Migrate multi-node-testkit to netty 4,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-07-01T13:36:45Z,2024-08-14T18:02:31Z,"After drop the classical remoting which depends on netty 3, I think we can migrate the multi-node-testkit to netty 4","{""url"": ""https://api.github.com/repos/apache/pekko/issues/462/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/462,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbYUw,pekko,1617790256,462,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-07-03T10:06:49Z,2023-07-03T10:06:49Z,@pjfanning When will pekko drop the classical remoting?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbYUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/462,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbm-B,pekko,1617850241,462,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-03T10:28:54Z,2023-07-03T10:28:54Z,I guess that will need to be discussed on the dev mailing list. I have no objection to removing it but we haven't yet really discussed versioning strategy and the priorities for future development.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbm-B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/462,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbnYY,pekko,1617851928,462,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-03T10:29:36Z,2023-07-03T10:29:36Z,depends on https://github.com/apache/incubator-pekko/issues/41,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5gbnYY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/462,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hjsIg,pekko,1636745760,462,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-07-15T11:54:51Z,2023-07-15T11:54:51Z,"I have a working local pr, will submit a pr tomorrow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hjsIg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/478,https://api.github.com/repos/apache/pekko/issues/478,pekko,1797242204,478,consider changes to pekko-protobuf-v3,pjfanning,11783444,PJ Fanning,,OPEN,2023-07-10T17:51:25Z,2023-10-21T11:44:42Z,"This is different to #239 - which is about pekko-protobuf as opposed to pekko-protobuf-v3.

pekko-protobuf-v3 is built by taking protobuf-java and shading it. It's wasteful because we create separate jars from Scala 2.12, 2.13 and 3 - there is no Scala code, it is just Java.

In v1.1.0, we could change our code.
* we could just use protobuf-java directly - I know some users won't be happy because they use Pekko and some other code that uses an incompatible version of protobuf-java - we could argue that this is not our concern
* we could just publish one pekko-protobuf-v3 jar that has no Scala version suffix
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/478/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/478,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYaY,pekko,1773766296,478,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:44:42Z,2023-10-21T11:44:42Z,@pjfanning Is this ticket still valid?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYaY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/483,pekko,1805046494,483,support creating ForkJoinPools with maximumPoolSize,pjfanning,11783444,PJ Fanning,,CLOSED,2023-07-14T15:12:49Z,2024-05-07T00:20:20Z,"ForkJoinPool has extra contructors in JDK9+ that allow maximumPoolSize to be set.

Relates to https://github.com/apache/incubator-pekko/discussions/482

Pekko still supports JDK8 so implementing this is not straightforward.

Options include:
* adding a new dispatcher executor type of `fork-join-executor-jdk9` which is similar to `fork-join-executor` but supports the extra `maximumPoolSize` config (the class for this could be added to jdk9+ build (we support having a scala-jdk9 source directory)
* have `fork-join-executor` support the `maximumPoolSize` but ignore it or fail if Java 8 runtime is used. We might need to use Java reflection to do this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/483/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53veNO,pekko,2008933198,483,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-20T07:19:03Z,2024-03-20T07:19:03Z,"I think it makes sense to solve this when we get multi-jar-release working so we can target jdk 9+ in a principled fashion. For this reason I think removing it from the 1.1.0-M2 milestone makes sense as I seriously doubt that we will get multi-jar-release working by then, @He-Pin @pjfanning do you agree?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53veNO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xVKI,pekko,2009420424,483,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-20T12:09:49Z,2024-03-20T12:09:49Z,"IIRC, the multi-jar-release has bad IDE support, and @Glavo once told me about that too, for me the current implementation seems good, so does netty work this way, another library like reactor-core is using the multi-jar-release mechanism. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xVKI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xkBM,pekko,2009481292,483,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-20T12:44:00Z,2024-03-20T12:44:00Z,I don't believe in dropping useful features because one implementation that can't be done is preferred over one that is ready to go.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xkBM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xrV_,pekko,2009511295,483,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-20T12:58:49Z,2024-03-20T12:58:49Z,"I am not saying that the feature should be dropped in general, just that the current implementation has a lot of unanswered questions and considering that the version with multi-jar-release would be trivial in comparison that might be preferrable.

Also since we are dealing with JDK9 specifically, we have machinery in place in Pekko to compile classes just for JDK 9

> IIRC, the multi-jar-release has bad IDE support

IDE support is low priority compared to everything else and the version with reflection is much harder to understand/read code wise.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xrV_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xw_J,pekko,2009534409,483,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-20T13:10:50Z,2024-03-20T13:10:50Z,"@mdedetrich Netty's `PlatformDependent0` is doing the same, I don't think multi-jar-release should be a blocker for this, What about android? multi-jar-release can not ensure the code will work on Android too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53xw_J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53y-jW,pekko,2009852118,483,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-20T15:30:24Z,2024-03-20T15:30:24Z,"> multi-jar-release can not ensure the code will work on Android too.

Android supports JDK 1.8+ which means it will ignore java 9 compiled classes in the multi-release-jar (its the java-9 compiled classes which will be a non standard location).

In other words it will work fine

> I don't think multi-jar-release should be a blocker for this

I am not saying that its a blocker, just that multi-jar-release may already be done before the feature is complete","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53y-jW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zIpj,pekko,2009893475,483,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-20T15:46:48Z,2024-03-20T15:46:48Z,"Some methods are missing on Android, AFAIK, we will see.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zIpj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zLX1,pekko,2009904629,483,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-20T15:51:39Z,2024-03-20T15:51:39Z,"@mdedetrich It will be contagious when user packaging shadow jars, @glavo just told me。","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zLX1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zPC-,pekko,2009919678,483,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-20T15:57:23Z,2024-03-20T15:57:23Z,"> @mdedetrich It will be contagious when user packaging shadow jars, @Glavo just told me。

I don't think this is a good reason not to use MR jars. Good shading tools support MR jars.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zPC-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zUV3,pekko,2009941367,483,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-20T16:06:20Z,2024-03-20T16:06:20Z,We already depend on jackson-core which is an MR jar.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zUV3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zpMi,pekko,2010026786,483,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-20T16:42:26Z,2024-03-20T16:42:26Z,"> > @mdedetrich It will be contagious when user packaging shadow jars, @Glavo just told me。
> 
> I don't think this is a good reason not to use MR jars. Good shading tools support MR jars.

Agreed, I don't know what the aversion to multi release jar's comes from but its well support and a lot of critical Java OS libraries use it.

The issues currently with multi release jar's are more sbt specific and this is largely a historical artifact (which is that any new functionality in later JDK's typically had their own equivalent idiomatic Scala specific solution so there wasn't much incentive to support multi-release-jars in sbt as there was very little demand for it).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53zpMi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls530MXy,pekko,2010170866,483,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-20T17:28:13Z,2024-03-20T17:28:13Z,@He-Pin I'm open to pressing to get this into 1.1. My view is that user need outweighs implementation niceties. Do you need this change?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls530MXy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/483,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls533u75,pekko,2011098873,483,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-21T02:59:12Z,2024-03-21T02:59:12Z,"@pjfanning Yes， I'm using Pekko in several of our mission-critical systems, so I would like to keep my systems safe. If we like, we can re-implement it later with multi-jar-release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls533u75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/490,https://api.github.com/repos/apache/pekko/issues/490,pekko,1806318450,490,Potential note for migration guide for slf4j,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,CLOSED,2023-07-15T20:27:50Z,2023-07-15T21:48:53Z,"First, congratulations on the 1.0.0 milestone of the core repo! I'm playing around with migrations right now. Only issue I've faced is with my logging configuration. When starting my application I get this error.

```
[error] SLF4J: No SLF4J providers were found.
[error] SLF4J: Defaulting to no-operation (NOP) logger implementation
[error] SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
[error] SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
[error] SLF4J: Ignoring binding found at [***/ch.qos.logback/logback-classic/jars/logback-classic-1.2.12.jar!/org/slf4j/impl/StaticLoggerBinder.class]
[error] SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
```

I suspect this is probably from a transitive dependency updated in the pekko-slf4j module, maybe?

**But to solve the problem updating `ch.qos.logback` to 1.3.x series worked just fine.**

Possibly worth adding a note to migration guide. Maybe it's covered by one of the transitive dependencies that's listed as upgraded in 1.0.0, but having an explicit note about this might still be helpful.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/490/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/490,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkNgG,pekko,1636882438,490,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-15T20:38:30Z,2023-07-15T20:38:30Z,"@bdoyle0182 Could you check your own dependencies? pekko-slf4j has a dependency on slf4j-api 1.7.36

see https://mvnrepository.com/artifact/org.apache.pekko/pekko-slf4j_2.13/1.0.0

https://www.slf4j.org/codes.html#ignoredBindings seems to suggest that you should only see this issue if you have slf4j-api 2.x on your runtime classpath. Without a reproducible test case, I don't know how you could have that newer version of slf4j-api on your classpath.

If someone provides a reproducible scenario, we can look into it. 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkNgG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/490,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkNwp,pekko,1636883497,490,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2023-07-15T20:46:15Z,2023-07-15T20:46:15Z,"Yea at initial glance I only see `org.slf4j:slf4j-api:1.7.36` on my classpath. I'll try to dig deeper on this and compare to pre-migration state of repo.

also to add on my testing here also includes latest snapshots of other pekko modules / repos not yet released.

edit: yes 2.x is actually on my classpath now (hadn't refreshed where i was looking), seeing if it's coming from one of the pekko snapshots","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkNwp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/490,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkPbh,pekko,1636890337,490,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2023-07-15T21:32:18Z,2023-07-15T21:32:18Z,"Okay the upgrade of `slf4j-api` is coming from my `swagger-pekko-http` snapshot from you. Apologies for opening an issue due to a snapshot, I just assumed it was from within pekko-slf4j.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hkPbh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/491,pekko,1807687410,491,Undefined behavior of PekkoPduProtobufCodec$,nicolasstucki,3648029,Nicolas Stucki,,CLOSED,2023-07-17T12:37:01Z,2024-02-05T15:08:11Z,"The Scala spec states that names in the source should not contain $. These are reserved for code generation. Using a name with a $ will have undefined behavior.

https://github.com/apache/incubator-pekko/blob/fbac70e9dd57050449b6d00b7b9c6a2669d600d3/remote/src/main/scala/org/apache/pekko/remote/transport/PekkoPduCodec.scala#L131

A change in this undefined behavior was found in https://github.com/lampepfl/dotty/issues/18227

Solution: change the name of this object.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/491/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ho04T,pekko,1638092307,491,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-17T12:58:22Z,2023-07-17T12:58:22Z,@mdedetrich any idea why the $ was added? It was added during one of your commits when we were renaming the akka packages. The Akka 2.6 code does not have a $ in the equivalent name.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ho04T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ho6IL,pekko,1638113803,491,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-17T13:11:25Z,2023-07-17T13:11:25Z,"This was likely a mistake, @nicolasstucki Thanks foe the report, does that mean we should make a new release?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ho6IL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpCAY,pekko,1638146072,491,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-17T13:28:43Z,2023-07-17T13:28:43Z,"* we can start by release noting that this affects users of Scala 3.3.2 (which is only in preview)
* still works with Scala 3.3.1-RC4 as per @nicolasstucki 
* we should release Pekko 1.0.1 but we may not need to start the RC process yet
* we may still be better off starting Pekko HTTP 1.0.0 release process first","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpCAY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpTtV,pekko,1638218581,491,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-17T14:04:18Z,2023-07-17T14:04:18Z,"> * we can start by release noting that this affects users of Scala 3.3.2 (which is only in preview)
> * still works with Scala 3.3.1-RC4 as per @nicolasstucki
> * we should release Pekko 1.0.1 but we may not need to start the RC process yet
> * we may still be better off starting Pekko HTTP 1.0.0 release process first

So just to clarify (and @nicolasstucki can either confirm or deny this), but afaik this issue of using `$` in class names is not Scala 3 specific, its just that because incubator-pekko got added to Scala 3 integration testing (i.e. open community build) where it got revealed but its a general Scala issue.

The core problem is that Scala (regardless if its Scala 2 or Scala 3) you should never have a `$` in class names that you define because Scala compiler itself will generate classes internally which can contain the `$` (both Scala 2 and Scala 3 do this) and if you happen to define your own class with `$` then conflicts/collisions can arise (this is the core undefined behaviour).

For this reason I would recommend making a new release irrespective of Scala 3, we still need to go through the release process. If possible Scala 2/3 should also add checks/warnings to prevent this in the future.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpTtV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hplq1,pekko,1638292149,491,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-07-17T14:41:56Z,2023-07-17T14:41:56Z,i think this is not a bug of pekko but a scala3 regression.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hplq1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpmwG,pekko,1638296582,491,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-17T14:44:21Z,2023-07-17T14:44:21Z,"> i think this is not a bug of pekko but a scala3 regression.

Scala 3 is not likely to be changed to allow us not to fix the class name.

I'm happy to change this package private class name since the Scala spec says we shouldn't have $ suffix in class names.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpmwG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpnE9,pekko,1638297917,491,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-17T14:45:05Z,2023-07-17T14:45:05Z,"> i think this is not a bug of pekko but a scala3 regression.

The Scala spec does state that you should not create classes with `$` signs so its not a regression, we broke the spec. See https://www.scala-lang.org/files/archive/spec/2.11/01-lexical-syntax.html for reference, specifically

> The ‘$’ character is reserved for compiler-synthesized identifiers. User programs should not define identifiers which contain ‘$’ characters.

classes are such an identifier. And note that is for Scala 2.11, not Scala 3

> I'm happy to change this package private class name since the Scala spec says we shouldn't have $ suffix in class names.

Its actually in any identifier, not just classes and  changing things to package private (or not) doesn't make a difference here. The best way to generally solve this problem is Scala compiler refusing to compile code that breaks the spec (maybe with some flag to override in true exception cases, ours is not such a case).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hpnE9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5htDEu,pekko,1639199022,491,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-07-18T02:40:58Z,2023-07-18T02:40:58Z,@mdedetrich So why the compiler did not prevent this but produced an artifact?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5htDEu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hubAD,pekko,1639559171,491,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-07-18T06:17:48Z,2023-07-18T06:17:48Z,"> @mdedetrich So why the compiler did not prevent this but produced an artifact?

It should have prevented this, and at least for Scala 3 there is a discussion to detect this and make the compiler produce a warning (see https://github.com/lampepfl/dotty/issues/18227#issuecomment-1638352282).

This not being there was an oversight","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hubAD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hw8x0,pekko,1640221812,491,NA,nicolasstucki,3648029,Nicolas Stucki,,NA,2023-07-18T13:22:49Z,2023-07-18T13:22:49Z,A linting option will be added to detect these issues: https://github.com/lampepfl/dotty/issues/18234,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hw8x0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/491,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jEL23,pekko,1662041527,491,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-02T11:31:21Z,2023-08-02T11:31:21Z,v1.0.1 was released last week,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jEL23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/493,https://api.github.com/repos/apache/pekko/issues/493,pekko,1807954289,493,enable mima checks for Scala 3,pjfanning,11783444,PJ Fanning,,CLOSED,2023-07-17T14:47:35Z,2023-08-03T11:29:43Z,"* `project/Mima.scala` currently hacks it so that when you use Scala 3, the mimaPreviousVersions is empty.
* even if remove that hack, the build derives the wrong Scala jar name for Scala 3 jars (when doing the MiMa comparison)
* when we have it working, we need to change the GitHub CI job that does  binary compatibility checks to include Scala 3.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/493/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/497,https://api.github.com/repos/apache/pekko/issues/497,pekko,1809849729,497,Diagnostics module,xkrt,428187,Pavel Martynov,mr.xkurt@gmail.com,OPEN,2023-07-18T12:41:44Z,2023-08-02T11:30:26Z,"Hi!
It would be nice to have https://github.com/akka/akka-diagnostics analogue for Pekko. Especially Thread Starvation Detector.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/497/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/497,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hwrAE,pekko,1640148996,497,NA,pjfanning,11783444,PJ Fanning,,NA,2023-07-18T12:46:38Z,2023-07-18T12:46:38Z,"That code has never been Apache licensed so it is out of bounds for us to even look at the code.

In theory, if someone could write code that has similar functionality and could prove that they never looked at the Akka code, then that would be a useful module for Pekko.

Could start out as an independent project and be brought into Pekko later.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5hwrAE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/508,https://api.github.com/repos/apache/pekko/issues/508,pekko,1827493112,508,add release authors details,pjfanning,11783444,PJ Fanning,,OPEN,2023-07-29T13:50:05Z,2023-07-29T13:50:05Z,"Should we include this release info somewhere?

```
% scripts/authors.scala forked-from-akka v1.0.0
warning: exhaustive rename detection was skipped due to too many files.
warning: you may want to set your diff.renameLimit variable to at least 3469 and retry the command.
Couldn't parse summary section for Stats(PJ Fanning,pjfanning@users.noreply.github.com,31,3830,3901,3313) 'stray space in doc (#372)'
Couldn't parse summary section for Stats(Johannes Rudolph,johannes.rudolph@gmail.com,18,2834,3818,62) 'build: fix syntax of publish.yml to avoid noisy errors in forks (#45)'
commits  added  removed
    123   9766    12556 PJ Fanning
     93 761650   756738 Matthew de Detrich
     18   2834     3818 Johannes Rudolph
      9  28119       74 He-Pin
      4      9        8 Arnout Engelen
      3    243       50 Sean Glover
      3      9       11 kerr
      2   4484     4498 Greg Methvin
      2   1517     2883 Jonas Chapuis
      2     41       22 Sam Byng
      2      8       19 Denny Yung-Yu Chen
      1   1763     1565 Auto Format
      1    595       73 Iain Hull
      1    150      150 Seeta Ramayya
      1     74       99 Samik Raychaudhuri
      1      9       21 Samuele Resca
      1     10       10 哇呜哇呜呀咦耶
      1      6        6 Edward Samson
      1      4        4 Keith Wansbrough
      1      4        4 sangbong
      1      1        1 Zachary Sistrunk
      1      1        1 Philippus Baalman
      1      1        1 sdeigm
% scripts/authors.scala v1.0.0 v1.0.1          
commits  added  removed
     14    204      171 PJ Fanning
     12    238       54 Matthew de Detrich
      1     18        0 Naoki Yamada
      1      1        1 He-Pin
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/508/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/525,https://api.github.com/repos/apache/pekko/issues/525,pekko,1832780162,525,Create benchmark for LazyFutureSource,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-08-02T09:16:32Z,2023-08-14T03:10:33Z,Should create a benchmark for https://github.com/apache/incubator-pekko/pull/48 so that we won't have potential performance regressions in the future.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/525/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5j7v2t,pekko,1676606893,525,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-14T03:10:33Z,2023-08-14T03:10:33Z,completed.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5j7v2t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/526,https://api.github.com/repos/apache/pekko/issues/526,pekko,1832814178,526,Make org.apache.pekko.actor.AbstractActor#preRestart final,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-02T09:35:34Z,2023-08-02T18:41:54Z,">TODO In Pekko 1.1.0, we can remove deprecation and make the method final

```scala
  // TODO In Pekko 1.1.0, we can remove deprecation and make the method final
  @deprecated(""Override preRestart with message parameter with Optional type instead"", ""Akka 2.5.0"")
  @throws(classOf[Exception])
  @nowarn(""msg=deprecated"")
  override def preRestart(reason: Throwable, message: Option[Any]): Unit = {
    import pekko.util.OptionConverters._
    preRestart(reason, message.toJava)
  }
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/526/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/526,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jEe8T,pekko,1662119699,526,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-02T12:26:58Z,2023-08-02T12:26:58Z,@He-Pin why not remove it altogether?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jEe8T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/526,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jG8Jg,pekko,1662763616,526,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-02T18:41:54Z,2023-08-02T18:41:54Z,@pjfanning That's an option too.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jG8Jg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/543,https://api.github.com/repos/apache/pekko/issues/543,pekko,1838174630,543,failed:LateConnectSpec must be established after initial lazy restart,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-06T11:44:37Z,2023-08-06T11:50:13Z,"https://github.com/apache/incubator-pekko/actions/runs/5776120399/job/15654879625?pr=542#step:6:12362

```scala
[08-06 11:06:03.230] [info] - must be established after initial lazy restart *** FAILED *** (24 seconds, 65 milliseconds)
[08-06 11:06:03.231] [info]   java.lang.AssertionError: assertion failed: timeout (20 seconds) during expectMsg while waiting for ping2
[08-06 11:06:03.232] [info]   at scala.Predef$.assert(Predef.scala:279)
[08-06 11:06:03.236] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[08-06 11:06:03.236] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:458)
[08-06 11:06:03.236] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:458)
[08-06 11:06:03.236] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[08-06 11:06:03.236] [info]   at org.apache.pekko.remote.artery.LateConnectSpec.$anonfun$new$2(LateConnectSpec.scala:59)
[08-06 11:06:03.236] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[08-06 11:06:03.236] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[08-06 11:06:03.236] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[08-06 11:06:03.236] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[08-06 11:06:03.236] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[08-06 11:06:03.236] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
[08-06 11:06:03.236] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[08-06 11:06:03.236] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[08-06 11:06:03.236] [info]   at org.apache.pekko.remote.artery.ArteryMultiNodeSpec.withFixture(ArteryMultiNodeSpec.scala:58)
[08-06 11:06:03.236] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
[08-06 11:06:03.236] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
[08-06 11:06:03.236] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[08-06 11:06:03.236] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
[08-06 11:06:03.237] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[08-06 11:06:03.237] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[08-06 11:06:03.237] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
[08-06 11:06:03.237] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
[08-06 11:06:03.237] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[08-06 11:06:03.237] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[08-06 11:06:03.237] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
[08-06 11:06:03.237] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[08-06 11:06:03.237] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
[08-06 11:06:03.238] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
[08-06 11:06:03.238] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
[08-06 11:06:03.238] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[08-06 11:06:03.238] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[08-06 11:06:03.238] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[08-06 11:06:03.238] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
[08-06 11:06:03.238] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[08-06 11:06:03.238] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[08-06 11:06:03.238] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[08-06 11:06:03.238] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[08-06 11:06:03.238] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[08-06 11:06:03.238] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[08-06 11:06:03.238] [info]   at java.lang.Thread.run(Thread.java:750)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/543/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/547,https://api.github.com/repos/apache/pekko/issues/547,pekko,1839261384,547,multinode testkit change to netty4 has made it unreliable,pjfanning,11783444,PJ Fanning,,CLOSED,2023-08-07T11:32:47Z,2023-08-10T18:10:32Z,"https://github.com/apache/incubator-pekko-http/actions/runs/5784088598/job/15674095366

The 'main' tests are using pekko jars that have been built off the 'main' branch of https://github.com/apache/incubator-pekko

fyi @kerr @mdedetrich","{""url"": ""https://api.github.com/repos/apache/pekko/issues/547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/547,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jaMwB,pekko,1667812353,547,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-07T12:58:29Z,2023-08-07T12:58:29Z,"_Working on it, stay turn._","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jaMwB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/547,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jcRFW,pekko,1668354390,547,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-07T18:03:00Z,2023-08-07T18:03:00Z,it works now https://github.com/apache/incubator-pekko-http/actions/runs/5788267905/job/15686902092,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jcRFW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/547,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jeJHK,pekko,1668846026,547,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-08T03:19:00Z,2023-08-08T03:19:00Z,This is done by the https://github.com/apache/incubator-pekko-http/pull/297,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jeJHK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/547,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jwloj,pekko,1673681443,547,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-10T18:10:32Z,2023-08-10T18:10:32Z,It's fixed now.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jwloj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/548,pekko,1840704330,548,Use sbt's multi-jvm instead of our manual implementation?,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-08-08T07:11:19Z,2023-08-08T08:18:54Z,"As a result of the discussion at https://github.com/apache/incubator-pekko-http/pull/297#issuecomment-1669011499 I just found out that there is already a [sbt-multi-jvm](https://github.com/sbt/sbt-multi-jvm) plugin that appears to be identical to ours and was originally upstream by Akka/Akka community, presumably for Akka to eventually remove the multi jvm setup in their builds which we inherited.

I think we should seriously consider upstreaming any necessary changes and then using the plugin, especially considering that we now have duplicated code between pekko and pekko-http.

@jrudolph @pjfanning @He-Pin @raboof wdyt ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/548/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je4ly,pekko,1669040498,548,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-08T07:16:25Z,2023-08-08T07:16:25Z,"From https://github.com/apache/incubator-pekko-http/pull/297#issuecomment-1669033563 @He-Pin 

> We need wait the Controller transited to connectable before start the Player.

I think this concept is easily generalizable given that its not a problem thats specific to Pekko (after testing clusters is the reason we are using multiple JVM's in the first place)

> Need submit a PR to sbt-multi-jvm and waiting a new snapshot, which may take sometimes and is not a quick fix.

This is a non issue at least in regards to using sbt-multi-jvm right now. I am thinking about this long term, but typically if its seen there are significant contributions made to a project than you get added as a maintainer (these are community projects after all).

> I did not diff the code with sbt-multi-jvm line by line, but there must be some reason for Akka was keep it separately

From what I could see by quickly glancing at the code, the intention was to replace sbt-multi-jvm withe code in Akka but they never got around to it likely because of priority/effort required.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je4ly/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je4nF,pekko,1669040581,548,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-08T07:16:29Z,2023-08-08T07:16:29Z,"1. That's was a quick fix so I duplicated the code to keep night build works.
3. For future, we should extract all shared plugins to something as what you once suggested and [typelevel ](https://github.com/typelevel/sbt-typelevel)does, eg: `apache-sbt-pekko`? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je4nF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je6J7,pekko,1669046907,548,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-08T07:20:20Z,2023-08-08T07:20:20Z,"> That's was a quick fix so I duplicated the code to keep night build runing.

Understood and fine for now

> For future, we should extract all shared plugins to something as what you once suggested and [typelevel ](https://github.com/typelevel/sbt-typelevel)does, eg: apache-sbt-pekko?

This makes sense for features that are unique to pekko, i.e. think our Paradox theme or setting up the organization of our projects to `org.apache.pekko`. multi-jvm however is just a general feature so it makes more sense if its possible to use sbt-multi-jvm.

This isn't any different to sbt-license-report, which our Pekko projects use but is an sbt community plugin (see https://github.com/sbt/sbt-license-report) and if you look at https://github.com/sbt/sbt-license-report/pulls?q=is%3Apr+author%3Amdedetrich and https://github.com/sbt/sbt-license-report/releases you can see that contributing upsream and getting a release wasn't an issue at all.

As I said before, generally speaking if its shown that you contribute features upstream there isn't usually a problem in those releases being made.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je6J7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je8pQ,pekko,1669057104,548,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-08T07:24:18Z,2023-08-08T07:24:18Z,The `sbt-multi-jvm` can go upstream and you saw there are so many backlog there too.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5je8pQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jfAjL,pekko,1669073099,548,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-08T07:35:48Z,2023-08-08T07:35:48Z,"> The `sbt-multi-jvm` can go upstream and you saw there are so many backlog there too.

If you mean by issues then yes there does seem to be quite a few open https://github.com/sbt/sbt-multi-jvm/issues but there aren't any PR's for it. And with issues such as https://github.com/sbt/sbt-multi-jvm/issues/36 this just strengthens my earlier assumption which is that Akka was upstreaming the sbt-multi-jvm functionality but didn't get around to finishing it.

I think that if we start opening up PR's to actually solve the issues mentioned before then that should get things going.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jfAjL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/548,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jfQz2,pekko,1669139702,548,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-08T08:18:54Z,2023-08-08T08:18:54Z,"I think I can submit a PR which do not need the upstream change, @mdedetrich , which will do another round of refractory to the current Player impl. @mdedetrich .","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5jfQz2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/554,https://api.github.com/repos/apache/pekko/issues/554,pekko,1845654198,554,Add Flow#contramap,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-08-10T18:03:49Z,2023-08-11T09:28:34Z,"refs: https://github.com/apache/incubator-pekko/discussions/553

Which can be helpful instead of the `Flow.frromFunction.via(this)..`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/554/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/560,https://api.github.com/repos/apache/pekko/issues/560,pekko,1847178617,560,Failed: HandshakeRetrySpec,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-11T17:20:55Z,2023-08-11T17:21:09Z,"```
[08-11 16:52:28.814] [info] - must be retried during handshake-timeout (no message loss) *** FAILED *** (7 seconds, 93 milliseconds)
[08-11 16:52:28.815] [info]   java.lang.AssertionError: assertion failed: timeout (6 seconds) during expectMsg while waiting for hello
[08-11 16:52:28.815] [info]   at scala.Predef$.assert(Predef.scala:279)
[08-11 16:52:28.815] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[08-11 16:52:28.815] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[08-11 16:52:28.815] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[08-11 16:52:28.816] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[08-11 16:52:28.816] [info]   at org.apache.pekko.remote.artery.HandshakeRetrySpec.$anonfun$new$2(HandshakeRetrySpec.scala:48)
[08-11 16:52:28.816] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[08-11 16:52:28.816] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[08-11 16:52:28.816] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[08-11 16:52:28.825] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[08-11 16:52:28.825] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[08-11 16:52:28.826] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
[08-11 16:52:28.826] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[08-11 16:52:28.827] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[08-11 16:52:28.827] [info]   at org.apache.pekko.remote.artery.ArteryMultiNodeSpec.withFixture(ArteryMultiNodeSpec.scala:58)
[08-11 16:52:28.828] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
[08-11 16:52:28.828] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
[08-11 16:52:28.829] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[08-11 16:52:28.829] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
[08-11 16:52:28.829] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
[08-11 16:52:28.830] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
[08-11 16:52:28.830] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
[08-11 16:52:28.831] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[08-11 16:52:28.831] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[08-11 16:52:28.832] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[08-11 16:52:28.832] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[08-11 16:52:28.832] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[08-11 16:52:28.833] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[08-11 16:52:28.833] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[08-11 16:52:28.833] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[08-11 16:52:28.837] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[08-11 16:52:28.838] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
[08-11 16:52:28.838] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
[08-11 16:52:28.838] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
[08-11 16:52:28.838] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[08-11 16:52:28.838] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[08-11 16:52:28.838] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
[08-11 16:52:28.839] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
[08-11 16:52:28.842] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[08-11 16:52:28.842] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
[08-11 16:52:28.843] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
[08-11 16:52:28.843] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
[08-11 16:52:28.844] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[08-11 16:52:28.844] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[08-11 16:52:28.845] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[08-11 16:52:28.845] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
[08-11 16:52:28.845] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[08-11 16:52:28.845] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[08-11 16:52:28.845] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[08-11 16:52:28.845] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[08-11 16:52:28.846] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[08-11 16:52:28.846] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[08-11 16:52:28.846] [info]   at java.lang.Thread.run(Thread.java:750)
Coroner Thread Count started at 84, ended at 85, peaked at 119 in org.apache.pekko.remote.artery.HandshakeRetrySpec
```

https://github.com/apache/incubator-pekko/actions/runs/5834964492/job/15825600835?pr=363#step:6:3910","{""url"": ""https://api.github.com/repos/apache/pekko/issues/560/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/571,https://api.github.com/repos/apache/pekko/issues/571,pekko,1851342815,571,Drop TypedActor,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-15T12:17:39Z,2023-10-21T11:43:33Z,"Drop `org.apache.pekko.actor.TypedActor` in later version, which can be replaced by pekko-typed.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/571/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/571,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kETNS,pekko,1678848850,571,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-15T12:27:30Z,2023-08-15T12:27:30Z,"* deprecated since Akka 2.6.0
* the community has yet to agree on how long we need to keep deprecated Akka code","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kETNS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/571,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYXD,pekko,1773766083,571,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-21T11:43:29Z,2023-10-21T11:43:29Z,Im going to add the 2.0.x milestone to this since that is the correct default if we stick to semver (this doesn't mean the milestone is set in stone but given the current track record its unlikely to change).,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5puYXD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/573,https://api.github.com/repos/apache/pekko/issues/573,pekko,1851522354,573,Upgrade scalafix for build-in rules of OrganizeImports,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-15T14:16:57Z,2023-08-15T14:16:57Z,"It's using and better to update to https://github.com/scalacenter/sbt-scalafix which integrated the OrganizeImports  in newer version.

>Important sort-imports does not (currently) take into account shadowing. It is a faily dumb sorter of imports. If your code is using shadowing, it may end up no longer compiling! If you run into this issue, consider using [liancheng/scalafix-organize-imports](https://github.com/liancheng/scalafix-organize-imports/), which implements a semantic rule.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/573/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/578,pekko,1854966321,578,Clustering issues leading to all nodes being downed,fredfp,3804696,Arnaud Burlet,,OPEN,2023-08-17T13:05:17Z,2025-01-24T20:04:06Z,"I'm reopening here an [issue that I reported at the time under the akka repo](https://github.com/akka/akka/issues/31095).

We had a case where an issue on a single node lead to the whole akka-cluster being taken down.

### Here's a summary of what happened: 
1. Healthy cluster made of 20ish nodes, running on k8s
2. Node A: encounters issues, triggers CoordinatedShutdown
3. Node A: experiences high CPU usage, maybe GC pause 
4. Node A: sees B as unreachable, broadcasts it (B is certainly reachable, but detected as such because of high CPU usage, GC pause, or similar issues)
5. Cluster state: A Leaving, B seen unreachable by A, all the other nodes are Up
6. Leader can currently not perform its duties (remove A), reachability status (B seen unreachable by A)
7. Node A: times out some coordinated shutdown phases. Hypothesis: timed out because leader could not remove A.
8. Node A: finishes coordinated shutdown nonetheless.
9. hypothesis - Node A: quarantined associations to other cluster nodes
10. Nodes B, C, D, E: SBR took decision DownSelfQuarantinedByRemote and is downing [...] including myself
11. hypothesis - Node B, C, D, E: quarantined associations to other cluster nodes
12. in a few steps, all remaining cluster nodes down themselves: SBR took decision DownSelfQuarantinedByRemote
13. the whole cluster is down

### Discussions, potential issues:

Considering the behaviour of CoordinatedShutdown (phases can time out and shutdown continues), shouldn't the leader ignore unreachabilities added by a Leaving node and be allowed to perform its duties?
At step 6 above, the Leader was blocked from removing A, but A still continued its shutdown process. The catastrophic ending could have been stopped here.

DownSelfQuarantinedByRemote: @patriknw 's [comment](https://github.com/akka/akka/pull/29737#discussion_r515906571) seems spot on.
At step 9, nodes B, C, D, E should probably not take into account the `Quarantined` from a node that is Leaving.

DownSelfQuarantinedByRemote: another case where Patrik's [comment](https://github.com/akka/akka/pull/29737#discussion_r515906571) also seems to apply, `Quarantined` from nodes downing themselves because of DownSelfQuarantinedByRemote should probably not be taken into account.

At steps 10 and 12. Any cluster singletons running on affected nodes wouldn't be gracefully shutdown using the configured termination message. This is probably the right thing to do but I'm adding this note here nonetheless.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/578/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kRT3w,pekko,1682259440,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2023-08-17T13:09:40Z,2023-08-17T13:09:40Z,"I have extra logs that may be useful:

> Remote ActorSystem must be restarted to recover from this situation. Reason: Cluster member removed, previous status [Down]","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kRT3w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-BV2-,pekko,2114280894,578,NA,zhenggexia,55233994,,,NA,2024-05-16T07:34:53Z,2024-05-16T07:34:53Z,"I also encountered the same problem, which caused my cluster to keep restarting. Is there a plan to fix it? When is it expected to be repaired? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-BV2-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-EKa_,pekko,2115020479,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-16T11:50:34Z,2024-05-16T11:50:34Z,"@fredfp Can you give us more info on this - https://github.com/akka/akka/issues/31095#issuecomment-1682261286

On the Apache Pekko side, we can read the Akka issues but not the Akka PRs (due to the Akka license not being compatible with Apache Pekko).

The issue appears to be with split brain scenarios from my reading of https://github.com/akka/akka/issues/31095 - specifically DownSelfQuarantinedByRemote events. Is it possible that we should just ignore DownSelfQuarantinedByRemote events when it comes to deciding to shut down the cluster?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-EKa_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-HUTD,pekko,2115847363,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2024-05-16T17:42:55Z,2024-05-16T17:42:55Z,"@pjfanning I think the issue can happen when a node shutsdown during a partition.

Still, DownSelfQuarantinedByRemote events cannot be ignored. The root cause is that nodes should not know they were quanrantined by others in some harmless cases.

Indeed, some quarantines are harmless (as indicated by the method argument: https://github.com/apache/pekko/blob/main/remote/src/main/scala/org/apache/pekko/remote/artery/Association.scala#L534). And the issue is that such harmless quarantine should not be be communicated to the other side i.e., the quarantined association. However, they currently always are: https://github.com/apache/pekko/blob/main/remote/src/main/scala/org/apache/pekko/remote/artery/InboundQuarantineCheck.scala#L47

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-HUTD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-fJPt,pekko,2122093549,578,NA,zhenggexia,55233994,,,NA,2024-05-21T08:43:54Z,2024-05-21T08:43:54Z,"@pjfanning 
Is there a repair plan for this issue? When is it expected to be repaired?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-fJPt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-feY6,pekko,2122180154,578,NA,CruelSummerday,55220952,,,NA,2024-05-21T09:26:06Z,2024-05-21T09:26:06Z,"I also experienced the same issue, leading to continuous restarts of my cluster. Is there a scheduled resolution for this? When can we anticipate a fix?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-feY6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-fzxU,pekko,2122267732,578,NA,ZDevouring,170415111,,,NA,2024-05-21T10:10:22Z,2024-05-21T10:10:22Z,"@pjfanning Can you suggest a way to fix this bug as soon as possible, thank you very much.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-fzxU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f30L,pekko,2122284299,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2024-05-21T10:18:12Z,2024-05-21T10:18:12Z,"This bug should hit quite seldom, if it happens often it most likely means something is not right with your cluster and you should fix that first in all cases. Especially, make sure:
- there's always available CPU for the cluster managment duties (this means GC pauses need to be short)
- not to use pekko's internal thread pool for your own workloads
- make rolling update slower so that cluster is less unstable during rolling updates.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f30L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f528,pekko,2122292668,578,NA,mmatloka,82916,Michal Matloka,,NA,2024-05-21T10:22:50Z,2024-05-21T10:22:50Z,"> This bug should hit quite seldom, if it happens often it most likely means something is not right with your cluster and you should fix that first in all cases. Especially, make sure:
> 
> * there's always available CPU for the cluster managment duties
> * not to use pekko's internal thread pool for your own workloads
> * make rolling update slower so that cluster is less unstable during rolling updates.

The issue appear also in systems with heavy memory usage and long GC pauses. It is worth to check gc strategy, gc settings, gc metrics etc","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f8EA,pekko,2122301696,578,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-21T10:27:49Z,2024-05-21T10:27:49Z,how about use the classical transport for now? seems the issue in lives in artery only,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-f8EA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-g6b1,pekko,2122557173,578,NA,zhenggexia,55233994,,,NA,2024-05-21T12:46:05Z,2024-05-21T12:46:05Z,"> how about use the classical transport for now? seems the issue in lives in artery only

1. Running Akka 2.8.5 earlier on k8s resulted in a single node restart leading to cluster down (high memory and CPU)
2. The above issues did not occur when running Akka 2.8.5 on the k8s cluster
3. The above issues did not occur when using Akka to access the Nacos registration cluster
4. Running Pekko 1.0.2 on k8s resulted in a single node restart causing cluster down","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-g6b1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-hNNX,pekko,2122634071,578,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-21T13:25:11Z,2024-05-21T13:25:11Z,"IIRC, Akka 2.8.x requires an BSL :) I don't have an env to reproduce the  problem, maybe you can work out a multi-jvm test for that? and still super busy at work:( ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-hNNX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-lwl-,pekko,2123827582,578,NA,zhenggexia,55233994,,,NA,2024-05-22T04:07:08Z,2024-05-22T04:07:08Z,目前我的k8s集群有26个pod运行，当其中某一个pod因为资源不足重启的时候，常常会导致整个集群挂调，我们处理数据量比较大，资源占用比较高，目前在其他集群上（比如docker运行注册到nacos上），暂时没有出现这个问题,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-lwl-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GtNW8,pekko,2259998140,578,NA,zhenggexia,55233994,,,NA,2024-07-31T08:54:02Z,2024-07-31T08:54:02Z,"Hello, has there been any progress on this issue? Is there a plan for when it will be fixed?😀","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GtNW8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HpjI0,pekko,2275815988,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-08T13:23:09Z,2024-08-08T13:23:09Z,"For Kubernetes users, we would suggest using the Kubernetes Lease described here:
https://pekko.apache.org/docs/pekko/current/split-brain-resolver.html#lease

Pekko Management 1.1.0-M1 has a 2nd implementation of the Lease - the legacy one is CRD based while the new one uses Kubernetes native leases.
https://github.com/apache/pekko-management/pull/218
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HpjI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqTGE,pekko,2276012420,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2024-08-08T14:45:24Z,2024-08-08T14:45:24Z,"> For Kubernetes users, we would suggest using the Kubernetes Lease described here: https://pekko.apache.org/docs/pekko/current/split-brain-resolver.html#lease

That's what we use already and it didn't help in the current case. Do you expect it resolves (or avoids) this issue? I think the lease helps the surviving partition confirm it can indeed stay up, it hoever doesn't help the nodes downing themselves, which is the observed behaviour described above.

> Pekko Management 1.1.0-M1 has a 2nd implementation of the Lease - the legacy one is CRD based while the new one uses Kubernetes native leases. [apache/pekko-management#218](https://github.com/apache/pekko-management/pull/218)

Thank you for pointing it out, looking forward to it!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqTGE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqY3K,pekko,2276036042,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-08T14:56:01Z,2024-08-08T14:56:01Z,"@fredfp It's good to hear that using the Split Brain Resolver with a Kubernetes Lease stops all the nodes from downing themselves. When you lose some of the nodes, are you finding that you have to manually restart them or can Kubernetes handle automatically restarting them using liveness and/or readiness probes?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqY3K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqllQ,pekko,2276088144,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2024-08-08T15:18:47Z,2024-08-08T15:18:47Z,"> @fredfp It's good to hear that using the Split Brain Resolver with a Kubernetes Lease stops all the nodes from downing themselves.

Sorry, let me be clearer: using the SBR with a Kubernetes Lease _does not_ stop all the nodes from downing themselves.

> When you lose some of the nodes, are you finding that you have to manually restart them or can Kubernetes handle automatically restarting them using liveness and/or readiness probes?

When a node downs itself, the java process (running inside the container) terminates. The container is then restarted by k8s as usual, the liveness/readiness probes do not play a part in that. Does that answer your question?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HqllQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QDh__,pekko,2416844799,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-16T13:28:44Z,2024-10-16T13:28:44Z,"I think the main issue is Association.quarantine where the harmless flag is not passed on here:
https://github.com/apache/pekko/blob/726ddbfd43cf1e1f81254df2f5b715ace0a817cf/remote/src/main/scala/org/apache/pekko/remote/artery/Association.scala#L552

Since GracefulShutdownQuarantinedEvent only appears to be used for harmless=true quarantine events, we might be able to find the event subscribers and have them handle GracefulShutdownQuarantinedEvent in a different way to standard QuarantinedEvent instances. For example, https://github.com/apache/pekko/blob/726ddbfd43cf1e1f81254df2f5b715ace0a817cf/remote/src/main/scala/org/apache/pekko/remote/artery/InboundQuarantineCheck.scala#L31

I found 3 places where harmless=true quarantine events can be kicked off - but there could be more.

https://github.com/search?q=repo%3Aapache%2Fpekko%20%22harmless%20%3D%20true%22&type=code","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QDh__/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QMZPm,pekko,2419168230,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-17T10:36:11Z,2024-10-17T10:36:11Z,"I tried yesterday to write a unit test that does artificially causes a harmless quarantine and that examines the results but so far, I haven't reproduced the issue with the cluster shut down. I think having a reproducible case is the real blocker on this issue.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QMZPm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Sv-6X,pekko,2462051991,578,NA,fredfp,3804696,Arnaud Burlet,,NA,2024-11-07T11:57:53Z,2024-11-07T11:57:53Z,"Here's my understanding:
1. When initially marking an association as quarantined, the `Quarantined` control message is not sent to the remote when harmless is true: https://github.com/apache/pekko/blob/8cb7d256dcc1498b79a9fff815146fb5b1f451f0/remote/src/main/scala/org/apache/pekko/remote/artery/Association.scala#L569-L572
2. now comes `InboundQuarantineCheck` into play (used in `ArteryTransport.inboundSink` and `.inboundControlSink`), it serves 2 purposes: a) drop messages incoming through a quarantined association and b) telling again the remote node it is quarantined using `inboundContext.sendControl(association.remoteAddress, Quarantined(...))` in case it somehow didn't already get the message sent in 1.
3. when a node [learns it is quarantined](https://github.com/apache/pekko/blob/06467547390c417506990fe0d21f50d6d0ea24cc/remote/src/main/scala/org/apache/pekko/remote/artery/ArteryTransport.scala#L564) as a result of 2.b above, it will trigger the SBR to down itself via `ThisActorSystemQuarantinedEvent`, and this is what brings the whole cluster down.
4. the problem is triggered by 2.b above, which sends `Quarantined` control message also for harmless quarantines, when this case is carefully avoided in 1. We see in `InboundQuarantineCheck` that it doesn't rely on the quarantined status being passed via an event, but instead it is accessed directly via `env.association` and `association.associationState.isQuarantined()`. At this stage however, we lost whether the quarantine was harmless or not. This extra flag should be kept in the `Association` state so that it can be recovered in `InboundQuarantineCheck`.

About reproducing, I'm not sure because it's not clear to me how a node, when shutting down, can quarantine associations to others with `harmless=true`. However, if that can be done I'd suggest:
- start a cluster with 2 nodes A, B.
- shutdown A such that it quarantines the association to B with `harmless=true`
- send messages from B to A, this should trigger `InboundQuarantineCheck` in A to send `Quarantined` to B (and B shutting down as a result), leading the whole cluster to be down.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Sv-6X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6S5xAV,pekko,2464616469,578,NA,pjfanning,11783444,PJ Fanning,,NA,2024-11-08T12:18:05Z,2024-11-08T12:18:05Z,"@fredfp I haven't had much time to look at reproducing the issue - I checked in my initial attempt - see https://github.com/apache/pekko/pull/1555

I found an existing test that did quarantining and added a new test. If you have time, would you be able to look at extending that test to cause the shutdown issue? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6S5xAV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2d5B,pekko,2564415041,578,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T19:38:27Z,2024-12-28T19:38:27Z,"Seem the problem is that `harmless=true/false` is not taken into account, I'm not using Cluster at work, so need more time for me to workout the problem.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2d5B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2d_y,pekko,2564415474,578,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T19:40:40Z,2024-12-28T19:40:40Z,@zhxiaogg 自己维护集群不错，比如 我们内部也可以用 VipServer 之类的，去中心化的这种感觉很容易出问题，毕竟内部经常搞断网演练。,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2d_y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/578,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZRCbo,pekko,2571380456,578,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-04T18:44:38Z,2025-01-04T18:44:38Z,An experimental fix is in 1.2 snapshots - #1555,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZRCbo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/584,https://api.github.com/repos/apache/pekko/issues/584,pekko,1860725218,584,scalafiddle is down and code snippets can be removed ,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-08-22T06:50:25Z,2023-12-11T11:10:20Z,The scalafiddle.io is down and there are some #scalafiddle code in the docs and should be removed.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/584/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/584,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kmlz5,pekko,1687837945,584,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-22T09:39:58Z,2023-08-22T09:39:58Z,"Could you provide a link to a page of ours that has broken links?

I was aware that scalafiddle was broken and at least some stuff was removed as a result.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5kmlz5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/584,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pGNWN,pekko,1763235213,584,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-15T02:00:57Z,2023-10-15T02:00:57Z,@He-Pin can this be closed?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pGNWN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/584,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQo5M,pekko,1849855564,584,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-11T11:10:20Z,2023-12-11T11:10:20Z,"I'll close this. If there are still scalafiddle link, please reopen.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQo5M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/588,https://api.github.com/repos/apache/pekko/issues/588,pekko,1866203594,588,Optimize the Current ConcurrentHashMap usage,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-25T03:20:10Z,2023-08-26T05:33:43Z,"The `ConcurrentHashMap` on Java 8 have some performance issue around the `computeIfAbsent`.
see https://bugs.openjdk.org/browse/JDK-8161372 , which fixed in Java 9.

A quick fix should be do a quick `get` first.

eg: https://github.com/apache/dubbo/blob/2a5b437d58ba60cd51d39a040b6d39c8697f9d50/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ConcurrentHashMapUtils.java#L28

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/588/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/588,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k5_Ad,pekko,1692921885,588,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-25T07:47:44Z,2023-08-25T07:47:44Z,"I don't think we should do this. For me, we need proof that this is a big issue before doing anything. That Dubbo change doesn't even look correct to me. The hack to split the computeIfAbsent call over multiple calls changes the way the code works. We should look at how other teams work around this issue and not just copy the solution from one team.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k5_Ad/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/588,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k6Cml,pekko,1692936613,588,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-25T07:59:33Z,2023-08-25T07:59:33Z,"Caffeine does the same trick, and which was fixed in Java 9.
![image](https://github.com/apache/incubator-pekko/assets/501740/87bf2e3f-5fbf-4b70-abd9-86e8006ec32b)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k6Cml/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/588,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k6DDw,pekko,1692938480,588,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-08-25T08:01:04Z,2023-08-25T08:01:04Z,Im okay with this as long as serious testing is done both to see we don't cause issues wrt concurrency and we confirm its faster,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k6DDw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/588,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k-w8E,pekko,1694174980,588,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-26T05:33:43Z,2023-08-26T05:33:43Z,This will bring some performance optimization for where read happens most the time. One want to contributes this can do it with jmh benchmark.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5k-w8E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/596,https://api.github.com/repos/apache/pekko/issues/596,pekko,1869704299,596,StatefulMap can call `onComplete` twice if it throw,He-Pin,501740,He-Pin(kerr),,OPEN,2023-08-28T12:51:05Z,2023-09-01T05:00:23Z,"The current statefulmap only update the `needInvokeOnCompleteCallback` after the `onComplete(state)` been called successfully, if it throw, then the mark is unset and will be called called again in the postStop block.

Workaround:
Do not throw in 'onComplete' callback","{""url"": ""https://api.github.com/repos/apache/pekko/issues/596/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/601,https://api.github.com/repos/apache/pekko/issues/601,pekko,1875456135,601,Deprecate `statefulMapConcat`,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-08-31T12:43:28Z,2023-09-03T16:01:35Z,"Motivation:

As the `statefulMapConcat` not handing the `upstreamFinished` event, so when the stream is complete, the ongoing state ke
eped in the closure can be lost.

I suggest we annotate that in the scaladoc and deprecate the usage, and infavor the `statefulMap` 


As the tests in https://github.com/Kotlin/kotlinx.coroutines/pull/3868 shows and the origin Akka issue for `statefulMap: https://github.com/akka/akka/issues/31077
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/601/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/601,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lYtIu,pekko,1700975150,601,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-31T12:47:04Z,2023-08-31T12:47:04Z,Is this something that can be done in Pekko 1.0.2? We should at least consider updating the Pekko 1.0 docs.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lYtIu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/601,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lbfUs,pekko,1701705004,601,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-31T20:01:41Z,2023-08-31T20:01:41Z,Can we deprecate things in the 1.0.x ? ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lbfUs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/601,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lbgSk,pekko,1701708964,601,NA,pjfanning,11783444,PJ Fanning,,NA,2023-08-31T20:05:07Z,2023-08-31T20:05:07Z,"> Can we deprecate things in the 1.0.x ?

yes, we can deprecate code in 1.0.x

something like

`@deprecated(""This function has been replace by <otherFunctionName>"", ""1.0.2"")` (the 2nd string is the version number)

I would only deprecate in a patch release for something that is a bug and a fix is provided in an alternative function.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lbgSk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/604,pekko,1876002620,604,deserializing persisted data that has akka classnames,pjfanning,11783444,PJ Fanning,,CLOSED,2023-08-31T17:48:04Z,2024-05-21T15:17:22Z,"* See https://github.com/scullxbones/pekko-persistence-mongo/issues/10
* pekko and akka persistence is not an area I am an expert in but if pekko code tries to deserialize data and the data has an akka classname, then we could try to autoconvert it to a pekko class (try akka first and if it fails, try pekko).
* it isn't clear why class names are even in the persisted data - this is not always a good idea - it can be used to fool code into loading the wrong classes (if someone has the access to modify the persisted data)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/604/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5laxwy,pekko,1701518386,604,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2023-08-31T18:00:21Z,2023-08-31T18:00:21Z,"I'm testing locally a converter in the serializer in the mongo plugin there and will post back if that solves it, but would be awesome if we could auto convert it in the core code but I'm not sure if that's even possible.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5laxwy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5la3YJ,pekko,1701541385,604,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2023-08-31T18:15:21Z,2023-08-31T18:15:21Z,see https://github.com/scullxbones/pekko-persistence-mongo/issues/10#issuecomment-1701540758,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5la3YJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5la50C,pekko,1701551362,604,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-08-31T18:23:35Z,2023-08-31T18:23:35Z,"@bdoyle0182 I think this can be done with an spi hook, and then the project will need to implemented it with both akka and pekko in the classpath.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5la50C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lgwJp,pekko,1703084649,604,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2023-09-01T17:18:19Z,2023-09-01T17:18:19Z,"I think the issue here is plugin specific unfortunately since the storage plugin decides how to serialize / deserialize the data to the db. I'm not sure how you could solve this in core when the plugin will still need to account for this translation based on how they originally set up the data to be stored. You could make it easier providing an spi hook to do the classname translation, but regardless it would still need to be something each plugin maintainer would need to account for.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lgwJp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQoQT,pekko,1849852947,604,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-11T11:08:39Z,2023-12-11T11:08:39Z,"we've hit #841 and #838 (same issue, just 2 attempts at fixing it)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQoQT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7qrZ,pekko,1877912281,604,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2024-01-04T23:42:51Z,2024-01-04T23:42:51Z,@pjfanning has that been included in a release yet?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7qrZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7sY5,pekko,1877919289,604,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-04T23:53:12Z,2024-01-04T23:53:12Z,"@bdoyle0182 #841 is not released yet. Will be in Pekko 1.0.3 but that release is not yet scheduled. You can help by trying the latest Pekko snaphots - e.g. 1.0.2+13-9b596fa4-SNAPSHOT

Unfortunately, in a volunteer project - not every volunteer has to worry about migrating akka data - I haven't used Akka in the last 5 years as an example. Some of us have no Akka baggage.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7sY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7tAP,pekko,1877921807,604,NA,bdoyle0182,11879547,Brendan Doyle,bdoyle0182@gmail.com,NA,2024-01-04T23:56:28Z,2024-01-04T23:56:28Z,"I don't have full context on what the fix is for exactly, but if I'm using the fix that I made for the specific plugin for mongo would this be a relevant issue still or would that bypass the issue in these PR's?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7tAP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7u4L,pekko,1877929483,604,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-05T00:05:23Z,2024-01-05T00:05:23Z,"> I don't have full context on what the fix is for exactly, but if I'm using the fix that I made for the specific plugin for mongo would this be a relevant issue still or would that bypass the issue in these PR's?

I don't follow. Pekko 1.0.3 will be released in a few months. 1.0.3 will include https://github.com/apache/incubator-pekko/pull/841

If you don't like snapshots, you could try the full release when it is released. Unfortunately, Pekko has a mismatch between developers with green field work and those who are Akka refugees. The Akka refugees are disengaged. Their disengagement is hindering efforts to help them.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v7u4L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/604,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-iHCS,pekko,2122870930,604,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-21T15:17:21Z,2024-05-21T15:17:21Z,1.0.3-M1 was released,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-iHCS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/610,https://api.github.com/repos/apache/pekko/issues/610,pekko,1877748579,610,failed: StreamRefsSpec,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-01T16:48:54Z,2023-09-26T14:05:20Z,"```
[09-01 15:20:20.134] [info] - must pass cancellation upstream across remoting before elements has been emitted *** FAILED *** (26 milliseconds)
[09-01 15:20:20.135] [info]   java.lang.AssertionError: assertion failed: expected Done, found Failure(org.apache.pekko.stream.RemoteStreamRefActorTerminatedException: Remote target receiver of data Some(Actor[pekko://StreamRefsSpec/system/Materializers/StreamSupervisor-2568/$$m-SourceRef-8#-1525367045]) terminated. Local stream terminating, message loss (on remote side) may have happened.)
[09-01 15:20:20.135] [info]   at scala.Predef$.assert(Predef.scala:279)
```

https://github.com/apache/incubator-pekko/actions/runs/6050882412/job/16421131496?pr=609","{""url"": ""https://api.github.com/repos/apache/pekko/issues/610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/610,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mzkj2,pekko,1724795126,610,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-19T03:54:55Z,2023-09-19T03:54:55Z,https://github.com/apache/incubator-pekko/actions/runs/6229433326/job/16907923622#step:6:21256,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mzkj2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/610,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nTbhP,pekko,1733146703,610,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-25T08:16:04Z,2023-09-25T08:16:04Z,https://github.com/apache/incubator-pekko/actions/runs/6293248461/job/17083517089#step:6:22009,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nTbhP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/610,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nc1j9,pekko,1735612669,610,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-26T14:05:19Z,2023-09-26T14:05:19Z,https://github.com/apache/incubator-pekko/actions/runs/6312975683/job/17140088676#step:7:13652,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nc1j9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/611,pekko,1877801472,611,Prepare for Loom,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-01T17:34:10Z,2025-01-25T13:43:25Z,"JDK 21 will be released very soon and I saw some libraries are starting to prepare their library for Loom.
eg:
https://github.com/graphql-java/graphql-java/pull/3317
https://github.com/reactor/reactor-core/pull/3566

I think pekko should be prepare for that too, plus no performance regression; I mean reduce the usage of `synchronized` (which maybe changed in later JDK release too) not let an Actor <-> VirtualThread.

![image](https://github.com/apache/incubator-pekko/assets/501740/18ff8625-7059-4a22-8cca-2d51e006068f)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/611/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljXkL,pekko,1703770379,611,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-09-02T09:02:29Z,2023-09-02T09:02:29Z,"So one thing to note here is that if we use Loom unless we can put the functionality into another artifact we are basically going to be forcing users to use the newest JDK. There are hypothetical solutions for this, i.e. https://github.com/sbt/sbt/discussions/7174#discussioncomment-5288982 would allow us to release pekko with class filees that are specific to a JDK allowing users of Pekko to automatically get the features of Loom if they are using latest JDK will still supporting older JDK's

One other thing to note is that at least if we are talking about performance, I am not entirely sure that Loom is going to give us benefits. Actors is another design to solve some of the problems that Loom does, i.e. the messaging protocol of actors is immutable data which is one of the reasons why they perform so well and Loom isn't really going to get us much here given that logic in Actor's are guaranteed to execute on the same thread (loom gives us performance benefits when context switching).

Loom can provide performance improvements if we are talking about `Future` comprehension, but this is kind of orthogonal to Pekko (i.e. we would get these improvements automatically if someone was to provide an `ExecutionContext` backed by Loom) and I would presume a better way to solve this problem is to just provide these `ExecutionContext`'s for Pekko as a separate artifact (even library) for the Pekko users that use Loom.

In essense Loom is probably more useful for those who are stuck on blocking IO/logic in Java world and/or use effect IO types such as Cats Effect/ZIO. Akka/Pekko doesn't do this at least in areas which are performance sensitive (and we have tricks such as ExecutionContexts.parasitic)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljXkL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljYLw,pekko,1703772912,611,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-02T09:10:16Z,2023-09-02T09:10:16Z,"@mdedetrich I mean we can update some code with LockSupport instead, user can choose to use loom and don't want to be affected.

Another thing is , we may want to make use of multi-release jars too, Actor is a very lightweight and current the Loom's VirtualThread is scheduled with ForkJoinPool too, let's see how the community use the Loom before we do the actual move.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljYLw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljYUE,pekko,1703773444,611,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-02T09:13:20Z,2023-09-02T09:13:20Z,"Partially related to https://github.com/apache/incubator-pekko/discussions/482

For me, we get greater results by ensuring that users can use custom dispatchers wherever they need to within Pekko instead of having to use the default one. The OP of https://github.com/apache/incubator-pekko/discussions/482 claims without detailed examples that Pekko doesn't let you control which dispatcher is used in all cases.

It is easier build-wise for us to have Pekko core built with Java 8 or 11 and separate jars which have add-on features that can be used by users of newer Java versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljYUE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljY5A,pekko,1703775808,611,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-09-02T09:18:25Z,2023-09-02T09:18:25Z,"> For me, we get greater results by ensuring that users can use custom dispatchers wherever they need to within Pekko instead of having to use the default one.

Yeah I think this is the best course of action for now, and Pekko can provide custom dispatchers/ExecutionContexts that use Loom's `VirtualThread`'s in jars that are built for JDK 21 separately. 

> The OP of https://github.com/apache/incubator-pekko/discussions/482 claims without detailed examples that Pekko doesn't let you control which dispatcher is used in all cases.

Honestly I think the best way to solve these issues is to use multi-release jar's but we would have to adjust sbt build so that this can be supported (if that can even work, it might only be possible in sbt 2.x)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljY5A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljZAE,pekko,1703776260,611,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-02T09:21:12Z,2023-09-02T09:21:12Z,"@pjfanning That's true, I was want to do some clean up of threadlocal leak but can not be done with akka, want to submit a pr to pekko to fix that here later.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljZAE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljZ1Z,pekko,1703779673,611,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-02T09:36:10Z,2023-09-02T09:36:10Z,"We need to look at all uses of ThreadLocal and see how we might be able to find an alternative mechanism based on low latency caches or if we need to make this pluggable so that Loom users can use cached based implementations while older JVM users would still use the ThreadLocal-based implementations. 

Scoped Values (Java 20 and above) could be an option to replace ThreadLocal values that are immutable.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljZ1Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljbAQ,pekko,1703784464,611,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-02T09:48:50Z,2023-09-02T09:48:50Z,The main Pekko code base does use ThreadLocal in a few places. A class that gets used a lot is ThreadLocalRandom and I can't find much discussion of what the alternatives for ThreadLocalRandom are. A `ScopedValue<Random>` might work well in Java 20+.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ljbAQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LnfhL,pekko,2342385739,611,NA,jxtps,90846,,,NA,2024-09-11T00:25:29Z,2024-09-11T00:25:29Z,"Any updates on this? 

I'm interfacing with a significant body of synchronous legacy code and need to make web requests deep inside those stacks. 

It is not really feasible to rewrite the code to be async, so it would be fantastic to be able to have the Pekko thread pools be backed by Loom so I don't accidentally run out of threads. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LnfhL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LngxL,pekko,2342390859,611,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-11T00:31:26Z,2024-09-11T00:31:26Z,"https://github.com/apache/pekko/pull/1436 is in Pekko 1.1.0. This is the only change that we have made in this area.
I would recommend thoroughly testing any setup that uses a Virtual Thread dispatcher because I am not aware of anyone who has used it in production yet.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LngxL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Lo8SU,pekko,2342765716,611,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-09-11T06:35:04Z,2024-09-11T06:35:04Z,"https://openjdk.org/jeps/8337395
JEP draft: Adapt Object Monitors for Virtual Threads

We have encounter several deadlock in production, I think this can only be experimental.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Lo8SU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/611,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aeXXt,pekko,2591651309,611,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-15T04:55:35Z,2025-01-15T04:55:35Z,I plan to work on this this weekend.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aeXXt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/622,https://api.github.com/repos/apache/pekko/issues/622,pekko,1878791465,622,Improve performance for Flow#flatmapConcat,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-02T18:07:07Z,2023-09-02T18:07:07Z,"It currently only optimized for Source.single, but can cover many more cases, such as FutureSource and IterableSource.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/622/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/624,pekko,1878806961,624,Add Flow.onErrorComplete operator,pjfanning,11783444,PJ Fanning,,CLOSED,2023-09-02T18:58:37Z,2024-01-07T18:33:29Z,"### Discussed in https://github.com/apache/incubator-pekko/discussions/623

<div type='discussions-op-text'>

<sup>Originally posted by **He-Pin** September  2, 2023</sup>
When we encounter an exception, sometime we may don't want the flow to result in an error but completes normally.

The implementation can be simple, but still cause some confusing.

I would like suggest to add a `onErrorComplete` operator which will complete the flow on some dedicated condition.

And better we have another `onErrorContiune` operator, which will keep the flow working but will need the operator before it to support this.</div>","{""url"": ""https://api.github.com/repos/apache/pekko/issues/624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lo-3t,pekko,1705242093,624,NA,nvollmar,919730,Nicolas Vollmar,,NA,2023-09-04T13:05:32Z,2023-09-04T13:05:32Z,"Maybe we could lean the design on the `akka.actor.SupervisorStrategy` having a decider that returns `Fail`, `Complete` or `Continue`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5lo-3t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mztwf,pekko,1724832799,624,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-19T04:59:04Z,2023-09-19T04:59:04Z,@nvollmar That's a good idea.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mztwf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v5UfY,pekko,1877297112,624,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-04T15:33:57Z,2024-01-04T15:33:57Z,"@nvollmar I'm planning to handle this this weekend, onething I have in mind is we can have something like the `reactor-core`'s operator name, which is very easy to use and accessiable. so I would like to continue with `onErrorComplete` name, and I mostly using Javadsl.

Your proposal is generic and great .","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v5UfY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v9VyY,pekko,1878351000,624,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-01-05T09:12:43Z,2024-01-05T09:12:43Z,"I'm back home, so I'd be available for a review, just request me on the PR","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v9VyY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wEH4R,pekko,1880129041,624,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-07T18:06:22Z,2024-01-07T18:06:22Z,In https://github.com/spring-projects/spring-framework/pull/31352 which split the usage of `onErrorResume`,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wEH4R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/634,https://api.github.com/repos/apache/pekko/issues/634,pekko,1883317356,634,FAILED:HandshakeRetrySpec must be retried during handshake-timeout (no message loss),He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-06T06:19:22Z,2023-09-06T06:19:29Z,"```
[WARN] [09/06/2023 04:47:14.027] [systemB-pekko.actor.default-dispatcher-6] [pekko://systemB/user/echo] received dead letter from Actor[pekko://HandshakeRetrySpec@localhost:40611/system/testActor-34#782598291]: hello
[09-06 04:47:20.053] [info] - must be retried during handshake-timeout (no message loss) *** FAILED *** (7 seconds, 82 milliseconds)
[09-06 04:47:20.053] [info]   java.lang.AssertionError: assertion failed: timeout (6 seconds) during expectMsg while waiting for hello
[09-06 04:47:20.053] [info]   at scala.Predef$.assert(Predef.scala:279)
[09-06 04:47:20.053] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[09-06 04:47:20.053] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[09-06 04:47:20.053] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[09-06 04:47:20.053] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[09-06 04:47:20.053] [info]   at org.apache.pekko.remote.artery.HandshakeRetrySpec.$anonfun$new$2(HandshakeRetrySpec.scala:48)
[09-06 04:47:20.054] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[09-06 04:47:20.054] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[09-06 04:47:20.054] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[09-06 04:47:20.054] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[09-06 04:47:20.054] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
[09-06 04:47:20.054] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[09-06 04:47:20.054] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[09-06 04:47:20.054] [info]   at org.apache.pekko.remote.artery.ArteryMultiNodeSpec.withFixture(ArteryMultiNodeSpec.scala:58)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
[09-06 04:47:20.054] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
[09-06 04:47:20.054] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[09-06 04:47:20.054] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[09-06 04:47:20.054] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[09-06 04:47:20.054] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[09-06 04:47:20.095] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[09-06 04:47:20.095] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
[09-06 04:47:20.095] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
[09-06 04:47:20.095] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
[09-06 04:47:20.095] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[09-06 04:47:20.095] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[09-06 04:47:20.095] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
[09-06 04:47:20.095] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
[09-06 04:47:20.095] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[09-06 04:47:20.095] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
[09-06 04:47:20.095] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
[09-06 04:47:20.095] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
[09-06 04:47:20.095] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[09-06 04:47:20.095] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[09-06 04:47:20.095] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[09-06 04:47:20.095] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
[09-06 04:47:20.095] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[09-06 04:47:20.095] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[09-06 04:47:20.095] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[09-06 04:47:20.095] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[09-06 04:47:20.095] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[09-06 04:47:20.095] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[09-06 04:47:20.095] [info]   at java.lang.Thread.run(Thread.java:750)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/634/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/645,https://api.github.com/repos/apache/pekko/issues/645,pekko,1894095058,645,Make use of FlushConsolidationHandler to optimize the performance of classic transport.,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-09-13T09:15:23Z,2023-09-25T02:47:44Z,"The migration from Netty 3 to Netty 4 will need to change the `channel.write` to `channel.writeAndFlush` ,but that can be optimized in a more performant way.

https://github.com/apache/incubator-pekko/pull/643
asked: https://github.com/netty/netty/discussions/13608

```
Add FlushConsolidationHandler which consolidates flush operations as …
…these are expensive

Motivation:

Calling flush() and writeAndFlush(...) are expensive operations in the sense as both will produce a write(...) or writev(...) system call if there are any pending writes in the ChannelOutboundBuffer. Often we can consolidate multiple flush operations into one if currently a read loop is active for a Channel, as we can just flush when channelReadComplete is triggered. Consolidating flushes can give a huge performance win depending on how often is flush is called. The only ""downside"" may be a bit higher latency in the case of where only one flush is triggered by the user.

Modifications:

Add a FlushConsolidationHandler which will consolidate flushes and so improve the throughput.

Result:

Better performance (throughput). This is especially true for protocols that use some sort of PIPELINING.
```

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/645/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/655,https://api.github.com/repos/apache/pekko/issues/655,pekko,1902191409,655,Add supervisor strategy support for Flow#throttle,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-19T04:40:01Z,2023-09-19T04:55:36Z,"Motivation:
After took a look at Akka.NET's release note and I found pekko-stream don't has this too.
refs: https://github.com/akkadotnet/akka.net/pull/6886

Would be nice to have this support.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/655/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/655,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mzs24,pekko,1724829112,655,NA,nvollmar,919730,Nicolas Vollmar,,NA,2023-09-19T04:53:26Z,2023-09-19T04:53:26Z,Goes into the same direction as #624?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mzs24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/655,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mztLp,pekko,1724830441,655,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-19T04:55:36Z,2023-09-19T04:55:36Z,I will try to work on https://github.com/apache/incubator-pekko/issues/624 this weekend.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5mztLp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/657,https://api.github.com/repos/apache/pekko/issues/657,pekko,1903236963,657,Add JDK21 to build metrix and remove JDK20,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-09-19T15:25:03Z,2023-09-25T02:47:31Z,JDK 21 is released.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/657/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/660,pekko,1904616048,660,Simplify Pekko typed actor implementation in Scala 3,eloots,2806012,Eric Loots,eric.loots@gmail.com,CLOSED,2023-09-20T09:48:55Z,2023-11-27T11:52:23Z,"# Synopsis

Typed actor based application code in Pekko inherits the requirement from Akka that message adapters and message wrappers are needed for handling responses from other Actors. This adds boilerplate to the business logic and clutters up the application code.

The need to utilise message adapters stems from a limitation in the type inference capabilities of the Scala 2 compiler. The good news however is that, when coding a Pekko Typed actor based application in Scala 3, the clutter and boilerplate can be eliminated completely. This leads to actor code that is as lenient as an Pekko Classic implementation while preserving full type safeness (and which allows one to easily and safely refactor typed actor based code).

In the following paragraph, the principle is demonstrated with a simple example.

_My proposal is to, at a minimum, adapt the [section on message adapters](https://nightlies.apache.org/pekko/docs/pekko/main-snapshot/docs/typed/interaction-patterns.html#adapted-response) in the Pekko documentation, to explain the concept for Scala 3 users._

_In addition to that, reworking the example code in the documentation may be considered. This could be done by adding a Scala 3 tab next to the existing Java and Scala [2] tab._

## The base case: a Typed actor based application

We start from a simple actor based application with two actor, a `JobScheduler` and a `Worker` actor. The `JobScheduler` actor utilises the message adapter approach to process the `StartedJob` response message from the `Worker` actor.

The `Worker` code looks as follows:

```scala
object Worker:
  // My Commands
  sealed trait Command
  final case class StartJob(job: Job, replyTo: ActorRef[Response]) extends Command

  // My Responses
  sealed trait Response
  final case class StartedJob(job: Job) extends Response

  def apply(): Behavior[Command] =
    Behaviors.setup { case context =>
      Behaviors.receiveMessage { case StartJob(job, replyTo) =>
        context.log.info(""Starting job {}"", job)
        replyTo ! StartedJob(job)
        Behaviors.same
      }
    }
```

The `JobScheduler` actor looks as follows:

```scala
object JobScheduler:

  // My Commands
  sealed trait Command
  case object SendJob extends Command
  private final case class WorkerResponseWrapper(response: Worker.Response)
    extends Command                                                                 // (1)

  def apply(worker: ActorRef[Worker.Command]): Behavior[Command] =
    Behaviors.setup { context =>
      Behaviors.withTimers { timers =>
        val workerResponseWrapper: ActorRef[Worker.Response] =                      // (2)
          context.messageAdapter(response => WorkerResponseWrapper(response))       // (2)

        timers.startTimerAtFixedRate(SendJob, FiniteDuration(1, TimeUnit.SECONDS))

        Behaviors.receiveMessage {
          case SendJob =>
            worker ! Worker.StartJob(Job(UUID.randomUUID()), workerResponseWrapper) // (3)
            Behaviors.same
          case WorkerResponseWrapper(response) =>                                   // (4)
            response match {                                                        // (4)
              case Worker.StartedJob(job) =>                                        // (4)
                context.log.info(""Worker responded {} started"", job)
                Behaviors.same
            }
        }
      }
    }
```

We can observe the typical pattern:

- (1) The addition of a response message wrapper, marked `private` as to not pollute the actor's public protocol
- (2) The introduction of a message adapter (effectively an `ActorRef`)
- (3) Passing the message adapter `ActorRef` in the `replyTo` field of a message
- (4) Do a two level pattern match on the response, first to extract the actual, wrapped response, second to process the actual message

## Applying Scala 3 Union types to eliminate the clutter

The idea is to refactor actors that process responses so that their external protocol remains unchanged, but that have an ""internal protocol"" that is augmented with all the responses it needs to ""understand"". For this, the application of Scala 3's Union types play a crucial role.

To cut a long story short, here is the functionally equivalent in Scala 3 that obviates the need for message adapters (note that the `Worker` actor code is unmodified):

```scala
object JobScheduler:

  // My Commands
  sealed trait Command
  case object SendJob extends Command                                      // (1) The actor's protocol reduced to the bare essence
  
  private type CommandOrResponse = Command | Worker.Response               // (2) The actor's internal protocol extending the external with with the responses

  def apply(worker: ActorRef[Worker.Command]): Behavior[Command] =         // (3) The external protocol
    Behaviors.setup[CommandOrResponse] { context =>                        // (3) The internal (extended) protocol
      Behaviors.withTimers { timers =>

        timers.startTimerAtFixedRate(SendJob, FiniteDuration(1, TimeUnit.SECONDS))

        Behaviors.receiveMessage {
          case SendJob =>
            worker ! Worker.StartJob(Job(UUID.randomUUID()), context.self) // (4) No message adapter, just pass `self` as `replyTo`
            Behaviors.same
          case Worker.StartedJob(job) =>                                   // (5) Direct pattern match on the response
            context.log.info(""Worker responded {} started"", job)
            Behaviors.same
        }
      }
    }.narrow                                                               // (6) Needed because of the way `Behavior` is implemented
```

With this refactoring, the following can be observed:

- (1) The actor's protocol definition is reduced to its bare essence: it only lists the messages that are part of its internal protocol (one message in this example)
- (2) The actor's internal protocol which is the union of its external protocol and all the responses from other actors it needs to understand
- (3) Creation of the actor's `Behavior[Command]`: we assign a more general `Behavior[CommandOrResponse]`  to it which is fine as the latter can still be considered to be an instance of a more restricted behavior
- (4) Instead of passing a message adapter, we can directly pass the `self` `ActorRef` in the `replyTo` field of the sent message
- (5) No need to do a two-level pattern match
- (6) The need to call the `narrow` method on `Behavior[CommandOrResponse]` in order to make type checking pass. I will come back to this later.

A more elaborate example can be found in [this training course](https://github.com/lunatech-labs/lunatech-scala2-to-scala3-course) where the principle is applied in the exercise on Union types. To see the diffs between the before and after state, download the [lunatech-scala2-to-scala3-course-student.zip](https://github.com/lunatech-labs/lunatech-scala2-to-scala3-course/releases/download/3.0.8/lunatech-scala2-to-scala3-course-linearized.zip) artefact, unzip it and inspect the diffs on two actors:

```bash
$ unzip lunatech-scala2-to-scala3-course-linearized.zip

$ cd lunatech-scala2-to-scala3-course-linearized

$ git diff 8690131 04b3acd code/src/main/scala/org/lunatechlabs/dotty/sudoku/SudokuProblemSender.scala
.
<elided>
.

$ git diff 8690131 04b3acd code/src/main/scala/org/lunatechlabs/dotty/sudoku/SudokuSolver.scala
.
<elided>
.
```

## Conclusion 

If one can code up a Pekko typed actor based application in Scala 3, a significant simplification can be achieved by applying the demonstrated technique. In my opinion, the Pekko documentation would be enhanced if it explains this technique.

## The need to `narrow` the internal `Behavior[CommandOrResponse]` in Scala 3

The need doesn't stem from Scala 3 itself, but rather from the way `Behavior` and `ExtensibleBehavior` (which extends `Behavior`) are defined. Ideally, the latter should be defined as contravariant in its type parameter `T` (something that wasn't an option in Scala 2). [One has to wonder though if it wouldn't be possible to change that in Scala 2.13...]

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/660/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m9eeU,pekko,1727391636,660,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-20T10:01:26Z,2023-09-20T10:01:26Z,"Thanks @eloots for the detailed write up. Before changing our docs, my preference would be that we add a couple of tests that demo that the union behaviour works as you describe.

Would you consider submitting a PR that adds a test case (or 2) to the actor-typed-tests sub-module?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m9eeU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_Y6J,pekko,1727893129,660,NA,eloots,2806012,Eric Loots,eric.loots@gmail.com,NA,2023-09-20T14:53:58Z,2023-09-20T14:53:58Z,"> Would you consider submitting a PR that adds a test case (or 2) to the actor-typed-tests sub-module?

Sure, I can have a look at that. ~At first glance, it seems that the current build definition doesn't yet have Scala 3 version specific source folders. Is this correct? The reason I ask is that I'd need to add Scala 3 specific test code to the project.~

Seems that's not the case:

```bash
$ find . -name ""scala-3*""
./actor-typed/src/main/scala-3
./cluster-typed/src/main/scala-3
./persistence/src/main/scala-3
./actor-tests/src/test/scala-3
./distributed-data/src/main/scala-3
./actor/src/main/scala-3
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_Y6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_awJ,pekko,1727900681,660,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-20T14:58:03Z,2023-09-20T14:58:03Z,"> > Would you consider submitting a PR that adds a test case (or 2) to the actor-typed-tests sub-module?
> 
> Sure, I can have a look at that. At first glance, it seems that the current build definition doesn't yet have Scala 3 version specific source folders. Is this correct? The reason I ask is that I'd need to add Scala 3 specific test code to the project.

Add a `src/test/scala-3` folder and I think sbt might handle this (by only including this source when scala3 is used). If this doesn't work, then you can add sbt settings to explicitly add it. Example of this at https://github.com/FasterXML/jackson-module-scala/blob/2.16/build.sbt#L93","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_awJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_8gQ,pekko,1728038928,660,NA,eloots,2806012,Eric Loots,eric.loots@gmail.com,NA,2023-09-20T16:07:56Z,2023-09-20T16:07:56Z,"@pjfanning 

I must be missing something obvious, but I'm encountering a problem with simply loading the project in sbt. I meet the prerequisites (I'm using Temurin-11.0.20.1 (which is the default JDK), have a JDK 8 installed, and have Graphviz installed).

This is what I get:

```
$ sbt
copying runtime jar...
[info] welcome to sbt 1.9.6 (Eclipse Adoptium Java 11.0.20.1)
[info] loading settings for project global-plugins from idea.sbt ...
[info] loading global plugins from /Users/ericloots/.sbt/1.0/plugins
[info] loading settings for project incubator-pekko-build from plugins.sbt ...
[info] loading project definition from /Users/ericloots/Trainingen/LBT/incubator-pekko/project
[info] Updating
https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml
  No modified time in response
[info] Resolved  dependencies
[warn]
[warn] 	Note: Some unresolved dependencies have extra attributes.  Check that these dependencies exist with the requested attributes.
[warn] 		com.typesafe.sbt:sbt-web:1.4.4 (scalaVersion=2.12, sbtVersion=1.0)
[warn]
[warn] 	Note: Unresolved dependencies path:
[error] sbt.librarymanagement.ResolveException: Error downloading com.typesafe.sbt:sbt-web;sbtVersion=1.0;scalaVersion=2.12:1.4.
[error]   Not found
[error]   Not found
[error]   not found: https://repo1.maven.org/maven2/com/typesafe/sbt/sbt-web_2.12_1.0/1.4.4/sbt-web-1.4.4.pom
[error]   not found: /Users/ericloots/.ivy2/localcom.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml
[error]   checksum format error: /Users/ericloots/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml.sha1
[error]   not found: https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml
[error] 	at lmcoursier.CoursierDependencyResolution.unresolvedWarningOrThrow(CoursierDependencyResolution.scala:344)
[error] 	at lmcoursier.CoursierDependencyResolution.$anonfun$update$38(CoursierDependencyResolution.scala:313)
[error] 	at scala.util.Either$LeftProjection.map(Either.scala:573)
[error] 	at lmcoursier.CoursierDependencyResolution.update(CoursierDependencyResolution.scala:313)
[error] 	at sbt.librarymanagement.DependencyResolution.update(DependencyResolution.scala:60)
[error] 	at sbt.internal.LibraryManagement$.resolve$1(LibraryManagement.scala:60)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$12(LibraryManagement.scala:134)
[error] 	at sbt.util.Tracked$.$anonfun$lastOutput$1(Tracked.scala:74)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$20(LibraryManagement.scala:147)
[error] 	at scala.util.control.Exception$Catch.apply(Exception.scala:228)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11(LibraryManagement.scala:147)
[error] 	at sbt.internal.LibraryManagement$.$anonfun$cachedUpdate$11$adapted(LibraryManagement.scala:128)
[error] 	at sbt.util.Tracked$.$anonfun$inputChangedW$1(Tracked.scala:220)
[error] 	at sbt.internal.LibraryManagement$.cachedUpdate(LibraryManagement.scala:161)
[error] 	at sbt.Classpaths$.$anonfun$updateTask0$1(Defaults.scala:3801)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[error] 	at java.base/java.lang.Thread.run(Thread.java:829)
[error] (update) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.sbt:sbt-web;sbtVersion=1.0;scalaVersion=2.12:1.4.4
[error]   Not found
[error]   Not found
[error]   not found: https://repo1.maven.org/maven2/com/typesafe/sbt/sbt-web_2.12_1.0/1.4.4/sbt-web-1.4.4.pom
[error]   not found: /Users/ericloots/.ivy2/localcom.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml
[error]   checksum format error: /Users/ericloots/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml.sha1
[error]   not found: https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml
[warn] Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? (default: r)
```

This may be a glitch as `https://repo.typesafe.com/typesafe/ivy-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml` leads to `https://scala.jfrog.io/ui/native/ivy-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml` and the error:

```
{
  ""errors"": [
    {
      ""status"": 404,
      ""message"": ""Item ivy-releases:com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys does not exist""
    }
  ]
}
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m_8gQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nAD4S,pekko,1728069138,660,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-20T16:25:00Z,2023-09-20T16:25:00Z,"That file was probably accessible in the past. It is in my Coursier cache locally. As a short term workaround, would you be able to remove sbt-web from your copy of the plugins.sbt? It is probably only needed if you are building docs.

Could you check this?

```
checksum format error: /Users/ericloots/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.typesafe.sbt/sbt-web/scala_2.12/sbt_1.0/1.4.4/ivys/ivy.xml.sha1
[error]  
```

Maybe you could delete `/Users/ericloots/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.typesafe.sbt/sbt-web` and see if the directory is properly fetched afterwards.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nAD4S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nALq7,pekko,1728101051,660,NA,eloots,2806012,Eric Loots,eric.loots@gmail.com,NA,2023-09-20T16:46:20Z,2023-09-20T16:46:20Z,"> Maybe you could delete /Users/ericloots/Library/Caches/Coursier/v1/https/repo.scala-sbt.org/scalasbt/sbt-plugin-releases/com.typesafe.sbt/sbt-web and see if the directory is properly fetched afterwards.

Yes; hadn't noticed that one. Fetching it after deleting it works and solves the problem. Just [successfully] ran the test suite in the `actor-typed-tests` sbt project.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nALq7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nAbVP,pekko,1728165199,660,NA,mkurz,644927,Matthias Kurz,,NA,2023-09-20T17:32:24Z,2023-09-20T17:32:24Z,"There is a newer sbt-web release already, 1.5.1, and it's hosted on maven central: https://repo1.maven.org/maven2/com/github/sbt/sbt-web_2.12_1.0/1.5.1/","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nAbVP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nGpCl,pekko,1729794213,660,NA,eloots,2806012,Eric Loots,eric.loots@gmail.com,NA,2023-09-21T15:16:45Z,2023-09-21T15:16:45Z,"> Would you consider submitting a PR that adds a test case (or 2) to the actor-typed-tests sub-module?

Opened #667","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nGpCl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s8EKc,pekko,1827685020,660,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-27T11:52:23Z,2023-11-27T11:52:23Z,Closing because I think this is complete. Please reopen if there is more needed.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5s8EKc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/661,https://api.github.com/repos/apache/pekko/issues/661,pekko,1904816924,661,ForkJoinPoolStarvationSpec,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-20T11:48:10Z,2024-02-22T01:18:13Z,"```
- must not starve tasks arriving from external dispatchers under high internal traffic *** FAILED *** (6 seconds, 14 milliseconds)
[09-20 10:18:16.027] [info]   java.lang.AssertionError: assertion failed: timeout (6 seconds) during expectMsg while waiting for All fine
[09-20 10:18:16.027] [info]   at scala.Predef$.assert(Predef.scala:223)
[09-20 10:18:16.027] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[09-20 10:18:16.028] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[09-20 10:18:16.028] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[09-20 10:18:16.028] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[09-20 10:18:16.028] [info]   at org.apache.pekko.dispatch.ForkJoinPoolStarvationSpec.$anonfun$new$6(ForkJoinPoolStarvationSpec.scala:78)
[09-20 10:18:16.028] [info]   at org.apache.pekko.dispatch.ForkJoinPoolStarvationSpec.$anonfun$new$6$adapted(ForkJoinPoolStarvationSpec.scala:75)
[09-20 10:18:16.028] [info]   at scala.collection.immutable.Range.foreach(Range.scala:158)
[09-20 10:18:16.028] [info]   at org.apache.pekko.dispatch.ForkJoinPoolStarvationSpec.$anonfun$new$2(ForkJoinPoolStarvationSpec.scala:75)
[09-20 10:18:16.029] [info]   at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[09-20 10:18:16.029] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[09-20 10:18:16.029] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[09-20 10:18:16.029] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[09-20 10:18:16.029] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[09-20 10:18:16.029] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[09-20 10:18:16.029] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
[09-20 10:18:16.029] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[09-20 10:18:16.030] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[09-20 10:18:16.030] [info]   at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
[09-20 10:18:16.030] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
[09-20 10:18:16.030] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
[09-20 10:18:16.030] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[09-20 10:18:16.030] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
[09-20 10:18:16.030] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
[09-20 10:18:16.031] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
[09-20 10:18:16.031] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
[09-20 10:18:16.031] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[09-20 10:18:16.031] [info]   at scala.collection.immutable.List.foreach(List.scala:431)
[09-20 10:18:16.031] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[09-20 10:18:16.031] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[09-20 10:18:16.031] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[09-20 10:18:16.031] [info]   at scala.collection.immutable.List.foreach(List.scala:431)
[09-20 10:18:16.032] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[09-20 10:18:16.032] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[09-20 10:18:16.032] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[09-20 10:18:16.032] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
[09-20 10:18:16.032] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
[09-20 10:18:16.032] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
[09-20 10:18:16.032] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[09-20 10:18:16.032] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[09-20 10:18:16.033] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
[09-20 10:18:16.033] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
[09-20 10:18:16.033] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[09-20 10:18:16.033] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
[09-20 10:18:16.033] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
[09-20 10:18:16.033] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
[09-20 10:18:16.033] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[09-20 10:18:16.033] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[09-20 10:18:16.034] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[09-20 10:18:16.034] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
[09-20 10:18:16.034] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[09-20 10:18:16.034] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[09-20 10:18:16.034] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[09-20 10:18:16.034] [info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[09-20 10:18:16.034] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
[09-20 10:18:16.034] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
[09-20 10:18:16.035] [info]   at java.base/java.lang.Thread.run(Thread.java:1583)
```

refs: https://github.com/apache/incubator-pekko/actions/runs/6247109120/job/16959068675#step:6:3238

if an actor exhausted its throughput, should then call `externalSubmit`?
JDK 8: externalPush
JDK 21: externalSubmit


Current jdk21 usage:
```java
        } else if (s == YIELDING) {   // Thread.yield
            setState(RUNNABLE);

            // notify JVMTI that unmount has completed, thread is runnable
            notifyJvmtiUnmount(/*hide*/false);

            // external submit if there are no tasks in the local task queue
            if (currentThread() instanceof CarrierThread ct && ct.getQueuedTaskCount() == 0) {
                externalSubmitRunContinuation(ct.getPool()); 
            } else {
                submitRunContinuation();
            }
        }
```

https://endoflife.date/java
https://javaalmanac.io","{""url"": ""https://api.github.com/repos/apache/pekko/issues/661/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-JqH,pekko,1727568519,661,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-20T11:48:44Z,2023-09-20T11:48:44Z,https://github.com/apache/incubator-pekko/actions/runs/6247109120/job/16959069348#step:6:3153,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-JqH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-Ngf,pekko,1727584287,661,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-20T11:59:54Z,2023-09-20T11:59:54Z,"refs: https://github.com/openjdk/jdk/pull/11319
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-Ngf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-OJ2,pekko,1727586934,661,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-20T12:01:48Z,2023-09-20T12:01:48Z,"@jrudolph You was doing some design on this, would you like to work on this to call `externalSubmit` etc thing after some iteration?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5m-OJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50vCbl,pekko,1958487781,661,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-22T01:18:13Z,2024-02-22T01:18:13Z,this seems to fail most of the time in the 1.0.x branch but not in the main branch (or at least is rare there),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50vCbl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/663,https://api.github.com/repos/apache/pekko/issues/663,pekko,1905245330,663,LineNumberSpec fails with Scala 3,pjfanning,11783444,PJ Fanning,,CLOSED,2023-09-20T15:29:56Z,2023-10-15T02:00:11Z,"* org.apache.pekko.util.LineNumberSpec
* https://github.com/apache/incubator-pekko/actions/runs/6242272017/job/16945926518
* tested only in nightly build
* has been failing a while
* I think we can relax the line number matching to make the test pass.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/663/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/663,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pGNUH,pekko,1763235079,663,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-15T02:00:11Z,2023-10-15T02:00:11Z,#683 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pGNUH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/668,https://api.github.com/repos/apache/pekko/issues/668,pekko,1907239566,668,Confusion dead letter logging when AskTimeout,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2023-09-21T15:23:45Z,2023-09-29T11:42:51Z,"When using`AskPattern` or `context.ask`, pekko will create a temporary actor for receive result.
 
While the ask Future has been timeout,  the result message of reply will sent it to DeadLetter.

However, the final printed log may induce confusion, perform like a dead letter sent to the deadLetterActor.

An example log like this: 

```bash 
INFO  org.apache.pekko.actor.DeadLetterActorRef pekkoDeadLetter - Message [org.apache.pekko.actor.typed.WorkerResult] to Actor[pekko://DeadLetterSpec/deadLetters] was not delivered. 
[4] dead letters encountered. If this is not an expected behavior then Actor[pekko://DeadLetterSpec/deadLetters] may have terminated unexpectedly. 
```

I have made a test case to reproduction this issue:

https://gist.github.com/Roiocam/a8aa79779164121075a7a9db9edeb4fb

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/668/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/669,https://api.github.com/repos/apache/pekko/issues/669,pekko,1907278032,669,backoff supervision lost stash message,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2023-09-21T15:44:39Z,2023-09-29T11:42:43Z,"The original issue on: https://stackoverflow.com/questions/75065817/akka-why-are-stashed-messages-with-backoff-supervision-lost

I have been verify it, seem like this is a bug.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/669/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/672,https://api.github.com/repos/apache/pekko/issues/672,pekko,1908124828,672,Add retry with condition support?,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-22T03:32:58Z,2023-09-22T06:46:20Z,"Motivation:

Currently, the retry in Patterns only retry for an exception ocurr, but there are cases the result itself is a failure but the async Future is `Success`. eg `Future<XXXResult<T>>` and the `XXXResult` has a method `isSuccsss` and `errorCode` and we want to retry for some errorCode.

How about add a` Predicate<V> shouldRetryPredicate` to the parameter list? I have something like this in my code base at work.

```
public static <V> V retryWithBackoff(
        final Callable<V> callable,
        final Predicate<V> shouldRetryPredicate,
        final int maxRetryTime,
        final int sleepInMills,
        final String hint) {
        ....
    }
```

And in  resilience4j-retry it's named `retryOnResult`:
```java
RetryConfig config = RetryConfig.custom()
  .maxAttempts(2)
  .waitDuration(Duration.ofMillis(1000))
  .retryOnResult(response -> response.getStatus() == 500)
  .retryOnException(e -> e instanceof WebServiceException)
  .retryExceptions(IOException.class, TimeoutException.class)
  .ignoreExceptions(BusinessException.class, OtherBusinessException.class)
  .failAfterMaxAttempts(true)
  .build();
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/672/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/672,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKd9e,pekko,1730797406,672,NA,jxnu-liguobin,29496873,梦境迷离,dreamylost@outlook.com,NA,2023-09-22T04:49:56Z,2023-09-22T04:49:56Z,"looks good

Is it in testkit?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKd9e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/672,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKf0Q,pekko,1730805008,672,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-22T05:02:55Z,2023-09-22T05:02:55Z,"> looks good
> 
> Is it in testkit?

Patterns.retry method","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKf0Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/672,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKmub,pekko,1730833307,672,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2023-09-22T05:43:58Z,2023-09-22T05:43:58Z,"It appears to have some overlap with `RetryFlow`. Is the akka stream being used in this particular case?

I have a suggestion regarding the naming, it would be betterto keep it consistent with RetryFlow's ""decideRetry"".

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nKmub/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/673,https://api.github.com/repos/apache/pekko/issues/673,pekko,1908125849,673,Update all the Deprecation since version to Pekko `1.0.0`?,He-Pin,501740,He-Pin(kerr),,OPEN,2023-09-22T03:34:32Z,2023-09-22T08:21:43Z,"Motivation:
As Pekko is a Akka fork, these versions were Akka versions, and now with the pekko 1.0.0 released, it maybe a good time to update these version to 1.0.0","{""url"": ""https://api.github.com/repos/apache/pekko/issues/673/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/673,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nLSy0,pekko,1731013812,673,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-22T08:21:43Z,2023-09-22T08:21:43Z,"The deprecation notices would be inaccurate and delay our ability to remove the deprecated code. I would vote -1 on this topic if it came to a vote. My preference is to start removing the deprecated code.

There is an open thread on lists.apache.org. Contentious issues should be discussed there.

https://lists.apache.org/thread/7ywn1obcq9d0661x5gfrcgrtm67jck5x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nLSy0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/678,https://api.github.com/repos/apache/pekko/issues/678,pekko,1910133836,678,Interceptor definitions hell,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2023-09-24T07:15:58Z,2023-09-29T11:42:35Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

The contemplation originated from PR #670. 

The implementation of the supervisor is based on a pre-defined BehaviorInterceptor.

When we define multiple interceptors for an actor, the code structure resembles a ""callback hell,"" and it would be beneficial to flatten it for better readability and maintainability.

The same improvement also needs to be made in the definition of the supervisor.

```scala
  val initialBehavior: Behavior[Any] = ???
      val interceptor1: BehaviorInterceptor[Any, Any] = ???
      val interceptor2: BehaviorInterceptor[Any, Any] = ???
      val interceptor3: BehaviorInterceptor[Any, Any] = ???
      val interceptor4: BehaviorInterceptor[Any, Any] = ???
      val interceptor5: BehaviorInterceptor[Any, Any] = ???
      val interceptor6: BehaviorInterceptor[Any, Any] = ???

      // Definition-hell
      val finalBehavior = Behaviors
        .intercept(() => interceptor6)(Behaviors
          .intercept(() => interceptor5)(Behaviors
            .intercept(() => interceptor4)(Behaviors
              .intercept(() => interceptor3)(Behaviors
                .intercept(() => interceptor2)(Behaviors
                  .intercept(() => interceptor1)(initialBehavior))))))

      // Or define like this
      val behavior1 = Behaviors.intercept(() => interceptor1)(initialBehavior)
      val behavior2 = Behaviors.intercept(() => interceptor2)(initialBehavior)
      val behavior3 = Behaviors.intercept(() => interceptor3)(initialBehavior)
      val behavior4 = Behaviors.intercept(() => interceptor4)(initialBehavior)
      val behavior5 = Behaviors.intercept(() => interceptor5)(initialBehavior)
      val behavior6 = Behaviors.intercept(() => interceptor6)(initialBehavior)

      //It would be better that have a flattened definition
      val finalBehavior = Behaviors.intercepts(initialBehavior)
        .applyInterceptor(interceptor1)
        .applyInterceptor(interceptor2)
        .applyInterceptor(interceptor3)
        .applyInterceptor(interceptor4)
        .applyInterceptor(interceptor5)
        .applyInterceptor(interceptor6)
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/678/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/678,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nRCAa,pekko,1732517914,678,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-09-24T08:18:55Z,2023-09-24T08:18:55Z,Need an immutable builder pattern for this.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nRCAa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/685,pekko,1917068325,685,issue with problematic zip headers in pekko-protobuf-v3 jar,pjfanning,11783444,PJ Fanning,,CLOSED,2023-09-28T09:18:24Z,2023-10-17T13:25:36Z,"Affects pekko-http nightly build. So far, only affects pekko-protobuf-v3 jars generated from the 'main' branch as opposed to the '1.0.x' branch. Doesn't happen with Java 8 but happens with Java 11 and 17.

https://github.com/apache/incubator-pekko-http/actions/runs/6243149241/job/16948118095

This is the openjdk issue: https://bugs.openjdk.org/browse/JDK-8313765 
See also: https://bugs.openjdk.org/browse/JDK-8315828

```
[error] scala.reflect.internal.FatalError: Error accessing /home/runner/.cache/coursier/v1/https/repository.apache.org/content/repositories/snapshots/org/apache/pekko/pekko-protobuf-v3_2.12/1.1.0-M0%2B78-9288d4c6-SNAPSHOT/pekko-protobuf-v3_2.12-1.1.0-M0%2B78-9288d4c6-SNAPSHOT.jar
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.$anonfun$list$3(AggregateClassPath.scala:113)
[error] 	at scala.collection.Iterator.foreach(Iterator.scala:943)
[error] 	at scala.collection.Iterator.foreach$(Iterator.scala:943)
[error] 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
[error] 	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
[error] 	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[error] 	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:101)
[error] 	at scala.tools.nsc.util.ClassPath.list(ClassPath.scala:36)
[error] 	at scala.tools.nsc.util.ClassPath.list$(ClassPath.scala:36)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:30)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader.doComplete(SymbolLoaders.scala:298)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:250)
[error] 	at scala.reflect.internal.Symbols$Symbol.completeInfo(Symbols.scala:1542)
[error] 	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
[error] 	at scala.reflect.internal.Mirrors$RootsBase.init(Mirrors.scala:258)
[error] 	at scala.tools.nsc.Global.rootMirror$lzycompute(Global.scala:74)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:72)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:44)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass$lzycompute(Definitions.scala:[301](https://github.com/apache/incubator-pekko-http/actions/runs/6243149241/job/16948118095#step:7:302))
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass(Definitions.scala:301)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.init(Definitions.scala:1511)
[error] 	at scala.tools.nsc.Global$Run.<init>(Global.scala:1213)
[error] 	at xsbt.ZincCompiler$ZincRun.<init>(CallbackGlobal.scala:80)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:163)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:134)
[error] 	at xsbt.CompilerBridge.run(CompilerBridge.scala:39)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:91)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$7(MixedAnalyzingCompiler.scala:193)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:248)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:183)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4$adapted(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:239)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:211)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5(Incremental.scala:180)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5$adapted(Incremental.scala:178)
[error] 	at sbt.internal.inc.Incremental$$anon$2.run(Incremental.scala:464)
[error] 	at sbt.internal.inc.IncrementalCommon$CycleState.next(IncrementalCommon.scala:116)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:56)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:52)
[error] 	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:263)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$incrementalCompile$8(Incremental.scala:419)
[error] 	at sbt.internal.inc.Incremental$.withClassfileManager(Incremental.scala:506)
[error] 	at sbt.internal.inc.Incremental$.incrementalCompile(Incremental.scala:406)
[error] 	at sbt.internal.inc.Incremental$.apply(Incremental.scala:172)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:488)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:332)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:425)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:137)
[error] 	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:2371)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$2(Defaults.scala:2321)
[error] 	at sbt.internal.server.BspCompileTask$.$anonfun$compute$1(BspCompileTask.scala:31)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:47)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:29)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:24)
[error] 	at sbt.internal.server.BspCompileTask$.compute(BspCompileTask.scala:31)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:2319)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[error] 	at java.base/java.lang.Thread.run(Thread.java:829)
[error] Caused by: java.io.IOException: Error accessing /home/runner/.cache/coursier/v1/https/repository.apache.org/content/repositories/snapshots/org/apache/pekko/pekko-protobuf-v3_2.12/1.1.0-M0%2B78-9288d4c6-SNAPSHOT/pekko-protobuf-v3_2.12-1.1.0-M0%2B78-9288d4c6-SNAPSHOT.jar
[error] 	at scala.reflect.io.FileZipArchive.scala$reflect$io$FileZipArchive$$openZipFile(ZipArchive.scala:190)
[error] 	at scala.reflect.io.FileZipArchive.root$lzycompute(ZipArchive.scala:238)
[error] 	at scala.reflect.io.FileZipArchive.root(ZipArchive.scala:235)
[error] 	at scala.reflect.io.FileZipArchive.allDirs$lzycompute(ZipArchive.scala:272)
[error] 	at scala.reflect.io.FileZipArchive.allDirs(ZipArchive.scala:272)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.findDirEntry(ZipArchiveFileLookup.scala:76)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.list(ZipArchiveFileLookup.scala:63)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.list$(ZipArchiveFileLookup.scala:62)
[error] 	at scala.tools.nsc.classpath.ZipAndJarClassPathFactory$ZipArchiveClassPath.list(ZipAndJarFileLookupFactory.scala:58)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.$anonfun$list$3(AggregateClassPath.scala:105)
[error] 	at scala.collection.Iterator.foreach(Iterator.scala:943)
[error] 	at scala.collection.Iterator.foreach$(Iterator.scala:943)
[error] 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
[error] 	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
[error] 	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[error] 	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:101)
[error] 	at scala.tools.nsc.util.ClassPath.list(ClassPath.scala:36)
[error] 	at scala.tools.nsc.util.ClassPath.list$(ClassPath.scala:36)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:30)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader.doComplete(SymbolLoaders.scala:298)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:250)
[error] 	at scala.reflect.internal.Symbols$Symbol.completeInfo(Symbols.scala:1542)
[error] 	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
[error] 	at scala.reflect.internal.Mirrors$RootsBase.init(Mirrors.scala:258)
[error] 	at scala.tools.nsc.Global.rootMirror$lzycompute(Global.scala:74)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:72)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:44)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass$lzycompute(Definitions.scala:301)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass(Definitions.scala:301)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.init(Definitions.scala:1511)
[error] 	at scala.tools.nsc.Global$Run.<init>(Global.scala:1213)
[error] 	at xsbt.ZincCompiler$ZincRun.<init>(CallbackGlobal.scala:80)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:163)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:134)
[error] 	at xsbt.CompilerBridge.run(CompilerBridge.scala:39)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:91)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$7(MixedAnalyzingCompiler.scala:193)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:248)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:183)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4$adapted(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:239)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:211)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5(Incremental.scala:180)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5$adapted(Incremental.scala:178)
[error] 	at sbt.internal.inc.Incremental$$anon$2.run(Incremental.scala:464)
[error] 	at sbt.internal.inc.IncrementalCommon$CycleState.next(IncrementalCommon.scala:116)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:56)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:52)
[error] 	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:263)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$incrementalCompile$8(Incremental.scala:419)
[error] 	at sbt.internal.inc.Incremental$.withClassfileManager(Incremental.scala:506)
[error] 	at sbt.internal.inc.Incremental$.incrementalCompile(Incremental.scala:406)
[error] 	at sbt.internal.inc.Incremental$.apply(Incremental.scala:172)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:488)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:332)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:425)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:137)
[error] 	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:2371)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$2(Defaults.scala:2321)
[error] 	at sbt.internal.server.BspCompileTask$.$anonfun$compute$1(BspCompileTask.scala:31)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:47)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:29)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:24)
[error] 	at sbt.internal.server.BspCompileTask$.compute(BspCompileTask.scala:31)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:2[319](https://github.com/apache/incubator-pekko-http/actions/runs/6243149241/job/16948118095#step:7:320))
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[error] 	at java.base/java.lang.Thread.run(Thread.java:829)
[error] Caused by: java.util.zip.ZipException: Invalid CEN header (invalid extra data field size for tag: 0x4000 at 787)
[error] 	at java.base/java.util.zip.ZipFile$Source.zerror(ZipFile.java:1769)
[error] 	at java.base/java.util.zip.ZipFile$Source.checkExtraFields(ZipFile.java:1274)
[error] 	at java.base/java.util.zip.ZipFile$Source.initCEN(ZipFile.java:1734)
[error] 	at java.base/java.util.zip.ZipFile$Source.<init>(ZipFile.java:1463)
[error] 	at java.base/java.util.zip.ZipFile$Source.get(ZipFile.java:1426)
[error] 	at java.base/java.util.zip.ZipFile$CleanableResource.<init>(ZipFile.java:742)
[error] 	at java.base/java.util.zip.ZipFile$CleanableResource.get(ZipFile.java:859)
[error] 	at java.base/java.util.zip.ZipFile.<init>(ZipFile.java:257)
[error] 	at java.base/java.util.zip.ZipFile.<init>(ZipFile.java:186)
[error] 	at java.base/java.util.jar.JarFile.<init>(JarFile.java:348)
[error] 	at scala.reflect.internal.JDK9Reflectors.newJarFile(JDK9Reflectors.java:62)
[error] 	at scala.reflect.io.FileZipArchive.scala$reflect$io$FileZipArchive$$openZipFile(ZipArchive.scala:185)
[error] 	at scala.reflect.io.FileZipArchive.root$lzycompute(ZipArchive.scala:238)
[error] 	at scala.reflect.io.FileZipArchive.root(ZipArchive.scala:235)
[error] 	at scala.reflect.io.FileZipArchive.allDirs$lzycompute(ZipArchive.scala:272)
[error] 	at scala.reflect.io.FileZipArchive.allDirs(ZipArchive.scala:272)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.findDirEntry(ZipArchiveFileLookup.scala:76)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.list(ZipArchiveFileLookup.scala:63)
[error] 	at scala.tools.nsc.classpath.ZipArchiveFileLookup.list$(ZipArchiveFileLookup.scala:62)
[error] 	at scala.tools.nsc.classpath.ZipAndJarClassPathFactory$ZipArchiveClassPath.list(ZipAndJarFileLookupFactory.scala:58)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.$anonfun$list$3(AggregateClassPath.scala:105)
[error] 	at scala.collection.Iterator.foreach(Iterator.scala:943)
[error] 	at scala.collection.Iterator.foreach$(Iterator.scala:943)
[error] 	at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
[error] 	at scala.collection.IterableLike.foreach(IterableLike.scala:74)
[error] 	at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[error] 	at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:101)
[error] 	at scala.tools.nsc.util.ClassPath.list(ClassPath.scala:36)
[error] 	at scala.tools.nsc.util.ClassPath.list$(ClassPath.scala:36)
[error] 	at scala.tools.nsc.classpath.AggregateClassPath.list(AggregateClassPath.scala:30)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$PackageLoader.doComplete(SymbolLoaders.scala:298)
[error] 	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:250)
[error] 	at scala.reflect.internal.Symbols$Symbol.completeInfo(Symbols.scala:1542)
[error] 	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
[error] 	at scala.reflect.internal.Mirrors$RootsBase.init(Mirrors.scala:258)
[error] 	at scala.tools.nsc.Global.rootMirror$lzycompute(Global.scala:74)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:72)
[error] 	at scala.tools.nsc.Global.rootMirror(Global.scala:44)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass$lzycompute(Definitions.scala:301)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.ObjectClass(Definitions.scala:301)
[error] 	at scala.reflect.internal.Definitions$DefinitionsClass.init(Definitions.scala:1511)
[error] 	at scala.tools.nsc.Global$Run.<init>(Global.scala:1213)
[error] 	at xsbt.ZincCompiler$ZincRun.<init>(CallbackGlobal.scala:80)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:163)
[error] 	at xsbt.CachedCompiler0.run(CompilerBridge.scala:134)
[error] 	at xsbt.CompilerBridge.run(CompilerBridge.scala:39)
[error] 	at sbt.internal.inc.AnalyzingCompiler.compile(AnalyzingCompiler.scala:91)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$7(MixedAnalyzingCompiler.scala:193)
[error] 	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.timed(MixedAnalyzingCompiler.scala:248)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4(MixedAnalyzingCompiler.scala:183)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.$anonfun$compile$4$adapted(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.JarUtils$.withPreviousJar(JarUtils.scala:239)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compileScala$1(MixedAnalyzingCompiler.scala:163)
[error] 	at sbt.internal.inc.MixedAnalyzingCompiler.compile(MixedAnalyzingCompiler.scala:211)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileInternal$1$adapted(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5(Incremental.scala:180)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$apply$5$adapted(Incremental.scala:178)
[error] 	at sbt.internal.inc.Incremental$$anon$2.run(Incremental.scala:464)
[error] 	at sbt.internal.inc.IncrementalCommon$CycleState.next(IncrementalCommon.scala:116)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:56)
[error] 	at sbt.internal.inc.IncrementalCommon$$anon$1.next(IncrementalCommon.scala:52)
[error] 	at sbt.internal.inc.IncrementalCommon.cycle(IncrementalCommon.scala:263)
[error] 	at sbt.internal.inc.Incremental$.$anonfun$incrementalCompile$8(Incremental.scala:419)
[error] 	at sbt.internal.inc.Incremental$.withClassfileManager(Incremental.scala:506)
[error] 	at sbt.internal.inc.Incremental$.incrementalCompile(Incremental.scala:406)
[error] 	at sbt.internal.inc.Incremental$.apply(Incremental.scala:172)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileInternal(IncrementalCompilerImpl.scala:534)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.$anonfun$compileIncrementally$1(IncrementalCompilerImpl.scala:488)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.handleCompilationError(IncrementalCompilerImpl.scala:332)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compileIncrementally(IncrementalCompilerImpl.scala:425)
[error] 	at sbt.internal.inc.IncrementalCompilerImpl.compile(IncrementalCompilerImpl.scala:137)
[error] 	at sbt.Defaults$.compileIncrementalTaskImpl(Defaults.scala:2371)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$2(Defaults.scala:2[321](https://github.com/apache/incubator-pekko-http/actions/runs/6243149241/job/16948118095#step:7:322))
[error] 	at sbt.internal.server.BspCompileTask$.$anonfun$compute$1(BspCompileTask.scala:31)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:47)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:29)
[error] 	at sbt.internal.io.Retry$.apply(Retry.scala:24)
[error] 	at sbt.internal.server.BspCompileTask$.compute(BspCompileTask.scala:31)
[error] 	at sbt.Defaults$.$anonfun$compileIncrementalTask$1(Defaults.scala:2319)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[error] 	at java.base/java.lang.Thread.run(Thread.java:829)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/685/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5no-PK,pekko,1738793930,685,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-28T09:23:43Z,2023-09-28T09:23:43Z,"We may need to go to sbt-assembly team to discuss this. pekko-protobuf-v3 jar is generated using sbt-assembly.

The issue may be best addressed by getting a change in sbt-assembly to avoid zip64 format.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5no-PK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owQlj,pekko,1757481315,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T11:32:43Z,2023-10-11T11:32:43Z,"sbt-assembly uses the JDK zip filesystem to create jars. So, it's the JDK that creates the broken zip archives and it seems the problem has already been fixed in more recent JDKs (though, of course, it might be a problem in older JDKs that might not be maintained to the same degree).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owQlj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owRDz,pekko,1757483251,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T11:34:07Z,2023-10-11T11:34:07Z,"Or, wait the fix was for flagging the problem not for fixing the generation...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owRDz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owSU7,pekko,1757488443,685,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-11T11:37:55Z,2023-10-11T11:37:55Z,"> Or, wait the fix was for flagging the problem not for fixing the generation...

I'm surprised that the JDK changes are not causing more problems. Our CI builds that create the pekko snapshot jars should be using the latest JDKs - as we can see the pekko-http CI builds are using the latest JDKs too and hitting the issue with the new zip64 checks.

We could probably temporarily fix the tests by forcing the pekko-http tests to use older versions of the JDKs (from a few months ago) but it seems better to see if we can somehow fix the jar generation.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owSU7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owdiy,pekko,1757534386,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T11:57:01Z,2023-10-11T11:57:01Z,"Since the issue is with the protobuf-v3 jar, I guess it might be related to sharding / jarjarabrams which seems to use ant internally...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owdiy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owiVR,pekko,1757554001,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-11T12:10:11Z,2023-10-11T12:10:11Z,"> Since the issue is with the protobuf-v3 jar, I guess it might be related to sharding / jarjarabrams which seems to use ant internally...

sbt-assembly uses the `FileSystem` to create jars and the solution I have is to use Apache Commons compression lib which allows you to toggle the Zip64 encoding.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owiVR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owiX3,pekko,1757554167,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-11T12:10:18Z,2023-10-11T12:10:18Z,"> Since the issue is with the protobuf-v3 jar, I guess it might be related to sharding / jarjarabrams which seems to use ant internally...

sbt-assembly uses the `FileSystem` to create jars and the solution I have is to use Apache Commons compression lib which allows you to toggle the Zip64 encoding.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owiX3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owjk9,pekko,1757559101,685,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-11T12:13:44Z,2023-10-11T12:13:44Z,Seems like a good idea to use commons-compress. I've worked on Apache POI and the modern Microsoft file formats are basically zip files. We've had to switch to commons-compress because its zip support is superior to the JDK equivalents. Zip64 issues being one of the main drivers as to why we had to switch.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owjk9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owl0t,pekko,1757568301,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T12:19:51Z,2023-10-11T12:19:51Z,"We have at least 3 components dealing with jar files: assembly, jarjarabrams for sharding and also sbt-reproducible-builds. Can someone try to reproduce the issue? I cannot reproduce it with the jars I build locally. You can use `zipinfo -v <jar>` which will output errors to stderr.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owl0t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owq67,pekko,1757589179,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T12:34:01Z,2023-10-11T12:34:01Z,"Ok, indeed, I can reproduce it and the broken artifact is the one in `stripped`: `pekko/protobuf-v3/target/scala-2.13/stripped/pekko-protobuf-v3_2.13-1.1.0-M0+101-1b1f5722-SNAPSHOT.jar`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5owq67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ows8k,pekko,1757597476,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-11T12:38:54Z,2023-10-11T12:38:54Z,"> We have at least 3 components dealing with jar files: assembly, jarjarabrams for sharding and also sbt-reproducible-builds. Can someone try to reproduce the issue? I cannot reproduce it with the jars I build locally. You can use `zipinfo -v <jar>` which will output errors to stderr.

I think in this case it's the main jar generation in sbt-assembly but I have to confirm","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ows8k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oxHMY,pekko,1757704984,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T13:29:48Z,2023-10-11T13:29:48Z,"Btw. the issue in the latest jar is not related to zip64 but a generally broken zip extra field entry.

Maybe @raboof has an idea what could be broken about the stripper?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oxHMY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oxzOT,pekko,1757885331,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-11T14:58:03Z,2023-10-11T14:58:03Z,"Ok, let's redeem all of the components above and claim it on the arch nemesis. I went down into the abyss and read the zip file handling code of the JDK, commons-compress, and more, one worse than the other and now that?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oxzOT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3mRY,pekko,1759405144,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-12T11:10:44Z,2023-10-12T11:10:44Z,"> one worse than the other and now that?

Im confused?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3mRY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3wkE,pekko,1759447300,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-12T11:42:37Z,2023-10-12T11:42:37Z,"On another note, this may also be related to https://github.com/raboof/sbt-reproducible-builds/issues/277","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3wkE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3_Zw,pekko,1759508080,685,NA,jrudolph,9868,Johannes Rudolph,johannes.rudolph@gmail.com,NA,2023-10-12T12:25:46Z,2023-10-12T12:25:46Z,"> > one worse than the other and now that?
> 
> Im confused?

Sorry, that was obscure... The problem is caused by osgi.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o3_Zw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/685,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o4JZo,pekko,1759549032,685,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-12T12:47:40Z,2023-10-12T12:47:40Z," > Sorry, that was obscure... The problem is caused by osgi.

No worries, I thought I was the only obscure one","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5o4JZo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/687,https://api.github.com/repos/apache/pekko/issues/687,pekko,1917484460,687,pekko nightly publish job has stopped working - issues with compiling with scala 2.12,pjfanning,11783444,PJ Fanning,,CLOSED,2023-09-28T12:51:52Z,2023-09-28T16:21:37Z,"Started about 3 days ago.

Example: https://github.com/apache/incubator-pekko/actions/runs/6319683803/job/17161026074","{""url"": ""https://api.github.com/repos/apache/pekko/issues/687/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/687,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nsNZR,pekko,1739642449,687,NA,pjfanning,11783444,PJ Fanning,,NA,2023-09-28T16:21:36Z,2023-09-28T16:21:36Z,PR #682 merged - 1.1.0-M0+95-6f52c85d-SNAPSHOT is a full new snapshot release since this merge,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5nsNZR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/703,https://api.github.com/repos/apache/pekko/issues/703,pekko,1935967159,703,Update to protobuf has broken pekko-http,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-10-10T18:33:26Z,2023-10-10T18:43:46Z,"The PR at https://github.com/apache/incubator-pekko/pull/489 has broken pekko-http. The pekko-http nightly tests (which test against latest pekko snapshots) are failing with 

```
[error] ## Exception when compiling 378 sources to /home/runner/work/incubator-pekko-http/incubator-pekko-http/http-core/target/scala-2.12/classes
[error] scala.reflect.internal.FatalError: Error accessing /home/runner/.cache/coursier/v1/https/repository.apache.org/content/repositories/snapshots/org/apache/pekko/pekko-protobuf-v3_2.12/1.1.0-M0%2B101-1b1f5722-SNAPSHOT/pekko-protobuf-v3_2.12-1.1.0-M0%2B101-1b1f5722-SNAPSHOT.jar
```

See https://github.com/apache/incubator-pekko-http/actions/runs/6463888406/job/17547697513 as an example

@pjfanning ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/703/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/703,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqqYI,pekko,1756014088,703,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-10T18:37:55Z,2023-10-10T18:37:55Z,"#489 is not about pekko-protobuf-v3 jar - it is about the old pekko-protobuf jar (note no `-v` in name).

The real issue is #685 - which I think is a bug in sbt-assembly. The real issue is new code added to the latest Java 11 and 17 releases and sbt-assembly needs to react.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqqYI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/703,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqrms,pekko,1756019116,703,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-10T18:40:02Z,2023-10-10T18:40:02Z,https://github.com/sbt/sbt-assembly/issues/506,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqrms/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/703,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqt7x,pekko,1756028657,703,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-10T18:43:45Z,2023-10-10T18:43:45Z,Closing as duplicate to https://github.com/apache/incubator-pekko/issues/685,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5oqt7x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/745,pekko,1948998537,745,Classloader layering strategy failing with protobuf-v3,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-10-18T06:58:58Z,2023-10-20T16:42:52Z,"So https://github.com/apache/incubator-pekko/pull/742 did happen to fix the osgi corrupted jar issue however now with the jar being successfully loaded there appears to be another unrelated bug that is due to how the classes are laid out in the jar, i.e.

```
[error] Test suite org.apache.pekko.http.scaladsl.server.directives.RespondWithDirectivesSpec failed with java.lang.NoClassDefFoundError: org/apache/pekko/protobufv3/internal/MessageLite.
[error] This may be due to the ClassLoaderLayeringStrategy (ScalaLibrary) used by your task.
[error] To improve performance and reduce memory, sbt attempts to cache the class loaders used to load the project dependencies.
[error] The project class files are loaded in a separate class loader that is created for each test run.
[error] The test class loader accesses the project dependency classes using the cached project dependency classloader.
[error] With this approach, class loading may fail under the following conditions:
[error] 
[error]  * Dependencies use reflection to access classes in your project's classpath.
[error]    Java serialization/deserialization may cause this.
[error]  * An open package is accessed across layers. If the project's classes access or extend
[error]    jvm package private classes defined in a project dependency, it may cause an IllegalAccessError
[error]    because the jvm enforces package private at the classloader level.
[error] 
[error] These issues, along with others that were not enumerated above, may be resolved by changing the class loader layering strategy.
[error] The Flat and ScalaLibrary strategies bundle the full project classpath in the same class loader.
[error] To use one of these strategies, set the  ClassLoaderLayeringStrategy key
[error] in your configuration, for example:
[error] 
[error] set http-tests / Test / classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.ScalaLibrary
[error] set http-tests / Test / classLoaderLayeringStrategy := ClassLoaderLayeringStrategy.Flat
[error] 
[error] See ClassLoaderLayeringStrategy.scala for the full list of options.
[error] Test suite org.apache.pekko.http.scaladsl.server.RouteResultSpec failed with java.lang.NoClassDefFoundError: org/apache/pekko/protobufv3/internal/MessageLite.
```

Which is an exert from https://github.com/apache/incubator-pekko-http/actions/runs/6555330770/job/17803594748 .

Ininitial suspicions that this may be due to sbt-assembler but more work is needed to isolate. I will backport https://github.com/apache/incubator-pekko/pull/742 onto the 1.0.x branch to confirm the theory that its no longer related to osgi.

@pjfanning @jrudolph @raboof","{""url"": ""https://api.github.com/repos/apache/pekko/issues/745/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pbtl2,pekko,1768872310,745,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-18T16:13:11Z,2023-10-18T16:13:11Z,"So after the merge of https://github.com/apache/incubator-pekko/pull/746 into the `1.0.x` branch, I made a `+publishLocal` of pekko and then ran the nightly pekko http test suite against it, i.e.

```
sbt -Dpekko.http.build.pekko.version=1.0.1+45-21561418-SNAPSHOT ""++ 2.12.18"" Test/compile
sbt -Dpekko.http.parallelExecution=false -Dpekko.test.timefactor=2 -Dpekko.http.build.pekko.version=1.0.1+45-21561418-SNAPSHOT ""++ 2.12.18"" mimaReportBinaryIssues test
```

where `1.0.1+45-21561418-SNAPSHOT` is that published pekko `1.0.x` snapshot and it does indeed fail with the latest update to sbt-osgi so I was incorrect before and I think this is the root cause.

I believe this may be due to the jdk9 classes issue which was referenced in comments.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5pbtl2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5phcLo,pekko,1770373864,745,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-19T09:02:02Z,2023-10-19T09:02:02Z,"So I just did some bisecting and I can confirm that the issue is not with the latest sbt-osgi jar fix (i.e. https://github.com/sbt/sbt-osgi/pull/81). To confirm this I checked out revision `958c92163b` of the pekko `1.0.x` branch which was pointing to sbt-osgi 0.9.4 and the older sbt-assembler (i.e. the latest version of pekko 1.0.x that worked without issues) and I created a patched version of sbt-osgi that contained https://github.com/sbt/sbt-osgi/pull/81.

I then ran the pekko-http nightly tests against the locally deployed pekko with that sbt-osgi 0.9.4 patch version and the tests passed.

Due to this, I think the core reason behind the regression is that https://github.com/apache/incubator-pekko/blob/69cc4eaa3f4bdef2665406b88e831aeb12f553b6/project/plugins.sbt#L16 was never fixed, so I will try looking into that as the next step. @raboof ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5phcLo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5phoPg,pekko,1770423264,745,NA,pjfanning,11783444,PJ Fanning,,NA,2023-10-19T09:28:44Z,2023-10-19T09:28:44Z,Would a sbt-osgi 0.9.4.1 release make sense? The only change would be backporting the recent jar tool PR.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5phoPg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ph1IC,pekko,1770476034,745,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-19T09:58:34Z,2023-10-19T09:58:34Z,"I think that sbt-assembly update may be the root cause, ill do a little more digging","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ph1IC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5po5Na,pekko,1772327770,745,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-20T08:44:16Z,2023-10-20T08:44:16Z,"@pjfanning So I can def confirm that there was a regression in sbt osgi from 0.9.4 to 0.9.5. I just tested it with 0.9.5 + corrupted jar patch fix and it fails where as 0.9.4 + corrupted jar patch fix works without issues.

I will make an issue on sbt-osgi to see if we can make a release of 0.9.4 with the corrupted jar patch so that it at least unblocks pekko and hence give us some breathing room to find the  reason behind the regression","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5po5Na/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/745,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5po7wZ,pekko,1772338201,745,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-10-20T08:51:45Z,2023-10-20T08:51:45Z,Upstream issue created at https://github.com/sbt/sbt-osgi/issues/93,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5po7wZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/750,https://api.github.com/repos/apache/pekko/issues/750,pekko,1952647037,750,japi for Custom shard allocation,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2023-10-19T16:26:55Z,2023-10-19T16:26:55Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

It is hard to implemente `ShardAllocationStrategy` on java, it have to use too much ""Converter"" in there.

In our case, we have something like Kafka ShardAllocationStrategy, it have nice distribution both on topic and partition, this cannot be done under the default `LeastShardAllocationStrategy`. 

Don't know much about`ExternalShardAllocationStrategy`, This may be a duplicate part. 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/750/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/757,https://api.github.com/repos/apache/pekko/issues/757,pekko,1955454810,757,Use newer sbt-osgi for `main` branch,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2023-10-21T11:39:04Z,2024-01-09T18:00:35Z,"With https://github.com/apache/incubator-pekko/issues/745 we ended up creating a patched sbt-osgi v0.9.4 which contained the corrupted jar fix that is now used for both `main` and `1.0.x`. While there is a strong argument that for the `1.0.x` branch of Pekko we should leave sbt-osgi on `0.9.4-INVALID-CEN-JAR-PATCH` indefinitly, for `main` we ideally should be using the newer sbt-osgi because if we find more issues with sbt-osgi we won't be able to use it until we fix the regression that is now present in the latest version of sbt-osgi. Its better that we nip this in the bud sooner rather than later since we have some breathing space now.

As can be seen at https://github.com/sbt/sbt-osgi/issues/93#issuecomment-1772818411, there are apparently fixes for the duplicate classes being placed in the osgi package creating the error described at https://github.com/apache/incubator-pekko/issues/745#issue-1948998537 so we should apply these fixes + create new releases of sbt-osgi so that we can properly solve the regression as part of https://github.com/sbt/sbt-osgi/issues/93#issuecomment-1772729166 .

Pinging @pjfanning @lefou @romainreuillon","{""url"": ""https://api.github.com/repos/apache/pekko/issues/757/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/757,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wL3vt,pekko,1882160109,757,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-09T01:57:35Z,2024-01-09T01:57:35Z,Did an investigation upstream at https://github.com/sbt/sbt-osgi/issues/102,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wL3vt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/777,https://api.github.com/repos/apache/pekko/issues/777,pekko,1977817261,777,Add pekko-remote-netty4 to 1.0.x branch,pjfanning,11783444,PJ Fanning,,CLOSED,2023-11-05T14:40:27Z,2024-05-11T00:18:18Z,"* backport netty 4 support from main branch
* keep existing pekko-remote as is - still supporting netty 3
* backported code would be in. 1.0 only module - 1.1 release does not need it because pekko-remote uses netty 4 there
* it could be a long time before we do a full 1.1.0 release and netty 3 has a lot of security issues
* pekko-remote-netty4 would not need artery support - use pekko-remote if you want artery

Wdyt @kerr ? I think there might be some resistance to this but Apache Flink would like netty 4.

An alternative would be add the netty 4 code to pekko-remote in 1.0 branch. Netty 3 uses different package names so this will not cause compile issues. The artery, netty3 and netty4 dependencies would all be `provided` scope. We could add netty4 as a config value alongside the existing Netty value. In pekko 1.1, we could continue to support netty4 config value but it would just be a synonym for netty.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/777/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/786,https://api.github.com/repos/apache/pekko/issues/786,pekko,1988899756,786,add Source/Flow.mapWithResource,pjfanning,11783444,PJ Fanning,,CLOSED,2023-11-11T11:18:01Z,2024-01-19T09:11:55Z,"Based on https://github.com/apache/incubator-pekko/discussions/553

I think we have covered the other functions mentioned there - mapAsyncPartitioned and contramap

@He-Pin no hurry on this but I'm just tracking it a nice-to-have for the v1.1.0 release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/786/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/795,pekko,1998600420,795,investigate ClusterActorLoggingSpec,pjfanning,11783444,PJ Fanning,,CLOSED,2023-11-17T08:58:53Z,2024-07-24T12:57:12Z,"possibly related to #771

* passes on laptop both for 1.0.x and main branches
* failed in nightly build but passed when rerun
* seems to pass when nightly build is run using the 1.0.x branch - https://github.com/apache/incubator-pekko/actions/runs/6902135347/job/18778244515","{""url"": ""https://api.github.com/repos/apache/pekko/issues/795/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yH4Ph,pekko,1914668001,795,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T13:11:15Z,2024-01-29T13:11:15Z,link : https://github.com/apache/incubator-pekko/issues/929,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yH4Ph/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FVf0C,pekko,2237005058,795,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-18T16:15:54Z,2024-07-18T16:15:54Z,still flaky in nightly builds: https://github.com/apache/pekko/actions/runs/9993956065/job/27622606159,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FVf0C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FpcH1,pekko,2242232821,795,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-22T07:02:19Z,2024-07-22T07:02:19Z,"Because sometimes the actor don't put value into MDC:

```diff
LoggingEvent(
		INFO,
		org.apache.pekko.cluster.typed.ClusterActorLoggingSpec,
		ClusterActorLoggingSpec-pekko.actor.default-dispatcher-11,
		Starting,
		1721630292397,
		None,	
		None,
+		Map(pekkoAddress -> pekko.tcp://ClusterActorLoggingSpec@10.1.0.31:42905, pekkoSource -> pekko://ClusterActorLoggingSpec/user/$a, sourceActorSystem -> ClusterActorLoggingSpec)
)
LoggingEvent(
		INFO,
		org.apache.pekko.cluster.typed.ClusterActorLoggingSpec,
		ClusterActorLoggingSpec-pekko.actor.default-dispatcher-3,
		Starting,
		1721631006935,
		None,
		None,
-		Map()
)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FpcH1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FqaHC,pekko,2242486722,795,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-07-22T09:19:41Z,2024-07-22T09:19:41Z,"> Because sometimes the actor don't put value into MDC

Doesn't that mean the test caught a bug? ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FqaHC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FwqBH,pekko,2244124743,795,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-23T02:20:10Z,2024-07-23T02:20:10Z,"> Doesn't that mean the test caught a bug?

It is flaky depending on how fast SLF4J initialization.

If it loads slower, it will use SubstituteLogger(which uses BasicMDCAdapter) as a fallback.

![截屏2024-07-23 09 32 21](https://github.com/user-attachments/assets/bd646c88-1f44-4752-8f4c-4578fbad1f78)

if we use MDC earlier than SLF4J initialization, the MDCAdapter may no chance to update it.

![image](https://github.com/user-attachments/assets/0bdabb73-c0f3-4dba-bb42-11b3b96d180f)

![截屏2024-07-23 09 24 52](https://github.com/user-attachments/assets/1be1b38d-cf39-4142-ad35-73ae9e034e13)



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FwqBH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/795,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-14x,pekko,2247843377,795,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-24T12:56:00Z,2024-07-24T12:56:00Z,won't reopen it because ci is passing: https://github.com/apache/pekko/actions/runs/10076913173/job/27858277926,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-14x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/806,https://api.github.com/repos/apache/pekko/issues/806,pekko,2003725637,806,find alternative to unmaintained docker-client lib used in tests,pjfanning,11783444,PJ Fanning,,CLOSED,2023-11-21T08:31:34Z,2024-01-12T16:12:41Z,"See https://github.com/spotify/docker-client

We are already having to force upgrades to many of its transitive dependencies - due to CVEs in those dependencies.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/806/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/806,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5va6Ej,pekko,1869324579,806,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-26T07:22:46Z,2023-12-26T07:22:46Z,"what do you think of docker-java https://github.com/docker-java/docker-java?
docker-client is no longer updated.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5va6Ej/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/806,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v0cDV,pekko,1876017365,806,NA,samueleresca,8921095,Samuele Resca,samuele.resca@gmail.com,NA,2024-01-03T21:51:01Z,2024-01-03T21:51:01Z,"> what do you think of docker-java https://github.com/docker-java/docker-java? docker-client is no longer updated.

docker-java definetly looks a better option than docker-client:
- docker-client is deprecated
- docker-java seems maintained and more active

I'm not sure about the amount of work for doing the replacement, but I can give a try to docker-java in the next days / weekend","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v0cDV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/809,https://api.github.com/repos/apache/pekko/issues/809,pekko,2005956705,809,investigate license issue with /actor-tests/src/test/bind/etc/ files,pjfanning,11783444,PJ Fanning,,OPEN,2023-11-22T09:50:09Z,2023-12-01T10:45:38Z,"See https://lists.apache.org/thread/dv11y9f3sn388dw7tfdw22pkg3bq7tzs

The [bind.keys](https://github.com/apache/incubator-pekko/blob/main/actor-tests/src/test/bind/etc/bind.keys) file seems to be based on https://github.com/isc-projects/bind9/blob/main/bind.keys

There may be more files that have copies of code from https://github.com/isc-projects/bind9 (I haven't found other matches in a quick search)

We can't include Mozilla Public License code because it has copyleft implications.

Added in https://github.com/akka/akka/pull/25690
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/809/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/809,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5soDTp,pekko,1822438633,809,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-22T09:52:13Z,2023-11-22T09:52:13Z,@raboof you worked on the Akka PR. This was a few years ago but I'm wondering if you are aware of the key in the [bind.keys](https://github.com/apache/incubator-pekko/blob/main/actor-tests/src/test/bind/etc/bind.keys) file and if it is something that we can change or remove?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5soDTp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/809,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5soOoN,pekko,1822485005,809,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-22T10:19:51Z,2023-11-22T10:19:51Z,"I'm not 100% sure but so far, when I run `actor-tests` locally, it doesn't seem to need any of these files.

Edit: the CI run failed when I removed all the files but the bind.keys file has been removed without any apparent issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5soOoN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/809,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5spCKs,pekko,1822696108,809,NA,pjfanning,11783444,PJ Fanning,,NA,2023-11-22T12:38:28Z,2023-11-22T12:38:28Z,"The keys in the bind.keys file seem to be documented on public web sites, including:
* https://www.icann.org/dns-resolvers-updating-latest-trust-anchor
* https://www.mail-archive.com/bind-users@lists.isc.org/msg33463.html
* https://archive.nanog.org/sites/default/files/2_Punky_Duero_Root_Zone_DNSSEC_KSK_Rollover.pdf

This doesn't mean that the keys are not MPL but we can check around to see if keys are public domain or licensed more permissively.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5spCKs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/809,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tbPKe,pekko,1835856542,809,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-01T10:35:25Z,2023-12-01T10:35:25Z,"The remaining files are likely to be copied from debian packaging - see https://wiki.debian.org/Bind9

https://lists.isc.org/pipermail/bind-users/2023-November/108133.html

https://packages.debian.org/buster/i386/bind9/filelist

https://www.apt-browse.org/browse/ubuntu/trusty-security/main/amd64/bind9/1:9.9.5.dfsg-3ubuntu0.19/file/usr/share/doc/bind9/copyright","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5tbPKe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/829,pekko,2022424878,829,Support building with Windows,pjfanning,11783444,PJ Fanning,,OPEN,2023-12-03T08:41:21Z,2024-01-24T08:45:17Z,We have had reports of issues building (from source) with Windows. I don't have access to a Windows machine to verify.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/829/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uEDbx,pekko,1846556401,829,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-08T05:10:56Z,2023-12-08T05:10:56Z,"I have a windows compute,what can I do, just compile?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uEDbx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uFG0z,pekko,1846832435,829,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-08T09:18:19Z,2023-12-08T09:18:19Z,"https://github.com/apache/incubator-pekko/#building-from-source has the build instrucations.

it would be good to at least get `sbt compile` tested","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uFG0z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uFkm9,pekko,1846954429,829,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-08T10:51:58Z,2023-12-08T10:51:58Z,"I'm using windows, I think it's OK, let me check and report back, it works.
![image](https://github.com/apache/incubator-pekko/assets/501740/b458de9a-abb0-4322-bb9f-2f7eb068034c)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uFkm9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uGa3g,pekko,1847176672,829,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-08T13:36:25Z,2023-12-08T13:36:25Z,"I also test with `sbt compile` on win 10,and I haven't found any errors.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uGa3g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xsjPR,pekko,1907504081,829,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-24T07:17:27Z,2024-01-24T07:17:27Z,Related on #986? could you give more information about this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xsjPR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xsmDj,pekko,1907515619,829,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T07:21:05Z,2024-01-24T07:21:05Z,"> Related on #986? could you give more information about this?

Its unrelated to https://github.com/apache/incubator-pekko/issues/986 . The context of this issue is that at one point in time someone was verifying the Pekko project as part of the release process and they were doing it on the Windows machine and there were problems with that.

It could be that the person was testing the src distribution (i.e not from git repo) which is why it didn't work on windows, but this is speculation. I would actually close this ticket since it isn't specified properly, @pjfanning wdyt?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xsmDj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xs1P9,pekko,1907577853,829,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-24T07:50:18Z,2024-01-24T07:50:18Z,"> > Related on #986? could you give more information about this?
> 
> Its unrelated to #986 . The context of this issue is that at one point in time someone was verifying the Pekko project as part of the release process and they were doing it on the Windows machine and there were problems with that.
> 
> It could be that the person was testing the src distribution (i.e not from git repo) which is why it didn't work on windows, but this is speculation. I would actually close this ticket since it isn't specified properly, @pjfanning wdyt?

I know, I'm just trying to throw a stone and make some waves. 

I have encountered issues affected by line separators multiple times in my career, especially when developers cross-use Windows and Unix-like systems.

It would be better to have more context information to help advance this issue and resolve it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xs1P9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xs3TD,pekko,1907586243,829,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T07:57:15Z,2024-01-24T07:57:15Z,"> I know, I'm just trying to throw a stone and make some waves.
> 
> I have encountered issues affected by line separators multiple times in my career, especially when developers cross-use Windows and Unix-like systems.
> 
> It would be better to have more context information to help advance this issue and resolve it.

The src distributions are listed [here](https://pekko.apache.org/download.html) so I guess you can try downloading the [latest pekko src distribution](https://www.apache.org/dyn/closer.lua/incubator/pekko/1.0.2/apache-pekko-1.0.2-incubating-src-20231115.tgz) and seeing if it compiles/test passes on Windows","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xs3TD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xtHY_,pekko,1907652159,829,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T08:43:24Z,2024-01-24T08:43:24Z,"I'm developing on windows 11, I think it works now. but a window/ARM(where concurrency code matters) CI should be nice.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xtHY_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/829,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xtICz,pekko,1907654835,829,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T08:45:16Z,2024-01-24T08:45:16Z,"> I'm developing on windows 11, I think it works now. but a window/ARM(where concurrency code matters) CI should be nice.

The critical distinction here is the src distribution which tbh I would be surprised if anyone developed with, let alone download and used outside of voting for a Pekko release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xtICz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/833,https://api.github.com/repos/apache/pekko/issues/833,pekko,2028821256,833,Consider publishing changelog in a RenovateBot (and others) compatible way,gaeljw,18280708,Gaël Jourdan-Weil,,CLOSED,2023-12-06T15:33:27Z,2024-05-11T00:17:33Z,"I'm using RenovateBot to update my dependencies automatically. When suggesting an update, it includes the changelog if found.

Unfortunately, for Pekko dependencies, it's not able to pull the changelog because the changelog is not published in a place Renovate expects to find it.

It would be nice if the changelog could be publisher somewhere Renovate (and other similar tools like dependabot, Scala Steward?) could pull it.

AFAIK Renovate supports at least the following:
- a file `CHANGELOG.md` in the Git repo (assuming the repo URL is published in the POM)
- or, a file `RELEASE-NOTES.md` in the Git repo
- or Github Releases

The 3rd option with Github Releases is maybe something that could be relatively easily be automated?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/833/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/833,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t3Kt4,pekko,1843178360,833,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-06T15:50:52Z,2023-12-06T15:50:52Z,"The release notes are here: https://pekko.apache.org/docs/pekko/current/release-notes/index.html

For other Pekko modules, it is best to navigate via https://pekko.apache.org/modules.html

In theory, we could add a CHANGELOG.md to each repo that just provides a link to where that repo's related release notes page exists on https://pekko.apache.org

The ASF prefers that our documentation is hosted on apache.org and not dependent on GitHub.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t3Kt4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/833,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t4AfQ,pekko,1843398608,833,NA,gaeljw,18280708,Gaël Jourdan-Weil,,NA,2023-12-06T18:00:05Z,2023-12-06T18:00:05Z,"Makes sense to host the changelog on apache.org as source of truth. But maybe it could be cross-posted to GitHub releases? As you suggest, I think a link to Pekko website from GitHub releases could be enough I guess.

Anyway thanks for the links, I know where to find the release notes now :)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t4AfQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/834,https://api.github.com/repos/apache/pekko/issues/834,pekko,2030240311,834,Potentially unnecessary `DnsClient` warning logs,SakulK,1440804,Łukasz Krenski,,CLOSED,2023-12-07T09:04:26Z,2023-12-23T10:32:16Z,"First of all, thank you for all you work with this fork :heart: 
`org.apache.pekko.io.dns.internal.DnsClient` is logging warnings with messages like this:
```
DNS response id -32068 question [Question(<redacted>,RecordType(28,AAAA),RecordClass(1,IN))] question asked [Question(<redacted>,RecordType(28,AAAA),RecordClass(1,IN))]
```
Both questions are exactly the same, which is expected I assume. It seems to be coming from here:
https://github.com/apache/incubator-pekko/blob/main/actor/src/main/scala/org/apache/pekko/io/dns/internal/DnsClient.scala#L172-L175
Maybe this log should be at the debug level instead?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/834/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/834,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t-Mrb,pekko,1845021403,834,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-07T09:49:02Z,2023-12-07T09:49:02Z,thanks - I've created #835 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5t-Mrb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/842,https://api.github.com/repos/apache/pekko/issues/842,pekko,2035377554,842,Spin loop in TLS Actor causes CPU to go to 100%,michaelarndt0423,39592094,Michael Arndt,,CLOSED,2023-12-11T10:46:01Z,2023-12-14T10:55:54Z,"There was in issue in akka prior to 2.6.21 with CPU usage rising to 100% in certain circumstances. Ths complete description can be found in the akka project. In 2.6.21 a fix war backported but it does not seem to be part of pekko 1.0.1.

The link to the 2.6.21 release notes is a good starting point for further investigation: 

https://github.com/akka/akka/releases/tag/v2.6.21","{""url"": ""https://api.github.com/repos/apache/pekko/issues/842/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/842,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQhop,pekko,1849825833,842,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-11T10:54:54Z,2023-12-11T10:54:54Z,"@michaelarndt0423 are you seeing issues? We have https://github.com/apache/incubator-pekko/issues/442 and https://github.com/apache/incubator-pekko/pull/443. That PR is in pekko 1.0.0.

#442 appears in our release notes - https://pekko.apache.org/docs/pekko/current/release-notes/index.html","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQhop/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/842,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQsJK,pekko,1849868874,842,NA,michaelarndt0423,39592094,Michael Arndt,,NA,2023-12-11T11:19:14Z,2023-12-11T11:19:14Z,"Yes, we are currently facing this issue and it just looks identical to the problem we had with akka prior to 2.6.21 and the problem occurs only in services we have migrated from akka to pekko.
But if the fix is already part of the release we need to investigate further...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5uQsJK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/842,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5umimC,pekko,1855596930,842,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-14T10:35:40Z,2023-12-14T10:35:40Z,@michaelarndt0423 did you find the cause of the issue?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5umimC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/842,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5umqT4,pekko,1855628536,842,NA,michaelarndt0423,39592094,Michael Arndt,,NA,2023-12-14T10:55:53Z,2023-12-14T10:55:53Z,"@pjfanning No, not really. For me it was important that the backport is part of pekko. And as it has been part since ver 1.0.0 for me this issue is resolved.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5umqT4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/852,https://api.github.com/repos/apache/pekko/issues/852,pekko,2047806001,852,Add pekko group in scala ecosystems of Discord,laglangyue,35491928,Laglangyue,,CLOSED,2023-12-19T02:33:55Z,2023-12-19T05:34:29Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->
there is an `akka group` in ecosystems of scala discord,so should add `pekko` so that more users can find `pekko` and talk about it,
surely in the early stages, there may not be many people in this group.
Even though my English is not very good, I am still on Discord to see what the Scala-Community is talking about,  I think it is very helpful for the spread and growth of the Pekko community

![image](https://github.com/apache/incubator-pekko/assets/35491928/6ae12393-970a-4a88-8e4b-47af74188ebb)



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/852/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/852,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_Tt4,pekko,1862089592,852,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-19T04:14:45Z,2023-12-19T04:14:45Z,This is not a bug. Issue trackers are for bugs and product features.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_Tt4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/852,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_aZr,pekko,1862116971,852,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-19T04:55:31Z,2023-12-19T04:55:31Z,"Regarding the Scala Discord, you will need to talk the maintainers of that Discord channel to see if they will add a Pekko ecosystem.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_aZr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/852,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_isn,pekko,1862150951,852,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-19T05:34:28Z,2023-12-19T05:34:28Z,"> Regarding the Scala Discord, you will need to talk the maintainers of that Discord channel to see if they will add a Pekko ecosystem.

get it","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5u_isn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/856,https://api.github.com/repos/apache/pekko/issues/856,pekko,2051974021,856,Add dedicated stream timeout exceptions for timeout related operators。,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-12-21T08:45:07Z,2023-12-23T20:47:00Z,"Add dedicated stream timeout exceptions for timeout related operators。

refs: https://github.com/akka/akka/issues/31455
refs:https://github.com/akka/akka/issues/24951

I will prepare a PR this weekend","{""url"": ""https://api.github.com/repos/apache/pekko/issues/856/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/865,https://api.github.com/repos/apache/pekko/issues/865,pekko,2054934662,865,Add a way to create a `Source` from a `Sink` to Akka Streams DSL,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-12-23T23:32:25Z,2023-12-24T10:57:05Z,"This has probably been top of the list when it comes to dealing with commonplace limitations when using pekko-streams, which is the fact that its not easy to create a `Source` when a `Sink` completes/materializes that also respects backpressure/cancellation/errors. While it may be true that that a `Sink` should always be the final step in your stream logic there is some impedance mismatch here as there are cases where you need to create a `Source` from a `Sink` that props up in practice.

As an example, imagine if you are using the pekko-http [`Flow` API](https://nightlies.apache.org/pekko/docs/pekko-http/1.0/docs/client-side/request-level.html#flow-based-variant) where you represent your entire route as a pekko stream. Lets say your route does a simple thing where it just pushes a message to Kafka and you only want to return a response when sending the message is successful (as is customary).

Understandably the act of sending a message to a [Kafka is a Sink](https://pekko.apache.org/docs/pekko-connectors-kafka/current/producer.html#producer-as-a-sink) which is where the problem lies, once you send the message to Kafka thats the end of your stream business logic and in this specific case of using the pekko-http flow API, we have to get from a `Sink[ProduceRecord[_,_],_]` to a `Source[HttpResponse, _]` in order to return a response to the Http request.

It is currently possible to get around this by using techniques such as materializing the sink and then creating a `Source` from that using `Sink.fromSubscriber`/`Source.fromPublisher` but this creates its own issues as only [cancellations are propagated, not errors](https://github.com/akka/akka/issues/24853#issuecomment-1525680152) so its ideal to just create a proper API for this, i.e. `Source.fromSink(...)` or something along these lines.

Existing Akka/Lightbend issues/discussions on this topic. Do note that all actual code contributions on this topic have been done by external contributors (i.e. no one from Lightbend/Akka) and the code never ended up being merged.

- https://github.com/akka/akka/issues/24853
- https://github.com/akka/akka/pull/25150
- https://discuss.lightbend.com/t/create-source-from-sink-and-vice-versa/605/3

@He-Pin @jxnu-liguobin Not sure if you want to look into this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/865/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/865,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vXj8Y,pekko,1868447512,865,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-24T06:58:29Z,2023-12-24T06:58:29Z,"@mdedetrich What about the `BroadcastHub` and `alsoTo` which can attach the Kafka sink?
and Flux has https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#publish--","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vXj8Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/867,https://api.github.com/repos/apache/pekko/issues/867,pekko,2054944302,867,Add a `Sink.extract` function which pre-materializes data from a `Sink` and lets you replay that entire data stream into an existing Sink,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2023-12-24T00:27:30Z,2023-12-26T05:47:00Z,"This is another commonplace problem that happens when using pekko-streams which arises when you have a `Sink` that has some parameters (i.e. lets say an `id`) but the data to create that `id` is in the stream that is being sent to the `Sink` itself.

More concretely, lets assume we have a simple sink that stores some data in some object storage, i.e. `def putData(id: String): Sink[ByteString, _]`. In order to call `putData` we need an `id` however that is contained within the data being sent to the sink itself, i.e.

```scala
val source = Source.single(
   ByteString(""id:1;moreData"")
)

source.to(putData(???))
```
In this case we want the extract the id (i.e. `???` in above code snippet) from the actual data (i.e. ""id:1""). Most importantly is that assuming we do figure out a way to extract the id, we still want all of the data (i.e. `""id:1;moreData""`) to be sent to the `Sink`.

Now while there are tools to do this, i.e.`Framing` they aren't exactly idea. Framing usually only works when you have a very basic/primitive structure (i.e. lets say comma or new line delimited). If we have more complex data structures, lets say JSON we do have [options available](https://pekko.apache.org/docs/pekko-connectors/current/data-transformations/json.html#example) but solving the issue is still messy because honestly `Framing` is not really the right tool, i.e. its not that we want to frame the data coming in in a certain way but rather we wan't to consume + buffer the data until we manage to extract some data (i.e. the `id`) field and then once that `id` field is extract then send the buffered data along with the rest of the incoming data to a supplied `Sink`, i.e.

```scala
/**
 * Defers invoking the `create` function to create a sink until data from upstream is sent
 * to the `extractor` Sink and that `extractor` Sink completes. The materialized value
 * of completed `extractor` Sink is provided as a parameter to `create`.
 *
 * The primary use of this function is when you have a pre-existing `Sink` that requires
 * input which is derived from the data itself, i.e. the Sink requires an id as a parameter
 * however that id is contained within the upstream data that is being sent to the Sink
 *
 * @param extractor A Sink which upon completion sends the materialized value as
 *                  a parameter into the `create` function
 * @param extractorFinalizer A sink which tells how to complete the extractor Flow.
 * @param inclusive Whether the already sent data to the `extractor` Sink should be included
 *                  alongside with the rest of the upstream data that is yet to be processed
 *                  to the `create` Sink.
 */
def extract[T, E, M](extractor: Graph[FlowShape[T, E], _], extractorFinalizer: Graph[SinkShape[E], _], inclusive: Boolean, create: E => Sink[T, M]): Sink[T, M] =
  ???

def extract[T, E, M](extractor: Graph[FlowShape[T, E], _], extractorFinalizer: Graph[SinkShape[E], _], create: E => Sink[T, M]): Sink[T, M] =
  extract(extractor, extractorFinalizer, inclusive = true, create)
```

The design of this is still debatable, i.e. of particular note is how to model the `extractor` part. My initial thought was to have `extractor` as a `Sink` but I realized that practically creating a `Sink` from a `Flow` (which is how the extractor's are going to be typically designed) is quite cumbersome so I came up with this API instead, the usage would look like this

```scala
val json: String =
  s""""""
     |{
     |  ""id"":""someId"",
     |  ""size"": 3,
     |  ""rows"": [
     |    {""doc"": ""doc1"",
     |    {""doc"": ""doc2"",
     |    {""doc"": ""doc3""
     |  ]
     |}
  """""".stripMargin
val source: Source[ByteString, NotUsed] = Source.single(ByteString(json))
val extractorFlow: Flow[ByteString, ByteString, NotUsed] = JsonReader.select(""$.id"")
source.via(Sink.extract(extractorFlow, Sink.head, id => putData(id.utf8String)))
```

With the above following example, we would extract the ""someId"" field from `""id""` using `JsonReader.select(""$.id"")` and then pass the `someId` into the `putData` sink argument and the entire contents of the `Source` will be fed into `putData` `Sink` since `inclusive = true`.

@He-Pin @pjfanning @jrudolph @raboof  @jxnu-liguobin Thoughts?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/867/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/867,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vXjAk,pekko,1868443684,867,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-24T06:26:10Z,2023-12-24T06:26:10Z,"And seems you can do this with `lazyFutureSink` and `prefixAndTail` or `Sink.lazyInit` too.

IIRC, in reactor-core, there is a `SwitchOnFirst` method, which the Flux including the first element, do you think we should add that method too, which I think is much easier to use.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vXjAk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/871,https://api.github.com/repos/apache/pekko/issues/871,pekko,2055011396,871,Add flow onErrorComplete completing when failed,He-Pin,501740,He-Pin(kerr),,CLOSED,2023-12-24T07:22:07Z,2023-12-27T07:23:47Z,"refs: https://github.com/akka/akka/issues/31671
refs: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#onErrorComplete--","{""url"": ""https://api.github.com/repos/apache/pekko/issues/871/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/871,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdk5y,pekko,1870024306,871,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-27T07:23:46Z,2023-12-27T07:23:46Z,duplicated with https://github.com/apache/incubator-pekko/issues/624,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdk5y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/875,https://api.github.com/repos/apache/pekko/issues/875,pekko,2055210885,875,GraphApply.scala.template deprecation misapplied,pjfanning,11783444,PJ Fanning,,CLOSED,2023-12-24T20:56:37Z,2023-12-25T08:28:50Z,"https://github.com/apache/incubator-pekko/blob/16e587ded12d6ad83c66123c144b1dddfdebaad4/stream/src/main/boilerplate/org/apache/pekko/stream/scaladsl/GraphApply.scala.template#L36

Many create methods are created for this template. Each one gets its deprecation message but the numbers are incremented on each one - so the versions become nonsensical.

Oddly the '.6.' bit is retained but the other parts increment.

For example, one method ends up with

```
@deprecated(""Use createGraph instead"", ""Akka 5.6.46"")
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/875/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/875,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vYiyA,pekko,1868704896,875,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-25T03:43:16Z,2023-12-25T03:43:16Z,"![image](https://github.com/apache/incubator-pekko/assets/501740/d0c1a3a7-2975-4013-8ad5-4f472a6310c0)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vYiyA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/880,https://api.github.com/repos/apache/pekko/issues/880,pekko,2055857868,880,Prepare code with Scala 3.4 by dropping `private[this]`,He-Pin,501740,He-Pin(kerr),,OPEN,2023-12-25T20:32:09Z,2023-12-25T21:41:08Z,"Which is not support in Scala 3.4 and shows up an error.
https://dotty.epfl.ch/docs/reference/dropped-features/this-qualifier.html
https://www.scala-lang.org/blog/2022/08/17/long-term-compatibility-plans.html

We should keep code compiling with newer Scala version to help both projects","{""url"": ""https://api.github.com/repos/apache/pekko/issues/880/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/880,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vaF9C,pekko,1869111106,880,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-25T20:37:15Z,2023-12-25T20:37:15Z,"Scala 3.4 is not LTS and Scala 3.4 compiled code won't work for Scala 3.3 users. So I don't think we'll be compiling with Scala 3.4 any time soon.

Setting up a build that compiles with tests Scala 3.3 generated classes with Scala 3.4 runtime seems more useful to me.

Removing `private[this]` will have a big impact on our Scala 2 support and Scala 3.3 support.

For me, this should be delayed till at least after Pekko 1.1.0 release. Testing but not compiling with Scala 3.4 could be done earlier.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vaF9C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/880,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vaJfg,pekko,1869125600,880,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-12-25T21:41:07Z,2023-12-25T21:41:07Z,"Agree with @pjfanning here, core Pekko modules will never support Scala 3.4 (its not an LTS release) and there may be issues with the removal of `private[this]`.

We should only start looking into this when the next Scala LTS is being considered, which is likely to be many many many years away.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vaJfg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/881,https://api.github.com/repos/apache/pekko/issues/881,pekko,2056371514,881,Update instructions after the static content asset change,samueleresca,8921095,Samuele Resca,samuele.resca@gmail.com,OPEN,2023-12-26T12:33:24Z,2023-12-26T12:33:24Z,"See: https://github.com/apache/incubator-pekko-sbt-paradox/pull/86#issuecomment-1867992884 Depends on: https://github.com/apache/incubator-pekko-sbt-paradox/issues/84

Devs need a way to debug static assets in this repo after the static content asset change.
Either:
- Update instructions for copying static assest fetched from the CDN in https://github.com/apache/incubator-pekko/tree/main/docs/src/main/paradox/_template just for testing purposes
- Prepare a scripts that automate the step above","{""url"": ""https://api.github.com/repos/apache/pekko/issues/881/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/885,pekko,2056973738,885,Feature: Add pr link to git message automaticly by github,laglangyue,35491928,Laglangyue,,CLOSED,2023-12-27T06:33:37Z,2023-12-27T11:19:35Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->
like this sreenshot, which is from apache seatunnel
![image](https://github.com/apache/incubator-pekko/assets/35491928/b72d2d33-b3ff-496c-9ffc-926a2750db2e)

this link is not added by developer, and it's automatic, maybe by github.
this link can help us to trace history and reasons for changes and  obtain more information



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/885/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdiYT,pekko,1870013971,885,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-27T07:06:42Z,2023-12-27T07:06:42Z,"![image](https://github.com/apache/incubator-pekko/assets/35491928/78283e8a-3e46-4ffc-90aa-c00a09150e95)

then add vcs.xml
```xml

<?xml version=""1.0"" encoding=""UTF-8""?>
<project version=""4"">
<component name=""VcsDirectoryMappings"">
  <mapping directory=""$PROJECT_DIR$"" vcs=""Git""/>
</component>
<component name=""IssueNavigationConfiguration"">
  <option name=""links"">
    <list>
      <IssueNavigationLink>
        <option name=""issueRegexp"" value=""#(\d+)""/>
        <option name=""linkRegexp"" value=""https://github.com/apache/seatunnel/pull/$1""/>
      </IssueNavigationLink>
    </list>
  </option>
</component>
</project>
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdiYT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdi5B,pekko,1870016065,885,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-27T07:10:21Z,2023-12-27T07:10:21Z,"@mdedetrich @pjfanning ping, I can't access the setting tab.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdi5B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdvG7,pekko,1870066107,885,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-27T08:24:45Z,2023-12-27T08:24:45Z,You get the PR link if you squash merge.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vdvG7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vd00K,pekko,1870089482,885,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-27T08:55:57Z,2023-12-27T08:55:57Z,"I see, so I just need do a squash merge !","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vd00K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vd85A,pekko,1870122560,885,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-12-27T09:35:32Z,2023-12-27T09:35:32Z,"Do note that the PR link in the git message is largely irrelevant because the github ui allows you to search by the commit hash and when you do this it will also provide the PR behind that commit hash, even though I do admit that it is a nice touch.

Another thing to keep note of is that technically speaking according to ASF policy, github is a convenience and hence ASF projects shouldn't be tied to github. There is gitbox for that.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vd85A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5veOva,pekko,1870195674,885,NA,laglangyue,35491928,Laglangyue,,NA,2023-12-27T11:02:37Z,2023-12-27T11:02:37Z,"> Do note that the PR link in the git message is largely irrelevant because the github ui allows you to search by the commit hash and when you do this it will also provide the PR behind that commit hash, even though I do admit that it is a nice touch.
> 
> Another thing to keep note of is that technically speaking according to ASF policy, github is a convenience and hence ASF projects shouldn't be tied to github. There is gitbox for that.

Infact, we won't actually add a link to the git message, we just added the `PR ID`.
such as this, the idea vcs plugin will translator the `PR ID` to a link，This is a convenient operation to review history. 
![image](https://github.com/apache/incubator-pekko/assets/35491928/9987add1-6fa3-4440-bbb1-badaa0036048)

as pjfanning said, use `squash merge` would get the pr-id","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5veOva/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/885,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5veRwj,pekko,1870208035,885,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2023-12-27T11:19:35Z,2023-12-27T11:19:35Z,"I understand, my point is that even the PR link (i.e. the `#285` which you highlighted in the screenshot) is just a minor convenience if you copy the git hash of the commit and paste it in the search bar of the github repo, github will bring you to the original PR.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5veRwj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/886,https://api.github.com/repos/apache/pekko/issues/886,pekko,2058117480,886,RecipeAdhocSource timing sensitive test has started failing every night,pjfanning,11783444,PJ Fanning,,CLOSED,2023-12-28T07:56:40Z,2023-12-28T10:00:40Z,"https://github.com/apache/incubator-pekko/actions/runs/7342976146/job/19992946889

Started 5 days ago. Almost certainly caused by https://github.com/apache/incubator-pekko/pull/861

@He-Pin could you have a look?

```
[12-28 00:41:26.811] [info] - must restart up to specified maxRetries *** FAILED *** (2 seconds, 529 milliseconds)
[12-28 00:41:26.811] [info]   class org.apache.pekko.stream.BackpressureTimeoutException was not equal to class java.util.concurrent.TimeoutException (RecipeAdhocSource.scala:130)
[12-28 00:41:26.812] [info]   org.scalatest.exceptions.TestFailedException:
[12-28 00:41:26.812] [info]   at org.scalatest.matchers.MatchersHelper$.indicateFailure(MatchersHelper.scala:397)
[12-28 00:41:26.812] [info]   at org.scalatest.matchers.should.Matchers$ShouldMethodHelperClass.shouldMatcher(Matchers.scala:7299)
[12-28 00:41:26.812] [info]   at org.scalatest.matchers.should.Matchers$AnyShouldWrapper.should(Matchers.scala:7347)
[12-28 00:41:26.812] [info]   at docs.stream.cookbook.RecipeAdhocSource.$anonfun$new$12(RecipeAdhocSource.scala:130)
[12-28 00:41:26.812] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[12-28 00:41:26.812] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[12-28 00:41:26.812] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[12-28 00:41:26.812] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[12-28 00:41:26.813] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[12-28 00:41:26.813] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1240)
[12-28 00:41:26.813] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[12-28 00:41:26.813] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[12-28 00:41:26.813] [info]   at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
[12-28 00:41:26.813] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1238)
[12-28 00:41:26.813] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1250)
[12-28 00:41:26.813] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[12-28 00:41:26.814] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1250)
[12-28 00:41:26.817] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1232)
[12-28 00:41:26.820] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
[12-28 00:41:26.820] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1309)
[12-28 00:41:26.820] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[12-28 00:41:26.820] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[12-28 00:41:26.821] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[12-28 00:41:26.821] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1309)
[12-28 00:41:26.821] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1308)
[12-28 00:41:26.821] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
[12-28 00:41:26.821] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[12-28 00:41:26.821] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[12-28 00:41:26.821] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
[12-28 00:41:26.821] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1354)
[12-28 00:41:26.821] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[12-28 00:41:26.821] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1354)
[12-28 00:41:26.821] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1352)
[12-28 00:41:26.821] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
[12-28 00:41:26.821] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[12-28 00:41:26.821] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
Coroner Thread Count started at 100, ended at 100, peaked at 104 in docs.stream.cookbook.RecipeAdhocSource
[12-28 00:41:26.865] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[12-28 00:41:26.865] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
[12-28 00:41:26.865] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[12-28 00:41:26.865] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[12-28 00:41:26.865] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[12-28 00:41:26.865] [info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[12-28 00:41:26.865] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[12-28 00:41:26.865] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[12-28 00:41:26.865] [info]   at java.base/java.lang.Thread.run(Thread.java:829)
```


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/886/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/886,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vhALm,pekko,1870922470,886,NA,He-Pin,501740,He-Pin(kerr),,NA,2023-12-28T08:08:19Z,2023-12-28T08:08:19Z,Ok,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vhALm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/886,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vhWRJ,pekko,1871012937,886,NA,pjfanning,11783444,PJ Fanning,,NA,2023-12-28T10:00:40Z,2023-12-28T10:00:40Z,fixed via #888 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5vhWRJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/900,https://api.github.com/repos/apache/pekko/issues/900,pekko,2063282704,900,ByteStringBuilder can stackoverflow when call addAll with LinearSeq,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-03T05:51:13Z,2024-01-04T12:47:35Z,"```scala
      ByteString.newBuilder.addAll(List[Byte]('a'))
```

results:
```scala
java.lang.StackOverflowError
	at org.apache.pekko.util.ByteStringBuilder.addAll(ByteString.scala:1082)
	at scala.collection.mutable.Growable.$plus$plus$eq(Growable.scala:69)
	at scala.collection.mutable.Growable.$plus$plus$eq$(Growable.scala:69)
	at org.apache.pekko.util.ByteStringBuilder.addAll(ByteString.scala:1193)
	at org.apache.pekko.util.ByteStringBuilder.addAll(ByteString.scala:1082)
	at scala.collection.mutable.Growable.$plus$plus$eq(Growable.scala:69)
	at scala.collection.mutable.Growable.$plus$plus$eq$(Growable.scala:69)
	at org.apache.pekko.util.ByteStringBuilder.addAll(ByteString.scala:1193)
```

seems like some overloading issue.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/900/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/900,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v0Ygw,pekko,1876002864,900,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-03T21:35:52Z,2024-01-03T21:35:52Z,@He-Pin @mdedetrich I have a possible fix in https://github.com/apache/incubator-pekko/pull/903,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v0Ygw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/900,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v38sr,pekko,1876937515,900,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-04T11:26:08Z,2024-01-04T11:26:08Z,"Until we get a new Pekko 1.0.3 release out, the workaround is to use `++=` instead of `addAll`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v38sr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/904,https://api.github.com/repos/apache/pekko/issues/904,pekko,2064906663,904,Can not checkout the working tree on Windows,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-04T02:44:42Z,2024-01-04T03:57:36Z,"![image](https://github.com/apache/incubator-pekko/assets/501740/565b933a-57c8-4179-b105-c79e7b5c3580)

On Windows 11
```
C:\Users\hepin\IdeaProjects>git clone git@github.com:He-Pin/incubator-pekko.git
Cloning into 'incubator-pekko'...
remote: Enumerating objects: 463388, done.
remote: Counting objects: 100% (3929/3929), done.
remote: Compressing objects: 100% (446/446), done.
remote: Total 463388 (delta 3563), reused 3538 (delta 3392), pack-reused 459459
Receiving objects: 100% (463388/463388), 254.24 MiB | 3.54 MiB/s, done.
Resolving deltas: 100% (233033/233033), done.
error: invalid path 'actor/src/main/mima-filters/1.1.0.backwards.excludes/option-converters.excludes '
fatal: unable to checkout working tree
warning: Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/'
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/904/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/904,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v1XSK,pekko,1876259978,904,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-04T03:30:13Z,2024-01-04T03:30:13Z,"Found the issue, PR made at https://github.com/apache/incubator-pekko/pull/905","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5v1XSK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/906,https://api.github.com/repos/apache/pekko/issues/906,pekko,2064947490,906,Add inliner developer documentation,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2024-01-04T03:47:59Z,2024-01-04T03:50:45Z,"Now that the inliner has been merged into Pekko 1.1.x, we should add developer specific documentation on how the inliner works as well as standards/procedures on how to use it (i.e. if you want to `@inline` something then also add a scala-3 variant of the `inline` keyword).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/906/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/914,https://api.github.com/repos/apache/pekko/issues/914,pekko,2069232732,914,Add more `onErrorXXX` stream operators.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-07T18:15:40Z,2024-01-10T03:07:33Z,"Motivation:
As a daily Java developer , I think the `onError*` operators are very easy to use.
eg: https://github.com/spring-projects/spring-framework/pull/31352
refs:https://github.com/reactor/reactor-core/issues/535

Currently:
|Reactor-core|Pekko|Suggestion|
|--|---|----|
|onErrorResume|recoverWith||
|onErrorComplete|onErrorComplete ( added https://github.com/apache/incubator-pekko/issues/624)|
|onErrorReturn|recover/recoverWith|
|onErrorContinue|withAttributes(...)|
|onErrorStop|withAttributes/defaultBehavior|
|onErrorMap|mapError|
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/914/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/914,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wHPR9,pekko,1880945789,914,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-08T12:49:10Z,2024-01-08T12:49:10Z,"if possile, can I work for the simpler one of them, but I am not similiar with this module.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wHPR9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/914,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wRByc,pekko,1883511964,914,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-09T17:45:25Z,2024-01-09T17:45:25Z,"@laglangyue Thanks, I would like to gather more information before anyone from the community put effects on it.
As a Java developer I think the current api is not that easy to use.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wRByc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/914,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wTHCx,pekko,1884057777,914,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-10T01:42:08Z,2024-01-10T01:42:08Z,"
> As a Java developer I think the current api is not that easy to use.

fine，good luck","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wTHCx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/914,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wTONx,pekko,1884087153,914,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-10T02:23:11Z,2024-01-10T02:23:11Z,"I think that this should be discussed more generally on github discussions/mailing list.

I am not against this in principle and I also have my own ideas regarding the attributes boilerplate (I.e. why isn't there an implicit's api for attributes for Scala) but we really should look at this comprehensively before coding it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wTONx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/915,https://api.github.com/repos/apache/pekko/issues/915,pekko,2069548567,915,Make SingleConsumerMultiProducer the default mailbox for stream,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-08T03:22:30Z,2024-01-13T19:23:35Z,"Motivation:

As the akka-stream is always a single consumer. this will increase performance.

was:
https://github.com/akka/akka/pull/31620
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/915/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/918,https://api.github.com/repos/apache/pekko/issues/918,pekko,2071595743,918,Exposes the current interpreter when init/prestart the stage.,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-09T04:11:24Z,2024-01-24T03:19:06Z,"Motivation:
Currently, we can't access the current interpreter when the stage is preStarting. eg using it with `Flow.fromMaterializer`.

Result:
Can access the interpreter when necessary(internalapi).

otherwise when without this:
```scala
[ERROR] [01/09/2024 12:09:00.972] [FromMaterializerSpec-pekko.actor.default-dispatcher-6] [pekko://FromMaterializerSpec/system/Materializers/StreamSupervisor-0/flow-0-0-headSink] Error during preStart in [org.apache.pekko.stream.impl.SetupFlowStage$$anon$1-setup(org.apache.pekko.stream.scaladsl-FromMaterializationSpec.scala:149)]: Cannot throw exception because ""null"" is null
java.lang.NullPointerException: Cannot throw exception because ""null"" is null
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter$.currentInterpreter(GraphInterpreter.scala:129)
	at org.apache.pekko.stream.scaladsl.FromMaterializerSpec.$anonfun$new$30(FromMaterializationSpec.scala:149)
	at org.apache.pekko.stream.impl.SetupFlowStage$$anon$1.preStart(SetupStage.scala:61)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.init(GraphInterpreter.scala:321)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.init(ActorGraphInterpreter.scala:631)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.tryInit(ActorGraphInterpreter.scala:740)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.preStart(ActorGraphInterpreter.scala:789)
	at org.apache.pekko.actor.Actor.aroundPreStart(Actor.scala:558)
	at org.apache.pekko.actor.Actor.aroundPreStart$(Actor.scala:558)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundPreStart(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.create(ActorCell.scala:654)
	at org.apache.pekko.actor.ActorCell.invokeAll$1(ActorCell.scala:523)
	at org.apache.pekko.actor.ActorCell.systemInvoke(ActorCell.scala:545)
	at org.apache.pekko.dispatch.Mailbox.processAllSystemMessages(Mailbox.scala:297)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:232)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:245)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)

[WARN] [01/09/2024 12:09:01.047] [FromMaterializerSpec-pekko.actor.default-dispatcher-5] [pekko://FromMaterializerSpec/user/StreamSupervisor*] received dead letter from Actor[pekko://FromMaterializerSpec/system/testProbe-1#397573823]: GetChildren
--- Stream actors debug dump ---
Stream is completed. No debug information is available
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/918/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/925,https://api.github.com/repos/apache/pekko/issues/925,pekko,2072897998,925,Feature request: Add `runOn` method to RunnableGraph?,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-09T18:06:47Z,2024-01-10T07:34:04Z,"Motivation:
it would be very common when we want a dedicated graph run on x dispatcher, I suggest we add something like the reactor-core, which can be much clear than the current `addAttributes(ActorAttributes.dispatcher(dispatcher)`.

- `publishOn(dispatcher:String)` for Source
- `subscribeOn(dispatcher:String)` for Sink
- `runOn(dispatcher:String)` for RunnableGraph

eg:
```
  def runOn(dispatcher:String)(implicit materializer: Materializer): Mat =
    materializer.materialize(addAttributes(ActorAttributes.dispatcher(dispatcher)))
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/925/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/929,https://api.github.com/repos/apache/pekko/issues/929,pekko,2075903302,929,failed: ClusterActorLoggingSpec,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-11T06:59:00Z,2024-01-29T13:11:22Z,"https://github.com/apache/incubator-pekko/actions/runs/7482391595/job/20365886171#step:6:859
```scala
<-- [org.apache.pekko.cluster.typed.ClusterActorLoggingSpec: Logging from an actor in a cluster must include host and port in sourceActorSystem mdc entry] End of log messages of test that [Failed(java.lang.AssertionError: Timeout (20 seconds) waiting for 1 messages on LoggingTestKitImpl(1,Some(INFO),None,None,Some(Starting),None,None,Map(),true,Some(org.apache.pekko.cluster.typed.ClusterActorLoggingSpec$$Lambda$1694/0x0000000800ad6040@4ccd169d)).)]
[info] - must include host and port in sourceActorSystem mdc entry *** FAILED *** (20 seconds, 10 milliseconds)
[info]   java.lang.AssertionError: Timeout (20 seconds) waiting for 1 messages on LoggingTestKitImpl(1,Some(INFO),None,None,Some(Starting),None,None,Map(),true,Some(org.apache.pekko.cluster.typed.ClusterActorLoggingSpec$$Lambda$1694/0x0000000800ad6040@4ccd169d)).
[info]   at org.apache.pekko.actor.testkit.typed.internal.LoggingTestKitImpl.expect(LoggingTestKitImpl.scala:113)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.$anonfun$new$2(ClusterActorLoggingSpec.scala:63)
[info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1240)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture(LogCapturing.scala:79)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture$(LogCapturing.scala:77)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.withFixture(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1238)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1250)
[info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1250)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1232)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.runTest(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1309)
[info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[info]   at scala.collection.immutable.List.foreach(List.scala:333)
[info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[info]   at scala.collection.immutable.List.foreach(List.scala:333)
[info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1309)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1308)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.runTests(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.Suite.run(Suite.scala:1114)
[info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit.org$scalatest$BeforeAndAfterAll$$super$run(ScalaTestWithActorTestKit.scala:41)
[info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1354)
[info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1354)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1352)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.run(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[info]   at java.base/java.lang.Thread.run(Thread.java:829)
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/929/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/929,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yH4D4,pekko,1914667256,929,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T13:10:47Z,2024-01-29T13:10:47Z,https://github.com/apache/incubator-pekko/actions/runs/7695679477/job/20969089026#step:6:875,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yH4D4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/932,https://api.github.com/repos/apache/pekko/issues/932,pekko,2080165962,932,"improve usage of Source.combine  by adding Source.commbineN(sources: Source[T, _]*)",laglangyue,35491928,Laglangyue,,CLOSED,2024-01-13T07:51:35Z,2024-01-13T07:57:27Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->
## motivation
please see this method reference `org.apache.pekko.stream.scaladsl.Source#mergePrioritizedN`
```
 def mergePrioritizedN[T](
      sourcesAndPriorities: immutable.Seq[(Source[T, _], Int)],
      eagerComplete: Boolean): Source[T, NotUsed] = {
    sourcesAndPriorities match {
      case immutable.Seq()            => Source.empty
      case immutable.Seq((source, _)) => source.mapMaterializedValue(_ => NotUsed)
      case sourcesAndPriorities =>
        val (sources, priorities) = sourcesAndPriorities.unzip
        combine(sources.head, sources(1), sources.drop(2): _*)(_ => MergePrioritized(priorities, eagerComplete))
    }
  }
```
Users will also write similar methods which is wrapped combine
```
   val sources: List[Source[Row, NotUsed]] = parallel.source
    val seq = parallel.source.grouped(4).map {
      case immutable.List()            => Source.empty[Row]
      case immutable.List(source) => source
      case source                           => Source.combine(source.head, source(1), source.drop(2)*)(Concat(_))
    }.toSeq

   // merge
    val reader = seq match
      case immutable.Seq()    => Source.empty
      case immutable.Seq(seq) => seq
      case seq                => Source.combine(seq.head, seq(1), seq.drop(2)*)(Concat(_))
```
original combine must need fisrt and second source.
method `source.mergePrioritizedN` wrappers the method `combine`, perhaps we can promote this method `combine`,
but we cannot overload , maybe we can provide a method `SourceN`.

## Additional for case:
data from different databases and tables like shardingSphere，or get tables from MySQL through regular expressions
` list[Source] -> groupd concat -> merge `

 Mainly to see what opinions of community on this
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/932/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/932,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wrMB0,pekko,1890369652,932,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-13T07:57:26Z,2024-01-13T07:57:26Z,"it is resoved in 1.1.0
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wrMB0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/936,https://api.github.com/repos/apache/pekko/issues/936,pekko,2080271067,936,Feature request: Add flatten to Flow scaladsl,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-13T12:25:30Z,2024-01-14T12:24:21Z,"Motivation:
Both ZIO and FS2 have`flatten` support, and which will get easy code in scaladsl and nearly all scala developer know about what flatten is.

Every time I write a `flatmapConcat(identity())` , I feel some kind of dumb.

Current usages in codebase:
![image](https://github.com/apache/incubator-pekko/assets/501740/f825da8e-aa2c-4f48-80dd-65b22e64faee)


Expection:
I can use `flatten` in Flow/Source 's scaladsl.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/936/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/940,https://api.github.com/repos/apache/pekko/issues/940,pekko,2080661812,940, Feature request: Add dimap to Flow,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-14T09:59:41Z,2024-01-15T11:33:59Z,"Motivation:
Pekko already has a `contramap` and it would be nice to have a `dimap` for both the input and output conversion too.

Result:
Can convert the input and output of a flow at once.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/940/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/945,https://api.github.com/repos/apache/pekko/issues/945,pekko,2080746927,945,release notes for 1.1.0(-M1),pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-14T14:17:08Z,2024-05-21T15:15:48Z,"A list of all the PRs is not that helpful since a lot are doc or build related. Changes backported to 1.0.1 and 1.0.2 should not be included either.

We need a curated list of changes. Ideally. not just highlights but if there are 2 or more PRs that cover the same enhancement, we should list the enhancement once (but maybe link to most or all of the PRs).
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/945/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/945,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x-ZOg,pekko,1912181664,945,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T14:45:47Z,2024-01-26T14:45:47Z,"I'm not an English speaker , so ;)
1. performance enhancement with inline
2. osgi support 
3. support restart in subflow
4. stream subflow behavior change
5. dependencies update
6. Netty 4 transport change
7. How to migrate from akka to pekko cluster
8. new stream operators, link to docs maybe?
9. ...","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x-ZOg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/945,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y3q05,pekko,1927195961,945,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-05T14:58:53Z,2024-02-05T14:58:53Z,https://github.com/apache/incubator-pekko/compare/v1.1.0-M0...HEAD,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y3q05/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/948,https://api.github.com/repos/apache/pekko/issues/948,pekko,2080815692,948,Deprecate FI.java and remove it in future release.,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-14T17:06:23Z,2024-01-17T15:18:00Z,"Motivation:
It's duplicated, but currently, remove it will break binary compabinity.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/948/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/951,https://api.github.com/repos/apache/pekko/issues/951,pekko,2080840980,951,Deprecate: JAPI,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-14T18:20:10Z,2024-01-15T11:34:37Z,"Motivation:
The only method it provides is to wrap a varargs of `T` to a scala's immutable seq.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/951/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/957,https://api.github.com/repos/apache/pekko/issues/957,pekko,2081869908,957,Feature request: Add `collectWhile` operator.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-15T11:49:00Z,2024-01-16T17:51:45Z,"Motivation:
As both fs2 and ZIO has a `collectWhile` operator, it would be nice for scaladsl. which will improve the performance a little instead of a `takeWhile(...).collect(...)` or `collect(...).takeWhile(...)`.

For javadsl, as there is already a `def collect[T](pf: PartialFunction[Out, T])` , I think we can ship it too, at least it would be better than the current `takeWhile(...).collect(...)` usage .

Result:
A rich operator set.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/957/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/957,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wxwQf,pekko,1892090911,957,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-15T12:31:44Z,2024-01-15T12:31:44Z,"Cool, I will work on this issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5wxwQf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/959,https://api.github.com/repos/apache/pekko/issues/959,pekko,2081943023,959,CI should run paradox to check for documentation compile issues,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2024-01-15T12:32:22Z,2024-01-25T03:04:38Z,See https://github.com/apache/incubator-pekko/pull/958#issuecomment-1892088786,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/959/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/959,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzFpl,pekko,1909217893,959,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-25T01:55:39Z,2024-01-25T01:55:39Z,"Got a good news, this issue was cause by #1039 

I have verified in locally.

```
[info] compiling 80 Scala sources and 1 Java source to /Users/roiocam/IdeaProject/incubator-pekko/bench-jmh/target/scala-2.13/classes ...
[error] (actor-typed / CompileJdk9 / compileIncremental) Compilation failed
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzFpl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/967,https://api.github.com/repos/apache/pekko/issues/967,pekko,2083249712,967,Move to Junit5 in pekko 2.0?,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-16T08:06:37Z,2024-01-16T08:33:30Z,"Motivation:
Junit 5 has many new function, eg  dynamic testing, and I think we can move to it later.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/967/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/967,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5w2R5W,pekko,1893277270,967,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-16T08:33:29Z,2024-01-16T08:33:29Z,Are you talking about our internal Java tests or the testkit?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5w2R5W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/970,pekko,2084527123,970,Feature request:Add missing java api for `StreamTestKit`,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-16T17:56:06Z,2024-04-27T08:34:08Z,"Motivation:
Currently there are some methods are missing in the StreamTestkit for javadsl. And which is very annoying when you implement  a `GraphStage` in Java and test it in pure Java.

I think this task is easy if anyone else in the community want to take a try. otherwise I would like to prepare this this weekend, because I coding in java everyday.

Result:
More friendly for Java end users.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/970/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI1oZ,pekko,1898142233,970,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2024-01-18T09:50:02Z,2024-01-18T09:50:02Z,"I checked the java version of `StreamTestKit` and it is quite different from the scala version. As much as I want to help, but I don't know how to get started, can you give me more detailed instructions?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI1oZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI_KV,pekko,1898181269,970,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-18T10:12:47Z,2024-01-18T10:12:47Z,"@naosense Thanks for intreast this.

![Screenshot_20240118_180539_GitHub.jpg](https://github.com/apache/incubator-pekko/assets/501740/3ef3df39-c829-48af-9b2a-481022e510bc)

This one, you will see there are many scala methods don't have related crossesbanding  java api.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI_KV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8R7F,pekko,1911627461,970,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2024-01-26T07:55:25Z,2024-01-26T07:55:25Z,"As it was said in the WeChat group, should I change FiniteDuration to java.time.Duration, or add some equalent methods with java.time.Duration?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8R7F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8VC4,pekko,1911640248,970,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T08:08:31Z,2024-01-26T08:08:31Z,"> As it was said in the WeChat group, should I change FiniteDuration to java.time.Duration, or add some equalent methods with java.time.Duration?

@naosense Yes you should, other parts of the `javaapi` for pekko-streams use `java.time.Duration`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8VC4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8YoZ,pekko,1911654937,970,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T08:22:11Z,2024-01-26T08:22:11Z,"I was on meeting, you should keep the method the same, but adopt the Scala type to Java native type.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8YoZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8g68,pekko,1911688892,970,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T08:51:25Z,2024-01-26T08:51:25Z,"@naosense You can take a look at https://github.com/apache/incubator-pekko/blob/main/CONTRIBUTING.md#java-apis-in-pekko for the type mapping, hope you have a nice ride, and thank you.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8g68/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qF3,pekko,1911726455,970,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2024-01-26T09:20:12Z,2024-01-26T09:20:12Z,"I created a PR, but I don't have permission to add a reviewer, please take a look when you have time @He-Pin ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qF3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/970,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qaQ,pekko,1911727760,970,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T09:21:15Z,2024-01-26T09:21:15Z,"> I created a PR, but I don't have permission to add a reviewer, please take a look when you have time @He-Pin

Done","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qaQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/972,https://api.github.com/repos/apache/pekko/issues/972,pekko,2085294173,972,Feature request:Add Sink/Flow.forall operator,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-17T02:53:35Z,2024-01-28T09:54:09Z,"Motivation:
Add `Sink.forall` which can be implemented with `fold / statefulMap`, just act as `Nil.forall)`

Both zio and fs2 has this method.

Result:
rich operators set, and It works as Java Stream 's `allMatch`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/972/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/972,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAjWm,pekko,1895970214,972,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-17T14:50:39Z,2024-01-17T14:50:39Z,"@laglangyue Would you like to take care of this, thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAjWm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/972,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAk3k,pekko,1895976420,972,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-17T14:53:44Z,2024-01-17T14:53:44Z,"@laglangyue could you consider filling in an Apache committee form? For larger PRs, we require this. See the CONTRIBUTING.md page on this repo - basically this: https://www.apache.org/licenses/contributor-agreements.html","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAk3k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/972,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xG8MK,pekko,1897644810,972,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-18T02:03:07Z,2024-01-18T02:03:07Z,"> Would you like to take care of this, thanks.

willing to do this

> could you consider filling in an Apache committee form?

yeah，i will complete it as soon as possible
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xG8MK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/972,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZgB0,pekko,1902510196,972,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-21T04:44:48Z,2024-01-21T04:44:48Z,">> could you consider filling in an Apache committee form?

I had sended it to secretary@apache.org. it's my form
![image](https://github.com/apache/incubator-pekko/assets/35491928/a5b74cbf-a85a-42d3-964d-950dabab88fa)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZgB0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/973,https://api.github.com/repos/apache/pekko/issues/973,pekko,2085295087,973,Feature request:Add Sink.exists operator,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-17T02:54:39Z,2024-01-30T06:31:25Z,"Motivation:
Add `Sink.exists` operator ,which can be implemented with `Sink.fold / statefulMap`.
Both zio and fs2 has this mehtod.

Result:
Rich operators set.

It should work as Java Stream's `anyMatch`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/973/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/973,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAfHB,pekko,1895952833,973,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-17T14:41:58Z,2024-01-17T14:41:58Z,@GreyPlane Would you like to take care about this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xAfHB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/973,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI3fj,pekko,1898149859,973,NA,GreyPlane,31082046,Luigi,,NA,2024-01-18T09:54:37Z,2024-01-18T09:54:37Z,"Thanks for the mention, I think it's OK, I'd like to pick this up maybe this weekend or earlier If I had time.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xI3fj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/974,pekko,2086399489,974,Feature request: Add Flow#switchMap operator.,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-17T15:10:56Z,2025-01-07T07:28:44Z,"Motivation:
I find that Pekko stream doen't has the `switchmap` operator, it's called as this in both `fs2` and `flux`, I think we need  to take the same name and same semantic.

Usercase:
A Stream of `Post`, eg twitter/X 's Post, and every Post has a Stream of `Comments`.
```
[Post 1] ---> [Comment 1] ... [Comment 2] ... [Comment 3] ...
.
.
.
[Post 2] ---> [Comment 1] ... [Comment 2] ... 
.
.
.
[Post 3] ---> [Comment 1] ... [Comment 2] ... [Comment 3] ... [Comment 4]..
.
.
.
\|/ User scrolling down.
```

Emits when: sub stream emits and downstream is available 
Backpressures when: sub stream backpressure.
cancels when: down stream cancels
completes when: upstream completes and the current substream completes.

In some implementation, the upstream is never backpressured, I think that's not safe. I think the upstream should be backpressured if there is no downstream demands.


Result:
We have rich operators set.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/974/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xStv4,pekko,1900731384,974,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T16:33:47Z,2024-01-19T16:33:47Z,"@pjfanning @mdedetrich what do you think about his one, I find it would be nice for live streaming. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xStv4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xruZL,pekko,1907287627,974,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T03:18:20Z,2024-01-24T03:18:20Z,"Implementation this shold not be that hard but seems no much interest, will defer to later version. it's a kind of stream of streams","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xruZL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrvmj,pekko,1907292579,974,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T03:25:21Z,2024-01-24T03:25:21Z,"I think we have enough on our plate right now with all of the new features, we can always add this into 1.1.0-M2 (if a new M2 is needed) or in 1.2.x.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrvmj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrxRZ,pekko,1907299417,974,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T03:36:44Z,2024-01-24T03:36:44Z,"I will back my hometown soon, if anyone submited a pr about this, then this can be added to 1.1.0-M2 I think, before that, it's safe for later version.

I was expecting we stating remove code in 1.2.x but not adding features.

I just update what I thought about this operator.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrxRZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI3s6,pekko,2569239354,974,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-03T13:41:27Z,2025-01-03T13:41:27Z,refs: https://github.com/apache/pekko/issues/1660,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI3s6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/974,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZdLOM,pekko,2574562188,974,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-07T07:27:13Z,2025-01-07T07:27:13Z,"https://github.com/spring-projects/spring-ai/blob/3c539a37a38e009e11e2a8870a1708787831069b/models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java#L283-L288

```scala
Flux<ChatResponse> chatResponseFlux = response.switchMap(chatCompletionResponse -> {
```
It's been used in spring-ai","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZdLOM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/975,pekko,2086525943,975,[DOC] Style Guide document render issue,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2024-01-17T16:17:31Z,2024-04-29T11:37:51Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->

On Index page: https://pekko.apache.org/docs/pekko/current/typed/index.html

style guide TOC not correctly rendering.

<img width=""429"" alt=""截屏2024-01-18 00 11 10"" src=""https://github.com/apache/incubator-pekko/assets/26020358/b070e4b8-9e3d-4f6b-8ad8-91dc4d238f84"">


## short investigation

Style Guide Page TOC has diffrence content on diffrence Programming language, but it may be due to the incorrect use of Paradox Or Paradox issue, Need to figure it out.

<img width=""1441"" alt=""截屏2024-01-18 00 11 40"" src=""https://github.com/apache/incubator-pekko/assets/26020358/93d6deaa-707f-48b3-9a4f-621d027a92d6"">

<img width=""1412"" alt=""截屏2024-01-18 00 11 48"" src=""https://github.com/apache/incubator-pekko/assets/26020358/6af650eb-d006-4569-a969-c0eae2450d4c"">


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/975/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBSP9,pekko,1896162301,975,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-17T16:26:44Z,2024-01-17T16:26:44Z,"after git blame investigation, i believe this is the issue of paradox.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBSP9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBUkv,pekko,1896171823,975,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-17T16:31:01Z,2024-01-17T16:31:01Z,"![Screenshot_20240118_003001_Samsung Internet.jpg](https://github.com/apache/incubator-pekko/assets/501740/906aeca7-fa6e-49c6-b446-e0d9fbf61a6e)

Thanks, just checked and yes, maybe some kind of issue issue ？","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBUkv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBXnS,pekko,1896184274,975,NA,samueleresca,8921095,Samuele Resca,samuele.resca@gmail.com,NA,2024-01-17T16:37:32Z,2024-01-17T16:37:32Z,I think because paradox tries to hide from the list the sections that are Java or Scala only if you change the selected language,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBXnS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBd7P,pekko,1896210127,975,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-17T16:52:16Z,2024-01-17T16:52:16Z,"> I think because paradox tries to hide from the list the sections that are Java or Scala only if you change the selected language

I think that the ""index"" page rendering does not filter out the Children in a particular language from the list.

 And I think is an achievable considering that paradox will add class of ""group xxx"" to these Children DOM.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xBd7P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xm5rC,pekko,1906023106,975,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-23T13:06:03Z,2024-01-23T13:06:03Z,"The good news is I managed to replicate this with the original paradox plugin without any theme, that's meaning we narrowed the bug scope.

I will continue https://github.com/apache/incubator-pekko-sbt-paradox/pull/87 to fix this.

<img width=""488"" alt=""截屏2024-01-23 21 01 15"" src=""https://github.com/apache/incubator-pekko/assets/26020358/25d543b9-68ef-419c-a864-23a18bf42a10"">
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xm5rC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/975,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58IEsw,pekko,2082491184,975,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-04-29T11:37:51Z,2024-04-29T11:37:51Z,closed via [#72](https://github.com/apache/pekko-site/pull/72),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58IEsw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/976,https://api.github.com/repos/apache/pekko/issues/976,pekko,2087534659,976,Feature request: Add Flow#find operator.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-18T05:29:24Z,2024-01-24T02:53:17Z,"Motivation:
Both collection , zio , fs2 has a find method, even the Java Stream's `findAny/findFirst`, it would be nice to have one.
This can be implemented with `filter + fold`.

Result:
Richer operators set.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/976/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/976,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrouO,pekko,1907264398,976,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T02:53:03Z,2024-01-24T02:53:03Z,"This is a collectFirst now, let me close this, can be added","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xrouO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/977,https://api.github.com/repos/apache/pekko/issues/977,pekko,2088793628,977,Feature request: Add Flow#collectFirst operator,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-18T17:57:15Z,2024-01-20T11:39:57Z,"Motivation:
I think this operator is common, even on X, there are server tweets about it. Both ZIO and FS2 has this method too.

I asked the question on discord, and I think this should be nice.

Result: 
Rich operator set.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/977/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/979,pekko,2089568618,979,Doc: We can metion the Java 21's new switch statement.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-19T04:37:38Z,2024-08-12T12:21:16Z,"Motivation:
When handle an actor's messages, in Scala ,we can use the pattern matching, but now with JDK 21, we can use the new fancy :
```java
switch(msg） {
  case XEvent event -> handle(event);
  default _ -> unhandled(msg);
```
style, and which will leverage the `typeSwitch` and maybe better performance vs the `if else`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/979/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ07q,pekko,1902595818,979,NA,duobei,926853,Luca Zhang,,NA,2024-01-21T11:12:36Z,2024-01-21T11:12:36Z,"When I execute `sbt docs/paradoxBrowse`, it raised a error:
```
[error] java.lang.RuntimeException: Error creating extended parser class: Could not determine whether class 'org.pegdown.ParserWithDirectives$$parboiled' has already been loaded
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:58)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
[error] 	at com.lightbend.paradox.sbt.ParadoxPlugin$.$anonfun$baseParadoxSettings$2(ParadoxPlugin.scala:83)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[error] 	at java.base/java.lang.Thread.run(Thread.java:833)
[error] Caused by: java.lang.RuntimeException: Could not determine whether class 'org.pegdown.ParserWithDirectives$$parboiled' has already been loaded
[error] 	at org.parboiled.transform.AsmUtils.findLoadedClass(AsmUtils.java:217)
[error] 	at org.parboiled.transform.ParserTransformer.transformParser(ParserTransformer.java:35)
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:54)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
[error] 	at com.lightbend.paradox.sbt.ParadoxPlugin$.$anonfun$baseParadoxSettings$2(ParadoxPlugin.scala:83)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[error] 	at java.base/java.lang.Thread.run(Thread.java:833)
[error] Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.findLoadedClass(java.lang.String) accessible: module java.base does not ""opens java.lang"" to unnamed module @57103ee8
[error] 	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
[error] 	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
[error] 	at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)
[error] 	at java.base/java.lang.reflect.Method.setAccessible(Method.java:193)
[error] 	at org.parboiled.transform.AsmUtils.findLoadedClass(AsmUtils.java:210)
[error] 	at org.parboiled.transform.ParserTransformer.transformParser(ParserTransformer.java:35)
[error] 	at org.parboiled.Parboiled.createParser(Parboiled.java:54)
[error] 	at com.lightbend.paradox.markdown.Reader.<init>(Reader.scala:40)
[error] 	at com.lightbend.paradox.sbt.ParadoxPlugin$.$anonfun$baseParadoxSettings$2(ParadoxPlugin.scala:83)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error] 	at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error] 	at sbt.Execute.work(Execute.scala:292)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
[error] 	at java.base/java.lang.Thread.run(Thread.java:833)
[error] (docs / Compile / paradoxProcessor) Error creating extended parser class: Could not determine whether class 'org.pegdown.ParserWithDirectives$$parboiled' has already been loaded
``` ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ07q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ2FT,pekko,1902600531,979,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-21T11:32:23Z,2024-01-21T11:32:23Z,`sbt paradox` commands are best with Java 11.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ2FT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ7A9,pekko,1902620733,979,NA,duobei,926853,Luca Zhang,,NA,2024-01-21T12:56:21Z,2024-01-21T12:56:21Z,"> `sbt paradox` commands are best with Java 11.

But it can't work with Java 17.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ7A9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ7JP,pekko,1902621263,979,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-21T12:58:10Z,2024-01-21T12:58:10Z,"@duobei Yes, in Java 17 , you need add opens, something like :
```
             --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED
                            --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED
                            --add-opens jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED
                            --add-opens jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED
                            --add-opens java.base/java.lang=ALL-UNNAMED
                            --add-opens java.base/java.net=ALL-UNNAMED
                            --add-opens java.base/java.util=ALL-UNNAMED
                            --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED
                            --add-opens java.base/java.nio=ALL-UNNAMED
                            --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
                            --add-exports java.base/sun.net.www.protocol.https=ALL-UNNAMED
                            --add-exports java.base/sun.util.calendar=ALL-UNNAMED
                            --add-exports java.base/java.lang.reflect=ALL-UNNAMED
                            --add-opens java.base/sun.net.util=ALL-UNNAMED
                            --add-opens java.base/sun.nio.ch=ALL-UNNAMED
                            --add-opens java.base/java.math=ALL-UNNAMED
                            --add-opens java.base/sun.security.action=ALL-UNNAMED
                            --add-opens java.management/sun.management=ALL-UNNAMED
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZ7JP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_4mM,pekko,1912572300,979,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-26T19:21:20Z,2024-01-26T19:21:20Z,"> @duobei Yes, in Java 17 , you need add opens, something like :

I think we have a plugin `PekkoDisciplinePlugin` which can be filled in Scala or Java options, Can you try to produce a setting for JDk17? Thanks.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_4mM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yBEA2,pekko,1912881206,979,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-27T00:53:24Z,2024-01-27T00:53:24Z,It's experimental in jdk 17？,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yBEA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/979,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6IIGWz,pekko,2283824563,979,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-12T12:21:16Z,2024-08-12T12:21:16Z,https://github.com/apache/pekko/pull/1011 was merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6IIGWz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/980,pekko,2089663742,980,Feature request: RestartWithBackOffAndFallback for Flow & Sink,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-19T06:05:10Z,2025-01-24T20:01:55Z,"Motivation:
I saw in https://github.com/akka/akka/issues/30267 @nvollmar added this feature for actor, but I think it would be nice to have this in pekko-stream, where user can logging the error with a restart/resume, and currently ,we just simply ignore it.

I found the related case from @tg44 in https://discuss.lightbend.com/t/recover-from-sink-exceptions/10554

I think this should be very useful for real production usecase.

Result:
More handy control over the exceptions","{""url"": ""https://api.github.com/repos/apache/pekko/issues/980/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xPQx2,pekko,1899826294,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T06:12:53Z,2024-01-19T06:12:53Z,"You can do this already due to this change https://github.com/apache/incubator-pekko/pull/252 which has already landed.

You can just make your own supervision decider, i.e. 

```scala
val decider: Supervision.Decider = { e =>
  logger.error(""Unhandled exception in stream"", e)
  Supervision.Stop
}
```

or am I missing something?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xPQx2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xPWt9,pekko,1899850621,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T06:39:48Z,2024-01-19T06:39:48Z,"Yes, I was expecting some factory method, eg `Decider.resume(level:LoggingLevel)`, let's wait for some feedbacks form @tg44 and @nvollmar ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xPWt9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQDJ0,pekko,1900032628,980,NA,tg44,31839,Gergő Törcsvári,,NA,2024-01-19T09:14:37Z,2024-01-19T09:14:37Z,"So, my initial problem was that I have a substream which has a fileIO in it, the fileIO was only a safety measure, so if we loose the db connection we don't loose (too much) data. Then one day the fileIO failed (we couldn't recreate it bcs it opened a file which failed due to hosting provider issues), and it brought down the whole stream, and we lost hours of data when we finally noticed that the stream is down...

My idea was to lazily create a sink, if it fails I can recreate it, if it fails multiple times I can simply change it to a `Sink.ignore` if I want to.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQDJ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQILw,pekko,1900053232,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T09:28:21Z,2024-01-19T09:28:21Z,"@tg44 So if by Sub Stream you mean `SubFlow` the issue you describe is partially solved in Pekko 1.1.x with this [PR](https://github.com/apache/incubator-pekko/pull/252) (which isn't released yet but there are snapshots if you want to try). You can read the migration notes [here](https://github.com/apache/incubator-pekko/blob/32c5d2c306e8d7dba78befaa0a09b5b1f62d66e7/docs/src/main/paradox/project/migration-guide-1.0.x-1.1.x.md#sourcesplitwhenflowsplitwhensourcesplitafterflowsplitafter-behavioural-change)

What I mean by partially is that as is noted in the migration notes we don't support `Supervision.restart`. Initially when implementing that PR I had difficulties supporting `Supervision.restart` but since there seems to be some demand for it I can look into it if you confirm that `Supervision.restart` support for `SubFlow`'s is indeed what you are actually asking for.

@He-Pin Aside from what I just said I don't think we need to add anything else for Pekko, it appears that @tg44 just wants support for automatic restarting of `SubFlow`'s","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQILw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQM0v,pekko,1900072239,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T09:41:54Z,2024-01-19T09:41:54Z,"@mdedetrich I think what's @tg44 needs is :
1. a RestartSink, with is currently missing, maybe that can be done with the RestartFlow.to(IgnoreSink)
2. a fallback, but for the sink, the main sink was a `fileIO` sink ,but after some max retry, switch to a `Sink.ignore`.

```scala


Data Source X
   |
  \|/
Datas --> Process A ----> Process FileIO Sink (main, can retry with backoff restart)
                                      |
                                      |  (only switch after the main sink die and restart up to the max limit)
                                      |
                                      |----> fallback Ignore Sink(logging) maybe.
           
````

And I think this is what he really want.




","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQM0v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQOrA,pekko,1900079808,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T09:47:10Z,2024-01-19T09:47:10Z,"@He-Pin But he is talking about `SubFlow`, so from what he seems to be saying is that he just wants the `SubFlow` to have the ability to restart (and this means by implication if the `SubFlow` is just a sink then the Sink will restart).

Then you can just do 

```scala
val restartingDecider: Supervision.Decider = { e =>
  logger.error(""Unhandled exception in stream, restarting"", e)
  Supervision.Restart
}

source
  .splitAfter(_ == somePredicate)
  .withAttributes(ActorAttributes.supervisionStrategy(restartingDecider))
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQOrA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQQrU,pekko,1900088020,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T09:52:20Z,2024-01-19T09:52:20Z,"@mdedetrich But your proposal can not swith to an `ignore` sink.

I see you just updated a pr, what about extends `RestartFlow` to support a fallback too.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQQrU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQSAo,pekko,1900093480,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T09:55:55Z,2024-01-19T09:55:55Z,"@He-Pin https://github.com/apache/incubator-pekko/pull/981 is what I was thinking of (still needs to be tested, there may be some mistake)

> But your proposal can not swith to an ignore sink.

Its not necessary though, you can do this yourself by making a custom sink with [`Partition`](https://pekko.apache.org/docs/pekko/current/stream/operators/Partition.html)?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQSAo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQUnT,pekko,1900104147,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T10:02:29Z,2024-01-19T10:02:29Z,"An out of box seems better, I think some kind of ZIO ZSink's `orElse` but only switch after some kind of maxRetriesWithBackOff.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQUnT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQVA-,pekko,1900105790,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T10:03:33Z,2024-01-19T10:03:33Z,"> An out of box seems better, I think some kind of ZIO ZSink's `orElse` but only switch after some kind of maxRetriesWithBackOff.

Yeah using [`Partition`](https://pekko.apache.org/docs/pekko/current/stream/operators/Partition.html) right now is a bit clunky because of how manual it is but thats another topic

@tg44 Let me know if I am on the right track and if so I will work on https://github.com/apache/incubator-pekko/pull/981","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQVA-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQjlX,pekko,1900165463,980,NA,tg44,31839,Gergő Törcsvári,,NA,2024-01-19T10:41:15Z,2024-01-19T10:41:15Z,"My usecase looks like this;
```
Data Source X
   |
  \|/
Datas
   |
  \|/
Process A 
   |
  \|/
wireTap()----> Process FileIO Sink (main, can retry with backoff restart)
   |                   |  (if it is restarted with supervision it will fail at every retry effectively killing the database save)
  \|/                  |  (only switch after the main sink die and restart up to the max limit)
database save          |
                       |----> fallback Ignore Sink(logging) maybe.
```

I think we don't have a Sink which can handle the right side of the graph. It could be something like;
```scala
def sinkWithFallback[T, Mat](factory: () => (exception: Option[Throwable]) => Sink[T, Mat]): Sink[T, Mat]
```
And it should be easily implemented from `lazySink`, but `lazySink` is internal (or at least the akka version I'm using rn has it in internal), so it is messy...

(We need the factory to be like in `mapConcat` so we can add a factory like 
```scala
() => {
  var retries = 0
  (exception: Option[Throwable]) => {
      retries += 1
      if(retries > 100) { 
        Sink.ignore
      } else {
        someProbablyFailingSink
      }
  }
}
```
also, sorry if I'm not using proper scala syntax, I code in ts a lot recently :( )","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQjlX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQm9v,pekko,1900179311,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T10:50:48Z,2024-01-19T10:50:48Z,"@tg44  So just to confirm, buy sub stream you didn't mean `split`/`when` (which creates a `SubFlow`) but instead `wireTap()`.

Also is there a reason why you aren't using `alsoTo` instead of `wireTap`? Usually for your scenario you would use `alsoTo` since `wireTap` will not backpressure the flow it is tapped into (hence `wireTap` is typically only used for logging/metrics and the such)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQm9v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQvWV,pekko,1900213653,980,NA,tg44,31839,Gergő Törcsvári,,NA,2024-01-19T11:13:05Z,2024-01-19T11:13:05Z,"@mdedetrich Nah, when I started to work with akka streams we tend to call every ""part of the stream after a fanout"" as a substream, and `groupBy` and the ""real"" `substream`/`subflow` as a term was introduced/standardized later on. (I was a really really early adopter, I think I have merged PRs almost every akka repos (akka, akka-http, I wrote/rewrote components to alpakka).) So sorry for the misunderstanding.

For me the fileIO is kinda a log to a file, so I choose wireTap with an intention, I have buffers and logrotator and everything in between the wireTap and the actual fileIO, I can allow to not write everything to the fileLog, but I need to write everything to the database as fast as possible.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xQvWV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTE-z,pekko,1900826547,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T17:39:50Z,2024-01-19T17:39:50Z,"Yes, I love your contritions @tg44 and I used it too.

And I think what's you did is some kind of *Isolate strong and weak dependencies to prevent strong dependencies from being affected by weak dependencies*

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTE-z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xUgP7,pekko,1901200379,980,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-19T22:17:38Z,2024-01-19T22:17:38Z,"Okay so in the end this seems to be a request for an easier dsl for constructing a specific `Sink` and while https://github.com/apache/incubator-pekko/pull/981 is valid its also not related.

Now that I think of it, this honestly seems to be asking for a `Sink` equivalent of [`RetryFlow.withBackoff`](https://doc.akka.io/docs/akka/current/stream/operators/RetryFlow/withBackoff.html), @He-Pin wdyt","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xUgP7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/980,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xUm4w,pekko,1901227568,980,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T22:28:32Z,2024-01-19T22:28:32Z,"@mdedetrich That's true, but we can extends to `Retry/Restart*.withBackOff/fallback`, that's what I have in mind.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xUm4w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/986,pekko,2090937917,986,Bug: `java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF` in actor / osgiBundle,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-19T17:02:25Z,2024-01-23T05:27:06Z,"Error when try to execute:
```
Jmh/run -i 3 -wi 3 -f1 -t1 .*ZipWithIndexBenchmark.* 

```
```scala
error] (actor / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error] Total time: 39 s, completed 2024-1-20 1:00:26
[IJ]last actor / osgiBundle
[info] Validating all packages are set private or exported for OSGi explicitly...
[warn] bnd: Unused -privatepackage instructions , no such package(s) on the class path: [org.apache.pekko.osgi.impl]
[warn] bnd: Unused Import-Package instructions: [scala.compat.java8.*]
[error] java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error]         at java.util.zip.ZipOutputStream.putNextEntry(ZipOutputStream.java:232)
[error]         at java.util.jar.JarOutputStream.putNextEntry(JarOutputStream.java:109)
[error]         at sbt.io.IO$.addFileEntry$1(IO.scala:717)
[error]         at sbt.io.IO$.$anonfun$writeZip$6(IO.scala:726)
[error]         at sbt.io.IO$.$anonfun$writeZip$6$adapted(IO.scala:726)
[error]         at scala.collection.immutable.Stream.foreach(Stream.scala:533)
[error]         at sbt.io.IO$.writeZip(IO.scala:726)
[error]         at sbt.io.IO$.$anonfun$archive$2(IO.scala:676)
[error]         at sbt.io.IO$.$anonfun$archive$2$adapted(IO.scala:673)
[error]         at sbt.io.IO$.$anonfun$withZipOutput$1(IO.scala:773)
[error]         at sbt.io.IO$.$anonfun$withZipOutput$1$adapted(IO.scala:753)
[error]         at sbt.io.Using.apply(Using.scala:28)
[error]         at sbt.io.IO$.withZipOutput(IO.scala:753)
[error]         at sbt.io.IO$.archive(IO.scala:673)
[error]         at sbt.io.IO$.jar(IO.scala:621)
[error]         at com.typesafe.sbt.osgi.Osgi$.$anonfun$bundleTask$1(Osgi.scala:187)
[error]         at scala.Option.getOrElse(Option.scala:189)
[error]         at com.typesafe.sbt.osgi.Osgi$.withCache(Osgi.scala:112)
[error]         at com.typesafe.sbt.osgi.Osgi$.bundleTask(Osgi.scala:139)
[error]         at com.typesafe.sbt.osgi.SbtOsgi$.$anonfun$defaultOsgiSettings$1(SbtOsgi.scala:57)
[error]         at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error]         at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:63)
[error]         at sbt.std.Transform$$anon$4.work(Transform.scala:69)
[error]         at sbt.Execute.$anonfun$submit$2(Execute.scala:283)
[error]         at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:24)
[error]         at sbt.Execute.work(Execute.scala:292)
[error]         at sbt.Execute.$anonfun$submit$1(Execute.scala:283)
[error]         at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:265)
[error]         at sbt.CompletionService$$anon$2.call(CompletionService.scala:65)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
[error]         at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[error]         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[error]         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[error]         at java.lang.Thread.run(Thread.java:750)
[error] (actor / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error] (slf4j / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error] (stream / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error] (testkit / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
[error] (coordination / osgiBundle) java.util.zip.ZipException: duplicate entry: META-INF/MANIFEST.MF
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/986/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xS5M0,pekko,1900778292,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T17:06:31Z,2024-01-19T17:06:31Z,@mdedetrich Would you like to take a view?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xS5M0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xS-yp,pekko,1900801193,986,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-19T17:22:10Z,2024-01-19T17:22:10Z,"Don't know why, but won't happen on my laptop, can you provider more information?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xS-yp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTAuI,pekko,1900809096,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-19T17:28:08Z,2024-01-19T17:28:08Z,"@Roiocam to reproduce:
```sbt
1) sbt shell
2) project bench-jmh
3) Jmh/run -i 3 -wi 3 -f1 -t1 .*ZipWithIndexBenchmark.* 
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTAuI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTEJ0,pekko,1900823156,986,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-19T17:37:46Z,2024-01-19T17:37:46Z,"> @Roiocam to reproduce:
> 
> ```scala
> 1) sbt shell
> 2) project bench-jmh
> 3) Jmh/run -i 3 -wi 3 -f1 -t1 .*ZipWithIndexBenchmark.* 
> ```

Yep, that's what I did before. Those ERROR don't appear on my laptop.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xTEJ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYgT7,pekko,1902249211,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T19:43:02Z,2024-01-20T19:43:02Z,I think it may need `assemblyMergeStrategy` or something like that. @Roiocam I'm using Windows 11.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYgT7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbWn8,pekko,1902995964,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T02:48:52Z,2024-01-22T02:48:52Z,"refs: https://github.com/sbt/sbt-osgi/issues/113

This blockme to run any jmh on windows :(","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbWn8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbYPb,pekko,1903002587,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T02:51:30Z,2024-01-22T02:51:30Z,"This seems to be windows related, I am also not experiencing any issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbYPb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbluv,pekko,1903057839,986,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-22T03:12:57Z,2024-01-22T03:12:57Z,"> I think it may need `assemblyMergeStrategy` or something like that. @Roiocam I'm using Windows 11.

I think this issue related to https://github.com/apache/incubator-pekko/pull/920","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbluv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbrpX,pekko,1903082071,986,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-22T03:23:43Z,2024-01-22T03:23:43Z,"> > I think it may need `assemblyMergeStrategy` or something like that. @Roiocam I'm using Windows 11.
> 
> I think this issue related to #920

The issue: https://github.com/sbt/sbt-assembly/issues/80 may help with this issue.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbrpX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xb9fj,pekko,1903155171,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T03:56:20Z,2024-01-22T03:56:20Z,"> The issue: [sbt/sbt-assembly#80](https://github.com/sbt/sbt-assembly/issues/80) may help with this issue.

I have doubts that this is the core issue, its over 11 years old and our issue is unique to windows which to me indicates the problem is elsewhere.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xb9fj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xb_u-,pekko,1903164350,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T04:00:41Z,2024-01-22T04:00:41Z,@He-Pin What I would recommend is changing the version in https://github.com/apache/incubator-pekko/blob/main/project/plugins.sbt#L16 until you hit a point where you can no longer replicate the issue.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xb_u-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcKdV,pekko,1903208277,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T04:20:16Z,2024-01-22T04:20:16Z,"`addSbtPlugin(""com.typesafe.sbt"" % ""sbt-osgi"" % ""0.9.4"")`
`addSbtPlugin(""com.typesafe.sbt"" % ""sbt-osgi"" % ""0.9.6"")`
 works.

```
 // Recent versions of BND create corrupted jars so use JDK jar instead, see https://github.com/sbt/sbt-osgi/pull/81
      OsgiKeys.packageWithJVMJar := true)
addSbtPlugin(""com.github.sbt"" % ""sbt-osgi"" % ""0.9.7"")

```

broken.

```
      // Recent versions of BND create corrupted jars so use JDK jar instead, see https://github.com/sbt/sbt-osgi/pull/81
      OsgiKeys.packageWithJVMJar := false)
addSbtPlugin(""com.github.sbt"" % ""sbt-osgi"" % ""0.9.7"")

```
works.


```
     // Recent versions of BND create corrupted jars so use JDK jar instead, see https://github.com/sbt/sbt-osgi/pull/81
      OsgiKeys.packageWithJVMJar := false)
addSbtPlugin(""com.github.sbt"" % ""sbt-osgi"" % ""0.9.10"")

```
works.

I think the duplicate file comes from `packageWithJVMJar`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcKdV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcQe1,pekko,1903232949,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T04:35:33Z,2024-01-22T04:35:33Z,"So I believe the relevant change is https://github.com/sbt/sbt-osgi/pull/81, i.e. moving from BND to JVM jar tools to re-create the final osgi jar bundle.

@He-Pin Can you change https://github.com/apache/incubator-pekko/blob/main/project/plugins.sbt#L16 to 0.9.7 and https://github.com/apache/incubator-pekko/blob/main/project/OSGi.scala#L46 to false and let me know if you still get problems (or not)?

If you are not getting issues when setting `packageWithJVMJar` to `false` with sbt-osgi 0.9.7 its highly likely the logic in https://github.com/sbt/sbt-osgi/pull/81/files#diff-2530a9c505dd4cb34217eb195d5db3cab065049f033db306f485078da72edd5dR81-R93 is not properly portable on windows.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcQe1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcU2G,pekko,1903250822,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T04:54:28Z,2024-01-22T04:54:28Z,@mdedetrich I just updated my comments. the must be another `META-INF/MANIFEST.MF` comes from jdkjar on windows.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcU2G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcVew,pekko,1903253424,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T04:57:29Z,2024-01-22T04:57:29Z,"@He-Pin In that case I would have a look at https://github.com/sbt/sbt-osgi/pull/81/files#diff-2530a9c505dd4cb34217eb195d5db3cab065049f033db306f485078da72edd5dR81-R93 and make a PR against sbt-osgi with the fix. It should be quite understandable what that code is doing.

I don't know how/why Windows is bringing in its own `META-INF/MANIFEST.MF`, the solution might be just to just exclude the copying of that extra `META-INF/MANIFEST.MF` (I would inspect its contents to see what is in there to get an idea of whats going on).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcVew/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcbpP,pekko,1903278671,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T05:21:09Z,2024-01-22T05:21:09Z,"@mdedetrich I can do that on weekend, but why not a merge strategy? and user can then rewrite as what they want.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcbpP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcf-4,pekko,1903296440,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T05:40:06Z,2024-01-22T05:40:06Z,"> @mdedetrich I can do that on weekend, but why not a merge strategy? and user can then rewrite as what they want.

Because thats a hack that is not solving the core problem which is diverging behaviour on Windows, there shouldn't be any duplicate files in the first place and the `MergeStrategy` is only valid for sbt-assembly which is not even relevant for the `actor` project (sbt-assembly is only used for `protobuf-v3` so it wouldn't even solve the issue here).

I would suggest to solve it properly which is figuring out the difference of Windows vs Linux/MacOS and making sure it behaves the same. In the meantime you can set `packageWithJVMJar := false` temporarily on your local Windows machine while working on Pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcf-4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcrGI,pekko,1903341960,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T06:26:46Z,2024-01-22T06:26:46Z,"SBT currently can't download the sbt plugin sources, so I can't debug, or you can publish a new sbt-osgi which can print the detail of the conflict files.

I don't think that's a hack, it's a fix for Windows users/contributors.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcrGI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcszU,pekko,1903348948,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T06:34:11Z,2024-01-22T06:34:11Z,"> SBT currently can't download the sbt plugin sources, so I can't debug, or you can publish a new sbt-osgi which can print the detail of the conflict files.

Everyone has this issue. The way that sbt-plugins are developed/debugged is by using manual log/println statements (see https://www.scala-sbt.org/1.x/docs/Howto-Logging.html#Log+messages+in+a+task for how to log in a setting/task) and using `publishLocal` to deploy the sbt plugin locally and then setting the version in https://github.com/apache/incubator-pekko/blob/main/project/OSGi.scala#L46 to see whats happening.

Alternately you can write a sbt-scripted test for `packageWithJVMJar := true`, one does not [currently exist](https://github.com/search?q=repo%3Asbt%2Fsbt-osgi%20path%3A%2F%5Esrc%5C%2Fsbt-test%5C%2Fsbt-osgi%5C%2F%2F%20packageWithJVMJar&type=code) and since sbt-osgi has windows as part of its CI its likely it will pick it up.

> I don't think that's a hack, it's a fix for Windows users/contributors.

`MergeStrategy` is a feature of sbt-assembly. sbt-assembly is not used in any pekko module aside from `protobufV3` and the stacktrace you provided at https://github.com/apache/incubator-pekko/issues/986#issue-2090937917 is for the root `actor` module and not `protobufV3`. This is not going to solve the problem, `MergeStrategy` is not applicable here at all.

I would help but I don't have a windows machine on hand. The best I can do for now is make a simple sbt-scripted test for `packageWithJVMJar := true` to try and easily replicate it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcszU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xc2lt,pekko,1903389037,986,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T07:14:33Z,2024-01-22T07:14:33Z,A merge strategy with conflict file can let me choose which one to keep,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xc2lt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xc3iR,pekko,1903392913,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T07:18:17Z,2024-01-22T07:18:17Z,"> A merge strategy with conflict file can let me choose which one to keep

[`MergeStrategy` is part of sbt-assembly](https://github.com/sbt/sbt-assembly/blob/develop/README.md?plain=1#L130-L146) (its not a general option),  sbt-assembly is not used in pekko actor so its not a solution. As you can see the only place where sbt-assembly is used is [here](https://github.com/apache/incubator-pekko/blob/main/build.sbt#L356-L384) which is `protobufV3`.

If you have duplicate files that are being packaged that is a critical issue with how you are packaging a jar. The reason why  `MergeStrategy` is unique to sbt-assembly is because sbt-assemblies whole goal is to merge multiple jar's into a single jar.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xc3iR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/986,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xdQcI,pekko,1903494920,986,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T08:37:22Z,2024-01-22T08:37:22Z,@He-Pin Found the core problem and I have a PR for the solution (see https://github.com/sbt/sbt-osgi/pull/115). Just needs to get reviewed and then I can merge + deploy the fix.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xdQcI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/987,https://api.github.com/repos/apache/pekko/issues/987,pekko,2091949049,987,Feature request: Add `Sink#orElse` operator,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-20T07:37:28Z,2024-01-20T11:40:09Z,"Motivation:
refs: https://github.com/apache/incubator-pekko/issues/980

There is already a `Flow#orElse` operator, but we need another one but for `Sink`. and ZIO has a `ZSink.orElse` too, which will switch to another sink incase of failure/cancel.

I think we can just add something like that `sink#orElse(secondary: Graph[SinkShape])`.

Result:
An out box of fallback kind thing is covered. I have not check the FS2, but ZIO has this out of box, otherwise ,and an end user you will need to write 100+ lines of code I think.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/987/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/988,https://api.github.com/repos/apache/pekko/issues/988,pekko,2091977050,988,Feature request:  Add `Flow#switchOnFirst` operator for shortcut of `prefixAndtail(1).flatmapConcat(..)` ?,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-20T09:12:08Z,2024-01-20T09:15:56Z,"Motivation:
I find it's very common to write code as `prefixAndTail(1).flatMapConcat(...)`, this kind is just something like `Flux#switchOnFirst`.
And more fine control can be done with the `prefixAndTail` but I think for most case is `prefixAndTail(1).flatMapConcat(...)` like thing.

Result:
Simpler code for common use case.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/988/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/988,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xXqSr,pekko,1902027947,988,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-20T09:15:55Z,2024-01-20T09:15:55Z,"The `prefixAndTail(1).flatMapConcat(...)` is indeed incredibly common, but not so convinced with the `switchOnFirst` name. How about `popAndFlatMapConcat`? I think this terminology is closer to Akka/Pekko

Open to other suggestions as well","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xXqSr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/994,pekko,2092011694,994,add commons-io dependency or cherry pick some code (has more performant code in some cases than built-in java equivalents),pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-20T11:03:22Z,2024-02-07T20:00:41Z,"We use commons-io as a test dependency but not as a dependency of our core libs.

We've been adding some small perf enhancements but this is going to be more contentious because it involves adding a dependency.

If we did add this dependency, we could use UnsynchronizedByteArrayInputStream/UnsynchronizedByteArrayOutputStream instead of java.io ByteArrayInputStream/ByteArrayOutputStream which has synchronized blocks. 

UnsynchronizedByteArrayOutputStream also has an efficient toInputStream which is better than getting a byte[] from ByteArrayOutputStream and creating a new ByteArrayInputStream. https://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/output/UnsynchronizedByteArrayOutputStream.html#toInputStream()

Another alternative is to copy the code we want into pekko-actor instead of having a jar dependency.

The ByteArrayInputStream/ByteArrayOutputStream code is not used massively in Pekko runtime code but possibly enough to justify this. Serialization is the main area where it is used.

Wdyt @mdedetrich @kerr @samueleresca @nvollmar 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/994/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0PS,pekko,1902068690,994,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T11:17:18Z,2024-01-20T11:17:18Z,"I think we should not add another dependnecy to actor-core.
![image](https://github.com/apache/incubator-pekko/assets/501740/643fafa3-2fc1-4327-8022-5af135b91b84)

It currently only has two dependencies, and where do you plan to use it? I was want to have jctools in as mailbox for akka-typed/akka-stream actor, but I saw cats-effect just maintain it in their code.

So If we just use a little poison of the lib, we can just source in some code, especially if user want to use pekko on android, they would want to reduce the dependencies.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0PS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0TU,pekko,1902068948,994,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T11:18:51Z,2024-01-20T11:18:51Z,"And furture more , we can just translate that code to Scala with the license header annotated.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0TU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0Z2,pekko,1902069366,994,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T11:21:03Z,2024-01-20T11:21:03Z,"> And furture more , we can just translate that code to Scala with the license header annotated.

If we do copy the code that we want into pekko-actor then we should leave it as Java. Our build supports building Java code and it would be easier to get fixes and improvements from commons-io if we do so. The code will probably be more efficient in Java anyway.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0Z2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1Eh,pekko,1902072097,994,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-20T11:35:43Z,2024-01-20T11:35:43Z,"> > And furture more , we can just translate that code to Scala with the license header annotated.
> 
> If we do copy the code that we want into pekko-actor then we should leave it as Java. Our build supports building Java code and it would be easier to get fixes and improvements from commons-io if we do so. The code will probably be more efficient in Java anyway.

There is an advantage to using Scala, it will her picked up by the Scala 2 inliner (the Scala 2 inliner doesn't work with Java sources)

Not sure if it matters in this specific case but something to keep in mind.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1Eh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2fB,pekko,1902077889,994,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T12:06:14Z,2024-01-20T12:06:14Z,And easy to port to scala js and scala native,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2fB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYDke,pekko,1902131486,994,NA,samueleresca,8921095,Samuele Resca,samuele.resca@gmail.com,NA,2024-01-20T15:22:17Z,2024-01-20T15:22:17Z,"My considerations:

- `commons.io` looks great from a vulnerabilities perspective. It seems that the past ~10 releases don't have any vulnerability discovered.
-  At the same time,we would like to add the package for taking advantage of a single feature for the sake of some potential perfromance gains. 
- There have been git activity on both  `UnsynchronizedByteArrayInputStream`, `UnsynchronizedByteArrayOutputStream`  classes but I don't spot any massive rework / controversial change that might cause headache in future (I haven't check any deps of `UnsynchronizedByteArray*Stream` classes)

We can at least try to internalize the `UnsynchronizedByteArrayInputStream` and `UnsynchronizedByteArrayOutputStream` code. If it is too much effort (either internalization or further maintenance it) then we can take a step back and add the dependency. 

On the the Java vs Scala rewrite point: how many classes / components that are dependency of `UnsynchronizedByteArray*Stream` do we need need to internalize? I'm tempted to understand first if internalization is a route, and postpone the decision of Java vs Scala rewrite
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYDke/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYWWa,pekko,1902208410,994,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T18:05:32Z,2024-01-20T18:05:32Z,I'm not against copying the code we need into Pekko. The latest commons-io code has major tentacles. The new builder brings in all sorts of other classes in commons-io. We might be able to write a simple one of our own.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYWWa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYZ9B,pekko,1902223169,994,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T18:19:10Z,2024-01-20T18:19:10Z,"I have to sat, I was want to port Netty's buffer to pure scala too, so does the jctools.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYZ9B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYeCf,pekko,1902239903,994,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T18:57:22Z,2024-01-20T18:57:22Z,We can't copy the JDK code (incompatible license) but the Spring class looks like a good one - simpler implementation but has the features we need. https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/FastByteArrayOutputStream.html Writing an InputStream that works with that should be straightforward. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYeCf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYi5D,pekko,1902259779,994,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T20:36:38Z,2024-01-20T20:36:38Z,"I have an experimental project where I have the basic classes that we need. https://github.com/pjfanning/io-experiment

Still in Java but can theoretically be ported to Scala.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYi5D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/994,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zM8UH,pekko,1932772615,994,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-07T20:00:41Z,2024-02-07T20:00:41Z,my testing indicates that we probably don't need this,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zM8UH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/995,pekko,2092017803,995,add toInputStream to ByteString,pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-20T11:24:28Z,2024-02-09T09:38:53Z,"See https://github.com/apache/incubator-pekko-http/blob/da6a228372efac2da05aae68c3acb982f7a7e58d/http-core/src/main/scala/org/apache/pekko/http/impl/engine/http2/hpack/ByteStringInputStream.scala#L30

wdyt @mdedetrich 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/995/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1X7,pekko,1902073339,995,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T11:42:36Z,2024-01-20T11:42:36Z,Zio has `toInputStream` on `ZStream`.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1X7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2RU,pekko,1902077012,995,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T12:03:02Z,2024-01-20T12:03:02Z,"One problem with adding toInputStream is that we won't be able to use it in pekko-http because we'll want pekko-http to still be able to use pekko-core 1.0.x - and presuambly, we wouldn't backport this to 1.0.x

Looking a pekko-http, I think we could improve performance by calling ByteString.toArrayUnsafe instead of toArray. Pekko-http only uses the byte[] to create a ByteArrayInputStream and this won't mutate the byte[] (but it doesn't clone it either).

That change would save us from cloning the array like ByteString.toArray does. See the hpack code link in the issue description.

So what I think I'm saying is do this ByteString change but also do a separate pekko-http change that doesn't use this change yet.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2RU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2mv,pekko,1902078383,995,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T12:08:36Z,2024-01-20T12:08:36Z,"We can source in that code in that code in pekko http, and when we bump the required pekko version, we change the package and recompile.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX2mv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYipt,pekko,1902258797,995,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-20T20:31:35Z,2024-01-20T20:31:35Z,"> One problem with adding toInputStream is that we won't be able to use it in pekko-http because we'll want pekko-http to still be able to use pekko-core 1.0.x - and presuambly, we wouldn't backport this to 1.0.x
> 
> Looking a pekko-http, I think we could improve performance by calling ByteString.toArrayUnsafe instead of toArray. Pekko-http only uses the byte[] to create a ByteArrayInputStream and this won't mutate the byte[] (but it doesn't clone it either).
> 
> That change would save us from cloning the array like ByteString.toArray does. See the hpack code link in the issue description.
> 
> So what I think I'm saying is do this ByteString change but also do a separate pekko-http change that doesn't use this change yet.

There are many ways we can save this problem

- Force Pekko-Http to use Pekko 1.0.x (thats what the `minVersion` is meant to specify)
- Use reflection to detect if the method doesn't exist, and if it doesn't then pekko-http can use its own inner sourced variant

I would say even backporting this to Pekko 1.0.x wouldn't entirely solve the issue and hence gives a false sense of semver considering that it wouldn't work for the earlier versions of Pekko 1.0.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYipt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/995,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zXv9Z,pekko,1935605593,995,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-09T09:38:53Z,2024-02-09T09:38:53Z,#1085 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zXv9Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/996,https://api.github.com/repos/apache/pekko/issues/996,pekko,2092019144,996,"add `Source#runHead` , `Source#runLast`,`Source#runIgnore`",laglangyue,35491928,Laglangyue,,CLOSED,2024-01-20T11:29:09Z,2024-01-21T03:04:16Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

Sink has these operator, runWith(Sink....)  >>>> runHead/runLast/runIgnore
it will be useful to develop/debug/test flow
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/996/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/996,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0zx,pekko,1902071025,996,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-20T11:29:36Z,2024-01-20T11:29:36Z,@He-Pin what do you think of them,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX0zx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/996,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1Lx,pekko,1902072561,996,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T11:38:15Z,2024-01-20T11:38:15Z,"@laglangyue Thanks , how about open one dedicated issues for each one of them, thank you. and IIRC, zio has `debug` operator. which is very easy to use, otherwise you will need something `alsoTo(Sink.printin)`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX1Lx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/996,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX_j7,pekko,1902115067,996,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-20T14:33:31Z,2024-01-20T14:33:31Z,"yes, I will close this and open one for them one by one.

> @laglangyue Thanks , how about open one dedicated issues for each one of them, thank you. and IIRC, zio has `debug` operator. which is very easy to use, otherwise you will need something `alsoTo(Sink.printin)`

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xX_j7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/998,pekko,2092076645,998,add `source.runPrintln`,laglangyue,35491928,Laglangyue,,CLOSED,2024-01-20T14:35:56Z,2024-01-21T06:34:54Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->
we always use `runwith(Sink.println)`, Adding this operator will make it easier to use.
it is useful to develop/debug/test

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/998/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYXx8,pekko,1902214268,998,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-20T18:14:16Z,2024-01-20T18:14:16Z,"I would like to say ,may be something like zoo's debug, where pekko now already has a .log operator.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYXx8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYeHt,pekko,1902240237,998,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-20T18:59:11Z,2024-01-20T18:59:11Z,I would definitely favour something that logs (slf4j/log4j/logback) instead of something that writes directly to System.out.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xYeHt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZZe5,pekko,1902483385,998,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-21T02:39:28Z,2024-01-21T02:39:28Z,"> I would like to say ,may be something like zoo's debug, where pekko now already has a .log operator.

source.log, longger code than runWith
```
source.log(""hello"")
      .withAttributes(Attributes.logLevels(
        onElement = Attributes.LogLevels.Info
)).runWith(Sink.ignore)
```

> I would definitely favour something that logs (slf4j/log4j/logback) instead of something that writes directly to System.out.

when I write examples or develop a flow in ide,  I will print it to console. 
Especially for beginners, they may not even know the `source.log` operator.
I learned the Pekko operator and wrote many examples. `runPrintln` is a good method,
such as this:
![image](https://github.com/apache/incubator-pekko/assets/35491928/3e120d64-904d-4471-a51c-cdb595b41ad0)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZZe5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZcr8,pekko,1902496508,998,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-21T04:16:28Z,2024-01-21T04:16:28Z,"I an also not a fan of this addition. Printing using `println` is in general a pretty bad idea in production and `println` is hence typicly only used locally as a debugging tool and not really committed as part of code.

To drive this point even further, iirc there is a [wartremover](https://github.com/wartremover/wartremover) option in Scala that scans for `println` and fails compilation if it finds it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZcr8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZgHC,pekko,1902510530,998,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-21T04:47:23Z,2024-01-21T04:47:23Z,"Due to the lack of agreement from the main members of the community, and  scala3 developers can use extends methods.
I will close this issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZgHC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/998,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZk_E,pekko,1902530500,998,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-21T06:34:54Z,2024-01-21T06:34:54Z,There is a console logger，but you will need to remove it before production too.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZk_E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/1006,pekko,2092294057,1006,"in pom files, set name to have 'Apache Pekko ...'",pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-21T00:52:31Z,2024-01-27T15:10:59Z,"Our poms are generated by sbt and the name in the pom closely matches the artifactId 

https://repo1.maven.org/maven2/org/apache/pekko/pekko-stream_3/1.0.2/pekko-stream_3-1.0.2.pom

See name=pekko-stream, artifactId=pekko-stream_3

We only set the name in sbt but if we change it, it affects the artifactId. We need to keep the artifactId as is.

But for this pom, we should have name=Apache Pekko Stream (or something like that - Apache Pekko bit is the key).

Requirement comes in https://lists.apache.org/thread/wmp9g94fo2yb4tsg238467d6hx72dbml

Liable to become something that can block our releases and graduation to be a TLP.

I have tried a few sbt changes but nothing that gets the results that we need.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1006/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZVbG,pekko,1902466758,1006,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-21T01:01:27Z,2024-01-21T01:01:27Z,Do you mean the `<name>pekko-stream</name>` should be `<name>apache-pekko-stream</name>`？ ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZVbG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZVrK,pekko,1902467786,1006,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-21T01:08:00Z,2024-01-21T01:08:00Z,artifactId must stay as `pekko-stream_3` but the name should be `Apache Pekko Stream`,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZVrK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZkeN,pekko,1902528397,1006,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-21T06:20:49Z,2024-01-21T06:20:49Z,"I just gave it a try for demo project, it's ok, I am preparing a PR for pekko
```
    publishM2Configuration := publishM2Configuration.value
      .withOverwrite(true)
      .withPublishMavenStyle(true),
      // rename module
    makePomConfiguration := makePomConfiguration.value.withModuleInfo(
      makePomConfiguration.value.moduleInfo.get.withNameFormal(""apache"")
    )
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZkeN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZlC6,pekko,1902530746,1006,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-21T06:36:37Z,2024-01-21T06:36:37Z,"@laglangyue I would hold off a bit as we are trying to verify if we actually need to do this, @pjfanning Has more details.

If we do end up needing to do this we will also likely end up creating an abstraction in https://github.com/pjfanning/sbt-pekko-build","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZlC6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZlJd,pekko,1902531165,1006,NA,laglangyue,35491928,Laglangyue,,NA,2024-01-21T06:39:02Z,2024-01-21T06:39:02Z,"> @laglangyue I would hold off a bit as we are trying to verify if we actually need to do this, @pjfanning Has more details.
> 
> If we do end up needing to do this we will also likely end up creating an abstraction in https://github.com/pjfanning/sbt-pekko-build

okey, waitting for this","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZlJd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1006,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCNrA,pekko,1913182912,1006,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-27T15:10:58Z,2024-01-27T15:10:58Z,changes made,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCNrA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/1008,pekko,2092482401,1008,Not assembly the `pekko-protobuf-v3...` everytime?,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-21T08:33:03Z,2024-04-29T11:39:43Z,"The `pekko-protobuf-v3...` is packaged everytime,you run a test, Is is possible not repackage it if the sbt session is not reloaded?
```
[IJ]all {file:/C:/Users/hepin/IdeaProjects/incubator-pekko/}stream-tests/products {file:/C:/Users/hepin/IdeaProjects/incubator-pekko/}stream-tests/test:products
[info] 3 file(s) merged using strategy 'Rename' (Run the task at debug level to see the details)
[info] 3 file(s) merged using strategy 'Discard' (Run the task at debug level to see the details)
[info] Built: C:\Users\hepin\IdeaProjects\incubator-pekko\protobuf-v3\target\scala-2.13\pekko-protobuf-v3-assembly-1.1.0-M0+255-637d72af-SNAPSHOT.jar
[info] Jar hash: c5f34e5fd0c6881b0e6a1d2d7ac9a60c097dd581
[success] Total time: 11 s, completed 2024-1-21 16:32:09
[IJ]
[IJ]all {file:/C:/Users/hepin/IdeaProjects/incubator-pekko/}stream-tests/products {file:/C:/Users/hepin/IdeaProjects/incubator-pekko/}stream-tests/test:products
[info] 3 file(s) merged using strategy 'Rename' (Run the task at debug level to see the details)
[info] 3 file(s) merged using strategy 'Discard' (Run the task at debug level to see the details)
[info] Built: C:\Users\hepin\IdeaProjects\incubator-pekko\protobuf-v3\target\scala-2.13\pekko-protobuf-v3-assembly-1.1.0-M0+255-637d72af-SNAPSHOT.jar
[info] Jar hash: c5f34e5fd0c6881b0e6a1d2d7ac9a60c097dd581
[success] Total time: 10 s, completed 2024-1-21 16:32:42
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1008/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZq92,pekko,1902554998,1008,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-21T08:35:53Z,2024-01-21T08:35:53Z,"Its possible, but I would consider this low priority as it may be quite tricky to figure out","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xZq92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_uro,pekko,1912531688,1008,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-26T18:51:44Z,2024-01-26T18:51:44Z,"Based my what I know these days, I think this because `sbt-assembly` intercepts the compile step, and then adds itself as a post-processor, so every time you call the compile task, it will assemble again.

 The correct assembly task should only run on the `package` task, it may be another issue of `sbt-osgi`, I am not gonna blame this, but the execution of`sbt-osgi` has caused many problems.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_uro/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yAN5-,pekko,1912659582,1008,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T20:32:20Z,2024-01-26T20:32:20Z,"> Based my what I know these days, I think this because `sbt-assembly` intercepts the compile step, and then adds itself as a post-processor, so every time you call the compile task, it will assemble again.
> 
> The correct assembly task should only run on the `package` task, it may be another issue of `sbt-osgi`, I am not gonna blame this, but the execution of`sbt-osgi` has caused many problems.

I just realized that sbt-osgi's caching is not [enabled by default](https://github.com/sbt/sbt-osgi/pull/100/files#diff-1cb4aa05c813d70c1f075d72300bb104f2d4f5f192264b426e982bd335b693e0R92) so you can maybe try enabling it?

If we do this we should be really careful and make sure there aren't any regressions","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yAN5-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHASM,pekko,1914438796,1008,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-29T10:51:55Z,2024-01-29T10:51:55Z,"@mdedetrich @He-Pin. Got a good news, I just figured out why this happened.

Continue #1076 works, I have enabled the caching option of `sbt-osgi`, but it doesn't work. (But osgiBundle not running anymore, for osgi  products caching, it works.)

After some digging, I found that the culprit is these lines of code.

https://github.com/apache/incubator-pekko/blob/e4ad151a28cba2e844150e16b1944740badec91f/project/Protobuf.scala#L40-L41

**Let me explain this:**:  When other modules apply this `Protobuf.settings`, it will detect unmanaged dependencies during the `compile` step. And then finds that ""assembly"" has no products, so it always executes it. After executing once, it won't execute anymore.

Currently, I haven't found any other way to replace this approach.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHASM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHA6Y,pekko,1914441368,1008,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T10:53:28Z,2024-01-29T10:53:28Z,"> After some digging, I found that the culprit is these lines of code.
> 
> https://github.com/apache/incubator-pekko/blob/e4ad151a28cba2e844150e16b1944740badec91f/project/Protobuf.scala#L40-L41

I really dislike putting IDE specific hacks into the build because it causes issues like this, can we just completely remove it?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHA6Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHNEE,pekko,1914491140,1008,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-29T11:23:43Z,2024-01-29T11:23:43Z,"> I really dislike putting IDE specific hacks into the build because it causes issues like this, can we just completely remove it?

I have tried, but the `assembly` still runs. I suspect that the execution time of `osgiBundle` is too short for me to detect. 

The `assembly` dependency tree shows that it can only be triggered by `osgiBundle`, it may also be related to the cache detection of `osgiBundle`. Although `bnd` is not executed, the jar will still be exported.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHNEE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHQ5s,pekko,1914506860,1008,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T11:33:23Z,2024-01-29T11:33:23Z,"> I have tried, but the `assembly` still runs. I suspect that the execution time of `osgiBundle` is too short for me to detect.
> 
> The `assembly` dependency tree shows that it can only be triggered by `osgiBundle`, it may also be related to the cache detection of `osgiBundle`. Although `bnd` is not executed, the jar will still be exported.

Thanks but here comes the next question, is `Compile / unmanagedJars += (LocalProject(""protobuf-v3"") / assembly).value` actually doing anything useful even if its not making a difference in speed? Is it even a problem with Intellij today (remember this is a 14 year old codebase so it may have been a problem with some ancient Intellij version)?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHQ5s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHcNM,pekko,1914553164,1008,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T12:02:49Z,2024-01-29T12:02:49Z,"Or we can split this jar into a dedicated project, nad publish it to maven, as we did not expect to change it very much.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHcNM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHcPo,pekko,1914553320,1008,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-29T12:02:54Z,2024-01-29T12:02:54Z,"> Thanks but here comes the next question, is `Compile / unmanagedJars += (LocalProject(""protobuf-v3"") / assembly).value` actually doing anything useful even if its not making a difference in speed? Is it even a problem with Intellij today (remember this is a 14 year old codebase so it may have been a problem with some ancient Intellij version)?

Yes, it will package `protobuf-v3` when sbt reads and applies the build settings, and then the IDE will detect it as an unmanaged dependency. see `org.apache.pekko.remote.protobuf.v3.ProtobufProtocolV3`

https://github.com/apache/incubator-pekko/blob/1b0ee8cd756322ef76b1287f3e0d9067916084b2/remote/src/test/java/org/apache/pekko/remote/protobuf/v3/ProtobufProtocolV3.java#L22-L27","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHcPo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1008,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHems,pekko,1914562988,1008,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T12:08:46Z,2024-01-29T12:08:46Z,"I see, so it being an `unmanagedDependency` is technically correct even if its not required for packaging.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHems/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1010,https://api.github.com/repos/apache/pekko/issues/1010,pekko,2092603983,1010,Feature request: Add `Flow/Sink#foldWhile` operator.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-21T14:14:03Z,2024-01-24T03:17:08Z,"Motivation:
When chating with @GreyPlane and @laglangyue for implementing the `forAll` and `exists`, I find pekko stream needs a `foldWhile` operator, which can help with that.

Result:
Richer operators set.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1010/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1013,https://api.github.com/repos/apache/pekko/issues/1013,pekko,2092640446,1013,Rework the `DslFactoriesConsistencySpec`,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-21T15:42:27Z,2024-01-27T00:55:35Z,"Motivation:
When I and @GreyPlane work on operators, sometime encounter problem and don't why.
A better way is show why and prints in table.

```scala
  val results = for {
      s <- sMethods
      j <- jMethods
    } yield delegationCheck(s, j)
```

generate too many noise, and which should only prints the most possible one, instead of all.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1013/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1013,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_1Z7,pekko,1912559227,1013,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-26T19:11:27Z,2024-01-26T19:11:27Z,could you post an error log or something? It will be great if has more information.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x_1Z7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1013,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yBEWc,pekko,1912882588,1013,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-27T00:55:34Z,2024-01-27T00:55:34Z,"The for expressing here will result in a M × N Set, which is to large.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yBEWc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1015,https://api.github.com/repos/apache/pekko/issues/1015,pekko,2092821698,1015,Use upstream sbt-multi-jvm,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,OPEN,2024-01-21T23:01:15Z,2024-01-25T17:43:58Z,"Now that [sbt-multi-jvm](https://github.com/sbt/sbt-multi-jvm) is better maintained, we should have a look into using the upstream sbt-multi-jmv rather than our own [inner sourced one](https://github.com/apache/incubator-pekko/blob/main/project/SbtMultiJvm.scala)

@He-Pin @jrudolph @raboof I remember having a discussion some time ago on the reasons why Pekko is using our own version of sbt-multi-jvm, I think that there are some adjustments that had to be made and if so we should upstream them?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1015/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1015,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbdc1,pekko,1903023925,1015,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T02:59:47Z,2024-01-22T02:59:47Z,"Great, But we should detailly diff what the difference is.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbdc1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1015,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbhnk,pekko,1903040996,1015,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T03:06:21Z,2024-01-22T03:06:21Z,"> Great, But we should detailly diff what the difference is.

That's the point of the issue","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xbhnk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1015,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x4uga,pekko,1910695962,1015,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T17:43:57Z,2024-01-25T17:43:57Z,@mdedetrich @pjfanning I think we should do this. the more code we can reduce the lightbend code the better,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x4uga/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/1017,pekko,2093097629,1017,Add JDK21 info to doc,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-22T05:13:44Z,2024-01-23T13:28:50Z,"Motivation:
As we are tested with JDK21, we should mention it here.

![image](https://github.com/apache/incubator-pekko/assets/501740/e13ee50d-009a-41aa-b66a-814435545799)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1017/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeGz2,pekko,1903717622,1017,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-22T10:43:54Z,2024-01-22T10:43:54Z,"@He-Pin this is in project/project-info.conf

```
jdk-versions: [""OpenJDK 8"", ""OpenJDK 11"", ""OpenJDK 17""]
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeGz2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeIYD,pekko,1903724035,1017,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T10:46:02Z,2024-01-22T10:46:02Z,"@pjfanning thanks for update, we should add a lable as `good first contribution`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeIYD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeJ54,pekko,1903730296,1017,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-22T10:48:07Z,2024-01-22T10:48:07Z,@He-Pin `good first issue` is the GitHub norm for this - I think it is built-in. Can we just use that?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeJ54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeLR5,pekko,1903735929,1017,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-22T10:49:59Z,2024-01-22T10:49:59Z,"-1 from me from using the non-standard `good first contribution` label.

Have a look at all the prior art with `good first issue` - https://www.google.com/search?q=good+first+issue+github

This is the name we should use. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeLR5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeOeQ,pekko,1903749008,1017,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T10:54:31Z,2024-01-22T10:54:31Z,"Ok, let me change it back to good first issue, `good first contribution` seems more easy to understand
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xeOeQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1017,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xnCkO,pekko,1906059534,1017,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-23T13:28:50Z,2024-01-23T13:28:50Z,@HapppyLiu thanks.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xnCkO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/1019,pekko,2093138767,1019,Long term: `sbt-license-report` took so much time to compile (upstream problem),Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-01-22T05:51:03Z,2024-01-31T08:38:29Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->



When I tried to review PR #1012, I found the `sbt-license-report` took so much time, even if we have increment compile.

<details><summary>Long time paradox build</summary>
<img width=""773"" alt=""截屏2024-01-22 13 35 47"" src=""https://github.com/apache/incubator-pekko/assets/26020358/0dadf961-d38f-4656-a907-6797f11a8140"">

</details> 


I think PR #704 will help the paradox compile because they skip the license report generation. On my laptop, it speeds up almost over 15x times. 

<details><summary>disable license report made paradox build faster</summary>

![image](https://github.com/apache/incubator-pekko/assets/26020358/42c4ccbd-53a1-48b2-a792-fb1607be3223)


<img width=""833"" alt=""截屏2024-01-22 13 39 28"" src=""https://github.com/apache/incubator-pekko/assets/26020358/e53c6aaa-dc66-4126-9604-e5c7f7979d24"">


</details> 


@mdedetrich @He-Pin Can yours pick up the PR #704, and consider the feasibility agains?

## Solution

- [x] short term solutions: disable the license reporter steps: #704 
- [ ] long term solutions: https://github.com/apache/incubator-pekko/issues/1019#issuecomment-1903371167

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1019/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcobG,pekko,1903331014,1019,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T06:14:35Z,2024-01-22T06:14:35Z,@Roiocam I will tooks a look after work. and we can verify it with https://github.com/apache/incubator-pekko/pull/1016,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcobG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcova,pekko,1903332314,1019,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T06:16:01Z,2024-01-22T06:16:01Z,"@Roiocam would you mind to test it with the current main? thanks. Your PR fix the huge problem for me,thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcova/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcyOf,pekko,1903371167,1019,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T06:56:56Z,2024-01-22T06:56:56Z,"@Roiocam The core reason why sbt-license-report takes so long is that due to a limitation in [coursier](https://get-coursier.io/) which is the default resolution mechanism for repositories in sbt, sbt license report is instead forced to [re-resolve all dependencies using Ivy](https://github.com/sbt/sbt-license-report/pull/86#issue-1894790538) which is whats taking a really long time.

If you want to solve this issue (which is whats currently taking up the majority of the time in doc generation) we need to unblock [this issue](https://github.com/sbt/sbt-license-report/issues/87) which involves solving https://github.com/coursier/coursier/issues/1790. I tried to [do this myself](https://github.com/coursier/coursier/issues/1790#issuecomment-1718035934) but didn't have the time/capacity to figure out the core problem.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcyOf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcz13,pekko,1903377783,1019,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-22T07:03:36Z,2024-01-22T07:03:36Z,"@Roiocam Just to set expectations, even if you do figure out how to resolve https://github.com/coursier/coursier/issues/1790 its probably going to take a while for it to be released in coursier which then needs to be included in a new version of sbt for [sbt-license-report](https://github.com/sbt/sbt-license-report) to use ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xcz13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xdAfA,pekko,1903429568,1019,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-22T07:49:35Z,2024-01-22T07:49:35Z,"@mdedetrich @Roiocam We should solve this problem, but there are short-term and long-term solutions. The short-term solution is to use this PR to make everyone faster. The long-term solution is to fix the upstream issue. So I suggest adding a `paradoxFast` command","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xdAfA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yWoUz,pekko,1918534963,1019,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-31T07:27:33Z,2024-01-31T07:27:33Z,"> @Roiocam The core reason why sbt-license-report takes so long is that due to a limitation in [coursier](https://get-coursier.io/) which is the default resolution mechanism for repositories in sbt, sbt license report is instead forced to [re-resolve all dependencies using Ivy](https://github.com/sbt/sbt-license-report/pull/86#issue-1894790538) which is whats taking a really long time.

I just did a quick investigation to see why the plugin runs frequently to the issue you mentioned. The result is Paradox always executes the task of `dumpLicenseReportAggregate `, which depends on the task `updateLicense` of each submodule, which is the most time-cost part of this ISSUE.

Even if we fix the upstream problem of dependency resolver, we will still re-execute the generation of task `dumpLicenseReportAggregate` at each paradox command. For the document development experience, even if we optimize the 'updateLicense` to 1s (more than ten times) is still a relatively long time for the developer experience.

Considering that most of the people in this project are unpaid, I think it makes sense to have this turn-off option by default and long-lasting preservation. We should be consistent on this issue.

As for the upstream issue of this issue, I don't think pekko is concerned about it, We should spend more time on pekko itself.



","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yWoUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1019,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yXAVW,pekko,1918633302,1019,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-31T08:38:28Z,2024-01-31T08:38:28Z,"> Even if we fix the upstream problem of dependency resolver, we will still re-execute the generation of task `dumpLicenseReportAggregate` at each paradox command. For the document development experience, even if we optimize the 'updateLicense` to 1s (more than ten times) is still a relatively long time for the developer experience.

While this is technically true, do note that coursier unlike Ivy has its own caching mechanism, ontop of this we would actually be re-using the value from `update` task which would already be evaluated in sbt. Due to this even if `dumpLicenseReportAggregate` is re-evaluated multiple times each evaluation would take a trivial amount of time (since we are just going to be parsing an already evaluated result from `.value` in memory to another data structure) so even if its done 20+ times in total it wouldn't be noticeably longer than any other sbt task execution.

That being said implementing a form of caching would be good, I think that sbt's [caching](https://www.scala-sbt.org/1.x/docs/Caching.html) may be helpful here

> As for the upstream issue of this issue, I don't think pekko is concerned about it, We should spend more time on pekko itself.

Sure I am not going to be telling people where and where not to spend their time, its just that this does directly effect Pekko (as stated before) and as a nice bonus it does help the community.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yXAVW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/1032,pekko,2096383929,1032,Don't run osgiBundle when it's not required.,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-23T15:44:36Z,2024-01-24T22:30:49Z,"Motivation:
osgibundle is so slow, I prefer to not run it if it's not needed.
![image](https://github.com/apache/incubator-pekko/assets/501740/130f7d82-3bdc-4200-b0f8-77bcd3128c98)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1032/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvBIT,pekko,1908150803,1032,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-24T13:43:47Z,2024-01-24T13:43:47Z,"Don't know why, but this only spent 2s on my laptop(M1 macOs).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvBIT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvB4N,pekko,1908153869,1032,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T13:45:29Z,2024-01-24T13:45:29Z,"> Don't know why, but this only spent 2s on my laptop(M1 macOs).

I don't even notice it, and [caching was recently added](https://github.com/sbt/sbt-osgi/pull/100)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvB4N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvFbD,pekko,1908168387,1032,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T13:53:42Z,2024-01-24T13:53:42Z,"@mdedetrich @Roiocam Trigger an JMH  bench you will notice it.
![image](https://github.com/apache/incubator-pekko/assets/501740/7f854ad3-13cc-4c2c-8586-11e3cf893fda)
And my PC is using SSD too.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvFbD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvI4z,pekko,1908182579,1032,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-24T14:01:33Z,2024-01-24T14:01:33Z,"> Trigger an JMH bench you will notice it.

Run JMH after clean up, it only costs 3s when executing `stream osgiBundle`

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvI4z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1032,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvMSv,pekko,1908196527,1032,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T14:09:04Z,2024-01-24T14:09:04Z,"`
 Jmh/run -i 10 -wi 10 -f1 -t1 .*CollectBenchmark.*
`
Have no idea :( 
![image](https://github.com/apache/incubator-pekko/assets/501740/046ed527-1b8c-4508-92c2-8a6b7c36268c)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xvMSv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1033,https://api.github.com/repos/apache/pekko/issues/1033,pekko,2096858130,1033,add support for building java21 code,pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-23T19:44:06Z,2024-07-25T09:47:04Z,"https://github.com/apache/incubator-pekko/pull/1023 added java 21 code to our docs. I don't believe that we have support for building this code to see if compiles. We have https://github.com/apache/incubator-pekko/blob/main/project/Jdk9.scala and can look into adding a Java 21 equivalent.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1033/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1033,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xp8CY,pekko,1906819224,1033,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-23T19:53:31Z,2024-01-23T19:53:31Z,"I can do that on weekend, I was planning to open issue like this.

And I think this is a good first issue too

Note: Community who interest this can chips in too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xp8CY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1033,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KW1N,pekko,1999203661,1033,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2024-03-15T08:57:00Z,2024-03-15T08:57:00Z,"@He-Pin hi, I want to take this, can you guide me on how to do it?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KW1N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1033,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Kgq2,pekko,1999243958,1033,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-15T09:19:55Z,2024-03-15T09:19:55Z,"@naosense https://github.com/apache/incubator-pekko/pull/1072 & https://github.com/apache/incubator-pekko/pull/1054 Can you help check it really works, thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Kgq2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1033,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GGxlY,pekko,2249922904,1033,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-25T09:47:04Z,2024-07-25T09:47:04Z,I think we have made enough progress to close this.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GGxlY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/1039,pekko,2099108164,1039,1.1.x pekko snapshots are no longer including the java 9+ classes,pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-24T21:07:17Z,2024-01-29T06:03:53Z,"Have a look at the projects/Jdk9.scala file.

The classes that this is supposed to build appear to be no longer built.

Java 1.0.x jars still have the expected classes.

Compare
https://repository.apache.org/content/groups/snapshots/org/apache/pekko/pekko-cluster-sharding_2.13/1.0.2+26-870129ef-SNAPSHOT/

to
https://repository.apache.org/content/groups/snapshots/org/apache/pekko/pekko-cluster-sharding_2.13/1.1.0-M0+283-e597a702-SNAPSHOT/

Have a look for this Java9+ class.
org.apache.pekko.cluster.sharding.internal.jfr.JFRShardingFlightRecorder

Included in the 1.0 jar but not in the 1.1 jar.

This appears to be happening in other jars where we have Jdk9(+) classes.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1039/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xySod,pekko,1909008925,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T22:20:35Z,2024-01-24T22:20:35Z,We need to bisect the commit where this happened,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xySod/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyUWc,pekko,1909015964,1039,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T22:27:24Z,2024-01-24T22:27:24Z,"This is a  blocker for 1.1.0, we are published with java 11 , this should not happen.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyUWc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyaKI,pekko,1909039752,1039,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-24T22:40:40Z,2024-01-24T22:40:40Z,"Last pekko-cluster-sharding_2.13 snapshot to have JFR classes is 1.1.0-M0+221-959c98db-SNAPSHOT - Jan 9

Missing in next snapshot - 1.1.0-M0+224-ccce5c04-SNAPSHOT (Jan 11)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyaKI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyaoS,pekko,1909041682,1039,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-24T22:42:31Z,2024-01-24T22:42:31Z,nothing obvious but https://github.com/apache/incubator-pekko/commit/b9d2cc6187e5622fee5e4d0052a4120141c5b9c4 was in Jan 9 and that sbt-osgi plugin has been causing us serious grief,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyaoS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xydtP,pekko,1909054287,1039,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-24T22:55:08Z,2024-01-24T22:55:08Z,@mdedetrich I reverted https://github.com/apache/incubator-pekko/commit/b9d2cc6187e5622fee5e4d0052a4120141c5b9c4 locally and it fixed the issue with missing JDK9 classes,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xydtP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyd2H,pekko,1909054855,1039,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T22:55:39Z,2024-01-24T22:55:39Z,"Run with java 11
```scala
sbt:pekko-stream> show unmanagedSourceDirectories
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\java
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13+
sbt:pekko-stream>
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyd2H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyl5-,pekko,1909087870,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T23:23:19Z,2024-01-24T23:23:19Z,"> @mdedetrich I reverted https://github.com/apache/incubator-pekko/commit/b9d2cc6187e5622fee5e4d0052a4120141c5b9c4 locally and it fixed the issue with missing JDK9 classes

Thanks I'll look into it","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyl5-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xymgD,pekko,1909090307,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T23:26:00Z,2024-01-24T23:26:00Z,"So I already know what the likely cause is, its another fallout from https://github.com/sbt/sbt-osgi/pull/64","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xymgD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyn5n,pekko,1909096039,1039,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-24T23:30:23Z,2024-01-24T23:30:23Z,We will need a task to verify the jar contains these Java 9+ classes in the nightly build after packaging.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyn5n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xysfs,pekko,1909114860,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-24T23:51:19Z,2024-01-24T23:51:19Z,"So I can indeed confirm that its https://github.com/sbt/sbt-osgi/pull/64, if I print out what the `Compile / fullClasspath` is for `stream` (which is what contains JDK 9 classes) you can see

```
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/stream/target/scala-2.13/classes)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/actor/target/scala-2.13/classes)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/protobuf-v3/target/scala-2.13/stripped/stripped/pekko-protobuf-v3-assembly-1.0.2+27-46618d08-SNAPSHOT.jar)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/protobuf-v3/target/scala-2.13/stripped/pekko-protobuf-v3-assembly-1.0.2+27-46618d08-SNAPSHOT.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.11/scala-library-2.13.11.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.13/0.6.1/ssl-config-core_2.13-0.6.1.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.4.3/config-1.4.3.jar)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/stream/target/scala-2.13/CompileJdk9-classes)
```

As you can see the last line is the compiled jdk9 classes which are missing

However if we print out the replacement which is `(dependencyClasspathAsJars in Compile).value.map(_.data) ++ (products in Compile)` then we get this

```
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/actor/target/scala-2.13/stripped/pekko-actor_2.13-1.0.2+27-46618d08-SNAPSHOT.jar)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/protobuf-v3/target/scala-2.13/stripped/stripped/pekko-protobuf-v3-assembly-1.0.2+27-46618d08-SNAPSHOT.jar)
[info] * Attributed(/Users/mdedetrich/github/incubator-pekko/protobuf-v3/target/scala-2.13/stripped/pekko-protobuf-v3-assembly-1.0.2+27-46618d08-SNAPSHOT.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.11/scala-library-2.13.11.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/ssl-config-core_2.13/0.6.1/ssl-config-core_2.13-0.6.1.jar)
[info] * Attributed(/Users/mdedetrich/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.4.3/config-1.4.3.jar)
```

plus

```
[info] * /Users/mdedetrich/github/incubator-pekko/stream/target/scala-2.13/classes
```

As we can see its missing the JDK 9 classes folder. I will need to do changes in sbt-osgi upstream to fix this

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xysfs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyuj7,pekko,1909123323,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-25T00:01:57Z,2024-01-25T00:01:57Z,"So I already have a PR ready for sbt-osgi that will allow me to fix this issue, just waiting for https://github.com/sbt/sbt-osgi/pull/118 to get merged.

Should be fixed in a couple of days","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyuj7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyv5I,pekko,1909128776,1039,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T00:07:51Z,2024-01-25T00:07:51Z,"after revert the osgi to 0.9.4 and publish local
![image](https://github.com/apache/incubator-pekko/assets/501740/f9fdbce1-2b8f-4e7f-83d6-dd192c83f889)
before
![image](https://github.com/apache/incubator-pekko/assets/501740/dabbcbf1-647e-4b4c-94f2-e6652795549e)

@mdedetrich yes, it's osgi plugin's problem.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xyv5I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzDWD,pekko,1909208451,1039,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-25T01:45:18Z,2024-01-25T01:45:18Z,#959 It seems to be caused by this problem. ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzDWD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzGGL,pekko,1909219723,1039,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-25T01:58:17Z,2024-01-25T01:58:17Z,"> @mdedetrich I reverted [b9d2cc6](https://github.com/apache/incubator-pekko/commit/b9d2cc6187e5622fee5e4d0052a4120141c5b9c4) locally and it fixed the issue with missing JDK9 classes

@pjfanning Thanks for investigating , this problem is also led to #959.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzGGL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzIUw,pekko,1909228848,1039,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-25T02:10:17Z,2024-01-25T02:10:17Z,I am quite sure that the core problem is what I described at https://github.com/apache/incubator-pekko/issues/1039#issuecomment-1909114860 which is leading to all of the other described issues. There might be a simple solution for this that doesn't require extending sbt-osgi with additional functionality but I need to first merge + release https://github.com/sbt/sbt-osgi/pull/121 .,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5xzIUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCG2w,pekko,1913154992,1039,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-27T13:20:21Z,2024-01-27T13:20:21Z,@pjfanning I think this has been solve by #1047 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCG2w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCJ-h,pekko,1913167777,1039,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-27T14:05:29Z,2024-01-27T14:05:29Z,"> @pjfanning I think this has been solve by #1047

I disagree - #1040 is to test #1039 and #1039 is not even fixed yet. There is zero proof that this is a fix for #1040. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCJ-h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1039,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCKVB,pekko,1913169217,1039,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-27T14:10:52Z,2024-01-27T14:10:52Z,"> I disagree - #1040 is to test #1039 and #1039 is not even fixed yet. There is zero proof that this is a fix for #1040.

My last repeated comment was published in the wrong ISSUE. This comment was published under #1039, that is, we have fixed the compile of the JDK9 class on the package task.

You can verify it on latest`main` branch.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yCKVB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/1040,pekko,2099908450,1040,add CI check for the Java 9+ classes,pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-25T09:07:59Z,2024-01-29T06:03:54Z,"see #1039 

I think we could have a check that uses a `unzip -l` call and that searches the output for expected class files.

There are other ways to check too.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1040/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1I9y,pekko,1909755762,1040,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T09:36:25Z,2024-01-25T09:36:25Z,"How about using scala-cli
https://scala-cli.virtuslab.org/docs/reference/directives to verfify it.
https://scala-cli.virtuslab.org/docs/cookbooks/introduction/gh-action/
seems like we can use it in github action and use the local repo","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1I9y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1MM8,pekko,1909769020,1040,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-25T09:44:27Z,2024-01-25T09:44:27Z,"> How about using scala-cli https://scala-cli.virtuslab.org/docs/reference/directives to verfify it. https://scala-cli.virtuslab.org/docs/cookbooks/introduction/gh-action/ seems like we can use it in github action and use the local repo

If you want to try using this, that's fine. The links provided do not appear to mention how to check a jar for the presence of a file. If implement this, I will use the easier solution of using the unzip command.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1MM8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1h6Q,pekko,1909857936,1040,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-25T10:31:11Z,2024-01-25T10:31:11Z,"Too complex for me, if let me do this, I will be trying there easy way:

- create a wrong test on `java-jdk-9` path, and then run it on verify CI. If the unit test failed, that means jdk9 path was compiled!
- verify `unmanagedSourceDirectories` before build","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1h6Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1spT,pekko,1909901907,1040,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T10:47:21Z,2024-01-25T10:47:21Z,"seems using `jar xf` and then test if `find` will works too, and simpler. I was thinking using sbt to generate an scala-cli.sc and test the local published jars.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1spT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1wVC,pekko,1909916994,1040,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T10:57:09Z,2024-01-25T10:57:09Z,"I think checking  the unmanagedSourceDirectores will not work:
```scala
//sbt with on Java 21
sbt:pekko-stream> show sourceDirectories
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\java
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13+
[info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\target\scala-2.13\src_managed\main
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1wVC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1xXG,pekko,1909921222,1040,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-25T10:59:52Z,2024-01-25T10:59:52Z,"> I think checking the unmanagedSourceDirectores will not work:
> 
> ```scala
> //sbt with on Java 21
> sbt:pekko-stream> show sourceDirectories
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\java
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\src\main\scala-2.13+
> [info] * C:\Users\hepin\IdeaProjects\incubator-pekko\stream\target\scala-2.13\src_managed\main
> ```

I spotted that too. Something about the way the Jdk9 stuff works seems not to expose the extra entries in this `show`. I still think checking the jar is better than checking sbt properties.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1xXG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1y_P,pekko,1909927887,1040,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T11:04:17Z,2024-01-25T11:04:17Z,"The only benefits of scala-cli jdk9features.sc is flexible but complex enough, need two tools in sync.

Sbt generates the scripts and scala cli run it
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x1y_P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x10ZF,pekko,1909933637,1040,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-25T11:08:10Z,2024-01-25T11:08:10Z,"an sbt-scripted test is probably the easiest way to implemented this. Such a test can run the `publishLocal` command, unzip the jar and check the existence of a file within the jar.

You can read about it at https://www.scala-sbt.org/1.x/docs/Testing-sbt-plugins.html","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x10ZF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5X-2,pekko,1910865846,1040,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-25T19:41:07Z,2024-01-25T19:41:07Z,"Try to check the result via the reason for the problem.

After some digging, found the reason why CompileJDK9 is broken when using it with OSGi: https://github.com/sbt/sbt-osgi/pull/64/files#diff-1cb4aa05c813d70c1f075d72300bb104f2d4f5f192264b426e982bd335b693e0L47-R47

I use [`sbt inspect`](https://www.scala-sbt.org/1.x/docs/Howto-Inspect-the-Build.html) to dig out why:

-  use` inspect tree  actor-typed / package` on `sbt-osgi-0.9.4`, CompileJDK9 contains in the dependency
-  use` inspect tree  actor-typed` on `sbt-osgi-0.9.11`, CompileJDK9 wan't contains in the dependency

I have tried using `fullClasspathAsJars` and `unmanagedSourceDirectories` to replace `fullClassPath`, but neither one can fix this.

Not sure why, but `sbt inspect tree  actor-typed/package` won't work, if it has a way to make it work, we can use something like this for the CI check.

```
sbt inspect tree actor-typed/package | grep -q CompileJdk9 || exit 1
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5X-2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5yt8,pekko,1910975356,1040,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-25T20:50:25Z,2024-01-25T20:50:25Z,"@Roiocam Yes this I already know, if you want to go down the rabbit hole you can read https://github.com/apache/incubator-pekko/issues/1039#issuecomment-1909114860 and https://github.com/sbt/sbt-osgi/issues/102

I am about to do a release of sbt-osgi that contains this fix https://github.com/sbt/sbt-osgi/pull/121 which may solve an issue in trying to solve this the easy way (i.e. using `inConfig(Jdk9Compile)(SbtOsgiPlugin.projectSettings)`) otherwise I will have to do some other changes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5yt8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7FZp,pekko,1911314025,1040,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-01-26T02:31:02Z,2024-01-26T02:31:02Z,"> @Roiocam Yes this I already know, if you want to go down the rabbit hole you can read [#1039 (comment)](https://github.com/apache/incubator-pekko/issues/1039#issuecomment-1909114860) and [sbt/sbt-osgi#102](https://github.com/sbt/sbt-osgi/issues/102)
> 
> I am about to do a release of sbt-osgi that contains this fix [sbt/sbt-osgi#121](https://github.com/sbt/sbt-osgi/pull/121) which may solve an issue in trying to solve this the easy way (i.e. using `inConfig(Jdk9Compile)(SbtOsgiPlugin.projectSettings)`) otherwise I will have to do some other changes.

I have created a fixed PR after this digging, it solves the JDk9 compile for me, can you take a look? Thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7FZp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1040,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7jrv,pekko,1911438063,1040,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T03:51:38Z,2024-01-26T03:51:38Z,"@Roiocam Since your fix is more correct maybe you can also apply a similar fix instead of what was done in https://github.com/apache/incubator-pekko/pull/920, i.e. instead of adding the sbt-assembly jar to `OsgiKeys.explodedJars` as was done at https://github.com/apache/incubator-pekko/pull/920/files#diff-49fc9a69964c909b343968bdcb2de99b610b6122ec40900ccab4f2e532f2915aR84-R90, instead you can modify the `dependencyClasspathAsJars` [here](https://github.com/apache/incubator-pekko/blob/e597a702b9a54a0e193e09a50a1d45dfd1f56785/build.sbt#L363-L384) as you did in your PR at https://github.com/apache/incubator-pekko/pull/1047/files#diff-378ca99a990595050ef83c6d976edc6e26e23b49622c4bd3ca5acda8bfb411ffR58 .

Might be easiest to modify the PR at https://github.com/apache/incubator-pekko/pull/1047 to include both fixes if you can get it to work (if you do so just ping me and I will re-review).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7jrv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/1044,pekko,2100920509,1044,Feature request: AutoCloseable shortcuts,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-25T18:10:28Z,2024-02-01T11:30:33Z,"Motivation:
Pekko has mapwithResource now, would be better to support AutoCloseable in Java/Scala dsl too.
refs: https://github.com/reactor/reactor-core/issues/3333","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1044/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5FVK,pekko,1910789450,1044,NA,injae-kim,34854527,injae kim,injae.kim.dev@gmail.com,NA,2024-01-25T18:46:53Z,2024-01-25T18:46:53Z,Can you assign this issue to me? I'll create PR tomorrow~! 🙇,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5FVK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5IF-,pekko,1910800766,1044,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-25T18:54:52Z,2024-01-25T18:54:52Z,"> Can you assign this issue to me? I'll create PR tomorrow~! 🙇

Thank you, I love it because I use Java everyday ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x5IF-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qpR,pekko,1911728721,1044,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T09:22:01Z,2024-01-26T09:22:01Z,We should discuss this properly because supporting cancellation of resources properly is very difficult to get right,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8qpR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8wiQ,pekko,1911752848,1044,NA,injae-kim,34854527,injae kim,injae.kim.dev@gmail.com,NA,2024-01-26T09:39:21Z,2024-01-26T09:39:21Z,"> https://github.com/reactor/reactor-core/pull/3704 Add AutoCloseable shourtcut on Flux#using, Mono#using

```java
	public static <T, D extends AutoCloseable> Flux<T> using(Callable<D> resourceSupplier,
			Function<? super D, ? extends Publisher<? extends T>> sourceSupplier) {
		return using(resourceSupplier, sourceSupplier, AUTO_CLOSE, true);
	}

	static final Consumer<? super AutoCloseable> AUTO_CLOSE = resource -> {
		try {
			resource.close(); //👈 simply close the autocloseable
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	};
```
 Hi @mdedetrich ! On above PR on reactor, I use `<D extends AutoCloseable>` to support only `AutoCloseable` shortcut.
and simply close it cause we usually think that it's okay to close `AutoCloseable`.

>  because supporting cancellation of resources properly is very difficult to get right

I agree with this. then should we handle or provide a way to user when `autoCloseable.close()` throw exception?
or maybe user can handle it on `downstream.onError()` 🤔","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8wiQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8yaR,pekko,1911760529,1044,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T09:45:22Z,2024-01-26T09:45:22Z,"@injae-kim the `using` is something like `mapWithResource` in pekko or `unfoldResource`, both methods need a user to close the resource explicitly. If think if we support this, then there will be an overload method where the `close: () => Unit` is not needed.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x8yaR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x80pm,pekko,1911769702,1044,NA,injae-kim,34854527,injae kim,injae.kim.dev@gmail.com,NA,2024-01-26T09:52:22Z,2024-01-26T09:52:22Z,"> then there will be an `overload method` where the close: () => Unit is not needed.

aha~ then I'll create PR in this way. let's discuss more details about `cancellation of resources` on PR~! thanks!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x80pm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x82_4,pekko,1911779320,1044,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T09:59:37Z,2024-01-26T09:59:37Z,"Nice contribution, but pekko-stream and Reactor-core work in a different way, and I'm using both simultaneously in one app, there is some test code, you can read from the java dsl tests, and thank you for your interest.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x82_4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x87--,pekko,1911799742,1044,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-26T10:14:33Z,2024-01-26T10:14:33Z,"this is not under consideration for 1.1.0-M1 and therefore PRs for this feature should be merged yet

if we decide to bring this into consideration for 1.1.0-M1, it will delay it

this doesn't mean that we can't create PRs - it just affects when we merge them","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x87--/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1044,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x9Fhl,pekko,1911838821,1044,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T10:42:05Z,2024-01-26T10:42:05Z,"It's not in 1.1.0-m1  depends on the status, may be in 1.2.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x9Fhl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1048,https://api.github.com/repos/apache/pekko/issues/1048,pekko,2101492062,1048,Fix Scala doc warning.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-26T02:55:17Z,2024-01-26T10:36:55Z,"Motivation:
When compiling/pacakging with Java 21, I saw many doc warning.

>sbt publishLocal
![image](https://github.com/apache/incubator-pekko/assets/501740/de2daffe-83ef-4701-8c4c-b44e03b12cb1)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1048/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1048,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7ocE,pekko,1911457540,1048,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T04:20:08Z,2024-01-26T04:20:08Z,"So I am not sure if this is an issue worth leaving open because its even stated in documentation that if you are packaging/publishing Pekko, that you should only use JDK 11 + `export JAVA_8_HOME` to locate a JDK 8 installation.

Until we fix a lot of the workarounds in Pekko, it will likely never support being able to generically be packaged under any JDK especially considering that some packages such as sbt-paradox/scala-xml [only work on specific JDK's](https://github.com/apache/incubator-pekko/blob/639d5ad8ee48a8ac5c151df6370af426dd1b3c07/project/plugins.sbt#L33-L34)

In other words we may only be able to solve this when we fully drop JDK 8
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7ocE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1048,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7snB,pekko,1911474625,1048,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-26T04:48:21Z,2024-01-26T04:48:21Z,"I have `JAVA_8_HOME`, otherwise it will not compile, this seems an api mapping issue, but better done when we delete all the obsoleted code. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7snB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1048,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7t20,pekko,1911479732,1048,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-26T04:55:16Z,2024-01-26T04:55:16Z,"> I have `JAVA_8_HOME`, otherwise it will not compile, this seems an api mapping issue, but better done when we delete all the obsoleted code.

Its not just an API missing issue, the version of sbt-paradox that we are using to build the docs will **_only_** run on JDK 8/11 because it uses unsafe. There are actually lots of reasons why we have to build Pekko in the way that its currently done.

My point is that if you have an expectation that this project can be built with any JDK, thats not going to happen anytime soon. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x7t20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1048,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x9D0h,pekko,1911831841,1048,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-26T10:36:55Z,2024-01-26T10:36:55Z,closing in favour of https://github.com/apache/incubator-pekko/issues/353,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5x9D0h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1052,https://api.github.com/repos/apache/pekko/issues/1052,pekko,2102743553,1052,Build script/plugin issue tracker,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-01-26T19:03:45Z,2024-07-25T09:47:04Z,"## Motivation

I have seen so many issues with the build script or plugin, that I think we need an issue to track them to prevent us from missing a certain part, and when we sprint to a certain milestone, we can also have a good goal.

## Issue Tracker


-  `sbt-OSGi`
    - [ ] Osgi destroys the packaging of JDK9 classes: 
        - [x] #1039 
            - [x] #1047
        - [x] #1040
            - [x] #1064
            - [x] #1065 
        - [ ] #1076
        - [x] #1033 
            - [x] #1054
    - [ ] osgi performance issue on Windows
        - [ ] #1032 
    - [x] Osgi destroys the compile check of JDK9 classes in `docs`: 
        - [x] #959 
            - [x] #1050
    - [x] Osgi failed to build under Windows
        - [x] #986 
            - [x] #1024
- `sbt-assembly `
    - [x]  Frequent execution of assembly  
        - [x] #1008
- `sbt-license-report`
    - [ ] Optimized reporting generation speed
        - [x]  #704
        - [ ] #1019
        - [x] #1007
- `sbt-multi-JVM`
    - [ ] Discussion of upstream and internal sources
        - [ ] #1015
        - [ ] #548
- `artifact` name
    - [x] #1006
- `PekkoDisciplinePlugin` for JDK17+
    - [ ] https://github.com/apache/incubator-pekko/issues/979#issuecomment-1902621263 
- Ambiguous build problem(all classified as build)
    - License ISSUE
        - [ ] #809 
    - building  from Windows
        -  [ ] #829
    - scaladoc warninng(It's still exist!)
        - [ ] #353 
        - [x] #1048


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1052/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1056,https://api.github.com/repos/apache/pekko/issues/1056,pekko,2103626881,1056,add docs describing the Akka cluster support,pjfanning,11783444,PJ Fanning,,OPEN,2024-01-27T15:12:25Z,2024-02-05T11:16:14Z,"see #765 

@mdedetrich 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1056/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1056,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxHdI,pekko,1925478216,1056,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-03T22:58:14Z,2024-02-03T22:58:14Z,@mdedetrich could you review https://cwiki.apache.org/confluence/display/PEKKO/Pekko+Akka+Compatibility ? Feel free to modify it as you see fit.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxHdI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1056,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y1eUY,pekko,1926620440,1056,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-05T10:05:09Z,2024-02-05T10:05:09Z,I just reviewed this and it looks good for now although I would prefer this to be part of the actual paradox docs since we have historically placed our migration docs there.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y1eUY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1056,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y19az,pekko,1926747827,1056,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-05T11:16:13Z,2024-02-05T11:16:13Z,I was thinking about moving the doc when we have a full release. Leaving it in wiki for now makes it easier to adjust too.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5y19az/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/1066,pekko,2104155166,1066,Pekko 1.1 snapshots break Pekko Connectors tests,pjfanning,11783444,PJ Fanning,,CLOSED,2024-01-28T13:04:22Z,2024-01-29T14:30:45Z,"https://github.com/apache/incubator-pekko-connectors/pull/412

Needs investigation before we can release 1.1.0-M1

We are getting NoSuchMethodErrors on some of the pekko utils classes like OptionConverter and FutureConverter.

It could be that we need to rewrite our pekko-connector test builds - to compile with pekko 1.0 but then to test with pekko 1.1.

```
[error] Test docs.javadsl.SnsPublisherTest failed: java.lang.NoSuchMethodError: org.apache.pekko.util.FutureConverters$FutureOps$.asJava$extension(Lscala/concurrent/Future;)Ljava/util/concurrent/CompletionStage;, took 0.0 sec
[error]     at org.apache.pekko.http.javadsl.Http.shutdownAllConnectionPools(Http.scala:798)
[error]     at docs.javadsl.SnsPublisherTest.tearDownAfterClass(SnsPublisherTest.java:71)
```

```
[error] Test docs.javadsl.OpensearchV1Test failed: java.lang.NoSuchMethodError: 'java.util.concurrent.CompletionStage org.apache.pekko.util.FutureConverters$FutureOps$.asJava$extension(scala.concurrent.Future)', took 0.0 sec
[error]     at org.apache.pekko.http.javadsl.Http.singleRequest(Http.scala:643)
```

Issue seems to happen with Scala 3.3 testing but not with Scala 2.12 or 2.13 testing.

This is a command that fails in incubator-pekko-connectors (don't forget to use docker-compose to start all the necessary containers for this connector). 
```
sbt -Dpekko.build.pekko.version=main ""++3.3.1 elasticsearch/test""
```

Seems like pekko-http jars built for Scala 3 with Pekko 1.0 jars do not work Pekko 1.1 jars at runtime.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1066/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yDxLd,pekko,1913590493,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-28T13:06:08Z,2024-01-28T13:06:08Z,May because of the inline？@mdedetrich ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yDxLd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGPXs,pekko,1914238444,1066,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-29T08:57:12Z,2024-01-29T08:57:12Z,"The issue is still happening. Please do not close this issue until we have proof that is fixed.

https://github.com/apache/incubator-pekko-connectors/actions/runs/7686045276/job/20961266768","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGPXs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGRGP,pekko,1914245519,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T09:01:33Z,2024-01-29T09:01:33Z,"> The issue is still happening. Please do not close this issue until we have proof that is fixed.

I didn't intend to close the issue, it auto closed when PR that referenced the issue was merged.

I guess GitHub added ""references"" as onslr of the keywords that causes linked issues to close when PR does, will have to find another word.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGRGP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGRGm,pekko,1914245542,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T09:01:34Z,2024-01-29T09:01:34Z,"> The issue is still happening. Please do not close this issue until we have proof that is fixed.

I didn't intend to close the issue, it auto closed when PR that referenced the issue was merged.

I guess GitHub added ""references"" as one of the keywords that causes linked issues to close when PR does, will have to find another word.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGRGm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGp9U,pekko,1914347348,1066,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-29T09:59:47Z,2024-01-29T09:59:47Z,"I forced new jar publishes of pekko and pekko-http (1.1.x) and am still getting the same issues in pekko-connectors testing

https://github.com/apache/incubator-pekko-connectors/actions/runs/7694171655/job/20964422587","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGp9U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGsrq,pekko,1914358506,1066,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-29T10:05:42Z,2024-01-29T10:05:42Z,"For me, the issue bolis down to https://github.com/apache/incubator-pekko/tree/main/actor/src/main/mima-filters/1.1.0.backwards.excludes

We've made a very big set of binary incompatible changes in the pekko util code. The very methods that are causing this issue are listed in the binary exceptions in these exclude files.

I don't want us to be forced into releasing a whole set 1.1 releases for all our repos after we do a pekko (core) 1.1 release.

Can we undo the changes that led to these binary incompatibilities? 

The main issues are with
```
org.apache.pekko.util.FutureConverters$FutureOps$
```

Even if we start by undoing the changes that affected this and see if that is enough.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGsrq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGuC4,pekko,1914364088,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T10:08:32Z,2024-01-29T10:08:32Z,"> I don't want us to be forced into releasing a whole set 1.1 releases for all our repos after we do a pekko (core) 1.1 release.

As you can tell we are already have an entire matrix that will reveal any such issues and it did, ontop of this its an M1 and not a full release. Lets wait till the snapshots are published and propagated as discussed and not do anything rash.

If this doesn't solve the issue then I will revert the `inline def` changes as discussed before.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGuC4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGuvE,pekko,1914366916,1066,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-29T10:10:08Z,2024-01-29T10:10:08Z,"@mdedetrich see https://github.com/apache/incubator-pekko/issues/1066#issuecomment-1914347348 (TLDR - I have tested this)

The main issues are with 
```
org.apache.pekko.util.FutureConverters$FutureOps$
```

Could we just undo the changes that caused this set of bin incompatibilities?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGuvE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGyX7,pekko,1914381819,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T10:18:40Z,2024-01-29T10:18:40Z,"Sure, let me double check that everything compiled/propagated properly and ill set up a PR if thats the case","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yGyX7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yG0Vb,pekko,1914389851,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T10:23:08Z,2024-01-29T10:23:08Z,"Okay the `@targetName` indeed doesn't work as expected, will remove the `inline def`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yG0Vb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHKTq,pekko,1914479850,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T11:16:52Z,2024-01-29T11:16:52Z,I triggered a snapshot deploy,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHKTq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHLW9,pekko,1914484157,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T11:19:34Z,2024-01-29T11:19:34Z,"Maybe we can backport this inline to 1.0.x one day, then it will works,and for java usage add a local scala forwarder.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHLW9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHNgw,pekko,1914492976,1066,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-29T11:24:49Z,2024-01-29T11:24:49Z,No back port unless it is with new functions. Existing functions cannot be changed due to binary compatibility reasons.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHNgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHO_y,pekko,1914499058,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T11:28:29Z,2024-01-29T11:28:29Z,"> No back port unless it is with new functions. Existing functions cannot be changed due to binary compatibility reasons.

Oh, yes, users can use it too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHO_y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHPmK,pekko,1914501514,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T11:30:01Z,2024-01-29T11:30:01Z,"> Oh, yes, users can use it too.

They shouldn't be, this is private API

But yes if we create new functions we can then propagate those functions to all of the pekko projects but tbh I am not inclined to do this, we have bigger problems and I have spent enough time (as well as others) on this.

With Pekko 2.x we can do a new start and clean this stuff up, it was a shame it wasn't noticed before first pekko release but there isn't much we can do about it.

One last hope is if for some reason Scala 3.3.2 figures out why `@targetName` doesn't seem to be working and our release isn't out yet.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHPmK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHUPn,pekko,1914520551,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T11:42:00Z,2024-01-29T11:42:00Z,I mean use pekko 1.0.0 with newer connectors ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHUPn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHVR7,pekko,1914524795,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T11:44:41Z,2024-01-29T11:44:41Z,"It's scala3' inline problem and can't generate bytes code for Java usages,  it's a Scala 3's problem. 

Let's defer this in pekko 2.0, when we will have a good start.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHVR7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHWRg,pekko,1914528864,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T11:47:13Z,2024-01-29T11:47:13Z,"And as a  frontier,  you always hit something, who is using scala3 ' inline for some large cross projects like these？AFAIK, no one and you are the first one. So @mdedetrich Still excellent job

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHWRg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHW6J,pekko,1914531465,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T11:48:53Z,2024-01-29T11:48:53Z,"Re-running pekko-connectors CI now, see https://github.com/apache/incubator-pekko-connectors/actions/runs/7694171655","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHW6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHiF7,pekko,1914577275,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T12:17:33Z,2024-01-29T12:17:33Z,Seems it's ok now.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHiF7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHnvZ,pekko,1914600409,1066,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-01-29T12:31:39Z,2024-01-29T12:31:39Z,"So only https://github.com/apache/incubator-pekko-connectors/actions/runs/7694171655/job/20969131574 has failed but it seems the cause is erroneous and may already be fixed in `main`.

@pjfanning Do you want to confirm? Feel free to close the issue as completed if there are no more issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHnvZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1066,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHo41,pekko,1914605109,1066,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-29T12:34:33Z,2024-01-29T12:34:33Z,"It's an already known issue, I think we can close this issue now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yHo41/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1081,https://api.github.com/repos/apache/pekko/issues/1081,pekko,2107193335,1081,Scala 3.3 docs.dispatcher.DispatcherDocSpec java.lang.IllegalArgumentException: no matching constructor found on,He-Pin,501740,He-Pin(kerr),,OPEN,2024-01-30T08:07:37Z,2024-03-24T01:29:46Z,"```scala
[01-30 07:45:26.559] [info] - using Identify *** FAILED *** (0 milliseconds)
[01-30 07:45:26.559] [info]   java.lang.IllegalArgumentException: no matching constructor found on class docs.actor.ActorDocSpec$$anon$32$Follower for arguments [class docs.actor.ActorDocSpec$$anon$32]
[01-30 07:45:26.559] [info]   at org.apache.pekko.util.Reflect$.error$1(Reflect.scala:98)
[01-30 07:45:26.559] [info]   at org.apache.pekko.util.Reflect$.findConstructor(Reflect.scala:122)
[01-30 07:45:26.559] [info]   at org.apache.pekko.actor.ArgsReflectConstructor.<init>(IndirectActorProducer.scala:109)
[01-30 07:45:26.559] [info]   at org.apache.pekko.actor.IndirectActorProducer$.apply(IndirectActorProducer.scala:74)
[01-30 07:45:26.559] [info]   at org.apache.pekko.actor.Props.producer(Props.scala:141)
[01-30 07:45:26.560] [info]   at org.apache.pekko.actor.Props.<init>(Props.scala:154)
[01-30 07:45:26.560] [info]   at org.apache.pekko.actor.Props$.apply(Props.scala:123)
```

refs: https://github.com/apache/incubator-pekko/actions/runs/7707379313/job/21004465786#step:7:35225","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1081/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1081,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zjdfd,pekko,1938675677,1081,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-12T13:24:55Z,2024-02-12T13:24:55Z,This also affects the 1.0.x branch - i.e this is not a new issue,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zjdfd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1081,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmXr,pekko,2016568811,1081,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-23T18:26:55Z,2024-03-23T18:26:55Z,Can we leave this open until we fix 1.0.x branch? But we should wait a day or 2 before merging to 1.0.x. The issue is this code is not properly tested in PR builds - so we need the nightly build to run to test this.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmXr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1081,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54Mmiv,pekko,2016569519,1081,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-23T18:29:44Z,2024-03-23T18:29:44Z,"I tested with manually trigger, it works , but genjavadoc does not work on scala 3.

OK, let's leave it open before backported to 1.0.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54Mmiv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1081,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54M7rr,pekko,2016656107,1081,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-24T01:29:44Z,2024-03-24T01:29:44Z,looks like the main branch nightly build is better so we should backport this change to 1.0.x,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54M7rr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/1082,pekko,2107195029,1082,Scala 3.3 ActorDocSpec java.lang.IllegalArgumentException: no matching constructor found ,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-30T08:08:47Z,2024-03-23T16:27:27Z,"```scala
01-30 07:45:26.551] [info] - using watch *** FAILED *** (0 milliseconds)
[01-30 07:45:26.551] [info]   java.lang.IllegalArgumentException: no matching constructor found on class docs.actor.ActorDocSpec$$anon$29$WatchActor for arguments [class docs.actor.ActorDocSpec$$anon$29]
[01-30 07:45:26.551] [info]   at org.apache.pekko.util.Reflect$.error$1(Reflect.scala:98)
[01-30 07:45:26.551] [info]   at org.apache.pekko.util.Reflect$.findConstructor(Reflect.scala:122)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.ArgsReflectConstructor.<init>(IndirectActorProducer.scala:109)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.IndirectActorProducer$.apply(IndirectActorProducer.scala:74)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.Props.producer(Props.scala:141)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.Props.<init>(Props.scala:154)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.Props$.apply(Props.scala:123)
[01-30 07:45:26.551] [info]   at org.apache.pekko.actor.Props$.apply(Props.scala:96)
[01-30 07:45:26.551] [info]   at docs.actor.ActorDocSpec$$anon$29.<init>(ActorDocSpec.scala:600)
[01-30 07:45:26.551] [info]   at docs.actor.ActorDocSpec.f$proxy14$1(ActorDocSpec.scala:603)
[01-30 07:45:26.551] [info]   at docs.actor.ActorDocSpec.$init$$$anonfun$14(ActorDocSpec.scala:580)
[01-30 07:45:26.551] [info]   at org.scalatest.Transformer.apply$$anonfun$1(Transformer.scala:22)
[01-30 07:45:26.551] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[01-30 07:45:26.551] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:31)
[01-30 07:45:26.551] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[01-30 07:45:26.552] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[01-30 07:45:26.552] [info]   at org.scalatest.Transformer.apply(Transformer.scala:21)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1118)
[01-30 07:45:26.552] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[01-30 07:45:26.552] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:138)
[01-30 07:45:26.552] [info]   at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1124)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$$anonfun$1(AnyWordSpecLike.scala:1128)
[01-30 07:45:26.552] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1128)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:44)
2024-01-30 07:45:26,552 ERROR org.apache.pekko.actor.OneForOneStrategy  - Kill MDC: {pekkoAddress=pekko://ActorDocSpec, pekkoUid=5742197011161865973, pekkoSource=pekko://ActorDocSpec/user/$e, sourceThread=ActorDocSpec-pekko.actor.internal-dispatcher-4, sourceActorSystem=ActorDocSpec, pekkoTimestamp=07:45:26.552UTC}
org.apache.pekko.actor.ActorKilledException: Kill
[01-30 07:45:26.552] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$$anonfun$1(AnyWordSpecLike.scala:1187)
[01-30 07:45:26.552] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:413)
[01-30 07:45:26.552] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[01-30 07:45:26.552] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[01-30 07:45:26.552] [info]   at scala.collection.immutable.List.foreach(List.scala:333)
[01-30 07:45:26.552] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
[01-30 07:45:26.552] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[01-30 07:45:26.552] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[01-30 07:45:26.552] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1187)
[01-30 07:45:26.553] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:44)
[01-30 07:45:26.553] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
[01-30 07:45:26.553] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[01-30 07:45:26.553] [info]   at org.scalatest.Suite.run$(Suite.scala:564)
[01-30 07:45:26.553] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
[01-30 07:45:26.553] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$$anonfun$1(AnyWordSpecLike.scala:1232)
[01-30 07:45:26.553] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[01-30 07:45:26.553] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1232)
[01-30 07:45:26.553] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:44)
[01-30 07:45:26.553] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
[01-30 07:45:26.553] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[01-30 07:45:26.553] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:217)
[01-30 07:45:26.553] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:135)
[01-30 07:45:26.553] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
[01-30 07:45:26.553] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[01-30 07:45:26.553] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[01-30 07:45:26.553] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[01-30 07:45:26.553] [info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[01-30 07:45:26.553] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
[01-30 07:45:26.553] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
[01-30 07:45:26.553] [info]   at java.base/java.lang.Thread.run(Thread.java:1583)
```


refs: https://github.com/apache/incubator-pekko/actions/runs/7707379313/job/21004465786#step:7:35225","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1082/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaasb,pekko,1919527707,1082,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-31T17:01:46Z,2024-01-31T17:01:46Z,This is actually an Dotty bug.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaasb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zjdY-,pekko,1938675262,1082,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-12T13:24:40Z,2024-02-12T13:24:40Z,This also affects the 1.0.x branch - i.e this is not a new issue,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zjdY-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MNdl,pekko,2016466789,1082,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-23T11:49:37Z,2024-03-23T11:49:37Z,"as it's not going to be fixed in scala 3, so we should change the code then :)
refs: https://github.com/scala/scala3/pull/19803","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MNdl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MPzJ,pekko,2016476361,1082,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-23T12:18:43Z,2024-03-23T12:18:43Z,@He-Pin any idea what a change would look like and whether it would be possible to get it into 1.1.0-M1?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MPzJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1082,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MQat,pekko,2016478893,1082,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-23T12:26:38Z,2024-03-23T12:26:38Z,"@pjfanning Yes, I'm fixing it locally, I was expected Scala 3.3.3 fix this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MQat/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/1089,pekko,2110475688,1089,Virtual Thread Support: replace synchronized with ReentrantGuard,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-01-31T16:20:31Z,2024-09-24T03:41:44Z,"Motivation:
As there is onging work to make VT works well with monitor，not sure when , maybe in JDK 25, but we can do better to remove some `synchronized` block.

According to https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html#GUID-04C03FFC-066D-4857-85B9-E5A27A875AF9:

>A current limitation of the implementation of virtual threads is that performing a blocking operation while inside a synchronized block or method causes the JDK's virtual thread scheduler to block a precious OS thread, whereas it wouldn't if the blocking operation were done outside of a synchronized block or method. We call that situation ""pinning"".

Pekko already has org.apache.pekko.util.ReentrantGuard (extends Java's ReentrantLock) which has a withGuard function.
```
   val lock = new ReentrantGuard()

   def fun(): T = {
     lock.withGuard {
       // ... function body returning an instance of T
     }
   }
```

ReentrantGuard.withGuard calls ReentrantLock lock() and waits until the lock is available and when it completes (successfully or not), it calls ReentrantLock unlock().


Running the JVM with `-Djdk.tracePinnedThread=full` is a useful way to be notified about pinned threads.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1089/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaYWj,pekko,1919518115,1089,NA,pjfanning,11783444,PJ Fanning,,NA,2024-01-31T16:56:22Z,2024-01-31T16:56:22Z,I think this should be a discussion. I think we have 1 open already. An issue needs a reasonably concrete set of steps. Lazy Val's used synchronization under the hood. So finding a non synchronized alternative is a good place to start.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaYWj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaaaW,pekko,1919526550,1089,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-01-31T17:01:09Z,2024-01-31T17:01:09Z,"refs: https://github.com/vavr-io/vavr/issues/2760 , yes I just found this.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yaaaW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ygfIm,pekko,1921118758,1089,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-01T11:33:13Z,2024-02-01T11:33:13Z,@He-Pin can we rework this issue to focus on replacing the use of `this.synchronized` with ReentrantLocks? That is a more achievable issue than 'Virtual thread friendly'. Someone would be more inclined to contribute the ReentrantLock solution.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5ygfIm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yghKq,pekko,1921127082,1089,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-01T11:37:30Z,2024-02-01T11:37:30Z,"@pjfanning YES, PLEASE.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yghKq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NMX3l,pekko,2368830949,1089,NA,KrnSaurabh,39181662,,,NA,2024-09-23T16:48:52Z,2024-09-23T16:48:52Z,"Hi @He-Pin , I would be happy to contribute. Please let me know this issue can be assigned to me if not picked up by someone already?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NMX3l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NMoXj,pekko,2368898531,1089,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-23T17:18:15Z,2024-09-23T17:18:15Z,"@KrnSaurabh I don't think we want this change at the moment. ReentrantGuards are slower than synchronized blocks.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NMoXj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1089,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NRB2a,pekko,2370051482,1089,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-09-24T03:39:40Z,2024-09-24T03:39:40Z,"@KrnSaurabh In JDK25, this is been fixed, so I think we can just drop this.

https://openjdk.org/jeps/8337395
JEP draft: Adapt Object Monitors for Virtual Threads

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NRB2a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1091,https://api.github.com/repos/apache/pekko/issues/1091,pekko,2111720247,1091,some fan in/out operator missing fluent API,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-02-01T07:12:50Z,2024-02-01T15:01:44Z,"GraphDSL is very hard to use on Java API, I think we could complete them, such as `mapPartition ` could be very helpful when you are consuming from Apache Kafka.

<img width=""648"" alt=""截屏2024-02-01 15 04 47"" src=""https://github.com/apache/incubator-pekko/assets/26020358/66584906-95b8-472d-9af2-82856ee93d2c"">

<img width=""493"" alt=""截屏2024-02-01 15 05 01"" src=""https://github.com/apache/incubator-pekko/assets/26020358/6ea9dbe1-b1ca-466e-8f1e-3191ba4497dd"">

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1091/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/1097,pekko,2116591156,1097,super-high cost when searching for documents,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-02-03T16:51:22Z,2024-02-14T12:31:19Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->

## Reproduce

Just search from https://pekko.apache.org/docs/pekko/current//index.html

Happened on:

- m1 macOS Safari
- m1 macOS Chrome
- iPhone Safari

I think this maybe a issue from paradox.


## Self-diagnosis

Just a quick investigation from myself, the profiler shows that most of the time costs from a `reduce` function.

I am not a frontend developer, can not deep dive to it.



<img width=""1667"" alt=""截屏2024-02-04 00 43 51"" src=""https://github.com/apache/incubator-pekko/assets/26020358/301723b8-9a46-466c-af6d-65098ad4fd5c"">

<img width=""706"" alt=""截屏2024-02-04 00 49 34"" src=""https://github.com/apache/incubator-pekko/assets/26020358/cfea3c1d-6460-49ce-bd48-30dd7804f72e"">

<img width=""611"" alt=""截屏2024-02-04 00 50 09"" src=""https://github.com/apache/incubator-pekko/assets/26020358/20f7c77b-da19-4908-bc26-8803b7cab4df"">


## Performance Profile

This is my profiler result.

[Trace-20240204T004355.json](https://github.com/apache/incubator-pekko/files/14152202/Trace-20240204T004355.json)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1097/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw7SE,pekko,1925428356,1097,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-02-03T18:54:05Z,2024-02-03T18:54:05Z,"After some digging, I just found the issue caused by a very large search_index.json, it will load when the user clicks the search input box.


<img width=""930"" alt=""截屏2024-02-04 02 34 49"" src=""https://github.com/apache/incubator-pekko/assets/26020358/1c33d9e5-315c-419c-b14f-d408dddf2400"">

This javascript file comes from the upstream repo: https://github.com/squidfunk/mkdocs-material, in the latest documentation website of them, it will pre-loaded search index, and the index file size is only 200kb.

Then I checked the content of pekko search index file, which is very large json array.

<img width=""815"" alt=""截屏2024-02-04 02 48 11"" src=""https://github.com/apache/incubator-pekko/assets/26020358/a2d1451a-0765-4505-a5e3-46ac3a7655a6"">

Finally, I decided to look up the answer in the upstream repo, and I found this: https://github.com/squidfunk/mkdocs-material/issues/904","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw7SE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw81Z,pekko,1925434713,1097,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-03T19:22:19Z,2024-02-03T19:22:19Z,"It is Paradox that builds this json file. I'm not sure what we can do in the short term. Maybe, we should look at trying to offload the search to Google instead of using our own search with its own JSON file.

See https://poi.apache.org/ - another Apache project site - its search is Google based.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw81Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw89v,pekko,1925435247,1097,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-03T19:24:53Z,2024-02-03T19:24:53Z,"An example Google search

`actor site:pekko.apache.org`

https://www.google.com/search?q=actor+site%3Apekko.apache.org","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yw89v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxHYs,pekko,1925477932,1097,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-03T22:56:31Z,2024-02-03T22:56:31Z,"IIRC, it was using the algolia for indexing and searching","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxHYs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxjmr,pekko,1925593515,1097,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-02-04T06:05:02Z,2024-02-04T06:05:02Z,"> IIRC, it was using the algolia for indexing and searching

I don't think so, only akka uses algolia, we use paradox-material-theme which depends on  mkdocs-material

>  Maybe, we should look at trying to offload the search to Google instead of using our own search with its own JSON file.

I am using Docusaurus at work, they use the same way to implement offline search but won't stuck UI thread.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxjmr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxmev,pekko,1925605295,1097,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-02-04T07:05:15Z,2024-02-04T07:05:15Z,I will try to handle this issue via an update paradox-material-theme.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxmev/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxmrS,pekko,1925606098,1097,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-04T07:08:55Z,2024-02-04T07:08:55Z,"> I will try to handle this issue via an update paradox-material-theme.

Note that [sbt-paradox-material-theme](https://github.com/sbt/sbt-paradox-material-theme) was just transferred to the sbt org/community and we are currently in the process of making the necessary changes so it may take a bit of time before we can get to deploying the change","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yxmrS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yyk24,pekko,1925860792,1097,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-02-04T17:45:58Z,2024-02-04T17:45:58Z,"> I will try to handle this issue via an update paradox-material-theme.

I tried to upgrade to the latest mkdocs-material and found that the way it was built changed after the 5.x version, and only up-to 5.x version can avoid search blocking the main thread, and it seems that the implementation is through the need to precompile a search index file. 

I think this upgrade is no less difficult than rewriting upstream https://github.com/sbt/sbt-paradox-material-theme. We should consider replacing the search implementation to solve this ISSUE.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yyk24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yz1SA,pekko,1926190208,1097,NA,squidfunk,932156,Martin Donath,,NA,2024-02-05T04:00:22Z,2024-02-05T04:00:22Z,"Author of Material for MkDocs here. v5.x is from 2020, so pretty old. We made [significant improvements on search](https://squidfunk.github.io/mkdocs-material/blog/2021/09/13/search-better-faster-smaller/) in [9.x](https://squidfunk.github.io/mkdocs-material/changelog/#9.0.0), which should be twice as fast and significantly cut down on index size, and will be replacing it with an entirely new implementation that will be much faster and more powerful in the near future. Related:

- https://github.com/squidfunk/mkdocs-material/issues/6307","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5yz1SA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1097,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5z2jF-,pekko,1943679358,1097,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-14T12:31:18Z,2024-02-14T12:31:18Z,@Roiocam sbt-paradox-theme has been ported over to the sbt org/package and 0.7.0 has just been [published](https://github.com/sbt/sbt-paradox-material-theme/actions/runs/7901103220/job/21564226923) so you are now free to make changes against [sbt-paradox-theme](https://github.com/sbt/sbt-paradox-material-theme). ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5z2jF-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1109,https://api.github.com/repos/apache/pekko/issues/1109,pekko,2128258154,1109,1.0.x branch has an empty `publish-1.0-nightly` workflow,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2024-02-10T09:29:06Z,2024-02-10T16:04:47Z,Seems to have been introduced in #631 /cc @mdedetrich ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1109/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zc5dO,pekko,1936955214,1109,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-10T09:43:38Z,2024-02-10T09:43:38Z,We should just delete the empty file. We run the job from the main branch - the yml has a `ref: 1.0.x` in its checkout.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zc5dO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zc5hm,pekko,1936955494,1109,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-10T09:44:59Z,2024-02-10T09:44:59Z,Yeah that appears to be an accident,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zc5hm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1109,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zdQ-R,pekko,1937051537,1109,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-10T16:04:47Z,2024-02-10T16:04:47Z,Fix merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zdQ-R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1111,https://api.github.com/repos/apache/pekko/issues/1111,pekko,2128314662,1111,very verbose logging for missing property,pjfanning,11783444,PJ Fanning,,CLOSED,2024-02-10T11:03:18Z,2024-02-13T09:05:11Z,"An optional property in #765 is leading to lots of logging like this

```
12-489: No configuration setting found for key 'pekko.cluster.akka'
com.typesafe.config.ConfigException$Missing: merge of String: 2-7,system properties,reference.conf @ file:/home/runner/work/incubator-pekko/incubator-pekko/cluster/target/scala-2.13/classes/reference.conf: 12-489: No configuration setting found for key 'pekko.cluster.akka'
	at com.typesafe.config.impl.SimpleConfig.findKeyOrNull(SimpleConfig.java:157)
	at com.typesafe.config.impl.SimpleConfig.findKey(SimpleConfig.java:150)
	at com.typesafe.config.impl.SimpleConfig.findOrNull(SimpleConfig.java:177)
	at com.typesafe.config.impl.SimpleConfig.findOrNull(SimpleConfig.java:181)
	at com.typesafe.config.impl.SimpleConfig.findOrNull(SimpleConfig.java:181)
	at com.typesafe.config.impl.SimpleConfig.find(SimpleConfig.java:189)
	at com.typesafe.config.impl.SimpleConfig.find(SimpleConfig.java:194)
	at com.typesafe.config.impl.SimpleConfig.getString(SimpleConfig.java:251)
	at org.apache.pekko.cluster.SeedNodeProcess.akkaVersion$lzycompute(SeedNodeProcess.scala:61)
	at org.apache.pekko.cluster.SeedNodeProcess.akkaVersion(SeedNodeProcess.scala:56)
	at org.apache.pekko.cluster.SeedNodeProcess.receiveJoinSeedNode(SeedNodeProcess.scala:84)
	at org.apache.pekko.cluster.JoinSeedNodeProcess$$anonfun$receive$2.applyOrElse(SeedNodeProcess.sc
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1111,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zrrdI,pekko,1940830024,1111,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-13T09:05:11Z,2024-02-13T09:05:11Z,fixed in https://github.com/apache/incubator-pekko/pull/1112,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5zrrdI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/1118,pekko,2129647878,1118,Require Java 11 for building Pekko,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2024-02-12T08:39:32Z,2025-01-19T14:15:10Z,"The discussion on whether or not to require Java 11 for building Pekko is at https://lists.apache.org/thread/ro3rz6s8mvj7j9dp39oszf7rnr6hn19d

This ticket is meant to collect the tasks/opportunities that are unlocked once we make that jump:
* Remove `notOnJdk8` and `isJdk8` from `project/JdkOptions.scala`, and anything that depends on it
* Update scalatest and make sure its dependency modules are consistent with 'their' scalatest version again (#1116)
* Update sbt-paradox (#1061)
* Create a safeguard to make sure we don't inadvertently update compile-time dependencies to require Java 9 or later (how?)
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K0WI,pekko,1999324552,1118,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-15T10:04:01Z,2024-03-15T10:04:01Z,"Summarizing this thread, the main remaining roadblock is the risk that we'd unintentionally accept an update of a runtime dependency that drops support for Java 8.

Any ideas on how we could avoid that risk?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K0WI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K2_A,pekko,1999335360,1118,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T10:10:07Z,2024-03-15T10:10:07Z,"It feels like that at least some of our tests should be run with pre-compiled snapshot jars. At the moment, we run full builds with multiple JDKs but when we release, we build with a specific JDK. It might be better to have our tests work this way too.

* build just one set of snapshot jars with our preferred JDK
* test these snapshot jars with multiple JDKs - including the JDK that we note to be minimum supported","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K2_A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K43z,pekko,1999343091,1118,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T10:15:01Z,2024-03-15T10:15:01Z,"We have a similar issue with the Pekko modules (eg Pekko HTTP) - we want to support having Pekko HTTP run with Pekko Core 1.0 and Pekko Core 1.1. There is a risk that Pekko HTTP jars could only work for Pekko Core 1.1 if the Pekko HTTP jars are compiled with Pekko Core 1.1. But we release jars that are built only with Pekko Core 1.0. A possibly better test pipeline would be
* build just one set of Pekko HTTP snapshot jars with our preferred JDK and Pekko Core 1.0
* test these snapshot jars with multiple JDKs and Pekko Core versions.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K43z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K-fx,pekko,1999366129,1118,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-15T10:28:51Z,2024-03-15T10:28:51Z,"Packaging tests into a jar (if thats what is being asked) is a PITA, I tried to do this at a previous company where I worked for different reasons using sbt-native-packager and it wasn't an easy/obvious/trivial thing to do

For me, in order to not blow out the matrix the best compromise is to test with multiple JDK's locally in the project (i.e. pekko-http would test for JDK 8/11/17/21 etc etc) but do cross testing (i.e. testing pekko-http with pekko core 1.0.x and 1.1.x) with JDK 8. We have to be wary about blowing out our gh actions, another Apache project got called out for it

Another thing I want to add is that the issue regarding building with JDK 1.8 has largely been solved, its abstracted away in pekko-sbt-paradox and so aside from sbt-paradox-site, we don't need to do any workarounds in any of the pekko modules. I don't want people to mis-interpret this as stonewalling this idea, just pointing out that the issue is less pressing now compared to before.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53K-fx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53LROP,pekko,1999442831,1118,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-15T11:17:19Z,2024-03-15T11:17:19Z,"> the issue regarding building with JDK 1.8 has largely been solved

I think it could still simplify our build quite a bit (e.g. #1194). Given how complicated our build is I think that would be valuable, even if it's just an incremental improvement and does not solve 'everything'.

> Packaging tests into a jar (if thats what is being asked) is a PITA

Of course this simplification shouldn't come at the cost of severely complicating other parts of the build.

My interpretation of PJ's proposal was that we'd run the build and the unit tests with the latest JDK, and then do a separate 'integration test' against the published snapshot jars. That sounds attractive to me, as such 'full' integration tests would be useful in its own right. Perhaps they wouldn't need to be ran on PR validation at all, even, but on a nightly/weekly schedule (and span multiple projects, too).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53LROP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Ldz1,pekko,1999494389,1118,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T11:51:09Z,2024-03-15T11:51:09Z,"> > the issue regarding building with JDK 1.8 has largely been solved
> 
> I think it could still simplify our build quite a bit (e.g. #1194). Given how complicated our build is I think that would be valuable, even if it's just an incremental improvement and does not solve 'everything'.
> 
> > Packaging tests into a jar (if thats what is being asked) is a PITA
> 
> Of course this simplification shouldn't come at the cost of severely complicating other parts of the build.
> 
> My interpretation of PJ's proposal was that we'd run the build and the unit tests with the latest JDK, and then do a separate 'integration test' against the published snapshot jars. That sounds attractive to me, as such 'full' integration tests would be useful in its own right. Perhaps they wouldn't need to be ran on PR validation at all, even, but on a nightly/weekly schedule (and span multiple projects, too).

@raboof's interpretation is basically what I was getting at.

I think we can refactor some of the unit tests subprojects (eg `actor-tests`) so that it doesn't depend on the sbt module but depends on a jar in mavenLocal repo or possibly Apache Nexus snapshots repo.

If we do it properly, I think we can actually save some time in the build (no compiling with multiple JDKs - no building docs with multiple JDKs). We don't necessarily need to end up with extra GitHub Action total build time.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Ldz1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L1aO,pekko,1999591054,1118,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-15T12:45:05Z,2024-03-15T12:45:05Z,"> I think we can refactor some of the unit tests subprojects (eg `actor-tests`) so that it doesn't depend on the sbt module but depends on a jar in mavenLocal repo or possibly Apache Nexus snapshots repo.

hmm, those are 'unit tests' more than 'integration tests' though - for those my gut feeling is it'd be more convenient to keep them in their regular location (keeping the build simple and test/modify roundtrips quick), and only do separate 'integration tests' against the jars.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L1aO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L22w,pekko,1999596976,1118,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T12:48:37Z,2024-03-15T12:48:37Z,"When you run `actor-tests` for Java 21, why do you need to use actor code built with Java 21 ? It is actually inaccurate because we have no intent right now to release jars with code built with Java 21. I see the value in running actor-tests with Java 21 just that it should use actor module classes built with Java 11 (the version we use to build releases).","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L22w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L7Y7,pekko,1999615547,1118,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-15T13:00:02Z,2024-03-15T13:00:02Z,"> When you run actor-tests for Java 21, why do you need to use actor code built with Java 21 ?

You don't ;). Running the unittests from the same sbt session with which you're building the code (in a single JVM) seems typical, though?

> It is actually inaccurate because we have no intent right now to release jars with code built with Java 21. I see the value in running actor-tests with Java 21 just that it should use actor module classes built with Java 11 (the version we use to build releases).

I don't feel strongly on whether we should build with Java 11 or with Java 21 (though we should likely continue to allow both) - I'm mainly trying to get away from 8","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53L7Y7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53MiRd,pekko,1999774813,1118,NA,laglangyue,35491928,Laglangyue,,NA,2024-03-15T14:22:01Z,2024-03-15T14:22:01Z,"As a volunteer, I strongly agree to use Java 11 and more latest java version. It can push user to update their java verison.
My problems is:
Is the integration testing of Java 8 sufficient to avoid bugs when unit testing is missing ?
Is it necessary for us to enrich our integration testing ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53MiRd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53M4__,pekko,1999867903,1118,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T15:07:38Z,2024-03-15T15:07:38Z,"Without some form of Java 8 integration testing, we can't merge this. Or maybe we get Pekko 1.1 released and then start working towards Pekko 2.0 where Java 8 is no longer supported.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53M4__/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1118,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBkZB,pekko,2600879681,1118,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-19T14:15:10Z,2025-01-19T14:15:10Z,"As time has moved on, I think it's no longer useful to put effort into requiring Java 11 just for building Pekko, and we should work towards requiring Java 11 both for building and for using Pekko instead eventually. This is tracked in #1730 , so we can close this one.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBkZB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1119,https://api.github.com/repos/apache/pekko/issues/1119,pekko,2129978687,1119,set up scheduled nightly build for 1.0.x branch,pjfanning,11783444,PJ Fanning,,CLOSED,2024-02-12T11:54:28Z,2024-02-14T13:50:45Z,"* we could add a yml file in main branch that checks out `ref: 1.0.x` - we do this for a few jobs already
* see top answer on https://stackoverflow.com/questions/58798886/github-actions-schedule-operation-on-branch as to why we can't use the existing https://github.com/apache/incubator-pekko/blob/main/.github/workflows/nightly-builds.yml - its schedule applies only to the main branch
* we could possibly use https://github.com/apache/incubator-pekko/blob/main/.github/workflows/nightly-builds.yml but add a matrix element called `checkoutBranch` set to `[main, 1.0.x]` and change the checkout steps to apply `ref: ${{ matrix.checkoutBranch }}`
* in mean time, you can still run the tests manually at https://github.com/apache/incubator-pekko/actions/workflows/nightly-builds.yml and choose the `1.0.x` branch","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1119,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5z3Cvf,pekko,1943808991,1119,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-14T13:50:44Z,2024-02-14T13:50:44Z,this is done,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5z3Cvf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1124,https://api.github.com/repos/apache/pekko/issues/1124,pekko,2133263789,1124,duplicate 'bug-fixes' id in release notes,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-02-13T22:54:17Z,2024-02-13T22:54:17Z,"On https://pekko.apache.org/docs/pekko/current/release-notes/index.html, the anchor `#bug-fixes` appears multiple times, so all those headings link to the first one.

I tried the markdown syntax `{#custom-id}` but apparently that doesn't work for the markdown dialect paradox uses.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1126,https://api.github.com/repos/apache/pekko/issues/1126,pekko,2134418438,1126,upgrade protoc version,pjfanning,11783444,PJ Fanning,,CLOSED,2024-02-14T13:58:57Z,2024-02-23T17:12:35Z,"Still using protoc 3.11.4.

https://github.com/apache/incubator-pekko/blob/231b9a991a53f034fe4dfce134cea5f586c73c70/project/Protobuf.scala#L43

It may be better to focus on upgrading protobuf-java but it may also be useful to upgrade protoc.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1126/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1126,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls507SP3,pekko,1961698295,1126,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-23T17:12:35Z,2024-02-23T17:12:35Z,https://github.com/apache/incubator-pekko/pull/1127 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls507SP3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1129,https://api.github.com/repos/apache/pekko/issues/1129,pekko,2136764471,1129,graphviz errors in scaladocs for 2.12,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-02-15T15:04:44Z,2024-02-15T15:04:45Z,"graphviz produces errors during the generation of embedded svgs in the 2.12 scaladocs.

you can reproduce this with e.g. `sbt ++2.12 persistence-tck/doc`.

diagnosing by adding `-diagrams-debug` to the scaladoc options in `project/Doc.scala`, we get some more diagnostics:

```
model contains 36 documentable templates

**********************************************************************
The graphviz dot diagram tool has malfunctioned and will be restarted.

The following is the log of the failure:
  DOT <error console>: malloc_consolidate(): unaligned fastbin chunk detected

  Cleanup: Last template: org.apache.pekko.persistence.journal.JournalPerfSpec
  Cleanup: Last dot input: 
    digraph G {
    compound=""true"";
    rankdir=""TB"";
    node [margin=""0.08,0.01"", fontsize=""8.00"", style=""filled,rounded"", height=""0.0"", penwidth=""1"", shape=""rect"", width=""0.0"", fontname=""Source Code Pro""];
    edge [arrowsize=""0.7"", fontcolor=""#aaaaaa"", fontsize=""9.00"", color=""#d4d4d4"", fontname=""Source Code Pro""];
    subgraph clusterAll {
    style=""invis""
    subgraph clusterOutgoing {
    style=""invis""
    node6 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">scalatest.matchers.should.Matchers.Equalizer[JournalPerfSpec] </TD></TR></TABLE>>,fontcolor=""#7d7d7d"", color=""#ababab"", id=""implicit-outgoing class|graph1_6"", fillcolor=""#e1e1e1"", tooltip=""org.apache.pekko.persistence.journal.JournalPerfSpec can be implicitly converted to scalatest.matchers.should.Matchers.Equalizer[JournalPerfSpec] by the implicit method convertToEqualizer in trait org.scalactic.TripleEquals""];
    node5 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">scalatest.matchers.should.Matchers.AnyShouldWrapper[JournalPerfSpec] </TD></TR></TABLE>>,fontcolor=""#7d7d7d"", color=""#ababab"", id=""implicit-outgoing class|graph1_5"", fillcolor=""#e1e1e1"", tooltip=""org.apache.pekko.persistence.journal.JournalPerfSpec can be implicitly converted to scalatest.matchers.should.Matchers.AnyShouldWrapper[JournalPerfSpec] by the implicit method convertToAnyShouldWrapper in trait org.scalatest.matchers.should.Matchers""];
    node4 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">scalactic.TripleEquals.Equalizer[JournalPerfSpec] </TD></TR></TABLE>>,fontcolor=""#7d7d7d"", color=""#ababab"", id=""implicit-outgoing class|graph1_4"", fillcolor=""#e1e1e1"", tooltip=""org.apache.pekko.persistence.journal.JournalPerfSpec can be implicitly converted to scalactic.TripleEquals.Equalizer[JournalPerfSpec] by the implicit method convertToEqualizer in trait org.scalactic.TripleEquals""];
    node3 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">scalatest.Assertions.Equalizer[JournalPerfSpec] </TD></TR></TABLE>>,fontcolor=""#7d7d7d"", color=""#ababab"", id=""implicit-outgoing class|graph1_3"", fillcolor=""#e1e1e1"", tooltip=""org.apache.pekko.persistence.journal.JournalPerfSpec can be implicitly converted to scalatest.Assertions.Equalizer[JournalPerfSpec] by the implicit method convertToEqualizer in trait org.scalactic.TripleEquals""];
    node3 -> node4 -> node5 -> node6 [constraint=""false"", style=""invis"", minlen=""0.0""];
    }
    subgraph clusterThis {
    style=""invis""
    node0 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">JournalPerfSpec </TD></TR></TABLE>>,fontcolor=""#ffffff"", URL=""#inheritance-diagram"", color=""#418565"", id=""this class|graph1_0"", fillcolor=""#418565"", tooltip=""org.apache.pekko.persistence.journal.JournalPerfSpec (this class)""];
    }
    
    node0 -> node3 [id=""implicit-outgoing|0_3"", tooltip=""JournalPerfSpec can be implicitly converted to scalatest.Assertions.Equalizer[JournalPerfSpec], scalactic.TripleEquals.Equalizer[JournalPerfSpec], scalatest.matchers.should.Matchers.AnyShouldWrapper[JournalPerfSpec], scalatest.matchers.should.Matchers.Equalizer[JournalPerfSpec]"", constraint=""false"", minlen=""2"", ltail=""clusterThis"", lhead=""clusterOutgoing"", label=""implicitly""];
    }
    node1 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">JavaJournalPerfSpec </TD></TR></TABLE>>,fontcolor=""#ffffff"", URL=""../japi/journal/JavaJournalPerfSpec.html#inheritance-diagram"", color=""#418565"", id=""class|graph1_1"", fillcolor=""#418565"", tooltip=""org.apache.pekko.persistence.japi.journal.JavaJournalPerfSpec""];
    node2 [label=<<TABLE BORDER=""0"" CELLBORDER=""0""><TR><TD><IMG SCALE=""TRUE"" SRC=""/home/aengelen/dev/apache/incubator-pekko/persistence-tck/target/scala-2.12/api/lib/class_diagram.png"" /></TD><TD VALIGN=""MIDDLE"">JournalSpec </TD></TR></TABLE>>,fontcolor=""#ffffff"", URL=""JournalSpec.html#inheritance-diagram"", color=""#418565"", id=""class|graph1_2"", fillcolor=""#418565"", tooltip=""org.apache.pekko.persistence.journal.JournalSpec""];
    node2 -> node0 [id=""inheritance|graph1_2_0"", tooltip=""JournalPerfSpec is a subtype of JournalSpec"", dir=""back"", arrowtail=""empty""];
    node0 -> node1 [id=""inheritance|graph1_0_1"", tooltip=""JavaJournalPerfSpec is a subtype of JournalPerfSpec"", dir=""back"", arrowtail=""empty""];
    }

  Cleanup: Dot path: dot
  Cleanup: Dot exit code: 134
**********************************************************************
Graphviz will be restarted...


Diagram generation running time breakdown:

  diagrams model filtering
  ========================
    count:        72 items
    total time:   0 ms
    average time: 0 ms
    maximum time: 0 ms

  diagrams model generation
  =========================
    count:        72 items
    total time:   10 ms
    average time: 0 ms
    maximum time: 2 ms

  dot diagram generation
  ======================
    count:        21 items
    total time:   6 ms
    average time: 0 ms
    maximum time: 1 ms

  dot process running
  ===================
    count:        21 items
    total time:   387 ms
    average time: 18 ms
    maximum time: 277 ms

  svg processing
  ==============
    count:        21 items
    total time:   81 ms
    average time: 3 ms
    maximum time: 28 ms

  Broken images: 94
  Fixed images: 0

```

I'm using graphviz 9.0.0, and passing that graph to dot manually works fine. Also 2.13 docs appear to be fine.

Perhaps we should just disable scaladoc diagrams for 2.12?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1136,https://api.github.com/repos/apache/pekko/issues/1136,pekko,2146840856,1136,interceptable heartbeat interval to record metric,nvollmar,919730,Nicolas Vollmar,,CLOSED,2024-02-21T14:04:45Z,2024-02-26T11:31:45Z,`PhiAccrualFailureDetector` is not suitable to extend or use intercept to get access to interval for monitoring hearbeat,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1136/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/1138,pekko,2148418805,1138,link validator fails due to changed url,nvollmar,919730,Nicolas Vollmar,,CLOSED,2024-02-22T07:39:15Z,2024-02-22T09:10:07Z,Url `opensource.org/licenses/BSD-3-Clause` changed to `opensource.org/blog/license/bsd-3-clause`,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1138/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50wvZb,pekko,1958934107,1138,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-02-22T08:24:47Z,2024-02-22T08:24:47Z,Are we sure that was intentional? That doesn't seem like an improvement and perhaps something they'll rollback?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50wvZb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w08a,pekko,1958956826,1138,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-02-22T08:39:34Z,2024-02-22T08:39:34Z,"Not sure, at least it changed for all licenses: https://opensource.org/licenses","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w08a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w2ZI,pekko,1958962760,1138,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-02-22T08:43:35Z,2024-02-22T08:43:35Z,asked on https://merveilles.town/@raboof/111974245965562026,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w2ZI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w4Vr,pekko,1958970731,1138,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-02-22T08:48:56Z,2024-02-22T08:48:56Z,I will open an issue on https://github.com/OpenSourceOrg/dotOrg maybe we get an answer there,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w4Vr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w5xm,pekko,1958976614,1138,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-02-22T08:52:44Z,2024-02-22T08:52:44Z,"a found it at https://github.com/OpenSourceOrg/dotOrg/issues/60, great","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50w5xm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1138,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50xAtF,pekko,1959004997,1138,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-02-22T09:10:06Z,2024-02-22T09:10:06Z,They will revert back to the original URL,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50xAtF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1140,https://api.github.com/repos/apache/pekko/issues/1140,pekko,2149321404,1140,NullPointerException when overriding testKit from ScalaTestWithActorTestKit,ccerbusca,23035489,Cristian Cerbusca,,OPEN,2024-02-22T15:23:23Z,2024-02-24T06:48:26Z,"While migrating a project to Pekko, I noticed that some of the tests started failing with `NullPointerException`s.

On further investigation, it was because I was overriding the TestKit inside those tests.
Here's a simple reproducer:

```scala
import org.apache.pekko.actor.testkit.typed.scaladsl.{ActorTestKit, ScalaTestWithActorTestKit}
import org.scalatest.funsuite.AnyFunSuiteLike
 
class Test extends ScalaTestWithActorTestKit with AnyFunSuiteLike {
 
  override val testKit = ActorTestKit()
 
  test(""test"") {
    assert(true)
  }
 
}
```

I think the issue seems to be this line, where the `val` is not lazy, leading to a NullPointerException.

https://github.com/apache/incubator-pekko/blob/28314e679885519f6458ebf10f9a181d5299c83a/actor-testkit-typed/src/main/scala/org/apache/pekko/actor/testkit/typed/scaladsl/ScalaTestWithActorTestKit.scala#L94

I understand that in this case I should have passed the `TestKit` to the `ScalaTestWithActorTestKit` constructor (which I do now), but having the ability to override `testKit`, makes it a possible usage for other people too.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50zw9x,pekko,1959726961,1140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-22T15:46:31Z,2024-02-22T15:46:31Z,"I don't think this is generally solvable due to how trait initialization works in Scala 2, long story short trait composition in Scala 2 is not commutative which means that the order of when you mix in traits can effect initialization which can lead to `NullPointerException` in cases like this. For these reason its not really Pekko specific.

The solution to this problem is to use `lazy val`/`def` when you override the field. Also afaik this is not an issue in Scala 3 where the compiler will re-order the fields in traits to make sure its initialized correctly.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls50zw9x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls509YZ8,pekko,1962247804,1140,NA,jxnu-liguobin,29496873,梦境迷离,dreamylost@outlook.com,NA,2024-02-24T04:22:06Z,2024-02-24T04:22:06Z,Can we add documentation to explain it？Although this is an initialization pit.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls509YZ8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1140,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls509ftg,pekko,1962277728,1140,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-02-24T06:46:46Z,2024-02-24T06:46:46Z,"> Can we add documentation to explain it？Although this is an initialization pit.

Sure, although I wouldn't spend too much time on it because as said previously it really has nothing specifically to do with Pekko.

I would propose adding a single line in the docs briefly outlining the problem containing a link to an official Scala 2 source explaining this.

I will also remove the bug label for this reason.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls509ftg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/1141,pekko,2149490910,1141,Discussion about restoring statefulMapConcat,JD557,1187242,João Costa,jdpc557@gmail.com,CLOSED,2024-02-22T16:46:19Z,2024-02-29T11:27:46Z,"I would like to open the discussion to restore `statefulMapConcat`, as a follow up to it's deprecation in https://github.com/apache/incubator-pekko/issues/601 and https://github.com/apache/incubator-pekko-http/issues/395#issuecomment-1916722960

I understand that it had problems regarding the `upstreamFinished`, but the `statefulMap`+`mapConcat` alternative does not seem a viable migration considering the extra allocations.

I believe this issue was also identified for pekko-http in https://github.com/apache/incubator-pekko-http/issues/395, which lead to https://github.com/apache/incubator-pekko-http/pull/462.

However, I find it odd that the fix is in pekko-http. It seems to me that something like this should be available to all pekko-streams users and be one of the recommended migrations.

Also, I don't find the behavior of `statefulMapConcat` regarding `upstreamFinished` that surprising. I think instead of a deprecation it would be enough to add a recommendation in the documentation to use `statefulMap` + `mapConcat` if one needs to keep the state when the upstream finishes.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls500dmm,pekko,1959909798,1141,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-22T17:19:14Z,2024-02-22T17:19:14Z,@JD557 We'll discuss it but be aware that we will not remove the statefulMapConcat method any time soon any way.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls500dmm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls500een,pekko,1959913383,1141,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-22T17:21:19Z,2024-02-22T17:21:19Z,"I know the problem, the only problem of the current implementation is the extra allocation of tuple, which is the same as mapAccumlate in fs2 and zio.

And after jit, jvm may allocates this object on stack instead of heap.

I would like to add same thing as the pr in http, but can't find a good name for now.

For the performance, in test zipwithindex migration, I saw performance boost.

I agree with you with most part but I don't think we should remove the deprecation.


And the allocation can be removed with a object instead of tuple, which is how the current java stream 's gather is implemented in Jdk22.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls500een/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5008xU,pekko,1960037460,1141,NA,JD557,1187242,João Costa,jdpc557@gmail.com,NA,2024-02-22T18:37:46Z,2024-02-22T18:37:46Z,"For reference, here are some benchmarks (based on the original ZIO Streams benchmarks): https://gist.github.com/JD557/251467aac30860dca88dc3e697dfb381

You can quickly run them with Scala CLI with `scala-cli --power --jmh https://gist.github.com/JD557/251467aac30860dca88dc3e697dfb381`

Here I compare an implementation using `scan`+`mapConcat` (`pekkoScan`), `statefulMapConcat` (`pekkoStatefulMapConcat`) and `statefulMap`+`mapConcat` (`pekkoStatefulMapMapConcat`)

The tests were run on an Apple M3 Max, using OpenJDK 21.0.2+13-LTS

Results:

```
Benchmark                                      (chunkSize)  (cols)  (rows)   Mode  Cnt   Score   Error  Units
CSVStreamBenchmarks.pekkoScan                         5000     100     100  thrpt    5  27.785 ± 0.080  ops/s
CSVStreamBenchmarks.pekkoStatefulMapConcat            5000     100     100  thrpt    5  72.419 ± 0.308  ops/s
CSVStreamBenchmarks.pekkoStatefulMapMapConcat         5000     100     100  thrpt    5  42.094 ± 0.744  ops/s
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5008xU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls501BJc,pekko,1960055388,1141,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-22T18:50:19Z,2024-02-22T18:50:19Z,"I will take care of it this weekend, we will definitely  come up with a solution 😀","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls501BJc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5038Op,pekko,1960821673,1141,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-23T07:00:47Z,2024-02-23T07:00:47Z,"So the quick fix seems just remove the deprecation, and add more detail log in 1.0.x.
And will need a new building block for this which will not introduce any allocation.

Otherwise:
```scala
  def statefulMap[S, T](create: () => S)(f: (S, Out) => (S, T), onComplete: S => Option[T]): Repr[T] =???

  def statefulMap[T](functionConstructor: () => Out => T): Repr[T] = ???
```

Will cause much confusing, and does not work too:(","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5038Op/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1141,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51eg6h,pekko,1970933409,1141,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-02-29T11:27:30Z,2024-02-29T11:27:30Z,"@JD557 Hi, the related change has been merged, thanks.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51eg6h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1148,https://api.github.com/repos/apache/pekko/issues/1148,pekko,2153790323,1148,Add address to FailureDetector ctor,nvollmar,919730,Nicolas Vollmar,,OPEN,2024-02-26T10:21:06Z,2024-02-26T10:21:06Z,"`PhiAccrualFailureDetector` uses a setter to accept the observed address for backwards compatibility reason.
This can be moved to the constructor with Pekko 2.0. 
Since this isn't something the normal Pekko user would implement ever do it should have minimal impact.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1157,https://api.github.com/repos/apache/pekko/issues/1157,pekko,2156087064,1157,AskPattern won't use refPrefix sometimes.,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2024-02-27T09:23:40Z,2024-02-28T09:10:40Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->
We use ActorPath to detect the source of the Actor. 
In my case, the actor is partly from SourceActor and partly from the temporary Actor produced by AskPattern. We want to ensure that this logic is correct through the unit test.

These unit test look like:

```diff
ActorRef<Object> sourceRef = spawn(echoBehavior, ""source"");
CompletionStage<Message> ask = AskPattern.ask(
        sourceRef,
        reply -> {
+           System.out.println(reply.toString());
            return new Message(reply);
        },
        Duration.ofSeconds(1),
        getSystem().scheduler()
);

Message reply = ask.toCompletableFuture().join();
Assert.assertTrue(reply.getActorRef().path().toString().contains(""source""));
```

As the title shows, when`messageFactory` lacks STDOUT code(which the line of diff shows), the unit test fails, and the path of ActorRef is: `pekko://test/temp/$a#0`

But after adding STDOUT into `messageFactory`, things turn to a different way: the unit test passed, and the path of ActorRef is `pekko://test/temp/source$a#0`


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1157/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1158,https://api.github.com/repos/apache/pekko/issues/1158,pekko,2156598539,1158,link validator: AbstractFunction2,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2024-02-27T13:27:37Z,2024-03-17T11:48:05Z,"the link validator for PRs is failing with:
```
## HTTP failure response
`[https://www.scala-lang.org/api/2.13.13/scala/runtime/AbstractFunction2.html`](https://www.scala-lang.org/api/2.13.13/scala/runtime/AbstractFunction2.html%60) status 404 Not Found
 - ../../../../../target/scala-2.13/unidoc/org/apache/pekko/cluster/index.html
 - ../../../../../target/scala-2.13/unidoc/org/apache/pekko/remote/index.html
``````
... it seems this problem also exists on the main branch. Did scala-lang change or did we miss it in a recent PR?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1158,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51Nz3V,pekko,1966554581,1158,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-27T13:28:43Z,2024-02-27T13:28:43Z,We've had to add link validator excludes for this in a few places.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51Nz3V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1158,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51N0xL,pekko,1966558283,1158,NA,pjfanning,11783444,PJ Fanning,,NA,2024-02-27T13:30:54Z,2024-02-27T13:30:54Z,"@raboof see https://github.com/apache/incubator-pekko/blob/main/scripts/link-validator.conf#L64

Looks like we need to upgrade the URLs to have 2.13.13 or find a way not to hardcode the version in the URL.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51N0xL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1158,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Wpjd,pekko,2002426077,1158,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-17T11:48:05Z,2024-03-17T11:48:05Z,I think this is fixed,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53Wpjd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/1162,pekko,2162446996,1162,EventStream documentation on Typed is required,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2024-03-01T02:12:57Z,2024-04-25T10:07:19Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/incubator-pekko-http/issues
 - Pekko Connectors: https://github.com/apache/incubator-pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/incubator-pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

Pekko has EventBus(low-level) and EventStream documentation on Classic: https://pekko.apache.org/docs/pekko/current/event-bus.html

But there is no documentation on typed at present.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51vEyE,pekko,1975274628,1162,NA,sfali,5824929,Syed Ali,,NA,2024-03-03T19:37:33Z,2024-03-03T19:37:33Z,"I can pick this, couple of question, what is the timeline to finish this? Will it be straight from Akka documentation of typed EventBus?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51vEyE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51vFso,pekko,1975278376,1162,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-03T19:52:32Z,2024-03-03T19:52:32Z,@sfali please do not copy anything from Akka. You can't take copyrighted text from another web site due to the legal implications.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls51vFso/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52i4A9,pekko,1988853821,1162,NA,sfali,5824929,Syed Ali,,NA,2024-03-11T16:25:38Z,2024-03-11T16:25:38Z,"Getting compilation on `Unsafe` that `sun.misc.Unsafe` not found, how to get around this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52i4A9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52jlJu,pekko,1989038702,1162,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-11T17:34:30Z,2024-03-11T17:34:30Z,"> Getting compilation on `Unsafe` that `sun.misc.Unsafe` not found, how to get around this?

What version of Java are you using? Java 11 is recommended for building Pekko. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52jlJu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1162,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52jn_Q,pekko,1989050320,1162,NA,sfali,5824929,Syed Ali,,NA,2024-03-11T17:39:11Z,2024-03-11T17:39:11Z,"I am using Java 17, let me switch to Java 11","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52jn_Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1180,https://api.github.com/repos/apache/pekko/issues/1180,pekko,2169284922,1180,Improve Migration Doc layout (main branch),pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-05T13:49:16Z,2024-03-18T09:30:08Z,"See https://pekko.apache.org/docs/pekko/snapshot/project/migration-guides.html

The 1.0 to 1.1 migration doc appears as a strange bullet point with a link at the end the existing 1.0 migration doc.

I would suggest that we should create a new top level migration page with a table of contents that includes the 1.0 migration doc and the 1.0 to 1.1 migration doc.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1180/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1180,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls518l6m,pekko,1978818214,1180,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-05T13:50:33Z,2024-03-05T13:50:33Z,Marking as high priority because it would be good to have this as part of the 1.1.0-M1 release.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls518l6m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1180,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KU5w,pekko,1999195760,1180,NA,naosense,2225426,哇呜哇呜呀咦耶,,NA,2024-03-15T08:52:16Z,2024-03-15T08:52:16Z,"If I understand correctly,  you want to create a new top level  page,  then points to [1.0 Migration Documentation](https://pekko.apache.org/docs/pekko/snapshot/project/migration-guides.html) and [1.0 to 1.1 Migration Documentation](https://pekko.apache.org/docs/pekko/snapshot/project/migration-guide-1.0.x-1.1.x.html)?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KU5w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1180,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KVqy,pekko,1999198898,1180,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-15T08:54:19Z,2024-03-15T08:54:19Z,"> If I understand correctly, you want to create a new top level page, then points to [1.0 Migration Documentation](https://pekko.apache.org/docs/pekko/snapshot/project/migration-guides.html) and [1.0 to 1.1 Migration Documentation](https://pekko.apache.org/docs/pekko/snapshot/project/migration-guide-1.0.x-1.1.x.html)?

Yes - I think that layout would be better than what we have in https://pekko.apache.org/docs/pekko/snapshot/project/migration-guides.html today.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53KVqy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1180,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aFET,pekko,2003325203,1180,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-18T09:30:08Z,2024-03-18T09:30:08Z,#1193 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aFET/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/1182,pekko,2173319173,1182,TcpDnsClient cannot recover if registration on TcpConnection times out,nvollmar,919730,Nicolas Vollmar,,CLOSED,2024-03-07T08:52:29Z,2024-05-07T11:23:09Z,"I uncovered this investigating cluster issues on our nightly deployment test. Since we started to use a low power cpu governor during the night we started seeing issues of a Pekko cluster forming during the nightly deployment.

I've tracked it down to the `TcpDnsClient` / `TcpConnection` initialization timing out, leaving it in a state it cannot recover from and never responding to any requests.

The `TcpOutgoingConnection` is connecting and responds with a `Tcp.Connected` message to the `TcpDnsClient`, which in turn registers itself on the connection again:
https://github.com/apache/incubator-pekko/blob/46e60a61fbabce5e3f36a408bfa3d1fb249eef44/actor/src/main/scala/org/apache/pekko/io/dns/internal/TcpDnsClient.scala#L48-L53


If that message arrives late, the `TcpOutgoingConnection` will stop itself and `TcpDnsClient` has no detection or handling for this case:

https://github.com/apache/incubator-pekko/blob/46e60a61fbabce5e3f36a408bfa3d1fb249eef44/actor/src/main/scala/org/apache/pekko/io/TcpConnection.scala#L104-L108

This is a very unusual case, but it happens almost every deployment for one or two pods when the system is in low power mode.

Proposed fix: `TcpDnsClient` must watch the connection and fail on termination to re-initialize (it is already handled by a backoff supervisor)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1182/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52OYKg,pekko,1983480480,1182,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-03-07T13:13:42Z,2024-03-07T13:13:42Z,"The message was sent to the connection immediately, but you observed that the message was late. 

I noticed that TcpOutgoingConnection can reply to TcpDnsClient after an exception(postStop). Is it possible that the terminated response of Connection is not received by TcpDnsClient in time due to the lack of active scheduling of low-power CPU?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52OYKg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52Oj4q,pekko,1983528490,1182,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-03-07T13:39:09Z,2024-03-07T13:39:09Z,The `TcpDnsClient` didn't receive anything as the `TcpOutgoingConnection` just does `context.stop(self)` in case of a timeout. The client then is basically dead and can't recover without restarting the actor system.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls52Oj4q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59A_Zt,pekko,2097411693,1182,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-05-07T04:13:41Z,2024-05-07T04:13:41Z,"@pjfanning Since we ran into that a couple of time now, I'd like to backport to 1.0","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59A_Zt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59C40v,pekko,2097909039,1182,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-07T09:54:33Z,2024-05-07T09:54:33Z,@nvollmar sure - could you create a cherry pick PR that targets the 1.0.x branch and add that new PR to the 1.0.3 milestone?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59C40v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1182,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59D56U,pekko,2098175636,1182,NA,nvollmar,919730,Nicolas Vollmar,,NA,2024-05-07T11:23:08Z,2024-05-07T11:23:08Z,"Sure, will do","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59D56U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1189,https://api.github.com/repos/apache/pekko/issues/1189,pekko,2186505941,1189,Feature request: Add Source#generate and iteratee methods.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-03-14T14:19:55Z,2024-05-06T19:22:22Z,"
```java
        final Source<String, NotUsed> idFlux = Source.unfold(NotUsed.notUsed(), state -> {
            try {
                return Optional.of(Pair.create(NotUsed.notUsed(), queue.take()));
            } catch (Throwable e) {
                errLogger.error(""failed to take connectId from queue"", e);
                return Optional.of(Pair.create(NotUsed.notUsed(), """"));
            }
        });
```

I think we can add something like `generate` for infinity stream and `iterate` with a predicate.
```scala
generate[T](f: () => T): Source[T, NotUsed] //infinite
iterate[T](seed:T, hasNext: T => Boolean, nextGenerator: T => T): Source[T, NotUsed] //complete when hasNext returns false.
iterate[T](seed:T,nextGenerator: T => T) : Source[T, NotUsed]  //infinite
```

This will be very useful in Javadsl.

related issue: https://github.com/reactor/reactor-core/issues/2236
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1189/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1189,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aZ2G,pekko,2003410310,1189,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-18T10:00:51Z,2024-03-18T10:00:51Z,@pjfanning @mdedetrich @Roiocam Wdyt about this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aZ2G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1189,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53asV0,pekko,2003486068,1189,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-18T10:21:28Z,2024-03-18T10:21:28Z,"not against this - just want to press on with 1.1.0-M1 - so if you target it to 1.1.0-M2, that is fine with me","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53asV0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1189,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53bZGh,pekko,2003669409,1189,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-18T11:30:51Z,2024-03-18T11:30:51Z,"Thanks, I will give this a try this weekend.
Update: have the code complete, but still need some document:)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53bZGh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1202,https://api.github.com/repos/apache/pekko/issues/1202,pekko,2190623471,1202,review Jackson 2.17 when issues are resolved,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-17T11:47:35Z,2024-07-25T09:36:56Z,"see https://github.com/apache/incubator-pekko-connectors/pull/574
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1202/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1202,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GGtJw,pekko,2249904752,1202,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-25T09:36:56Z,2024-07-25T09:36:56Z,#1318 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GGtJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1203,https://api.github.com/repos/apache/pekko/issues/1203,pekko,2190624219,1203,investigate memory issues in Scala Steward job,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-17T11:49:31Z,2024-04-23T15:03:52Z,"https://github.com/apache/incubator-pekko/actions/runs/8311378145
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1203,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57iYX6,pekko,2072610298,1203,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-23T15:03:46Z,2024-04-23T15:03:46Z,"This is done, close it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57iYX6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/1205,pekko,2191724446,1205,SubFlow's don't correctly propagate `Supervision.resumeStrategy`,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2024-03-18T09:49:35Z,2024-08-14T18:04:55Z,"In https://github.com/apache/incubator-pekko/pull/252 I made it so that we can set `SupervisionStrategy` rather than using `SubStreamCancelStrategy`. It turns out there is an existing test which was written as pending (so its currently disabled) to test this exact `SupervisionStrategy` functionality (specifically `SupervisionStrategy.resumingDecider` when an exception is thrown) when its adding in the future (which is now) i.e.

https://github.com/apache/incubator-pekko/blob/c44c0b7cbdab11d85176cfe062288fdcba16c56a/stream-tests/src/test/scala/org/apache/pekko/stream/scaladsl/FlowSplitAfterSpec.scala#L213-L262

When I try to enable the test by removing `pending` so the test runs it actually does not pass which means that the `SupervisionStrategy.resumingDecider` is not properly catching and suppressing the exception as its meant to do so.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1205/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aRqh,pekko,2003376801,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-18T09:50:42Z,2024-03-18T09:50:42Z,"So I set the 1.1.0-M1 milestone for this bug, will do my best to solve it by the time the `-M1` release is actually cut however if its not done by then can do it in a following `-M2` or full release.

It does however need to be solved by full 1.1.0 release","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls53aRqh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EI86q,pekko,2216939178,1205,NA,gwak,176766,,,NA,2024-07-09T08:29:44Z,2024-07-09T08:29:44Z,"Hi @mdedetrich,

@pjfanning and I just tested the 1.1 milestone release with **[playframework](https://github.com/playframework/playframework/pull/12662)**. We followed the migration guide and explicitly defined the supervision strategy when using the `splitWhen` function like so:

```scala
.splitWhen(_.isLeft)
.withAttributes(ActorAttributes.supervisionStrategy(Supervision.resumingDecider))
.prefixAndTail(1)
```

But when using the deprecated `SubstreamCancelStrategy` it works fine:

```scala
.splitWhen(SubstreamCancelStrategy.drain)(_.isLeft)
```

Is there something we're missing ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EI86q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EJDza,pekko,2216967386,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T08:41:05Z,2024-07-09T08:41:05Z,"@gwak So I still need to work on this, in the meantime I would recommend using the deprecated method as you described.

I just skimmed through the issue to recover some context, iirc the core issue is that in general `ActorAttributes` are not propagating where as in Pekko 1.0 and/or current pekko 1.1 deprecation functionality propagates the strategy in a different/more explicit way

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EJDza/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EJD8I,pekko,2216967944,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T08:41:19Z,2024-07-09T08:41:19Z,Re-opening this as it needs to be solved,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EJD8I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EKMzH,pekko,2217266375,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T10:24:48Z,2024-07-09T10:24:48Z,"@gwak So I am diving into this now and I think that I fixed this issue in https://github.com/apache/pekko/pull/1207 so things should be working as expected.

Reading your code example at surface level, maybe the problem is that you are not doing the equivalent of `.lift` which an be seen here https://github.com/apache/pekko/blob/689e30bbe97ba28080130df092372e529e941799/stream-tests/src/test/scala/org/apache/pekko/stream/scaladsl/FlowSplitAfterSpec.scala#L219  , you can see the definition of lift [here](https://github.com/apache/pekko/blob/689e30bbe97ba28080130df092372e529e941799/stream-tests/src/test/scala/org/apache/pekko/stream/scaladsl/FlowSplitAfterSpec.scala#L35) ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EKMzH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELDOT,pekko,2217489299,1205,NA,gwak,176766,,,NA,2024-07-09T12:15:08Z,2024-07-09T12:15:08Z,"@mdedetrich You were right, @pjfanning tried your suggestion in https://github.com/playframework/playframework/pull/12794 and tests are passing. Thanks!

So the final flow is something like :

```scala
...
.splitWhen(_.isLeft)
.prefixAndTail(1)
.map { /*...snip...*/ }
.concatSubstreams
.withAttributes(ActorAttributes.supervisionStrategy(Supervision.resumingDecider))
```

**And not** 

```scala
...
.splitWhen(_.isLeft)
.withAttributes(ActorAttributes.supervisionStrategy(Supervision.resumingDecider))
.prefixAndTail(1)
.map { /*...snip...*/ }
.concatSubstreams
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELDOT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELHuA,pekko,2217507712,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T12:20:59Z,2024-07-09T12:20:59Z,Perfect! Closing ticket,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELHuA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELPPD,pekko,2217538499,1205,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-09T12:28:24Z,2024-07-09T12:28:24Z,"@mdedetrich would you have time to review the Pekko 1.1 migration docs? Would it make sense to suggest that the SupervisionStrategy should be be defined after the concatSubstreams call (if any)?

https://pekko.apache.org/docs/pekko/1.1/migration/migration-guide-1.0.x-1.1.x.html

```
.splitWhen(_.isLeft)
.prefixAndTail(1)
.map { /*...snip...*/ }
.concatSubstreams
.withAttributes(ActorAttributes.supervisionStrategy(Supervision.resumingDecider))
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELPPD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELpaO,pekko,2217645710,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T12:52:02Z,2024-07-09T12:52:02Z,"Sure, I'll do this today","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ELpaO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1205,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EMucH,pekko,2217928455,1205,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-07-09T14:47:40Z,2024-07-09T14:47:40Z,PR created at https://github.com/apache/pekko/pull/1391,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EMucH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1213,https://api.github.com/repos/apache/pekko/issues/1213,pekko,2201618162,1213,Should we change the default blocking io dispatcher size?,He-Pin,501740,He-Pin(kerr),,OPEN,2024-03-22T03:23:38Z,2024-03-22T09:36:34Z,"Motivation:
The current default blocking io dispatcher is fixed size 16, I think it's too big.
![image](https://github.com/apache/incubator-pekko/assets/501740/4567619b-780e-4724-b3cb-0eced7af3fa1)

Better with a non-fixed-sized one?eg default to 1, and size up to 16 if needed. But yes, user can adjust this themself.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1213/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1213,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54FfZw,pekko,2014705264,1213,NA,laglangyue,35491928,Laglangyue,,NA,2024-03-22T09:36:33Z,2024-03-22T09:36:33Z,"I agree that it can be changed. And default value should be 16, because users can upgrade without being affected.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54FfZw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1217,https://api.github.com/repos/apache/pekko/issues/1217,pekko,2203798923,1217,stream-testkit tests fail with Scala 2.12 - release blocker,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-23T09:50:07Z,2024-03-23T11:39:06Z,"https://github.com/apache/pekko/actions/runs/8397881424/job/23001933349

Started failing about 2 days ago - possibly caused with a day or 2 of March 20.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1217/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1217,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MEwO,pekko,2016431118,1217,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-23T09:53:34Z,2024-03-23T09:53:34Z,@He-Pin you made recent changes to stream-testkit - it's possible that they are causing issues when run with Scala 2.12.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MEwO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1217,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MHYp,pekko,2016441897,1217,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-23T10:29:24Z,2024-03-23T10:29:24Z,Let't me check it.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MHYp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1219,https://api.github.com/repos/apache/pekko/issues/1219,pekko,2203832482,1219,fix CI build for PRs so it catches compile issues in stream-testkit,pjfanning,11783444,PJ Fanning,,OPEN,2024-03-23T11:20:55Z,2024-03-23T11:20:55Z,"see https://github.com/apache/pekko/issues/1217
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1219/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/1221,pekko,2203991685,1221,Genjavadoc plugin doesn't support scala 3.3.x,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-03-23T18:19:56Z,2024-03-27T01:18:39Z,"Should skip the doc in CI for now.




[error] (actor / update) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.genjavadoc:genjavadoc-plugin_3.3.3:0.19
[error]   Not found
[error]   Not found
[error]   not found: /home/runner/.ivy2/localcom.typesafe.genjavadoc/genjavadoc-plugin_3.3.3/0.19/ivys/ivy.xml
[error]   not found: https://repo1.maven.org/maven2/com/typesafe/genjavadoc/genjavadoc-plugin_3.3.3/0.19/genjavadoc-plugin_3.3.3-0.19.pom
[error] (protobuf-v3 / update) sbt.librarymanagement.ResolveException: Error downloading com.typesafe.genjavadoc:genjavadoc-plugin_3.3.3:0.19
[error]   Not found
[error]   Not found
[error]   not found: /home/runner/.ivy2/localcom.typesafe.genjavadoc/genjavadoc-plugin_3.3.3/0.19/ivys/ivy.xml
[error]   not found: https://repo1.maven.org/maven2/com/typesafe/genjavadoc/genjavadoc-plugin_3.3.3/0.19/genjavadoc-plugin_3.3.3-0.19.pom
[error] Total time: 6 s, completed Mar 23, 2024, 6:11:01 PM","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1221/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmJK,pekko,2016567882,1221,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-23T18:23:19Z,2024-03-23T18:23:19Z,"Looks like that plugin has never supported scala 3.

https://mvnrepository.com/artifact/com.typesafe.genjavadoc/genjavadoc-plugin","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmJK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmnU,pekko,2016569812,1221,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-23T18:30:58Z,2024-03-23T18:30:58Z,"> Looks like that plugin has never supported scala 3.
> 
> https://mvnrepository.com/artifact/com.typesafe.genjavadoc/genjavadoc-plugin

Yes, I think that plugin may need be  rewritten with Tasty query? I think we can skip it on 3.3., for now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54MmnU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NRVf,pekko,2016744799,1221,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-24T09:14:43Z,2024-03-24T09:14:43Z,"I would prefer if https://github.com/apache/pekko/pull/1226 was done differently. Instead of nor running the `sbt doc` build with Scala 3.3, we could run it but set genjavadoc to false for just that version of Scala.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NRVf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NTxK,pekko,2016754762,1221,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-24T09:52:55Z,2024-03-24T09:52:55Z,"> I would prefer if #1226 was done differently. Instead of nor running the `sbt doc` build with Scala 3.3, we could run it but set genjavadoc to false for just that version of Scala.

Agreed","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NTxK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1221,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54gXEK,pekko,2021749002,1221,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-27T01:18:39Z,2024-03-27T01:18:39Z,this seems fixed,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54gXEK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1227,https://api.github.com/repos/apache/pekko/issues/1227,pekko,2204162563,1227,failed: ClusterActorLoggingSpec,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-03-24T03:34:27Z,2024-03-24T03:36:42Z,"```
[info] - must include host and port in sourceActorSystem mdc entry *** FAILED *** (20 seconds, 11 milliseconds)
[info]   java.lang.AssertionError: Timeout (20 seconds) waiting for 1 messages on LoggingTestKitImpl(1,Some(INFO),None,None,Some(Starting),None,None,Map(),true,Some(org.apache.pekko.cluster.typed.ClusterActorLoggingSpec$$Lambda$1692/0x0000000800ae5840@235f8fcf)).
[info]   at org.apache.pekko.actor.testkit.typed.internal.LoggingTestKitImpl.expect(LoggingTestKitImpl.scala:113)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.$anonfun$new$2(ClusterActorLoggingSpec.scala:63)
[info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1240)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture(LogCapturing.scala:79)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture$(LogCapturing.scala:77)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.withFixture(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1238)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1250)
[info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1250)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1232)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.runTest(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1309)
[info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[info]   at scala.collection.immutable.List.foreach(List.scala:334)
[info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[info]   at scala.collection.immutable.List.foreach(List.scala:334)
[info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1309)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1308)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.runTests(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.Suite.run(Suite.scala:1114)
[info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[info]   at org.apache.pekko.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit.org$scalatest$BeforeAndAfterAll$$super$run(ScalaTestWithActorTestKit.scala:41)
[info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1354)
[info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1354)
[info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1352)
[info]   at org.apache.pekko.cluster.typed.ClusterActorLoggingSpec.run(ClusterActorLoggingSpec.scala:40)
[info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[info]   at java.base/java.lang.Thread.run(Thread.java:829)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1227/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1227,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NBu_,pekko,2016680895,1227,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-24T03:34:50Z,2024-03-24T03:34:50Z,eg: https://github.com/apache/pekko/actions/runs/8405460323/job/23018209706,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NBu_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1227,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NBzd,pekko,2016681181,1227,NA,pjfanning,11783444,PJ Fanning,,NA,2024-03-24T03:36:36Z,2024-03-24T03:36:36Z,we already have #795,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54NBzd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1228,https://api.github.com/repos/apache/pekko/issues/1228,pekko,2204183144,1228,failed: RemoveInternalClusterShardingDataSpec,He-Pin,501740,He-Pin(kerr),,OPEN,2024-03-24T05:05:52Z,2024-03-24T05:06:28Z,"https://github.com/apache/pekko/actions/runs/8406516825/job/23020480713?pr=1225#step:7:26228

```
<-- [RemoveOnePersistenceId must remove all events and snapshots] End of log messages of test that [Failed(org.scalatest.exceptions.TestFailedException: true did not equal false)]
[03-24 03:58:13.285] [info] - must remove all events and snapshots *** FAILED *** (29 milliseconds)
[03-24 03:58:13.285] [info]   true did not equal false (RemoveInternalClusterShardingDataSpec.scala:193)
[03-24 03:58:13.285] [info]   org.scalatest.exceptions.TestFailedException:
[03-24 03:58:13.285] [info]   at org.scalatest.matchers.MatchersHelper$.indicateFailure(MatchersHelper.scala:392)
[03-24 03:58:13.285] [info]   at org.scalatest.matchers.should.Matchers$AnyShouldWrapper.should(Matchers.scala:7469)
[03-24 03:58:13.285] [info]   at org.apache.pekko.cluster.sharding.RemoveInternalClusterShardingDataSpec.$anonfun$new$9(RemoveInternalClusterShardingDataSpec.scala:193)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKitBase.within(TestKit.scala:429)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKitBase.within$(TestKit.scala:416)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKit.within(TestKit.scala:982)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKitBase.within(TestKit.scala:444)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKitBase.within$(TestKit.scala:444)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.TestKit.within(TestKit.scala:982)
[03-24 03:58:13.285] [info]   at org.apache.pekko.cluster.sharding.RemoveInternalClusterShardingDataSpec.$anonfun$new$8(RemoveInternalClusterShardingDataSpec.scala:177)
[03-24 03:58:13.285] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[03-24 03:58:13.285] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[03-24 03:58:13.285] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[03-24 03:58:13.285] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[03-24 03:58:13.285] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[03-24 03:58:13.285] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.WithLogCapturing.$anonfun$withFixture$1(WithLogCapturing.scala:46)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.EventFilter.intercept(TestEventListener.scala:129)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.WithLogCapturing.withFixture(WithLogCapturing.scala:44)
[03-24 03:58:13.285] [info]   at org.apache.pekko.testkit.WithLogCapturing.withFixture$(WithLogCapturing.scala:31)
[03-24 03:58:13.285] [info]   at org.apache.pekko.cluster.sharding.RemoveInternalClusterShardingDataSpec.withFixture(RemoveInternalClusterShardingDataSpec.scala:110)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
[03-24 03:58:13.286] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[03-24 03:58:13.286] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[03-24 03:58:13.286] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
[03-24 03:58:13.286] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
[03-24 03:58:13.286] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[03-24 03:58:13.286] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[03-24 03:58:13.286] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
[03-24 03:58:13.286] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
[03-24 03:58:13.286] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
[03-24 03:58:13.286] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
[03-24 03:58:13.286] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[03-24 03:58:13.286] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[03-24 03:58:13.286] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[03-24 03:58:13.286] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
[03-24 03:58:13.286] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[03-24 03:58:13.286] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[03-24 03:58:13.286] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[03-24 03:58:13.286] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[03-24 03:58:13.286] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[03-24 03:58:13.286] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[03-24 03:58:13.286] [info]   at java.lang.Thread.run(Thread.java:750)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1228/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1229,https://api.github.com/repos/apache/pekko/issues/1229,pekko,2204240270,1229,failed : mustBeAbleToUseMapWithAutoCloseableResource ,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-03-24T08:20:49Z,2024-03-30T12:20:32Z,"https://github.com/apache/pekko/actions/runs/8407468790/job/23022464371#step:7:21794
@injae-kim Would you like to take a look, thanks.

```scala
- mustBeAbleToUseMapWithAutoCloseableResource *** FAILED ***
[03-24 07:08:16.265] [info]   java.lang.AssertionError: expected:<0> but was:<1>
[03-24 07:08:16.265] [info]   at org.junit.Assert.fail(Assert.java:89)
[03-24 07:08:16.265] [info]   at org.junit.Assert.failNotEquals(Assert.java:835)
[03-24 07:08:16.265] [info]   at org.junit.Assert.assertEquals(Assert.java:647)
[03-24 07:08:16.265] [info]   at org.junit.Assert.assertEquals(Assert.java:633)
[03-24 07:08:16.265] [info]   at org.apache.pekko.stream.javadsl.FlowTest.mustBeAbleToUseMapWithAutoCloseableResource(FlowTest.java:253)
[03-24 07:08:16.265] [info]   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[03-24 07:08:16.265] [info]   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[03-24 07:08:16.265] [info]   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[03-24 07:08:16.265] [info]   at java.lang.reflect.Method.invoke(Method.java:498)
[03-24 07:08:16.265] [info]   at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
[03-24 07:08:16.265] [info]   at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[03-24 07:08:16.265] [info]   at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
[03-24 07:08:16.266] [info]   at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
[03-24 07:08:16.266] [info]   at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
[03-24 07:08:16.266] [info]   at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
[03-24 07:08:16.266] [info]   at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
[03-24 07:08:16.266] [info]   at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
[03-24 07:08:16.266] [info]   at org.junit.rules.RunRules.evaluate(RunRules.java:20)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
[03-24 07:08:16.266] [info]   at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
[03-24 07:08:16.266] [info]   at org.junit.runners.Suite.runChild(Suite.java:128)
[03-24 07:08:16.266] [info]   at org.junit.runners.Suite.runChild(Suite.java:27)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
[03-24 07:08:16.267] [info]   at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
[03-24 07:08:16.267] [info]   at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
[03-24 07:08:16.267] [info]   at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
[03-24 07:08:16.267] [info]   at org.junit.runner.JUnitCore.run(JUnitCore.java:105)
[03-24 07:08:16.268] [info]   at org.junit.runner.JUnitCore.run(JUnitCore.java:94)
[03-24 07:08:16.268] [info]   at org.scalatestplus.junit.JUnitSuiteLike.run(JUnitSuiteLike.scala:241)
[03-24 07:08:16.268] [info]   at org.scalatestplus.junit.JUnitSuiteLike.run$(JUnitSuiteLike.scala:229)
[03-24 07:08:16.268] [info]   at org.scalatestplus.junit.JUnitSuite.run(JUnitSuite.scala:71)
[03-24 07:08:16.268] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[03-24 07:08:16.268] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[03-24 07:08:16.268] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[03-24 07:08:16.268] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[03-24 07:08:16.268] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[03-24 07:08:16.268] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[03-24 07:08:16.268] [info]   at java.lang.Thread.run(Thread.java:750)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1229/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1229,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54Rwyl,pekko,2017922213,1229,NA,injae-kim,34854527,injae kim,injae.kim.dev@gmail.com,NA,2024-03-25T12:44:34Z,2024-03-25T12:44:34Z,oh I'll check it within this weekend. thank you! :),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54Rwyl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1229,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls544S9w,pekko,2028023664,1229,NA,injae-kim,34854527,injae kim,injae.kim.dev@gmail.com,NA,2024-03-30T11:44:08Z,2024-03-30T11:44:08Z,"
```java
  @Test
  public void mustBeAbleToUseMapWithAutoCloseableResource() {
    final TestKit probe = new TestKit(system);
    final AtomicInteger closed = new AtomicInteger();
    Source.from(Arrays.asList(""1"", ""2"", ""3""))
        .via(
            Flow.of(String.class)
                .mapWithResource(
                    () -> (AutoCloseable) closed::incrementAndGet, (resource, elem) -> elem))
        .runWith(Sink.foreach(elem -> probe.getRef().tell(elem, ActorRef.noSender())), system);

    probe.expectMsgAllOf(""1"", ""2"", ""3"");

    // FAILED: AssertionError: expected:<0> but was:<1>
    Assert.assertEquals(closed.get(), 1); // 👈👈 clean-up may not be processed yet here!
  }
```

I found root cause and create simple fix PR https://github.com/apache/pekko/pull/1241 🚀","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls544S9w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1232,https://api.github.com/repos/apache/pekko/issues/1232,pekko,2204281930,1232,Add new deleteObject functions to Persistence API,pjfanning,11783444,PJ Fanning,,CLOSED,2024-03-24T10:23:29Z,2024-03-24T11:43:35Z,"See https://github.com/apache/pekko-persistence-jdbc/pull/156 for background.

The idea is that `Future[Done]` isn't informative enough as a return type.

Ideally any new functions should default to calling the existing deleteObject API functions so that we don't force every Persistence implementation to uptake it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1232/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/1237,pekko,2213067681,1237,Declare Java 8 support deprecated,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-03-28T12:08:54Z,2024-03-29T10:09:16Z,"If we declare Java 8 support deprecated in/before Pekko 1.1.0, we give ourselves the option to remove it in Pekko 1.2.0 (in the spirit of https://pekko.apache.org/docs/pekko/current/common/binary-compatibility-rules.html#when-will-a-deprecated-method-be-removed-entirely).

Depending on feedback we might still decide to keep supporting Java 8 in 1.2.0, but I think deprecating it sends the right message, and it's good to have the option.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54tS-Y,pekko,2025140120,1237,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-28T13:05:30Z,2024-03-28T13:05:30Z,"Maybe after 1.2.0 ? IIRC, @mdedetrich said they are using Java 8.

We can starting remove deprecated things in 1.2.0 and drop Java 8 （Scala 2.12) support in 1.3.0

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54tS-Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54vZNl,pekko,2025689957,1237,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-28T16:57:42Z,2024-03-28T16:57:42Z,"The original idea was to drop Java 8 support in 2.0.x, as it is both considered a breaking change and there are also some significant users of Pekko that rely on it.

We can bring it up again on the mailing list, but last time we did it we got pushback","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54vZNl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54vjpx,pekko,2025732721,1237,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-28T17:18:44Z,2024-03-28T17:18:44Z,"I don't know much about others, but at my company, where only 13% application running with Java 11, so we have to publish our internal libraries with `<release>8</release>`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54vjpx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54z20b,pekko,2026859803,1237,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-29T08:22:19Z,2024-03-29T08:22:19Z,"> The original idea was to drop Java 8 support in 2.0.x, as it is both considered a breaking change and there are also some significant users of Pekko that rely on it.
> 
> We can bring it up again on the mailing list, but last time we did it we got pushback

Could you link to this pushback on https://lists.apache.org/list.html?dev@pekko.apache.org or similar? I searched but couldn't find this thread.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54z20b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54z7kQ,pekko,2026879248,1237,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-29T08:36:51Z,2024-03-29T08:36:51Z,"> Could you link to this pushback on https://lists.apache.org/list.html?dev@pekko.apache.org or similar? I searched but couldn't find this thread.

https://lists.apache.org/thread/83xmcls29opo3o8q3mwdhdpqc6bvf69c

Note that at the time I pushed for 1.2.x but since then we ended up adopting/following semver so dropping it in Pekko 2.x.x seems more appropriate?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54z7kQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540Cvq,pekko,2026908650,1237,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-29T09:00:59Z,2024-03-29T09:00:59Z,"> > Could you link to this pushback on https://lists.apache.org/list.html?dev@pekko.apache.org or similar? I searched but couldn't find this thread.
> 
> https://lists.apache.org/thread/83xmcls29opo3o8q3mwdhdpqc6bvf69c

Thanks for the reference, that really helps.
 
> Note that at the time I pushed for 1.2.x but since then we ended up adopting/following semver

small sidebar/rant: I notice that in Pekko it seems relatively common for people to make statements like ""it was already decided that X"", without linking to the place where that decision was made or documented. I like to think that I'm following Pekko relatively closely, but even for me that makes things hard/frustrating to follow - like now I'm digging through email archives again and none of https://lists.apache.org/list?private@pekko.apache.org, https://lists.apache.org/list?private@pekko.apache.org or https://lists.apache.org/list?private@pekko.apache.org seem to have particularly relevant hits for 'semver'. I think it would be really good, both for future maintenance and for attracting/retaining new/casual contributors, to make more of a habit of adding relevant links to such statements.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540Cvq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540Z4N,pekko,2027003405,1237,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-03-29T09:57:51Z,2024-03-29T09:57:51Z,"> small sidebar/rant: I notice that in Pekko it seems relatively common for people to make statements like ""it was already decided that X"", without linking to the place where that decision was made or documented. I like to think that I'm following Pekko relatively closely, but even for me that makes things hard/frustrating to follow - like now I'm digging through email archives again and none of https://lists.apache.org/list?private@pekko.apache.org, https://lists.apache.org/list?private@pekko.apache.org or https://lists.apache.org/list?private@pekko.apache.org seem to have particularly relevant hits for 'semver'. I think it would be really good, both for future maintenance and for attracting/retaining new/casual contributors, to make more of a habit of adding relevant links to such statements.

Agreed and apologies for being part of the habit. For me personally I am not that fond/used of mailing lists as a form of discussion as its very hard to search/organize/link (as is evidenced) and so I take the lazy way out (I would go as far as to argue that mailing lists are one of the most impractical ways to communite/organize software projects but thats my opinion). I personally have a preference for doing such discussions using github issues/discussions as you can do things like make a checklist/wiki of relevant discussions so we can easily refer to big decision topics (such as SemVer, dropping JDK8 etc etc)

The issue is that it then it becomes unclear as to whether a discussion should occur on a mailing list or not (as far as I can tell any non trivial decision should occur on mailing list as a vote but I may be wrong here). We can also explore creating a PIP (Pekko Improvement Proposal) process so design guidelines/goals are centralized in one spot with a clear sense of direction rather than discussions being made in various places","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540Z4N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1237,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540dg6,pekko,2027018298,1237,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-03-29T10:09:15Z,2024-03-29T10:09:15Z,"> apologies for being part of the habit

No problem of course, not trying to point fingers :)

> doing such discussions using github issues/discussions

Yeah, references to issues/PRs/discussions/wikis/etc are also useful - while those media have their advantages, none of them are particularly easy to find :)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls540dg6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/1238,pekko,2213786075,1238,Feature request: Add `Source.multi` method,He-Pin,501740,He-Pin(kerr),,OPEN,2024-03-28T17:41:03Z,2024-04-06T08:56:52Z,"Motivation:

There are many `Source.from(Arrays.asList(...))` in Java, I think we can add something like `Source.multi(...)` which work as the `Flux.Just(T ...t)`.

Result:
Replace `Source.from(Arrays.asList(1,2,3))` to `Source.multi(1,2,3))`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54yS0g,pekko,2026450208,1238,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-03-29T01:39:11Z,2024-03-29T01:39:11Z,"I would prefer overloading `Source.from(T...)`, or like Java Stream API has `Source.of(T)` and `Source.of(T...)`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54yS0g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zJW7,pekko,2026673595,1238,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-29T05:23:41Z,2024-03-29T05:23:41Z,"I'm not sure about this, `Source.from(T ...t) ` may cause user to wonder does the stream emits ` T1, T2, T3 ...` or  just a `[T1, T2，T3 ...]` array element. I think that's why there is a `Source.single` for explicit.

So：
- `Source.single` for a single element.
- `Source.multi` for many elements

Which is a little verbos  but very clear","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zJW7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zPud,pekko,2026699677,1238,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-03-29T05:48:39Z,2024-03-29T05:48:39Z,Fair to me. It will be easier to use on Java.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zPud/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zbQ5,pekko,2026746937,1238,NA,laglangyue,35491928,Laglangyue,,NA,2024-03-29T06:28:20Z,2024-03-29T06:28:20Z,"I vote +1 to `Source.of`, I like to use `Source.of(1)` and `Source.of(1, 2, 3)`
`Source.multi(1)` equals  `Source.single(1)` , so `Source.multi(1)` just emit one, it conveyed an erroneous semantics","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls54zbQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls541FCv,pekko,2027180207,1238,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-03-29T12:28:46Z,2024-03-29T12:28:46Z,"How about `Source.elements(T ...t)` ? `of` will cause real trouble at Work when you need to cooperate with your work-mate, trust me.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls541FCv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls541ax4,pekko,2027269240,1238,NA,laglangyue,35491928,Laglangyue,,NA,2024-03-29T13:45:28Z,2024-03-29T13:45:28Z,"> How about `Source.elements(T ...t)` ? `of` will cause real trouble at Work when you need to cooperate with your work-mate, trust me.

okey","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls541ax4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1238,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55jwVW,pekko,2039416150,1238,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-05T10:12:09Z,2024-04-05T10:12:09Z,"I just checked https://github.com/smallrye/smallrye-mutiny, which is using `items(...)` 
```java
Multi.createFrom().items(1, 2, 3, 4, 5)
        .onItem().transform(i -> i * 2)
        .select().first(3)
        .onFailure().recoverWithItem(0)
        .subscribe().with(System.out::println);
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55jwVW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/1253,pekko,2228561677,1253,Scala Steward is failing due to heap space issue,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2024-04-05T18:11:42Z,2024-04-10T09:08:33Z,See https://github.com/scala-steward-org/scala-steward-action/issues/591 for upstream issue,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1253/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p0tN,pekko,2041006925,1253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-06T07:48:10Z,2024-04-06T07:48:10Z,"Re-opening because its still failing, @He-Pin see https://github.com/apache/pekko/actions/runs/8579695494/job/23514953375","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p0tN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1Di,pekko,2041008354,1253,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-06T07:54:23Z,2024-04-06T07:54:23Z,should we use `./` ?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1Di/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1JI,pekko,2041008712,1253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-06T07:55:58Z,2024-04-06T07:55:58Z,"I have no idea, but it does appear the context directory is different.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1JI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1NQ,pekko,2041008976,1253,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-06T07:57:06Z,2024-04-06T07:57:06Z,maybe I can add a pwd before that,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1NQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1fv,pekko,2041010159,1253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-06T08:02:19Z,2024-04-06T08:02:19Z,"> maybe I can add a pwd before that

Create a PR, I'll approve ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p1fv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p10o,pekko,2041011496,1253,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-06T08:06:30Z,2024-04-06T08:06:30Z,"> maybe I can add a pwd before that

Actually I think you can just directly pass the args into the github action, let me have a look","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55p10o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1253,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls56AljD,pekko,2046974147,1253,NA,pjfanning,11783444,PJ Fanning,,NA,2024-04-10T09:08:32Z,2024-04-10T09:08:32Z,I think this is fixed,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls56AljD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1264,https://api.github.com/repos/apache/pekko/issues/1264,pekko,2229149028,1264,Feature request: Using SIMD for byte search,He-Pin,501740,He-Pin(kerr),,OPEN,2024-04-06T08:51:00Z,2024-04-08T08:43:17Z,"Motivation:
When reading the code in https://github.com/apache/pekko/pull/1247 , I recall that we can improve performance with SIDM.
related blog:  https://richardstartin.github.io/posts/finding-bytes

and for reference in Netty: https://github.com/netty/netty/pull/10737

Would you like to take a look at this too @JD557

```java
int position = firstInstance(getWord(new byte[]{1, 2, 0, 3, 4, 10, (byte)'\n', 5}, 0), compilePattern((byte)'\n');
...

private static long compilePattern(byte byteToFind) {
    long pattern = byteToFind & 0xFFL;
    return pattern
        | (pattern << 8)
        | (pattern << 16)
        | (pattern << 24)
        | (pattern << 32)
        | (pattern << 40)
        | (pattern << 48)
        | (pattern << 56);
}

private static int firstInstance(long word, long pattern) {
    long input = word ^ pattern;
    long tmp = (input & 0x7F7F7F7F7F7F7F7FL) + 0x7F7F7F7F7F7F7F7FL;
    tmp = ~(tmp | input | 0x7F7F7F7F7F7F7F7FL);
    return Long.numberOfLeadingZeros(tmp) >>> 3;
}
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1264/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1264,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55r7nA,pekko,2041559488,1264,NA,samueleresca,8921095,Samuele Resca,samuele.resca@gmail.com,NA,2024-04-07T18:46:40Z,2024-04-07T18:46:40Z,@He-Pin Thanks for sharing the blog post 😄. Interesting stuff,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55r7nA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1264,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55r-ps,pekko,2041571948,1264,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-07T19:03:51Z,2024-04-07T19:03:51Z,"> @He-Pin Thanks for sharing the blog post 😄. Interesting stuff

Yes, but have no time to test it locally.  with it, a single loop will test 8 bytes.

But without the vector api that what we can do now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55r-ps/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1264,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55t7nD,pekko,2042083779,1264,NA,laglangyue,35491928,Laglangyue,,NA,2024-04-08T07:49:14Z,2024-04-08T07:49:14Z,so cool,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55t7nD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1264,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55uV-I,pekko,2042191752,1264,NA,JD557,1187242,João Costa,jdpc557@gmail.com,NA,2024-04-08T08:43:16Z,2024-04-08T08:43:16Z,"> Would you like to take a look at this too @JD557

Unfortunately, I don't think I'll have capacity to look into this in the near future. Also, my knowledge of SIMD is pretty limited.

Having said that:

> But without the vector api that what we can do now.

I think there's value in first trying something that is *not* using the Vector API (like the code suggested above). That way Pekko can keep supporting old Java versions, as well as being easier to cross compile to JS and Native.

Hopefully that would hit the autovectorizaton logic in some of those platforms, but I haven't tested that 😅 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55uV-I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1268,https://api.github.com/repos/apache/pekko/issues/1268,pekko,2229196969,1268,Feature request: Add retry with predicate,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-04-06T11:15:33Z,2024-04-23T12:34:18Z,"The current retry in pekko will trigger the retry when the future completes with an exception, we may not want to retry for some exception/ value, where the `shouldRetryPredicate` can be a `(value,throwable) => Boolean`.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1268/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1270,https://api.github.com/repos/apache/pekko/issues/1270,pekko,2230157988,1270,Mark some internal sealed trait @DoNotInherit,He-Pin,501740,He-Pin(kerr),,OPEN,2024-04-08T03:04:14Z,2024-04-24T19:42:06Z,"There are classes is not marked with `@DoNotInherent`, then Java user may extends that classes. We should mark it with `@DoNotInherent`. 

And there are some classes should be annotated with `@InternalApi`.

refs: https://github.com/apache/pekko-connectors/pull/588","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1270/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1270,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55wAAK,pekko,2042626058,1270,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-08T12:31:33Z,2024-04-08T12:31:33Z,"Is `@DoNotInherent` necessary if the class is final, that is already implied?

Typically `@ DoNotInherent` is used for classes which can be extended but only for private cases","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55wAAK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1270,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55wBgt,pekko,2042632237,1270,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-08T12:34:23Z,2024-04-08T12:34:23Z,"no, I mean we should mark on sealed trait and sealed abstract class","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55wBgt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1270,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55xW9t,pekko,2042982253,1270,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-04-08T14:56:32Z,2024-04-08T14:56:32Z,"> no, I mean we should mark on sealed trait and sealed abstract class

That makes perfect sense, :+1 from me","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls55xW9t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1289,https://api.github.com/repos/apache/pekko/issues/1289,pekko,2262046224,1289,add scala predicate support for retries,pjfanning,11783444,PJ Fanning,,CLOSED,2024-04-24T19:39:47Z,2024-04-24T20:14:30Z,"Scala function support for https://github.com/apache/pekko/pull/1269 as well as the Java functions supported in 1269 (BiPredicate).

@kerr is this issue valid? I'm not saying this is urgent, I am just raising it for awareness.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1289/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1289,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uSPK,pekko,2075730890,1289,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-24T19:54:37Z,2024-04-24T19:54:37Z,"I think it's currently supported,  does I miss anything ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uSPK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1289,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uT63,pekko,2075737783,1289,NA,pjfanning,11783444,PJ Fanning,,NA,2024-04-24T19:59:06Z,2024-04-24T19:59:06Z,"ok - I can see that some code in 1269 uses Scala Functions (`shouldRetry: (Something, Throwable) => throwable`)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uT63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1289,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uaL2,pekko,2075763446,1289,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-04-24T20:14:29Z,2024-04-24T20:14:29Z,"I think this should be more useful, because we have something like Result[T] as rpc result at work.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls57uaL2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1291,https://api.github.com/repos/apache/pekko/issues/1291,pekko,2262235064,1291,Links validation job fails due to broken javadoc link,c00ler,1210272,Alexey Venderov,,CLOSED,2024-04-24T21:42:04Z,2024-04-25T09:03:58Z,"Link Validator [jobs](https://github.com/apache/pekko/actions/workflows/link-validator.yml) in pekko project are failing due to a broken link in the documentation. 

Javadoc for logback `AsyncAppender` was moved to the new url https://logback.qos.ch/apidocs/ch.qos.logback.classic/ch/qos/logback/classic/AsyncAppender.html (now also includes a java module name)

<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/pekko-http/issues
 - Pekko Connectors: https://github.com/apache/pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1291/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1298,https://api.github.com/repos/apache/pekko/issues/1298,pekko,2266443459,1298,add doc changes for DurableState deleteObject,pjfanning,11783444,PJ Fanning,,CLOSED,2024-04-26T20:15:04Z,2024-05-21T15:16:04Z,"In pekko 1.1, we are encouraging libs to have a failed future if `deleteObject(persistenceId, revision)` doesn't delete rows.

https://github.com/apache/pekko/pull/1271","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1298/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1298,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58vbLV,pekko,2092806869,1298,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-03T11:20:49Z,2024-05-03T11:20:49Z,"@kerr @Roiocam @nvollmar the only mention in our existing docs for DurableState persistence about deletes is

https://pekko.apache.org/docs/pekko/current/typed/durable-state/persistence.html#effects-and-side-effects

I don't know much about Pekko Persistence but this does not appear to relate to the use of the 'deleteObject' API. See https://github.com/apache/pekko/pull/1271. I don't feel especially well qualified to describe the [JdbcDurableStateStore](https://github.com/apache/pekko-persistence-jdbc/blob/main/core/src/main/scala/org/apache/pekko/persistence/jdbc/state/scaladsl/JdbcDurableStateStore.scala) API.

Maybe it is enough to just release note the change in #1271 and rely on the Javadoc/Scaladoc for the JdbcDurableStateStore API.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls58vbLV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1298,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls584CME,pekko,2095063812,1298,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-05-06T01:45:02Z,2024-05-06T01:45:02Z,"I will say it is not the user API, so we don't have to update the documents related to Persistence.

 we can update the plugin documents in the https://pekko.apache.org/docs/pekko/current/persistence-journals.html. but it also does not contain `durable store`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls584CME/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1298,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls584iBN,pekko,2095194189,1298,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-06T04:50:48Z,2024-05-06T04:50:48Z,We can only update the how to implement a persistent plug-in part.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls584iBN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1301,https://api.github.com/repos/apache/pekko/issues/1301,pekko,2268598696,1301,[Feature] Utility class used for creating Actor.,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-04-29T09:54:14Z,2024-04-29T09:54:14Z,"<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/pekko-http/issues
 - Pekko Connectors: https://github.com/apache/pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/pekko-persistence-cassandra/issues
 - ...

Please explain your use case precisely, and if possible provide an example snippet.

Thanks for contributing!
-->

## Motivation 

In typed actor, if we want to create an actor, we have to use code like this:

```java
  CompletionStage<ActorRef<MyType>> future =  AskPattern.<SpawnProtocol.Command, ActorRef<MyType>>ask(
                                system,
                                reply ->
                                        new SpawnProtocol.Spawn<>(
                                                MyType.createBehavior(),
                                                ""name"",
                                                Props.empty(),
                                                reply),
                                Duration.ofSeconds(3),
                                system.scheduler())

ActorRef<MyType> actorRef = future.toCompletableFuture().join();
```

for comparison, in classic we have:


```java
Props props = Props.create(MyType.class, ()-> new MyType()).withDispatcher(""dispatcher"");
ActorRef actorRef = actorSystem.actorOf(props, ""name"");
```

Can we wrapper those ask into utility class like this?


```java
  public interface SpawnUtility {

        <T> ActorRef<T> spawn(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior, String name, Props props);

        <T> ActorRef<T> spawn(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior, String name);

        <T> ActorRef<T> spawn(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior);

        <T> CompletionStage<ActorRef<T>> spawnAsync(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior, String name, Props props);

        <T> CompletionStage<ActorRef<T>> spawnAsync(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior, String name);

        <T> CompletionStage<ActorRef<T>> spawnAsync(ActorSystem<SpawnProtocol.Command> spawnableSystem, Behavior<T> behavior);

    }

    @Test
    public void spawnTest(){
        ActorSystem<SpawnProtocol.Command> spawnableSystem = null;
        SpawnUtility utility = null;

        ActorRef<MyType> actorRef = utility.spawn(spawnableSystem, MyType.createBehavior(), ""name"");
        actorRef.tell(null);
    }
```




","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1301/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1309,https://api.github.com/repos/apache/pekko/issues/1309,pekko,2277556128,1309,Move link validator to nightly/weekly job,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-05-03T12:14:07Z,2024-05-03T12:14:07Z,"The link validator is currently run on PR validation, however it is far too susceptible for intermittent failures not caused by the PR in question.

We should probably move it to a nightly/weekly job. I guess the main question is how do we make sure we actually notice it when this job starts failing? Perhaps it should email the dev list?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1311,https://api.github.com/repos/apache/pekko/issues/1311,pekko,2279112586,1311,handle the case where `DeviceTerminated.groupId` may not match the `DeviceGroup.groupId`,Ghurtchu,64307253,Anzori (Nika) Ghurtchumelia,,CLOSED,2024-05-04T16:55:39Z,2024-05-25T19:01:06Z,"I was following the online tutorial on the official `Pekko` website: https://pekko.apache.org/docs/pekko/current/typed/guide/tutorial_4.html#:~:text=Keeping%20track%20of,%C2%B6

and I found that `DeviceTerminated.groupId` may not match with `DeviceGroup.groupId` but we don't handle such a case right now. I suggest that we keep consistency and fix it. Since such an approach is already used with `RequestTrackDevice` message when `grId != groupId` we could just add a new case in the end to log the warning about the possible scenario here: https://github.com/apache/pekko/blob/58fa510455190bd62d04f92a83c9506a7588d29c/docs/src/test/scala/typed/tutorial_4/DeviceGroup.scala#L85

```scala
case DeviceTerminated(_, grId, deviceId) =>
    context.log.warnN(""Ignoring DeviceTerminated for groupId:{} and deviceId:{}. This actor is responsible for {}"", grId, deviceId, groupId)
    this
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1311/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1311,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59AzrY,pekko,2097363672,1311,NA,laglangyue,35491928,Laglangyue,,NA,2024-05-07T03:10:04Z,2024-05-07T03:10:04Z,Thanks for your report， could you submit a pr,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59AzrY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1311,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59A2_g,pekko,2097377248,1311,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-05-07T03:27:07Z,2024-05-07T03:27:07Z,"`DeviceTerminated` only sends if the child actor is terminated, it will always match groups, i don't think there have any issue on there. Could you make a minimal reproduction?

```diff
      case trackMsg @ RequestTrackDevice(`groupId`, deviceId, replyTo) =>
        deviceIdToActor.get(deviceId) match {
          case Some(deviceActor) =>
            replyTo ! DeviceRegistered(deviceActor)
          case None =>
            context.log.info(""Creating device actor for {}"", trackMsg.deviceId)
            val deviceActor = context.spawn(Device(groupId, deviceId), s""device-$deviceId"")
+           context.watchWith(deviceActor, DeviceTerminated(deviceActor, groupId, deviceId))
            deviceIdToActor += deviceId -> deviceActor
            replyTo ! DeviceRegistered(deviceActor)
        }
        this

      case RequestTrackDevice(gId, _, _) =>
+       context.log.warn2(""Ignoring TrackDevice request for {}. This actor is responsible for {}."", gId, groupId)
        this

```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59A2_g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1317,https://api.github.com/repos/apache/pekko/issues/1317,pekko,2282750617,1317,review test dependency overrides associated with docker-java,pjfanning,11783444,PJ Fanning,,CLOSED,2024-05-07T09:32:27Z,2025-01-06T11:11:35Z,"Unfortunately, docker-java has a lot of outdated dependencies - many with CVEs.

https://mvnrepository.com/artifact/com.github.docker-java/docker-java/3.3.6

If and when we uptake a new docker-java, we can review if we still need some or all of our sbt dependency overrides associated with docker-java. See https://github.com/apache/pekko/pull/1313 for an example.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1317/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/1325,pekko,2292784761,1325,java.lang.UnsupportedOperationException pekko migration ,pro-kaushal,155938634,Kaushal.au,,CLOSED,2024-05-13T13:12:28Z,2024-05-14T04:01:34Z,"Please use https://github.com/apache/pekko/discussions for questions instead of posting them to the issue tracker.

I'm getting following error after I updated system from play 2.9 to play 3 (pekko)

java.lang.UnsupportedOperationException: null
	at java.base/java.util.concurrent.CompletableFuture$MinimalStage.isDone(CompletableFuture.java:2926)
	at scala.jdk.javaapi.FutureConverters$.asScala(FutureConverters.scala:73)
	at scala.jdk.FutureConverters$CompletionStageOps$.asScala$extension(FutureConverters.scala:41)
	at play.sockjs.core.j.JavaSockJS.$anonfun$withComponents$1(JavaSockJS.scala:18)
	at play.sockjs.api.SockJS$$anon$1.apply(SockJS.scala:34)
	at play.sockjs.core.transports.WebSocket.$anonfun$framed$2(WebSocket.scala:27)
	at play.api.mvc.WebSocket$.$anonfun$acceptOrResult$1(WebSocket.scala:184)
	at play.api.mvc.WebSocket$.$anonfun$apply$1(WebSocket.scala:38)
	at play.core.server.PekkoHttpServer.executeHandler(PekkoHttpServer.scala:403)
	at play.core.server.PekkoHttpServer.handleRequest(PekkoHttpServer.scala:362)
	at play.core.server.PekkoHttpServer.$anonfun$createServerBinding$1(PekkoHttpServer.scala:224)
	at org.apache.pekko.stream.impl.fusing.MapAsyncUnordered$$anon$31.onPush(Ops.scala:1443)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.processPush(GraphInterpreter.scala:555)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:433)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute(ActorGraphInterpreter.scala:71)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute$(ActorGraphInterpreter.scala:67)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$BatchingActorInputBoundary$OnNext.execute(ActorGraphInterpreter.scala:114)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1325/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59ns6W,pekko,2107559574,1325,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-13T13:18:35Z,2024-05-13T13:18:35Z,"please update scala to newer latest version, this is been fixed in scala","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59ns6W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59ntvT,pekko,2107562963,1325,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-13T13:20:08Z,2024-05-13T13:20:08Z,"Pekko is not even in the main part of the stacktrace. Scala and Play are much closer to the failure.

@He-Pin are you suggesting the issue is in scala.jdk.javaapi.FutureConverters$.asScala(FutureConverters.scala:73) ? 

For reference, Pekko doesn't even use scala.jdk.javaapi.FutureConverters. It has its own FutureConverters class.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59ntvT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59n-lQ,pekko,2107631952,1325,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-13T13:49:35Z,2024-05-13T13:49:35Z,does look quite like https://github.com/scala/bug/issues/12918,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59n-lQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59oFYd,pekko,2107659805,1325,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-13T14:01:56Z,2024-05-13T14:01:56Z,This is been fixed in scala ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59oFYd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1325,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59uGMP,pekko,2109235983,1325,NA,pro-kaushal,155938634,Kaushal.au,,NA,2024-05-14T04:01:33Z,2024-05-14T04:01:33Z,thanks sorted the issue,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59uGMP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/1327,pekko,2297995201,1327,EventSourcedBehavior/Durable State exposed to stack overflow when lots of read-only commands are in the stash,JacobF7,11156832,,,OPEN,2024-05-15T13:49:36Z,2025-01-24T20:01:57Z,Both EventSourcedBehavior and Durable state seem to be exposed to stack overflow exceptions when lots of read-only commands are in the stash. This bug has already been opened as an [issue](https://github.com/akka/akka/issues/29933) for Akka and a fix has also been recently merged. Are there any plans of fixing this in Pekko too?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1327/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls597pPV,pekko,2112787413,1327,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-15T15:00:48Z,2024-05-15T15:00:48Z,"Legally, we can't take any code that is committed to Akka since its license changed. If someone wants to attempt a clean room fix, that would be great.

Even a reproducible test case that someone else can use to do a clean room fix would be much appreciated.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls597pPV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59739t,pekko,2112847725,1327,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-15T15:22:55Z,2024-05-15T15:22:55Z,@JacobF7 would you like to prepare a reproducer? I'm not using persistent at work.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls59739t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-EHGs,pekko,2115006892,1327,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-16T11:43:10Z,2024-05-16T11:43:10Z,"I've read the https://github.com/akka/akka/issues/29933 but don't want to look at the PR since the license is not compatible with Apache Pekko. It seems like the issue is that 'tryUnstashOne will, after a few steps, call the onCommand method that in turn will call tryUnstashOne'.

So it seems like we need to make tryUnstashOne non-recursive. We may want to allow a small number of recursive calls but after a certain depth, we will need to use something like sending a message to continue the unstashing. There is a good chance that we will need to wait for a response message that tells us the async unstashing has completed.

Alternatively, we could look at turning this into a loop instead of using recursion.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5-EHGs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_CktH,pekko,2131381063,1327,NA,pjfanning,11783444,PJ Fanning,,NA,2024-05-25T18:09:28Z,2024-05-25T18:09:28Z,"@JacobF7 Can I get some background? I reproduced the issue but with a use case that is not real world. Have you hit this issue in the real world?

I have messed about with some changes but in all the honesty, they tend to break stuff.

If someone else wants to try their own solution, please feel free to have a look. Just a reminder, we can't accept any solutions that rely on examining the Akka changes.

One extra potential solution is to ignore the read only events if there are just too many of them. In my testing, it takes > 1000 such events to cause an issue. Is there a good reason not to limit the number of read only events?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_CktH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_Coi0,pekko,2131396788,1327,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-05-25T18:58:43Z,2024-05-25T18:58:43Z,@JacobF7 Would you like to provide a reproducer? thanks.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_Coi0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1327,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_Fd5P,pekko,2132139599,1327,NA,JacobF7,11156832,,,NA,2024-05-26T08:46:48Z,2024-05-26T08:46:48Z,"@pjfanning - In our scenario (gambling), we have an actor that receives on peak loads 15,000 requests per second (both read and write events). Unfortunately, in this particular scenario we don't have the option of distributing the load because many users will need to read and write to the same resource (actor). Moreover write events need to be handled 1 by 1 in the same order that they are received in the inbox. From our performance tests, it seems that Pekko Persistence (Event Sourcing in particular, but also Durable State) was not the right fit for this amount of load, so instead we opted to use a regular actor without persistence. Persistence was handled by manually snapshotting the state of the actor periodically.

@He-Pin - As @pjfanning mentioned, the issue can be replicated by increasing the load (for instance submitting 2000 read requests). ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_Fd5P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1334,https://api.github.com/repos/apache/pekko/issues/1334,pekko,2307737759,1334,Reproducible Scala 3 artifacts,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2024-05-21T08:50:03Z,2024-05-30T11:05:35Z,"Currently, the 2.12 and 2.13 artifacts are reproducible, but the Scala 3 artifacts of `pekko-cluster-sharding` and `pekko-persistence` appear to have two separate nondeterminisms.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1334/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1334,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_g1Sf,pekko,2139313311,1334,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-05-30T11:05:35Z,2024-05-30T11:05:35Z,duplicate of #325,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls5_g1Sf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1341,https://api.github.com/repos/apache/pekko/issues/1341,pekko,2315170545,1341,With entity passivation enabled the shard region will cause a lot of unhandled ShardsUpdated during shutdown,nvollmar,919730,Nicolas Vollmar,,CLOSED,2024-05-24T11:31:41Z,2024-06-18T13:23:03Z,"We encounter hundreds of these during a node shutdown
```
unhandled message from Actor[pekko://main/system/sharding/transactionsAggregates#-1585167465] to Actor[pekko://main/system/sharding/transactionsAggregates/4#-516417762]: ShardsUpdated(5)
```

Root cause is  to link  to link `ShardRegion` sending updates for each terminated shard when passivation strategy is used:
```
      if (settings.passivationStrategy != ClusterShardingSettings.NoPassivationStrategy) {
        shards.values.foreach(_ ! ShardsUpdated(shards.size))
      }
```
See [here](https://github.com/apache/pekko/blob/3fff73894bf339722b2e4d7a4a5491b1de4ca6a9/cluster-sharding/src/main/scala/org/apache/pekko/cluster/sharding/ShardRegion.scala#L1006)

That message is not handled/ignored by the `Shard` during termination:
```
       context.become {
          case Terminated(ref) => receiveTerminated(ref)
        }
```
See [here](https://github.com/apache/pekko/blob/3fff73894bf339722b2e4d7a4a5491b1de4ca6a9/cluster-sharding/src/main/scala/org/apache/pekko/cluster/sharding/Shard.scala#L895)


There would be two ways to fix this:

1. At this time the `ShardRegion` property `gracefulShutdownInProgress` is already set to `true` - check for that in the if and don't send any more updates 
2. During termination in the `Shard` match and ignore the `ShardsUpdated`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1341/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1356,https://api.github.com/repos/apache/pekko/issues/1356,pekko,2335109892,1356,Feature request: Add BoundedSourceQueue#isComplete method,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-06-05T07:23:21Z,2024-06-18T11:19:04Z,"Motivation:
I want to do a checking before enqueue or call `complete` with a check otherwise it will throw an exception .
```
@InternalApi private[pekko] object BoundedSourceQueueStage {
  sealed trait State
  case object NeedsActivation extends State
  case object Running extends State
  case class Done(result: QueueCompletionResult) extends State
}
```

Modification:
Add `BoundedSourceQueue#isComplete` method.

Cons:
But that will introduce another check, hurt performance for real usage.

Update:
Checked reactor-core too, which doesn't provides something like this too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1356/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1357,https://api.github.com/repos/apache/pekko/issues/1357,pekko,2341240989,1357,"double ""a"" appearing in tutorial",xelbes,88331038,,,CLOSED,2024-06-07T22:24:25Z,2024-06-09T01:49:42Z,"hello, 

i am currently working through your tutorial and it appeared that in your tutorial once there is a double ""a"" because in your java example and in your scala example you added an ""a"" 

<img width=""719"" alt=""image"" src=""https://github.com/apache/pekko/assets/88331038/2d88881a-9d45-40b9-93df-d6a1c21a6485"">
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1357/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1357,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6AfKyB,pekko,2155654273,1357,NA,xelbes,88331038,,,NA,2024-06-07T22:31:08Z,2024-06-07T22:31:08Z,"to explain further 

in the two selection in your markdown you have always added a new ""a"" 

<img width=""909"" alt=""image"" src=""https://github.com/apache/pekko/assets/88331038/f680d026-3c9d-4cfb-b555-0c1968b2d150"">
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6AfKyB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1357,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6AfM2N,pekko,2155662733,1357,NA,pjfanning,11783444,PJ Fanning,,NA,2024-06-07T22:43:37Z,2024-06-07T22:43:37Z,thanks - I created #1358,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6AfM2N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1359,https://api.github.com/repos/apache/pekko/issues/1359,pekko,2346223136,1359,Add FutureTimeoutSupport#timeout support,He-Pin,501740,He-Pin(kerr),,OPEN,2024-06-11T11:52:40Z,2025-01-24T20:01:57Z,"Motivation:
Just like Java 's `orTimeout` method, which will cancel the future(if possible) and complete it with a timeout exception.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1359/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1359,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ge6kJ,pekko,2256251145,1359,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-07-29T15:32:14Z,2024-07-29T15:32:14Z,"I like this feature idea, but do we have any particular reason to need it in 1.1.0? I think we can remove it from the milestone, it can be introduced either before or after 1.1.0.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ge6kJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1359,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GgRFS,pekko,2256605522,1359,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-07-29T18:15:22Z,2024-07-29T18:15:22Z,"I use something like this in an internal project,  so I submitted it here to gather feedback too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GgRFS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1359,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GkbF1,pekko,2257695093,1359,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-07-30T07:47:14Z,2024-07-30T07:47:14Z,"@raboof What do you think about it, I would like to finish it this weekend.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GkbF1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1359,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GkeIT,pekko,2257707539,1359,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-07-30T07:54:24Z,2024-07-30T07:54:24Z,I like the feature idea!,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GkeIT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1360,https://api.github.com/repos/apache/pekko/issues/1360,pekko,2348004337,1360,Add UntypedAbstractActorWithTimers,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-06-12T07:15:04Z,2024-06-14T08:15:31Z,"Motivation:
Add `UntypedAbstractActorWithTimers` for easy to use with JDK21. currently we only have `AbstractActorWithTimers`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1360/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1363,https://api.github.com/repos/apache/pekko/issues/1363,pekko,2352463465,1363,Add Flow#onBackpressureDrop() operator,He-Pin,501740,He-Pin(kerr),,OPEN,2024-06-14T04:27:26Z,2024-07-24T13:02:50Z,"Motivation:

I want to do some rate limiting and just fail the single task, eg when combined with `mapAsync`.
Currently seems I can't observe the backpressure.

`onBackpressure` is only been called once downstream backpressure.

```scala
        queue = Source.<TranslateTask>queue(10240)
            .groupedWeightedWithin(
                dynamicDictionaryConfigs.getMaxBatchTokens(), //最大的字符数，1000 个以内
                dynamicDictionaryConfigs.getMaxBatchSize(), //最大的批量大小，50 个以内
                costFn, //字符数计算
                Duration.ofMillis(dynamicDictionaryConfigs.getMaxBatchIntervalInMillis())) //最大的聚合时间，比如 3ms
            .onBackpressure(task -> task.fail(...)) //
            .buffer(dynamicDictionaryConfigs.getOvsQpsLimit() * 2, OverflowStrategy.backpressure())
            .toMat(Sink.foreach(this::batchTranslate), Keep.left())
            ....
            .run(actorSystem);
```


What do you think? 

In reactor-core, there is:
- `reactor.core.publisher.Flux#onBackpressureDrop(java.util.function.Consumer<? super T>)` 

This is what I would like to make use.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1363/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1363,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6CO1nX,pekko,2184927703,1363,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-06-23T09:59:48Z,2024-06-23T09:59:48Z,"Update:
```scala
@InternalApi private[pekko] trait Buffer[T] {
  def capacity: Int
  def used: Int
  def isFull: Boolean
  def isEmpty: Boolean
  def nonEmpty: Boolean

  def enqueue(elem: T): Unit
  def dequeue(): T

  def peek(): T
  def clear(): Unit
  def dropHead(): Unit
  def dropTail(): Unit
}
```
as the current `Buffer`'s `clear`, `dropHead` and `dropTail` just returns `Unit`, change  it to `returns` `Seq[T]` or `T` will help , but that can involve: 1. large amount of change across the codebase, 2. hurt performance for `clear` case.

So seems better to just add a new dedicated implementation with `onBackPressureDrop` as reactor-core?

![image](https://github.com/apache/pekko/assets/501740/f481c590-a1ad-413c-a875-09ec30c51822)

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6CO1nX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1363,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-60M,pekko,2247863564,1363,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-24T13:02:49Z,2024-07-24T13:02:49Z,"kind of like Kafka Request Purgatory but not the same thing, i am not objection to this feature. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-60M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1364,https://api.github.com/repos/apache/pekko/issues/1364,pekko,2352660156,1364,Support just warning instead of error when `pekko.scheduler.tick-duration` < 10ms on Windows?,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-06-14T06:52:32Z,2024-08-14T18:04:58Z,"Motivation:
When development on Windows but deploy on Linux it would be nice to have the `pekko.scheduler.tick-duration=1ms` without any change, otherwise, it will fails when the `pekko.scheduler.tick-duration` < 10ms

How about adding `pekko.scheduler.check-tick-duration=warn/error` and with `error` by default, So I can change it to `warn`, then It will make the development more smooth when developing on Windows but Deploy only on Linux Env.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1364/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1384,https://api.github.com/repos/apache/pekko/issues/1384,pekko,2387135432,1384,Bug - Assertion failure caused by exception during pre-start,pjfanning,11783444,PJ Fanning,,CLOSED,2024-07-02T20:45:24Z,2024-07-24T19:10:36Z,"### Discussed in https://github.com/apache/pekko/discussions/1383

<div type='discussions-op-text'>

<sup>Originally posted by **sadekmunawar** July  2, 2024</sup>
Hi Pekko Team,

Are there any plans to fix this bug in Pekko?
https://discuss.lightbend.com/t/expected-behavior-when-child-actor-throws-an-exception-during-pre-start/10753

Thank you</div>","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1384/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1384,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6DZEVC,pekko,2204386626,1384,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-02T20:48:39Z,2024-07-02T20:48:39Z,"Issue may relate to https://github.com/akka/akka/pull/27614. There is a reproduction test in https://discuss.lightbend.com/t/expected-behavior-when-child-actor-throws-an-exception-during-pre-start/10753/3

If anyone attempts a PR for this - please do not look at the Akka PR. Any Pekko PR will need to be a clean room fix implemented by the PR submitter. The test case in https://discuss.lightbend.com is probably ok to use but it may be worth asking the person who wrote it to give explicit permission for its use in Pekko.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6DZEVC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1384,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6E45nq,pekko,2229508586,1384,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-15T21:58:02Z,2024-07-15T21:58:02Z,I think we should consider backporting the fix to 1.0.x branch.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6E45nq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1384,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-32e,pekko,2247851422,1384,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-24T12:59:50Z,2024-07-24T12:59:50Z,"> I think we should consider backporting the fix to 1.0.x branch.

all merge requests have been backported to 1.0.x, should we close this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6F-32e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/1393,pekko,2405954892,1393,stream-testkit: issue with scala 2.12 usage of expectNextWithTimeoutPF,pjfanning,11783444,PJ Fanning,,OPEN,2024-07-12T16:27:58Z,2024-07-29T16:25:52Z,"see https://github.com/apache/pekko-persistence-cassandra/pull/212
there change that seems to have caused the issue is #1218 (and earlier #1186)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1393/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ErPsX,pekko,2225928983,1393,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-12T16:29:53Z,2024-07-12T16:29:53Z,@He-Pin what do you think we should do here? Should we document the issue we see in https://github.com/apache/pekko-persistence-cassandra/pull/212 or is there a change we can make to stream-testkit to avoid the issue going forward?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ErPsX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ErbyW,pekko,2225978518,1393,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-07-12T17:03:38Z,2024-07-12T17:03:38Z,"I was expected to avoid a double evaluation, but that can only be done with 2.13, we may better go with 2.13 abd I expect drop the 2.12 support in 1.2.x anyway","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ErbyW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EunqW,pekko,2226813590,1393,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-13T07:57:53Z,2024-07-13T07:57:53Z,"@He-Pin This new method in https://github.com/He-Pin/incubator-pekko/blob/05248075bd13a336c9af079cb44a61986dc1f751/stream-testkit/src/main/scala/org/apache/pekko/stream/testkit/StreamTestKit.scala#L869 doesn't make sense to me. The PartialFunction is a Scala function, not a Java function. This seems like a not very useful Java API. The other changes in #1186 seem mainly ok to me but could we consider these?
* removing the Java API expectNextWithTimeoutPF
* or changing the Java API expectNextWithTimeoutPF to use a Java function.

When I say the other changes in #1186 are mainly ok, there are other new Java API methods that take Scala Partial Functions as inputs.

How do Java users even create a Scala Partial Function?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EunqW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Eup4l,pekko,2226822693,1393,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-07-13T08:34:08Z,2024-07-13T08:34:08Z,"Yes, but a user can build a PartialFunction with the helper, such as the Receive builder.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Eup4l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EusiB,pekko,2226833537,1393,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-13T09:16:25Z,2024-07-13T09:16:25Z,"> Yes, but a user can build a PartialFunction with the helper, such as the Receive builder.

The ReceiveBuilder will not work for this stream-testkit use case. Unless we have a builder that can build a `PartialFunction[Any, T]` - does that exist?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6EusiB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Eux6e,pekko,2226855582,1393,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-07-13T10:58:25Z,2024-07-13T10:58:25Z,"@pjfanning Yes, `org.apache.pekko.japi.pf.PFBuilder`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Eux6e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Fck87,pekko,2238861115,1393,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-19T10:29:29Z,2024-07-19T10:29:29Z,"> @pjfanning Yes, `org.apache.pekko.japi.pf.PFBuilder`.

Thanks - there seem to be some useful classes in the `org.apache.pekko.japi.pf` package.

https://pekko.apache.org/japi/pekko/current/org/apache/pekko/japi/pf/package-summary.html","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Fck87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ge58Q,pekko,2256248592,1393,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-07-29T15:31:06Z,2024-07-29T15:31:06Z,"> @He-Pin what do you think we should do here? Should we document the issue we see in [apache/pekko-persistence-cassandra#212](https://github.com/apache/pekko-persistence-cassandra/pull/212) or is there a change we can make to stream-testkit to avoid the issue going forward?

If I understand correctly this is only an issue when using Scala 2.12, right? In that case I think the note in #1403 seems sufficient and IMHO we can close this issue (or keep it open for if anyone is interested in looking into it, but remove it from the 1.1.0 milestone)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ge58Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1393,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GfZw2,pekko,2256378934,1393,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-29T16:25:51Z,2024-07-29T16:25:51Z,I'll close this. It is documented and I think the consensus is not to fix it.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GfZw2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1400,https://api.github.com/repos/apache/pekko/issues/1400,pekko,2415607803,1400,long running tests should be run in a nightly build,pjfanning,11783444,PJ Fanning,,CLOSED,2024-07-18T07:32:28Z,2024-07-18T08:21:59Z,"see #1399 and #1385 (eg SupervisorHierarchySpec)

We have https://github.com/apache/pekko/actions/workflows/timing-tests.yml but that CI job is passing even while 1399 is broken.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1400/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1400,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FRCjv,pekko,2235836655,1400,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-07-18T07:40:14Z,2024-07-18T07:40:14Z,looks like it has been run in night build.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FRCjv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1400,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FRWWk,pekko,2235917732,1400,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-18T08:21:59Z,2024-07-18T08:21:59Z,"Thanks @Roiocam 

The test failures can be seen here - https://github.com/apache/pekko/actions/runs/9983318008/job/27590691425","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6FRWWk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1417,https://api.github.com/repos/apache/pekko/issues/1417,pekko,2435704027,1417,Deprecate `org.apache.pekko.dispatch.Futures`,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-07-29T15:18:00Z,2024-07-29T21:25:40Z,"I think this class was introduced when Akka still supported Java versions before Java 8, which introduced `CompletionStage`.

We should probably try and deprecate `org.apache.pekko.dispatch.Futures` and any Java APIs that still produce/expect `Future`s, and introduce ones that work with `CompletionStage`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1417/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GgquG,pekko,2256710534,1417,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-29T19:15:21Z,2024-07-29T19:15:21Z,I had a quick look at this and I think this Futures class is useful. See https://github.com/apache/pekko/pull/1418 for the PR that convinced that this change is not a good idea.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6GgquG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Gh35J,pekko,2257026633,1417,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-07-29T21:18:33Z,2024-07-29T21:18:33Z,"I didn't intend to suggest Java users should use `Future$.MODULE$.failed` and such: what I was thinking is that Java users shouldn't need to touch the Scala `Future` at all, and we should make sure that where they currently must use `Future`, we provide equivalent APIs using the more Java-native `CompletionStage`.

Something along the lines of (sketch) https://github.com/apache/pekko/compare/main...raboof:pekko:no-scala-futures-in-java?expand=1

The `Promise` is useful and doesn't seem to have a direct counterpart in standard Java, but perhaps we should then introduce a Promise utility that works with CompletionStage / CompletableFuture as well.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Gh35J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1417,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Gh6bP,pekko,2257037007,1417,NA,pjfanning,11783444,PJ Fanning,,NA,2024-07-29T21:25:39Z,2024-07-29T21:25:39Z,"90% of the internal Pekko usages of org.apache.pekko.dispatch.Futures are in Java unit tests.
I guess we could move the code to a test class and deprecate the org.apache.pekko.dispatch.Futures class.
Some of the tests are linked in the Paradox documentation though.

FutureTimeoutSupport has one usage that could moved internal to that class.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Gh6bP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1426,https://api.github.com/repos/apache/pekko/issues/1426,pekko,2453476716,1426,Attribute overriding in `SourceQueueWithComplete`,petervecera-jr,143713541,Peter Večeřa,,OPEN,2024-08-07T13:22:18Z,2024-08-07T13:22:18Z,"Hi today I've found a bug regarding name attribute overriding in `SourceQueueWithComplete`.

If I create a `Source.queue` like this `Source.queue[Int](10, OverflowStrategy.dropHead)`

It calls following method:

```
 def queue[T](
	bufferSize: Int,
    overflowStrategy: OverflowStrategy,
    maxConcurrentOffers: Int): Source[T, SourceQueueWithComplete[T]] =
    Source.fromGraph(new QueueSource(bufferSize, overflowStrategy, maxConcurrentOffers).withAttributes(DefaultAttributes.queueSource))
```

Here it calls `withAttributes(DefaultAttributes.queueSource)` which overrides any given name to the graph component.

From my observation, I assume that the strategy of name attribute overriding is incorrect. Because the very first attribute is used and the rest is discarded. 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1426/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1433,https://api.github.com/repos/apache/pekko/issues/1433,pekko,2456627300,1433,jdk9 tests do not run,pjfanning,11783444,PJ Fanning,,CLOSED,2024-08-08T21:09:29Z,2024-08-28T20:31:30Z,"See https://github.com/apache/pekko/pull/1432 - I deliberately modified 2 classes (1 Java, 1 Scala) to see if they were even compiled. The PR did fail because scalafmt and the doc build failed but the main part of the build where we compile code and run tests - this all ran ok.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1433/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1433,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HuVjY,pekko,2277071064,1433,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-08-09T03:25:17Z,2024-08-09T03:25:17Z,"I guess `sbt dependWalkerCheck` didn't want to verify TestJDK9+ classes compile, but I don't remember why it was on purpose. 

and it is normal that PRValidationTest does not run JDK9 verification. We will not verify these on the main process, but only verify on binary compability or documentation check","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6HuVjY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1433,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KDmSu,pekko,2316199086,1433,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-28T20:31:30Z,2024-08-28T20:31:30Z,#1434 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KDmSu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1435,https://api.github.com/repos/apache/pekko/issues/1435,pekko,2457024761,1435,Feature: backoff for Pattern#retry ,Roiocam,26020358,Andy(Jingzhang)Chen,,OPEN,2024-08-09T03:34:02Z,2024-08-09T03:34:02Z,"## Motivation

I am using Pattern#retry to ensure reliable delivery to my actor, and my actor has backoff supervisor.

my demand is support backoff retry on Pattern, which align my delivery and supervision strategies to complement each other","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1435/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1444,https://api.github.com/repos/apache/pekko/issues/1444,pekko,2482516743,1444,Feature Request: Streamlined approach for Behavior Factory,Roiocam,26020358,Andy(Jingzhang)Chen,,CLOSED,2024-08-23T07:36:02Z,2024-08-28T17:05:21Z,"## Motivation

avoid annoying method call

```java
// current creation
Behaviors.receiveMessage(e -> {
    forwardRef.tell(e);
    return Behaviors.same();
});


// expect feature
Behaviors.receiveMessageSame(msg -> forwardRef.tell(msg));

```

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1444/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1453,https://api.github.com/repos/apache/pekko/issues/1453,pekko,2485987524,1453,Feature Request: Add Flow#transform method?,He-Pin,501740,He-Pin(kerr),,OPEN,2024-08-26T06:02:18Z,2025-01-18T02:57:53Z,"Motivation:

Using an inline `transform` method can get more fluent code as `Flux`.
When using reactor-core 's `Flux`, we have something like:
```java
        sink.asFlux()
            .onBackpressureBuffer()
            .transform(new MsgTransformer())
            .subscribe(msgs -> {
... }
```

And the `transform` method is just a syntax sugar:
```java
	public final <V> Flux<V> transform(Function<? super Flux<T>, ? extends Publisher<V>> transformer) {
		if (Hooks.DETECT_CONTEXT_LOSS) {
			transformer = new ContextTrackingFunctionWrapper(transformer);
		}
		return onAssembly(from(transformer.apply(this)));
	}
```

WDYT?

Result:
More fluent code.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1453/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1458,https://api.github.com/repos/apache/pekko/issues/1458,pekko,2494080464,1458,`Source.combine` failing with exception for input sources,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,CLOSED,2024-08-29T10:41:14Z,2024-08-30T09:49:46Z,"I am having an issue where `Source.combine` is failing for a `List` of `Source`'s, throwing this exception. In this specific case the `Source` happens to be 6 elements long, currently trying to diagnose what is causing the issue (as you can see the exception isn't too helpful)

```
2024-08-29 10:07:26.284 [default-pekko.actor.default-dispatcher-4] ERROR o.a.pekko.actor.RepointableActorRef - Error during preStart in [org.apache.pekko.stream.impl.SetupSourceStage$$anon$2-setup(org.apache.pekko.stream.javadsl-Source.scala:699)]: 2 is out of bounds (min 0, max 1)
java.lang.IndexOutOfBoundsException: 2 is out of bounds (min 0, max 1)
        at scala.collection.immutable.Vector.ioob(Vector.scala:285)
        at scala.collection.immutable.Vector1.apply(Vector.scala:390)
        at org.apache.pekko.stream.UniformFanInShape.in(UniformFanInShape.scala:50)
        at org.apache.pekko.stream.scaladsl.Source$.$anonfun$combine$7(Source.scala:865)
        at org.apache.pekko.stream.scaladsl.Source$.$anonfun$combine$7$adapted(Source.scala:864)
        at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
        at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
        at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
        at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
        at org.apache.pekko.stream.javadsl.Source.combine(Source.scala:754)
        <REDACTED BUT POINTS to Source.combine(sources, Concat::create).withAttributes(attr).runWith(Sink.collect(Collectors.toList()), mat) inside of Source.completionStage>
        at org.apache.pekko.stream.javadsl.Source$.$anonfun$fromMaterializer$1(Source.scala:699)
        at org.apache.pekko.stream.impl.SetupSourceStage$$anon$2.preStart(SetupStage.scala:100)
        at org.apache.pekko.stream.impl.fusing.GraphInterpreter.init(GraphInterpreter.scala:317)
        at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.init(ActorGraphInterpreter.scala:631)
        at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.tryInit(ActorGraphInterpreter.scala:740)
        at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.finishShellRegistration(ActorGraphInterpreter.scala:783)
        at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$shortCircuitBatch(ActorGraphInterpreter.scala:801)
        at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:832)
        at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
        at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
        at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
        at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
        at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
        at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:272)
        at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:233)
        at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:245)
        at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source)
        at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source)
        at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source)
        at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source)
        at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1458/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1458,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KIRMG,pekko,2317423366,1458,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-29T11:49:26Z,2024-08-29T11:49:26Z,"For the record, what version of Pekko are you using? Ideally, this should be tried with a Pekko 1.0 release (eg 1.0.3) and 1.1.0-M1 - so that we know how long this has been an issue.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KIRMG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1458,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KJp8e,pekko,2317786910,1458,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-08-29T14:10:02Z,2024-08-29T14:10:02Z,I'm using one of the latest 1.1.0-M1 snapshots but I don't think this part of the code has been touched since the inception of the fork,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KJp8e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1458,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KUWQP,pekko,2320589839,1458,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-08-30T09:09:57Z,2024-08-30T09:09:57Z,"I am closing this because the error with PEBCAK, instead of using `Concat::create` (which is what you should be using) I instead had `Concat.create()`. The former is just passing a function reference which means the `size` arg is correctly passed into `Concat.create(arg)` where as the latter ignores the size arg (hence creating the index out of bounds exception).

There is an argument to be made that we should try and catch the `IndexOutOfBoundsException` and rethrow another exception with a more helpful error message, @pjfanning wdyt?

In any case will close the issue, sorry for the circus.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KUWQP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1458,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KUvW0,pekko,2320692660,1458,NA,pjfanning,11783444,PJ Fanning,,NA,2024-08-30T09:49:45Z,2024-08-30T09:49:45Z,"> I am closing this because the error with PEBCAK, instead of using `Concat::create` (which is what you should be using) I instead had `Concat.create()`. The former is just passing a function reference which means the `size` arg is correctly passed into `Concat.create(arg)` where as the latter ignores the size arg (hence creating the index out of bounds exception).
> 
> There is an argument to be made that we should try and catch the `IndexOutOfBoundsException` and rethrow another exception with a more helpful error message, @pjfanning wdyt?
> 
> In any case will close the issue, sorry for the circus.

Seems like a good idea to try to add more informative exception messages.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6KUvW0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/1463,pekko,2511005914,1463,Cluster sharding delivers message to the wrong entity,jchapuis,7502497,Jonas Chapuis,,CLOSED,2024-09-06T18:43:48Z,2024-09-09T21:01:38Z,"Sorry to bring some bad news, I have been investigating failing tests in https://github.com/endless4s/endless-transaction/pull/48, a PR that upgrades Pekko from 1.0.3 to 1.1.0 and I think I found a serious issue. 

The failing test suite is stress-testing event-sourced entities using the persistence test toolkit, and I have identified that a command sometimes gets delivered to the wrong entity. 

I have bisected the problem to [this optimization](https://github.com/apache/pekko/pull/1304) that was introduced after the 1.1.0-M1 release. That new code makes use of a `var cache` and it doesn't seem thread-safe. Could it be that we introduced races?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1463/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LKIQC,pekko,2334688258,1463,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-06T19:30:00Z,2024-09-06T19:30:00Z,"@jchapuis @Roiocam I looked at the PR that seems to be the issue and I think if we try to change the `var cache` to some sort of AtomicObject or lazy val that the benefits of the change will vanish. I suggest that we revert it.

@jchapuis would you have any idea how we could minimise a reproducible test that could be used for regression purposes?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LKIQC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LKL_8,pekko,2334703612,1463,NA,jchapuis,7502497,Jonas Chapuis,,NA,2024-09-06T19:41:30Z,2024-09-06T19:41:30Z,"@pjfanning I haven't yet had the time to look into this. I decided to report the problem as soon as I had a certain degree of confidence that there was a change of behavior, due to the release still being young, I got worried. I would say some tests sending commands to multiple sharded entities in quick succession, verifying that each command gets delivered to the proper destination.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LKL_8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LL0H1,pekko,2335130101,1463,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-07T09:23:05Z,2024-09-07T09:23:05Z,"@raboof it would be nice to be able to start on the 1.0.1 RC in the next few days.

What do you think of this course of action?
1. revert #1304 
2. hopefully @jchapuis will have time to test endless4s with a Pekko snapshot with this change
3. at some point early next week, we get an RC together
4. at some point, we try to fill in the test gap in Pekko so that we don't get a future bug in this area - including tests that try to force multithreaded evaluation of the entityId 
5. we avoid further changes to cluster sharding until we are happy that the test coverage has improved 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LL0H1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LL8jX,pekko,2335164631,1463,NA,jchapuis,7502497,Jonas Chapuis,,NA,2024-09-07T11:59:13Z,2024-09-07T11:59:13Z,@pjfanning sure happy to run endless4s tests as soon as the revert is merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LL8jX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQx-s,pekko,2336432044,1463,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-09-07T20:31:54Z,2024-09-07T20:31:54Z,"> @jchapuis @Roiocam I looked at the PR that seems to be the issue and I think if we try to change the `var cache` to some sort of AtomicObject or lazy val that the benefits of the change will vanish. I suggest that we revert it.

after investigating, i think because the extractEntityId  instance was shared by both `ShardRegion` Actor and multiple `Shard` Actors.

<img width=""885"" alt=""截屏2024-09-08 04 30 40"" src=""https://github.com/user-attachments/assets/a8cc71d6-80f6-4133-b29b-faed1760825d"">


<img width=""880"" alt=""截屏2024-09-08 04 31 17"" src=""https://github.com/user-attachments/assets/76145078-7281-4bed-a528-c5061c9ceabd"">

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQx-s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQysP,pekko,2336434959,1463,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-07T20:46:27Z,2024-09-07T20:46:27Z,@Roiocam is it ok to revert for a quick 1.1.1 release (#1464) and maybe trying a new optimisation change later? ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQysP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQy7q,pekko,2336435946,1463,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-09-07T20:51:31Z,2024-09-07T20:51:31Z,"> @Roiocam is it ok to revert for a quick 1.0.1 release (#1464) and maybe trying a new optimisation change later?

Of course, should be 1.1.1? 

A hindsight remark that maintaining state within a function is bad idea.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQy7q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ0Ei,pekko,2336440610,1463,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-07T20:56:00Z,2024-09-07T20:56:00Z,"> > @Roiocam is it ok to revert for a quick 1.0.1 release (#1464) and maybe trying a new optimisation change later?
> 
> Of course, should be 1.1.1?
> 
> A hindsight remark that maintaining state within a function is bad idea.

You're right - 1.1.1 is the next release. Thanks for approving #1464. I will merge it.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ0Ei/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ2ka,pekko,2336450842,1463,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-09-07T21:02:21Z,2024-09-07T21:02:21Z,Thanks @jchapuis and @pjfanning ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ2ka/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ5_B,pekko,2336464833,1463,NA,jchapuis,7502497,Jonas Chapuis,,NA,2024-09-07T22:06:46Z,2024-09-07T22:06:46Z,@pjfanning @Roiocam I can confirm my tests are now passing with the revert,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6LQ5_B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1463,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6La5NS,pekko,2339083090,1463,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-09T21:01:38Z,2024-09-09T21:01:38Z,#1467 merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6La5NS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1470,https://api.github.com/repos/apache/pekko/issues/1470,pekko,2513597899,1470,META-INF/LICENSE and META-INF/NOTICE are not consistently added to jars,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-09-09T10:43:46Z,2025-01-24T20:01:59Z,"During the 1.1.0 release, we noticed some artifacts were missing the `META-INF/LICENSE` and `META-INF/NOTICE` files. They do not seem to consistently be missing, so we should figure out what's going on.

See also #74","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1470/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1470,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a8Ra5,pekko,2599491257,1470,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-18T03:03:27Z,2025-01-18T03:03:27Z,Maybe be the SBT assembly problem?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a8Ra5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1471,https://api.github.com/repos/apache/pekko/issues/1471,pekko,2513621072,1471,Scala 3 symbol ordering issue,raboof,131856,Arnout Engelen,github@bzzt.net,CLOSED,2024-09-09T10:54:17Z,2025-01-06T08:51:32Z,"During the 1.1.0 release, we noticed a [symbol ordering issue](https://arnout.engelen.eu/rb/reproducible-builds-diffoscope-output-pekko-persistence_3-1.1.0-RC1.html).

It is possible that this is an effect of [this issue for which the fix is still being released](https://github.com/scala/scala3/issues/20496), though that might be wishful thinking. This is still too vague to justify opening an upstream issue, let's keep an eye out to see whether this issue remains after upgrading to scala 3.3.4 or later.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1471/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1471,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6OwraM,pekko,2395125388,1471,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-10-05T17:28:35Z,2024-10-05T17:28:35Z,(seen again with 1.1.2-RC1),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6OwraM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1471,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZVtIO,pekko,2572603918,1471,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-06T08:51:32Z,2025-01-06T08:51:32Z,"We are on Scala 3.3.4 and the ordering issue did not appear when reproducing 1.1.3-RC1 .

This might of course still be luck/coincidence, but let's for now close this issue and see if it happens again.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZVtIO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1479,https://api.github.com/repos/apache/pekko/issues/1479,pekko,2523274487,1479,Incorrect OSGi metadata for Pekko 1.1.x artifacts,oheger,470284,Oliver Heger,oliver.heger@oliver-heger.de,CLOSED,2024-09-12T20:15:43Z,2024-09-12T21:31:35Z,"The OSGi metadata for the Pekko artifacts that depend on `pekko-actor` have `Import-Package` declarations like the following one:

`Import-Package: org.apache.pekko;version =""[1.0,1.1)""`

This means that still the 1.0.x versions are referenced. If only `pekko-actor` in version 1.1.0 is installed, those bundles cannot be resolved. The correct version range for the `Import-Package` declarations would be ""[1.1,1.2)"".","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1479/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/1484,pekko,2531097836,1484,consider marking some functions as `@noinline` to fix issues with using Kamon,pjfanning,11783444,PJ Fanning,,CLOSED,2024-09-17T12:57:39Z,2024-10-08T11:22:13Z,"Pekko 1.1 enables Scala 2 inlining.

https://www.baeldung.com/scala/inline-noinline-annotations

This has caused issues with using Kamon for monitoring Pekko 1.1. https://github.com/kamon-io/Kamon/issues/1352

One option might be to mark some of the functions that Kamon relies on instrumenting as `@noinline`.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1484/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ma6nd,pekko,2355866077,1484,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-09-17T13:46:40Z,2024-09-17T13:46:40Z,"To me this is acceptable as a temporary solution as long as the number of methods we have to mark as `@noinline` is reasonable (as a rough ballpark I would say < 10) and that ontop of this we also have a path forward to provide official instrumentation/hooks.

The thing I want to avoid is that we make a release with a some methods marked `@noinline` and then at some point in time this isn't enough and then we end up adding even more methods with `@noinline` creating a roundabout back and fourth circus.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ma6nd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Mc6o1,pekko,2356390453,1484,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-17T16:25:58Z,2024-09-17T16:25:58Z,"It seems like the Scala 2 compiler can inline any functions that are marked as `final`. Does anyone know what happens if a class is marked as `final`, does that mean all of its function are regarded by the inliner as being final and therefore inline friendly?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Mc6o1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MdXpD,pekko,2356509251,1484,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-09-17T17:29:10Z,2024-09-17T17:29:10Z,"> It seems like the Scala 2 compiler can inline any functions that are marked as `final`. Does anyone know what happens if a class is marked as `final`, does that mean all of its function are regarded by the inliner as being final and therefore inline friendly?

@lrytz Can you quickly answer this one?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MdXpD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MeOgc,pekko,2356733980,1484,NA,lrytz,119636,Lukas Rytz,,NA,2024-09-17T19:31:33Z,2024-09-17T19:31:33Z,"yes, the answer is yes :)","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MeOgc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MgbD5,pekko,2357309689,1484,NA,Roiocam,26020358,Andy(Jingzhang)Chen,,NA,2024-09-18T01:32:31Z,2024-09-18T01:32:31Z,"I agree with _""One option might be to mark some of the functions that Kamon relies on instrumenting as @noinline.""_

Creating an un-instrumentation library is not what we want, but we need to consider what kind of method can not be inline, we should inline those method irrelevant, but shouldn't inline for the lifecycle method, and execution method.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MgbD5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MjCAj,pekko,2357993507,1484,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-18T09:43:11Z,2024-09-18T09:43:11Z,I've opened https://github.com/apache/pekko/discussions/1487 to discuss a long term solution. I still think this `@noinline` solution is something that we should do for Pekko 1.1.2. We have broken kamon-pekko by enabling Scala 2 compiler inlining in Pekko 1.1. Maintaining these `@noinline` annotations indefinitely will be an issue but I think we can maintain them on the 1.1 branch and find a better solution for future releases.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6MjCAj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Mu8Yl,pekko,2361116197,1484,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-19T14:16:19Z,2024-09-19T14:16:19Z,"@lrytz Thanks for your assistance. If you have time, would you be able my observation below?

One of the Kamon instrumentation issues with the Pekko code compiled with Scala 2 inlining enabled appears to be with `final case class ThreadPoolConfig` and Kamon instrumentation looking to instrument the derived `copy` function that gets added to all case classes. I tried adding `@noinline` as an annotation at the case class level but that did not appear to help. I might try declaring an `@noinline override def copy` on this class but I'm wondering if there is a better way to do this.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Mu8Yl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M4-C2,pekko,2363744438,1484,NA,lrytz,119636,Lukas Rytz,,NA,2024-09-20T13:30:16Z,2024-09-20T13:30:16Z,"I see a great solution.

In the `-opt:inline` setting (see `-opt:help`) you can declare where to inline from, but only to the class level, not to individual methods. That could probably be changed so that `!**.copy` would disallow inlining any copy methods.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M4-C2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M5C-6,pekko,2363764666,1484,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-09-20T13:40:15Z,2024-09-20T13:40:15Z,"> Creating an un-instrumentation library is not what we want, but we need to consider what kind of method can not be inline, we should inline those method irrelevant, but shouldn't inline for the lifecycle method, and execution method.

If the Scala compiler determines a method should be inlined, there isn't any reason to prevent this inlining aside from the very rare chance that it creates a performance regression (which can theoritically happen but haven't seen any evidence of it so far). The Scala compiler will only inline methods that is safe to do so, even if its for lifecycle/execution methods.

The case we have with instrumentation right now is not a typical one, historically Akka hasn't had official hooks/api for instrumentation and because of that people that wanted to add instrumentation had to resort to methods such as AOP (aspect orientated programming) and/or JVM bytecode/stack inspection at which point all bets are off (inlining or not), i.e. someone could have just refactored the methods in question (which they are free to do so since they are internal/private) and it would have also broken kamon.

tl;dr We should make an official API for this at some point.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M5C-6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M-7VL,pekko,2365306187,1484,NA,hughsimpson,2494489,,,NA,2024-09-21T20:09:06Z,2024-09-21T20:09:06Z,"I was in the middle of typing:

Copy methods in general will always break mixin context patterns in instrumentation. I don't think they're ever going to be hot paths. Maybe we can find a way to disable inline for copy? That hugely limits the scope of downstream breakage opportunities..

And then i thought 'but wait, if we just have an empty Map[String, Any] baggage type field on objects that could be sensibly instrumented... Well wouldn't that be interesting? No need to block inline on copy, maybe a route to bindings....","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6M-7VL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NY4u2,pekko,2372111286,1484,NA,pjfanning,11783444,PJ Fanning,,NA,2024-09-24T19:09:08Z,2024-09-24T19:09:08Z,"> I was in the middle of typing:
> 
> Copy methods in general will always break mixin context patterns in instrumentation. I don't think they're ever going to be hot paths. Maybe we can find a way to disable inline for copy? That hugely limits the scope of downstream breakage opportunities..
> 
> And then i thought 'but wait, if we just have an empty Map[String, Any] baggage type field on objects that could be sensibly instrumented... Well wouldn't that be interesting? No need to block inline on copy, maybe a route to bindings....

@hughsimpson I think it best to use https://github.com/apache/pekko/discussions/1487 to discuss further changes. My preference would be to use use the [Pekko Event Stream](https://pekko.apache.org/docs/pekko/1.1/typed/event-stream.html).

I've opened #1499 to discuss options to support Context Propagation.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6NY4u2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1484,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PBphK,pekko,2399574090,1484,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-08T11:22:13Z,2024-10-08T11:22:13Z,Some changes are in Pekko 1.1.2,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PBphK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1488,https://api.github.com/repos/apache/pekko/issues/1488,pekko,2537625520,1488,Use of japi.Util.immutableSeq(j.u.List) is inefficient because it iterates over the list to create a new Seq,pjfanning,11783444,PJ Fanning,,CLOSED,2024-09-20T01:09:02Z,2024-10-10T17:18:13Z,"https://github.com/apache/pekko/blob/22a738511375baa23c5b84c87d44a065c0401e0e/actor/src/main/scala/org/apache/pekko/japi/JavaAPI.scala#L269-L281

Follow up to #1250.

It's used in a lot of places internally but the most performance sensitive area is the pekko-stream code (eg Flow, Source, etc).
The obvious solution of using pekko.util.ccompat.JavaConverters to convert using `.asScala.toSeq` doesn't compile in Scala 2.12 because toSeq gives a scala.Seq instead of a scala.immutable.Seq.

We could use `.asScala.toList` but that is likely to be slower. We could also a new Util.immutableWrappingSeq function that has different implementations for Scala 2.12 (possibly delegate to existing immutableSeq) and Scala 2.13+ that uses `.asScala.toSeq`.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1488/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1488,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PBpS_,pekko,2399573183,1488,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-08T11:21:43Z,2024-10-08T11:21:43Z,Some changes are in Pekko 1.1.2.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PBpS_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1492,https://api.github.com/repos/apache/pekko/issues/1492,pekko,2540252101,1492,develocity warning in some builds,pjfanning,11783444,PJ Fanning,,CLOSED,2024-09-21T13:17:01Z,2024-09-30T23:40:19Z,"https://github.com/apache/pekko/actions/runs/10967988512/job/30458646662

```
[error] Total time: 3308 s (55:08), completed Sep 21, 2024, 1:16:10 AM
[info] Publishing build scan...
[info] The request was rejected.
[info] Develocity sbt plugin version 1.1.1 is newer than the newest version supported by Develocity 2024.1.7 which is 1.0. Please update to a newer version of Develocity.
```

I raised https://issues.apache.org/jira/browse/INFRA-26139 but we might need to downgrade sbt-develocity.

I checked ge.apache.org and no develocity results have been accepted since https://github.com/apache/pekko/pull/1447 was merged


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1492/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1513,https://api.github.com/repos/apache/pekko/issues/1513,pekko,2562591482,1513,Configuring persistence plugins at runtime for `EventSourcedBehavior`,ptrdom,5850190,Domantas Petrauskas,,CLOSED,2024-10-02T20:32:14Z,2024-10-16T21:50:59Z,"One bit of functionality that is present in Classic persistence but missing in Typed is the [capability to configure persistence plugins at runtime](https://doc.akka.io/docs/akka/current/persistence.html#give-persistence-plugin-configurations-at-runtime). Typical case where this is beneficial is for segregation of data between different tenants in multi-tenant environments.

This should be rather straightforward to implement, I could work on it if such feature would be accepted.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1513/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1513,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob19L,pekko,2389663563,1513,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-02T20:43:51Z,2024-10-02T20:43:51Z,"There are API methods in EventSourcedBehavior.

Example:
https://github.com/apache/pekko/blob/main/persistence-typed/src/main/scala/org/apache/pekko/persistence/typed/scaladsl/EventSourcedBehavior.scala#L163","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob19L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1513,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob2os,pekko,2389666348,1513,NA,ptrdom,5850190,Domantas Petrauskas,,NA,2024-10-02T20:45:42Z,2024-10-02T20:45:42Z,"Providing plugin ID at runtime is not the same as dynamic configuration of the plugin, AFAIK.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob2os/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1513,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob4zT,pekko,2389675219,1513,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-02T20:51:39Z,2024-10-02T20:51:39Z,"I don't have a problem with having a similar RuntimePluginConfig functionality for EventSourcedBehavior.
@ptrdom Would you be interested in doing a PR for this?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob4zT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1513,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob5PA,pekko,2389676992,1513,NA,ptrdom,5850190,Domantas Petrauskas,,NA,2024-10-02T20:52:46Z,2024-10-02T20:52:46Z,"Yes, will do!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Ob5PA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1521,https://api.github.com/repos/apache/pekko/issues/1521,pekko,2572643754,1521,EventSourcedBehaviorLoggingSpec test fails regularly,pjfanning,11783444,PJ Fanning,,CLOSED,2024-10-08T09:33:03Z,2024-10-08T11:45:03Z,"Scala 3.3 testing in nightly build but may just be an issue everywhere.

https://github.com/apache/pekko/actions/runs/11226174902/job/31219178672

```
[10-08 08:24:16.856] [info] - must always log user message in context.log *** FAILED *** (6 seconds, 14 milliseconds)
[10-08 08:24:16.857] [info]   java.lang.AssertionError: Timeout (6 seconds) waiting for 1 messages on LoggingTestKitImpl(1,Some(INFO),Some(org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec$ChattyEventSourcingBehavior$),None,Some(received message 'Mary'),None,None,Map(),true,None).
[10-08 08:24:16.857] [info]   at org.apache.pekko.actor.testkit.typed.internal.LoggingTestKitImpl.expect(LoggingTestKitImpl.scala:113)
[10-08 08:24:16.857] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.f$proxy1$1(EventSourcedBehaviorLoggingSpec.scala:86)
[10-08 08:24:16.857] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.$init$$$anonfun$1$$anonfun$1(EventSourcedBehaviorLoggingSpec.scala:87)
[10-08 08:24:16.857] [info]   at org.scalatest.Transformer.apply$$anonfun$1(Transformer.scala:22)
[10-08 08:24:16.857] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[10-08 08:24:16.857] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:31)
[10-08 08:24:16.858] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[10-08 08:24:16.858] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[10-08 08:24:16.858] [info]   at org.scalatest.Transformer.apply(Transformer.scala:21)
[10-08 08:24:16.858] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1118)
[10-08 08:24:16.858] [info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture(LogCapturing.scala:79)
[10-08 08:24:16.858] [info]   at org.apache.pekko.actor.testkit.typed.scaladsl.LogCapturing.withFixture$(LogCapturing.scala:42)
[10-08 08:24:16.858] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.withFixture(EventSourcedBehaviorLoggingSpec.scala:64)
[10-08 08:24:16.858] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1124)
[10-08 08:24:16.858] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$$anonfun$1(AnyWordSpecLike.scala:1128)
[10-08 08:24:16.859] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[10-08 08:24:16.859] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1128)
[10-08 08:24:16.859] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:44)
[10-08 08:24:16.859] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.runTest(EventSourcedBehaviorLoggingSpec.scala:64)
[10-08 08:24:16.859] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$$anonfun$1(AnyWordSpecLike.scala:1187)
[10-08 08:24:16.859] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:413)
[10-08 08:24:16.859] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[10-08 08:24:16.859] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[10-08 08:24:16.859] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[10-08 08:24:16.859] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
[10-08 08:24:16.860] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[10-08 08:24:16.860] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:427)
[10-08 08:24:16.860] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[10-08 08:24:16.860] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[10-08 08:24:16.860] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[10-08 08:24:16.860] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
[10-08 08:24:16.860] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[10-08 08:24:16.860] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[10-08 08:24:16.860] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1187)
[10-08 08:24:16.860] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:44)
[10-08 08:24:16.860] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.runTests(EventSourcedBehaviorLoggingSpec.scala:64)
[10-08 08:24:16.860] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[10-08 08:24:16.861] [info]   at org.scalatest.Suite.run$(Suite.scala:564)
[10-08 08:24:16.861] [info]   at org.apache.pekko.actor.testkit.typed.scaladsl.ScalaTestWithActorTestKit.org$scalatest$BeforeAndAfterAll$$super$run(ScalaTestWithActorTestKit.scala:41)
[10-08 08:24:16.861] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[10-08 08:24:16.861] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:217)
[10-08 08:24:16.861] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:135)
[10-08 08:24:16.861] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(EventSourcedBehaviorLoggingSpec.scala:64)
[10-08 08:24:16.861] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$$anonfun$1(AnyWordSpecLike.scala:1232)
[10-08 08:24:16.861] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[10-08 08:24:16.861] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1232)
[10-08 08:24:16.861] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:44)
[10-08 08:24:16.861] [info]   at org.apache.pekko.persistence.typed.EventSourcedBehaviorLoggingSpec.run(EventSourcedBehaviorLoggingSpec.scala:64)
[10-08 08:24:16.861] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[10-08 08:24:16.861] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[10-08 08:24:16.861] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[10-08 08:24:16.861] [info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
[10-08 08:24:16.862] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
[10-08 08:24:16.862] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
[10-08 08:24:16.862] [info]   at java.base/java.lang.Thread.run(Thread.java:1583)
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1521/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1521,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PA0Zt,pekko,2399356525,1521,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-10-08T09:37:33Z,2024-10-08T09:37:33Z,"likely caused by #1506, having a look.

This is about `EventSourcedBehaviorLoggingInternalLoggerSpec` and `EventSourcedBehaviorLoggingContextLoggerSpec` on JDK21.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PA0Zt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/1525,pekko,2576266528,1525,zipWithIndex is broken for org.apache.pekko.stream.scaladsl.GraphDSL.Implicits.PortOps,remyhaemmerle-da,45566104,Remy,remy.haemmerle@daml.com,CLOSED,2024-10-09T15:30:16Z,2024-11-08T22:40:31Z,"On the one hand,  [org.apache.pekko.stream.scaladsl.GraphDSL.Implicits.PortOps](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Graph.scala#L1839) inherits from [org.apache.pekko.stream.scaladsl.Flow](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Flow.scala#L61). 

On the other hand, as of https://github.com/apache/pekko/pull/591 the implementation of [FlowOps#zipWithIndex](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Flow.scala#L3307) calls [FlowOps#withAttributes](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Flow.scala#L3310)
```
 def zipWithIndex: Repr[(Out, Long)] =
    statefulMap(() => 0L)((index, out) =>
        (index + 1L, (out, index)), _ => None)
      .withAttributes(DefaultAttributes.zipWithIndex)
```
However `PortOpsImpl` the implementation of `PortOps` does not support [`withAttributes`](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Graph.scala#L1848)
```
  override def withAttributes(attr: Attributes): Repr[Out] = throw settingAttrNotSupported
```
 
Here is a small program that works with pekko 1.0.2 but crashes with 1.1.1

```
// adapted from https://doc.akka.io/docs/akka/current/stream/stream-graphs.html
import org.apache.pekko
import pekko.actor.ActorSystem
import pekko.stream._
import pekko.stream.scaladsl._

object Example extends App {
  import GraphDSL.Implicits._

  implicit val system = ActorSystem(""GraphAndShapeExampleSystem"")
  implicit val materializer = ActorMaterializer()

  val pickMaxOfThree = GraphDSL.create() { implicit b =>
    import GraphDSL.Implicits._

    val zip1 = b.add(ZipWith[Int, Int, Int](math.max _))
    val zip2 = b.add(ZipWith[Int, Int, Int](math.max _))
    zip1.out ~> zip2.in0

    UniformFanInShape(zip2.out, zip1.in0, zip1.in1, zip2.in1)
  }

  val resultSink = Sink.foreach(println)

  val g = RunnableGraph.fromGraph(GraphDSL.createGraph(resultSink) { implicit b => sink =>
    import GraphDSL.Implicits._

    // importing the partial graph will return its shape (inlets & outlets)
    val pm3 = b.add(pickMaxOfThree)

    Source.single(1) ~> pm3.in(0)
    Source.single(2) ~> pm3.in(1)
    Source.single(3) ~> pm3.in(2)
    pm3.out.zipWithIndex ~> sink.in
    ClosedShape
  })

  g.run()
}
```


<!--
Please report issues regarding specific projects in their respective issue trackers, e.g.:
 - Pekko HTTP: https://github.com/apache/pekko-http/issues
 - Pekko Connectors: https://github.com/apache/pekko-connectors/issues 
 - Pekko Persistence Cassandra Plugin: https://github.com/apache/pekko-persistence-cassandra/issues
 - ...

Please explain your issue precisely, and if possible provide a reproducer snippet (this helps resolve issues much quicker).

Thanks for contributing!
-->
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1525/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PNp5Z,pekko,2402721369,1525,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2024-10-09T15:57:11Z,2024-10-09T15:57:11Z,Assigning to @He-Pin since the change was done by him,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PNp5Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PN6RF,pekko,2402788421,1525,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-09T16:30:16Z,2024-10-09T16:30:16Z,@remyhaemmerle-da Can you include the compile error or stack trace? It saves the volunteers a lot of time not to have to go and reproduce the issue.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PN6RF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6POAjE,pekko,2402814148,1525,NA,remyhaemmerle-da,45566104,Remy,remy.haemmerle@daml.com,NA,2024-10-09T16:42:22Z,2024-10-09T16:42:22Z,"Here is the stack trace, with pekko 1.1.1

```
[error] java.lang.UnsupportedOperationException: Cannot set attributes on chained ops from a junction output port
[error]         at org.apache.pekko.stream.scaladsl.GraphDSL$Implicits$PortOpsImpl.withAttributes(Graph.scala:1854)
[error]         at org.apache.pekko.stream.scaladsl.GraphDSL$Implicits$PortOpsImpl.withAttributes(Graph.scala:1845)
[error]         at org.apache.pekko.stream.scaladsl.FlowOps.zipWithIndex(Flow.scala:3310)
[error]         at org.apache.pekko.stream.scaladsl.FlowOps.zipWithIndex$(Flow.scala:3307)
[error]         at org.apache.pekko.stream.scaladsl.GraphDSL$Implicits$PortOpsImpl.zipWithIndex(Graph.scala:1845)
[error]         at Example$.$anonfun$g$2(Example.scala:33)
[error]         at org.apache.pekko.stream.scaladsl.GraphApply.createGraph(GraphApply.scala:53)
[error]         at org.apache.pekko.stream.scaladsl.GraphApply.createGraph$(GraphApply.scala:50)
[error]         at org.apache.pekko.stream.scaladsl.GraphDSL$.createGraph(Graph.scala:1589)
[error]         at Example$.delayedEndpoint$Example$1(Example.scala:24)
[error]         at Example$delayedInit$body.apply(Example.scala:6)
[error]         at scala.Function0.apply$mcV$sp(Function0.scala:42)
[error]         at scala.Function0.apply$mcV$sp$(Function0.scala:42)
[error]         at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:17)
[error]         at scala.App.$anonfun$main$1(App.scala:98)
[error]         at scala.App.$anonfun$main$1$adapted(App.scala:98)
[error]         at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
[error]         at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
[error]         at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
[error]         at scala.App.main(App.scala:98)
[error]         at scala.App.main$(App.scala:96)
[error]         at Example$.main(Example.scala:6)
[error]         at Example.main(Example.scala)
[error]         at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
[error]         at java.base/java.lang.reflect.Method.invoke(Method.java:580)
[error] stack trace is suppressed; run last Compile / run for the full output
[error] (Compile / run) java.lang.UnsupportedOperationException: Cannot set attributes on chained ops from a junction output port
[error] Total time: 7 s, completed Oct 9, 2024, 6:41:49 PM
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6POAjE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PVQs4,pekko,2404715320,1525,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-10T10:31:07Z,2024-10-10T10:31:07Z,"I plan to revert #591. It didn't lead to any major perf gain and it breaks this use case.

We can always revisit.

#591 was one of a few changes of this style made for v1.1.0 and I think we're going to have to check all those changes for similar issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PVQs4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Pj0Lc,pekko,2408530652,1525,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-12T11:31:11Z,2024-10-12T11:31:11Z,"I still favour starting by reverting #591 but I think we could consider later following up and seeing if we can make PortOps support attributes instead of throwing UnsupportedOperationException.

https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/stream/src/main/scala/org/apache/pekko/stream/scaladsl/Graph.scala#L1854
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Pj0Lc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1525,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6S-gWW,pekko,2465858966,1525,NA,pjfanning,11783444,PJ Fanning,,NA,2024-11-08T22:40:30Z,2024-11-08T22:40:30Z,#1526 was merged,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6S-gWW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1527,https://api.github.com/repos/apache/pekko/issues/1527,pekko,2579675780,1527,Implement `EventsByTagQuery` in `PersistenceTestKitReadJournal`,ptrdom,5850190,Domantas Petrauskas,,CLOSED,2024-10-10T19:36:55Z,2024-10-16T14:20:01Z,"When attempting to implement runtime persistence plugin configuration for pekko-projection I ran into an issue where `PersistenceTestKitReadJournal` does not implement `EventsByTagQuery`, so it cannot be used to implement tests. Real persistence layers,  like Cassandra, JDBC and Leveldb of course do implement `EventsByTagQuery`, but it would be quite useful if testkit was able to provide this behavior too. From a quick look it looks to me like an implementation similar to [EventsByPersistenceIdStage](https://github.com/apache/pekko/blob/95e8355c4c6f2041587e4d64590764e008d1f2b2/persistence-testkit/src/main/scala/org/apache/pekko/persistence/testkit/query/internal/EventsByPersistenceIdStage.scala) should not be too complicated to do.

This is related to https://github.com/apache/pekko/issues/1513 - need to have both `EventSourcedBehavior` and `EventSourcedProvider` be able to take configs at runtime to enable building typical applications using this functionality.

I could work on this feature if it were to be accepted.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1527/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1527,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PZyZ5,pekko,2405901945,1527,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-10T19:42:31Z,2024-10-10T19:42:31Z,Seems useful to me.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6PZyZ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/1538,pekko,2602197446,1538,LoggingAdapter with ActorSystem and class broken in scala 3,TjarkoG,14216750,Tjarko Großmann,,OPEN,2024-10-21T11:09:16Z,2024-10-21T11:46:11Z,"when migrating from scala `2.13.14` to scala `3.3.0` we're running into an error with the LoggingAdapter. 
The setup:
```scala
package com.example

import org.apache.pekko.actor.ActorSystem
import org.apache.pekko.event.{Logging, LogSource, LoggingAdapter}


class Foo(actorSystem: ActorSystem) {
  val bar: LoggingAdapter = Logging(actorSystem, getClass)
}
```
does compile with scala `2.13.14` but with scala `3.3.0` it runs into the following Error:
```
Cannot find LogSource for Class[? <: com.example.Foo] please see ScalaDoc for LogSource for how to obtain or construct one..
I found:

    org.apache.pekko.event.LogSource.fromAnyClass[T]

But method fromAnyClass in object LogSource does not match type org.apache.pekko.event.LogSource[Class[? <: com.example.Foo]].
  val bar: LoggingAdapter = Logging(actorSystem, getClass)
 ```
 
 pekko version used is `1.1.2`
 
 if this is not a bug and only an error on my side im sorry but i have not found anything on this topic in the docs
 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1538/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn5qa,pekko,2426378906,1538,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-21T11:15:22Z,2024-10-21T11:15:22Z,"Scala 3 is the issue here. It doesn't accept 100% of Scala 2 code.

I usually just change `getClass` to `classOf[MyClass]` where MyClass is the name of the class.

I think you can get `Logging(actorSystem, getClass)` to work by providing the implicit converter explicity. I haven't tried the exact solution but it is something like.

`Logging(actorSystem, getClass)(org.apache.pekko.event.LogSource.fromAnyClass)`

That `Logging` constructor takes a 2nd param list where the params are implicits but somehow Scala 3 doesn't find the implied value.
 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn5qa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn83x,pekko,2426392049,1538,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-21T11:20:58Z,2024-10-21T11:20:58Z,Similar issue - https://github.com/akka/akka-grpc/issues/1396,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn83x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn9jS,pekko,2426394834,1538,NA,TjarkoG,14216750,Tjarko Großmann,,NA,2024-10-21T11:22:20Z,2024-10-21T11:22:20Z,"yes the classOf[Foo] solution was something we've thought of the problem ist that in the actual code we don't have the class yet. In the actual code Foo is a trait and we don't have the implementing class yet
but if this will be to complicated we'll just do it in the implementing classes
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Qn9jS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoBSA,pekko,2426410112,1538,NA,pjfanning,11783444,PJ Fanning,,NA,2024-10-21T11:29:56Z,2024-10-21T11:29:56Z,"I found a comment on an issue suggesting that `Logging(actorSystem, getClass)(org.apache.pekko.event.LogSource.fromClass)` may work.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoBSA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoE3n,pekko,2426424807,1538,NA,TjarkoG,14216750,Tjarko Großmann,,NA,2024-10-21T11:37:03Z,2024-10-21T11:37:03Z,"oh yes it does.
thank you. very much and sorry for opening an issue. should we add something bout this in the scaladoc for org. apache. pekko. event.Logging or org. apache. pekko. event.LoggingSource to avoid additional issues about this being created?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoE3n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1538,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoJT4,pekko,2426443000,1538,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-10-21T11:46:09Z,2024-10-21T11:46:09Z,"> should we add something bout this in the scaladoc for org. apache. pekko. event.Logging or org. apache. pekko. event.LoggingSource 

I think it'd make sense to keep this issue open until we've improved the docs to make this more clear, indeed","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6QoJT4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1553,https://api.github.com/repos/apache/pekko/issues/1553,pekko,2640998502,1553,dependabot: guava,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-11-07T13:12:28Z,2024-11-07T13:12:28Z,"our GitHub 'security' tab claims that we depend on a version of guava that is vulnerable to GHSA-mvr2-9pj6-7w5j .

I think this is a false positive: I think this is the guava that comes in as a transitive dependency of leveldb, but this is an `optional;provided` dependency. This apparently ends up in the `compile-internal` and `optional` scopes.

I think we should probably exclude the `compile-internal` and `optional` scopes, and use the dependabot security report for artifacts that actually come in as transitive dependencies for our users. The chance that an advisory for an optional/provided/test/built-time dependency actually impacts our build seems to small to justify the noise it adds.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1553/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1579,https://api.github.com/repos/apache/pekko/issues/1579,pekko,2737990637,1579,Timer: Add callback users can override to cleanup on cancellation,He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-13T09:57:32Z,2024-12-13T12:04:06Z,"Refs: https://github.com/netty/netty/pull/14571

I think it would be nice to have this in Pekko too","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1579/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1579,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XdVCR,pekko,2541047953,1579,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-12-13T10:03:38Z,2024-12-13T10:03:38Z,Which API are you thinking of here? Where do we have timers that support cancellation?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XdVCR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1579,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XdlzB,pekko,2541116609,1579,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-13T10:29:13Z,2024-12-13T10:29:13Z,"I mean when a `ByteBuf`/Resource is submitted to Pekko's scheduler with `scheduleOnce`, but then the task is canceled, then a callback may be need to release the related resource or return it to the pool.

This is some kind of resource management, and in the current implementation of the pekko stream, we lack the support for this too, where in rxjava/reactor-core , when an element is been dropped, an `onDrop` callback is been called.


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XdlzB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1579,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XeKiq,pekko,2541267114,1579,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-12-13T11:45:20Z,2024-12-13T11:45:20Z,"Gotcha, indeed `scheduleOnce` already returns a `Cancellable` which has a `cancel()` and an `isCancelled`, but doesn't allow 'listening' to the cancellation.

It doesn't look super easy to provide a way to 'listen' to the cancellation without sacrificing performance (or only sacrifices performance if someone is actually listening), but it might be worth a try.

Alternatively, or as a first step, perhaps we could provide a 'wrapper' that allows listening to the cancellation, but only if the cancellation happens through that wrapper?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XeKiq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1579,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XeSc9,pekko,2541299517,1579,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-13T12:04:05Z,2024-12-13T12:04:05Z,"Once the Netty one is merged, I will take a look at pekko's too, we found this because there is a OOM/LEAK in our traffic dispatcher :(","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XeSc9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/1585,pekko,2742092252,1585,nightlies and link validation failing because of repository.apache.org blockage,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2024-12-16T11:15:57Z,2025-01-08T08:24:47Z,"Our nightlies and link validation sometimes fail when it is ran on a GitHub Actions running that is blocked from repository.apache.org.

Infra seems open to create per-project buckets for the abuse thresholds, but we'd have to add a header to the requests to identify ourselves.

Looks like this would depend on https://github.com/coursier/coursier/issues/1203","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1585/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XtuYn,pekko,2545346087,1585,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-16T11:19:59Z,2024-12-16T11:19:59Z,"I wonder if we could try ordering the resolvers in sbt.

I've seen failures where we get issues loading 3rd party jars because our sbt setup seems to check repository.apache.org before checking maven central. Ideally, repository.apache.org should be checked last.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XtuYn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XuExO,pekko,2545437774,1585,NA,Humbedooh,496607,Daniel Gruno,humbedooh@apache.org,NA,2024-12-16T11:59:44Z,2024-12-16T11:59:44Z,"https://brettporter.wordpress.com/2009/06/16/configuring-maven-http-connections/ suggests you can set a custom user agent header for the requests. We could make use of this, if we come up with a standard format for denoting ASF projects. This would allow us to tailor rules to both be more lenient in these cases, as well as debug which projects or builds are causing issues.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XuExO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XuvVH,pekko,2545612103,1585,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-12-16T13:17:44Z,2024-12-16T13:17:44Z,"> I wonder if we could try ordering the resolvers in sbt.
> 
> I've seen failures where we get issues loading 3rd party jars because our sbt setup seems to check repository.apache.org before checking maven central. Ideally, repository.apache.org should be checked last.

I agree that would be a good thing to keep an eye on. 'Normal' CI builds shouldn't reference repository.a.o at all, though, right? And even when including `repository.apache.org`, I think sbt should use Maven Central first regardless of what additional things we put into `resolvers` (e.g. https://github.com/sbt/sbt/issues/1138)

> https://brettporter.wordpress.com/2009/06/16/configuring-maven-http-connections/ suggests you can set a custom user agent header for the requests

Yes (or arbitrary other headers). Pekko uses `sbt` instead of `mvn` to access the Maven repository, though, so that'd need a separate change.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XuvVH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9y0S,pekko,2566335762,1585,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-31T10:43:09Z,2024-12-31T10:43:09Z,"@raboof one source of strain that we put on repository.apache.org is from https://github.com/pjfanning/sbt-pekko-build

This has logic to find the latest snapshot versions by scraping pages served by repository.apache.org.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9y0S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZH-mZ,pekko,2569005465,1585,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-03T10:26:16Z,2025-01-03T10:26:16Z,"We haven't seen GitHub Actions runners get blocked anymore by the ""too many 404's on repository.apache.org"" rule since https://github.com/apache/ranger/pull/435 was merged. I now (ack'ed by infra) removed all those bans.

That should help, but GitHub Actions runners are still being banned for Bugzilla scraping (> 800req/hr to `show_bug.cgi`). I guess we should look into whether those are 'real' scrapers or some misconfigured job somewhere as well.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZH-mZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZIGOn,pekko,2569036711,1585,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-03T10:51:06Z,2025-01-03T10:51:06Z,"looks like this might be bingbot, filed https://issues.apache.org/jira/browse/INFRA-26405 to get a robots.txt in place","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZIGOn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1585,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZmoAj,pekko,2577039395,1585,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-08T08:24:45Z,2025-01-08T08:24:45Z,"(I didn't keep numbers to tell if the lifting of the '404' blocks helped, but at least they haven't reappeared yet. We're still affected by the other blocks, e.g. https://github.com/apache/pekko-persistence-jdbc/actions/runs/12663831987/job/35291029035 )","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZmoAj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1586,https://api.github.com/repos/apache/pekko/issues/1586,pekko,2742111949,1586,Nightly builds on main and 1.0.x broken (cluster tests),pjfanning,11783444,PJ Fanning,,CLOSED,2024-12-16T11:24:52Z,2024-12-16T20:35:04Z,"https://github.com/apache/pekko/actions

It seems likely that the recent changes to support Akka nodes in mixed Pekko/Akka clusters have broken something in our cluster code.

```
[info] *** 32 TESTS FAILED ***
[error] Failed tests:
[error] 	org.apache.pekko.cluster.MixedProtocolClusterSpec
[error] 	org.apache.pekko.cluster.ClusterLogVerboseEnabledSpec
[error] 	org.apache.pekko.cluster.JoinConfigCompatCheckerRollingUpdateSpec
[error] 	org.apache.pekko.cluster.ClusterLogVerboseDefaultSpec
[error] 	org.apache.pekko.cluster.ClusterLogDefaultSpec
[error] 	org.apache.pekko.cluster.ClusterSpec
[error] 	org.apache.pekko.cluster.JoinConfigCompatCheckerSpec
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1586/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1586,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XtzgR,pekko,2545367057,1586,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-16T11:29:13Z,2024-12-16T11:29:13Z,"The test failures seem to be timeouts when forming clusters.

```
[info] - must be allowed to join a cluster with a node using the pekko protocol *** FAILED *** (6 seconds, 100 milliseconds)
[info]   java.lang.AssertionError: assertion failed: timeout 6 seconds expired:
[info]   at scala.Predef$.assert(Predef.scala:279)
[info]   at org.apache.pekko.testkit.TestKitBase.poll$1(TestKit.scala:310)
[info]   at org.apache.pekko.testkit.TestKitBase.awaitCond(TestKit.scala:316)
[info]   at org.apache.pekko.testkit.TestKitBase.awaitCond$(TestKit.scala:299)
[info]   at org.apache.pekko.testkit.TestKit.awaitCond(TestKit.scala:982)
[info]   at org.apache.pekko.cluster.ClusterTestKit$ClusterTestUtil.formCluster(ClusterTestKit.scala:87)
[info]   at org.apache.pekko.cluster.MixedProtocolClusterSpec.$anonfun$new$2(MixedProtocolClusterSpec.scala:65)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XtzgR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1590,https://api.github.com/repos/apache/pekko/issues/1590,pekko,2742549058,1590,try to fix mixed akka/pekko issue again,pjfanning,11783444,PJ Fanning,,CLOSED,2024-12-16T14:31:01Z,2025-01-02T13:05:29Z,"see #1567 and #1586 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1590/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1590,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Xy0-e,pekko,2546683806,1590,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-16T20:35:43Z,2024-12-16T20:35:43Z,"Looks like the issue could be with `pekko.tcp` endpoints.

```
[WARN] [12/16/2024 00:29:19.649] [JoinConfigCompatCheckerRollingUpdateSpec-pekko.actor.internal-dispatcher-5] [Cluster(pekko://JoinConfigCompatCheckerRollingUpdateSpec)] Cluster Node [pekko.tcp://JoinConfigCompatCheckerRollingUpdateSpec@10.1.0.40:33355] - Trying to join member with wrong protocol, but was ignored, expected any of [[pekko]] but was [pekko.tcp]
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Xy0-e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1590,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X1mbS,pekko,2547410642,1590,NA,sadekmunawar,76756708,,,NA,2024-12-17T03:08:23Z,2024-12-17T03:08:23Z,"@pjfanning Thanks for taking care of this. For some reason, all tests passed locally. But I should've added a test for  `pekko.tcp` and `akka.tcp`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X1mbS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1590,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZDLZY,pekko,2567747160,1590,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-02T13:05:29Z,2025-01-02T13:05:29Z,#1664 has been merged to 1.1 branch,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZDLZY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1591,https://api.github.com/repos/apache/pekko/issues/1591,pekko,2742704159,1591,Run some cluster tests for PRs,pjfanning,11783444,PJ Fanning,,OPEN,2024-12-16T15:30:43Z,2024-12-16T15:36:19Z,"We've hit issues more than once where nightly tests stop working after PR merged. See #1586  for example.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1591/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1591,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XwCpR,pekko,2545953361,1591,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-16T15:36:12Z,2024-12-16T15:36:12Z,I will open up a pr,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6XwCpR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1595,https://api.github.com/repos/apache/pekko/issues/1595,pekko,2743396891,1595,stop running link validator on every PR commit,pjfanning,11783444,PJ Fanning,,CLOSED,2024-12-16T21:04:50Z,2024-12-17T08:40:46Z,"The job is so brittle. We can afford to miss an occasional broken link.

We are really stressing repository.apache.org. #1585

See https://github.com/apache/pekko/actions/runs/12361018308

Can we just run it once a night?
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1595/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1595,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X3H9z,pekko,2547810163,1595,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2024-12-17T08:36:54Z,2024-12-17T08:36:54Z,"> The job is so brittle. We can afford to miss an occasional broken link.
> 
> We are really stressing repository.apache.org. #1585

(I'm not convinced it's us that's causing GitHub Actions runners to get blocked from repository.apache.org, but indeed we're impacted by it)

> See https://github.com/apache/pekko/actions/runs/12361018308
> 
> Can we just run it once a night?

Yes, much in favour #1309","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X3H9z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1595,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X3J_s,pekko,2547818476,1595,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-17T08:40:45Z,2024-12-17T08:40:45Z,closing as duplicate of #1309,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X3J_s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1610,https://api.github.com/repos/apache/pekko/issues/1610,pekko,2744850254,1610,SourceWithContextSpec test that fails intermittently,pjfanning,11783444,PJ Fanning,,CLOSED,2024-12-17T12:46:40Z,2024-12-18T03:28:17Z,"* Was part of a 'Nightly Build' but one that was temporarily enabled to run for PRs.
* Failed in a few of the matrix of runs but passed in most runs

```
[12-17 12:13:48.607] [info] - must Apply a viaFlow with optional elements using unsafeOptionalVia *** FAILED *** (4 seconds, 24 milliseconds)
[12-17 12:13:48.607] [info]   java.lang.AssertionError: assertion failed: expected OnNext((Some(1),1)), found OnNext((None,2))
[12-17 12:13:48.607] [info]   at scala.Predef$.assert(Predef.scala:223)
[12-17 12:13:48.607] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:473)
[12-17 12:13:48.607] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[12-17 12:13:48.607] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[12-17 12:13:48.607] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[12-17 12:13:48.607] [info]   at org.apache.pekko.stream.testkit.TestSubscriber$ManualProbe.$anonfun$expectNextN$1(StreamTestKit.scala:585)
[12-17 12:13:48.607] [info]   at scala.collection.Iterator.foreach(Iterator.scala:943)
[12-17 12:13:48.607] [info]   at scala.collection.Iterator.foreach$(Iterator.scala:943)
[12-17 12:13:48.607] [info]   at scala.collection.AbstractIterator.foreach(Iterator.scala:1431)
[12-17 12:13:48.608] [info]   at scala.collection.IterableLike.foreach(IterableLike.scala:74)
[12-17 12:13:48.608] [info]   at scala.collection.IterableLike.foreach$(IterableLike.scala:73)
[12-17 12:13:48.608] [info]   at scala.collection.AbstractIterable.foreach(Iterable.scala:56)
[12-17 12:13:48.608] [info]   at org.apache.pekko.stream.testkit.TestSubscriber$ManualProbe.expectNextN(StreamTestKit.scala:585)
[12-17 12:13:48.608] [info]   at org.apache.pekko.stream.testkit.TestSubscriber$ManualProbe.expectNext(StreamTestKit.scala:554)
[12-17 12:13:48.608] [info]   at org.apache.pekko.stream.scaladsl.SourceWithContextSpec.$anonfun$new$55(SourceWithContextSpec.scala:251)
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1610,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X5Tui,pekko,2548382626,1610,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-17T12:52:25Z,2024-12-17T12:52:25Z,I will look into this weekend ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X5Tui/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1610,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X6L71,pekko,2548612853,1610,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-17T14:29:18Z,2024-12-17T14:29:18Z,"![image](https://github.com/user-attachments/assets/fa8933ce-d62f-4899-898a-ee8a7521f49c)
I looked into it, the current implementation is using a `Merge` which will not keep the orgin order.
@mdedetrich cc

So I think the current implementation is broken.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6X6L71/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1613,https://api.github.com/repos/apache/pekko/issues/1613,pekko,2751032835,1613,Add Sink.none operator,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-19T17:32:46Z,2024-12-28T12:23:23Z,"Motivation:
When took a look at the current PR in Kotlin Flow, I think we should have this operator too.
`Sink#none` operator will just works as the Java's `Stream#none`.

refs: https://github.com/Kotlin/kotlinx.coroutines/issues/4212

```scala
  def none[T](p: T => Boolean): Sink[T, Future[Boolean]] =
    Flow[T].foldWhile(true)(util.ConstantFun.scalaIdentityFunction)(_ && !p(_))
      .toMat(Sink.head)(Keep.right)
      .named(""noneSink"")
```
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1613/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1613,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Eyp,pekko,2564312233,1613,NA,beyondyuefei,6965937,李强,,NA,2024-12-28T12:21:57Z,2024-12-28T12:21:57Z,cool~,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Eyp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1618,https://api.github.com/repos/apache/pekko/issues/1618,pekko,2753864696,1618,Remove : SupervisedGraphStageLogic,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-21T09:37:51Z,2024-12-30T09:34:06Z,"Motivation:

I found it's unused anymore.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1618/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1618,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y5j_z,pekko,2565226483,1618,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-30T09:20:39Z,2024-12-30T09:20:39Z,"I track the PRs more than the issues. The PR is in the 1.1.x branch and will appear in 1.1.3 release.

This issue is related to #864","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y5j_z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1624,https://api.github.com/repos/apache/pekko/issues/1624,pekko,2754640099,1624,Reduce memory usage when large number of GraphStageLogic involves,He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-22T12:40:34Z,2024-12-22T13:11:48Z," @queimadus's report in https://github.com/apache/pekko/discussions/1566
refs: https://github.com/apache/pekko/pull/1623

and with the code below
```scala
import org.apache.pekko.actor.ActorSystem
import org.apache.pekko.stream.scaladsl.{Sink, Source}
import org.apache.pekko.util.ByteString

import scala.concurrent.Await

object PekkoQuickstart extends App {
  private implicit val system: ActorSystem = ActorSystem()

  val s = Source
    .repeat(())
    .map(_ => ByteString('a' * 400000))
    .take(1000000)
    .prefixAndTail(50000)
    .flatMapConcat { case (prefix, tail) => Source(prefix).concatLazy(tail) }

  val r = Source.empty
    .concatAllLazy(List.tabulate(30000)(_ => s): _*)
    .runWith(Sink.ignore)

  Await.result(r, scala.concurrent.duration.Duration.Inf)
  println(r.value)

//  Source
//    .repeat(s)
//    .take(30000)
//    .flatMapConcat(x => x)
//    .runWith(Sink.ignore)
//    .onComplete(println(_))

//  Source.empty
//    .concatAllLazy(List.tabulate(30000)(_ => Source.lazySource(() => s)): _*)
//    .runWith(Sink.ignore).onComplete(println(_))
}

```
<img width=""1307"" alt=""image"" src=""https://github.com/user-attachments/assets/9541cc44-f1f4-44aa-92d8-75ce4a954557"" />

we can get a heap dump of 
![image](https://github.com/user-attachments/assets/4a5860c6-a43a-449d-99ff-901a17a5ac59)

<img width=""1780"" alt=""image"" src=""https://github.com/user-attachments/assets/51dc933d-7590-468d-8ff4-cd8c8eb07087"" />

To fix the problem, I think we need to clean the logic once we are done with a sub-graph, but the current code needs to get a snapshot for the materializer

To fix the problem I think we need to recycle the graph stage logics, which means more changes need to be done in the interpreter.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1624,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Yftex,pekko,2558449585,1624,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-22T13:03:25Z,2024-12-22T13:03:25Z,"We can see, that there are 30000 logics, which are brought in by the concatAll, to reduce memory, we may need to recycle the logics once it's been done (then will not show up in the snapshot maybe?)

Another problem is, to support the debug, we may let the `GraphStageLogic extends GraphStageLogicInfo`, etc thing after the logic is done, switch the GraphStageLogic with GraphStageLogicInfo implementation","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Yftex/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1626,https://api.github.com/repos/apache/pekko/issues/1626,pekko,2755104425,1626,Feature request: Add Source#create method ,He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-23T03:02:13Z,2025-01-24T20:01:59Z,"Motivation:
Even currently, we have `Source#unfold` and `Source#queue,` which is still a bit different from the Reactor's `Flux#create` method.

When we want to control progress, we still make it lazy. btw, the behavior seems to be expressed with Source#lazySource and Source#queue.

I think the logic should not be that hard to implement but will make users' lives much easier.

refs: https://projectreactor.io/docs/core/release/reference/coreFeatures/programmatically-creating-sequence.html#producing.create

```java
Flux<String> bridge = Flux.create(sink -> {
    myEventProcessor.register(
      new MyEventListener<String>() {

        public void onDataChunk(List<String> chunk) {
          for(String s : chunk) {
            sink.next(s);
          }
        }

        public void processComplete() {
            sink.complete();
        }
    });
});
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1626/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1627,https://api.github.com/repos/apache/pekko/issues/1627,pekko,2761547373,1627,BroadcastHub can loop many times to clean the ring,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-28T06:31:10Z,2024-12-31T10:26:39Z,"refs: https://github.com/akka/akka/issues/31530

As described in the refs issue, I am including it here.

The `queue` is maintained by an Array, and there is a writer and reader index. The max buffer size is limited to 256 by default.

So we only need to clean the `startIndex = head & mask` ~ `endIndex = finalOffset & mask`, avoid the loop from which maybe `Int.MinValue` ~ `Int.MaxValue`.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1627/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1633,https://api.github.com/repos/apache/pekko/issues/1633,pekko,2761723671,1633,limit spin loop in TLSActor,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-28T13:31:57Z,2024-12-28T13:40:55Z,"Motivation:
There is an Akka 2.6.21 release, which ships this fix with https://github.com/akka/akka/pull/31975

As the release is targeting 2.6.21 which keeps the Apache 2.0 License, will it be safe to port that?

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1633/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1633,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2If4,pekko,2564327416,1633,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T13:35:32Z,2024-12-28T13:35:32Z,anything in the 2.6 branch is ok to cherry pick to Pekko,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2If4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1633,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Ivb,pekko,2564328411,1633,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T13:40:55Z,2024-12-28T13:40:55Z,"Close it now, after checking the code, it's been fixed by @pjfanning ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Ivb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/1634,pekko,2761739384,1634,Maybe memory leak in Netty 4 transport.,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-28T14:17:23Z,2025-01-28T11:35:47Z,"refs:

OOM reported: https://issues.apache.org/jira/browse/FLINK-36290

https://issues.apache.org/jira/browse/FLINK-36510
~~I think there will be some leak, eg, not calling `ByteBuf.release` somewhere.~~

Update:
The current code is right.

 I think the only way to find where it leaked is using   -Dio.netty.leakDetection.level=PARANOID and return the test,
Or they can rerun the tests with -Dio.netty.tryReflectionSetAccessible=true.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1634/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2LHz,pekko,2564338163,1634,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T14:30:19Z,2024-12-28T14:30:19Z,The link makes no mention of Pekko. Can you remove the labels (bug and backport) until there is Pekko specific POC for this?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2LHz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2MID,pekko,2564342275,1634,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T14:51:54Z,2024-12-28T14:51:54Z,We now have https://github.com/apache/pekko/pull/1635 but can we take a little bit of time and care. There is no point rushing this. The change is not really usable until we do a release. Can we slow down the effort and stop opening multiple PRs at the same time?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2MID/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2MQW,pekko,2564342806,1634,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T14:54:43Z,2024-12-28T14:54:43Z,@He-Pin you linked https://issues.apache.org/jira/browse/FLINK-36788 - I don't understand why. The real issue appears to be https://issues.apache.org/jira/browse/FLINK-36510,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2MQW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2QQF,pekko,2564359173,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T15:13:12Z,2024-12-28T15:13:12Z,"@pjfanning Sorry,I wrong linked , have updated to the right link","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2QQF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2WVt,pekko,2564384109,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T17:17:28Z,2024-12-28T17:17:28Z,"Actually, the code is Right:(,

Because it extends the `SimpleChannelInboundHandler` which will do auto-release.

```scala
finally {
            if (autoRelease && release) {
                ReferenceCountUtil.release(msg);
            }
        }
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2WVt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2XSX,pekko,2564387991,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T17:38:40Z,2024-12-28T17:38:40Z,"
Do local run with cluster/MultiJvm/test and    -Dio.netty.leakDetection.level=PARANOID to find if it leaked.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2XSX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Xxc,pekko,2564389980,1634,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T17:49:44Z,2024-12-28T17:49:44Z,"Isn't it good that there is no leak?

Can we close this?

Any ideas what might be going wrong in Flink tests? https://issues.apache.org/jira/browse/FLINK-36290

Do we need the exception handling changes that you were trying to make in #1635 ?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Xxc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2YEY,pekko,2564391192,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T17:57:32Z,2024-12-28T17:57:32Z,"Yes, I run it locally, and no leak, otherwise it will prints something like:

```
LEAK: {}.release() was not called before it's garbage-collected.
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2YEY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2YLw,pekko,2564391664,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T18:00:13Z,2024-12-28T18:00:13Z,"@pjfanning I think the exception handing is nice, I will add it in another PR.
Iet's close it after https://github.com/apache/pekko/pull/1639 merged and checked it again.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2YLw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Ya-,pekko,2564392638,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-28T18:04:30Z,2024-12-28T18:04:30Z,"@pjfanning I think the only way to find where it leaked is using `  -Dio.netty.leakDetection.level=PARANOID` and return the test, which will print the detailed leaked position.

Or they can rerun the tests with `-Dio.netty.tryReflectionSetAccessible=true`.

The issue seems only on Java 11+, so maybe try with `-Dio.netty.tryReflectionSetAccessible=true`.

`-Dio.netty.allocator.type=unpooled` can keep the netty 3 unpooled behavior.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2Ya-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1634,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Zr3K5,pekko,2578412217,1634,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-08T19:00:44Z,2025-01-08T19:00:44Z,"<img width=""1344"" alt=""image"" src=""https://github.com/user-attachments/assets/6079c024-d88e-48d8-9a37-3610175d8ce3"" />
<img width=""965"" alt=""image"" src=""https://github.com/user-attachments/assets/47f5b7ac-1520-4318-a767-4ec8e81fd4cd"" />


I think the leak is not on pekko side.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Zr3K5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1640,https://api.github.com/repos/apache/pekko/issues/1640,pekko,2761847532,1640,"No transport is loaded for protocol: [pekko], available protocols: [pekko.tcp]",He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-28T18:55:47Z,2024-12-28T19:05:26Z,"See this in testing:
```
No transport is loaded for protocol: [pekko], available protocols: [pekko.tcp]
```
https://github.com/apache/pekko/actions/runs/12528863513/job/34943874467#step:7:5682","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1640/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1640,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2bS4,pekko,2564404408,1640,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T19:00:42Z,2024-12-28T19:00:42Z,That run is for a PR that is not yet ready. #1594 ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2bS4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1640,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2bsr,pekko,2564406059,1640,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-28T19:05:24Z,2024-12-28T19:05:24Z,"Ok. I can see that this run may not be associated with the PR.

No tests failed in this run. Maybe, the tests were negative tests where this sort of logging is expected?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y2bsr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1645,https://api.github.com/repos/apache/pekko/issues/1645,pekko,2762678142,1645,Feature request: Add Flow#statefulMapAsync operator,He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-30T05:43:02Z,2025-01-18T02:57:53Z,"I just found this in DAML, and was expected to implement it too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1645/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1646,https://api.github.com/repos/apache/pekko/issues/1646,pekko,2763921230,1646,Failed : java.lang.NullPointerException: IN ActorGraphInterpreterSpec,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-31T03:51:33Z,2024-12-31T12:17:08Z,"```
Error:  [12/31/2024 00:42:46.676] [ActorGraphInterpreterSpec-pekko.test.stream-dispatcher-11] [pekko://ActorGraphInterpreterSpec/system/Materializers/StreamSupervisor-1348/flow-18-0-broadcast] Error during postStop in [ActorOutputBoundary(port=Broadcast.out1(295193255), demand=0, finished=false)]: null
java.lang.NullPointerException
	at org.apache.pekko.stream.stage.GraphStageLogic.afterPostStop(GraphStage.scala:1378)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.finalizeStage(GraphInterpreter.scala:615)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.afterStageHasRun(GraphInterpreter.scala:594)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:404)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute(ActorGraphInterpreter.scala:71)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute$(ActorGraphInterpreter.scala:67)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$RequestMore.execute(ActorGraphInterpreter.scala:299)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

Error:  [12/31/2024 00:42:46.707] [ActorGraphInterpreterSpec-pekko.test.stream-dispatcher-11] [pekko://ActorGraphInterpreterSpec/system/Materializers/StreamSupervisor-1348/flow-19-0-broadcast] Error during postStop in [ActorOutputBoundary(port=Broadcast.out1(1021457987), demand=0, finished=false)]: null
java.lang.NullPointerException
	at org.apache.pekko.stream.stage.GraphStageLogic.afterPostStop(GraphStage.scala:1378)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.finalizeStage(GraphInterpreter.scala:615)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.afterStageHasRun(GraphInterpreter.scala:594)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:404)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute(ActorGraphInterpreter.scala:71)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute$(ActorGraphInterpreter.scala:67)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$RequestMore.execute(ActorGraphInterpreter.scala:299)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

```

refs: https://github.com/apache/pekko/actions/runs/12553464982/job/35000865950","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1646/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1646,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9D9V,pekko,2566143829,1646,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-31T05:27:06Z,2024-12-31T05:27:06Z,"```scala
  protected[stream] def afterPostStop(): Unit = {
    if (_stageActor ne null) {
      _stageActor.stop()
      _stageActor = null
    }
    // make sure any invokeWithFeedback after this fails fast
    // and fail current outstanding invokeWithFeedback promises
    val inProgress = asyncCallbacksInProgress.getAndSet(null)
    if (inProgress.nonEmpty) {
      val exception = streamDetachedException
      inProgress.foreach(_.tryFailure(exception))
    }
    cleanUpSubstreams(OptionVal.None)
  }
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9D9V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1646,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9F1F,pekko,2566151493,1646,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-31T05:43:55Z,2024-12-31T05:43:55Z,"```
[ERROR] [12/31/2024 13:43:24.671] [ActorGraphInterpreterSpec-pekko.actor.default-dispatcher-6] [pekko://ActorGraphInterpreterSpec/system/Materializers/StreamSupervisor-0/flow-0-0-broadcast] Error during postStop in [ActorOutputBoundary(port=Broadcast.out0(416201381), demand=0, finished=false)]: null
java.lang.NullPointerException
	at org.apache.pekko.stream.stage.GraphStageLogic.afterPostStop(GraphStage.scala:1378)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.finalizeStage(GraphInterpreter.scala:615)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.afterStageHasRun(GraphInterpreter.scala:594)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:404)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute(ActorGraphInterpreter.scala:71)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute$(ActorGraphInterpreter.scala:67)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$RequestMore.execute(ActorGraphInterpreter.scala:299)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)

[ERROR] [12/31/2024 13:43:24.718] [ActorGraphInterpreterSpec-pekko.actor.default-dispatcher-5] [pekko://ActorGraphInterpreterSpec/system/Materializers/StreamSupervisor-0/flow-1-0-broadcast] Error during postStop in [ActorOutputBoundary(port=Broadcast.out0(1057507014), demand=0, finished=false)]: null
java.lang.NullPointerException
	at org.apache.pekko.stream.stage.GraphStageLogic.afterPostStop(GraphStage.scala:1378)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.finalizeStage(GraphInterpreter.scala:615)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.afterStageHasRun(GraphInterpreter.scala:594)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.execute(GraphInterpreter.scala:404)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.runBatch(ActorGraphInterpreter.scala:662)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute(ActorGraphInterpreter.scala:71)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$SimpleBoundaryEvent.execute$(ActorGraphInterpreter.scala:67)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$RequestMore.execute(ActorGraphInterpreter.scala:299)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.processEvent(ActorGraphInterpreter.scala:637)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.org$apache$pekko$stream$impl$fusing$ActorGraphInterpreter$$processEvent(ActorGraphInterpreter.scala:813)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter$$anonfun$receive$1.applyOrElse(ActorGraphInterpreter.scala:831)
	at org.apache.pekko.actor.Actor.aroundReceive(Actor.scala:547)
	at org.apache.pekko.actor.Actor.aroundReceive$(Actor.scala:545)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundReceive(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.receiveMessage(ActorCell.scala:590)
	at org.apache.pekko.actor.ActorCell.invoke(ActorCell.scala:557)
	at org.apache.pekko.dispatch.Mailbox.processMailbox(Mailbox.scala:280)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:241)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:253)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9F1F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1646,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9Gu5,pekko,2566155193,1646,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-31T05:53:12Z,2024-12-31T05:53:12Z,"without fix :
```scala
[WARN] [12/31/2024 13:52:42.579] [ActorGraphInterpreterSpec-pekko.actor.default-dispatcher-6] [pekko://ActorGraphInterpreterSpec/user/StreamSupervisor*] received dead letter from Actor[pekko://ActorGraphInterpreterSpec/system/testProbe-3#1630451049]: GetChildren
--- Stream actors debug dump ---
Stream is completed. No debug information is available


received 1 excess messages on ErrorFilter(class java.lang.NullPointerException,None,Left(),false)
java.lang.AssertionError: received 1 excess messages on ErrorFilter(class java.lang.NullPointerException,None,Left(),false)
	at org.apache.pekko.testkit.EventFilter.intercept(TestEventListener.scala:134)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreterSpec.$anonfun$new$19(ActorGraphInterpreterSpec.scala:415)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:20)
	at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1239)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
	at org.apache.pekko.stream.testkit.StreamSpec.withFixture(StreamSpec.scala:46)
	at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1237)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1249)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1249)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1231)
	at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:64)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1308)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1308)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1307)
	at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:64)
	at org.scalatest.Suite.run(Suite.scala:1114)
	at org.scalatest.Suite.run$(Suite.scala:1096)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:64)
	at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1353)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1353)
	at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1351)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:64)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
	at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:64)
	at org.scalatest.tools.SuiteRunner.run(SuiteRunner.scala:47)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13(Runner.scala:1321)
	at org.scalatest.tools.Runner$.$anonfun$doRunRunRunDaDoRunRun$13$adapted(Runner.scala:1315)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.tools.Runner$.doRunRunRunDaDoRunRun(Runner.scala:1315)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24(Runner.scala:992)
	at org.scalatest.tools.Runner$.$anonfun$runOptionallyWithPassFailReporter$24$adapted(Runner.scala:970)
	at org.scalatest.tools.Runner$.withClassLoaderAndDispatchReporter(Runner.scala:1481)
	at org.scalatest.tools.Runner$.runOptionallyWithPassFailReporter(Runner.scala:970)
	at org.scalatest.tools.Runner$.run(Runner.scala:798)
	at org.scalatest.tools.Runner.run(Runner.scala)
	at org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.runScalaTest2or3(ScalaTestRunner.java:43)
	at org.jetbrains.plugins.scala.testingSupport.scalaTest.ScalaTestRunner.main(ScalaTestRunner.java:26)


Coroner Thread Count started at 18, ended at 15, peaked at 20 in org.apache.pekko.stream.impl.fusing.ActorGraphInterpreterSpec
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y9Gu5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1647,https://api.github.com/repos/apache/pekko/issues/1647,pekko,2763973066,1647,Nightly build 1.1.x is actually testing 1.0.x,He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-31T05:32:08Z,2024-12-31T10:26:23Z,"refs: https://github.com/apache/pekko/actions/runs/12553464982/job/35000866387

Actually the `inprogress` is now `callbacks`, but as the `checkout` still checkout the `1.0.x` in 1.1.x nightly build, so we are actually testing the 1.0.x","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1647/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/1652,pekko,2764293608,1652,Feature Request:  Add Flow#concatAllDeferred operator.,He-Pin,501740,He-Pin(kerr),,OPEN,2024-12-31T11:51:56Z,2025-01-02T16:53:22Z,"Motivation:
The original issue is https://github.com/apache/pekko/pull/1623 and https://github.com/apache/pekko/discussions/1566 , 
which do help find some problems, but with how the current interpreter and `concatAllLazy` are implemented, we can not fix the problem.

refs: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#concat-java.lang.Iterable-

So a new operator is needed.

Modification:
I would like to add a new operator `concatAllDeferred` to support this usage.
```scala
  def concatAllDeferred[U >: Out](those: Graph[SourceShape[U], _]*): Repr[U] =
    concatLazy(Source.lazySource(
      () => Source(those).flatMapConcat(ConstantFun.scalaIdentityFunction)))
```

Result:
```scala
package org.apache.pekko.stream.scaladsl

import org.apache.pekko.actor.ActorSystem
import org.apache.pekko.util.ByteString

import scala.concurrent.Await

object PekkoQuickstart extends App {
  private implicit val system: ActorSystem = ActorSystem()

  val s = Source
    .repeat(())
    .map(_ => ByteString('a' * 400000))
    .take(1000000)
    .prefixAndTail(50000)
    .flatMapConcat { case (prefix, tail) => Source(prefix).concatLazy(tail) }

  val r = Source.empty
    .concatAllDeferred(List.tabulate(30000)(_ => s): _*)
    .runWith(Sink.ignore)

  Await.result(r, scala.concurrent.duration.Duration.Inf)
  println(r.value)

  //  Source
  //    .repeat(s)
  //    .take(30000)
  //    .flatMapConcat(x => x)
  //    .runWith(Sink.ignore)
  //    .onComplete(println(_))

  //  Source.empty
  //    .concatAllLazy(List.tabulate(30000)(_ => Source.lazySource(() => s)): _*)
  //    .runWith(Sink.ignore).onComplete(println(_))
}

```

runs without problem


<img width=""1174"" alt=""image"" src=""https://github.com/user-attachments/assets/188ac308-15ad-42e8-adf0-3b1ccafc4c3c"" />


","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1652/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-Bkx,pekko,2566396209,1652,NA,queimadus,1107697,Bruno Maia,bruno.mm.maia@gmail.com,NA,2024-12-31T12:09:51Z,2024-12-31T12:09:51Z,"Is adding a new operator for this worth it? Since it's just almost the same as calling `flatMapConcat` directly?

For more context, this is only really a problem when using the graphDSL and having to connect different these kinds of flows into a many-port Concat stage. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-Bkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-CEW,pekko,2566398230,1652,NA,He-Pin,501740,He-Pin(kerr),,NA,2024-12-31T12:12:50Z,2024-12-31T12:12:50Z,"For easy usage, I think that's ok, but at least, we need to update the doc about this, the current two pending PRs are still valid.
And it help me find some problems in the interpreter too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-CEW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZDxlN,pekko,2567903565,1652,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-02T14:58:40Z,2025-01-02T14:58:40Z,"@raboof wdyt about this, I think this is the only way for @queimadus 's user case, or we can add some documents about that.

This method should be handy.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZDxlN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZENJN,pekko,2568016461,1652,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-02T16:10:53Z,2025-01-02T16:10:53Z,"Hmm, this seems like quite a corner case.

If you're using Streams like this, you'll have to be quite aware of those intricacies already. At that point perhaps it isn't too much to ask the user to combine `concatLazy`, ` lazySource` and `flatMapConcat` (would `flatten` work here?). Adding `concatAllDeferred` might make things shorter, but I'm not sure it'd make things easier to understand. What would the scaladoc say - can we give a clear description of in what kinds of situations you'd use this function?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZENJN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1652,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEbhj,pekko,2568075363,1652,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-02T16:52:48Z,2025-01-02T16:52:48Z,"eg: the `concatAllLazy` will materialize all graphs before they are pulled and keep them in memory until the resulting graph completes, if you have large numbers of graphs that can not be what you want, try `concatAllDeferred`.

At least it took me many hours to find the true problem.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEbhj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1653,https://api.github.com/repos/apache/pekko/issues/1653,pekko,2764314678,1653,"Failed: StreamConvertersSpec, an implementation is missing",He-Pin,501740,He-Pin(kerr),,CLOSED,2024-12-31T12:15:38Z,2024-12-31T13:33:23Z,"The cause is :
```scala
        override def spliterator(): util.Spliterator[Unit] = ???
```

refs: https://github.com/apache/pekko/actions/runs/12558913651/job/35013825717?pr=1650#step:7:19268

```scala
[ERROR] [12/31/2024 20:11:02.525] [StreamConvertersSpec-pekko.actor.default-dispatcher-6] [pekko://StreamConvertersSpec/system/Materializers/StreamSupervisor-0/flow-0-0-ignoreSink] Error during preStart in [org.apache.pekko.stream.impl.JavaStreamSource$$anon$1-fromJavaStream]: an implementation is missing
scala.NotImplementedError: an implementation is missing
	at scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
	at org.apache.pekko.stream.scaladsl.StreamConvertersSpec$EmptyStream$1.spliterator(StreamConvertersSpec.scala:114)
	at org.apache.pekko.stream.impl.JavaStreamSource$$anon$1.preStart(JavaStreamSource.scala:39)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreter.init(GraphInterpreter.scala:317)
	at org.apache.pekko.stream.impl.fusing.GraphInterpreterShell.init(ActorGraphInterpreter.scala:631)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.tryInit(ActorGraphInterpreter.scala:740)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.preStart(ActorGraphInterpreter.scala:789)
	at org.apache.pekko.actor.Actor.aroundPreStart(Actor.scala:558)
	at org.apache.pekko.actor.Actor.aroundPreStart$(Actor.scala:558)
	at org.apache.pekko.stream.impl.fusing.ActorGraphInterpreter.aroundPreStart(ActorGraphInterpreter.scala:729)
	at org.apache.pekko.actor.ActorCell.create(ActorCell.scala:653)
	at org.apache.pekko.actor.ActorCell.invokeAll$1(ActorCell.scala:523)
	at org.apache.pekko.actor.ActorCell.systemInvoke(ActorCell.scala:545)
	at org.apache.pekko.dispatch.Mailbox.processAllSystemMessages(Mailbox.scala:297)
	at org.apache.pekko.dispatch.Mailbox.run(Mailbox.scala:232)
	at org.apache.pekko.dispatch.Mailbox.exec(Mailbox.scala:245)
	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:175)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1653/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1653,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-HLC,pekko,2566419138,1653,NA,pjfanning,11783444,PJ Fanning,,NA,2024-12-31T12:43:50Z,2024-12-31T12:43:50Z,looks like this was caused by https://github.com/apache/pekko/pull/1249,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Y-HLC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1660,https://api.github.com/repos/apache/pekko/issues/1660,pekko,2765395514,1660,Feature request: Add Flow#flatMapLatest,He-Pin,501740,He-Pin(kerr),,CLOSED,2025-01-02T03:21:01Z,2025-01-03T13:41:40Z,"Motivation:
https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1660/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1660,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI3wz,pekko,2569239603,1660,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-03T13:41:40Z,2025-01-03T13:41:40Z,Seems SwtichMap is a better name.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI3wz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1661,https://api.github.com/repos/apache/pekko/issues/1661,pekko,2765428005,1661,Feature request: Add Flow#flattenConcat,He-Pin,501740,He-Pin(kerr),,CLOSED,2025-01-02T04:25:39Z,2025-01-02T16:14:30Z,"Motivation:
Refs:
https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-concat.html
And pekko already has `flattenMerge`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1661/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEJVQ,pekko,2568000848,1661,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-02T16:00:24Z,2025-01-02T16:00:24Z,"hmm, we already have your #937 - how would this be different?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEJVQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1661,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEOZW,pekko,2568021590,1661,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-02T16:14:24Z,2025-01-02T16:14:24Z,"@raboof Wow, I forgot this, but I planed to add a flatmapConcat with a parallelism, let't me close this:)
 ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZEOZW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1662,https://api.github.com/repos/apache/pekko/issues/1662,pekko,2765657832,1662,Feature request：Add Flow#distinctUntilChanged,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-02T08:56:00Z,2025-01-02T08:56:05Z,"Motivation:
refs: https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html

Even it can be done with statefulMap, but seems better to support it out of box.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1662/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1663,https://api.github.com/repos/apache/pekko/issues/1663,pekko,2765681900,1663,"Feature request: optimize `recoverWith` for `single`,`future` and `failed` source",He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-02T09:15:12Z,2025-01-24T20:02:00Z,"Motivation:
To avoid materialization.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1663/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1668,https://api.github.com/repos/apache/pekko/issues/1668,pekko,2767584395,1668,Check for type pollution - can have a major performance impact,pjfanning,11783444,PJ Fanning,,OPEN,2025-01-03T13:31:32Z,2025-01-03T13:44:09Z,"Check for type pollution - can have a major performance impact. Basically, Java Runtime up to v23 has an issue in a secondary cache used internally to track results of instanceof checks.

https://bugs.openjdk.org/browse/JDK-8180450

https://github.com/FasterXML/jackson-databind/pull/4848

See the micronaut utility mentioned in the issue description.

It may also be useful to check pekko-http.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1668/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1668,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI4gn,pekko,2569242663,1668,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-03T13:44:07Z,2025-01-03T13:44:07Z,Tools: https://github.com/RedHatPerf/type-pollution-agent,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZI4gn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/1670,pekko,2768701872,1670,Deprecate the `org.apache.pekko.japi.Function` in 1.2.0,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-04T09:28:42Z,2025-01-06T11:38:57Z,"There are :
```
org.apache.pekko.japi.Function
```
and 

```
org.apache.pekko.japi.function.Function
```

we should deprecate all of it in `org.apache.pekko.japi.Function` and remove it in the next release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1670/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPhG7,pekko,2570981819,1670,NA,mdedetrich,2337269,Matthew de Detrich,mdedetrich@gmail.com,NA,2025-01-04T09:36:05Z,2025-01-04T09:36:05Z,"> we should deprecate all of it in `org.apache.pekko.japi.Function` and remove it in the next release.

We are not allowed to remove deprecated methods until Pekko 2.x.x due to semver. Deprecating methods is fine but can only happen in next minor (not patch) release.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPhG7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPkVm,pekko,2570995046,1670,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-04T09:39:25Z,2025-01-04T09:39:25Z,"@mdedetrich Yes, we should mark it deprecated and add overload methods on the user sides.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPkVm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPn_C,pekko,2571009986,1670,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-04T09:43:25Z,2025-01-04T09:43:25Z,"We're already discussing (in mailing list) the idea of making the next non-patch release a 2.0.0 so we may end up having to deprecate in 2.0.0 and remove in 3.0.0.
That is, there might not be a 1.2.0 release. We may have missed the boat by not deprecating this sooner.
Still, we could deprecate now but it could be a long time before we get to remove the code.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPn_C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPpeC,pekko,2571016066,1670,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-04T09:44:59Z,2025-01-04T09:44:59Z,I don't think this is a task for a first time contributor. Some changes could be contentious and first time contributors often don't want to get into big debates about changes.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZPpeC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZWsZM,pekko,2572863052,1670,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-06T10:53:56Z,2025-01-06T10:53:56Z,"This is indeed an unfortunate puzzle. We have public API's that accept `org.apache.pekko.japi.Function` as a parameter. I don't think we should mark `org.apache.pekko.japi.Function` as deprecated when we still have non-deprecated APIs that require it. Replacing those with variants that take `org.apache.pekko.japi.function.Function` is not easy, since having both variants is ambiguous when called with a Java lambda. I don't see an elegant way to make this migration. Perhaps we should just make this breaking change 'in one go' in 2.0.0 without a deprecation cycle - after all, these classes aren't really meant to be used 'on their own', but only in the context of being used as parameters.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZWsZM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1670,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZW9pn,pekko,2572933735,1670,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-06T11:38:19Z,2025-01-06T11:38:19Z,">since having both variants is ambiguous when called with a Java lambda. 

I totally missed that!!!","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZW9pn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1672,https://api.github.com/repos/apache/pekko/issues/1672,pekko,2768726596,1672,Feature request: Add flatmapConcat with parallelism,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-04T09:51:33Z,2025-01-24T20:02:01Z,"Motivation:
Background:
https://github.com/akka/alpakka/pull/2982#discussion_r1214175798

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1672/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1673,https://api.github.com/repos/apache/pekko/issues/1673,pekko,2768820578,1673,Feature request: Add Flow#lazyMap operator?,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-04T12:40:07Z,2025-01-04T12:40:21Z,"Motivation:
Upstream https://github.com/apache/pekko-http/pull/462 and the `statefulMap` in pekko-http's `StreamUtils#statefulMap`.
Seems like the PR is mostly ready.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1673/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1679,https://api.github.com/repos/apache/pekko/issues/1679,pekko,2768972432,1679,Failed: Address already in use,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-04T19:22:58Z,2025-01-06T13:46:15Z,"
https://github.com/apache/pekko/actions/runs/12612621246/job/35149558293?pr=1678#step:7:10560
I think we should wait a little when do `disassociate`
```scala
org.apache.pekko.remote.RemoteTransportException: Startup failed
	at org.apache.pekko.remote.Remoting.org$apache$pekko$remote$Remoting$$notifyError(Remoting.scala:174)
	at org.apache.pekko.remote.Remoting.start(Remoting.scala:250)
	at org.apache.pekko.remote.RemoteActorRefProvider.init(RemoteActorRefProvider.scala:274)
	at org.apache.pekko.actor.ActorSystemImpl._start$lzyINIT1(ActorSystem.scala:1043)
	at org.apache.pekko.actor.ActorSystemImpl._start(ActorSystem.scala:1039)
	at org.apache.pekko.actor.ActorSystemImpl.start(ActorSystem.scala:1062)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:283)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:327)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:301)
	at org.apache.pekko.remote.classic.RemotingSpec.f$proxy21$1(RemotingSpec.scala:848)
	at org.apache.pekko.remote.classic.RemotingSpec.$init$$$anonfun$3$$anonfun$21(RemotingSpec.scala:828)
	at org.scalatest.Transformer.apply$$anonfun$1(Transformer.scala:22)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:31)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:21)
	at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1118)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:138)
	at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1124)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$$anonfun$1(AnyWordSpecLike.scala:1128)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1128)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$$anonfun$1(AnyWordSpecLike.scala:1187)
	at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:413)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:427)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1187)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
	at org.scalatest.Suite.run(Suite.scala:1114)
	at org.scalatest.Suite.run$(Suite.scala:564)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.run$$anonfun$1(AnyWordSpecLike.scala:1232)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1232)
	at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:217)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:135)
	at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.net.BindException: Address already in use
	at java.base/sun.nio.ch.Net.bind0(Native Method)
	at java.base/sun.nio.ch.Net.bind(Net.java:459)
	at java.base/sun.nio.ch.Net.bind(Net.java:448)
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:141)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:561)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1281)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:600)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:579)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:922)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:259)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:380)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1679/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1679,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZXxPl,pekko,2573145061,1679,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-06T13:46:14Z,2025-01-06T13:46:14Z,looks like this was in `RemotingSpec: must allow other system to connect even if it's not there at first`,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZXxPl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1685,https://api.github.com/repos/apache/pekko/issues/1685,pekko,2769374212,1685,failed: org.apache.pekko.remote.artery.HandshakeRetrySpec,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-05T17:31:36Z,2025-01-06T10:16:15Z,"refs: https://github.com/apache/pekko/actions/runs/12621144995/job/35167661903?pr=1684#step:8:10432

```scala
[01-05 16:44:28.324] [info] - must be retried during handshake-timeout (no message loss) *** FAILED *** (7 seconds, 91 milliseconds)
[01-05 16:44:28.324] [info]   java.lang.AssertionError: assertion failed: timeout (6 seconds) during expectMsg while waiting for hello
[01-05 16:44:28.324] [info]   at scala.Predef$.assert(Predef.scala:279)
[01-05 16:44:28.324] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg_internal(TestKit.scala:472)
[01-05 16:44:28.324] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg(TestKit.scala:449)
[01-05 16:44:28.324] [info]   at org.apache.pekko.testkit.TestKitBase.expectMsg$(TestKit.scala:449)
[01-05 16:44:28.324] [info]   at org.apache.pekko.testkit.TestKit.expectMsg(TestKit.scala:982)
[01-05 16:44:28.324] [info]   at org.apache.pekko.remote.artery.HandshakeRetrySpec.$anonfun$new$2(HandshakeRetrySpec.scala:48)
[01-05 16:44:28.324] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[01-05 16:44:28.324] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
[01-05 16:44:28.324] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[01-05 16:44:28.324] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[01-05 16:44:28.324] [info]   at org.scalatest.Transformer.apply(Transformer.scala:20)
[01-05 16:44:28.325] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1240)
[01-05 16:44:28.325] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[01-05 16:44:28.325] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:195)
[01-05 16:44:28.325] [info]   at org.apache.pekko.remote.artery.ArteryMultiNodeSpec.withFixture(ArteryMultiNodeSpec.scala:58)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1238)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTest$1(AnyWordSpecLike.scala:1250)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1250)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:1232)
[01-05 16:44:28.327] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$runTests$1(AnyWordSpecLike.scala:1309)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:413)
[01-05 16:44:28.327] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.$anonfun$runTestsInBranch$1(Engine.scala:427)
[01-05 16:44:28.327] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:401)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[01-05 16:44:28.327] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1309)
[01-05 16:44:28.327] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:1308)
[01-05 16:44:28.328] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
[01-05 16:44:28.328] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[01-05 16:44:28.328] [info]   at org.scalatest.Suite.run$(Suite.scala:1096)
[01-05 16:44:28.328] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
[01-05 16:44:28.328] [info]   at org.scalatest.wordspec.AnyWordSpecLike.$anonfun$run$1(AnyWordSpecLike.scala:1354)
[01-05 16:44:28.328] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[01-05 16:44:28.332] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1354)
[01-05 16:44:28.332] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:1352)
[01-05 16:44:28.333] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
[01-05 16:44:28.333] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[01-05 16:44:28.333] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:210)
[01-05 16:44:28.333] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:208)
[01-05 16:44:28.333] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
[01-05 16:44:28.333] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[01-05 16:44:28.333] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[01-05 16:44:28.334] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[01-05 16:44:28.336] [info]   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
[01-05 16:44:28.336] [info]   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
[01-05 16:44:28.337] [info]   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
[01-05 16:44:28.337] [info]   at java.lang.Thread.run(Thread.java:750)

```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1685/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1690,https://api.github.com/repos/apache/pekko/issues/1690,pekko,2770702212,1690,RemotingSpec: must be able to connect to system even if it's not there at first: address already in use,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2025-01-06T13:48:46Z,2025-01-06T13:48:46Z,"https://github.com/apache/pekko/actions/runs/12632585611/job/35196562037

Possibly related to #1679 

```
org.apache.pekko.remote.RemoteTransportException: Startup failed
	at org.apache.pekko.remote.Remoting.org$apache$pekko$remote$Remoting$$notifyError(Remoting.scala:174)
	at org.apache.pekko.remote.Remoting.start(Remoting.scala:250)
	at org.apache.pekko.remote.RemoteActorRefProvider.init(RemoteActorRefProvider.scala:274)
	at org.apache.pekko.actor.ActorSystemImpl._start$lzyINIT1(ActorSystem.scala:1043)
	at org.apache.pekko.actor.ActorSystemImpl._start(ActorSystem.scala:1039)
	at org.apache.pekko.actor.ActorSystemImpl.start(ActorSystem.scala:1062)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:283)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:327)
	at org.apache.pekko.actor.ActorSystem$.apply(ActorSystem.scala:301)
	at org.apache.pekko.remote.classic.RemotingSpec.selectionAndBind$1(RemotingSpec.scala:790)
	at org.apache.pekko.remote.classic.RemotingSpec.f$proxy20$1(RemotingSpec.scala:809)
	at org.apache.pekko.remote.classic.RemotingSpec.$init$$$anonfun$3$$anonfun$20(RemotingSpec.scala:799)
	at org.scalatest.Transformer.apply$$anonfun$1(Transformer.scala:22)
	at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
	at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:31)
	at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
	at org.scalatest.Transformer.apply(Transformer.scala:22)
	at org.scalatest.Transformer.apply(Transformer.scala:21)
	at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1118)
	at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
	at org.scalatest.TestSuite.withFixture$(TestSuite.scala:138)
	at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1124)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$$anonfun$1(AnyWordSpecLike.scala:1128)
	at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1128)
	at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$$anonfun$1(AnyWordSpecLike.scala:1187)
	at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:413)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
	at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:427)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
	at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
	at scala.collection.immutable.List.foreach(List.scala:334)
	at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
	at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
	at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1187)
	at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
	at org.scalatest.Suite.run(Suite.scala:1114)
	at org.scalatest.Suite.run$(Suite.scala:564)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
	at org.scalatest.wordspec.AnyWordSpecLike.run$$anonfun$1(AnyWordSpecLike.scala:1232)
	at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
	at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1232)
	at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:44)
	at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
	at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
	at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:217)
	at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:135)
	at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
	at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
	at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
	at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: java.net.BindException: Address already in use
	at java.base/sun.nio.ch.Net.bind0(Native Method)
	at java.base/sun.nio.ch.Net.bind(Net.java:459)
	at java.base/sun.nio.ch.Net.bind(Net.java:448)
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227)
	at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:141)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:561)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1281)
	at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:600)
	at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:579)
	at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:922)
	at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:259)
	at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:380)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	... 1 more
]
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1690/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1694,https://api.github.com/repos/apache/pekko/issues/1694,pekko,2772304633,1694,Optimize GitHub Actions usage,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2025-01-07T09:11:50Z,2025-01-07T10:52:53Z,"We currently use between about 45-115 hours of GitHub Actions per day (https://github.com/apache/pekko/actions/metrics/usage, https://infra-reports.apache.org/#ghactions), and some jobs that are ran as part of PR validation can take a long time to run (https://github.com/apache/pekko/actions/metrics/performance).

We should mainly optimize for contributor happiness, so it'd be good if we could see if we can make some of those jobs faster. Also the aggregate amount of consumed resources seems high, if we can improve that as well that would be nice.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1694/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1694,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Zd9VW,pekko,2574767446,1694,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-07T09:14:19Z,2025-01-07T09:14:19Z,Maybe we can stop 1.0.0-nightly build?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6Zd9VW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1694,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZeY4Y,pekko,2574880280,1694,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-07T10:05:29Z,2025-01-07T10:05:29Z,"> Maybe we can stop 1.0.0-nightly build?

I think we should keep that around until we officially EOL the 1.0.x branch - which is something we might want to discuss but perhaps not here and not yet ;). We could configure it to only run when there's actual new commits to that branch, though - that might already help quite significantly.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZeY4Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1694,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZexzF,pekko,2574982341,1694,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-07T10:52:51Z,2025-01-07T10:52:51Z,"* the 1.0 job could be run weekly or on demand - we probably don't need it nightly since it is not a very active branch
* the main focus should be on cutting down the PR CI time because this makes up most of the hours ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ZexzF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1696,https://api.github.com/repos/apache/pekko/issues/1696,pekko,2776784216,1696,Feature request: Add  Source#blockingQueue() operator for easy integrating with non reactive world?,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-09T04:01:01Z,2025-01-09T04:01:08Z,"Motivation:
Currently, I have to use the `unfoldReosurce()` to integrate with a blocking queue. I think it would be nice to have this out of the box.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1696/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/1706,pekko,2782816043,1706,genjavadoc plugin breaking publish nightly job,pjfanning,11783444,PJ Fanning,,CLOSED,2025-01-13T01:15:44Z,2025-01-17T11:36:22Z,"Not yet published for Scala 2.13.16

https://github.com/apache/pekko/actions/runs/12728852719/job/35479939070","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1706/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aL_Tg,pekko,2586834144,1706,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-13T11:18:57Z,2025-01-13T11:18:57Z,https://github.com/lightbend/genjavadoc/pull/376,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aL_Tg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMC2o,pekko,2586848680,1706,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-13T11:26:06Z,2025-01-13T11:26:06Z,"earlier we'd have caught this in #1704 because the link validator also runs with genjavadoc, but we moved that to nightly. Perhaps we should enabled it in one of the sbt invocations in `binary-compatibility-checks.yml`?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMC2o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aME7w,pekko,2586857200,1706,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-13T11:30:45Z,2025-01-13T11:30:45Z,"I just think in future, we shouldn't manually update Scala. We should wait for Scala Steward. It appears to have some set up that holds it back from recommending Scala updates until the sbt tooling catches up.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aME7w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMQR2,pekko,2586903670,1706,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-13T11:53:53Z,2025-01-13T11:53:53Z,Not sure why genjavadoc need be updated for every scala release.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMQR2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMePd,pekko,2586960861,1706,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-13T12:21:07Z,2025-01-13T12:21:07Z,"> Not sure why genjavadoc need be updated for every scala release.

Because it hooks into compiler internals that may change between Scala releases, so may need changes between them. Such changes are not *always* needed, but they're erring on the safe side.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aMePd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aWSgu,pekko,2589534254,1706,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-14T10:22:17Z,2025-01-14T10:22:17Z,"Our builds in other Pekko repos are also affected. The main branch snapshots now have a dependency on scala-library 2.13.16 and sbt blows up when the scala version is less than the transitive dependency version of scala-library.

eg https://github.com/apache/pekko-connectors-kafka/actions/runs/12759834551/job/35564242431

I am tempted to revert https://github.com/apache/pekko/pull/1704 and reapply it when we start seeing scala steward updating the downstream repos.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aWSgu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1706,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a3PGN,pekko,2598171021,1706,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-17T11:36:21Z,2025-01-17T11:36:21Z,"It's been released, and is now green.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a3PGN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1708,https://api.github.com/repos/apache/pekko/issues/1708,pekko,2785654587,1708,"BatchingExecutor BlockableBatch.run: ""requirement failed"" under concurrent task invocations",jxtps,90846,,,OPEN,2025-01-13T22:54:12Z,2025-01-14T18:48:24Z,"I'm seeing the following occasional stack trace in production: 
```
java.lang.IllegalArgumentException: requirement failed
	at scala.Predef$.require(Predef.scala:324)
	at org.apache.pekko.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:105)
	at org.apache.pekko.dispatch.TaskInvocation.run(AbstractDispatcher.scala:59)
	at org.apache.pekko.dispatch.ForkJoinExecutorConfigurator$PekkoForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:57)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool.helpJoin(ForkJoinPool.java:2076)
	at java.base/java.util.concurrent.ForkJoinTask.awaitDone(ForkJoinTask.java:423)
	at java.base/java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask.java:750)
        ...
```
The `...` is my client code, and it does `ForkJoinTask.invokeAll(tasks)` with an array of `RecursiveAction`s. 

This happens during heavily parallelized calls to my client code. Think a bunch of concurrent web requests all needing to issue parallel sub-tasks. 

As this is happening based on live traffic I don't have a neatly packaged up reproducible test case immediately available. 

Does pekko have multi-threaded stress tests with tasks being invoked in parallel? 

This is in `pekko-actor` 1.0.3 for Scala 2.13, `pekko-actor_2.13-1.0.3.jar`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1708/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1708,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aZM5b,pekko,2590297691,1708,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-14T15:46:02Z,2025-01-14T15:46:02Z,"Other contributors may have a different viewpoint on this but I would not really think of Pekko dispatchers as being for general use - that they are more designed for Pekko specific internal usage.

Are your tasks doing Pekko based work?

Were tasks lost when the requirement exception happened or were they retried?

Have you considered using a Scala ExecutionContext or a Java ForkJoinPool directly? Or a framework like ZIO, cats-effect or another general purpose async job framework?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aZM5b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1708,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aaYh5,pekko,2590607481,1708,NA,jxtps,90846,,,NA,2025-01-14T17:14:49Z,2025-01-14T17:14:49Z,"Yes, I have had to switch to using a custom ForkJoinPool. 

But regardless, if you look at the code where this happens ( https://github.com/apache/pekko/blob/main/actor/src/main/scala/org/apache/pekko/dispatch/BatchingExecutor.scala#L104 ): 
```scala
    override final def run(): Unit = {
      require(_tasksLocal.get eq null)
      _tasksLocal.set(this) // Install ourselves as the current batch
      val firstInvocation = _blockContext.get eq null
      if (firstInvocation) _blockContext.set(BlockContext.current)
      BlockContext.withBlockContext(this) {
        try processBatch(this)
        catch {
          case t: Throwable =>
            resubmitUnbatched()
            throw t
        } finally {
          _tasksLocal.remove()
          if (firstInvocation) _blockContext.remove()
        }
      }
    }
```
What happens is that `require(_tasksLocal.get eq null)` fails, which makes it look like there's a race condition happening? And regardless of use, that should be made to be not possible, right? 

Or maybe I'm misunderstanding how this is supposed to work, but my code ""just"" does `ForkJoinPool.invokeAll`, which should always be legal, no?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6aaYh5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1708,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6abSik,pekko,2590845092,1708,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-14T18:42:19Z,2025-01-14T18:42:19Z,Do you have a reproducer for this? But the current implementation seems its only valid for internal usage.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6abSik/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1725,https://api.github.com/repos/apache/pekko/issues/1725,pekko,2796123047,1725,Make code compiles on JDK 23,He-Pin,501740,He-Pin(kerr),,CLOSED,2025-01-17T19:02:30Z,2025-01-17T21:28:41Z,The current code can't compile on JDK 23.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/1725/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1725,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6g6r,pekko,2599030443,1725,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-17T19:13:36Z,2025-01-17T19:13:36Z,see https://github.com/apache/pekko/pull/1534,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6g6r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1725,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6h3T,pekko,2599034323,1725,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-17T19:16:23Z,2025-01-17T19:16:23Z,My view is that we should disable the deprecated code checks when building with Java 23+ (ie not have scalac flags like `-Werror` and flags like that - that cause the build to fail if we use deprecated code). We can still use these  scalac flags for Java 21 and below.,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6h3T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1725,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6v4_,pekko,2599091775,1725,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-17T19:54:08Z,2025-01-17T19:54:08Z,@pjfanning I think it works,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a6v4_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1727,https://api.github.com/repos/apache/pekko/issues/1727,pekko,2796442657,1727,failed: org.apache.pekko.actor.dispatch.DispatcherActorSpec,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-17T22:59:40Z,2025-01-17T22:59:45Z,"refs: https://github.com/apache/pekko/actions/runs/12837234599/job/35800491988?pr=1724#step:7:5795

```scala
01-17 21:46:48.292] [info] - must respect the throughput setting *** FAILED *** (10 seconds, 46 milliseconds)
[01-17 21:46:48.292] [info]   DispatcherActorSpec.this.convertToCheckingEqualizer[scala.Long](latch.getCount()).===[scala.Long](0L)(DispatcherActorSpec.this.typeCheckedConstraint[scala.Long, scala.Long](org.scalactic.Equivalence.default[scala.Long], scala.<:<.refl[scala.Long])) was false (DispatcherActorSpec.scala:111)
[01-17 21:46:48.293] [info]   org.scalatest.exceptions.TestFailedException:
[01-17 21:46:48.293] [info]   at org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:476)
[01-17 21:46:48.293] [info]   at org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:421)
[01-17 21:46:48.293] [info]   at org.scalatest.Assertions$.newAssertionFailedException(Assertions.scala:1385)
[01-17 21:46:48.293] [info]   at org.scalatest.Assertions$AssertionsHelper.macroAssert(Assertions.scala:1460)
[01-17 21:46:48.293] [info]   at org.apache.pekko.actor.dispatch.DispatcherActorSpec.f$proxy3$1(DispatcherActorSpec.scala:111)
[01-17 21:46:48.293] [info]   at org.apache.pekko.actor.dispatch.DispatcherActorSpec.$init$$$anonfun$1$$anonfun$3(DispatcherActorSpec.scala:86)
[01-17 21:46:48.295] [info]   at org.scalatest.Transformer.apply$$anonfun$1(Transformer.scala:22)
[01-17 21:46:48.295] [info]   at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
[01-17 21:46:48.295] [info]   at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:31)
[01-17 21:46:48.295] [info]   at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
[01-17 21:46:48.295] [info]   at org.scalatest.Transformer.apply(Transformer.scala:22)
[01-17 21:46:48.296] [info]   at org.scalatest.Transformer.apply(Transformer.scala:21)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike$$anon$3.apply(AnyWordSpecLike.scala:1118)
[01-17 21:46:48.296] [info]   at org.scalatest.TestSuite.withFixture(TestSuite.scala:196)
[01-17 21:46:48.296] [info]   at org.scalatest.TestSuite.withFixture$(TestSuite.scala:138)
[01-17 21:46:48.296] [info]   at org.apache.pekko.testkit.PekkoSpec.withFixture(PekkoSpec.scala:80)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike.invokeWithFixture$1(AnyWordSpecLike.scala:1124)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$$anonfun$1(AnyWordSpecLike.scala:1128)
[01-17 21:46:48.296] [info]   at org.scalatest.SuperEngine.runTestImpl(Engine.scala:306)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest(AnyWordSpecLike.scala:1128)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTest$(AnyWordSpecLike.scala:44)
[01-17 21:46:48.296] [info]   at org.apache.pekko.testkit.PekkoSpec.runTest(PekkoSpec.scala:80)
[01-17 21:46:48.296] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$$anonfun$1(AnyWordSpecLike.scala:1187)
[01-17 21:46:48.296] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:413)
[01-17 21:46:48.296] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[01-17 21:46:48.296] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[01-17 21:46:48.296] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[01-17 21:46:48.296] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
[01-17 21:46:48.296] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:390)
[01-17 21:46:48.297] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1$$anonfun$1(Engine.scala:427)
[01-17 21:46:48.297] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)
[01-17 21:46:48.297] [info]   at scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)
[01-17 21:46:48.297] [info]   at scala.collection.immutable.List.foreach(List.scala:334)
[01-17 21:46:48.297] [info]   at org.scalatest.SuperEngine.traverseSubNodes$1(Engine.scala:429)
[01-17 21:46:48.297] [info]   at org.scalatest.SuperEngine.runTestsInBranch(Engine.scala:396)
[01-17 21:46:48.297] [info]   at org.scalatest.SuperEngine.runTestsImpl(Engine.scala:475)
[01-17 21:46:48.297] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests(AnyWordSpecLike.scala:1187)
[01-17 21:46:48.297] [info]   at org.scalatest.wordspec.AnyWordSpecLike.runTests$(AnyWordSpecLike.scala:44)
[01-17 21:46:48.297] [info]   at org.apache.pekko.testkit.PekkoSpec.runTests(PekkoSpec.scala:80)
[01-17 21:46:48.297] [info]   at org.scalatest.Suite.run(Suite.scala:1114)
[01-17 21:46:48.297] [info]   at org.scalatest.Suite.run$(Suite.scala:564)
[01-17 21:46:48.297] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$wordspec$AnyWordSpecLike$$super$run(PekkoSpec.scala:80)
[01-17 21:46:48.297] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$$anonfun$1(AnyWordSpecLike.scala:1232)
[01-17 21:46:48.297] [info]   at org.scalatest.SuperEngine.runImpl(Engine.scala:535)
[01-17 21:46:48.297] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run(AnyWordSpecLike.scala:1232)
[01-17 21:46:48.298] [info]   at org.scalatest.wordspec.AnyWordSpecLike.run$(AnyWordSpecLike.scala:44)
[01-17 21:46:48.298] [info]   at org.apache.pekko.testkit.PekkoSpec.org$scalatest$BeforeAndAfterAll$$super$run(PekkoSpec.scala:80)
[01-17 21:46:48.298] [info]   at org.scalatest.BeforeAndAfterAll.liftedTree1$1(BeforeAndAfterAll.scala:213)
[01-17 21:46:48.298] [info]   at org.scalatest.BeforeAndAfterAll.run(BeforeAndAfterAll.scala:217)
[01-17 21:46:48.298] [info]   at org.scalatest.BeforeAndAfterAll.run$(BeforeAndAfterAll.scala:135)
[01-17 21:46:48.298] [info]   at org.apache.pekko.testkit.PekkoSpec.run(PekkoSpec.scala:80)
[01-17 21:46:48.298] [info]   at org.scalatest.tools.Framework.org$scalatest$tools$Framework$$runSuite(Framework.scala:321)
[01-17 21:46:48.298] [info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:517)
[01-17 21:46:48.298] [info]   at sbt.ForkMain$Run.lambda$runTest$1(ForkMain.java:414)
[01-17 21:46:48.298] [info]   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[01-17 21:46:48.298] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[01-17 21:46:48.298] [info]   at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[01-17 21:46:48.303] [info]   at java.base/java.lang.Thread.run(Thread.java:829)
```","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1727/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/1729,pekko,2796571126,1729,Build Bug: org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool is not on the classpath,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-18T01:38:32Z,2025-01-25T13:43:26Z,"Even the PekkoJdk9ForkJoinPool is on the final result jar, but it does not on the classpath.

How to reproduce:
1. using Java 21
2. sbt console
3.
```scala
Welcome to Scala 2.13.16 (Java HotSpot(TM) 64-Bit Server VM, Java 21.0.5).

scala> classOf[org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool]
                                         ^
       error: type PekkoJdk9ForkJoinPool is not a member of package org.apache.pekko.dispatch

scala> 
```

I think that's maybe caused by of the `Jdk9.scala`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1729/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a86fK,pekko,2599659466,1729,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-18T10:20:25Z,2025-01-18T10:20:25Z,"Existing workaround:

https://github.com/apache/pekko/blob/d30e29d1cb71044acfae761632b82eadef0dc060/actor/src/main/scala/org/apache/pekko/dispatch/ForkJoinExecutorConfigurator.scala#L99-L114","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a86fK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a86tv,pekko,2599660399,1729,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-18T10:24:22Z,2025-01-18T10:24:22Z,"The classpath of which module are you referring to?

If this is about `actor-tests`, perhaps you could use a similar technique as at https://github.com/apache/pekko/blob/main/build.sbt#L419 at https://github.com/apache/pekko/blob/main/build.sbt#L128","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a86tv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87H9,pekko,2599662077,1729,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-18T10:31:18Z,2025-01-18T10:31:18Z,"1. Start SBT shell with Java 21/23
2. type `console`
3. `classOf[org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool`, class not found.

OR:
When Run a `TestJdk9 / testOnly $someJDK21Test` on Java 21, and in `$someJDK21Test` use `Class.forName(""org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool"")` , then a  `ClassNotFoundException`  throws.

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87H9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87U8,pekko,2599662908,1729,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-18T10:34:40Z,2025-01-18T10:34:40Z,"I see no integration test for `org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool`， which must been tested manually.
as the full classpath has no `org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool` classes, just the product jar, where is the integration test for it @pjfanning ? shouldn't we expect a test for that lives in the `scala-jdk9-only` folder?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87U8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87vZ,pekko,2599664601,1729,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-18T10:40:39Z,2025-01-18T10:40:39Z,"@pjfanning It's not I don't know how to write the code, but with the current setup, it can't be integrated tested, if you add an integration test for `org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool` and show it works, I'm very happy to follow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6a87vZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBr11,pekko,2600910197,1729,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-19T15:28:44Z,2025-01-19T15:28:44Z,"> 1. Start SBT shell with Java 21/23
> 
>     2. type `console`
> 
>     3. `classOf[org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool`, class not found.

`classOf` is a little weird, but testing with `Class.forName(""org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool"")`:

indeed the `root` project does not depend on the individual modules, so that doesn't have PekkoJdk9ForkJoinPool or any other classes on the path.

`actor / CompileJdk9 / console`  does find it, but indeed `actor-tests / Test / console` does not.

But with the following change to build.sbt:

```diff
 lazy val actorTests = pekkoModule(""actor-tests"")
   .configs(Jdk9.TestJdk9)
-  .dependsOn(testkit % ""compile->compile;test->test"", actor)
+  .dependsOn(
+    actor % ""compile->CompileJdk9;test->test"",
+    testkit % ""compile->compile;test->test""
+  )
```

... it should work like I think you expect.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBr11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBs7X,pekko,2600914647,1729,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-19T15:38:26Z,2025-01-19T15:38:26Z,Doesn't work too :(,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBs7X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBtIY,pekko,2600915480,1729,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-19T15:40:10Z,2025-01-19T15:40:10Z,Interesting! In what way does it not work? How are you testing?,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBtIY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBtZK,pekko,2600916554,1729,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-19T15:42:51Z,2025-01-19T15:42:51Z,"with sbt console and java 21

I think it's because the result class is not been added to the class path.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBtZK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBt_p,pekko,2600919017,1729,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-19T15:49:45Z,2025-01-19T15:49:45Z,"> with sbt console and java 21

Hmm, that seems to work for me though.

What if you check out https://github.com/raboof/pekko/pull/new/actor-tests-depend-on-jdk9-classes

and then start sbt like this:

```
$ sbt
[info] welcome to sbt 1.10.7 (N/A Java 21.0.5)
[info] loading global plugins from /home/aengelen/.sbt/1.0/plugins
[info] loading settings for project cell-build from plugins.sbt...
[info] loading project definition from /cell/project
[info] loading settings for project pekko from build.sbt...
[info] resolving key references (70718 settings) ...
[info] Scala 2 optimizer/inliner enabled, to disable set the pekko.no.inline system property
(...)
pekko > actor-tests / Test / console
(...)
scala> Class.forName(""org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool"")
val res0: Class[_] = class org.apache.pekko.dispatch.PekkoJdk9ForkJoinPool
```

do you get a different result?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBt_p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1729,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBvSO,pekko,2600924302,1729,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-19T16:05:32Z,2025-01-19T16:05:32Z,"The problem seems to happen when using submodules  in this repo. If you use a project with a dependency on a pekko-actor snapshot jar or released jar, the class is there and is used if use Java version 11 up. The code is integration tested by our other modules like pekko-http. It would be nice if it was easier to test.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bBvSO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1730,https://api.github.com/repos/apache/pekko/issues/1730,pekko,2796592075,1730,Drop Java 8 support,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-18T02:29:32Z,2025-01-19T14:34:53Z,"Much pain on Java 8

refs: https://openjdk.org/jeps/472
refs: https://openjdk.org/jeps/471

We will soon face this, VarHandle only exists in Java 9.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1730/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1732,https://api.github.com/repos/apache/pekko/issues/1732,pekko,2796966097,1732,using @unroll for mima,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-18T12:56:57Z,2025-01-20T08:43:58Z,"It's very annoying when you add a field in class and then mima breaks , https://github.com/com-lihaoyi/unroll can help.

refs: https://github.com/scala/scala3/pull/21693
refs: https://github.com/scala/improvement-proposals/pull/78","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1732/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1735,https://api.github.com/repos/apache/pekko/issues/1735,pekko,2797861272,1735,Doc about `virtual-thread-executor` is missing,He-Pin,501740,He-Pin(kerr),,CLOSED,2025-01-19T22:21:19Z,2025-01-21T07:52:18Z,"Even though we have a test for it, the doc currently about the `virtual-thread-executor` is just living in the reference.conf

the spec is `org.apache.pekko.dispatch.VirtualThreadPoolDispatcherSpec`","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1735/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1736,https://api.github.com/repos/apache/pekko/issues/1736,pekko,2799817577,1736,`-tests` projects show up in SBOMs,raboof,131856,Arnout Engelen,github@bzzt.net,OPEN,2025-01-20T16:33:52Z,2025-01-20T16:33:52Z,"The `-tests` projects show up as a 'required' dependency of regular Pekko artifacts.

This is *probably* an upstream problem in sbt-sbom, but let's investigate it in the context where it occurred before bringing it upstream.

https://sbom.security.apache.org/project.html?pmc=pekko","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1736/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1739,https://api.github.com/repos/apache/pekko/issues/1739,pekko,2801885316,1739,Complete MergeHub Sink gracefully on NormalShutdownException,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-21T13:38:35Z,2025-01-24T15:37:08Z,"refs: https://github.com/akkadotnet/akka.net/pull/7468

I think this issue may exist in Pekko too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1739/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1739,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bvHZZ,pekko,2612819545,1739,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-24T15:37:06Z,2025-01-24T15:37:06Z,"I have a pr ready locally, but not sure if it's the right way to do, because the NormalShutdownException is a part of the fanoutprocessor.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6bvHZZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1740,https://api.github.com/repos/apache/pekko/issues/1740,pekko,2805261834,1740,Confusing sentence in Design Principles docs,InmanCochrane,26103520,Matt I.C.,,OPEN,2025-01-22T20:15:05Z,2025-01-27T13:38:45Z,"I know this is trivial, and 7 years old from the Akka fork, but I was perplexed by this sentence in the [Design Principles page](https://pekko.apache.org/docs/pekko/current/general/stream/stream-design.html): https://github.com/apache/pekko/blob/2469f729f7503acf814bcbd042b4bb0863103c9d/docs/src/main/paradox/general/stream/stream-design.md?plain=1#L56

I tried to parse my way through,
```
can
  with certainty
    it can't
      really be that X
        can be considered
          P or
          Q
```
and think I've landed on a qualifier-free simplification of, ""A direct inheritance relationship with these types cannot be considered some sort of advantage nor meaningful differentiator between libraries.""

Is that what this is trying to say? I acknowledge that qualifiers can be important, so that's why I'm not submitting a PR to use that new text, but I'm suggesting that someone who understands this better try to rephrase that sentence or paragraph so that it's easier to follow.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1740/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1740,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6b6cRf,pekko,2615788639,1740,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-27T13:38:44Z,2025-01-27T13:38:44Z,"Yes, I think you understood it correctly - this is further confirmed by the next sentence

> Rather, it could be seen that APIs which expose those SPI types to end-users are leaking internal implementation details accidentally.

I don't remember the history, but I think there were some other implementations that were marketing themselves as supporting Reactive Streams ""more natively"" because they were directly extending those classes, which doesn't really make sense.

Perhaps we should make it a bit more direct, and replace those two lines with something like:

> In other words, these classes are intended to be an internal detail of interoperable libraries. While some other libraries expose the SPI types directly to end users, for example by inheriting from them, you could say this leaks an internal implementation detail.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6b6cRf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1742,https://api.github.com/repos/apache/pekko/issues/1742,pekko,2810323647,1742,Implement all stream operaters needed for Spring Ai like thing.,He-Pin,501740,He-Pin(kerr),,OPEN,2025-01-24T20:28:30Z,2025-01-24T20:28:30Z,"After talking to someone in CSUG, they want something like Spring Ai for Scala, the project is big for me to handle, but actually,we can add some missing stream operators which are needed for building a Spring Ai like project","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1742/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1749,https://api.github.com/repos/apache/pekko/issues/1749,pekko,2815649235,1749,Possibly replace ThreadLocalRandom,pjfanning,11783444,PJ Fanning,,OPEN,2025-01-28T13:17:40Z,2025-01-28T13:18:45Z,"ThreadLocalRandom may not be a great idea if you are using Virtual Threads (#611).

Java 17+ has a new RandomGenerator and we could allow users to choose via config which generator to use.

```
RandomGenerator random = RandomGenerator.of(""L64X128MixRandom"")
```

List of algorithms:
https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/random/package-summary.html#algorithms

We could have a centralised util function to get a generator. Java 8-16 users would get a ThreadLocalRandominstance when this functio was called. Java 17+ users - we could use Reflection or MethodHandles to create a generator based on config.
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1749/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/1751,pekko,2816636062,1751,Java 11 compile issues in nightly build,pjfanning,11783444,PJ Fanning,,CLOSED,2025-01-28T20:17:57Z,2025-01-29T19:24:46Z,"Happening for a few days. Affects all Java 11 builds but not other Java versions.
Example:
https://github.com/apache/pekko/actions/runs/13000969784/job/36259394315

Very weird ref to scala 3.6.3 in this log.

```
Compiling project (Scala 3.6.3, JVM (11))
[error] ./stream/target/scala-cli/VerifyJDK9Classes-2.12.sc:28:26
[error] Cyclic reference involving val <import>
[error] 
[error]  Run with -explain-cyclic for more details.
[error]     implicit val system: ActorSystem = ActorSystem.create(""test"")
[error]                          ^
[error] ./stream/target/scala-cli/VerifyJDK9Classes-2.12.sc:22:12
[error] value apache is not a member of org
[error]     import org.apache.pekko.actor.ActorSystem
[error]            ^^^^^^^^^^
[error] ./stream/target/scala-cli/VerifyJDK9Classes-2.12.sc:23:12
[error] value apache is not a member of org
[error]     import org.apache.pekko.stream.scaladsl.{ JavaFlowSupport, Source }
[error]            ^^^^^^^^^^
Error compiling project (Scala 3.6.3, JVM (11))
Compilation failed
Error when verifying stream/target/scala-cli/VerifyJDK9Classes-2.12.sc.
Error: Process completed with exit code 1.
```

Nightly build has an extra section that only runs with Java 11. So this issue is probably not Java 11 specific.

https://github.com/apache/pekko/blob/main/.github/workflows/nightly-builds.yml#L205-L217

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1751/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cKcMc,pekko,2619982620,1751,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-28T20:22:35Z,2025-01-28T20:22:35Z,"Last time this passed on Java 11, we had:

```
Scala CLI version: 1.5.4
Scala version (default): 3.5.2
```

Busted with
```
Scala CLI version: 1.6.1
Scala version (default): 3.6.3
```

I don't want to be a guinea pig for the non-LTS versions of Scala. I want to get this reverted. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cKcMc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cOXbF,pekko,2621011653,1751,NA,tgodzik,3807253,Tomasz Godzik,,NA,2025-01-29T08:46:54Z,2025-01-29T08:46:54Z,Does it happen with `--server=false` or works with Scala CLI 1.6.1 and Scala 3.5.2 ? ,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cOXbF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSuAu,pekko,2622152750,1751,NA,He-Pin,501740,He-Pin(kerr),,NA,2025-01-29T16:38:30Z,2025-01-29T16:38:30Z,"It works before , but starting failing after scala cli 1.6.3 released, I don't have my PC by my side for now.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSuAu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSwTD,pekko,2622162115,1751,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-29T16:42:11Z,2025-01-29T16:42:11Z,"@gedochao found the issue in https://github.com/VirtusLab/scala-cli/issues/3464

The license header breaks the script with scala-cli 1.6.1. It now must appear after the using directives. ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSwTD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1751,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSyzd,pekko,2622172381,1751,NA,pjfanning,11783444,PJ Fanning,,NA,2025-01-29T16:46:25Z,2025-01-29T16:46:25Z,"@He-Pin I don't think the verify jdk9 script is being run - I think it just compiling the code. The println of the result that appears in the script does not lead to a result being printed in the CI logs.

This is a pre-existing issue. Nothing to do with the scala-cli change that caused the compile to stop working.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6cSyzd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1758,https://api.github.com/repos/apache/pekko/issues/1758,pekko,2822153309,1758,cyclonedx sbom published for builds has an XML extension but contains JSON,pjfanning,11783444,PJ Fanning,,OPEN,2025-01-31T00:35:37Z,2025-01-31T10:38:52Z,"https://repository.apache.org/content/groups/staging/org/apache/pekko/pekko-actor-typed_2.13/1.2.0-M1-RC1/pekko-actor-typed_2.13-1.2.0-M1-RC1-cyclonedx.xml

Actually has JSON and not XML.

I don't think this is a release blocker, especially because this is just a milestone release.

Partial content:
```
{
  ""bomFormat"" : ""CycloneDX"",
  ""specVersion"" : ""1.6"",
  ""version"" : 1,
  ""metadata"" : {
    ""tools"" : [
      {
        ""name"" : ""CycloneDX SBT plugin"",
        ""version"" : ""0.4.0""
      }
    ]
  },
  ""components"" : [
    {
      ""type"" : ""library"",
      ""bom-ref"" : ""pkg:maven/org.scala-lang/scala-library@2.13.16"",
      ""group"" : ""org.scala-lang"",
      ""name"" : ""scala-library"",
      ""version"" : ""2.13.16"",
      ""scope"" : ""required"",
      ""hashes"" : [
        {
          ""alg"" : ""MD5"",
          ""content"" : ""0794d44b2d6c8e395cc9684ab50d82d7""
        },
        {
          ""alg"" : ""SHA-1"",
          ""content"" : ""9e064d9304904fd7b6bd2b55a9e601b8c1c9006e""
        },
        {
          ""alg"" : ""SHA-256"",
          ""content"" : ""1ebb2b6f9e4eb4022497c19b1e1e825019c08514f962aaac197145f88ed730f1""
        },
        {
          ""alg"" : ""SHA-512"",
          ""content"" : ""31054e41700bdc3c2546083d6dbac2c4e7bb693674d7abed1ed72a0d551bae4b4238d3fa2da8472d5af3b5e7d636326d6b9dc0d8357630ffb9d7c6a434fdb894""
        },
        {
          ""alg"" : ""SHA-384"",
          ""content"" : ""758c65023454212af7c8507da25e6d9a631420531c7dbf8c74f97ba773721d9f7c498e83bc3d40d34ddbe1ff6b4e8b2a""
        },
        {
          ""alg"" : ""SHA3-384"",
          ""content"" : ""6d487f5710ad296ddd2cce44c242fe0a4ff73fff19e98d8da97e65b684ef67ce31a5698d7d96a5b3eb4456602326bcbf""
        },
        {
          ""alg"" : ""SHA3-256"",
          ""content"" : ""b376d8f0dbdbbfaed2ed6d98baa27cc029673762a90cfbe69dce3a95fee7c47c""
        },
        {
          ""alg"" : ""SHA3-512"",
          ""content"" : ""c6d25774a0d1f417cb3c5f5f5ae34730117f9643890b045b31014bc08afc222f5bb278aaaca623c1e9ba097bd9b3de5198f56339962050f8e8cb4fa9b52ae68f""
        }
      ],
      ""licenses"" : [
        {
          ""license"" : {
            ""id"" : ""Apache-2.0"",
            ""url"" : ""https://www.apache.org/licenses/LICENSE-2.0""
          }
        }
      ],
      ""purl"" : ""pkg:maven/org.scala-lang/scala-library@2.13.16"",
      ""modified"" : false,
      ""externalReferences"" : [
        {
          ""type"" : ""website"",
          ""url"" : ""https://www.scala-lang.org/""
        }
      ]
    },
```

fyi @raboof 

","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1758/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1758,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ckyb3,pekko,2626889463,1758,NA,raboof,131856,Arnout Engelen,github@bzzt.net,NA,2025-01-31T10:38:51Z,2025-01-31T10:38:51Z,https://github.com/sbt/sbt-sbom/pull/116 is looking for a reviewer :),"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6ckyb3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1761,https://api.github.com/repos/apache/pekko/issues/1761,pekko,2832122711,1761,Pekko-Persistence: CurrentLastKnownSequenceNumberByPersistenceId,janjaali,1159996,Siyavash Habashi,,OPEN,2025-02-05T07:19:21Z,2025-02-06T11:30:45Z,"# Use case

As of now, we already have the capability to derive the source of events using `CurrentEventsByPersistenceIdQuery`, limited by `fromSequenceNr` and `toSequenceNr`. Using this functionality to, for example, derive the last two events requires knowing the last known sequence number.

# Idea

Idea would be to have similar to other `ReadJournal` inheriting traits a new trait `CurrentLastKnownSequenceNumberByPersistenceId` that can be implemented by certain plugins, e.g. pekko-persistence-jdbc. The new trait `CurrentLastKnownSequenceNumberByPersistenceId` would have similar to other `ReadJournal` inheriting traits a single method to derive the last known sequence number for a given persistence id. Deleted events should be ignored. It must be determined if returning `None` or `0` for unknown persistence ids is better suited (looking at Java interop). 
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1761/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1761,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dOlle,pekko,2637846878,1761,NA,pjfanning,11783444,PJ Fanning,,NA,2025-02-05T19:29:33Z,2025-02-05T19:29:33Z,"It is probably easier to start with a particular Persistence implementation and adding this support directly there (e.g. pekko-persistence-jdbc). If the feature starts to appear generally useful, we can come back and add a shared trait here.
Would you be interested in trying this in pekko-persistence-jdbc?","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dOlle/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1761,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dVJbp,pekko,2639566569,1761,NA,janjaali,1159996,Siyavash Habashi,,NA,2025-02-06T11:30:44Z,2025-02-06T11:30:44Z,"Sure, sounds good. I'll try to start something in pekko-persistence-jdbc this or next weekend hopefully if time allows.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dVJbp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1762,https://api.github.com/repos/apache/pekko/issues/1762,pekko,2835445722,1762,Implement EventsByTag in javadsl.PersistenceTestKitReadJournal.scala,olijaun,3141635,Oliver Jaun,,OPEN,2025-02-06T12:49:26Z,2025-02-08T11:11:31Z,"Hi

I wanted to Query events by tag using EventsByTag with org.apache.pekko.persistence.testkit.query.javadsl.PersistenceTestKitReadJournal. Unfortunately this interface is not implemented yet. The scala-Version does implement EventsByTag. Is there a specific reason for this? As far as I can tell (I'm no Scala-Developer) one could simply add an additional delegate method.

I also saw that the org.apache.pekko.persistence.testkit.query.scaladsl.PersistenceTestKitReadJournal does not support specifying an offset other than NoOffset. This will probably be my next issue...

What I actually want to do is to replace io.github.alstanchev.pekko.persistence.inmemory.query.javadsl.InMemoryReadJournal with something that is included in the ""standard"" pekko libs. Is there another option? I saw that there is a org.apache.pekko.persistence.journal.inmem.InmemJournal but I could not figure out how I'm supposed to use that. How would I configure that in application.conf?

Thanks and regards
Oliver
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1762/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1762,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpGxK,pekko,2644798538,1762,NA,pjfanning,11783444,PJ Fanning,,NA,2025-02-08T09:59:00Z,2025-02-08T09:59:00Z,"The Java DSL can often have a few missing features - mainly due to an oversight. In particular, EventsByTag support was only added recently to the Scala DSL PersistenceTestKitReadJournal - #1532.
I have added #1763 but will need to get back to it to add a test or 2.
There seem to be a few more missing interfaces too.","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpGxK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1762,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpHKW,pekko,2644800150,1762,NA,pjfanning,11783444,PJ Fanning,,NA,2025-02-08T10:02:19Z,2025-02-08T10:02:19Z,"From the Javadoc of InMemJournal.

```
 * InmemJournal is only intended to be used for tests and therefore binary backwards compatibility
 * of the published messages are not guaranteed.
 ```

I think if you are going to use a persistence framework, that you should use real persistence (JDBC, Cassandra, DynamoDB, etc). ","{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpHKW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/apache/pekko/issues/1762,https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpUsk,pekko,2644855588,1762,NA,pjfanning,11783444,PJ Fanning,,NA,2025-02-08T10:33:30Z,2025-02-08T10:33:30Z,I created https://github.com/apache/pekko/issues/1765,"{""url"": ""https://api.github.com/repos/apache/pekko/issues/comments/IC_kwDOIV69ls6dpUsk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1764,https://api.github.com/repos/apache/pekko/issues/1764,pekko,2839751524,1764,link validator job failing because of expired cert for reactivemanifesto.org,pjfanning,11783444,PJ Fanning,,OPEN,2025-02-08T09:57:01Z,2025-02-08T09:57:01Z,"* https://github.com/apache/pekko/actions/runs/13212956712/job/36888791163
* https://github.com/reactivemanifesto/reactivemanifesto/issues/143
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1764/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1765,https://api.github.com/repos/apache/pekko/issues/1765,pekko,2839774743,1765,Offsets not supported by PersistenceTestKitReadJournal,pjfanning,11783444,PJ Fanning,,OPEN,2025-02-08T10:33:07Z,2025-02-08T10:33:07Z,"https://github.com/search?q=repo%3Aapache%2Fpekko+%22Offsets+not+supported+for+persistence+test+kit%22&type=code
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1765/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/apache/pekko/issues/1766,https://api.github.com/repos/apache/pekko/issues/1766,pekko,2839866839,1766,Implement EventsBySliceQuery in PersistenceTestKitReadJournal (Java DSL),pjfanning,11783444,PJ Fanning,,OPEN,2025-02-08T11:50:09Z,2025-02-08T11:50:09Z,"Java DSL version of #1533
","{""url"": ""https://api.github.com/repos/apache/pekko/issues/1766/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
