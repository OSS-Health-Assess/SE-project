type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/1,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/1,iceoryx2,2038519117,1,Let there be code,elBoberido,56729607,Mathias Kraus,,CLOSED,2023-12-12T20:41:02Z,2023-12-12T23:49:44Z,@elfenpiff I'm waiting for the code :),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/2,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/2,iceoryx2,2038633487,2,Open Source Preparations,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:19:45Z,2024-01-17T21:03:36Z,"# Technical Debt

* [x] Write unit tests for event messaging pattern
* [x] remove `src/bin/*` and old `rust_experiments`
* [x] namespace/prefix for config files e.g. `/tmp/elkodon`
* [x] replace all `iceoryxÂ´ strings with `elkodon`
* [x] follow XDG spec
    - https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
    - https://www.freedesktop.org/wiki/Software/xdg-user-dirs/
    - set path in `pal/settings`
* [x] remove platform suffix in `pal/settings`
* [x] check where `&[u8]` can be replaced with `&str`
* [x] tests for discovery
* [x] remove `elkodon_bb_posix::SignalHandler` from public API and examples, introduce `eventloop::wait()` instead (maybe with better name)
* [x] final API review before the release in case there are still some quirks left
    - no `get_` prefix for getter but a `set_` prefix for setter

# Cargo.toml

* [x] add version inheritance from root workspace
* [x] Add the following entries:
* [x] every package inherits from main workspace and does not add new dependencies 
```
[workspace.package]
version = """"
repository = """"
homepage = """"
authors = []
edition = ""2021""
license = """"
categories = [""ipx""]
description = ""elkodon: zero copy ipc""
```

# Changelog

* [x] introduce CHANGELOG.md
* [x] evaluate CI check that every pull request comes with a changelog update

# Contributions and Conventions

Write contribution md with the content:

 * [x] name conventions for release branch, tags
 * [x] branch protection for release branches
 * [x] Introduce CONTRIBUTORS.md
 * [x] Add pull request template
 * [x] Add issue and bug issue template
 * [x] `elkodon` vs `Elkodon`

# Licensing & File Header

* [x] Introduce script to check and modify license header
* [x] Use only spdx license code as header

# Documentation

 * [x] README.md that contains supported platforms, example, overview
 * [x] ROADMAP.md
   * add waitset and quality of life improvements
 * [x] CONTRIBUTIONS.md
 * [x] documentation for every example
 * [x] document whole elkodon crate
 * [x] Add badges for CI, Code Coverage, Documentation state, gitter, discord, license, https://linktr.ee/, create Reddit iceoryx room
 * [x] Add github labels

# CI Checks

 * [x] commit message style `elk-##ISSUE_NUMBER##-##BRANCH_NAME##`
 * [x] every commit is signed
 * [x] that linked issue exists
 * [x] one approval required
 * [x] Documentation contains no warnings
 * [x] add ci check that new crate dependencies are only added in the root `Cargo.toml` and the subcrates inherit from it

# CI Platform checks

 * [x] Linux x86_64 (archlinux)
 * [x] Linux x86_64 (ubuntu-latest)
 * [x] Linux aarch64 (archlinux)
 * [x] Linux aarch64 (ubuntu-latest)
 * [x] Linux x86_64 (rust-nightly)
 * [x] FreeBSD
 * [x] Windows
 * [x] Mac OS

# Permanent Issues

 * [x] CI updates
 * [x] Documentation fixes","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/3,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/3,iceoryx2,2038633839,3,CI setup and maintenance,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:20:07Z,2023-12-12T22:20:07Z,"## Brief

This issue takes care of setting up the CI and maintaining it","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/4,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/4,iceoryx2,2038634272,4,documentation fixes,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:20:34Z,2024-04-16T16:57:39Z,"
![benchmark_architecture](https://github.com/eclipse-iceoryx/iceoryx2/assets/56729169/bd3729a6-41f7-4ac0-8202-151fca8199dc)




# Brief

This issue takes care of small documentation fixes like typos or out-of-date examples/explanations.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/5,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/5,iceoryx2,2038634684,5,Create social media accounts and link them in the readme,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:20:59Z,2024-06-19T23:39:27Z,"## Brief feature description

The ability to quickly communicate with the maintainers of iceoryx2 or to promote new features requires some kind of social media accounts. Explore what kind of mechanisms can be used and create an account.

* gitter?
* youtube channel?
* discord
* mastodon","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/6,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/6,iceoryx2,2038635135,6,Add ChatGPT for automated code reviews,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:21:24Z,2024-02-16T11:11:08Z,"## Brief feature description

Explore if the bot from the article: https://www.cncf.io/blog/2023/06/06/a-chatgpt-powered-code-reviewer-bot-for-open-source-projects/ can be applied to iceoryx2

There is also a github action: https://github.com/coderabbitai/ai-pr-reviewer
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/6,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uuAb-,iceoryx2,1857554174,6,NA,hydroid7,16509320,,,NA,2023-12-15T09:28:15Z,2023-12-15T09:28:15Z,"I think a first step in this direction would be to add an automatic audit using https://crates.io/crates/cargo-audit

Extending the CI file wouldn't be that hard either:
```
iox2_cargo_fmt_and_clippy_template: &IOX2_CARGO_FMT_AND_CLIPPY
  cargo_fmt_and_clippy_script:
    - cargo fmt --all -- --check
    - cargo clippy -- -D warnings
    - cargo audit
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uuAb-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/6,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzLvm,iceoryx2,1858911206,6,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-16T19:18:33Z,2023-12-16T19:18:33Z,@hydroid7 indeed. I'll create a separate issue for `cargo-audit`,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzLvm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/7,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/7,iceoryx2,2038636014,7,Remove `no_run` from as many documentation code example as possible,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:22:18Z,2023-12-12T22:22:18Z,"## Brief feature description

If the example code is also run, we can ensure that the example is also functional working. Therefore, we should remove the `no_run` tag from as many documentation code examples as possible.

Comment from @elBoberido : 

@elfenpiff there is also the option for ignore. Those could then be run on a single platform, just in case the reason for no_run is platform dependent code in the lower layers","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/8,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/8,iceoryx2,2038636509,8,Fix acl string conversion on `aarch64`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:22:45Z,2025-01-13T15:33:31Z,"## Required information

**Operating system:**
 * OS Ubuntu 22.04 LTS aarch64

**Rust version:**
Output of: rustc 1.73.0

**Cargo version:**
Output of: cargo 1.73.0

**elkodon version:**
`main` branch

**Observed result or behaviour:**
The test `access_control_list_string_conversion_works` fails.

**Expected result or behaviour:**
The test `access_control_list_string_conversion_works` passes.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/8,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aOUua,iceoryx2,2587446170,8,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-13T15:33:31Z,2025-01-13T15:33:31Z,We removed access control lists completely.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aOUua/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/9,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/9,iceoryx2,2038637096,9,Windows `shm_unlink` return wrong `errno`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:23:18Z,2023-12-12T22:43:09Z,"## Required information

**Operating system:**
 * OS Windows 2019 Server

**Rust version:**
Output of: rustc 1.73

**Cargo version:**
Output of: cargo 1.73

**elkodon version:**
`main` branch

**Observed result or behaviour:**
In `iceoryx2_pal/posix/src/windows/mman.rs` the `shm_unlink` call uses `DeleteFileA`. When a file is opened and deleted with this call it successfully returns. If `DeleteFileA` is again called while the file is opened it will set the `GetLastError` to `ERROR_ACCESS_DENIED` instead of `ERROR_FILE_NOT_FOUND`, see: https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-deletefilea

This causes all `iceoryx2_cal` tests to fail that are using shared memory. Whenever `std::mem::forget` is called in such a concept, the file descriptor is leaked and a subsequent second `remove` call will return permission denied instead of false.

The quick-fix `Errno::set(Errno::ENOENT);` in `iceoryx2_pal/posix/src/windows/mman.rs` (`shm_unlink`) shall be removed and the concept tests must be adjusted.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/10,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/10,iceoryx2,2038637907,10,Publish-Subscribe Benchmark between two processes,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:24:05Z,2024-10-03T10:09:45Z,"## Brief feature description

Currently, the publish-subscribe benchmark is working in one process between two threads. The benchmark shall be extended so that it can also run between two distinct processes.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/10,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of7fA,iceoryx2,2390734784,10,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:41:28Z,2024-10-03T07:41:28Z,@elBoberido I know your branch is flying around somewhere. Shall we merge it soon?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of7fA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/10,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OhCfQ,iceoryx2,2391025616,10,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-03T10:09:44Z,2024-10-03T10:09:44Z,"Hehe, I need to do a little bit of cleanup and also detect a non-functional TSC to inform the user about increased latency due to the context switch on `clock_gettime`. I have to get this out though. It lives on a branch for almost a year now","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OhCfQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/11,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/11,iceoryx2,2038638521,11,Test `publisher_block_when_unable_to_deliver_blocks` deadlocks sometimes on Windows,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:24:41Z,2024-03-07T23:37:34Z,"## Required information

**Operating system:**
 * OS Windows

**Rust version:**
Output of: rustc 1.73

**Cargo version:**
Output of: cargo 1.73

**elkodon version:**
`main` branch

**Observed result or behaviour:**
The test `publisher_block_when_unable_to_deliver_blocks` in crate `iceoryx2` deadlocks sometimes in windows","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/12,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/12,iceoryx2,2038638887,12,Use Geoffrey to test rust code examples in markdown,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:25:05Z,2023-12-12T22:25:05Z,"## (Code) Example Of Cumbersome API

Currently, it can happen that due to some API adjustments code examples in the markdown files are no longer running. The [Geoffrey](https://github.com/ekxide/geoffrey) solves this problem.

## Improvement Suggestion

Only provide code examples in combination with geoffrey in markdown files.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/12/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/13,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/13,iceoryx2,2038639212,13,Document Error Handling Strategy,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:25:25Z,2023-12-12T22:25:25Z,"## Brief feature description

The error handling strategy must be documented.
* That we use `enum`s as error codes
* A strategy how internal error codes from a lower architectural level are translated into `enum` error codes of an higher architectural level
* How `std::error::Error` and later (when it is in stable) `core::error::Error` is implemented for all error enums.

The issue shall be concluded with a markdown file explaining the above points and showing some code snippets to illustrate them.

## Detailed information

From @elBoberido 

I found another solution in the zstd crate. They use `derive_more` with a feature flag to derive `Error` only on std. This makes would allow `no_std` on stable but without the `Error` trait. Something to think of.

They basically did this
```toml
[dependencies]
derive_more = { version = ""0.99"", default-features = false, features = [""display"", ""from""] }

[features]
default = [""std""]
std = [""derive_more/error""]
```

```rust
#[derive(Debug, derive_more::Display, derive_more::From)]
#[cfg_attr(feature = ""std"", derive(derive_more::Error))]
#[non_exhaustive]
pub enum Foo {
    #[display(fmt = ""Bar occurred. Is: {baz}, must be either 1 or 2"")]
    Bar { baz: u8 },
    //...
}
```

The attributes on the enum tags are quite similar to `thiserror` so it wouldn't be too hard to switch between the two crates.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/14,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/14,iceoryx2,2038639877,14,Versioning of all IPC capable `iceoryx2_cal` constructs,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:26:06Z,2024-03-19T08:24:03Z,"## Problem

When two `iceoryx2_cal` constructs interact with each other, we need to add some initial versioning information to ensure that not to incompatible versions of the same constructs are interacting. This could lead to undefined behavior and hard to unravel bugs.

They could be, for instance incompatible since the member order of shared management constructs has changed or members have been added/removed. Or the internal communication protocol was updated.

## Solution

Introduce a `const SHM_API_VERSION: u64` constant inside `iceoryx2_cal`, that must be checked before any of these constructs start to interact on an ipc level.
Constructs that use shared memory could add this constant to the beginning, as the first value, to their shared memory. If the construct does not use shared memory, one could create a file and store the number value is binary, or human-readable value, in there.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/15,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/15,iceoryx2,2038640395,15,Same default config file for every platform.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:26:31Z,2024-01-16T22:26:51Z,"## (Code) Example Of Cumbersome API

Currently, the default config file for windows is named `config_win.toml` to handle the windows path style. The unix variant is named `config.toml`.

Both should be named `config.toml` but the problem is, how to deliver two different default config files one for windows and one for the rest of the systems.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/16,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/16,iceoryx2,2038640788,16,"Service with the same name, but different messaging pattern shall be allowed.",elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:26:54Z,2023-12-27T21:50:52Z,"## Brief feature description

Currently, when creating/opening a service with an existing name but a different messaging pattern one receives the failure that it either exists or that the messaging pattern does not match.

It would be better if this would be allowed and that a service is uniquely identified by the messaging pattern and the name.

## Detailed information

Should be easily implementable, just hash the messaging pattern as well to acquire the services uuid.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/17,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/17,iceoryx2,2038641331,17,"Overflow behavior shall be a property of the subscriber port, not the service",elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:27:29Z,2024-09-11T08:29:53Z,"## Brief feature description

Currently, the `enable_safe_overflow` behavior is part of the service but it should be actually a subscriber property for its buffer behavior.

Comment from @elBoberido : 

I think it is not only a property of the subscriber but also the publisher. If it is only the subscriber one could easily create a denial of service. The publisher also has to opt in for the blocking.

Also the `safe overflow` property shall be renamed. Comments from a past discussion:
 * I would go with `QueueMode`/`QueueType`/`QueueBehavior` and `RingBuffer`/`CircularBuffer` and `Fifo`
 * My only objection is to ""safe"". Ideally the name is descriptive of what it actually does. Also keep in mind that the publisher and subscriber have different strategies to handle the same underlying issue -- there is one publisher, but multiple subscribers -- and each subscriber could have a different contract.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/18,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/18,iceoryx2,2038641697,18,Implement display for port factory for all messaging patterns,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:27:52Z,2023-12-18T23:19:02Z,"## (Code) Example Of Cumbersome API

If one would like to print a state overview of a service it would be nice if the `port_factory::{event|publish_subscribe|...}` would have implemented `Display` to show the overview from the example.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/18,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucTcB,iceoryx2,1852913409,18,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-12T22:28:11Z,2023-12-12T22:28:11Z,"@hydroid7 I assigned you the issue (so that you have dibs on the issue ;) ) but before you start working on this I suggest waiting until latest 4th December, until elkodon is moved into `eclipse-iceoryx/iceoryx-ng` and is also renamed to `iceoryx-ng`.
Otherwise, you may encounter a lot of merge conflicts.

Also we could not merge your work before `elkodon` is part of `eclipse-iceoryx` due to the licensing issue. At the moment, your work would be published under the GPL 3.0 but this is only a temporary construct and then we need your explicit agreement to re-license your code under a different license.

Still, I am totally happy that you are on board here, so lets focus on the more interesting technical details. The idea came from the example in these two files:
* https://github.com/eclipse-iceoryx/iceoryx2/blob/main/iceoryx2/src/service/port_factory/publish_subscribe.rs
* https://github.com/eclipse-iceoryx/iceoryx2/blob/main/iceoryx2/src/service/port_factory/event.rs

So it would be nice if these two port factories would implement Display and the nice overview that the example is showing would be just a single line of code like:
```rust
let event_name = ServiceName::new(b""MyEventName"")?;
let event = zero_copy::Service::new(&event_name)
     .event()
     .open_or_create()?;

// this line instead of all the lines from the example
println!(""{}"", event);
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucTcB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/18,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucUGS,iceoryx2,1852916114,18,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-12T22:30:23Z,2023-12-12T22:30:23Z,"@hydroid7 The day has come and iceoryx2 (codename elkodon, see this here: https://github.com/elkodon/elkodon) will be pushed up here in the next hours.

As promised, you can take over this issue if you like.

Sorry, for the delay but Covid was again flying around.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucUGS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/19,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/19,iceoryx2,2038644977,19,Subscriber shall be able to reduce its buffer size,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-12T22:31:15Z,2024-04-19T20:11:50Z,"## Brief feature description

A pub-sub service has the ability to define a max buffer size for a subscriber but the subscriber is unable to reduce its buffer size - every subscriber has the same buffer size.

So we need to introduce a setting in the subscriber port factory to set a custom buffer size.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/20,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/20,iceoryx2,2038647083,20,Make multithreaded tests with asserts more robust,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:33:31Z,2023-12-12T22:33:37Z,"## Brief feature description

From https://github.com/elkodon/elkodon/issues/25#issuecomment-1793128951

========

@elfenpiff I found this https://stackoverflow.com/questions/35988775/how-can-i-cause-a-panic-on-a-thread-to-immediately-end-the-main-thread/36031130#36031130

The following code would terminate the whole test when an assert in a thread fails. It can also be placed in a function which could be called at the start of a test
```rust
let orig_hook = panic::take_hook();
panic::set_hook(Box::new(move |panic_info| {
    // invoke the default handler and exit the process
    orig_hook(panic_info);
    process::exit(1);
}));
```

========","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,iceoryx2,2038647690,21,Cleanup tool/internal service for resources of crashed applications,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-12T22:34:08Z,2024-10-03T21:03:49Z,"## Brief feature description

When an application crashes, it can happen that a service is only partially removed and becomes unusable. 
An internal service and/or a command line application shall cleanup the remainders of such services.

The following use cases shall be considered:

* remove static service info, when only the dynamic service info exists
* remove dynamic service info, when only the static service info exists
* remove the data segment of a publisher if the owning process no longer exists
* remove the publisher/subscriber as participant from the dynamic service info when the owning process no longer exists.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucVOk,iceoryx2,1852920740,21,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-12T22:34:42Z,2023-12-12T22:34:42Z,"Previous discussions:

@elBoberido : 
Could this be done on the startup of the application?

@elfenpiff : 
Yes. The basic idea would be to implement a ""function"" that does it in a thread-safe manner and then either everyone can do this in a decentral fashion or one central daemon or command line tool does this.

This is then up to the deployment/user.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ucVOk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of51T,iceoryx2,2390728019,21,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:37:26Z,2024-10-03T07:37:26Z,"cc @orecham This would be something for our cli tool `iox2`. Detect and cleanup stale resources from dead nodes or if the system is completely corrupted, remove anything which belongs to iceoryx2.

Also, we need to be able to support a different config in the `iox2` tool, see https://github.com/eclipse-iceoryx/iceoryx2/tree/main/config - not now, but we should keep this in our Radar. The idea is, that a user may want to customize the config to create multiple iceoryx2 domains with different suffixes and prefixes and what not, and then it would be nice if the cli tool would support this.

There is already an example on how this could look like: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/domains","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of51T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OhA9E,iceoryx2,2391019332,21,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-03T10:06:36Z,2024-10-03T10:06:36Z,@elfenpiff is there currently a way to find out which domains are in use?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OhA9E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OiJga,iceoryx2,2391316506,21,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T12:39:06Z,2024-10-03T12:39:06Z,"@elBoberido, nope. I think we will never be able to. The different domains have the goal to completely separate the iceoryx2 instances, if there would be somehow a domain registry, the domains would again be connected. But what can be done is, to provide a specific domain and take a look if there is somthing.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OiJga/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/21,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OmBv8,iceoryx2,2392333308,21,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-03T21:03:48Z,2024-10-03T21:03:48Z,@elfenpiff I didn't meant to have a domain registry but more something like a pre-defined folder where each domain creates just a file with the domain id. A tool could then list all domains and also check if there are still active services in the domain. Not sure if it is really a good idea since one might not want that someone can figure out that a specific domain is used.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OmBv8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/27,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/27,iceoryx2,2038811585,27,Circular dependency in `iceoryx2_bb_elementary`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-13T01:49:03Z,2023-12-13T17:42:16Z,"## Required information

The `RelocatableContainer` trait comes also with a conformity test suite that is used by other traits which induces a circular dependency on `dev` level.
The `iceoryx2_bb_container` crate is affected as well.

This may be solved by adding another crate with the test suite which than can be used by the `dev` dependency of the elementary crate.
* `iceoryx2_bb_container` & `iceoryx2_bb_container_tests`
* `iceoryx2_bb_elementary` & `iceoryx2_bb_elementary_tests`


Another solution could be to combine the following crates into one.
* `iceoryx2_bb_container`
* `iceoryx2_bb_elementary`
* `iceoryx2_bb_memory`
* `iceoryx2_bb_lock_free`
* `iceoryx2_bb_system_types`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/31,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/31,iceoryx2,2040322377,31,Circular dependency in `iceoryx2_bb_container`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-13T19:17:50Z,2023-12-14T00:29:25Z,"## Required information

The unit tests of `iceoryx2_bb_container` require the `iceoryx2_bb_memory` crate as dev-dependency for relocatable container tests. This dependency must be removed.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33,iceoryx2,2040444220,33,docs.rs iceoryx2 build fails since libacl.h is missing,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-13T20:47:05Z,2023-12-24T23:26:50Z,"## Required information

See build log: https://docs.rs/crate/iceoryx2/0.0.4/builds/1061128

In the default environment in docs.rs the `libacl.h` is not available and therefore the build fails. Either we need to install it, provide a stub implementation of the interface just for docs.rs or we deactivate all acl abstractions in docs.rs.

I would favor a solution where we make `libacl.h` somehow available, even when it is just a stub.

The first affected crate is `iceoryx2_bb_posix` and then every crate that depends on it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ujCXH,iceoryx2,1854678471,33,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-13T20:47:40Z,2023-12-13T20:47:40Z,@elBoberido do you have any thoughts since you had to tackle a similar issue in iceoryx-rs?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5ujCXH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uj4Gs,iceoryx2,1854898604,33,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-14T00:27:33Z,2023-12-14T00:27:33Z,I had similar problems when building iceoryx-sys since I fetched iceory via git. For the next release of the bindings I wanted to bundle the iceoryx source but did not make a release yet. I guess I would have the same problem.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uj4Gs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/33,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uj6Ks,iceoryx2,1854907052,33,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-14T00:38:31Z,2023-12-14T00:38:31Z,I'll create a PR to add `libacl1-dev` to `https://github.com/rust-lang/crates-build-env/blob/master/linux/packages.txt`,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uj6Ks/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/34,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/34,iceoryx2,2040674599,34,Create crates.io publish script,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-14T00:37:01Z,2023-12-14T00:52:21Z,"## (Code) Example Of Cumbersome API

No more typing and guessing the order of how the packages need to be published - yeah.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/36,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/36,iceoryx2,2040679063,36,Correct github links to iceoryx2 in documentation,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-14T00:43:10Z,2023-12-14T00:53:16Z,"## Required information

Github links to iceoryx2 are wrong - correct them","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/39,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/39,iceoryx2,2042460262,39,Subscriber never receives sample when publisher shuts down,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-14T20:45:53Z,2023-12-14T21:01:13Z,"## Required information

When a publisher sends a sample and goes out of scope right after sending, the subscriber will update its 1-to-1 connection due to the change in the dynamic service information and will never receive the last delivered sample.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/40,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/40,iceoryx2,2042504407,40,Check memory order of thread fence in `mpmc/unique_index_set.rs`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-14T21:07:29Z,2023-12-14T21:07:29Z,"## Required information

In iceoryx1 the loffli (template for the unique index set) has an ?issue? with the memory ordering of the atomic thread fences at the end of the push and pop method.

Check if the unique index set has the same issue and ensure that the memory order really fits.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/42,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/42,iceoryx2,2042732202,42,`libacl.h` is required for installation but missing in documentation,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-15T01:15:40Z,2024-03-07T22:51:11Z,"## Required information

When trying to build iceoryx2 with cargo, bindgen requires the `libacl.h` headers in linux. So we should introduce a feature flag that enable `acl` explicitly and describe in the readme how to install the library.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/42,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52TENU,iceoryx2,1984709460,42,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-07T22:51:11Z,2024-03-07T22:51:11Z,This was fixed in #43 ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52TENU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/45,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/45,iceoryx2,2043700659,45,Use `cargo-multivers` to provide best pre-optimized version for every CPU flavor,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-15T13:07:46Z,2023-12-15T13:07:46Z,"## Brief feature description

`cargo-multivers` states that it can pack multiple versions of the same binary, each with a different CPU feature set, merged into a single portable optimized binary.

Maybe we can use it to provide with every release an optimized binary for each platform.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,iceoryx2,2044487005,46,Initial introspection GUI web-app,flynneva,6157095,Evan Flynn,,OPEN,2023-12-15T23:22:05Z,2023-12-19T15:20:45Z,"## Brief feature description

Listed on the road map is the desire to create a web app GUI that spins up basic webserver and allows the user to introspect an `iceoryx2` system.

Introspection information expected to be displayed would be:

1. [ ] Active `iceoryx2` participants
    1. basic info for each participant like name, up-time, memory usage, etc. (maybe @elfenpiff can list some more requirements here)

A good place to start would be to [look at what exists for iceoryx](https://iceoryx.io/v1.0.1/getting-started/examples/icecrystal/) and re-implement it here.

Looking at `egui` as the basic lib, [using `eframe`](https://github.com/emilk/eframe_template/tree/master) as a starting point.

## Detailed information

The features of the introspection GUI will be dependent on availability of introspection API's to list required info. We should link other related issues here that relate to creating / enabling introspection APIs so that once they are available the features can be added to the GUI.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyAUI,iceoryx2,1858602248,46,NA,flynneva,6157095,Evan Flynn,,NA,2023-12-15T23:22:50Z,2023-12-15T23:22:50Z,@elfenpiff @elBoberido feel free to assign this one to me. Happy to get a little rusty and try my hand at this ð¦ ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyAUI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyBwZ,iceoryx2,1858608153,46,NA,flynneva,6157095,Evan Flynn,,NA,2023-12-15T23:33:37Z,2023-12-15T23:33:37Z,Only had time today to get the basic eframe template integrated [into the repo here](https://github.com/flynneva/iceoryx2/tree/add-egui-to-list-services)...let me know what crazy name you want to call this GUI....I chose `iceoryx2-eye` completely randomly so open to suggestions.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyBwZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyw7N,iceoryx2,1858801357,46,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-16T12:02:30Z,2023-12-16T12:02:30Z,"@flynneva Oh man you are awesome! I already checked it out, and it looks like the perfect starting point.

I think the GUI version will become something bigger, so I would create a separate repo here in eclipse-iceoryx for this on the long term.

@elBoberido @flynneva we need to ask Mr. Gin and Mr. Tonic during a Mongolian Throat Singing session what their name ideas could be.

Maybe some cool curious animal? iceoryx2-owl? But iceoryx2-eye is also not bad for a random first choice.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uyw7N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzKzF,iceoryx2,1858907333,46,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-16T18:59:18Z,2023-12-16T18:59:18Z,"@flynneva awesome stuff. @elfenpiff and me were discussion whether to use egui or iced. I guess you settled the discussion :)

Regarding the name it depends a little bit on how we want to use it. We had the idea to create some tooling around an `iox2` command, similar to `ros2`. Like with `cargo`, the user could extend the functionality by just adding `iox2-foo` binary to a specific path and then the user could run `iox2 foo`. The question is now whether the GUI is part of this cmd line tools or something completely different. My gut feeling is that it should be something completely different and we are therefore completely free in choosing a name.

For iceoryx1 there is a Rust TUI called `iceray`. We could reuse that name if you like it. I don't think there are that many users of it so it won't be a big problem to re-purpose it to iceoryx2.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzKzF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzb-w,iceoryx2,1858977712,46,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-16T23:02:40Z,2023-12-16T23:02:40Z,"@flynneva @elBoberido I got suddenly the idea of an `iceoryx2_command_center` which does the same thing as `ros2` or `cargo` does, bundle everything together in one modular, extensible graphical ui.

So I already had the idea that it would be nice to have an iceoryx2 service that provides on a pub/sub channel the things you usually see with `htop` for instance.

So this command center would be an interactive interface for all iceoryx2 services which are provided by us and can be extended to custom services.

Let's assume in the future with have microservices like a service monitor, system monitor (htop alternative), deep package introspection (something that can subscribe to everything and we can inspect the transmitted data) and a lot more and everything is bundled together in one ui.
And when a user wants to add something, the only thing they have to do is to compile some module and then it is added to the ui (no idea how to realize this at the moment).

What do you think?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzb-w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzlt3,iceoryx2,1859017591,46,NA,flynneva,6157095,Evan Flynn,,NA,2023-12-17T02:25:54Z,2023-12-17T02:25:54Z,"@elfenpiff anything is possible. The question is what's necessary.

Whatever iceorxy2 apis are available we can make a widget for. The best design would be to make it modular based on use case...like a service introspection widget, a resource usage widget (like htop), etc. that way the end user can pick and choose which widget they need and nothing more.

I think before we start day dreaming let's first get a MVP of a GUI (literally anything that's usable) and build out different use cases from there.

Before jumping to the moon let's first get off earth ð","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzlt3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5u-Vw8,iceoryx2,1861835836,46,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-18T23:10:34Z,2023-12-18T23:10:34Z,"@elfenpiff a cold shiver ran down my back :sweat_smile: ... do you know the NI MAX https://ni.scene7.com/is/image/ni/NI%20MAX?scl=1. It does also show all the connected devices and system information and one can also update the firmware and do more stuff. Except being borderline slow at times, it was quite neat. I even had the idea to implement something similar for the SigMo and PeP-PI devices I once had in mind to develop.

But I agree with @flynneva, let's start small and get an experience with Rust GUIs first. Trying to do too much at once is usually a recipe for disaster.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5u-Vw8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5u-5tC,iceoryx2,1861983042,46,NA,flynneva,6157095,Evan Flynn,,NA,2023-12-19T02:02:23Z,2023-12-19T02:02:23Z,"@elfenpiff @elBoberido if some system / state info is available via iceoryx2 API's I don't see why we couldn't also display that in a gui widget....just you API wizards would have to direct me to them ð

I'll see if I can get the services display example running in the gui as a starting point...maybe over the weekend once I'm done traveling.

From there the world is our oyster. ð¦ª ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5u-5tC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/46,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5vCqnt,iceoryx2,1862969837,46,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-19T15:20:43Z,2023-12-19T15:20:43Z,@flynneva hmm oyster could also be a good name for a plugin based introspection GUI :grin: ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5vCqnt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,iceoryx2,2044720693,47,async `future` support for every entity waiting on events,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-16T11:48:48Z,2024-06-19T15:34:17Z,"## Brief feature description

A user may want to receive a sample from a subscriber packed into a future, so that they can consume the sample whenever it is ready. The usage could look like:

```rust
    let future_sample = subscriber.async_receive();
    // do stuff here
    println!(""received {:?}"", sample.await);
```

Other constructs that are maybe interesting are:
* service discovery - wait until a thing is there or gone
* events - wait for an incoming event
* publisher & listeners - wait for participants","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uywX9,iceoryx2,1858799101,47,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2023-12-16T11:50:44Z,2023-12-16T11:50:44Z,@elBoberido what are your insights on this?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uywX9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzLCR,iceoryx2,1858908305,47,NA,elBoberido,56729607,Mathias Kraus,,NA,2023-12-16T19:04:22Z,2023-12-16T19:04:22Z,"@elfenpiff there is an entry on the ekxide roadmap to explore an inter-process executor based on async so this is definitely something we should have. I'm a newbie when it comes to Rust async but I've often read that async is kind of contentious and that one often has to decide whether to have an async API or a non-async one. Nevertheless, we need to explore this.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzLCR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xmxmb,iceoryx2,1905990043,47,NA,stjepangolemac,15632814,Stjepan Golemac,,NA,2024-01-23T12:48:24Z,2024-01-23T12:48:24Z,This would be very useful ð ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xmxmb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6By7of,iceoryx2,2177612319,47,NA,Sytten,2366731,Ãmile Fugulin,,NA,2024-06-19T04:12:05Z,2024-06-19T04:12:05Z,"It is hard to have an API both sync and async, but it is doable if you have traits at the right places with the same primitives. For example diesel has diesel-async which reuses the same primitives but has an async layer for networking.  ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6By7of/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/47,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6B4M2P,iceoryx2,2178993551,47,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-19T15:34:16Z,2024-06-19T15:34:16Z,"iceoryx2 provides events to support push notifications so that you are not forced to perform busy waiting, see: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event

The rough idea is that you use two services, one with a pub/sub and one with an event messaging pattern. Whenever you send your messages via pub/sub, you can signal an event, and the other process will wake up and consume the messages.

This is a bit more manual work but allows you also to be more performant since you can really define your conditions when to trigger across processes. For instance, if you want to trigger only when process P has received 2 messages via service S1 and 4 messages via service S2.
With iceoryx (CPP version) we baked this into the publisher, the API was easier to use but with the downside that in the above case process P add false wakeups that cost a lot of performance.

@Sytten @stjepangolemac would this be something that would help you (temporarily) or would you still require an async API?

Nevertheless, we are aware of the need for an async API and it has a high prio on our side. Currently, we are working on feature parity with old cpp iceoryx and C/C++ bindings - this should be finished soon and then we try to revisit async.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6B4M2P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/48,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/48,iceoryx2,2044909597,48,Add 'cargo-audit' to the CI,elBoberido,56729607,Mathias Kraus,,OPEN,2023-12-16T19:19:33Z,2023-12-18T23:26:37Z,"I think a first step in this direction would be to add an automatic audit using https://crates.io/crates/cargo-audit

Extending the CI file wouldn't be that hard either:
```
iox2_cargo_fmt_and_clippy_template: &IOX2_CARGO_FMT_AND_CLIPPY
  cargo_fmt_and_clippy_script:
    - cargo fmt --all -- --check
    - cargo clippy -- -D warnings
    - cargo audit
```

_Originally posted by @hydroid7 in https://github.com/eclipse-iceoryx/iceoryx2/issues/6#issuecomment-1857554174_
            ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/48/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/48,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzQSp,iceoryx2,1858929833,48,NA,hydroid7,16509320,,,NA,2023-12-16T21:03:05Z,2023-12-16T21:03:05Z,"Ok, so I opened a PR, but I'm really no expert with Cirrus CI. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5uzQSp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/51,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/51,iceoryx2,2049021589,51,Support for MacOS,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-19T16:33:21Z,2023-12-24T23:26:29Z,"## Brief feature description

Finalize the implementation for mac os support
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/51/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/54,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/54,iceoryx2,2051862012,54,Rename `char` in platform to `c_char`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-21T07:22:57Z,2024-01-06T00:05:45Z,"## (Code) Example Of Cumbersome API

The type alias `char` in `iceoryx2_pal/posix/src/$PLATFORM$/types.rs` is mapped to `core::ffi::c_char` and not `u8`, this may lead to mixing it up with the rust primitive type `char`. 

## Improvement Suggestion

To have a clear distinction, the type alias in `types.rs` shall be renamed to `c_char`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/54/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/56,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/56,iceoryx2,2055290489,56,Add `from_bytes_truncated` to `FixedSizeByteString`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-25T01:56:49Z,2023-12-29T10:48:12Z,"## (Code) Example Of Cumbersome API

When a fixed size byte string shall be created from a `String` it would be handy if a truncated version can be stored if the whole string does not fit - otherwise one has to write the complex code all over the place in positions where it does not belong.

## Improvement Suggestion

Add `from_bytes_truncated`
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/58,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/58,iceoryx2,2055629876,58,Add std functionality to shm-comp `Vec`/`FixedSizeVec`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-25T11:34:30Z,2023-12-29T17:40:26Z,"## (Code) Example Of Cumbersome API

The `iceoryx2_bb_container::FixedSizeVec` does not implement `Copy` & `Clone`. Also, other traits the std version offers are missing. Add these features to be able to use these shm comp versions in most of the use cases one can use the `std::Vec`.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/60,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/60,iceoryx2,2059310209,60,miri integration,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2023-12-29T10:52:07Z,2024-10-03T17:45:48Z,"## Brief feature description

To increase the code quality, fix potential undefined behavior and unravel race conditions and memory synchronization issues in lock-free code we need to integrate miri in our development workflow.

## Todo

* [x] Create CI script that runs miri scans on all files based on an allowed list. In the beginning, the allowed list can be empty
* [ ] Fix miri issues beginning from the lowest layer up to the highest one and add fixed files/components to the allowed list.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/60/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/61,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/61,iceoryx2,2059312026,61,Undefined behavior in `FixedSizeByteString`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-29T10:54:25Z,2024-01-02T22:00:18Z,"## Required information

See: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=6e9853859e64c36ddfe4ce821f96bd3b","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/63,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/63,iceoryx2,2060706161,63,Service list fails when service directory does not exist.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-30T10:27:39Z,2024-01-07T21:32:33Z,"## Required information

The code from the iceoryx2 discovery example will fail when the service directory does not exist, this is unexpected.

It should be interpreted as no active services.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/63/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/64,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/64,iceoryx2,2060712742,64,`MessagingPattern` shall implement `Display`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-30T10:56:55Z,2024-01-02T21:13:45Z,"## (Code) Example Of Cumbersome API

If the user wants to print out the messaging pattern of the current service only the long debug output is available.

## Improvement Suggestion

This shall work:

```rust
println!(""my service type {}"", service.messaging_pattern());
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/64/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/66,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/66,iceoryx2,2060722466,66,Static config uses suffix of dynamic config,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2023-12-30T11:40:00Z,2024-01-02T21:13:46Z,"## Required information

When listing the static service config files in `/tmp/iceoryx2/services/` one sees that all service files have the file suffix `.dynamic` from the dynamic service config but it should be `.service`.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/69,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/69,iceoryx2,2063664424,69,Store ports and samples in container,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-03T10:01:35Z,2024-01-26T22:22:55Z,"## Brief feature description

Currently, it is not possible to store any port type easily in a container like a `Vec`. This is due to the fact that the ports, even when they share the same data type, may have different lifetime requirements since they are originating from distinct services or from distinct service variations, like a `zero_copy` and a `process_local` publisher.

## Detailed information

All ports shall be renamed to `$NAME$Port` and we introduce traits with the common interface of the port called `$NAME`. An example shall demonstrate how this can be used by the end user.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/69/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/70,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/70,iceoryx2,2065209038,70,crosspile  in arm,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,OPEN,2024-01-04T08:22:29Z,2024-01-05T01:52:26Z,"/code/rust-trail/iceoryx2$ cargo build
   Compiling iceoryx2-pal-posix v0.1.1 (~/code/rust-trail/iceoryx2/iceoryx2-pal/posix)
error: failed to run custom build command for `iceoryx2-pal-posix v0.1.1 (~/code/rust-trail/iceoryx2/iceoryx2-pal/posix)`

Caused by:
  process didn't exit successfully: `~/code/rust-trail/iceoryx2/target/debug/build/iceoryx2-pal-posix-187ccb108511064a/build-script-build` (exit status: 101)
  --- stdout
  cargo:rustc-link-lib=pthread
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-env-changed=TARGET
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_arm-unknown-linux-gnueabi
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_arm_unknown_linux_gnueabi
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS

  --- stderr
  /usr/include/bits/socket.h:390:10: fatal error: 'asm/socket.h' file not found
  thread 'main' panicked at iceoryx2-pal/posix/build.rs:45:18:
  Unable to generate bindings: ClangDiagnostic(""/usr/include/bits/socket.h:390:10: fatal error: 'asm/socket.h' file not found\n"")
  stack backtrace:
     0: rust_begin_unwind
               at /rustc/a28077b28a02b92985b3a3faecf92813155f1ea1/library/std/src/panicking.rs:597:5
     1: core::panicking::panic_fmt
               at /rustc/a28077b28a02b92985b3a3faecf92813155f1ea1/library/core/src/panicking.rs:72:14
     2: core::result::unwrap_failed
               at /rustc/a28077b28a02b92985b3a3faecf92813155f1ea1/library/core/src/result.rs:1652:5
     3: core::result::Result<T,E>::expect
               at /rustc/a28077b28a02b92985b3a3faecf92813155f1ea1/library/core/src/result.rs:1034:23
     4: build_script_build::main
               at ./build.rs:41:13
     5: core::ops::function::FnOnce::call_once
               at /rustc/a28077b28a02b92985b3a3faecf92813155f1ea1/library/core/src/ops/function.rs:250:5
  note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/70,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5v4T2G,iceoryx2,1877032326,70,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-04T12:38:45Z,2024-01-04T12:38:45Z,"Cross compiling iceoryx2 would be great. Maybe some inspiration could be taken from https://github.com/eclipse-iceoryx/iceoryx-rs/pull/74.

Do you intend to create a patch for this issue?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5v4T2G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/70,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5v8Axh,iceoryx2,1878002785,70,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-05T01:52:25Z,2024-01-05T01:52:25Z,@elBoberido @fengtuo58 I did some research and it seems that this is maybe related to the open issue in bindgen: https://github.com/rust-lang/rust-bindgen/issues/1229,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5v8Axh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/72,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/72,iceoryx2,2066381745,72,Reduce rust version to the minimum required version,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-04T21:48:40Z,2024-01-08T21:43:23Z,"## (Code) Example Of Cumbersome API

Currently, rust 1.72.1 is required, but a first check has shown that rust 1.70.0 should suffice.

## Improvement Suggestion

Use only the absolute minimum rust version as requirement and add `cargo msrv` to verify in the CI that this minimum is correct.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/74,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/74,iceoryx2,2068088212,74,Console logger does not add newlines correctly when redirecting stdout,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-05T21:58:15Z,2024-01-26T22:22:55Z,"## Required information

When the log output of the console logger is redirected to a file all new lines are removed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/74/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/77,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/77,iceoryx2,2071276424,77,Generic Release Issue,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-01-08T21:47:23Z,2024-01-08T21:47:23Z,"## Brief feature description

This issue shall be used for generic pre-release work.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/77/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,iceoryx2,2078386308,80,publish_subscribe example panics on MacOS,bschwind,458432,Brian Schwind,brianmschwind@gmail.com,CLOSED,2024-01-12T09:05:53Z,2024-01-14T08:12:55Z,"## Required information

**Operating system:**
 * MacOS 12.7.1

**Rust version:**
* `rustc 1.75.0 (82e1608df 2023-12-21)`

**Cargo version:**
* `cargo 1.75.0 (1d8b05cdd 2023-11-20)`

**iceoryx2 version:**
* `main` (9e5113f)

**Observed result or behaviour:**
Run `cargo run --release --example publish_subscribe_subscriber` in the root project directory, and I receive a panic:

```
brian iceoryx2 $ cargo run --release --example publish_subscribe_subscriber
    Finished release [optimized] target(s) in 0.11s
     Running `target/release/examples/publish_subscribe_subscriber`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20,
               data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | 
              OWNER_WRITE | OWNER_EXEC | OWNER_ALL, owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | opened
        1 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Loaded.
        2 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        7 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x100cdc000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | open
        8 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x100cdc000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | open service
        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 8
              1, data: ""iox2_20123953278630464882616037414168_3866334330696831988048375888828
              0.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, per
              mission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Some
              (OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_address
              : None }
              | Unable to open shared memory since the shared memory does not exist.
       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 81, data
              : ""iox2_20123953278630464882616037414168_38663343306968319880483758888280.conne
              ction"" } }, size: 16384, base_address: 0x100ce0000, has_ownership: true, file_d
              escriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x100ce4000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | open
       12 [D] ""nanosleep_with_clock""
              | Invalid argument in ""nanosleep"". Either the duration: 1s is out of range or t
              | he clock type Realtime is invalid.
       13 [F] Iox2
              | Failed to wait with cycle time 1s in main event look, caused by (DurationOutO
              | fRange).
thread 'main' panicked at iceoryx2/src/iox2.rs:96:17:
From: Iox2 ::: Failed to wait with cycle time 1s in main event look, caused by (DurationOutOfRange).
stack backtrace:
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
zsh: abort      cargo run --release --example publish_subscribe_subscriber
```

**Expected result or behaviour:**
Expected to see the subscriber start and receive a message (assuming I run the publisher example as well)

**Conditions where it occurred / Performed steps:**
Happens on every run of the publish_subscribe example.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wnLqR,iceoryx2,1889319569,80,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-12T14:14:20Z,2024-01-12T14:14:20Z,@bschwind could you please try it in debug mode? ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wnLqR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woFBs,iceoryx2,1889554540,80,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-12T15:56:31Z,2024-01-12T15:56:31Z,@bschwind I don't have a mac to test but it seems you have a ludicrously fast device. Can you try #82 and check if it fixes the issue for you?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woFBs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woI4_,iceoryx2,1889570367,80,NA,bschwind,458432,Brian Schwind,brianmschwind@gmail.com,NA,2024-01-12T16:06:20Z,2024-01-12T16:06:20Z,"Here it is in debug mode:

<details><summary>Subscriber</summary>
<p>

```
iceoryx2 $ cargo run --example publish_subscribe_subscriber
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/examples/publish_subscribe_subscriber`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20,
               data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | 
              OWNER_WRITE | OWNER_EXEC | OWNER_ALL, owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | opened
        1 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Loaded.
        2 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        7 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x1027a8000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | open
        8 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x1027a8000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | open service
        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 8
              2, data: ""iox2_20123953278630464882616037414168_1917321532845270202198002235382
              00.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, pe
              rmission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Som
              e(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_addres
              s: None }
              | Unable to open shared memory since the shared memory does not exist.
       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_191732153284527020219800223538200.conn
              ection"" } }, size: 16384, base_address: 0x1027ac000, has_ownership: true, file_
              descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x1027b0000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | open
       12 [D] ""nanosleep_with_clock""
              | Invalid argument in ""nanosleep"". Either the duration: 1s is out of range or t
              | he clock type Realtime is invalid.
       13 [F] Iox2
              | Failed to wait with cycle time 1s in main event look, caused by (DurationOutO
              | fRange).
thread 'main' panicked at iceoryx2/src/iox2.rs:96:17:
From: Iox2 ::: Failed to wait with cycle time 1s in main event look, caused by (DurationOutOfRange).
stack backtrace:
   0: rust_begin_unwind
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/std/src/panicking.rs:645:5
   1: core::panicking::panic_fmt
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/core/src/panicking.rs:72:14
   2: iceoryx2::iox2::Iox2::wait_impl
             at ./iceoryx2/src/iox2.rs:96:17
   3: iceoryx2::iox2::Iox2::wait
             at ./iceoryx2/src/iox2.rs:107:9
   4: publish_subscribe_subscriber::main
             at ./examples/examples/publish_subscribe/subscriber.rs:28:33
   5: core::ops::function::FnOnce::call_once
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
       14 [T] ""SharedMemory::remove""
              | ""iox2_20123953278630464882616037414168_191732153284527020219800223538200.conn
              | ection""
       15 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_191732153284527020219800223538200.conn
              ection"" } }, size: 16384, base_address: 0x1027ac000, has_ownership: false, file
              _descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | close
       16 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x1027b0000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | close
       17 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x1027a8000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | close service
       18 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x1027a8000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | close
```

</p>
</details> 

<details><summary>Publisher</summary>
<p>

```
iceoryx2 $ cargo run --example publish_subscribe_subscriber
    Finished dev [unoptimized + debuginfo] target(s) in 0.10s
     Running `target/debug/examples/publish_subscribe_subscriber`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20,
               data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | 
              OWNER_WRITE | OWNER_EXEC | OWNER_ALL, owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | opened
        1 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Loaded.
        2 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        7 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x102d18000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | open
        8 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x102d18000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | open service
        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 8
              2, data: ""iox2_20123953278630464882616037414168_1916529251220127558821942207289
              76.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, pe
              rmission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Som
              e(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_addres
              s: None }
              | Unable to open shared memory since the shared memory does not exist.
       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_191652925122012755882194220728976.conn
              ection"" } }, size: 16384, base_address: 0x102d1c000, has_ownership: true, file_
              descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x102d20000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | open
       12 [D] ""nanosleep_with_clock""
              | Invalid argument in ""nanosleep"". Either the duration: 1s is out of range or t
              | he clock type Realtime is invalid.
       13 [F] Iox2
              | Failed to wait with cycle time 1s in main event look, caused by (DurationOutO
              | fRange).
thread 'main' panicked at iceoryx2/src/iox2.rs:96:17:
From: Iox2 ::: Failed to wait with cycle time 1s in main event look, caused by (DurationOutOfRange).
stack backtrace:
   0: rust_begin_unwind
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/std/src/panicking.rs:645:5
   1: core::panicking::panic_fmt
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/core/src/panicking.rs:72:14
   2: iceoryx2::iox2::Iox2::wait_impl
             at ./iceoryx2/src/iox2.rs:96:17
   3: iceoryx2::iox2::Iox2::wait
             at ./iceoryx2/src/iox2.rs:107:9
   4: publish_subscribe_subscriber::main
             at ./examples/examples/publish_subscribe/subscriber.rs:28:33
   5: core::ops::function::FnOnce::call_once
             at /rustc/82e1608dfa6e0b5569232559e3d385fea5a93112/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
       14 [T] ""SharedMemory::remove""
              | ""iox2_20123953278630464882616037414168_191652925122012755882194220728976.conn
              | ection""
       15 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_191652925122012755882194220728976.conn
              ection"" } }, size: 16384, base_address: 0x102d1c000, has_ownership: false, file
              _descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | close
       16 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x102d20000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | close
       17 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x102d18000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | close service
       18 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x102d18000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | close
```

</p>
</details> 

I'll try #82 and report back","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woI4_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woLDp,iceoryx2,1889579241,80,NA,bschwind,458432,Brian Schwind,brianmschwind@gmail.com,NA,2024-01-12T16:12:24Z,2024-01-12T16:12:24Z,"I tried the code in #82 

The event example seems to work.

Here is the output of the pub-sub example - they no longer panic but I'm not sure if the behavior/output is correct. They both start up, print out some data, then seem to hang:

<details><summary>Subscriber</summary>
<p>

```
iceoryx2 $ cargo run --example publish_subscribe_subscriber
   Compiling example v0.2.1 (/Users/brian/projects/iceoryx2/examples)
    Finished dev [unoptimized + debuginfo] target(s) in 0.36s
     Running `target/debug/examples/publish_subscribe_subscriber`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20,
               data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | 
              OWNER_WRITE | OWNER_EXEC | OWNER_ALL, owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | opened
        1 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Loaded.
        2 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        7 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x102e50000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | open
        8 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x102e50000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | open service
        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 8
              2, data: ""iox2_20123953278630464882616037414168_1979911781231539028909147167311
              04.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, pe
              rmission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Som
              e(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_addres
              s: None }
              | Unable to open shared memory since the shared memory does not exist.
       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_197991178123153902890914716731104.conn
              ection"" } }, size: 16384, base_address: 0x102e54000, has_ownership: true, file_
              descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x102e58000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | open
```

</p>
</details> 

<details><summary>Publisher</summary>
<p>

```
iceoryx2 $ cargo run --example publish_subscribe_subscriber -- --help
    Finished dev [unoptimized + debuginfo] target(s) in 0.04s
     Running `target/debug/examples/publish_subscribe_subscriber --help`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20,
               data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | 
              OWNER_WRITE | OWNER_EXEC | OWNER_ALL, owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | opened
        1 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Loaded.
        2 [T] Config { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service
              : Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defa
              ults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_
              publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 
              2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 
              2, max_notifiers: 16 } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76,
               data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.se
              rvice"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXE
              C | OWNER_ALL, owner: None, group: None, truncate_size: None, creation_mode: No
              ne }
              | opened
        7 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 16384, bas
              e_address: 0x1015ec000, has_ownership: false, file_descriptor: FileDescriptor {
               value: 5, is_owned: true }, memory_lock: None }
              | open
        8 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e96090
              6a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { l
              en: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(St
              aticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber
              _max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: 
              true, type_name: ""transmission_data::TransmissionData"" }) }, global_config: Con
              fig { global: Global { root_path: ""/tmp/iceoryx2/"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data
              "", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".d
              ynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, default
              s: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_pub
              lishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, 
              max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: F
              ileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea1
              6146985e960906a8e125156a73.dynamic"" } }, size: 16384, base_address: 0x1015ec000
              , has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { 
              len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: P
              hantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage:
               Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b
              61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Pat
              h { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" 
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".servi
              ce"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""io
              x2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: Fix
              edSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c
              3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor {
               value: 4, is_owned: true } }, len: 348 } }
              | open service
        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 8
              2, data: ""iox2_20123953278630464882616037414168_1983873189357252245789464952342
              24.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, pe
              rmission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Som
              e(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_addres
              s: None }
              | Unable to open shared memory since the shared memory does not exist.
       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 82, data
              : ""iox2_20123953278630464882616037414168_198387318935725224578946495234224.conn
              ection"" } }, size: 16384, base_address: 0x1015f0000, has_ownership: true, file_
              descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 56, data
              : ""iox2_254_20123953278630464882616037414168.publisher_data"" } }, size: 16384, 
              base_address: 0x1015f4000, has_ownership: false, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | open
```

</p>
</details> ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woLDp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woNj_,iceoryx2,1889589503,80,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-12T16:18:48Z,2024-01-12T16:18:48Z,"@bschwind I think you hit one of the open issues of iceoryx2, meaning when a process crashes we do not yet have an instance that cleans up stale resources. Could you reboot your mac and try again, please? On linux you can do a simple `sudo rm -rf /dev/shm/iox2_*; sudo rm -rf /tmp/iceoryx2/services/*` but on mac os it is not that easy since the shared memory is not accessible via the file system.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woNj_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woObf,iceoryx2,1889593055,80,NA,bschwind,458432,Brian Schwind,brianmschwind@gmail.com,NA,2024-01-12T16:21:00Z,2024-01-12T16:21:00Z,"I see, thanks for the info! Sorry to bail for now but I'm in the Japan timezone and about to sleep ð

I'll report back tomorrow with what happens after a reboot.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5woObf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/80,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wtIoe,iceoryx2,1890880030,80,NA,bschwind,458432,Brian Schwind,brianmschwind@gmail.com,NA,2024-01-14T08:12:54Z,2024-01-14T08:12:54Z,"You know what, I think I made a stupid mistake on the last check - I'm running the subscriber twice, instead of a subscriber and a publisher. That explains why they're just sitting there waiting. I also passed a `--help` flag for some reason on the last one...bad copy pasting!

But in summary, I was able to run them again with the new code and it works! Thanks for the quick response :)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wtIoe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,iceoryx2,2078477005,81,benchmark-publish subscripe panic,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,CLOSED,2024-01-12T09:59:03Z,2024-07-26T22:44:46Z,"### Bug report after analysis

`bindgen-0.69.2` is unable to handle macro redefines, see: https://github.com/rust-lang/rust-bindgen/issues/2722

The signal `SIGSTOP` and `SIGCONT` are redefined under ubuntu 20.04 in the included file `bits/signum.h` of `signal.h`. The redefinition turns `SIGCONT` into the unfetchable signal `SIGSTOP` which leads to a failure in the `sigaction` call.

The quick fix is to comment out the `Continue` signal in the abstraction, since it is also nowhere used. When the bindgen bug report is closed, we can revert the change and close the issue.

1. [x] comment out `Continue` signal in `signal.rs`
2. [ ] comment in `Continue` signal after bindgen bugfix

### Original bug report from @fengtuo58 

This should never happen! Unable to register raw sional since sigaction was called with invalid parameters.
thread "" <unnamed>
iceorvx2-bb/posix/src/signal.rs:516:13:
panicked at
rom: SignalHandler ( registered signals: 11 ) :.: This should never happen! Unable to register raw signal since sigaction was called with inve
lid parameters
note: run with RUST BACKTRACE=1' environment variable to display a backtrace
12 [F] SianalHandler f registered sianals: [7
This should never happen! nable to register raw sional since sigaction was called with invalid parameters
thread ' <unnamed>' panicked at iceoryx2-bb/posix/src/sianal,rs:516:13:
rom: SianalHandler ! registered sianals:  : This should never happen: Unable
to register raw signal since sigaction was called with inva
lid parameters .
stack backtrace:","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wlKtt,iceoryx2,1888791405,81,NA,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,NA,2024-01-12T10:03:26Z,2024-01-12T10:03:26Z,anyone know  what reason?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wlKtt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wnJYT,iceoryx2,1889310227,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-12T14:10:32Z,2024-01-12T14:10:32Z,@fengtuo58 what OS and Rust Version are you using?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wnJYT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wq6ot,iceoryx2,1890298413,81,NA,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,NA,2024-01-13T04:18:05Z,2024-01-13T04:18:05Z,Linux tegra-ubuntu 5.15.98-rt-tegra #1 SMP PREEMPT RT Fri Jan 12 16:33:29 CST 2024 aarch64 aarch64 aarch64 GNU/Linux @elfenpiff ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wq6ot/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wt8c9,iceoryx2,1891092285,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-14T22:26:40Z,2024-01-14T22:26:40Z,"@fengtuo58 

The bug is fixed and merged to `main` . Could you please confirm that it is fixed by checking out `main` and rerun the benchmark?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wt8c9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wt9Dp,iceoryx2,1891094761,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-14T22:37:05Z,2024-01-14T22:37:05Z,"@fengtuo58 btw, I noticed you are related to BYD and am wondering whether BYD would be interested in accelerating the development of iceoryx2","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5wt9Dp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w1YA8,iceoryx2,1893040188,81,NA,passchaos,8736961,Greedwolf DSS,greedwolf.dss@gmail.com,NA,2024-01-16T04:07:20Z,2024-01-16T04:07:20Z,"The problem still exists, platform info: Linux tegra 5.10.120-tegra #2 SMP PREEMPT Thu Jan 4 16:55:19 CST 2024 aarch64 aarch64 aarch64 GNU/Linux
![image](https://github.com/eclipse-iceoryx/iceoryx2/assets/8736961/643f6ea3-ee6b-4f2a-a6da-cd74243dfedd)

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w1YA8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w3zb-,iceoryx2,1893676798,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-16T12:49:26Z,2024-01-16T12:49:26Z,@fengtuo58 do you have more output? It is cut off right before it looked to become interesting,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w3zb-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w7m58,iceoryx2,1894674044,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-16T23:17:34Z,2024-01-16T23:17:34Z,"@elBoberido 

I cannot reproduce it locally, but it seems to occur when the shared memory is zeroed. We zero it to ensure that the target has really enough memory available. If this fails `SIGABRT` or another signal is raised which we fetch to provide a detailed error message.

I suspect that linux tegra maybe has a different subset of fetchable signals than other linux distributions. I added a more detailed error output to identify this signal which is registered via `sigaction`.

@passchaos @fengtuo58

Could you please retry the benchmark from current main and provide the log full log output? Hopefully, this identifies the signal and helps to fix this issue.
Thank you in advance for supporting us here!
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w7m58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w8UPJ,iceoryx2,1894859721,81,NA,passchaos,8736961,Greedwolf DSS,greedwolf.dss@gmail.com,NA,2024-01-17T02:59:50Z,2024-01-17T02:59:50Z,"@elBoberido @elfenpiff I tried the latest main branch code and attached the crash log.
[crash.log](https://github.com/eclipse-iceoryx/iceoryx2/files/13958063/crash.log)
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w8UPJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w8Zpu,iceoryx2,1894881902,81,NA,passchaos,8736961,Greedwolf DSS,greedwolf.dss@gmail.com,NA,2024-01-17T03:32:40Z,2024-01-17T03:32:40Z,"In fact, Ubuntu 20.04 x86_64 also had this problem and did not try other versions.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w8Zpu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w9W7_,iceoryx2,1895132927,81,NA,passchaos,8736961,Greedwolf DSS,greedwolf.dss@gmail.com,NA,2024-01-17T06:49:25Z,2024-01-17T06:49:25Z,"@elBoberido @elfenpiff  I have found the reason for this problem.
Under ubuntu,`SIGCONT` actually uses the value 18, but the value in the automatically generated bindings is 19, which actually corresponds to `SIGSTOP`, but this signal cannot use `sigaction` function

![image](https://github.com/eclipse-iceoryx/iceoryx2/assets/8736961/c7922692-9d4e-4052-8301-0d5093eec54b)

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5w9W7_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xB-p_,iceoryx2,1896344191,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-17T18:11:15Z,2024-01-17T18:11:15Z,"@passchaos whoa, can you share something about your setup? bindgen should actually take care of this. This means it is either a bug in bindgen or you have a quite exotic setup.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xB-p_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xD3RI,iceoryx2,1896838216,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-17T21:31:27Z,2024-01-17T21:31:27Z,"@passchaos I can confirm the bug with ubuntu 20.04, and I think this is a bug in the underlying bindgen since the maintainer did underestimate what ""interesting"" things you can do with C.

So what is the problem, I go over what the C pre-processor is doing.
1. Some process includes `/usr/include/signal.h` - in this case our platform with the signal abstraction
2. In this header we include `/usr/include/x86_64-linux-gnu/bits/signum.h` 
  2.1 Here we include `/usr/include/x86_64-linux-gnu/bits/signum-generic.h`, this defines all signals als C macros
  2.2 **10 lines below we `undef` all signals again and redefine them**

In step 2.2 bindgen seems to lose it. It keeps the old macro values and this causes a screw up. But I have no idea why in the first place the value of `SIGCONT` and `SIGSTOP` are swapped, but they are.

So somehow we have to make bindgen aware that here are potentially macros defined, undefined, defined again.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xD3RI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xEThe,iceoryx2,1896953950,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-17T21:51:25Z,2024-01-17T21:51:25Z,"@elBoberido @passchaos 

So the bug is in `bindgen-0.65.1` (and current `0.69.2`). The following C code is not translated correctly.
```c
#define A 1
#define B 2

#undef A
#define A 2
#undef B
#define B 1
```

The result should that `A == 2` and `B == 1` but the generated file shows

```rust
/* automatically generated by rust-bindgen 0.65.1 */

pub const A: u32 = 1;
pub const B: u32 = 2;
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xEThe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xEdvL,iceoryx2,1896995787,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-17T21:58:48Z,2024-01-17T21:58:48Z,Here is the bindgen bugreport: https://github.com/rust-lang/rust-bindgen/issues/2722,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xEdvL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xF6lF,iceoryx2,1897376069,81,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-01-17T23:14:44Z,2024-01-17T23:14:44Z,@passchaos @fengtuo58 The bug is fixed and iceoryx2 0.2.2 is released.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xF6lF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xJ5Ke,iceoryx2,1898418846,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-18T12:48:23Z,2024-01-18T12:48:23Z,@passchaos @fengtuo58 would be great if you could confirm that it is also fixed for you and then close the issue :),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xJ5Ke/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xKMQO,iceoryx2,1898497038,81,NA,passchaos,8736961,Greedwolf DSS,greedwolf.dss@gmail.com,NA,2024-01-18T13:38:03Z,2024-01-18T13:38:03Z,"@elBoberido I confirm that the issue are fixed, both for tegra and ubuntu.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xKMQO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xKsk0,iceoryx2,1898629428,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-18T14:52:11Z,2024-01-18T14:52:11Z,"Oh, totally forgot that just a workaround was merged and we need to wait for a proper fix in bindgen.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xKsk0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xQPfJ,iceoryx2,1900083145,81,NA,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,NA,2024-01-19T09:49:07Z,2024-01-19T09:49:07Z,"It is not work at this commit
commit 891ae9bc4e26c95c0e067140d93240bba4c6ca86 (origin/main, origin/HEAD)

./benchmark-publish-subscribe 
       11 [F] SignalHandler { registered_signals: [] }
              | This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
thread '<unnamed>' panicked at iceoryx2-bb/posix/src/signal.rs:515:13:
From: SignalHandler { registered_signals: [] } ::: This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
       12 [F] SignalHandler { registered_signals: [] }
              | This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
thread '<unnamed>' panicked at iceoryx2-bb/posix/src/signal.rs:515:13:
From: SignalHandler { registered_signals: [] } ::: This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xQPfJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xQPin,iceoryx2,1900083367,81,NA,fengtuo58,16645218,fengtuo,fengtuo58@gmail.com,NA,2024-01-19T09:49:17Z,2024-01-19T09:49:17Z,"It is not work at this commit
commit 891ae9bc4e26c95c0e067140d93240bba4c6ca86 (origin/main, origin/HEAD)

./benchmark-publish-subscribe 
       11 [F] SignalHandler { registered_signals: [] }
              | This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
thread '<unnamed>' panicked at iceoryx2-bb/posix/src/signal.rs:515:13:
From: SignalHandler { registered_signals: [] } ::: This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
       12 [F] SignalHandler { registered_signals: [] }
              | This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.
thread '<unnamed>' panicked at iceoryx2-bb/posix/src/signal.rs:515:13:
From: SignalHandler { registered_signals: [] } ::: This should never happen! Unable to register raw signal since sigaction was called with invalid parameters.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xQPin/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/81,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xaj_r,iceoryx2,1902788587,81,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-01-21T22:35:12Z,2024-01-21T22:35:12Z,"@fengtuo58 the output you posted cannot be from the current main branch. This is the current string
```rs
""This should never happen! posix::sigaction returned {}. Unable to register raw signal since sigaction was called with invalid parameters: {:?} which lead to error: {:?}.""
```
So there must be `posix::sigaction returned` and `which lead to error: ` in the error string. Can you please check that the you have all the updates?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5xaj_r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/83,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/83,iceoryx2,2079235555,83,Write docker example,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-12T16:30:17Z,2024-03-07T23:52:06Z,"## (Code) Example Of Cumbersome API

iceoryx2 already runs between different docker instances and the host but we do not yet have an example. Create an example and document it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/83/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/87,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/87,iceoryx2,2081132616,87,Undefined behavior in spsc fifo,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-15T02:28:04Z,2024-01-20T04:50:08Z,"## Required information

The `spsc::index_queue` and `spsc::queue` have undefined behavior in pop when there is a `self.read_position.store(.., Ordering::Release)` without a corresponding `Ordering::Acquire` on the same variable.

It was introduced to prevent statement reordering according to the as-if rule.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/90,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/90,iceoryx2,2085069694,90,Kebab case for config file,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-16T22:26:18Z,2024-06-21T11:03:18Z,"## (Code) Example Of Cumbersome API

To cite @elBoberido 

Btw, for config files it is nicer to have kebab-case for the variable names. You just need to use `#[serde(rename_all = ""kebab-case"")]`. Just in case you want to change it in a future version. We are still quite new with iceoryx2 so we still have the chance without breaking too much. **I could take care of that if you like the idea.**

I like it, so have fun @elBoberido 
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/90/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/92,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/92,iceoryx2,2085165841,92,Runtime Fixed Size Types (Dynamic Types) support,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-01-17T00:10:59Z,2024-01-17T00:16:16Z,"## Brief feature description

Currently, iceoryx2 only supports transmission types with a compile time fixed size. There are already types available that support having a fixed size at runtime, but the end user API does not provide an interface to create structs containing them.

The idea would be to introduce a trait to support runtime fixed size types.

```rust
pub trait RuntimeFixedSizeTypeConfig {}

pub trait RuntimeFixedSizeType {
  type Config: RuntimeFixedSizeTypeConfig;
  fn required_memory_size(config: Self::Config) -> usize;
  fn init(&self, allocator: ShmAllocator);
}
```

The user would implement the trait and could use it like:

```rust
let service = zero_copy::Service::new(&service_name)
    .publish_subscribe()
    .open_or_create::<MyDynamicType>()?;

let publisher = service.publisher()
    .max_dynamic_type_size(1024)
    .create()?;

let sample = publisher.loan_uninit(my_dynamic_type_config)?;
sample.write_payload(...);

sample.send();
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/92/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/96,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/96,iceoryx2,2087184100,96,Create decentralized service artifacts cleanup API,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-17T23:30:27Z,2024-07-18T12:43:54Z,"## (Code) Example Of Cumbersome API

Whenever an application crashes or is killed with `SIGKILL` all the resources are left behind. We need a decentral functionality to detect stale resources and clean them up.

So whenever an application is restarted  - typically during development - and detects old resources from a previous run, it automatically removes them.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/96/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,iceoryx2,2092676930,98,ROS2-like CLI for iceoryx2,orecham,8487595,Jeff Ithier,,CLOSED,2024-01-21T17:13:16Z,2024-09-29T00:47:18Z,"## Brief feature description

A ROS2-like CLI enabling users to interact with `iceoryx2` from the terminal would be a useful addition for users to aid development of applications. 

## Detailed information

An summary of the capabilities of the ROS 2 CLI can be found [here](https://github.com/ubuntu-robotics/ros2_cheats_sheet/blob/master/cli/cli_cheats_sheet.pdf). NOTE: The `iceoryx2` does not need to necessarily provide all of the same functionality, this should just be taken as inspiration for what could be useful.

Proposal for initial for CLI functionality:

1. `introspect` - introspect the internals of the `iceoryx2` system (e.g. things stored in shared memory)
1. `processes` - manage processes running `iceoryx2` 
1. `pub` - publish to the `iceoryx2` system from the terminal
1. `rpc` - execute `iceoryx2` rpc operations from the terminal
1. `services` - manage the services currently available in `iceoryx2`
1. `sub` - subscribe to the `iceoryx2` system from the terminal

## Tasks

Follow up from #106:
1. [x] Address TODOs in commands.rs
1. [x] Ensure implementation of commands.rs follows Rust conventions
1. [x] Display installed commands before development commands
1. [x] Work out how to test command lookup in file system
1. [x] Add `iceoryx2-cli` to `internal/scripts/crates_io_publish_script.sh` to release it.

Follow up from #371:
1. [ ] Factor out CLI setup into common lib: https://github.com/eclipse-iceoryx/iceoryx2/pull/371#discussion_r1766353301
    1. Moved to: https://github.com/eclipse-iceoryx/iceoryx2/issues/412","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CXtCI,iceoryx2,2187251848,98,NA,orecham,8487595,Jeff Ithier,,NA,2024-06-24T19:23:30Z,2024-06-24T19:23:30Z,"Next PR:

1. [ ] Address TODOs in `commands.rs`
2. [ ] Ensure implementation of `commands.rs` follows Rust conventions
3. [ ] Display installed commands before development commands
4. [ ] Work out how to test command lookup in file system","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CXtCI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CYMP6,iceoryx2,2187379706,98,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-24T20:50:17Z,2024-06-24T20:50:17Z,@orecham can you add those items directly as tasks to the issue description?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CYMP6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CYof8,iceoryx2,2187495420,98,NA,orecham,8487595,Jeff Ithier,,NA,2024-06-24T22:09:15Z,2024-06-24T22:09:15Z,"> @orecham can you add those items directly as tasks to the issue description?

@elBoberido Done","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CYof8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NFRIT,iceoryx2,2366968339,98,NA,orecham,8487595,Jeff Ithier,,NA,2024-09-22T21:17:12Z,2024-09-22T21:17:12Z,"@elBoberido @elfenpiff I would like to close this issue now that we have the foundation for the CLI tooling. What do you think?

We can add new issues as we think of use-cases. I can only think of one more obvious one at the moment (memory introspection, maybe an `iox2 memory` command). Not sure if the existing API makes this easy to do yet though.

I would also make this open action item a separate issue: `Factor out CLI setup into common lib`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NFRIT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/98,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NapoP,iceoryx2,2372573711,98,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-09-24T23:37:38Z,2024-09-24T23:37:38Z,"@orecham agreed, go ahead","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NapoP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/100,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/100,iceoryx2,2104089718,100,Introduce `Rc` owned management structs,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-28T10:23:11Z,2024-04-16T00:44:18Z,"## Brief feature description

Currently, it is impossible to store a service with its corresponding ports and corresponding samples in a  cache inside one struct due to the problems of Rust self referencing structs.

So something like:
```rust
struct MyThing {
  service: Box<dyn Service<MessageType>>,
  subscriber: Box<dyn Subscribe<MessageType>>,
  sample_cache: Vec<Box<dyn Payload<MessageType>>>,
}
```

cannot be realized. Every sample in the `sample_cache` holds a reference to the `subscriber` to release itself when going out of scope. Also, the `subscriber` holds a reference to `service` to remove it from the service when it goes out of scope.

The solution is, that the underlying construct, that performs the task, is stored in an `Rc` and has a shared ownership. When this is done, the lifetime restrictions should be lifted.

Introduce `Rc` and lift lifetime restrictions

* [x] `Config`
* [x] `Sample`
* [x] `SampleMut`
* [x] `Publisher`
* [x] `Subscriber`
* [x] `Notifier`
* [x] `Listener`
* [x] Remove needless traits `Notify`, `Listen`, `Publish`, `Subscribe`, `Payload`, `PayloadMut` & Update changelog
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/101,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/101,iceoryx2,2104093064,101,Introduce `Rc` with custom allocator,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-01-28T10:30:40Z,2024-01-28T10:30:40Z,"## Brief feature description

With the `Rc` approach in #100 we introduced heap usage.  We need a central construct that owns a custom allocator and provides the allocator to the underlying constructs, namely `Rc`.

Therefore, we need an `Rc` that can be created with `Rc::new_in` and acquires the memory from the custom allocator. See the new `allocator_api` of rust, https://github.com/glandium/allocator_api/ and https://doc.rust-lang.org/std/rc/struct.Rc.html#method.new_in

By default, the `iceoryx2-bb-posix::heap_allocator::HeapAllocator` shall be used. The used allocator trait shall be `iceoryx2-bb-elementary::allocator::BaseAllocator`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/102,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/102,iceoryx2,2104094258,102,Introduce runtime (or node),elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-28T10:34:22Z,2024-06-19T23:39:10Z,"## Brief feature description

A central iceoryx2 runtime shall be introduced that:
* is the factory for `Service`s
* owns an a custom allocator that can be used for the internal `Rc` constructs, see #100 and #101 
* provides this custom allocator to `Service` and the `Service` can provide it to the `Ports` and they again to the `Sample`
* The iceoryx2 runtime shall have a unique name in the system

One idea is also, to not call it runtime but to call it node.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/103,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/103,iceoryx2,2104095548,103,Enable decentral monitoring in runtime (or node),elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-01-28T10:38:19Z,2024-10-03T07:36:04Z,"## Brief feature description

When an application crashes, the resources are not yet cleaned up. With #96 we introduced to a mechanism to check if a process is available or has crashed. The Node in #102 shall instantiate a monitor token so that it can be monitored from within other processes.
If the runtime/node is signaled as dead, the decentral cleanup API shall remove all resources of the dead process.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/104,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/104,iceoryx2,2104152713,104,Evaluate ADS Gateway to enable home automation systems,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-01-28T12:57:22Z,2024-02-09T09:04:13Z,"## Brief feature description

See: https://github.com/Beckhoff/ADS

Having such a gateway would enable the usage of iceoryx2 in home automation systems.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/104/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/104,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5zXkhL,iceoryx2,1935558731,104,NA,patdhlk,9476466,Patrick Dahlke,,NA,2024-02-09T09:04:13Z,2024-02-09T09:04:13Z,"small correction: not only home automation systems, in general every automation system based on Beckhoff TwinCAT PLCs :rocket: ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5zXkhL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/108,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/108,iceoryx2,2121748061,108,Race in `open_or_create`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-06T22:05:35Z,2024-02-07T17:13:48Z,"## Required information

When multiple processes are startup concurrently and are creating the same service with `open_or_create` it can happen that all processes detect the service as non-existing.

When then all processes start creating the service, all except one will fail creating the service. A better option would be that the processes that fail creating the service retry to open the service again.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/110,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/110,iceoryx2,2123998019,110,Implement `Ord` so that `ServiceName` can be used in a `BTreeMap`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-07T22:21:44Z,2024-02-08T01:43:30Z,"## (Code) Example Of Cumbersome API

Currently, the `ServiceName` does not implement `Ord` and can therefore not be used in `BTreeMap`.

## Improvement Suggestion

Implement `Ord` and `PartialOrd` for `FixedByteString` and then implement it in `ServiceName` via the derive macro.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/112,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/112,iceoryx2,2124262571,112,We are bad at naming,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-02-08T02:51:37Z,2024-02-08T03:19:44Z,"## (Code) Example Of Cumbersome API

This issue contains a list of classes that shall be renamed when we get inspired by a better name:
* [ ] `iceoryx2-bb-posix::process_state::ProcessGuard` -> discussion in #113 ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/112,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5zO9Xl,iceoryx2,1933301221,112,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-02-08T03:19:43Z,2024-02-08T03:19:43Z,Great idea. We can use this issue for renaming and use `github discussion` for the bikeshedding :),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5zO9Xl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/115,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/115,iceoryx2,2138251027,115,Implement `memfd` as shared memory concept,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-02-16T09:58:19Z,2024-02-16T09:58:19Z,"## Brief feature description

The linux call `memfd` has the ability to seal memory files, meaning making them immutable for the rest of their lifetime. Choosing them in a shared memory concept could solve data races that can occur in IPC communication.

See: https://dvdhrm.wordpress.com/2014/06/10/memfd_create2/
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,iceoryx2,2139848856,116,Performance problem and Error handling,hippiehunter,624627,Jeff Greene,,CLOSED,2024-02-17T05:56:08Z,2024-03-07T12:45:13Z,"Windows 11/MSVC Rustc 1.70 
and Debian 12 Rustc 1.76

iceoryx 0.2.2 and also iox2-100-pub-sub-without-lifetime-arg

**Observed result or behavior:**
I've adapted the examples into a single program that i run with either subscriber or publisher as a command line argument. The main difference from the examples is that sending and receiving the messages at a much higher rate. 

```rust
use core::time::Duration;
use std::env;
use std::thread::sleep;
use iceoryx2::prelude::*;
use iceoryx2_bb_container::byte_string::FixedSizeByteString;
use iceoryx2_bb_container::vec::FixedSizeVec;
use iceoryx2_bb_posix::signal::SignalHandler;

const CYCLE_TIME: Duration = Duration::from_nanos(1);

#[derive(Debug)]
pub struct BigMessage {
    pub process_id: u32,
    pub req_id: u32,
    pub op_type: i32,
    pub file_id: FixedSizeByteString<128>,
    pub txn_id: u64,
    pub key_data: FixedSizeVec<u8, 64>,
    pub record_data: FixedSizeVec<u8, 64000>,
    pub original_data: FixedSizeVec<u8, 64000>,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {


    let service_name = ServiceName::new(""My/Funk/ServiceName"")?;

    let service = zero_copy::Service::new(&service_name)
        .publish_subscribe()
        .open_or_create::<BigMessage>()?;

    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        println!(""Usage: {} <publisher|subscriber>"", args[0]);
        return Ok(());
    }

    println!(""Running as {}"", args[1]);

    if args[1] == ""publisher"" {
        let publisher = service.publisher().create()?;
        let mut counter = 0;
        loop {
            if SignalHandler::termination_requested() {
                break;
            }
            counter += 1;
            loop {
                let sample = publisher.loan_uninit()?;
                let sample = sample.write_payload(BigMessage {
                    process_id: 1,
                    req_id: counter,
                    op_type: 3,
                    file_id: FixedSizeByteString::from_bytes(b""test"").map_err(|e| { ""error"" })?,
                    txn_id: 4,
                    key_data: FixedSizeVec::new(),
                    record_data: FixedSizeVec::new(),
                    original_data: FixedSizeVec::new(),
                });
                if publisher.send(sample)? == 0 {
                    //it didnt work but also didnt return a real error, sleep and try again
                    sleep(CYCLE_TIME);
                } else {
                    break;
                }
            }
            //println!(""sent"");
        }
    } else {
        let subscriber = service.subscriber().create()?;
        let counter = 0;{
        loop {
            match subscriber.receive()? {
                None => {
                    sleep(CYCLE_TIME);
                    if SignalHandler::termination_requested() {
                        break;
                    }
                },
                Some(sample) => {
                    if sample.payload().req_id % 1000 == 0 {
                        println!(""received"");
                    }
                }
            }
        }

        }
    }
    Ok(())
}

```

I've also been fiddling with the config file mostly these four settings

```
publisher_history_size
subscriber_max_buffer_size 
enable_safe_overflow
unable_to_deliver_strategy
```

Part 1 of my issue is that I just cant seem to move the messages around very fast, its less than 1k messages per second on my 7900x. Ive tried debug and release builds and haven't noticed any significant difference.

Part 2 of my issue is that I cant seem to make it reliable. If I just give it a big number for publisher_history_size and subscriber_max_buffer_size it seems to be mostly reliable but occasionally I will still see publisher.send(...) return 0 and print something like this to the console. Rather than return 0 I would have thought it would return an error. 

```
Publisher { port_id: UniquePublisherId(UniqueSystemId { value: 1738265885562966903244646632352716 }), sample_reference_counter: [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2,
              1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0], data_segment: Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_21940_1738265885562966903244646632352716.publish
              er_data"" } }, size: 19383105, base_address: 0x1f8ac2d0000, has_ownership: true, file_descriptor: FileDescriptor { value: 0, is_owned: true }, memory_lock: None }, name: FileName { value: Fi
              xedSizeByteString<255> { len: 40, data: ""21940_1738265885562966903244646632352716"" } }, allocator: 0x1f8ac2d0000 }, config: LocalPublisherConfig { max_loaned_samples: 2, unable_to_deliver_s
              trategy: Block }, subscriber_connections: SubscriberConnections { connections: [UnsafeCell { .. }, UnsafeCell { .. }], port_id: UniquePublisherId(UniqueSystemId { value: 1738265885562966903
              244646632352716 }), config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"",
               publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connect
              ion"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, publisher_
              max_loaned_samples: 2, publisher_history_size: 16, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, static_config:
               StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 16, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, enable_safe_overflow: false, type_name: ""iceo
              ryx_test::BigMessage"" } }, subscriber_list_state: UnsafeCell { .. }, history: Some(UnsafeCell { .. }), service: Service { state: ServiceState { static_config: StaticConfig { uuid: ""b61bd15e
              8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig {
               max_subscribers: 2, max_publishers: 5000, history_size: 16, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMe
              ssage"" }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"",
               publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connect
              ion"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, publisher_
              max_loaned_samples: 2, publisher_history_size: 16, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, dynamic_storag
              e: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105238, base_address: 0
              x1f8ac2b0000, has_ownership: false, file_descriptor: FileDescriptor { value: 2, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61
              bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteSt
              ring<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 25, data: ""c:\Temp\iceoryx2\services""
              } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fals
              e, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_descripto
              r: FileDescriptor { value: 1, is_owned: true } }, len: 343 } } }, degration_callback: None, loan_counter: 1, _dynamic_config_guard: UniqueIndex { value: 0, index_set addr: 0xc3acd1f920 }, _
              phantom_message_type: PhantomData<iceoryx_test::BigMessage> }
              | Unable to send sample via connection Connection { sender: Sender { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_173826588556296690
              | 3244646632352716_2349590387523030532116418894603304.connection"" } }, size: 1182, base_address: 0x1f8ac290000, has_ownership: false, file_descriptor: FileDescriptor { value: 3, is_owned: t
              | rue }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 69, data: ""1738265885562966903244646632352716_2349590387523030532116418894603304"" } } } } since the ret
              | rieve buffer is full. This can be caused by a corrupted retrieve channel.
```

Any help, pointers or suggestions you can provide would be much appreciated.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50PkaQ,iceoryx2,1950238352,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-17T15:37:35Z,2024-02-17T15:37:35Z,"@hippiehunter 

For Part 2 of your error message, this is a bug, and it seems I have miscalculated the required size of the retrieve channel - possibly the usual off by one error ;) . I will fix this!

For Part 1. I think the bottleneck is maybe the line `sleep(CYCLE_TIME);` with a cycle time of 1 ns. In the worst case, the process states to the OS scheduler, please let me sleep and then is wakened up some time later and this procedure of -scheduling another process and then wake the current process up again and continue - can be very expensive.
But the solution is simple: remove the line `sleep(CYCLE_TIME);` and let's see if it changes anything.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50PkaQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50Pk5V,iceoryx2,1950240341,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-17T15:46:38Z,2024-02-17T15:46:38Z,"@hippiehunter Btw, the settings can also be set via:

* publisher_history_size
* subscriber_max_buffer_size 
* enable_safe_overflow
* unable_to_deliver_strategy

```rust
 let service_name = ServiceName::new(""My/Funk/ServiceName"")?;
 let service = zero_copy::Service::new(&service_name)
     .publish_subscribe()
     .history_size(12)
     .subscriber_max_buffer_size(5)
     .enable_safe_overflow(true)
     .open_or_create::<TransmissionData>()?;
 service
     .publisher()
     .unable_to_deliver_strategy(UnableToDeliverStrategy::DiscardSample);
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50Pk5V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50TyuJ,iceoryx2,1951345545,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-18T14:39:07Z,2024-02-18T14:39:07Z,"@hippiehunter Part 2 should be fixed now.

If you confirm that the removal of every occurrence of `sleep(CYCLE_TIME);` fixes your performance problem, I would close the issue.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50TyuJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50UAPv,iceoryx2,1951400943,116,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-18T18:03:27Z,2024-02-18T18:03:27Z,"When i remove the sleep(CYCLE_TIME); call I cant get the publisher connected to the subscriber. 


```
PublisherConnections { connections: [UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. },
... 
UnsafeCell continues for a while
...
, subscriber_id: UniqueSubscriberId(UniqueSystemId { value: 1619740554441627454765778268903520 }), config: Config { global: Global {
               root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creat
              ion_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history
              _size: 16, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, static_config: StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 16, subscriber_max_buffer_size: 64, subscriber_max_borro
              wed_samples: 2, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMessage"" } }, service: Service { state: ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { len: 1
              9, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 16, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMess
              age"" }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service
              "", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 64, subscriber_max_borrowed_samples: 2,
               publisher_max_loaned_samples: 2, publisher_history_size: 16, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<
              255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105238, base_address: 0x1e925fe0000, has_ownership: false, file_descriptor: FileDescriptor { value: 1, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<25
              5> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e12515
              6a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 25, data: ""c:\Temp\iceoryx2\services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, dat
              a: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true } }, l
              en: 343 } } }, degration_callback: None, publisher_list_state: UnsafeCell { .. }, _phantom_message_type: PhantomData<iceoryx_test::BigMessage> }
              | Unable to establish connection to new publisher UniquePublisherId(UniqueSystemId { value: 3370999858656926372933486367672852 })
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50UAPv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50WEXw,iceoryx2,1951942128,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-19T08:33:56Z,2024-02-19T08:33:56Z,"@hippiehunter I used your code can confirm the bug. It is a little weird race, both check successfully that the underlying resource is not existing, then both want to create this resource and only one can win this race - the other one is then complaining that the resource already exists and this is the error message you see.

The solution is simple, try to open it again and everything shall work. We encountered exactly the same thing on a different place already. I will try to fix this today.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50WEXw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50WZ-w,iceoryx2,1952030640,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-19T09:26:27Z,2024-02-19T09:26:27Z,"@hippiehunter I fixed the connection issue, but there is still homework left:
1. I still encountered one very rare occasions the retrieve buffer is full issue
2. We need to introduce a flag to track the connection creation

I will look into those issues and fix them as soon as possible. But in the meantime you should be able to continue when you base your work on: https://github.com/eclipse-iceoryx/iceoryx2/pull/124

I adjusted your code a bit to get a clearer understanding, and when I removed the `sleep` I got roughly a throughput of around 20k. (Laptop with i7-10875H CPU @ 2.30GHz)

```rust
use core::time::Duration;
use iceoryx2::prelude::*;
use iceoryx2_bb_container::byte_string::FixedSizeByteString;
use iceoryx2_bb_container::vec::FixedSizeVec;
use iceoryx2_bb_posix::signal::SignalHandler;
use std::env;
use std::thread::sleep;
use std::time::Instant;

const CYCLE_TIME: Duration = Duration::from_nanos(1);

#[derive(Debug)]
pub struct BigMessage {
    pub process_id: u32,
    pub req_id: u32,
    pub op_type: i32,
    pub file_id: FixedSizeByteString<128>,
    pub txn_id: u64,
    pub key_data: FixedSizeVec<u8, 64>,
    pub record_data: FixedSizeVec<u8, 64000>,
    pub original_data: FixedSizeVec<u8, 64000>,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let service_name = ServiceName::new(""My/Funk/ServiceName"")?;

    let service = zero_copy::Service::new(&service_name)
        .publish_subscribe()
        .open_or_create::<BigMessage>()?;

    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        println!(""Usage: {} <publisher|subscriber>"", args[0]);
        return Ok(());
    }

    println!(""Running as {}"", args[1]);

    if args[1] == ""publisher"" {
        let publisher = service.publisher().create()?;
        let mut counter = 0;
        loop {
            if SignalHandler::termination_requested() {
                break;
            }
            counter += 1;

            let sample = publisher.loan_uninit()?;
            let sample = sample.write_payload(BigMessage {
                process_id: 1,
                req_id: counter,
                op_type: 3,
                file_id: FixedSizeByteString::from_bytes(b""test"").map_err(|e| ""error"")?,
                txn_id: 4,
                key_data: FixedSizeVec::new(),
                record_data: FixedSizeVec::new(),
                original_data: FixedSizeVec::new(),
            });
            if sample.send()? == 0 {
                //it didnt work but also didnt return a real error, sleep and try again
                //sleep(CYCLE_TIME);
            } else {
                //    break;
            }
        }
    } else {
        let subscriber = service.subscriber().create()?;
        let counter = 0;
        let start = Instant::now();
        {
            loop {
                match subscriber.receive()? {
                    None => {
                        //sleep(CYCLE_TIME);
                        if SignalHandler::termination_requested() {
                            break;
                        }
                    }
                    Some(sample) => {
                        if sample.payload().req_id % 10000 == 0 {
                            println!(
                                ""received: {}, time: {:?}"",
                                sample.payload().req_id,
                                start.elapsed()
                            );
                        }
                    }
                }
            }
        }
    }
    Ok(())
}
```

And the output:

```
received: 10000, time: 1.430437594s
received: 20000, time: 1.896037592s
received: 30000, time: 2.372263314s
received: 40000, time: 2.844562772s
received: 50000, time: 3.357285109s
received: 60000, time: 3.836857632s
received: 70000, time: 4.304958051s
received: 80000, time: 4.778587094s
received: 90000, time: 5.242260115s
received: 100000, time: 5.707258093s
received: 110000, time: 6.17250077s
received: 120000, time: 6.63923506s
received: 130000, time: 7.112825314s
received: 140000, time: 7.582082056s
received: 150000, time: 8.046913373s
received: 160000, time: 8.515481013s
received: 170000, time: 8.985831923s
received: 180000, time: 9.451750306s
received: 190000, time: 9.91745711s
received: 200000, time: 10.385213389s
received: 210000, time: 10.859284136s
```

I also run a `mbw` a memory benchmark and my theoretical memory maximum is around ~8500 MiB/s. This throughput here, with `BigData` having a size of 128 KiB and ~20K samples, is around ~2450 MiB/s, so there is maybe still space left to the top. But iceoryx2 is a young library, and we did not yet start with the extreme performance optimizations. But I also think that ~8500 MiB/s is a more theoretical maximum, we have OS interference when working with multiple processes, wakeups etc. and also need to sync memory between CPU cores - this all takes time and is not included in the measurement from above.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50WZ-w/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50cTRb,iceoryx2,1953576027,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-20T06:41:41Z,2024-02-20T06:41:41Z,@hippiehunter Everything on main should be fixed now. Could you please confirm.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50cTRb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50cgUE,iceoryx2,1953629444,116,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-20T07:33:51Z,2024-02-20T07:33:51Z,"I just updated to the current checked in on main and It crashes the consumer with this

```
Running as consumer
        8 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 84, data: ""iox2_3203353066776743035165720297650548_928870977317242431530252316446368.connection"" } }, size: 166, is_memory_locked: false, has_ownership: true, permission: OWNER_READ | OWNER_WRITE | O
              WNER_EXEC | OWNER_ALL, creation_mode: Some(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
< Win32 API error > C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2-pal\posix\src\windows\mman.rs:225 CreateFileA(shm_file_path(name, SHM_STATE_SUFFIX).as_ptr(),
    GENERIC_WRITE | GENERIC_READ,
    FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
    core::ptr::null::<SECURITY_ATTRIBUTES>(), CREATE_NEW,
    FILE_ATTRIBUTE_NORMAL, 0)
 [ 80 ] The file exists.

        9 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 84, data: ""iox2_3203353066776743035165720297650548_928870977317242431530252316446368.connection"" } }, size: 166, is_memory_locked: false, has_ownership: true, permission: OWNER_READ | OWNER_WRITE | O
              WNER_EXEC | OWNER_ALL, creation_mode: Some(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to create shared memory since it already exists.
< Win32 API error > C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2-pal\posix\src\windows\mman.rs:258 WriteFile(fd_handle, (&shm_size as *const u64) as *const u8, 8,
    &mut bytes_written, core::ptr::null_mut::<OVERLAPPED>())
 [ 5 ] Access is denied.

       10 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 84, data: ""iox2_3203353066776743035165720297650548_928870977317242431530252316446368.connection"" } }, size: 166, base_address: 0x2992c7d0000, has_ownership: true, file_descriptor: FileDescriptor { value: 2,
               is_owned: true }, memory_lock: None }
              | create
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_40432_3203353066776743035165720297650548.publisher_data"" } }, size: 898689, base_address: 0x2992d050000, has_ownership: false, file_descriptor: FileDescriptor { value: 3, is_owned: true }, m
              emory_lock: None }
              | open
thread 'main' panicked at 'misaligned pointer dereference: address must be a multiple of 0x8 but is 0x2992d0500a2', C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2\src\raw_sample.rs:62:18
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library\std\src\panicking.rs:578
   1: core::panicking::panic_fmt
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library\core\src\panicking.rs:67
   2: core::panicking::panic_misaligned_pointer_dereference
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library\core\src\panicking.rs:174
   3: iceoryx2::raw_sample::RawSample<iceoryx2::service::header::publish_subscribe::Header,iceoryx_test::BigMessage>::as_ref
             at C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2\src\raw_sample.rs:62
   4: iceoryx2::raw_sample::RawSample<iceoryx2::service::header::publish_subscribe::Header,iceoryx_test::BigMessage>::as_data_ref
             at C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2\src\raw_sample.rs:76
   5: iceoryx2::sample::impl$2::payload<iceoryx_test::BigMessage>
             at C:\Users\the_e\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\80db0c4\iceoryx2\src\sample.rs:68
   6: iceoryx_test::main
             at D:\repos\iceoryx_test\src\main.rs:84
   7: core::ops::function::FnOnce::call_once<enum2$<core::result::Result<tuple$<>,alloc::boxed::Box<dyn$<core::error::Error>,alloc::alloc::Global> > > (*)(),tuple$<> >
             at /rustc/90c541806f23a127002de5b4038be731ba1458ca\library\core\src\ops\function.rs:250
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50cgUE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50dQ7X,iceoryx2,1953828567,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-20T09:42:48Z,2024-02-20T09:42:48Z,"@hippiehunter Could you please try it also on linux? The error message on Windows that the file already exists is expected and in the next step iceoryx tries to open it when it already exists. But we have to get rid of the error message, otherwise it's a bit confusing.

And I think Windows seems to have a totally new problem here - misaligned pointers :/ ... Theoretically, this can only happen when the shared memory is not aligned - but it should be always page size aligned. I have to dig into this.

And thanks for your patience and crash reports!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50dQ7X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50gK0b,iceoryx2,1954589979,116,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-20T16:28:41Z,2024-02-20T16:28:41Z,I tried running it a few times on linux and it seems to work fine,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50gK0b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50gpz8,iceoryx2,1954716924,116,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-20T17:38:42Z,2024-02-20T17:38:42Z,"I tried building the linux side with --release and i sometimes see this error on the publisher. Thanks for looking! 


```
Running as publisher
        9 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_13704_1085742739095478483720882696449008.publisher_data"" } }, size: 898689, base_address: 0x7fbc5a761000, has_ownership: true, file_descriptor: FileDescriptor { value: 3
              , is_owned: true }, memory_lock: None }
              | create
       10 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_1085742739095478483720882696449008_1085584282770449955045338807874010.connection"" } }, size: 166, is_memory_locked: false, has_ownership: true, permission: OWNER_
              READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Some(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_1085742739095478483720882696449008_1085584282770449955045338807874010.connection"" } }, size: 166, base_address: 0x7fbc5ab3b000, has_ownership: true, file_descriptor: Fil
              eDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | create
       12 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 7, borrowed_indices: 4, head: 17179869188, is_memory_initialized: true }, bucket_size: 128360, bucket_al
              ignment: 8, start: 140446948266152, size: 898527, is_memory_initialized: true }
              | Tried to release memory (140446948266146) which does not belong to this allocator.
       13 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 7, borrowed_indices: 4, head: 17179869188, is_memory_initialized: true }, buc
              ket_size: 128360, bucket_alignment: 8, start: 140446948266152, size: 898527, is_memory_initialized: true }, base_address: 140446948266146, max_supported_alignment_by_memory: 4096 }
              | Failed to release shared memory chunk
       14 [D] Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_13704_1085742739095478483720882696449008.publisher_data"" } }, size: 898689, base_address: 0x7fbc5a761000, has_ownership: true, file_descriptor: F
              ileDescriptor { value: 3, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""13704_1085742739095478483720882696449008"" } }, allocator: 0x7fbc5a761000 }
              | Failed to deallocate shared memory chunk due to an internal allocator failure.
       15 [F] Publisher { port_id: UniquePublisherId(UniqueSystemId { value: 1085742739095478483720882696449008 }), sample_reference_counter: [0, 1, 1, 2, 0, 0, 0], data_segment: Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { l
              en: 60, data: ""iox2_13704_1085742739095478483720882696449008.publisher_data"" } }, size: 898689, base_address: 0x7fbc5a761000, has_ownership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }, name: FileName { value: Fi
              xedSizeByteString<255> { len: 40, data: ""13704_1085742739095478483720882696449008"" } }, allocator: 0x7fbc5a761000 }, config: LocalPublisherConfig { max_loaned_samples: 1, unable_to_deliver_strategy: Block }, dynamic_storage: Storage { shm: SharedMemory { n
              ame: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105254, base_address: 0x7fbc5a83d000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true }, me
              mory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, subscriber_connections: SubscriberConnectio
              ns { connections: [UnsafeCell { .. }, UnsafeCell { .. }], port_id: UniquePublisherId(UniqueSystemId { value: 1085742739095478483720882696449008 }), config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\
              "", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" }
               }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, publisher_max_loaned_samples: 1, publisher_history_size: 1, enable_safe_overflow: fa
              lse, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, static_config: StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 1, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1,
              enable_safe_overflow: false, type_name: ""iceoryx_test::BigMessage"" } }, subscriber_list_state: UnsafeCell { .. }, history: Some(UnsafeCell { .. }), service: Service { state: ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8
              e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 1, subscriber_max_buffer_size: 1
              , subscriber_max_borrowed_samples: 1, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMessage"" }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: S
              ervice { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publi
              sh_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, publisher_max_loaned_samples: 1, publisher_history_size: 1, enable_safe_overflow: false, unable_to_deliver_strateg
              y: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105254
              , base_address: 0x7fbc5a83d000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phan
              tom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { valu
              e: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership:
              false, file: File { path: Some(FilePath { value: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor { value: 4, is_owned: true }, has_ownership: fa
              lse }, len: 341 } } }, degration_callback: None, loan_counter: 1, dynamic_publisher_handle: ContainerHandle { index: 0, container_id: 1 }, _phantom_message_type: PhantomData<iceoryx_test::BigMessage> }
              | This should never happen! Failed to deallocate the reclaimed ptr. Either the data was corrupted or an invalid ptr was returned.
thread 'main' panicked at /home/hh/.cargo/git/checkouts/iceoryx2-1e1d4490bb91753f/80db0c4/iceoryx2/src/port/publisher.rs:387:37:
From: Publisher { port_id: UniquePublisherId(UniqueSystemId { value: 1085742739095478483720882696449008 }), sample_reference_counter: [0, 1, 1, 2, 0, 0, 0], data_segment: Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_13704_1085742739095478483720882696449008.publisher_data"" } }, size: 898689, base_address: 0x7fbc5a761000, has_ownership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""13704_1085742739095478483720882696449008"" } }, allocator: 0x7fbc5a761000 }, config: LocalPublisherConfig { max_loaned_samples: 1, unable_to_deliver_strategy: Block }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105254, base_address: 0x7fbc5a83d000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, subscriber_connections: SubscriberConnections { connections: [UnsafeCell { .. }, UnsafeCell { .. }], port_id: UniquePublisherId(UniqueSystemId { value: 1085742739095478483720882696449008 }), config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, publisher_max_loaned_samples: 1, publisher_history_size: 1, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, static_config: StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 1, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMessage"" } }, subscriber_list_state: UnsafeCell { .. }, history: Some(UnsafeCell { .. }), service: Service { state: ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 2, max_publishers: 5000, history_size: 1, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, enable_safe_overflow: false, type_name: ""iceoryx_test::BigMessage"" }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 2, max_publishers: 5000, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 1, publisher_max_loaned_samples: 1, publisher_history_size: 1, enable_safe_overflow: false, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 105254, base_address: 0x7fbc5a83d000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor { value: 4, is_owned: true }, has_ownership: false }, len: 341 } } }, degration_callback: None, loan_counter: 1, dynamic_publisher_handle: ContainerHandle { index: 0, container_id: 1 }, _phantom_message_type: PhantomData<iceoryx_test::BigMessage> } ::: This should never happen! Failed to deallocate the reclaimed ptr. Either the data was corrupted or an invalid ptr was returned.
stack backtrace:
   0: rust_begin_unwind
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:645:5
   1: core::panicking::panic_fmt
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:72:14
   2: iceoryx2::port::publisher::Publisher<Service,MessageType>::retrieve_returned_samples
   3: <iceoryx2::port::publisher::Publisher<Service,MessageType> as iceoryx2::port::publish::internal::PublishMgmt>::send_impl
   4: iceoryx_test::main
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50gpz8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52I7bt,iceoryx2,1982052077,116,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-06T23:41:38Z,2024-03-06T23:41:38Z,"@hippiehunter I wrote a lot of tests, some careful reviews and discovered and fixed all bugs you unraveled - hopefully.

There are still some issues left I will tackle in the next days:

1. Calling this concurrently in busy loops from multiple processes may result in a state where no new services can be created.
```rust
let service = zero_copy::Service::new(&service_name)
        .publish_subscribe()
        .open_or_create::<BigMessage>()?;
// do stuff
drop(service);
```

2. Creating and destroying `Listener`s in a busy loop may lead to connection failures on `Notifier` side. The tests are already written, and the solution is a combination of shared memory bit set and a trigger like semaphore, unix domain socket etc. - in the end the iceoryx1 approach.

3. When in a busy loop Publishers are created and destroyed, it can cause the Subscriber to release the sample to the wrong publisher. This is already fixed in the PR #144 

But your code should now be completely stable. So if you have time to confirm this, I would close the issue and ping you on the other issues when the two remaining problems are also fixed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52I7bt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/116,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52K-0N,iceoryx2,1982590221,116,NA,hippiehunter,624627,Jeff Greene,,NA,2024-03-07T06:44:28Z,2024-03-07T06:44:28Z,"I think my stuff is all stable now, I tried my actual, slightly more complicated use case and it seems reliable now. Thanks for all your efforts in this! ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52K-0N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/118,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/118,iceoryx2,2141118764,118,Race in 'SafelyOverflowingIndexQueue::pop',elBoberido,56729607,Mathias Kraus,,OPEN,2024-02-18T18:04:45Z,2024-02-18T18:04:45Z,"## Required information

**Operating system:**
all

**Rust version:**
all

**Cargo version:**
all

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**
Assuming the following scenario:
- capacity is 1 (underlying buffer capacity is 2)
- queue is full
- `pop` loads write position
- producer does an overflowing push
- `pop` loads read position
- read and write position are equal -> empty

Theoretically, this can happen for each `pop` operation if the `push` frequency is high enough. It can also happen for larger capacities but the probability is not as hight since the producer has to push more often within the window of the two load operations in `pop`

**Expected result or behaviour:**
The queue should detect the race and repeat the pop operation until it is successful if the queue is not empty.

**Conditions where it occurred / Performed steps:**
See `Observed result or behaviour`
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/118/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/119,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/119,iceoryx2,2141123408,119,Insufficient memory reordering protection in `spsc::Queue::push` and `spsc::Queue::pop`,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-02-18T18:16:42Z,2024-02-19T11:30:19Z,"## Required information

**Operating system:**
all

**Rust version:**
all

**Cargo version:**
all

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

The `data` access is not sufficiently protected against a reordering with `read_position`. While there is a `AqcRel` fence, the fence has no counterpart to synchronize with. This can be fixed by replacing the fence with a store on `read_position` with `Ordering::Release` in `pop` and a load with `Ordering::Acquire` in `push`.

**Expected result or behaviour:**

The `data` array is protected against reordering.

**Conditions where it occurred / Performed steps:**

It can happen whenever the CPU reorders the instructions.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/119/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/120,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/120,iceoryx2,2141129578,120,Wrong memory order in fence synchronization in 'UniqueIndexSet',elBoberido,56729607,Mathias Kraus,,OPEN,2024-02-18T18:33:42Z,2024-02-18T18:33:43Z,"## Required information

**Operating system:**
all

**Rust version:**
all

**Cargo version:**
all

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

The `UniqueIndexSet` uses fences to synchronize `next_free_index`. The memory order of the fences is wrong and needs to be changed. It needs to be `Ordering::Release` in `acquire_raw_index` and `Ordering::Acquire` in `release_raw_index`.

**Expected result or behaviour:**

Proper ordering for the fences.

**Conditions where it occurred / Performed steps:**

If the index is send to another thread via a relaxed atomic operation, a reordering can happen.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/120/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,iceoryx2,2141153397,121,Explore Miri and Loom for hardening of lock-free code,elBoberido,56729607,Mathias Kraus,,OPEN,2024-02-18T19:38:44Z,2024-02-21T18:42:42Z,"## Brief feature description

It's hard to get lock-free code right and one can easily introduce races. [Miri](https://github.com/rust-lang/miri) and [Loom](https://crates.io/crates/loom) can help to find those races

## Detailed information

Miri and Loom can help to harden to lock-free structures. We need to check the limits on these tools and  how to integrate them into the CI.

Here is a small example of a FIFO with a wrong memory ordering on line 98: https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=7e42e80e68c48de09c7615422eea3c00
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50kuSY,iceoryx2,1955783832,121,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-21T02:56:46Z,2024-02-21T02:56:46Z,"I tried building a proof of concept for using loom in the lock-free area. I ran into some issues and figured i might share what I learned here. 
* `thread::scope` doesn't exist in loom directly. There is a [PR](https://github.com/tokio-rs/loom/pull/312) to the loom repo that adds it.
* `loom::sync::barrier` exists only to allow code to compile it throws at runtime and using std::sync::barrier results in deadlocks for the current tests. These are more or less expected because loom is an intentionally unfair scheduler. I haven't spent enough time to figure out how to make the mpmc tests run properly without the barriers. 
* `FixedSizeContainer` for non primitive types segfaults during construction and I don't know enough to determine if its a loom problem, a FixedSizeContainer problem, or a problem with how i adapted the code to use loom::cell::UnsafeCell. 
* `UnsafeCell` The key change as I understand it revolves around not using * or .get() on the UnsafeCell but instead, refactoring to use `with` and `with_mut` depending on if you need read or write access to the contents. The required changes weren't bad in the lock-free area but I didn't do any analysis on what it would mean to the rest of the codebase.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50kuSY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50onXy,iceoryx2,1956804082,121,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-02-21T14:42:36Z,2024-02-21T14:42:36Z,"@hippiehunter thanks for looking into this. Do you have experience with loom and know it's limitations?

I've only some experience with Miri and it seems to work quite good in general but there are also cases where it either generates false positives or I do not understand the underlying problem.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50onXy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50rtwl,iceoryx2,1957616677,121,NA,hippiehunter,624627,Jeff Greene,,NA,2024-02-21T18:21:09Z,2024-02-21T18:21:09Z,"I don't have any practical experience with loom, it's been on my todo list for a while and this looked like a good place to start. My understanding of its limitations only comes from what I've read in their documentation/issues and random blogs.

I tried running miri on the same test and it seems to be failing for FixedSizeContainer<TestType, CAPACITY> in the same place that loom fails. You might have a better understanding of this error message.

```
error: Undefined Behavior: trying to retag from <wildcard> for SharedReadWrite permission at alloc35928[0x50], but no exposed tags have suitable permission in the borrow stack for this location
   --> /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/unique_index_set.rs:429:19
    |
429 |             &mut *(*self.data_ptr.as_ptr().offset(index as isize)).get()
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                   |
    |                   trying to retag from <wildcard> for SharedReadWrite permission at alloc35928[0x50], but no exposed tags have suitable permission in the borrow stack for this location
    |                   this error occurs as part of retag at alloc35928[0x50..0x54]
    |
    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental
    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information
    = note: BACKTRACE:
    = note: inside `iceoryx2_bb_lock_free::mpmc::unique_index_set::UniqueIndexSet::get_next_free_index` at /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/unique_index_set.rs:429:19: 429:67
    = note: inside `iceoryx2_bb_lock_free::mpmc::unique_index_set::UniqueIndexSet::acquire_raw_index` at /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/unique_index_set.rs:358:29: 358:63
    = note: inside `iceoryx2_bb_lock_free::mpmc::unique_index_set::UniqueIndexSet::acquire_with_additional_cleanup::<'_, {closure@iceoryx2_bb_lock_free::mpmc::container::Container<TestType>::add::{closure#0}}>` at /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/unique_index_set.rs:301:18: 301:42
    = note: inside `iceoryx2_bb_lock_free::mpmc::container::Container::<TestType>::add` at /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/container.rs:281:15: 281:75
    = note: inside `iceoryx2_bb_lock_free::mpmc::container::FixedSizeContainer::<TestType, 129>::add` at /mnt/d/repos/iceoryx2/iceoryx2-bb/lock-free/src/mpmc/container.rs:510:18: 510:43
note: inside `mpmc_container::mpmc_container_add_and_remove_elements_works::<TestType>`
   --> iceoryx2-bb/lock-free/tests/mpmc_container_tests.rs:91:25
    |
91  |             let index = sut.add((i * 3 + 1).into());
```

interestingly while trying to feel this error out, I tried switching to `RelocatablePointer<UnsafeCell<AtomicU32>>`instead of `RelocatablePointer<UnsafeCell<u32>>` for UniqueIndexSet.data_ptr. Then I changed the helpers in UniqueIndexSet like this

```
fn get_next_free_index(&self, index: u32) -> u32 {
        unsafe {
            (*(*self.data_ptr.as_ptr().offset(index as isize)).get()).load(Ordering::Relaxed)
        }
    }
    #[allow(clippy::mut_from_ref)]
    fn set_next_free_index(&self, index: u32, value: u32) {
        #[deny(clippy::mut_from_ref)]
        unsafe {
            (*(*self.data_ptr.as_ptr().offset(index as isize)).get()).store(value, Ordering::Relaxed);
        }
    }
```

As well as replacing the helper usages where appropriate. This made the tests pass under miri but I don't have any confidence in my ability to reason about Ordering::Relaxed so I fear I might be masking something. Anyway, sorry if I'm just generating noise.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50rtwl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50r7Yy,iceoryx2,1957672498,121,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-21T18:42:00Z,2024-02-21T18:42:00Z,"@hippiehunter Wow, that's awesome. I already have my full focus exactly on this lock-free thing. I have a fixed some parts of your bug-report on the branch: `iox2-129-fix-missing-connections` and wrote some tests that at least very reliable crash for now.

I will try to incorporate your suggestions and let's see if we can get this thing running.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50r7Yy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/121,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50r7pI,iceoryx2,1957673544,121,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-02-21T18:42:41Z,2024-02-21T18:42:41Z,"Right, `UniqueIndexSet` has a memory order issue which I need to fix (#120)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc50r7pI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/123,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/123,iceoryx2,2141793718,123,`iceoryx2-cal::hash` Introduce uuid type and make it convertable to `FileName`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-19T08:26:23Z,2024-02-21T23:24:25Z,"## Brief feature description

All over the code the `uuid` is used as basis for a files and therefore for the `FileName`. It is always safe to convert the uuid to a file name, nevertheless the user has to write `unsafe {}` blocks with a safety statement that it is safe. A better approach would be to bake this all in, into its own uuid type.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/125,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/125,iceoryx2,2142892621,125,Data race due to operation reordering in 'spmc::UnrestrictedAtomic::load',elBoberido,56729607,Mathias Kraus,,CLOSED,2024-02-19T17:48:21Z,2024-02-21T11:04:00Z,"## Required information

**Operating system:**
all

**Rust version:**
all

**Cargo version:**
all

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

Reading from `data` in `load` can lead to a data race due to a reordering with the check to determine whether the write position changed.

**Expected result or behaviour:**

No reordering happens.

**Conditions where it occurred / Performed steps:**

Data race in the CI. Hard to reproduce.

CI failure on aarch64
```
test spmc_unrestricted_atomic_load_store_works_concurrently ... FAILED
failures:
---- spmc_unrestricted_atomic_load_store_works_concurrently stdout ----
thread '<unnamed>' panicked at iceoryx2-bb/lock-free/tests/spmc_unrestricted_atomic_tests.rs:102:21:
assertion failed: expr: verify_no_data_race(&sut.load()) == true;  value: false == true
stack backtrace:
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
thread 'spmc_unrestricted_atomic_load_store_works_concurrently' panicked at iceoryx2-bb/lock-free/tests/spmc_unrestricted_atomic_tests.rs:96:5:
a scoped thread panicked
stack backtrace:
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
failures:
    spmc_unrestricted_atomic_load_store_works_concurrently
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/129,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/129,iceoryx2,2146010368,129,Publisher/Subscriber fail to connect,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-21T07:26:16Z,2024-03-06T23:33:54Z,"## Required information

**Operating system:**
Linux 6.7.3-arch1-2

**Rust version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**Cargo version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**iceoryx2 version:**
`main` branch

**Fix:**
The methods `Publisher|Subscriber::populate_{subscriber|publisher}_channels()` both had the problem that when the corresponding port goes out of scope and is replaced with a new port, that this is not detected and the old connection is kept.

**Observed result or behaviour:**
When either a publisher or subscriber is already running, and a new counterpart is started (subscriber/publisher) they sometimes fail to connect. This can be fixed when another publisher or subscriber is connecting - it seems that the ports are sometimes not informed about new participants.

**Expected result or behaviour:**
Connecting ports always works

**Conditions where it occurred / Performed steps:**
Start a single publisher and start stop subscriber multiple times with some time in between.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/130,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/130,iceoryx2,2146012961,130,Stop/Start subscriber leads to OutOfMemory on publisher side,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-21T07:28:03Z,2024-03-06T23:34:32Z,"## Required information

**Operating system:**
Linux 6.7.3-arch1-2

**Rust version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**Cargo version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**iceoryx2 version:**
`main` branch

**Fix:**
The problem had two causes:
 * The publisher did not recycle samples that were stored in the receive channel, only the retrieve channel was recycled
 * When the subscriber dies and has loaned samples, all those samples leak

The `UsedChunkList` from iceoryx1 was ported and whenever a connection is terminated all samples from the `UsedChunkList` will be recycled.

**Observed result or behaviour:**
When a subscriber is stopped and reconnected, it can lead to a OutOfMemory error on the publisher side.

**Expected result or behaviour:**
No out of memory.

**Conditions where it occurred / Performed steps:**
```
       96 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_1439258800234125956732939963044004
              _1512227937909763411657611488120570.connection"" } }, size: 190, is_memory_locked: false, has_ownership: true, permission: OWNER_
              READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, creation_mode: Some(OpenOrCreate), zero_memory: true, access_mode: ReadWrite, enfor
              ce_base_address: None }
              | Unable to create shared memory since it already exists.
       97 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_1439258800234125956732939963044004_151222
              7937909763411657611488120570.connection"" } }, size: 190, base_address: 0x79024f6b1000, has_ownership: true, file_descriptor: Fil
              eDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | create
       98 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: PhantomData<core::cell::Unsafe
              Cell<u32>> }, capacity: 36, borrowed_indices: 36, head: 157183357176, is_memory_initialized: true }, bucket_size: 128360, bucket
              _alignment: 8, start: 133050822349080, size: 4620967, is_memory_initialized: true }
              | No more buckets available to allocate 128360 bytes with an alignment of 8.
       99 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: Pha
              ntomData<core::cell::UnsafeCell<u32>> }, capacity: 36, borrowed_indices: 36, head: 157183357176, is_memory_initialized: true }, 
              bucket_size: 128360, bucket_alignment: 8, start: 133050822349080, size: 4620967, is_memory_initialized: true }, base_address: 13
              3050822349078, max_supported_alignment_by_memory: 4096 }
              | Unable to allocate memory.
      100 [D] Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_18166_14392588002
              34125956732939963044004.publisher_data"" } }, size: 4621245, base_address: 0x79024f00d000, has_ownership: true, file_descriptor: 
              FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, da
              ta: ""18166_1439258800234125956732939963044004"" } }, allocator: 0x79024f00d000 }
              | Failed to allocate shared memory due to an internal allocator failure.
      101 [D] Publisher { port_id: UniquePublisherId(UniqueSystemId { value: 1439258800234125956732939963044004 }), sample_reference_counter: 
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], data_segment: Memo
              ry { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_18166_143925880023412
              5956732939963044004.publisher_data"" } }, size: 4621245, base_address: 0x79024f00d000, has_ownership: true, file_descriptor: File
              Descriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: 
              ""18166_1439258800234125956732939963044004"" } }, allocator: 0x79024f00d000 }, config: LocalPublisherConfig { max_loaned_samples: 
              2, unable_to_deliver_strategy: Block }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteStri
              ng<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 422, base_address: 0x79024f6b2000, h
              as_ownership: false, file_descriptor: FileDescriptor { value: 4, is_owned: true }, memory_lock: None }, name: FileName { value: 
              FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::s
              ervice::dynamic_config::DynamicConfig> }, subscriber_connections: SubscriberConnections { connections: [UnsafeCell { .. }, Unsaf
              eCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }],
               port_id: UniquePublisherId(UniqueSystemId { value: 1439258800234125956732939963044004 }), config: Config { global: Global { roo
              t_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""servic
              es"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscr
              ibe { max_subscribers: 8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_lo
              aned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_
              listeners: 2, max_notifiers: 16 } } }, static_config: StaticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, sub
              scriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: true, type_name: ""publish_subscribe_publis
              her::BigMessage"" } }, subscriber_list_state: UnsafeCell { .. }, history: Some(UnsafeCell { .. }), service: Service { state: Serv
              iceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: Fi
              xedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscr
              ibers: 8, max_publishers: 2, history_size: 1, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_ove
              rflow: true, type_name: ""publish_subscribe_publisher::BigMessage"" }) }, global_config: Config { global: Global { root_path_unix:
               ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publish
              er_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", 
              creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_su
              bscribers: 8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples
              : 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2
              , max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len
              : 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 422, base_address: 0x79024f6b2000, has_ownership:
               false, file_descriptor: FileDescriptor { value: 4, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByte
              String<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynam
              ic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd1
              5e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<4096> { len: 22, data: 
              ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileNam
              e { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { valu
              e: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }
              ), file_descriptor: FileDescriptor { value: 3, is_owned: true }, has_ownership: false }, len: 352 } } }, degration_callback: Non
              e, loan_counter: 0, dynamic_publisher_handle: ContainerHandle { index: 0, container_id: 1 }, _phantom_message_type: PhantomData<
              publish_subscribe_publisher::BigMessage> }
              | Unable to loan Sample since the underlying shared memory is out of memory.

```

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/130/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/131,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/131,iceoryx2,2146016982,131,Publisher retrieves invalid sample when subscriber is connected,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-21T07:30:55Z,2024-03-06T23:34:42Z,"## Required information

**Operating system:**
Linux 6.7.3-arch1-2

**Rust version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**Cargo version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**iceoryx2 version:**
`main` branch

**Fix:**
On publisher side, for the offset calculations when using a pool allocator, we had the implicit requirement that the offsets start at zero and are a multiple of the bucket size. Introducing for the normal allocators a method that returns the smallest start point of the payload and for the shm allocators a method that returns the relative payload starting offset and use this in the SharedMemory concept as the starting point fixed the problem.

**Observed result or behaviour:**
When a new subscriber connects, the publisher suddenly retrieves an invalid sample.

**Expected result or behaviour:**
No invalid samples are retrieved

**Conditions where it occurred / Performed steps:**
```
       61 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_1527439745112502164476023069140769_155754
              6446867922612761728747364181.connection"" } }, size: 190, base_address: 0x794f63baa000, has_ownership: true, file_descriptor: Fil
              eDescriptor { value: 7, is_owned: true }, memory_lock: None }
              | create
       62 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: PhantomData<core::cell::Unsafe
              Cell<u32>> }, capacity: 36, borrowed_indices: 21, head: 90359339105, is_memory_initialized: true }, bucket_size: 128360, bucket_
              alignment: 8, start: 133381875593496, size: 4620967, is_memory_initialized: true }
              | Tried to release memory (133381875593494) which does not belong to this allocator.
       63 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 112, _phantom: Pha
              ntomData<core::cell::UnsafeCell<u32>> }, capacity: 36, borrowed_indices: 21, head: 90359339105, is_memory_initialized: true }, b
              ucket_size: 128360, bucket_alignment: 8, start: 133381875593496, size: 4620967, is_memory_initialized: true }, base_address: 133
              381875593494, max_supported_alignment_by_memory: 4096 }
              | Failed to release shared memory chunk
       64 [D] Memory { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_19279_15274397451
              12502164476023069140769.publisher_data"" } }, size: 4621245, base_address: 0x794f63507000, has_ownership: true, file_descriptor: 
              FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, da
              ta: ""19279_1527439745112502164476023069140769"" } }, allocator: 0x794f63507000 }
              | Failed to deallocate shared memory chunk due to an internal allocator failure.
       65 [F] Publisher { port_id: UniquePublisherId(UniqueSystemId { value: 1527439745112502164476023069140769 }), sample_reference_counter: 
              [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], data_segment: Memo
              ry { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_19279_152743974511250
              2164476023069140769.publisher_data"" } }, size: 4621245, base_address: 0x794f63507000, has_ownership: true, file_descriptor: File
              Descriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: 
              ""19279_1527439745112502164476023069140769"" } }, allocator: 0x794f63507000 }, config: LocalPublisherConfig { max_loaned_samples: 
              2, unable_to_deliver_strategy: Block }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteStri
              ng<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 422, base_address: 0x794f63bac000, h
              as_ownership: false, file_descriptor: FileDescriptor { value: 4, is_owned: true }, memory_lock: None }, name: FileName { value: 
              FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::s
              ervice::dynamic_config::DynamicConfig> }, subscriber_connections: SubscriberConnections { connections: [UnsafeCell { .. }, Unsaf
              eCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }],
               port_id: UniquePublisherId(UniqueSystemId { value: 1527439745112502164476023069140769 }), config: Config { global: Global { roo
              t_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""servic
              es"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: 
              "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscr
              ibe { max_subscribers: 8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_lo
              aned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_
              listeners: 2, max_notifiers: 16 } } }, static_config: StaticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, sub
              scriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: true, type_name: ""publish_subscribe_publis
              her::BigMessage"" } }, subscriber_list_state: UnsafeCell { .. }, history: Some(UnsafeCell { .. }), service: Service { state: Serv
              iceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: Fi
              xedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscr
              ibers: 8, max_publishers: 2, history_size: 1, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_ove
              rflow: true, type_name: ""publish_subscribe_publisher::BigMessage"" }) }, global_config: Config { global: Global { root_path_unix:
               ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publish
              er_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", 
              creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_su
              bscribers: 8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples
              : 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2
              , max_notifiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len
              : 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 422, base_address: 0x794f63bac000, has_ownership:
               false, file_descriptor: FileDescriptor { value: 4, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByte
              String<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynam
              ic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd1
              5e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<4096> { len: 22, data: 
              ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileNam
              e { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { valu
              e: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }
              ), file_descriptor: FileDescriptor { value: 3, is_owned: true }, has_ownership: false }, len: 352 } } }, degration_callback: Non
              e, loan_counter: 1, dynamic_publisher_handle: ContainerHandle { index: 0, container_id: 1 }, _phantom_message_type: PhantomData<
              publish_subscribe_publisher::BigMessage> }
              | Internal logic error. The sample should always contain a valid memory chunk from the provided allocator.
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/132,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/132,iceoryx2,2146019589,132,Starting Subscriber leads to `ExceedsMaxBorrowedSamples`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-02-21T07:32:45Z,2024-03-06T23:34:55Z,"## Required information

**Operating system:**
Linux 6.7.3-arch1-2

**Rust version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**Cargo version:**
rustc 1.76.0 (07dca489a 2024-02-04)

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**
When a subscriber starts, it thinks it can only borrow 0 samples and therefore emits an error when receiving new samples.

**Expected result or behaviour:**
The amount of borrowed samples is parsed correctly.

**Conditions where it occurred / Performed steps:**
```
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""iox2_18018_1427533032182014834768991936413080.
              publisher_data"" } }, size: 4621245, base_address: 0x757f6076e000, has_ownership: false, file_descriptor: FileDescriptor { value:
               6, is_owned: true }, memory_lock: None }
              | open
       12 [D] Receiver { shared_memory: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 85, data: ""iox2_142753303218201
              4834768991936413080_1432365950095384959362232936474399.connection"" } }, size: 190, base_address: 0x757f60e12000, has_ownership: 
              false, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }, borrow_counter: UnsafeCell { .. }, nam
              e: FileName { value: FixedSizeByteString<255> { len: 69, data: ""1427533032182014834768991936413080_14323659500953849593622329364
              74399"" } } }
              | Unable to receive another sample since already 0 samples were borrowed and this would exceed the max borrow value of 0.
       13 [D] Subscriber { dynamic_subscriber_handle: ContainerHandle { index: 0, container_id: 0 }, publisher_connections: PublisherConnectio
              ns { connections: [UnsafeCell { .. }, UnsafeCell { .. }], subscriber_id: UniqueSubscriberId(UniqueSystemId { value: 143236595009
              5384959362232936474399 }), config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""c:\\Temp\\ice
              oryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_co
              nfig_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connec
              tion"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, subscriber_max_buff
              er_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow
              : true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_notifiers: 16 } } }, static_config: StaticConf
              ig { max_subscribers: 8, max_publishers: 2, history_size: 1, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, 
              enable_safe_overflow: true, type_name: ""publish_subscribe_publisher::BigMessage"" } }, dynamic_storage: Storage { shm: SharedMemo
              ry { name: FileName { value: FixedSizeByteString<255> { len: 53, data: ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" }
               }, size: 422, base_address: 0x757f60e13000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true },
               memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a7
              3"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, service: Service { state: ServiceState {
               static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: FixedSizeByt
              eString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 8, 
              max_publishers: 2, history_size: 1, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: tru
              e, type_name: ""publish_subscribe_publisher::BigMessage"" }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/ice
              oryx2/"", root_path_windows: ""c:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_se
              gment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_t
              imeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers:
               8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publi
              sher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 2, max_noti
              fiers: 16 } } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 53, data
              : ""iox2_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 422, base_address: 0x757f60e13000, has_ownership: false, fi
              le_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255
              > { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config:
              :DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea161
              46985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceo
              ryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value:
               FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSi
              zeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_de
              scriptor: FileDescriptor { value: 4, is_owned: true }, has_ownership: false }, len: 352 } } }, degration_callback: None, publish
              er_list_state: UnsafeCell { .. }, _phantom_message_type: PhantomData<publish_subscribe_publisher::BigMessage> }
              | Unable to receive another sample since it would exceed the maximum 2 of borrowed samples.
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/132/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/133,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/133,iceoryx2,2146026543,133,Implement Pub/Sub & Notifier/Listener integration-tests that are highly concurrent,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-02-21T07:37:39Z,2024-02-27T16:01:28Z,"## Brief feature description

Multiple bugs were raised due to the lack of concurrent communication tests. We need tests that cover:

* [x] sending/receiving messages from within different threads
* [x] many publisher reconnect to one subscriber
* [x] many subscriber reconnect to one publisher
* [ ] create/open all service types concurrently
* [ ] many listener reconnect to one notifier
* [ ] many notifier reconnect to one listener
* [ ] write tests for shared memory with pool allocator
    * allocate on one side, translate pointer, write on other side - whole shm
    * offset must start at 0 and must always be a multiple of the bucket size
* [ ] write full test suite for shm pool allocator
* [ ] publisher/subscriber reconnect and updates history after reconnect
* [ ] drop(subscriber), keep sample
    * blocks max subscriber
    * sample can be read and no data race
* [ ] drop(publisher), keep sample on receiver side
    * blocks max publisher
    * sample can be read
* [ ] drop(publisher), keep sample on publisher side
    * blocks max publisher
    * sample can still be published but will not be received unless multiple samples on publisher side are hold
* [ ] drop(publisher & subscriber), keep sample
* [ ] drop(service), keep ports
    * communication shall still work
    * service no longer discoverable
    * when service recreated and ports are added, existing ports shall receive/can send to old ports
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/135,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/135,iceoryx2,2158478688,135,Recreated service shall connect with existing ports,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-02-28T09:17:48Z,2024-05-16T02:30:02Z,"## Brief feature description

When a service object (`PortFactory`) goes out of scope, the service can no longer be found, but all existing ports are able to continue communication. When now the same service is created again, it fails since old ports and the dynamic service info is still existing.

Two approaches are possible.
1. Remove the dynamic service info and create new ports that no longer are connected to the old existing ports - may surprise the user.
2. Verify that the dynamic service info belongs to a former service with the identical configuration, and reuse it again. Would allow the newly created service to create ports that can communicate with the existing ones.

## Detailed information

To verify that the service has the identical static service configuration, we need to hash the object and compare the hashes. If they are equal, the dynamic service info can be reused.
This also means that the hash must be stored in the dynamic service info.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/135/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/135,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc51WD1_,iceoryx2,1968717183,135,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-02-28T10:48:36Z,2024-02-28T10:48:36Z,"Philosophical question, when is a service the same. Let's assume there is a semantic update and the f64 does now mean `m/s` instead of `km/s` or the distance is now in `m` instead of `km`. It's an edge case and might be solved by adding semantic context to the data types.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc51WD1_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/135,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc51a8PF,iceoryx2,1969996741,135,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-02-28T22:04:34Z,2024-02-28T22:04:34Z,"@elBoberido A service is the same when the hash of the static service information is equal. This is the case when the message type is equal. When now a service has the same message type does interpret the data differently, you have a problem.
But somehow it feels that this problem is not just restricted to recreating services, but also when a publisher or subscriber in the middle misinterpret the data - like the Mars Climate Orbiter. This is for me a bug in the code that can be fixed by using strong types. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc51a8PF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/136,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/136,iceoryx2,2162816817,136,"Performance improvement, reduce `clock_gettime` usage",elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-01T07:45:06Z,2024-03-03T09:49:30Z,"## Brief feature description

The POSIX call `clock_gettime` is extremely costly, especially on certain AMD CPUs, therefore we should avoid it as much as possible.
We observed that the latency in our benchmark may increase from `190ns` to over `2000ns` just because of this call.

## Detailed information

 * [ ] Remove the time-stamp from the header 
 * [ ] Use overflowing behavior in the benchmark setup (default behavior) to not use adaptive wait.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/136/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/139,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/139,iceoryx2,2166624089,139,Port iceoryx1 waitset bitset to iceoryx2 to handle overflowing events,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-04T11:33:02Z,2024-04-16T00:38:40Z,"## Required information

Currently, the event cannot handle trigger overflows and the notifier receives connection failures when the listener goes out of scope while the notifier is triggering. Furthermore, the tests in `service_event_tests.rs` named `concurrent***` segfault sometimes.

To address the issues:
* [ ] All concept shall be based on the bitset from iceoryx1
* [ ] All ignored tests from `service_event_tests.rs` must be unignored 
* [ ] Introduce event tests with many reconnecting listeners for many reconnecting notifiers.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/139/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/140,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/140,iceoryx2,2168605344,140,Fix FreeBSD 14.0 build,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-05T08:29:24Z,2024-03-05T14:25:12Z,"## Required information

**Operating system:**
FreeBSD 14.0

**Rust version:**
rustc 1.76.0

**Cargo version:**
cargo 1.76.0

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**
The following tests fail:
* `event::unix_datagram::sending_multiple_notifications_from_multiple_sources_before_blocking_wait_works`
* `event::unix_datagram::sending_multiple_notifications_from_multiple_sources_before_timed_wait_works`
* `event::unix_datagram::sending_multiple_notifications_from_multiple_sources_before_try_wait_works`

And this test segfaults:
`shared_memory_directory::list_works`
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/142,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/142,iceoryx2,2170888238,142,Introduce `Capacity` type,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-06T08:09:44Z,2024-03-07T12:43:05Z,"## (Code) Example Of Cumbersome API

Fixed size containers often have a capacity member variable that is never changed during their lifetime. A custom strong type that can be only set once with `new` and can be read via `Deref` would reflect this in the API.

## Improvement Suggestion

 * [ ] Introduce `Capacity` type in `iceoryx2-bb-elementary`
 * [ ] Use `Capacity` type in every RelocatableContainer, Container","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/142,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52NPkk,iceoryx2,1983183140,142,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-07T10:13:47Z,2024-03-07T10:13:47Z,"@elBoberido I think I would close the issue without fixing it, since such a type would have severe drawbacks.

* If we implement `copy` & `clone` the sole purpose, modify once and never update can be easily circumvented
* If we do not implement them, every container using this type is suddenly also non-copy & non-clonable.

We can implement clone by hand, but loosing copy would be a pity.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52NPkk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/142,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Nr9S,iceoryx2,1983299410,142,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-03-07T11:20:43Z,2024-03-07T11:20:43Z,@elfenpiff fine with me,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Nr9S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/145,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/145,iceoryx2,2173184967,145,Cannot run in a non-UTF-8 environment on Windows 11,imxood,14890680,çå½èµæ­,,CLOSED,2024-03-07T07:41:44Z,2024-03-07T11:12:35Z,"## Required information

**Operating system:**
Windows 11 Pro 23H2 - 22631.3155 / Intel(R) Core(TM) i9-14900HX

**Rust version:**
rustc 1.77.0-nightly (f688dd684 2024-01-04)

**Cargo version:**
cargo 1.77.0-nightly (add15366e 2024-01-02)

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

Iceoryx2 cannot run properly in a non-UTF8 environment on Windows
![image](https://github.com/eclipse-iceoryx/iceoryx2/assets/14890680/27905392-166b-4f4a-b9b2-eda6b33b39e3)

When UTF-8 is enabled, it can run successfully.
![image](https://github.com/eclipse-iceoryx/iceoryx2/assets/14890680/c0ae880e-4ad3-45cd-b581-9d8e00e660ab)
![image](https://github.com/eclipse-iceoryx/iceoryx2/assets/14890680/1f74ca23-d30e-4d3c-b485-3e355d310c75)

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/145,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Nl4f,iceoryx2,1983274527,145,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-07T11:04:58Z,2024-03-07T11:04:58Z,"@imxood Thanks for the report. I fixed the issue and the PR is now merged.

Could you please confirm that the problem is now solved on the `main` branch? I cannot do it myself, since I do not have a non-utf-8 Windows environment at my disposal.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Nl4f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/145,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52NovK,iceoryx2,1983286218,145,NA,imxood,14890680,çå½èµæ­,,NA,2024-03-07T11:12:15Z,2024-03-07T11:12:15Z,"@elfenpiff it's so cool, the problem is solved, thank you very much~","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52NovK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/147,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/147,iceoryx2,2173556603,147,semaphore test fails on mac os,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-03-07T10:44:01Z,2024-03-07T10:44:38Z,"## Required information

**Operating system:**
 * mac os 

**Rust version:**
`rustc 1.76`

**Cargo version:**
`cargo 1.76`

**iceoryx2 version:**
`main`

**Observed result or behaviour:**
```
thread 'semaphore_unnamed_semaphore_wait_blocks' panicked at iceoryx2-bb/posix/tests/semaphore_tests.rs:308:9:
assertion failed: expr: counter.load(Ordering::Relaxed) == 1;  value: 0 == 1
stack backtrace:
   0: rust_begin_unwind
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:645:5
   1: core::panicking::panic_fmt
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:72:14
   2: semaphore_tests::wait_blocks::{{closure}}
             at ./tests/semaphore_tests.rs:308:9
   3: std::thread::scoped::scope::{{closure}}
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/thread/scoped.rs:146:51
   4: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panic/unwind_safe.rs:272:9
   5: std::panicking::try::do_call
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:552:40
   6: ___rust_try
   7: std::panicking::try
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:516:19
   8: std::panic::catch_unwind
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panic.rs:142:14
   9: std::thread::scoped::scope
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/thread/scoped.rs:146:18
  10: semaphore_tests::wait_blocks
             at ./tests/semaphore_tests.rs:296:5
  11: semaphore_tests::semaphore_unnamed_semaphore_wait_blocks
             at ./tests/semaphore_tests.rs:329:5
  12: semaphore_tests::semaphore_unnamed_semaphore_wait_blocks::{{closure}}
             at ./tests/semaphore_tests.rs:322:45
  13: core::ops::function::FnOnce::call_once
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/ops/function.rs:250:5
  14: core::ops::function::FnOnce::call_once
             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
```

**Conditions where it occurred / Performed steps:**
The bug was encountered once when Cirrus CI was under heavy load.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/147/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,iceoryx2,2174468649,149,Creation process hangs pub-sub,EmilLindfors,4932954,Emil Tomson Lindfors,emil.tomson.lindfors@hvl.no,CLOSED,2024-03-07T18:16:05Z,2024-03-09T05:06:31Z,"## Required information

**Operating system:**
Win 11
Microsoft Windows [Version 10.0.22631.3235]

**Rust version:**
rustc 1.78.0-nightly

**Cargo version:**
Output of: `cargo --version`

**iceoryx2 version:**
main

**Observed result or behaviour:**
Im getting this error, seems like the creation process hangs:
```
...
   ix: "".dynamic"", creation_timeout: 500ms, 
              connection_suffix: "".connection"" } }, def
              aults: Defaults { publish_subscribe: Publ
              ishSubscribe { max_subscribers: 8, max_pu
              blishers: 2, subscriber_max_buffer_size: 
              2, subscriber_max_borrowed_samples: 2, pu
              blisher_max_loaned_samples: 2, publisher_
              history_size: 1, enable_safe_overflow: tr
              ue, unable_to_deliver_strategy: Block }, 
              event: Event { max_listeners: 1, max_noti
              fiers: 16 } } }, _phantom_data: PhantomDa
              ta<iceoryx2::service::zero_copy::Service>
               }
              | Unable to check if the service is avail
              | able since it is currently being create
              | d.
      231 [T] FileBuilder { file_path: FilePath { value
              : FixedSizeByteString<255> { len: 87, dat
              a: ""C:\Windows\Temp\iceoryx2\services\iox
              2_8ac634184541a67f312ed9232f19c58ab4e7804
              1.service"" } }, access_mode: Read, permis
              sion: OWNER_READ | OWNER_WRITE | OWNER_EX
              EC | OWNER_ALL, has_ownership: false, own
              er: None, group: None, truncate_size: Non
              e, creation_mode: None }
              | opened
      232 [D] ""static_storage::file::Storage::does_exis
              t_cfg()""
              | Unable to check if storage ""8ac63418454
              | 1a67f312ed9232f19c58ab4e78041"" exists s
              | ince the underlying resources are curre
              | ntly being created or the creation proc
              | ess hangs.
      233 [D] BuilderWithServiceType { service_config: 
              StaticConfig { uuid: ""8ac634184541a67f312
              ed9232f19c58ab4e78041"", service_name: Ser
              viceName { value: FixedSizeByteString<255
              > { len: 20, data: ""My/Funk/ServiceName2""
               } }, messaging_pattern: PublishSubscribe
              (StaticConfig { max_subscribers: 8, max_p
              ublishers: 2, history_size: 12, subscribe
              r_max_buffer_size: 5, subscriber_max_borr
              owed_samples: 2, enable_safe_overflow: tr
              ue, type_name: ""usize"", type_size: 32, ty
              pe_alignment: 16 }) }, global_config: Con
              fig { global: Global { root_path_unix: ""/
              tmp/iceoryx2/"", root_path_windows: ""C:\\W
              indows\\Temp\\iceoryx2\\"", prefix: ""iox2_
              "", service: Service { directory: ""service
              s"", publisher_data_segment_suffix: "".publ
              isher_data"", static_config_storage_suffix
              : "".service"", dynamic_config_storage_suff
              ix: "".dynamic"", creation_timeout: 500ms, 
              connection_suffix: "".connection"" } }, def
              aults: Defaults { publish_subscribe: Publ
              ishSubscribe { max_subscribers: 8, max_pu
              blishers: 2, subscriber_max_buffer_size: 
              2, subscriber_max_borrowed_samples: 2, pu
              blisher_max_loaned_samples: 2, publisher_
              history_size: 1, enable_safe_overflow: tr
              ue, unable_to_deliver_strategy: Block }, 
              event: Event { max_listeners: 1, max_noti
              fiers: 16 } } }, _phantom_data: PhantomDa
              ta<iceoryx2::service::zero_copy::Service>
               }
              | Unable to check if the service is avail
              | able since it is currently being create
              | d.
      234 [D] Builder { base: BuilderWithServiceType { 
              service_config: StaticConfig { uuid: ""8ac
              634184541a67f312ed9232f19c58ab4e78041"", s
              ervice_name: ServiceName { value: FixedSi
              zeByteString<255> { len: 20, data: ""My/Fu
              nk/ServiceName2"" } }, messaging_pattern: 
              PublishSubscribe(StaticConfig { max_subsc
              ribers: 8, max_publishers: 2, history_siz
              e: 12, subscriber_max_buffer_size: 5, sub
              scriber_max_borrowed_samples: 2, enable_s
              afe_overflow: true, type_name: ""usize"", t
              ype_size: 32, type_alignment: 16 }) }, gl
              obal_config: Config { global: Global { ro
              ot_path_unix: ""/tmp/iceoryx2/"", root_path
              _windows: ""C:\\Windows\\Temp\\iceoryx2\\""
              , prefix: ""iox2_"", service: Service { dir
              ectory: ""services"", publisher_data_segmen
              t_suffix: "".publisher_data"", static_confi
              g_storage_suffix: "".service"", dynamic_con
              fig_storage_suffix: "".dynamic"", creation_
              timeout: 500ms, connection_suffix: "".conn
              ection"" } }, defaults: Defaults { publish
              _subscribe: PublishSubscribe { max_subscr
              ibers: 8, max_publishers: 2, subscriber_m
              ax_buffer_size: 2, subscriber_max_borrowe
              d_samples: 2, publisher_max_loaned_sample
              s: 2, publisher_history_size: 1, enable_s
              afe_overflow: true, unable_to_deliver_str
              ategy: Block }, event: Event { max_listen
              ers: 1, max_notifiers: 16 } } }, _phantom
              _data: PhantomData<iceoryx2::service::zer
              o_copy::Service> }, verify_number_of_subs
              cribers: false, verify_number_of_publishe
              rs: false, verify_subscriber_max_buffer_s
              ize: true, verify_subscriber_max_borrowed
              _samples: false, verify_publisher_history
              _size: true, verify_enable_safe_overflow:
               true }
              | Unable to open publish subscribe servic
              | e since the service hangs while being c
              | reated, max timeout for service creatio
              | n of 500ms exceeded. Waited for 504.852
              | 1ms but the state did not change.          
 ```

**Expected result or behaviour:**
That it would run without any modifications

**Conditions where it occurred / Performed steps:**
ran the two binary pub sub example in README in both debug and release. Also tried changing the config to change the root path, did not help.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52S38v,iceoryx2,1984659247,149,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-07T22:32:00Z,2024-03-07T22:32:00Z,"@EmilLindfors Thanks for the report.

This could happen when for whatever reason a process is non-gracefully killed. Could you please go into the directory `c:\temp\` and remove the directory `iceoryx2` and every file starting with the prefix `iox2_` and retry again?

Currently, we are working on a mechanism to detect stale resources and clean them up automatically so that you do not have to do this manually. This should come in 0.3.0 beginning of April.

If this does not work, could you please attach the full log file so that I can dig into this.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52S38v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52UOeL,iceoryx2,1985013643,149,NA,EmilLindfors,4932954,Emil Tomson Lindfors,emil.tomson.lindfors@hvl.no,NA,2024-03-08T04:17:15Z,2024-03-08T04:17:15Z,"Here's the error this time: 

```
     Running `target\release\ox_r.exe`
        0 [D] FileBuilder { file_path: FilePath { value: 
              FixedSizeByteString<255> { len: 20, data: ""
              config/iceoryx2.toml"" } }, access_mode: Rea
              d, permission: OWNER_READ | OWNER_WRITE | O
              WNER_EXEC | OWNER_ALL, has_ownership: false
              , owner: None, group: None, truncate_size: 
              None, creation_mode: None }
              | Unable to open file since it does not exi
              | st.
        1 [D] Config { global: Global { root_path_unix: ""
              /tmp/iceoryx2/"", root_path_windows: ""C:\\Wi
              ndows\\Temp\\iceoryx2\\"", prefix: ""iox2_"", 
              service: Service { directory: ""services"", p
              ublisher_data_segment_suffix: "".publisher_d
              ata"", static_config_storage_suffix: "".servi
              ce"", dynamic_config_storage_suffix: "".dynam
              ic"", creation_timeout: 500ms, connection_su
              ffix: "".connection"" } }, defaults: Defaults
               { publish_subscribe: PublishSubscribe { ma
              x_subscribers: 8, max_publishers: 2, subscr
              iber_max_buffer_size: 2, subscriber_max_bor
              rowed_samples: 2, publisher_max_loaned_samp
              les: 2, publisher_history_size: 1, enable_s
              afe_overflow: true, unable_to_deliver_strat
              egy: Block }, event: Event { max_listeners:
               1, max_notifiers: 16 } } }
              | Failed to create config since the config 
              | file could not be opened.
        2 [W] ""Config::get_global_config()""
              | Unable to load default config file, popul
              | ate config with default values.
< Win32 API error > C:\Users\emill\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\9d8c061\iceoryx2-pal\posix\src\windows\unistd.rs:204 GetFileAttributesA(pathname as *const u8)
 [ 3 ] The system cannot find the path specified.        

< Win32 API error > C:\Users\emill\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\9d8c061\iceoryx2-pal\posix\src\windows\unistd.rs:204 GetFileAttributesA(pathname as *const u8)
 [ 3 ] The system cannot find the path specified.        

< Win32 API error > C:\Users\emill\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\9d8c061\iceoryx2-pal\posix\src\windows\stat.rs:34 GetFileAttributesA(path as *const u8)  
 [ 3 ] The system cannot find the path specified.        

        3 [T] Directory { path: Path { value: FixedSizeBy
              teString<255> { len: 33, data: ""C:\Windows\
              Temp\iceoryx2\services"" } }, directory_stre
              am: 0x1, file_descriptor: FileDescriptor { 
              value: 0, is_owned: false } }
              | created
        4 [T] Builder { storage_name: FileName { value: F
              ixedSizeByteString<255> { len: 40, data: ""8
              ac634184541a67f312ed9232f19c58ab4e78041"" } 
              }, has_ownership: false, config: Configurat
              ion { path: Path { value: FixedSizeByteStri
              ng<255> { len: 33, data: ""C:\Windows\Temp\i
              ceoryx2\services"" } }, suffix: FileName { v
              alue: FixedSizeByteString<255> { len: 8, da
              ta: "".service"" } }, prefix: FileName { valu
              e: FixedSizeByteString<255> { len: 5, data:
               ""iox2_"" } } } }
              | Created service root directory ""C:\Window
              | s\Temp\iceoryx2\services"" since it did no
              | t exist before.
        5 [T] FileBuilder { file_path: FilePath { value: 
              FixedSizeByteString<255> { len: 87, data: ""
              C:\Windows\Temp\iceoryx2\services\iox2_8ac6
              34184541a67f312ed9232f19c58ab4e78041.servic
              e"" } }, access_mode: ReadWrite, permission:
               OWNER_READ | OWNER_WRITE | OWNER_EXEC | OW
              NER_ALL, has_ownership: false, owner: None,
               group: None, truncate_size: None, creation
              _mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\emill\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\9d8c061\iceoryx2-pal\posix\src\windows\mman.rs:225 CreateFileA(shm_file_path(name, SHM_STATE_SUFFIX).as_ptr(),
    GENERIC_WRITE | GENERIC_READ,
    FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
    core::ptr::null::<SECURITY_ATTRIBUTES>(), CREATE_NEW,
    FILE_ATTRIBUTE_NORMAL, 0)
 [ 3 ] The system cannot find the path specified.        

        6 [D] SharedMemoryBuilder { name: FileName { valu
              e: FixedSizeByteString<255> { len: 53, data
              : ""iox2_8ac634184541a67f312ed9232f19c58ab4e
              78041.dynamic"" } }, size: 570, is_memory_lo
              cked: false, has_ownership: false, permissi
              on: OWNER_READ | OWNER_WRITE | OWNER_EXEC |
               OWNER_ALL, creation_mode: Some(CreateExclu
              sive), zero_memory: false, access_mode: Rea
              dWrite, enforce_base_address: None }       
              | Unable to create shared memory since it a
              | lready exists.
        7 [D] Builder { storage_name: FileName { value: F
              ixedSizeByteString<255> { len: 40, data: ""8
              ac634184541a67f312ed9232f19c58ab4e78041"" } 
              }, supplementary_size: 370, has_ownership: 
              false, config: Configuration { suffix: File
              Name { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, prefix: FileNam
              e { value: FixedSizeByteString<255> { len: 
              5, data: ""iox2_"" } }, path: Path { value: F
              ixedSizeByteString<255> { len: 25, data: ""C
              :\Windows\Temp\iceoryx2\"" } } }, _phantom_d
              ata: PhantomData<iceoryx2::service::dynamic
              _config::DynamicConfig> }
              | Failed to create dynamic_storage::PosixSh
              | aredMemory since a shared memory with the
              |  name already exists.
        8 [D] BuilderWithServiceType { service_config: St
              aticConfig { uuid: ""8ac634184541a67f312ed92
              32f19c58ab4e78041"", service_name: ServiceNa
              me { value: FixedSizeByteString<255> { len:
               20, data: ""My/Funk/ServiceName2"" } }, mess
              aging_pattern: PublishSubscribe(StaticConfi
              g { max_subscribers: 8, max_publishers: 2, 
              history_size: 12, subscriber_max_buffer_siz
              e: 5, subscriber_max_borrowed_samples: 2, e
              nable_safe_overflow: true, type_name: ""usiz
              e"", type_size: 32, type_alignment: 16 }) },
               global_config: Config { global: Global { r
              oot_path_unix: ""/tmp/iceoryx2/"", root_path_
              windows: ""C:\\Windows\\Temp\\iceoryx2\\"", p
              refix: ""iox2_"", service: Service { director
              y: ""services"", publisher_data_segment_suffi
              x: "".publisher_data"", static_config_storage
              _suffix: "".service"", dynamic_config_storage
              _suffix: "".dynamic"", creation_timeout: 500m
              s, connection_suffix: "".connection"" } }, de
              faults: Defaults { publish_subscribe: Publi
              shSubscribe { max_subscribers: 8, max_publi
              shers: 2, subscriber_max_buffer_size: 2, su
              bscriber_max_borrowed_samples: 2, publisher
              _max_loaned_samples: 2, publisher_history_s
              ize: 1, enable_safe_overflow: true, unable_
              to_deliver_strategy: Block }, event: Event 
              { max_listeners: 1, max_notifiers: 16 } } }
              , _phantom_data: PhantomData<iceoryx2::serv
              ice::zero_copy::Service> }
              | Failed to create dynamic storage for serv
              | ice.
        9 [D] Builder { base: BuilderWithServiceType { se
              rvice_config: StaticConfig { uuid: ""8ac6341
              84541a67f312ed9232f19c58ab4e78041"", service
              _name: ServiceName { value: FixedSizeByteSt
              ring<255> { len: 20, data: ""My/Funk/Service
              Name2"" } }, messaging_pattern: PublishSubsc
              ribe(StaticConfig { max_subscribers: 8, max
              _publishers: 2, history_size: 12, subscribe
              r_max_buffer_size: 5, subscriber_max_borrow
              ed_samples: 2, enable_safe_overflow: true, 
              type_name: ""usize"", type_size: 32, type_ali
              gnment: 16 }) }, global_config: Config { gl
              obal: Global { root_path_unix: ""/tmp/iceory
              x2/"", root_path_windows: ""C:\\Windows\\Temp
              \\iceoryx2\\"", prefix: ""iox2_"", service: Se
              rvice { directory: ""services"", publisher_da
              ta_segment_suffix: "".publisher_data"", stati
              c_config_storage_suffix: "".service"", dynami
              c_config_storage_suffix: "".dynamic"", creati
              on_timeout: 500ms, connection_suffix: "".con
              nection"" } }, defaults: Defaults { publish_
              subscribe: PublishSubscribe { max_subscribe
              rs: 8, max_publishers: 2, subscriber_max_bu
              ffer_size: 2, subscriber_max_borrowed_sampl
              es: 2, publisher_max_loaned_samples: 2, pub
              lisher_history_size: 1, enable_safe_overflo
              w: true, unable_to_deliver_strategy: Block 
              }, event: Event { max_listeners: 1, max_not
              ifiers: 16 } } }, _phantom_data: PhantomDat
              a<iceoryx2::service::zero_copy::Service> },
               verify_number_of_subscribers: false, verif
              y_number_of_publishers: false, verify_subsc
              riber_max_buffer_size: true, verify_subscri
              ber_max_borrowed_samples: false, verify_pub
              lisher_history_size: true, verify_enable_sa
              fe_overflow: true }
              | Unable to create publish subscribe servic
              | e since the dynamic service segment could
              |  not be created.
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52UOeL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Wjfp,iceoryx2,1985624041,149,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-03-08T12:40:20Z,2024-03-08T12:40:20Z,"@EmilLindfors Ah I see what the problem is. The default temp dir entry in the `toml` file is pointing to `C:\Temp\iceoryx2` but when the toml file is not found the default value is `C:\Windows\Temp\iceoryx2`

I merged a PR to fix this: #152 

When you check out the newest commit in `main` branch, the real default temp directory is used and everything is stored in `C:\Temp\iceoryx2`. So when you delete everything in `C:\Temp\iceoryx2` and `C:\Temp\iox2_*` the example should be running.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52Wjfp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/149,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52ayAP,iceoryx2,1986732047,149,NA,EmilLindfors,4932954,Emil Tomson Lindfors,emil.tomson.lindfors@hvl.no,NA,2024-03-09T05:06:31Z,2024-03-09T05:06:31Z,"Great, that seems to have solved the issue - thanks!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc52ayAP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/153,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/153,iceoryx2,2179829048,153,Use `DynamicStorage` concept as basis for every shared memory based concept,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-11T17:57:54Z,2024-04-16T00:42:49Z,"## Brief feature description

The `DynamicStorage` is the most basic building block for shared memory based concepts. The `ZeroCopyConnection`, `CommunicationChannel`, `SharedMemory` all the same approach in creation/destruction which is already abstracted in the `DynamicStorage`.

Therefore, the code should be adjusted so that those concepts no longer use the underlying posix shared memory directly but use the dynamic storage.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/154,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/154,iceoryx2,2180937042,154,Move `iceoryx2-bb-log` into `iceoryx2-pal` in a package beneath `iceoryx2-pal-posix` to handle log messages in the platform,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-03-12T07:41:44Z,2024-03-12T07:41:44Z,"## Brief feature description

When a user integrates iceoryx2 into their framework, they will always see log messages from the platform, even when they have integrated their custom logger. The solution is to make the logger available in the platform, but we have to be careful since the `iceoryx2-pal-posix` crate may also provide all the logging functionality required for logging in a `no_std` environment.

## Detailed information

This was also done in iceoryx, see issue https://github.com/eclipse-iceoryx/iceoryx/issues/1755 and pull request https://github.com/eclipse-iceoryx/iceoryx/pull/2222","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/156,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/156,iceoryx2,2182856145,156,`fchmod` does not work for shared memory in Mac OS,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-03-12T23:42:12Z,2024-03-13T19:03:35Z,"## Required information

**Operating system:**
 * Mac OS Big Sur 11.0.1

**Observed result or behaviour:**
Calling `fchmod` with a file descriptor belonging to a shared memory always results in (`errno == 2 (EINVAL)`) since shared memory file descriptors are not supported?!

**ToDo:**
* [ ] Remove all quick fixes from mac os platform. (`shm_open` and `fchmod`)
* [ ] Introduce a fd translator like in windows and apply rights to trampoline file instead
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/158,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/158,iceoryx2,2195081302,158,Create `mpmc::queue` based on `mpmc::unique_index_set`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-19T14:08:17Z,2024-03-19T15:09:13Z,"## Brief feature description

For the event concept id tracker, we require a `mpsc::queue` so that many notifiers can add their event id and the one listener can consume it whenever it wakes up.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/160,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/160,iceoryx2,2200077092,160,`DynamicStorage` shall by type safe,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-21T12:33:15Z,2024-03-26T08:03:48Z,"## Brief feature description

It is possible that a user opens the same dynamic storage with different types, or deletes a dynamic storage and expecting it holding a different type.
Those cases would lead to undefined behaviour and shall be impossible.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/160/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/162,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/162,iceoryx2,2200303933,162,Refactor `IpcCapable` trait,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-03-21T14:11:02Z,2024-03-26T13:53:12Z,"## Brief feature description

Currently, the `iceoryx2_bb_posix::IpcCapable` trait has too much responsibility for the layer it is located on. It shall not perform reference counting to ensure lifetime - what if the process crashes and the ref-count is unusable.
Furthermore, some resources shall persist even when no process is actively using them.

The solution is an `HandleStorage` that holds the handle, the handle itself destroys the resource in drop and the storage tracks if it is IpcCapable or not.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/165,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/165,iceoryx2,2223129200,165,Stresstests for 'Service' creation,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-04-03T14:41:19Z,2024-04-13T08:47:57Z,"## Brief feature description

Create and close `Services` concurrently from multiple threads to catch robustness issues in the CI.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/165/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/168,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/168,iceoryx2,2228337217,168,Add `ekxide.io` as vendor that provides services for iceoryx,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-05T15:45:15Z,2024-04-05T19:19:04Z,"## Brief feature description

According to the eclipse handbook, one can add vendors that provide specific services for the project, see: https://www.eclipse.org/projects/handbook/#resources-website-services when they are statements of fact without qualification and they have **active** committers.


","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/168/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/170,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/170,iceoryx2,2228405111,170,Run CI only when source files are changed.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-05T16:21:02Z,2024-04-06T11:43:22Z,"## (Code) Example Of Cumbersome API

Running the full pipeline when only a markdown document was changed is expensive.

## Improvement Suggestion

Run the CI only when source code has changed.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/172,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/172,iceoryx2,2229216310,172,Use toolchain `stable` in github static-code-analysis target,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-06T12:11:48Z,2024-07-02T12:19:28Z,"## Brief feature description

clippy receives a `SIGABRT` signal in macOS-latest with rust 1.77.1. Currently, the target is set to 1.76.0 to circumvent the problem. As soon as it is fixed - with 1.78 or 1.77.2, update the CI to stable again.

1. Edit file `.github/workflows/build-test.yml`
2. go to ` TODO iox2-172` and update toolchain

## CI output

```
    Checking clap v3.2.25
    Checking iceoryx2-bb-posix v0.2.2 (/Users/runner/work/iceoryx2/iceoryx2/iceoryx2-bb/posix)
error: could not compile `iceoryx2-bb-posix` (lib)

Caused by:
  process didn't exit successfully: `/Users/runner/.rustup/toolchains/stable-x86_64-apple-darwin/bin/clippy-driver /Users/runner/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rustc --crate-name iceoryx2_bb_posix --edition=2021 iceoryx2-bb/posix/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C split-debuginfo=unpacked -C metadata=6d9ce6415109b379 -C extra-filename=-6d9ce6415109b379 --out-dir /Users/runner/work/iceoryx2/iceoryx2/target/debug/deps -L dependency=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps --extern bitflags=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libbitflags-a7c79556c2471588.rmeta --extern enum_iterator=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libenum_iterator-72486a3a43b60e1e.rmeta --extern iceoryx2_bb_container=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_bb_container-d11b468859ea98e4.rmeta --extern iceoryx2_bb_elementary=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_bb_elementary-82d924a6d32cb24e.rmeta --extern iceoryx2_bb_log=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_bb_log-ea0f451cedf03499.rmeta --extern iceoryx2_bb_system_types=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_bb_system_types-28f9f0a83af747e1.rmeta --extern iceoryx2_pal_configuration=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_pal_configuration-7504ac9127fc7487.rmeta --extern iceoryx2_pal_posix=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libiceoryx2_pal_posix-59d603918355d3ef.rmeta --extern lazy_static=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/liblazy_static-f74804fca7b3f950.rmeta --extern tiny_fn=/Users/runner/work/iceoryx2/iceoryx2/target/debug/deps/libtiny_fn-5c478f165304a566.rmeta -C debug-assertions -L native=/Users/runner/work/iceoryx2/iceoryx2/target/debug/build/iceoryx2-pal-posix-2469a82385e36f58/out -L native=/Users/runner/work/iceoryx2/iceoryx2/target/debug/build/iceoryx2-pal-posix-2469a82385e36f58/out -L native=/Users/runner/work/iceoryx2/iceoryx2/target/debug/build/iceoryx2-pal-posix-2469a82385e36f58/out` (signal: 6, SIGABRT: process abort signal)
Error: Process completed with exit code 101.
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/172/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/173,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/173,iceoryx2,2231575945,173,Cleanup event API,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-08T15:55:28Z,2024-04-14T11:12:38Z,"## Brief feature description

Since some variations of the event service have only a limited set of trigger ids, it must be propagated to the API so that the user can configure it.
Furthermore, the cache inside the listener introduces heap usage, unnecessary complexity and functionality a user may not require. Remove it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/173/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/175,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/175,iceoryx2,2232677021,175,Create example with complex data types,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-09T06:12:18Z,2024-04-09T12:31:57Z,"## (Code) Example Of Cumbersome API

Users would like to use more complex data types than just PoD or structs/arrays of PoD. iceoryx2 brings with `iceoryx2-bb-container` already a `FixedSizeVec` and a `FixedSizeString` that can be used in this context. We should demonstrate this in an example.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/175/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/176,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/176,iceoryx2,2232679152,176,Make `iceoryx2-bb-container` public API,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-09T06:14:13Z,2024-05-16T02:28:21Z,"## (Code) Example Of Cumbersome API

For more advanced data types, those crates become necessary. Therefore, it should be a public API. 

## ToDo

* [x] Complete developer documentation
* [x] Add doc examples for all use cases
* [x] Check test coverage
* [x] All error enums must implement `std::error::Error` 
* [x] Adjust `complex_data_type` example","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/176/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/179,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/179,iceoryx2,2235720570,179,Simplify multidimensional generic tests,elBoberido,56729607,Mathias Kraus,,OPEN,2024-04-10T14:18:37Z,2024-04-10T14:18:37Z,"## Brief feature description

With [generic-tests](https://crates.io/crates/generic-tests) it is currently not possible to have more than one dimension for generic tests, e.g. generate all combinations for `Foo, Bar` with `u8, u16, u32, u64`.

There is a issue on the generic-test repository -> https://github.com/mzabaluev/generic-tests/issues/7

We need to either
- wait till it will be implemented
- contribute to generic-test
- create an own custom solution","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/179/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/181,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/181,iceoryx2,2240421563,181,Race Condition in `UniqueSystemId`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-12T15:48:23Z,2024-04-12T17:09:57Z,"## Required information

**Conditions where it occurred / Performed steps:**
Assume we have 2 threads creating a `UniqueSystemId` concurrently. Since all threads come from the same process, the first 32 bits are the same (PID).

1. Thread A starts and acquires the current nanosecond value `nv`.
2. Thread A is concurrently by Thread B.
3. Thread B acquires the same nanosecond value `nv,` updates the `LAST_NANOSECONDS` value with it, and creates a new `UniqueSystemId.`
4. Thread B creates another `UniqueSystemId` and updates the `LAST_NANOSECONDS` again.
5. Thread A continues, thinks that `nv` with its time stamp is unique since `LAST_NANOSECONDS` is not equal to `nv` and creates `UniqueSystemId` with the same value as Thread B did in step 3.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/181/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/183,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/183,iceoryx2,2241503476,183,Improve error codes on failed service creation,elBoberido,56729607,Mathias Kraus,,OPEN,2024-04-13T10:51:47Z,2024-04-13T10:51:54Z,"## Brief feature description

Currently, when a service is created by two parties concurrently, some of the error codes are not too helpful and sometimes misleading. Similar with concurrently opening and closing a service.

This are the error codes which are triggered in `service_tests.rs`

```rust
PublishSubscribeCreateError::AlreadyExists,
PublishSubscribeCreateError::Corrupted,
PublishSubscribeCreateError::IsBeingCreatedByAnotherInstance,
```

```rust
PublishSubscribeOpenError::DoesNotExist,
PublishSubscribeOpenError::PermissionDenied,
PublishSubscribeOpenError::ServiceInCorruptedState,
PublishSubscribeOpenError::UnableToOpenDynamicServiceInformation,
```

The latter, for example, should only trigger `DoesNotExist`. See also https://github.com/eclipse-iceoryx/iceoryx2/pull/174#discussion_r1561100720.

The other error codes leak implementation details and only occur due to the decentralized nature of iceoryx2. It needs to be determined if they can be mapped to `DoesNotExist` without shadowing an actual error when, e.g. the permissions really do not exist.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/183/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/184,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/184,iceoryx2,2243022959,184,Adjust timing in bitset tests,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-15T08:21:07Z,2024-04-15T09:03:42Z,"## Brief feature description

Bitset tests requires some time, increase watchdog timeout
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/184/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/187,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/187,iceoryx2,2244025261,187,A failing pub/sub connection is not an error,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-15T15:47:26Z,2024-04-15T15:53:02Z,"## Required information

In a normal setup, it is possible that a subscriber tries to connect to a publisher while its owning process terminates - or the publisher tries to connect to a subscriber while the subscriber process terminates. This is a normal use case and should not lead to any kind of error transmitted via the API.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/187/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/187,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc56njox,iceoryx2,2057189937,187,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-04-15T15:53:01Z,2024-04-15T15:53:01Z,"I forgot, I already fixed this with the degradation callback","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc56njox/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/188,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/188,iceoryx2,2246610445,188,Refine relocatable types,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-04-16T18:01:49Z,2024-04-17T08:12:47Z,"## Brief feature description

* [ ] `RelocatableContainer` requires a type alias to a `Config` type that is used in `new()`, `new_uninit()` and `memory_size()` to support containers consisting of multiple relocatable containers.
* [ ] Refactor `Vec` so that there are 3 version, `FixedSizeVec`, `RelocatableVec` and just `Vec`, just like the `Queue`
* [ ] Refactor `ByteString` so that there are 3 version, `FixedSizeByteString`, `RelocatableByteString` and just `ByteString`, just like the `Queue`
* [ ] `iceoryx2-bb-elementary` must become public API to enable users to implement their own relocatable types.
* [ ] `RelocatableContainer` requires a consuming `drop` or `destroy` method that requires an allocator as well to release the memory acquired with `init`.
* [ ] Think about a variant with a custom allocator - similar to the `RelocatableContainer`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/188/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/190,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/190,iceoryx2,2248349768,190,Add tests with `LifetimeTracker`  for `Queue` and `Vec`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-17T13:48:52Z,2024-04-18T12:25:00Z,"## Brief feature description

The cleanup of objects is not tested in `Vec` and `Queue`. Add further tests.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/190/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/195,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/195,iceoryx2,2252397266,195,Support untyped services,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-19T08:24:57Z,2024-04-29T08:18:58Z,"## Brief feature description

Currently, iceoryx2 supports only strongly typed services. The user shall be able to create a service based on a slice where they can set the worst-case-layout while creating the service and can loan arbitrary pieces of memory when it does not exceed the worst case.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/195/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/200,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/200,iceoryx2,2253278780,200,Introduce `atomic` type for iceoryx,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-19T15:24:37Z,2024-09-27T16:55:13Z,"## Brief feature description

Our `Atomic*` strategy has currently the problems that:
* on 32-bit `AtomicU64` is not available, not even with a mutex like in the C++ STL
* cannot be tested with [loom](https://crates.io/crates/loom)
* that all atomic do not support other types with the same alignment/size that are not provided by the default types
* they cannot be overloaded for advanced error handling strategies like fail in a compare-exchange loop

The new atomic shall be exchangeable via feature flags.

## ToDo

* [x] Implement atomic
* [x] add feature flag
* [x] Integrate atomic in iceoryx so that everything uses the atomic","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/200/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/205,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/205,iceoryx2,2265492133,205,Example for dynamic sized types,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-26T10:28:47Z,2024-04-29T21:32:39Z,"## Brief feature description

Create:
* [ ] example
* [ ] FAQ entry
* [ ] documentation

on how to create dynamic-sized types. 
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/205/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/207,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/207,iceoryx2,2269276661,207,Use performance clock mode by default,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-04-29T15:01:06Z,2024-04-29T20:31:50Z,"## Brief feature description

The safety clock mode uses the extremely slow adaptive wait to ensure that always the monotonic clock is used. Something that is only required for the mission-critical edge case.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/207/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/209,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/209,iceoryx2,2269292232,209,Port 'SignalMechanism' from 'Semaphore' to POSIX 'ConditionVariable' where possible,elBoberido,56729607,Mathias Kraus,,OPEN,2024-04-29T15:07:47Z,2024-04-29T15:07:48Z,"## Brief feature description

The `Semaphore` supports only `CLOCK_REALTIME`, which has issues when the system time is changed. The POSIX `ConditionVariable` has an attribute to specify the clock and also accepts `CLOCK_MONOTONIC`.

On Systems that support POSIX condition variables, those should be used with the `CLOCK_MONOTONIC` instead of the `Semaphore` in combination with the `AdaptiveWait`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/209/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/210,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/210,iceoryx2,2270288458,210,Create C language binding,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-04-30T00:58:14Z,2024-06-19T23:41:07Z,"## Brief feature description

Create a `C` language binding for the iceoryx2 public API.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/210/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/213,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/213,iceoryx2,2301567757,213,Increase test coverage,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-05-16T23:59:54Z,2024-10-03T07:35:05Z,"## Brief feature description

Take a look at https://app.codecov.io/gh/eclipse-iceoryx/iceoryx2?branch=main and write tests for uncovered code.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/213/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,iceoryx2,2317390789,220,Large FixedSizeVec overflows stack,jasonashton,5923405,Jason Ashton,,CLOSED,2024-05-26T02:11:47Z,2024-06-10T16:51:25Z,"## Required information

**Operating system:**
* MacOS Sonoma 14.5  
`Darwin Macbook-Pro.local 23.5.0 Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000 arm64`

**Rust version:**
`rustc 1.78.0 (9b00956e5 2024-04-29)`

**Cargo version:**
`cargo 1.78.0 (54d8815d0 2024-03-26)`

**iceoryx2 version:**
`main`

**Observed result or behaviour:**
When creating a large (1mb or greater) FixedSizeVec, the stack overflows

**Expected result or behaviour:**
This is more of a question, but how can we send larger data over the IPC? I'm looking to transfer images between processes which needs much larger data sizes, but that overflows the stack. The answer is usually to use a Vec on the heap but that doesn't seem to be an option for IPC.

**Conditions where it occurred / Performed steps:**
In `iceoryx2-bb/container/tests/vec_tests.rs` set 
```bash
// const SUT_CAPACITY: usize = 128;
const SUT_CAPACITY: usize = 6220800;
type Sut = FixedSizeVec<usize, SUT_CAPACITY>;
```
and run `cargo test --test vec_tests`:

```bash
thread 'fixed_size_vec_capacity_is_correct' has overflowed its stack
fatal runtime error: stack overflow
error: test failed, to rerun pass `-p iceoryx2-bb-container --test vec_tests`
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_FIM_,iceoryx2,2132050751,220,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-05-26T03:43:26Z,2024-05-26T03:43:26Z,"@jasonashton Thanks a lot for pointing out this issue. I had it once on the radar but lost track of it.

What we in the end need is something like a real placement new, but I think the RFC to it was dismissed in 2018. So, we have to define something that works with our shared memory use case.

In the meantime, you can use the slice API where you shouldn't encounter this problem, see the example here: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/publish_subscribe_dynamic_data","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_FIM_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_Fag7,iceoryx2,2132125755,220,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-05-26T08:13:01Z,2024-05-26T08:13:01Z,"@elBoberido mentioned to me that this approach should work in release mode:

```rust
let service = zero_copy::Service::new(&service_name)
    .publish_subscribe()
    .open_or_create::<FixedSizeVec<u64, 100000000>>()?;
let mut sample = publisher.loan_uninit()?;
let sample = unsafe {
    sample
        .payload_mut()
        .as_mut_ptr()
        .write(FixedSizeVec::default());

    sample.assume_init()
};
```

It is restricted to release mode. Here the compiler optimizes the copy away and implicitly writes directly into the shared memory.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_Fag7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_GCcp,iceoryx2,2132289321,220,NA,jasonashton,5923405,Jason Ashton,,NA,2024-05-26T17:12:14Z,2024-05-26T17:12:14Z,"@elfenpiff thanks for the quick response! I tried the second example, it works for me as a `bin` but not a test (even with `--release`, any ideas why?

This works for me, it sends and receives
```bash
use core::time::Duration;
use iceoryx2::prelude::*;
use iceoryx2_bb_container::vec::FixedSizeVec;

const CYCLE_TIME: Duration = Duration::from_secs(1);
const COMMON_IMAGE_SIZE: usize = 3 * 1080 * 1920;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let service_name = ServiceName::new(""my/big/topic4"")?;

    let service = zero_copy::Service::new(&service_name)
        .publish_subscribe::<FixedSizeVec<u8, COMMON_IMAGE_SIZE>,>()
        .open_or_create()?;

    let publisher = service.publisher().create()?;

    let mut counter: u64 = 0;

    while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {
        counter += 1;
        let mut sample = publisher.loan_uninit()?;
        let mut img = FixedSizeVec::<u8, COMMON_IMAGE_SIZE>::default();
        for i in 0..img.capacity() {
            img.push((i % 255) as u8);
        }
        let sample = unsafe {
            sample
                .payload_mut()
                .as_mut_ptr()
                .write(img);
            sample.assume_init()
        };
        sample.send()?;
        println!(""Sent sample {} ..."", counter);
    }
    println!(""exit"");
    Ok(())
}

```

But this simple test fails with a stack overflow:
```bash
    #[test]
    fn test_big_fixed_size_vec() {
        const COMMON_IMAGE_SIZE: usize = 3 * 1080 * 1920;
        let mut img = FixedSizeVec::<u8, COMMON_IMAGE_SIZE>::default();
        for i in 0..img.capacity() {
            img.push((i % 255) as u8);
        }
        assert_eq!(img.len(), img.capacity());
    }
```

On the topic of the dynamic pub/sub example, I don't fully understand how it works, it seems like it is essentially just breaking up the larger data into multiple publishes? So based on my understanding I'd have to reassemble the data on the other end, is that correct?

Lastly, I believe we used iceoryx zero-copy RMW for ROS2 (RouDI) (though on linux, not mac) at a previous company I was at, and we were sending multiple large images in a single message through zero-copy, and I had never run into an issue like this. Is there some difference here? Is it a iceoryx2, or mac, or rust specific issue?

Thanks for the help, and for the great project!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_GCcp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_G555,iceoryx2,2132516473,220,NA,jasonashton,5923405,Jason Ashton,,NA,2024-05-27T02:03:00Z,2024-05-27T02:03:00Z,"Just another data point, I tried the dynamic publisher but just set max slice length to the size of the vec and that seems to work for me:
```bash
use core::time::Duration;
use iceoryx2::prelude::*;

const CYCLE_TIME: Duration = Duration::from_secs(1);

const COMMON_IMAGE_SIZE : usize = 3 * 1920 * 1080;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let service_name = ServiceName::new(""/big/dynamic/service"")?;

    let service = zero_copy::Service::new(&service_name)
        .publish_subscribe::<[u8]>()
        .open_or_create()?;

    let publisher = service
        .publisher()
        .max_slice_len(COMMON_IMAGE_SIZE)
        .create()?;

    let mut counter = 1;
    let mut vec = Vec::<u8>::with_capacity(COMMON_IMAGE_SIZE);
    for i in 0..vec.capacity() {
        vec.push((i % 255) as u8);
    }

    while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {
        counter += 1;

        let sample = publisher.loan_slice_uninit(COMMON_IMAGE_SIZE)?;
        let sample = sample.write_from_fn(|byte_idx| vec[byte_idx]);
        sample.send()?;
        println!(""Send sample {} ..."", counter);
    }

    println!(""exit"");
    Ok(())
}

```
The dynamic subscriber example prints `received 6220800 bytes`
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_G555/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_HiNZ,iceoryx2,2132681561,220,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-05-27T05:41:24Z,2024-05-27T05:41:24Z,"@jasonashton 

>  I tried the second example, it works for me as a bin but not a test (even with --release, any ideas why?

I think that `cargo test --release` is slightly different than the `cargo run --release` mode but I cannot name any specific differences.

> On the topic of the dynamic pub/sub example, I don't fully understand how it works, it seems like it is essentially just breaking up the larger data into multiple publishes? 

No, the idea is to send a slice, and you can define the worst-case size on the publisher's side. The example is that you want to send camera data, and at runtime you detect a 720p camera. Therefore, you know your image size is 4 * 1280 * 720 - so you create a publisher with this worst-case size. After some runtime, the camera is disconnected and replaced with a 4k camera, and your image size becomes 4 * 3840 * 2160. You remove the old publisher and create a new one with a larger worst-case size.
If the old camera is connected again you can either stick to the current worst-case size or remove the new publisher again and create a new one with a smaller size.

I think I need to write a blog article to clarify this a bit more in detail.

In the future this shall all happen behind the scenes so that you do not have to recreate a publisher anymore. But for now it is already a big improvement compared to iceoryx1.

> Lastly, I believe we used iceoryx zero-copy RMW for ROS2 (RouDI) (though on linux, not mac) at a previous company I was at, and we were sending multiple large images in a single message through zero-copy, and I had never run into an issue like this. Is there some difference here? Is it a iceoryx2, or mac, or rust specific issue?

It is a rust-specific issue. Take a look at this here: https://github.com/rust-lang/rust/issues/53827
This is exactly the problem behind the scenes since the `FixedSizeVector<u8, 100000000>` has an array member of `[MaybeUninit<u8>, 100000000]` that overflows the stack when you want to put it into the heap like

```rust
let heap_array = Box::new([0; 100000000]);
```

But we already started solving this. The idea is to introduce a `PlacementNew` trait

```rust
pub trait PlacementNew: Sized {
    type NewParam;
    
    fn placement_new(this: &mut MaybeUninit<Self>, param: &Self::NewParam);
}
```

in combination with a proc derive `placement_new` macro so that the user can use it like:

```rust
#[derive(placement_new)]
struct MyTransmissionType {
  data: FixedSizeVec<u64, 1234>,
  whatever: FixedSizeString<4567>,
}
```

> Just another data point, I tried the dynamic publisher but just set max slice length to the size of the vec and that seems to work for me:

Perfect :)

In the future we want to integrate also `RelocatableVec` which you could use like this

```rust
struct CameraData {
  image: RelocatableVec<u8>,
  camera_details: FixedSizeString<128>,
  whatever: u64
}

// ...

let sample = publisher.loan()?;
sample.image.reserve(SIZE_OF_CAMERA_IMAGE);
// ...
sample.image.push(123);
```

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_HiNZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_JrAV,iceoryx2,2133241877,220,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-05-27T11:07:26Z,2024-05-27T11:07:26Z,"@jasonashton the example with iceoryx uses shared memory and in release builds the compiler is able to optimize the copy from the stack to the shared memory away and writes the vector directly to the shared memory. In the test this is not possible since it will stay on the stack. You could circumvent this by using `Box<FixedSizeVec<u8, COMMON_IMAGE_SIZE>>` for the tests but there would still be the issue with the stack overflow in debug builds. Using `ulimit -s unlimited` would be a workaround but we need a proper solution. Ideally, Rust would provide something similar to the C++ placement new.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_JrAV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_T2xk,iceoryx2,2135911524,220,NA,jasonashton,5923405,Jason Ashton,,NA,2024-05-28T18:54:50Z,2024-05-28T18:54:50Z,"> No, the idea is to send a slice, and you can define the worst-case size on the publisher's side. The example is that you want to send camera data, and at runtime you detect a 720p camera. Therefore, you know your image size is 4 * 1280 * 720 - so you create a publisher with this worst-case size. After some runtime, the camera is disconnected and replaced with a 4k camera, and your image size becomes 4 * 3840 * 2160. You remove the old publisher and create a new one with a larger worst-case size.

This is what I ended up implementing, I abstracted the publisher to automatically do this. The benefit of this is actually that I can publish non-fixed sizes like a serialized protobuf, which actually works slightly better for us, though I'm sure at the cost of some performance?

> in combination with a proc derive placement_new macro so that the user can use it like:

This is close to what I was originally trying to implement (though with the FixedSizeVec) as I'm used to the requirement of compile time fixed sizes from Iceoryx / RouDI. The relocatable vec solution seems good too.

Thanks for the help! I'm currently unblocked now, but looking forward to trying out the fixes when they land.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_T2xk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_sJHi,iceoryx2,2142278114,220,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-05-31T14:06:15Z,2024-05-31T14:06:15Z,"Oh, you already used iceoryx with RouDi? Can you share some details about your project?

We do not have numbers for the impact of creating new publishers. In theory it should not be too expensive but maybe some optimizations are necessary.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_sJHi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_stzi,iceoryx2,2142428386,220,NA,jasonashton,5923405,Jason Ashton,,NA,2024-05-31T14:46:59Z,2024-05-31T14:46:59Z,It was at a previous company working on ROS2-based robots. We had 8 uncompressed images we needed to get from one node to another and zero copy was necessary as otherwise the software would quickly grind to a halt using DDS. I wasn't the engineer directly setting it up but I was working around it. What I have working now with Iceoryx2 in a week is farther and more flexible than what took months of work and troubleshooting previously.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_stzi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wmu0,iceoryx2,2143447988,220,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-01T13:20:43Z,2024-06-01T13:20:43Z,Cool. Would be great to get something like this as success/user story on our website ... and with our website I mean ekxide.io :),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wmu0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Aakgd,iceoryx2,2154448925,220,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-07T09:23:22Z,2024-06-07T09:23:22Z,"@jasonashton We implemented a `PlacementDefault` trait and derive proc-macro to address the issue. It is implemented for all iceoryx2 containers, and a working example is here: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/rust/complex_data_types/complex_data_types.rs

I also added a FAQ entry: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/FAQ.md#my-transmission-type-is-too-large-encounter-stack-overflow-on-initialization

For now, I would define this as the iceoryx2 idiomatic approach to initialize large structs in shared memory.

But as @elBoberido already found out, in release mode, the compiler optimizes this so that the stack overflow should not pose a problem.

If you have time to play around with it, I would be happy to receive some feedback.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Aakgd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/220,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ArZvj,iceoryx2,2158861283,220,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-10T16:51:24Z,2024-06-10T16:51:24Z,@jasonashton With PR #230 this issue should be solved. If I missed something or another related issue turns up please feel free to reopen the issue again.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ArZvj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/221,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/221,iceoryx2,2319102936,221,Increase min version to rust 1.75,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-05-27T12:58:28Z,2024-05-27T14:34:33Z,"## Brief feature description

See title
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/221/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/223,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/223,iceoryx2,2319189382,223,Remove clippy surpression for assigning clones,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-05-27T13:41:45Z,2024-05-27T13:41:56Z,"## Brief feature description

clippy produces a false positive when in the `clone_from` implementation `clone` with self assignment is used, see: https://github.com/rust-lang/rust-clippy/issues/12600

As soon as this is fixed, every `#[allow(clippy::assigning_clones)]` marked with `TODO: [#223]` shall be removed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/223/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224,iceoryx2,2319321205,224,Implement placement new concept,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-05-27T14:43:08Z,2024-06-07T09:17:42Z,"## Brief feature description

See: #220 

When a large data type that does not fit into the stack is transmitted via shared memory we encounter a stack overflow. It is caused by a lacking placement new functionality in Rust, see: https://github.com/rust-lang/rust/issues/53827

Example:

```rust
let a = Box::new([-1; 3000000]);
```

We need to add a mechanism so that 

```rust
let sample = publisher.loan()?;
```

and

```rust
let sample = publisher.loan_uninit()?;
let sample = sample.write_payload(LargeDataType::default());
```

perform a placement new into the provide shared memory.

## Detailed information

One possible solution can be the introduction of a `PlacementNew` trait in combination with a `placement_new` derive macro.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_Lbtt,iceoryx2,2133703533,224,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-05-27T15:31:34Z,2024-05-27T15:31:34Z,"There is already a workaround for this available by using
```rs
let mut sample = publisher.loan_uninit()?;
let sample = unsafe {
    sample
        .payload_mut()
        .as_mut_ptr()
        .write(LargdDataType::default());

    sample.assume_init()
};
```
It should work reliably with release builds but might fail with debug builds.

We need a long term solution but I think a build-in Rust solution would be ideal. Maybe this is something we could engage in the Rust community and try to speed it up?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_Lbtt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_L7GJ,iceoryx2,2133832073,224,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-05-27T16:56:27Z,2024-05-27T16:56:27Z,"@elBoberido, we could try, but I doubt we can realize this in the following months.

I can't entirely agree with calling this reliable when this algorithm depends on a release optimization. For whatever reason, this could be turned off in some corner cases, or the compiler may not be able to realize that it can perform this optimization.

And what if the user, who is using iceoryx, integrates this into unit tests - then it will cause problems again. With this we would also enforce our users to always build in release mode, also during development, which would cause additional problems.

So my take on this is that we require a quick and comfortable solution and we can use our solution as a discussion basis for the Rust community to come to a build-in Rust solution. What do you think?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_L7GJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/224,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_MJ7h,iceoryx2,2133892833,224,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-05-27T18:02:23Z,2024-05-27T18:02:23Z,@elfenpiff I think there are more pressing issues but it's up to you.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_MJ7h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,iceoryx2,2322273031,225,Go language binding,TENX-S,40336192,Ares Andrew,ttenx@pm.me,OPEN,2024-05-29T03:23:46Z,2024-09-01T01:52:36Z,Is there a plan to do this? It should be doable after #210 closed.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_WRXW,iceoryx2,2136544726,225,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-05-29T05:31:32Z,2024-05-29T05:31:32Z,"@TENX-S 

> Is there a plan to do this?

There is now :smile:! In our roadmap, we listed all the languages that came to our mind, and Go just slipped it, partly because I think none of our core contributors ever got in touch with Go.

Would you be willing to help us out? Maybe you could push the Go language binding here or, as an alternative, review the corresponding pull requests â this would take much more time since we currently have other tasks and would need to learn the Go basics as well.

The tasks that would need to be done:
1. Add the files required for the language binding under `iceoryx2-lang/go` (see here, our intermediate state: https://github.com/elBoberido/iceoryx2/tree/iox2-210-create-c-language-binding)
2. Port all examples from `examples/rust` to Go and store them under `examples/go`
3. Integrate examples into CI so that they are running there as well (this can be done completely on our side)

If you decide to help us out here, you will make the whole iceoryx family very happy!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_WRXW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_WnyA,iceoryx2,2136636544,225,NA,TENX-S,40336192,Ares Andrew,ttenx@pm.me,NA,2024-05-29T06:30:02Z,2024-05-29T06:30:02Z,"Thank you for your response! Iâm more than willing to help with the go binding. However, I noticed that the API in [iceoryx2.h](https://github.com/elBoberido/iceoryx2/blob/iox2-210-create-c-language-binding/iceoryx2-lang/c/iceoryx2.h) are not yet complete. Please let me know when youâre ready to release the C bindings.

In case you need some good examples of porting C library to Go by using [cgo](https://go.dev/wiki/cgo):
1. https://github.com/mattn/go-sqlite3
2. https://github.com/confluentinc/confluent-kafka-go/tree/master/kafka","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_WnyA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6KJK7M,iceoryx2,2317659852,225,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-08-29T13:27:56Z,2024-08-29T13:27:56Z,"@TENX-S we have finished the iceoryx2 c binding, it is merged with examples and documentation, see: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples and https://iceoryx2.readthedocs.io

Are you still interested in creating a go language binding for iceoryx2? If so we would be happy to support you with whatever you need.

With C/C++, our first goal was to recreate all the examples of Rust in C/C++. When they were working, we added the API stuff (we are still working on attributes and config) that was not part of the examples. Then the user can go into the examples folder, click on the language in the list they would like to use and start coding.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6KJK7M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/225,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Kd99X,iceoryx2,2323111767,225,NA,TENX-S,40336192,Ares Andrew,ttenx@pm.me,NA,2024-09-01T01:52:34Z,2024-09-01T01:52:34Z,"> @TENX-S we have finished the iceoryx2 c binding, it is merged with examples and documentation, see: 
> https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples and https://iceoryx2.readthedocs.io/

Thanks for the information. I'm gonna play with these examples and see what I can do.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Kd99X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226,iceoryx2,2328189966,226,"Is there any description about the architect difference between iceoryx and iceoryx2,how iceory2 works without roudi",sgf201,5253415,,sgf201@gmail.com,CLOSED,2024-05-31T16:23:36Z,2024-06-06T15:46:40Z,,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wMPH,iceoryx2,2143339463,226,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-01T07:22:36Z,2024-06-01T07:22:36Z,"@sgf201 No, they are not available in the open-source repository. Parts of them will be published to support contributors, but the majority will not.
If you are interested in an iceoryx2 deep dive, please contact info@ekxide.io, and we can set up a meeting.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wMPH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wNmQ,iceoryx2,2143345040,226,NA,sgf201,5253415,,sgf201@gmail.com,NA,2024-06-01T07:41:44Z,2024-06-01T07:41:44Z,"@elfenpiff 
Thank you for your reply. I am interested in using C++binding or other methods to combine Iceoryx2 with Cyclonedds to create a new version of dds or implement related tasks in RMW for ROS2. I also hope to participate in Iceoryx or Iceoryx2, but I don't know much about Rust.

one question, is it based on a certain language attribute of Rust that Iceoryx2 does not need roudi? Or is it true that refactoring Iceoryx can also achieve none-roudi?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wNmQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/226,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wQ0-,iceoryx2,2143358270,226,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-01T08:22:21Z,2024-06-01T08:22:21Z,"@sgf201 

> one question, is it based on a certain language attribute of Rust that Iceoryx2 does not need roudi? Or is it true that refactoring Iceoryx can also achieve none-roudi?

It is also possible to refactor iceoryx so that it does not require a central daemon. But we aimed for iceoryx2 and Rust since we think that this combination has the most promising future.

> I am interested in using C++binding or other methods to combine Iceoryx2 with Cyclonedds to create a new version of dds or implement related tasks in RMW for ROS2.

@elBoberido is currently working on the C and, later, the C++ bindings. They should be available in the next two months. 
When you take a look at our [Roadmap](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/ROADMAP.md) you see that we also plan to have a DDS gateway and a ROS2 RMW binding.

If you are interested, we could cooperate here. As soon as the C API for iceoryx2 stands, we could start with an RMW binding for iceoryx2 and use the existing [iceoryx RMW binding](https://github.com/ros2/rmw_iceoryx) as a template. If you like, you could take care of the iceoryx2 RMW binding and this would make a lot of iceoryx developers happy :) ...

We try to write then a gateway based on zenoh for network communication. If we are lucky we may have something working at the end of this year.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc5_wQ0-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/231,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/231,iceoryx2,2341606266,231,user-defined service properties,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-08T11:06:43Z,2024-06-13T16:14:31Z,"## Brief feature description

Services may have properties that correspond to sensors or other constraints that cannot be represented in the context of iceoryx2. Therefore, the user needs the ability to set user-defined properties.

## Detailed information

```rust
let service = zero_copy::Service::new(&service_name)
  // START: user-defined service properties
    .custom_property(""CameraResolution"", ""1920x1080"")
    .custom_property(""Framerate"", ""60"")
  // END: user-defined service properties
    .publish_subscribe::<TransmissionData>()
    .open_or_create()?;
```

The user-defined service properties can be read via the services static config:

```rust
let camera_resolution = service.static_config()
                               .custom_property(""CameraResolution"");
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/231/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/231,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6AgqFC,iceoryx2,2156044610,231,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-08T13:50:31Z,2024-06-08T13:50:31Z,Is the restriction to byte string literals necessary? Why not accept any valid UTF8 string?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6AgqFC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/231,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ah-ns,iceoryx2,2156390892,231,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-09T08:31:59Z,2024-06-09T08:31:59Z,@elBoberido just to test if you pay attention.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ah-ns/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/233,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/233,iceoryx2,2351823520,233,FFI 'dylib' build on macOS is broken,elBoberido,56729607,Mathias Kraus,,OPEN,2024-06-13T18:40:02Z,2024-06-13T18:40:02Z,"## Required information

**Operating system:**
macOS; any version

**Rust version:**
any version

**Cargo version:**
any version

**iceoryx2 version:**
main branch

**Observed result or behaviour:**
The `dylib` generated by Rust has a dependency to the `target` folder. Using `cmake` to install the library retains this dependency. 

Run `otool -L libiceoryx2_ffi.dylib` to list all the dependencies.

**Expected result or behaviour:**
The `dylib` should not have a dependency to the `target` folder

**Conditions where it occurred / Performed steps:**

Check if the discovery C example links to shared libs.

```sh
cmake -B target/ffi/build -DCMAKE_INSTALL_PREFIX=""target/ffi/install"" .
cmake --build target/ffi/build
cmake --install target/ffi/build
```

Run the discovery C example
```sh
cmake -B target/ffi/out-of-tree -CMAKE_PREFIX_PATH=""full/path/to/target/ffi/install"" -Hexamples/c
target/ffi/out-of-tree/discovery/example-c-discovery
```

Run `otool`
```sh
otool -L target/ffi/build/rust/release/libiceoryx2_ffi.dylib
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/233/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235,iceoryx2,2355148871,235,Cannot build for target `i686-pc-windows-msvc`,Chaoses-Ib,50246090,,Chaos-es@outlook.com,CLOSED,2024-06-15T19:07:07Z,2024-06-17T09:41:58Z,"## Required information

**Operating system:** Windows 11 24H2 10.0.26100.712

**Rust version:** rustc 1.80.0-nightly (9cdfe285c 2024-05-22)

**Cargo version:** cargo 1.80.0-nightly (84dc5dc11 2024-05-20)

**iceoryx2 version:** `main` branch

**Observed result or behaviour:**
```pwsh
> cargo build --target i686-pc-windows-msvc
...
error: failed to run custom build command for `iceoryx2-pal-posix v0.3.0 (https://github.com/eclipse-iceoryx/iceoryx2.git?branch=main#1f5c8a3d)`

Caused by:
  process didn't exit successfully: `C:\test\target\debug\build\iceoryx2-pal-posix-bcebb1f44bc964b5\build-script-build` (exit code: 101)
  --- stdout
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-env-changed=TARGET
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_i686-pc-windows-msvc
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_i686_pc_windows_msvc
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS
  cargo:rerun-if-changed=src/c/posix.h

  --- stderr
  src/c/posix.h:32:10: fatal error: 'arpa/inet.h' file not found
  thread 'main' panicked at C:\Users\Chaoses\.cargo\git\checkouts\iceoryx2-1e1d4490bb91753f\1f5c8a3\iceoryx2-pal\posix\build.rs:44:18:
  Unable to generate bindings: ClangDiagnostic(""src/c/posix.h:32:10: fatal error: 'arpa/inet.h' file not found\n"")
  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```

Obviously, `posix.h` only handles `_WIN64`, not `_WIN32`:
https://github.com/eclipse-iceoryx/iceoryx2/blob/1f5c8a3dbe6a4fdcb786a97e181b2b3637575fc7/iceoryx2-pal/posix/src/c/posix.h#L31-L46

Is 32-bit Windows not in the support list of iceoryx2?

**Expected result or behaviour:** Build successfully.

**Conditions where it occurred / Performed steps:** `i686-pc-windows-msvc` target","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYVME,iceoryx2,2170639108,235,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-15T20:30:37Z,2024-06-15T20:30:37Z,"@Chaoses-Ib This is a platform we did not yet think of, but 32-bit support should generally be supported.

I think this may be easily fixed by changing the line 31 in `posix.h` into `#if defined(_WIN64) || defined(_WIN32)`. Let me check it out. If this works I will create a pull request.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYVME/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYVxz,iceoryx2,2170641523,235,NA,Chaoses-Ib,50246090,,Chaos-es@outlook.com,NA,2024-06-15T20:34:41Z,2024-06-15T20:34:41Z,"FYI, `_WIN32` is ""defined as 1 when the compilation target is 32-bit ARM, 64-bit ARM, x86, or x64"", not only for 32-bit. The doc is here: https://learn.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-170","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYVxz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/235,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYnnH,iceoryx2,2170714567,235,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-06-15T20:51:59Z,2024-06-15T20:51:59Z,@Chaoses-Ib thanks for the hint! I could reproduce your bug and fix it by adding some `defined(_WIN32)` here and there and by adjusting a `usize` variable to `u64`.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6BYnnH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/237,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/237,iceoryx2,2356725128,237,Create CI target for `i686-pc-windows-msvc` on current windows,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-06-17T08:27:47Z,2024-06-17T08:27:47Z,"## Brief feature description

The platform is out of the box supported but some mistakes/bugs may occur when not using the right macro platform combination in c files.
See #235 where we needed to use `#if defined(_WIN32) || defined(_WIN64)` 

Since the 32-bit platform is already tested fully, a simple single debug build on Windows should be sufficient.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/238,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/238,iceoryx2,2358460113,238,Remove error prone `Service::{list|does_exist}_with_custom_config`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-17T23:14:52Z,2024-06-18T14:29:14Z,"## (Code) Example Of Cumbersome API

See title. 

From @elBoberido 
I think this is error prone. A user should always explicitly provide a config. I think this is a general flaw in the API. everywhere a config is required it should explicitly be passed to the function. Worst case would be a line with `let config = Config::get_global_config();`. The way it is handled now makes it error prone when a user moves to a custom config and does not realize that instead of `list`, `list_with_custom_config` needs to be called.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/241,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/241,iceoryx2,2360335515,241,'win32call' needs to provide the last error,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-06-18T17:13:59Z,2024-06-19T00:42:47Z,"## Required information

**Operating system:**
Windows

**Rust version:**
all version but with the GNU toolchain, e.g. stable-gnu

**Cargo version:**
N/A

**iceoryx2 version:**
main

**Observed result or behaviour:**
At a few places `win32call` is instructed to ignore the error and later on `GetLastError` is called in order to check whether the ignored error occurred. It seems that with the MinGW toolchain the subsequent call to `system_error_code_to_errno` resets the error and `GetLastError` return 0, which makes the error handling futile.

**Expected result or behaviour:**
Some way to access the last error.

**Conditions where it occurred / Performed steps:**
Run the `win32_udp_port_to_uds_name_set_and_get_works_with_multiple_instances` test on `latest-gnu` on Windows and see the test fail.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/241/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/243,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/243,iceoryx2,2360791088,243,Implement `TryInto` for `NodeName` and `ServiceName`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-18T21:47:53Z,2024-06-19T00:30:20Z,"## (Code) Example Of Cumbersome API

Instead of writing:

```rust
NodeBuilder::new().name(&NodeName::new(""whatever"")?);
```

we could write

```rust
NodeBuilder::new().name(""whatever"".try_into()?);
```

which is much cleaner.

## Improvement Suggestion

Implement `TryInto` for `NodeName` and `ServiceName`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/244,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/244,iceoryx2,2360794728,244,API consistency while creating endpoints,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-18T21:49:37Z,2024-06-19T23:37:01Z,"## (Code) Example Of Cumbersome API

The upcoming `Node` will have a method called `service_builder()` to create a new service but the port factories methods are called `publisher`, `subscriber` etc.
To make it consistent they shall be renamed into `publisher_builder()`, `subscriber_builder()` ...","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/244/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/246,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/246,iceoryx2,2362783453,246,Example how to build async API with iceoryx2,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-06-19T16:44:00Z,2024-07-04T08:47:06Z,"## (Code) Example Of Cumbersome API

iceoryx2 itself does not offer an async API, but it is possible to build something with it that has an async API. Therefore, one can define a pub/sub service and combine it with an event service. An example shall demonstrate how to realize such an API.

Relates to #47 

Is a possible solution sans-IO design: https://www.firezone.dev/blog/sans-io","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/246/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/246,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6B5yOV,iceoryx2,2179408789,246,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-19T20:17:19Z,2024-06-19T20:17:19Z,"Maybe I got it wrong but I think you mean an event based API. When someone talks about an async API in Rust they have something different in mind, especially to be composable with the `await` call. This is currently not possible with the API we provide but it should be possible to provide such an API.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6B5yOV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,iceoryx2,2366767494,251,Hangs occured when C++ program calls the Iceoryx2 API,qpswwww,13517902,Yongkang ZHANG,,CLOSED,2024-06-21T15:24:03Z,2024-07-20T19:02:42Z,"I'm planning to use iceoryx2 as the low-latency IPC method for my project's C++ client and Rust server. Recently I've tried to wrap iceoryx2 into my C++ client using Rust-CXX. However, I observed that, when the C++ client uses std::thread to create threads and call iceoryx2 in the spawned thread, it sometimes hangs. This bug can be reproduced on both Mac OS (Mac M1) and Linux (x86 CPU).

To the best of my knowledge, iceoryx2 is the fastest IPC method for Rust programs. It seems that iceoryx2 is the only viable solution for my project. So I really hope this bug can be resolved ASAP. I'm eagerly looking forward to a solution and a matured (or premature) C++ library of iceoryx2. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CHbo1,iceoryx2,2182986293,251,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-21T15:37:55Z,2024-06-21T15:37:55Z,"@qpswwww do you have a minimal example? Ideally with build instructions. Are you using a released version or the main branch?

We are currently also working on official C and C++ bindings. They should be available at the end of June (C) and end of July (C++).","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CHbo1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CJ7mx,iceoryx2,2183641521,251,NA,qpswwww,13517902,Yongkang ZHANG,,NA,2024-06-22T01:20:50Z,2024-06-22T01:20:50Z,"> @qpswwww do you have a minimal example? Ideally with build instructions. Are you using a released version or the main branch?
> 
> We are currently also working on official C and C++ bindings. They should be available at the end of June (C) and end of July (C++).

For your information, I post my client code here. I have read the current C example in iceoryx2, but it is only single-threaded. I suggest considering the C++ multi-thread scenario. Because we usually call the APIs in a spawned thread.

This is the C++ part:

```cpp
#include <iostream>
#include ""rust_part.h""
#include <thread>
#include <chrono>
#include ""unistd.h""
#include ""build/rust_part/rust_part.h""

void test_request_launch_kernel(int base_id) {
    for(int i=0;i<100;i++) {
        std::cout<<""C++ call launch "" << base_id+i << std::endl;
        rust_part::send_request_to_server(base_id+i);
        std::cout<<""C++ finished call launch "" << base_id+i << std::endl;
        usleep(10);
    }
}

int main()
{
    rust_part::launch_request_service_daemon();
    rust_part::launch_reply_service_daemon();
    std::thread th2(test_request_launch_kernel, 0);
    std::thread th3(test_request_launch_kernel, 10000);
    std::thread th4(test_request_launch_kernel, 10000000);
    th2.join();
    th3.join();
    th4.join();
    return 0;
}
```

Rust part client code:
```rust
#[cxx::bridge]
mod ffi {
    #[namespace = ""rust_part""]
    extern ""Rust"" {
        fn send_request_to_server(client_id: u64);
        fn launch_request_service_daemon();
        fn launch_reply_service_daemon();
    }
}

fn launch_request_service_daemon() {
    let (_, request_channel_recver) = request_channel.clone();
    let request_service_name = match ServiceName::new(""My/Funk/ServiceName"") {
        Ok(val) => val,
        Err(err) => {
            println!(""Failed to create service name, {}"", err);
            exit(233)
        }
    };

   let request_service = match zero_copy::Service::new(&request_service_name)
        .publish_subscribe()
        .open_or_create::<MessageStruct>() {
        Ok(val) => {
            println!(""Publish service Created."");
            val
        },
        Err(err) => {
            println!(""Failed to create service, {}"", err);
            exit(233)
        }
   };

    let request_publisher = match request_service.publisher().create() {
        Ok(val) => val,
        Err(err) => {
            println!(""Failed to create request service publisher, {}"", err);
            exit(233)
        }
    };
    loop {
        match request_channel_recver.recv() {
            Err(err) => {
                println!(""Failed to loan uninit(), {}"", err);
                return;
            }
            Ok(request_msg) => {
                match request_publisher.loan_uninit() {
                    Err(err) => {
                        println!(""Failed to loan uninit(), {}"", err);
                        return;
                    }
                    Ok(val) => {
                        let sample = val.write_payload(request_msg);
                        match sample.send() {
                            Ok(..) => {println!(""Send a reply"")}
                            Err(err) => println!(""Failed to send reply, {}"", err)
                        }
                    }
                };
            }
        }
    }
}

fn launch_reply_service_daemon() {
    let reply_service_name = match ServiceName::new(""My/Funk/ReplyFromServer"") {
        Ok(val) => val,
        Err(err) => {
            println!(""Failed to create service name, {}"", err);
            exit(233)
        }
    };

    let reply_service = match zero_copy::Service::new(&reply_service_name)
        .publish_subscribe()
        .open_or_create::<ReplyStruct>() {
        Ok(val) => {
            println!(""Publish service Created."");
            val
        },
        Err(err) => {
            println!(""Failed to create service, {}"", err);
            exit(233)
        }
    };

    let reply_subscriber = match reply_service.subscriber().create() {
        Ok(val) => val,
        Err(err) => {
            println!(""Failed to create reply service subscriber, {}"", err);
            exit(233)
        }
    };
    while let Iox2Event::Tick = Iox2::wait(Duration::ZERO) {
        loop {
            let received_data = reply_subscriber.receive();
            match received_data {
                Ok(val) => {
                    match val {
                        Some(val) => {
                            println!(""Received reply: {:?}"", val);
                        }
                        _ => {}
                    }
                }
                Err(err) => println!(""Failed to receive data, {}"", err),
            }
        }
    }
}

fn send_request_to_server(client_id: u64) {
    let msg = MessageStruct{
        client_id: client_id,
    };
    let (request_channel_sender, request_channel_recver) = request_channel.clone();
    request_channel_sender.send(msg).expect(""Failed to send request to the request channel"")
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CJ7mx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CLL-U,iceoryx2,2183970708,251,NA,qpswwww,13517902,Yongkang ZHANG,,NA,2024-06-22T10:17:51Z,2024-06-22T10:17:51Z,"> @qpswwww do you have a minimal example? Ideally with build instructions. Are you using a released version or the main branch?
> 
> We are currently also working on official C and C++ bindings. They should be available at the end of June (C) and end of July (C++).

I'm using the latest released version iceoryx2 = ""0.3.0"".","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CLL-U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CLbNF,iceoryx2,2184033093,251,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-06-22T13:28:46Z,2024-06-22T13:28:46Z,"@qpswwww we need a fully working example which triggers the hang. Without that we are not able to find the root cause. For example, the code you provided does not compile and if changes were made to make it compile, it would block in `request_channel_recver.recv()` in the `rust_part::launch_request_service_daemon();` call. Looking at the provided code, I cannot see anything that would make it hang with iceoryx as the root cause.

The C examples are currently just there to test CI setup and build system. The actual code will be added the next weeks.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6CLbNF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6DahJj,iceoryx2,2204766819,251,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-07-03T00:23:36Z,2024-07-03T00:23:36Z,"@qpswwww like mentioned in the previous comment, we need a working minimal example which triggers the bug you describe","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6DahJj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/251,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FlvUh,iceoryx2,2241262881,251,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-20T19:02:41Z,2024-07-20T19:02:41Z,"@qpswwww I am closing the issue since we require a minimal working example that triggers the bug.

Please feel free to reopen the issue when you can provide an example.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FlvUh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/252,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/252,iceoryx2,2369454144,252,Untyped services,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-24T07:26:17Z,2024-07-01T13:50:21Z,"## Brief feature description

Introspection and the C API require the usage of untyped services so that a service created with the C API can work together with strongly typed rust services.

## Detailed information

The static config already contains a `TypeDetails` struct that contains type name as a string and layout for the header and the payload. When a service is created the C API can override those entries so that a strongly typed rust service can connect to such a C created service, the same goes for open.

To satisfy the introspection, the name could be optional and the layout is a minimum requirement so that the introspection would just define `layout(align = 1, size = 1)` as minimum requirement and could connect to every service.

### Create/open untyped service with explicit service hint:

```rust
let service = node
    .service_builder(""foo"".try_into()?)
    .publish_subscribe::<[u8]>()
    .set_type_info(TypeDetails{layout: ..., type_name: ...})
    .open_or_create()?;
```

* the type `[u8]` would be overridden by the provided type name in `set_type_info`
* two services can only connect if they have the same `TypeDetails`, for other types than `[u8]` it is internally done by the already implemented logic
* `set_type_info` can only be called when the payload type is `[u8]`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/252/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/253,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/253,iceoryx2,2369476712,253,Add metadata to pub/sub header,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-06-24T07:37:34Z,2024-07-26T22:41:54Z,"## Brief feature description

Zero-copy-based communication patterns like request-response and publish-subscribe may require custom metadata in the header of the sample. Therefore, the user shall be able to set this custom type as metadata in the header, shall be able to modify and read it out.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/253/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/258,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/258,iceoryx2,2382350677,258,Test failure with `1.81.0-nightly` in `thread_exit_works` from `iceoryx-bb-posix`,elBoberido,56729607,Mathias Kraus,,OPEN,2024-06-30T17:25:55Z,2024-07-01T13:58:39Z,"## Required information

**Operating system:**
 * Ubuntu 24.04 and 22.04

**Rust version:**
rustc 1.81.0-nightly (e9e6e2e44 2024-06-28)

**Cargo version:**
cargo 1.81.0-nightly (4ed7bee47 2024-06-25)

**iceoryx2 version:**
`main` branch with fix for nightly build

**Observed result or behaviour:**
The `thread_exit_works` test in the `iceoryx-bb-posix` crate fails with `SIGABRT` in release builds.

**Expected result or behaviour:**
Test should pass.

**Conditions where it occurred / Performed steps:**
Run the test with the nightly compiler.

## Note

A workaround was added to the test. The workaround is a sleep of 1ns before calling Â´thread_exitÂ´. The underlying issue needs to be investigated.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/258/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/259,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/259,iceoryx2,2384859475,259,`iceoryx2_cal::event::Listener::**_wait_all` shall use callback with result ,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-01T22:45:24Z,2024-10-03T07:27:55Z,"## Brief feature description

The signature of all functions in the `Listener` trait in the `iceoryx2_cal::event` concept shall be adjusted to

```rust
fn **_wait_all<F: FnMut(TriggerId) -> Result<CallbackProgression, ListenerWaitError>(&self, callback: F) -> Result<(), ListenerWaitError>;
```

This allows a better usage and the `?` operator inside the callback as well as the implementation. Furthermore, it allows to stop the progress when an error occurs or a certain user condition is met (thanks to CallbackProgression).

The `iceoryx2::port::Listener::**wait_all` API shall be adjusted as well after the same scheme.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/259/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/259,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of2E8,iceoryx2,2390712636,259,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:27:55Z,2024-10-03T07:27:55Z,Already implemented,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of2E8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/262,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/262,iceoryx2,2388752012,262,Fully support C and C++ Bindings on 32 Bit Architectures,elBoberido,56729607,Mathias Kraus,,OPEN,2024-07-03T14:12:27Z,2024-07-03T14:12:27Z,"## Brief feature description

Currently the C bindings can be build on 32 bit but the out-of-tree builds do not work on the CI. The C++ bindings also do not work since `iceoryx_hoofs` is not yet ready for 32 bit support.

## Tasks

- [ ] out-of-tree builds for C Bindings on 32 bit
- [ ] C++ Bindings on 32 Bit (depends on `iceoryx_hoofs`)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/263,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/263,iceoryx2,2389644237,263,Add concurrency tests,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-03T23:12:51Z,2024-07-05T08:24:36Z,"## Brief feature description

### iceoryx2_cal

 * monitoring: create, monitor and cleanup from within multiple threads
 * NamedConcept, create/remove concurrently concepts while listing them
 * NamedConcept, create and open concurrently concepts
 * NamedConcept, create/remove and check for existence
 * event concept
   * notify listener while it is being concurrently created and destroyed
   * listen while notifiers are concurrently connected/disconnected
 * zero copy connection
   * send data while receiver is concurrently connecting/disconnecting
  
Final task
 * check all concept if there is any other concurrent test missing

### iceoryx2_bb

* ProcessState: create, list and modify process states concurrently

## Detailed information

The basic idea behind all tests is to open one or two groups of threads, one that creates/modifies things while the other group tries to consume it.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/263/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/264,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/264,iceoryx2,2392483239,264,Create C++ language binding,elBoberido,56729607,Mathias Kraus,,OPEN,2024-07-05T12:09:04Z,2024-12-20T13:08:24Z,"## Brief feature description

Create a `C++` language binding for the iceoryx2 public API.

## Detailed information

Based on the `C` language binding from #210, a `C++` binding should be created in order to make iceoryx2 available to the `C++` ecosystem.

## ToDo List

* [ ] Remove all `IOX_TODO()` calls.

### Examples

* [x] complex_data_types
* [x] discovery
* [x] event
* [x] publish_subscribe
* [x] publish_subscribe_dynamic_data
* [x] publish_subscribe_with_user_header
* [x] service_attributes
* [ ] main readme updated

### Classes

* [x] attribute.hpp
* [x] attribute_set.hpp
* [x] attribute_specifier.hpp
* [x] attribute_verifier.hpp
* [x] callback_progression.hpp
* [x] config.hpp
* [x] connection_failure.hpp
* [ ] dynamic_config_event.hpp
* [ ] dynamic_config_publish_subscribe.hpp
* [x] event_id.hpp
* [x] header_publish_subscribe.hpp
* [x] listener.hpp
* [x] message_type_details.hpp
* [x] messaging_pattern.hpp
* [x] node_details.hpp
* [x] node_failure_enums.hpp
* [ ] node.hpp
* [x] node_id.hpp
* [x] node_name.hpp
* [x] node_state.hpp
* [x] notifier.hpp
* [ ] port_factory_event.hpp
* [x] port_factory_listener.hpp
* [x] port_factory_notifier.hpp
* [ ] port_factory_publisher.hpp
* [ ] port_factory_publish_subscribe.hpp
* [x] port_factory_subscriber.hpp
* [ ] publisher.hpp
* [x] sample.hpp
* [ ] sample_mut.hpp
* [x] semantic_string.hpp
* [ ] service_builder_event.hpp
* [x] service_builder.hpp
* [ ] service_builder_publish_subscribe.hpp
* [ ] service_details.hpp
* [ ] service.hpp
* [x] service_name.hpp
* [x] service_type.hpp
* [x] static_config_event.hpp
* [ ] static_config.hpp
* [x] static_config_publish_subscribe.hpp
* [ ] subscriber.hpp
* [x] unique_port_id.hpp

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/264/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/264,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YZYLG,iceoryx2,2556789446,264,NA,mossmaurice,8661268,Simon Hoinkis,simon.hoinkis@apex.ai,NA,2024-12-20T11:10:01Z,2024-12-20T11:10:01Z,@elfenpiff Is this issue already completed? According to the issue description a few API calls are still missing.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YZYLG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/264,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YaEs6,iceoryx2,2556971834,264,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-20T13:08:00Z,2024-12-20T13:08:00Z,@mossmaurice thanks for the hint ... yes there are still some tiny bits and pieces missing.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YaEs6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/265,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/265,iceoryx2,2392499522,265,Add clang-format and clang-tidy for C and C++ language bindings,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-07-05T12:19:06Z,2024-07-11T19:53:52Z,"## Brief feature description

Add a `.clang-format` and a `.clang-tidy` file to the repository root.

## Detailed information

The files should be based on the ones from the `eclipse-iceoryx/iceoryx` repo but can be adjusted to match the formatting of `rustfmt` more closely.

## Tasks

- [x] add a `.clang-format` file
  - based on the one from iceoryx1 but maybe adjusted to mimic the `rustfmt` formatting more closely
- [x] add a `.clang-tidy` file
  - also based on the ton from iceoryx1 
- [x] CI check for `clang-tidy` and `clang-format`
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266,iceoryx2,2393572724,266,bindgen fails to generate binding to dirfd on macOS 14.5,orecham,8487595,Jeff Ithier,,CLOSED,2024-07-06T14:00:30Z,2024-07-08T08:50:41Z,"## Required information

**Operating system:**
 * OS name, version

    macOS 14.5 (Sonoma)

 * Additionally, on Linux, Mac Os, Unix, output of: `uname -a`

    ```
    â  ~ uname -a
    Darwin macbook.local 23.5.0 Darwin Kernel Version 23.5.0: Wed May  1 20:19:05 PDT 2024; root:xnu-10063.121.3~5/. RELEASE_ARM64_T8112 arm64
    ```

**Rust version:**
Output of: `rustc --version`

```
â  ~ rustc --version
rustc 1.79.0 (129f3b996 2024-06-10)
```

**Cargo version:**
Output of: `cargo --version`

```
â  ~ cargo --version
cargo 1.79.0 (ffa9cf99a 2024-06-03)
```

**iceoryx2 version:** 

`main`

**Observed result or behaviour:**

```
â  iceoryx2 git:(main) â cargo run --example publish_subscribe_publisher
   Compiling iceoryx2-pal-posix v0.3.0 (/Users/orecham/Code/iceoryx2/iceoryx2-pal/posix)
error[E0425]: cannot find function `dirfd` in module `crate::internal`
  --> iceoryx2-pal/posix/src/macos/dirent.rs:35:22
   |
35 |     crate::internal::dirfd(dirp)
   |                      ^^^^^ not found in `crate::internal`
   |
help: consider importing this function through its public re-export
   |
16 + use crate::posix::dirfd;
   |
help: if you import `dirfd`, refer to it directly
   |
35 -     crate::internal::dirfd(dirp)
35 +     dirfd(dirp)
   |

For more information about this error, try `rustc --explain E0425`.
error: could not compile `iceoryx2-pal-posix` (lib) due to 1 previous error
```

**Expected result or behaviour:**

Minimal pub/sub example compiles and runs.

**Conditions where it occurred / Performed steps:**

See command(s) in observed result.

## Investigation

1. SDK is located at `/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/`:
    ```
    â  ~ ls /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/
    Entitlements.plist SDKSettings.json   SDKSettings.plist  System             usr
    ```
2. File containing `dirfd` is at `/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/dirent.h`
    <details>
    <summary>Expand</summary>

    ```
    â  ~ cat /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/dirent.h
    /*
     * Copyright (c) 2000, 2002-2008 Apple Inc. All rights reserved.
     *
     * @APPLE_LICENSE_HEADER_START@
     *
     * This file contains Original Code and/or Modifications of Original Code
     * as defined in and that are subject to the Apple Public Source License
     * Version 2.0 (the 'License'). You may not use this file except in
     * compliance with the License. Please obtain a copy of the License at
     * http://www.opensource.apple.com/apsl/ and read it before using this
     * file.
     *
     * The Original Code and all software distributed under the License are
     * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
     * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
     * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
     * Please see the License for the specific language governing rights and
     * limitations under the License.
     *
     * @APPLE_LICENSE_HEADER_END@
     */
    /*-
     * Copyright (c) 1989, 1993
     *	The Regents of the University of California.  All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions
     * are met:
     * 1. Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     * 2. Redistributions in binary form must reproduce the above copyright
     *    notice, this list of conditions and the following disclaimer in the
     *    documentation and/or other materials provided with the distribution.
     * 3. All advertising materials mentioning features or use of this software
     *    must display the following acknowledgement:
     *	This product includes software developed by the University of
     *	California, Berkeley and its contributors.
     * 4. Neither the name of the University nor the names of its contributors
     *    may be used to endorse or promote products derived from this software
     *    without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
     * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
     * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
     * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
     * SUCH DAMAGE.
     *
     *	@(#)dirent.h	8.2 (Berkeley) 7/28/94
     */

    #ifndef _DIRENT_H_
    #define _DIRENT_H_

    /*
     * The kernel defines the format of directory entries
     */
    #include <_types.h>
    #include <sys/dirent.h>
    #include <sys/cdefs.h>
    #include <Availability.h>
    #include <sys/_pthread/_pthread_types.h> /* __darwin_pthread_mutex_t */

    struct _telldir;		/* forward reference */

    /* structure describing an open directory. */
    typedef struct {
	    int	__dd_fd;	/* file descriptor associated with directory */
	    long	__dd_loc;	/* offset in current buffer */
	    long	__dd_size;	/* amount of data returned */
	    char	*__dd_buf;	/* data buffer */
	    int	__dd_len;	/* size of data buffer */
	    long	__dd_seek;	/* magic cookie returned */
	    __unused long	__padding; /* (__dd_rewind space left for bincompat) */
	    int	__dd_flags;	/* flags for readdir */
	    __darwin_pthread_mutex_t __dd_lock; /* for thread locking */
	    struct _telldir *__dd_td; /* telldir position recording */
    } DIR;

    #if __DARWIN_C_LEVEL >= __DARWIN_C_FULL

    /* definitions for library routines operating on directories. */
    #define	DIRBLKSIZ	1024

    /* flags for opendir2 */
    #define DTF_HIDEW	0x0001	/* hide whiteout entries */
    #define DTF_NODUP	0x0002	/* don't return duplicate names */
    #define DTF_REWIND	0x0004	/* rewind after reading union stack */
    #define __DTF_READALL	0x0008	/* everything has been read */
    #define __DTF_SKIPREAD  0x0010  /* assume internal buffer is populated */
    #define __DTF_ATEND     0x0020  /* there's nothing more to read in the kernel */

    #endif /* __DARWIN_C_LEVEL >= __DARWIN_C_FULL */

    #ifndef KERNEL

    __BEGIN_DECLS

    int closedir(DIR *) __DARWIN_ALIAS(closedir);

    DIR *opendir(const char *) __DARWIN_ALIAS_I(opendir);

    struct dirent *readdir(DIR *) __DARWIN_INODE64(readdir);
    int readdir_r(DIR *, struct dirent *, struct dirent **) __DARWIN_INODE64(readdir_r);

    void rewinddir(DIR *) __DARWIN_ALIAS_I(rewinddir);

    void seekdir(DIR *, long) __DARWIN_ALIAS_I(seekdir);

    long telldir(DIR *) __DARWIN_ALIAS_I(telldir);

    __END_DECLS

    
    /* Additional functionality provided by:
     * POSIX.1-2008
     */

    #if __DARWIN_C_LEVEL >= 200809L
    __BEGIN_DECLS

    __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0)
    DIR *fdopendir(int) __DARWIN_ALIAS_I(fdopendir);

    int alphasort(const struct dirent **, const struct dirent **) __DARWIN_INODE64(alphasort);

    #if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_8) || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED)     && __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_6_0)
    #include <errno.h>
    #include <stdlib.h>
    #define dirfd(dirp) ({                         \
        DIR *_dirp = (dirp);                       \
        int ret = -1;                              \
        if (_dirp == NULL || _dirp->__dd_fd < 0)   \
            errno = EINVAL;                        \
        else                                       \
           ret = _dirp->__dd_fd;                   \
        ret;                                       \
    })
    #else
    int dirfd(DIR *dirp) __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
    #endif

    int scandir(const char *, struct dirent ***,
        int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **)) __DARWIN_INODE64(scandir);
    #ifdef __BLOCKS__
    #if __has_attribute(noescape)
    #define __scandir_noescape __attribute__((__noescape__))
    #else
    #define __scandir_noescape
    #endif

    int scandir_b(const char *, struct dirent ***,
        int (^)(const struct dirent *) __scandir_noescape,
        int (^)(const struct dirent **, const struct dirent **) __scandir_noescape)
        __DARWIN_INODE64(scandir_b) __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_3_2);
    #endif /* __BLOCKS__ */

    __END_DECLS
    #endif /* __DARWIN_C_LEVEL >= 200809L */

    
    #if __DARWIN_C_LEVEL >= __DARWIN_C_FULL
    __BEGIN_DECLS

    int getdirentries(int, char *, int, long *)

    #if __DARWIN_64_BIT_INO_T
    /*
     * getdirentries() doesn't work when 64-bit inodes is in effect, so we
     * generate a link error.
     */
						    __asm(""_getdirentries_is_not_available_when_64_bit_inodes_are_in_effect"")
    #else /* !__DARWIN_64_BIT_INO_T */
						    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0,__MAC_10_6, __IPHONE_2_0,__IPHONE_2_0)
    #endif /* __DARWIN_64_BIT_INO_T */
    ;

    DIR *__opendir2(const char *, int) __DARWIN_ALIAS_I(__opendir2);

    __END_DECLS
    #endif /* __DARWIN_C_LEVEL >= __DARWIN_C_FULL */

    #endif /* !KERNEL */

    #endif /* !_DIRENT_H_ */
    ```

    </details>
3. Modifying `iceoryx2-pal/posix/build.rs` for `bindgen` to explicitly specify the include location has no effect:
    <details>
    <summary>Expand</summary>

    ```
    let bindings = if std::env::var(""DOCS_RS"").is_ok() {
        bindgen::Builder::default()
            .header(""src/c/posix.h"")
            .clang_arg(""-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"")
            .parse_callbacks(Box::new(CargoCallbacks::new()))
            .clang_arg(""-D IOX2_DOCS_RS_SUPPORT"")
            .use_core()
            .generate()
            .expect(""Unable to generate bindings"")
    } else {
        #[cfg(not(feature = ""acl""))]
        {
            bindgen::Builder::default()
                .header(""src/c/posix.h"")
                .clang_arg(""-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"")
                .parse_callbacks(Box::new(CargoCallbacks::new()))
                .use_core()
                .generate()
                .expect(""Unable to generate bindings"")
        }
        #[cfg(feature = ""acl"")]
        {
            bindgen::Builder::default()
                .header(""src/c/posix.h"")
                .clang_arg(""-I/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"")
                .parse_callbacks(Box::new(CargoCallbacks::new()))
                .clang_arg(""-D IOX2_ACL_SUPPORT"")
                .generate()
                .expect(""Unable to generate bindings"")
        }
    };
    ```

    </details>","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D3web,iceoryx2,2212431771,266,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-07T12:20:19Z,2024-07-07T12:20:19Z,"I could imagine that the issue is that `dirfd` is on mac os not a function but a defined macro that bindgen fails to handle. I had a similar issue with the socket macros `CMSG_FIRSTHDR` and so on, which I solved by creating a c file, compile it and call the function of that C file.

See: [`socket_macros.c`](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/iceoryx2-pal/posix/src/c/socket_macros.c)

I added the file in the [`build.rs`](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/iceoryx2-pal/posix/build.rs) file,see:
```rust
 println!(""cargo:rerun-if-changed=src/c/socket_macros.c"");
 cc::Build::new()
     .file(""src/c/socket_macros.c"")
     .compile(""libsocket_macros.a"");
```

and called then the c function defined inside this file instead of the POSIX API.

This could be a viable solution here as well, that we define an `iox2_dirfd` function that calls the `dirfd` posix function and inside the rust platform we call `iox2_dirfd` instead of `dirfd`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D3web/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D31MD,iceoryx2,2212451075,266,NA,orecham,8487595,Jeff Ithier,,NA,2024-07-07T13:28:42Z,2024-07-07T13:28:42Z,@elfenpiff I will try it out. Assign this one to me.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D31MD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/266,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D4g3N,iceoryx2,2212629965,266,NA,orecham,8487595,Jeff Ithier,,NA,2024-07-08T00:03:28Z,2024-07-08T00:03:28Z,@elfenpiff It worked.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D4g3N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/268,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/268,iceoryx2,2395598557,268,Trickiness with Services,3tilley,1138504,,,CLOSED,2024-07-08T13:07:56Z,2024-08-01T09:12:57Z,"Hello,

I've had a few troubles with `Services`, like how to create them reliably (permission issues on Windows), what the semantics are for when they are reused from when a previous process has died etc. Looking at the repo, can I guess it would be better for me to either wait for `Nodes` to be released, or just to develop against the main branch as the project evolves a little?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/268/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/268,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D-Jg5,iceoryx2,2214107193,268,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-08T13:39:41Z,2024-07-08T13:39:41Z,"@3tilley 

>  Looking at the repo, can I guess it would be better for me to either wait for Nodes to be released.

We plan to release the Nodes with the full cleanup feature at the beginning of August so if you are able to wait a little longer I would recommend waiting a bit more since the API breaks a little more often on `main`. But we are confident that the API is becoming much more stable after release v0.4 (which is coming in the beginning of August).

> what the semantics are for when they are reused from when a previous process has died etc.

When the Nodes with the cleanup feature are implemented then a node alive check is performed whenever you open or close a service. If a dead Node/process is detected, all of its resources are cleaned up for you - this happens behind the scenes, and you have to do nothing at all. Furthermore, we will also provide an API so you can write your centralized node monitor process that performs the cleanup immediately. Still, for the everyday use case, it is sufficient for every process to do it on its own when it starts or stops using a service.

> like how to create them reliably (permission issues on Windows)

Could you elaborate this in more detail? Were you sometimes unable to create services due to insufficient permissions? Btw. in windows you can remove all the stale resources by hand for now, see: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/FAQ.md#a-crash-leads-to-the-failure-publishsubscribeopenerrorunabletoopendynamicserviceinformation
Everything should be stored under `c:\Temp\iceoryx2\`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6D-Jg5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/268,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6G22ea,iceoryx2,2262525850,268,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-08-01T09:12:57Z,2024-08-01T09:12:57Z,"@3tilley I am closing the issue. If anything is still open or I missed something, please feel free to reopen the issue.

FYI: The nodes with the full cleanup feature have been implemented. Whenever a process creates a new node, it looks for dead nodes and cleans them up. This usually happens when you restart a crashed application.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6G22ea/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/269,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/269,iceoryx2,2398491081,269,Inconsistent node list API.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-09T15:15:01Z,2024-07-10T09:57:04Z,"## (Code) Example Of Cumbersome API

The `port_factory::PublishSubscribe` and `port_factory::Event` use the old node callback list approach with result as input argument. Refactor them so that they have the same signature as `Node::list`.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/269/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/270,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/270,iceoryx2,2398568732,270,Merge `Iox2` with `Node`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-09T15:44:18Z,2024-07-10T07:27:00Z,"## Brief feature description

The temporary `Iox2::wait` construct shall be merged with the new `Node`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/270/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/274,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/274,iceoryx2,2400016860,274,Node does not detect itself as alive,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-10T07:49:21Z,2024-07-10T13:26:54Z,"## Required information

**Operating system:**
Linux

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**
When I call `Node::list` all nodes that are created in the same process are not detected as alive.

**Expected result or behaviour:**
I should be alive.

### Background

This is caused by the underlying file lock that does not behave like a mutex lock in linux in one process - only between processes.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/274/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/280,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/280,iceoryx2,2403526797,280,Remove rule surpressions in `clang-tidy` when C++ API stubs are implemented,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-11T15:49:06Z,2024-07-11T15:49:06Z,"## Brief feature description

Several rules are suppressed in the roots `.clang-tidy` file since the C++ API is realized with empty functions. As soon as all functions are implemented, those rule suppression can be removed.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/280/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/281,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/281,iceoryx2,2404224484,281,Configurable log level in benchmarks.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-11T22:12:14Z,2024-07-12T00:39:51Z,"## Brief feature description

Add ability to set trace log level in benchmark.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/281/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/283,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/283,iceoryx2,2404409166,283,generate C++ documentation,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-12T00:23:18Z,2024-07-12T14:39:32Z,"## Brief feature description

Use sphinx, breathe, exhale and doxygen  to generate the API documentation of the C++ binding.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/283/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/286,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/286,iceoryx2,2405254475,286,Create clippy rules for the FFI naming conventions,elBoberido,56729607,Mathias Kraus,,OPEN,2024-07-12T10:26:02Z,2024-07-12T10:26:02Z,"## Brief feature description

The iceoryx2-ffi crate uses a specific naming convention for its types which is targeted towards the limitations of C, e.g. no namespaces.

Clippy rules should be created for all the naming conventions documented in `iceoryx2-ffi/ffi/README.md`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/286/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/287,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/287,iceoryx2,2405476837,287,Mem-leak in `iceoryx2_bb_posix::Directory::contents()` on failure,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-12T12:37:53Z,2024-07-12T13:30:10Z,"## Required information

When the `contents` call fails, it will immediately return with `fail!` and skip the release of the acquired memory `posix::free` for the file names.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/287/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,iceoryx2,2406388529,290,`Publisher::loan_uninit` has unclear behavior,appcypher,20358651,Stephen Akinyemi,,CLOSED,2024-07-12T21:44:17Z,2024-07-18T00:47:24Z,"## (Code) Example Of Cumbersome API

Great project you have here. I'm new to iceoryx and shmem IPC in general but I'm trying to model a simple request-reply mechanism on top of the existing pub-sub communication. I understand it is part of the roadmap but just to have something working in the meantime, I made a simple solution that requires reusing the allocated memory for a sample.

So I tried reusing the same memory segment:

```rs
fn publisher() -> anyhow::Result<()> {
    println!(""Publisher"");

    let node = NodeBuilder::new().create::<zero_copy::Service>()?;
    let service = node
        .service_builder(""test/path"".try_into()?)
        .publish_subscribe::<u64>()
        .max_publishers(1)
        .max_subscribers(1)
        .open_or_create()?;

    let publisher = service.publisher_builder().max_loaned_samples(1).create()?;
    let sample = publisher.loan_uninit()?;
    let _ = sample.write_payload(1234);

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        let sample = publisher.loan_uninit()?;
        sample.send()?;

        println!(""Sent existing"");
    }

    Ok(())
}
```

```rs
fn subscriber() -> anyhow::Result<()> {
    println!(""Subscriber"");

    let node = NodeBuilder::new().create::<zero_copy::Service>()?;
    let service = node
        .service_builder(""test/path"".try_into()?)
        .publish_subscribe::<u64>()
        .max_publishers(1)
        .max_subscribers(1)
        .open_or_create()?;

    let subscriber = service.subscriber_builder().create()?;

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        while let Some(sample) = subscriber.receive()? {
            println!(""Received: {:?}"", sample.payload());
        }
    }

    Ok(())
}
```

I expected the subscriber process to output `Recieved: 1234` repeatedly but instead got: 

```
Received: 1234
Received: 0
Received: 1234
Received: 0
Received: 1234
Received: 0
Received: 1234
Received: 0
...
```

Full code: https://github.com/appcypher/iceoryx2-ipc-test/blob/main/bin/test_pub_loan.rs


## Improvement Suggestion

Tbh, I'm not sure if this is the bug or an expected behavior as I haven't dived too deep into the code.
But it would be nice to have a way to reuse the same loaned memory in a consistent way.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtD8H,iceoryx2,2226405127,290,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-12T21:55:55Z,2024-07-12T21:55:55Z,I should add that I'm on commit `46f8b60`. Running on macOS.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtD8H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtG_0,iceoryx2,2226417652,290,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-12T22:07:58Z,2024-07-12T22:07:58Z,"This is an API bug on our side. We already discussed some solutions but did not find the time to implement them.

`loan_uninit` returns a `SampleMut<MaybeUninit<T>>` and this version should not provide a `send` method, only `SampleMut<T>` should, and this you can acquire with 

```rust
let sample = publisher.loan_uninit()?;
let sample = sample.write_payload(1234); // SampleMut<MaybeUninit<T>> becomes SampleMut<T>
```

What happens behind the scenes here is that:
1. You acquire memory with `let sample = publisher.loan_uninit()?;`
2. The value `1234` is written into the memory position
3. The `SampleMut` is going out of scope and the memory is released
4. In the loop `let sample = publisher.loan_uninit()?;` acquires the same memory again where still the `1234` is written to
5. `sample.send()?;` sends technically uninitialized memory to the subscriber (due to our API bug)
6. In the next iteration you acquire another sample, this piece of memory was never used so you get the zeroed memory from the OS and send it
7. In the meantime, the subscriber printed the sample content, the sample went out of scope on subscriber side and the memory with the content `1234` becomes available again.
8. The publisher loans the memory with the `1234` content again and the game restarts.

> But it would be nice to have a way to reuse the same loaned memory in a consistent way.

This is something we consider currently when designing request response, but this is not always possible. Just think of the use case where one client sends a request to two servers and receives two responses. But for a many client to one server scenario it could work.

But if you build request response on top of our current publish subscribe architecture you will not be able to reuse the received sample and write additional data into it. The reason is that every publisher comes with its own data segment and there are internal checks that should ensure that you do not send samples that do not belong to your data segment.

However, happy news, we are aiming to finish the request-response implementation in September/October!

@appcypher Could you tell us a bit more about your use case? Why do you want to reuse the sample/memory and do not want to acquire a new one?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtG_0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtHB-,iceoryx2,2226417790,290,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-07-12T22:08:07Z,2024-07-12T22:08:07Z,"@appcypher it is not possible to reuse the same memory. There is currently a bug on main which allows to send uninitialized samples. it should actually not be possible to have a `loan_uninit` followed by a `send`. The `write_payload` returns the actual sample to be published.

So your code releases the sample immediately after `write_payload`. The first iteration of the loop gets that release sample and since the memory is not touched, it holds the value you wrote before. The second iteration gets a new sample since the first one seems to be still in use. To be more precise, it will be in the subscriber queue. On the third iteration, the initial sample is again released and the `loan_uninit` gets that sample. The cycle repeats and that's how you get that output.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtHB-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtHjF,iceoryx2,2226419909,290,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-07-12T22:10:43Z,2024-07-12T22:10:43Z,"... oh, your code needs to be changed to this
```rs
    let publisher = service.publisher_builder().max_loaned_samples(1).create()?;

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        let sample = publisher.loan_uninit()?;
        let sample = sample.write_payload(1234);
        sample.send()?;
    }
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EtHjF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Et95x,iceoryx2,2226642545,290,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-13T01:05:50Z,2024-07-13T01:05:50Z,"> So your code releases the sample immediately after write_payload. The first iteration of the loop gets that release sample and since the memory is not touched, it holds the value you wrote before. The second iteration gets a new sample since the first one seems to be still in use. To be more precise, it will be in the subscriber queue. On the third iteration, the initial sample is again released and the loan_uninit gets that sample. The cycle repeats and that's how you get that output.

Thanks for the explanation.

> @appcypher Could you tell us a bit more about your use case? Why do you want to reuse the sample/memory and do not want to acquire a new one?

I thought it would make certain patterns possible. In my case, in trying to implement a contrived request-response communication pattern, I landed on a queue-based solution (there's just one client and one server communicating). The client would write its chunked request to the same in-memory queue (pushing chunks continuously) and the receiver/server would pick it up from there -- sending back some ack. This requires that a publisher holds onto the same memory where it mutates the queue repeatedly. Maybe a kind of sample that can be resent without being owned.

I may be totally off here but I believe no real `send`ing is taking place since the pub-sub processes have access to the same memory and it is zero-copy. So `send` is really just a signalling mechanism.

> However, happy news, we are aiming to finish the request-response implementation in September/October!

Sweet. Can't wait since that is really what I need. I'm willing to build a sub-optimal hack that I can use now until then. 
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Et95x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Euw1x,iceoryx2,2226851185,290,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-07-13T10:36:37Z,2024-07-13T10:36:37Z,"> I thought it would make certain patterns possible. In my case, in trying to implement a contrived request-response communication pattern, I landed on a queue-based solution (there's just one client and one server communicating). The client would write its chunked request to the same in-memory queue (pushing chunks continuously) and the receiver/server would pick it up from there -- sending back some ack. This requires that a publisher holds onto the same memory where it mutates the queue repeatedly. Maybe a kind of sample that can be resent without being owned.
> 
> I may be totally off here but I believe no real `send`ing is taking place since the pub-sub processes have access to the same memory and it is zero-copy. So `send` is really just a signalling mechanism.

Well, this is exactly like iceoryx works. The `loan` call takes memory shared between the processes and `send` adds a pointer to that memory to the queue for the consumer + some bookkeeping, memory synchronization, etc. So you have to loan memory, write data to that memory and then send it. There is also the event messaging pattern  which can be combined with publish-subscribe to notify the consumer about new data in the queue, instead of having the consumer poll the queue.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Euw1x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EvmSi,iceoryx2,2227070114,290,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-13T19:43:07Z,2024-07-13T19:43:07Z,"Thanks again @elBoberido!

How would you suggest one create a request-reponse model today using existing messaging patterns? I want to keep using iceoryx2 as is until the request-response feature lands.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6EvmSi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/290,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FNn_d,iceoryx2,2234941405,290,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-18T00:47:24Z,2024-07-18T00:47:24Z,"Thanks for helping the other day. After running some code today I have a better grasp of how iceoryx2 works. 
I think I know how I can leverage the internal queue system here. I will be closing this issue as the question was really about understanding how to make iceoryx2 work for my use case.

Although, as suggested, it probably makes sense to prevent send on `SampleMut<Service, MaybeUninit<T>, ...>`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FNn_d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/292,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/292,iceoryx2,2407430263,292,Log macros shall not return value,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-14T13:12:09Z,2024-07-14T14:14:33Z,"## Required information

All log macros return the unpacked value in the `when` scenario. This causes a panic when the value contains an error.

This behavior shall only be used in fail. Remove it for all log macros.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/292/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/294,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/294,iceoryx2,2407600187,294,Rename ServiceUUID into ServiceID and use strong type,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-14T21:19:44Z,2024-08-28T17:13:03Z,"## (Code) Example Of Cumbersome API

Currently, the service uuid is a plain `&str` that can cause problems due to its implicit contract that it is a valid file name, does not contain invalid utf-8 characters.
A strong type would guarantee the contract and would remove the `&str`. Furthermore, rename the uuid into service id (it is not an actual uuid.

This uuid shall also be convertible into a FileName.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/294/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/298,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/298,iceoryx2,2409027373,298,'cdylib' and integrationtests leads to warnings and build failures,elBoberido,56729607,Mathias Kraus,,OPEN,2024-07-15T15:29:34Z,2024-07-15T15:29:35Z,"## Brief description

As it turned out `cdylib`s do not play well with integration tests. The `cdylib` is build
with `panic=""abort""` but the tests require `panic=""unwind""`. This results in building the lib
twice if there are integration tests and leads to the following warning and eventually to build failures.

> warning: output filename collision.
> The lib target `iceoryx2_ffi` in package `iceoryx2-ffi v0.3.0 (C:\Users\ekxide\iceoryx2\iceoryx2-ffi\ffi)` has the same output filename as the lib target `iceoryx2_ffi` in package `iceoryx2-ffi v0.3.0 (C:\Users\ekxide\iceoryx2\iceoryx2-ffi\ffi)`.
> Colliding filename is: C:\Users\ekxide\iceoryx2\target\release\deps\iceoryx2_ffi.lib
> The targets should have unique names.
> Consider changing their names to be unique or compiling them separately.
> This may become a hard error in the future; see <https://github.com/rust-lang/cargo/issues/6313>.

## Workaround

Currently the workaround is to have the integrationtests in the module. This would give access to private API though. To circumvent this problem only `pub(super)` shall be used if an API needs to be available in other modules but not `pub(crate)`. With the following folder structure the tests can again only be written as whitebox tests

```
iceoryx2-ffi
  |- ffi
  |    |- src
  |    |    |- api
  |    |    |- tests
  |    |    |- lib.rs
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/298/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/301,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/301,iceoryx2,2413082196,301,Move iceoryx2 cxx addendum headers into iceoryx,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-17T09:11:09Z,2024-07-17T09:11:10Z,"## Brief feature description

In the ffi cxx binding of iceoryx2 are additions that belong into iceoryx_hoofs. They shall be moved there.

See: https://github.com/eclipse-iceoryx/iceoryx/issues/2318","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/301/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/304,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/304,iceoryx2,2416253816,304,Potential dead-lock in `FileDescriptorTests::file_descriptor_set_add_and_remove_works`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-18T12:39:01Z,2024-07-18T12:39:01Z,"## Required information

**Operating system:**
 * Windows latest

**Rust version:**
1.80 (current beta)

**iceoryx2 version:**
`main`

**Observed result or behaviour:**
The tests `FileDescriptorTests::file_descriptor_set_add_and_remove_works` dead-locks even though it does not run concurrently. Happened only once on the CI. This issue shall track the behavior and ensure that this is not a bug in the windows implementation. A possible cause could be the handle translator in the windows platform.

**Expected result or behaviour:**
No deadlock.

**Conditions where it occurred / Performed steps:**
Describe how one can reproduce the bug.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/304/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,iceoryx2,2417517207,305,Publisher does not always follow `UnableToDeliverStrategy::Block` strategy,appcypher,20358651,Stephen Akinyemi,,CLOSED,2024-07-18T22:29:58Z,2024-07-21T17:02:59Z,"## Required information

### Operating system:
 * macOS, Sonoma
 * Darwin 23.5.0 Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000 arm64

### Rust version:
rustc 1.79.0 (129f3b996 2024-06-10)

### Cargo version:
cargo 1.79.0 (ffa9cf99a 2024-06-03)

### iceoryx2 version:
commit `728df35`

### Observed result or behaviour:
Even with `UnableToDeliverStrategy::Block` set, `safe_overflow` disabled and a limited buffer size, a publisher does not always block. For example, it does not block:

- When the publisher process is the first to start with no subscriber process.
- When the last subscriber process is killed before the publisher is done filling the buffer.

The publisher blocks when there is a subscriber present when buffer gets filled. It also **remains blocked** when you remove the last subscriber before it consumes its buffer.

BTW, I made sure `subscriber_max_buffer_size` on publisher side as well.

#### Code

  <details>
    <summary>Expand to See Code</summary>
    
```rust
use std::time::Duration;

use iceoryx2::prelude::*;

fn main() -> anyhow::Result<()> {
    // Read the first argument
    let arg = match std::env::args().nth(1) {
        Some(arg) => arg,
        None => {
            eprintln!(""Usage: test_pub_queue <arg>"");
            std::process::exit(1);
        }
    };

    if arg == ""sub"" {
        subscriber()?;
    } else if arg == ""pub"" {
        publisher()?;
    }

    Ok(())
}

const CYCLE_TIME: Duration = Duration::from_secs(3);
const BUFFER_SIZE: usize = 5;

fn subscriber() -> anyhow::Result<()> {
    println!(""Subscriber"");

    let node = NodeBuilder::new().create::<zero_copy::Service>()?;
    let service = node
        .service_builder(&""test/path"".try_into()?)
        .publish_subscribe::<u64>()
        .max_publishers(1)
        .max_subscribers(1)
        .subscriber_max_buffer_size(BUFFER_SIZE)
        .enable_safe_overflow(false)
        .open_or_create()?;

    let subscriber = service
        .subscriber_builder()
        .create()?;

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        while let Some(sample) = subscriber.receive()? {
            println!(""Received: {:?}"", sample.payload());
        }
    }

    Ok(())
}

fn publisher() -> anyhow::Result<()> {
    println!(""Publisher"");

    let node = NodeBuilder::new().create::<zero_copy::Service>()?;
    let service = node
        .service_builder(&""test/path"".try_into()?)
        .publish_subscribe::<u64>()
        .max_publishers(1)
        .max_subscribers(1)
        .subscriber_max_buffer_size(BUFFER_SIZE)
        .enable_safe_overflow(false)
        .open_or_create()?;

    let publisher = service
        .publisher_builder()
        .unable_to_deliver_strategy(UnableToDeliverStrategy::Block)
        .create()?;

    let mut count = 0;
    while let NodeEvent::Tick = node.wait(CYCLE_TIME / 10) {
        let sample = publisher.loan_uninit()?;
        let sample = sample.write_payload(count);
        sample.send()?;
        println!(""Sent: {}"", count);

        count += 1;
    }

    Ok(())
}
```


```toml
[dependencies]
iceoryx2 = { git = ""https://github.com/eclipse-iceoryx/iceoryx2"", rev = ""728df35"", features = [
    ""logger_tracing"",
] }
```
  </details>


### Expected result or behaviour:
I expected the publisher to always block when buffer is filled ï¼ based on doc found in code: 
https://github.com/eclipse-iceoryx/iceoryx2/blob/728df35da2b99bb47cd5d0221d8f7a7385edf075/iceoryx2/src/service/port_factory/publisher.rs#L73-L81

**Conditions where it occurred / Performed steps:**

- Copy the source into a new cargo project or just clone [this repo](https://github.com/appcypher/iceoryx2-ipc-test/tree/8467f62b7df7bdcace9c3362effba817d4d26942)
- You can run the binary as publisher (`-- pub`) or subscriber (`-- sub`)
- If you start the publisher without a subscriber, the publisher never blocks
- If you kill the last subscriber before the publisher is done filling the buffer, the publisher never blocks","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Fgn7l,iceoryx2,2239921893,305,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-19T18:55:24Z,2024-07-19T18:55:24Z,"You are entirely right with this observation, and I made it behave intentionally like this. 

The problem this feature shall solve is that a subscriber is missing messages since the publisher is too fast and the buffer is full.

But when there is no subscriber, there is no buffer. Maybe the terminology is a bit unclear here, but the buffer mentioned in the documentation was the subscriber's buffer. Every subscriber has its own buffer. 

> It also remains blocked when you remove the last subscriber before it consumes its buffer.

This is a bug and must be solved.

> If you start the publisher without a subscriber, the publisher never blocks

Intended behavior, without a subscriber there is no need to block since there is no buffer.

> If you kill the last subscriber before the publisher is done filling the buffer, the publisher never blocks

Intended behavior.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Fgn7l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FgtOe,iceoryx2,2239943582,305,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-07-19T19:05:24Z,2024-07-19T19:05:24Z,Maybe we could use a similar terminology like with iceoryx1. It's called `ConsumerTooSlowPolicy` on the publisher side and `QueueFullPolicy` on the subscriber side,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FgtOe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Fk6eJ,iceoryx2,2241046409,305,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-20T08:37:52Z,2024-07-20T08:37:52Z,"> But when there is no subscriber, there is no buffer. Maybe the terminology is a bit unclear here, but the buffer mentioned in the documentation was the subscriber's buffer. Every subscriber has its own buffer.

Alright that makes sense. Just after typing the issue, I realised that could be the case.
Is there [going to be] a separate strategy for detecting when no subscriber is present? 
To prevent sending messages to the void?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Fk6eJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FlAK2,iceoryx2,2241069750,305,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-20T10:03:13Z,2024-07-20T10:03:13Z,"I have not yet thought of this use case, but we have already an API available to handle this issue:

```rust
let service = node
    .service_builder(&""My/Funk/ServiceName"".try_into()?)
    .publish_subscribe::<TransmissionData>()
    .open_or_create()?;
if service.dynamic_config().number_of_subscribers() > 0 {
  // send data
}
```

But I admit it is a bit hidden and not as straight forward as the iceoryx1 API with `Publisher::has_subscribers() -> bool`. The reason is that in iceoryx1 the service was somehow hidden inside the `Publisher` but with iceoryx2 it is an explicit object. And this object can tell you a lot about its state via the `static_config()` and `dynamic_config()` methods.

Another approach we want to implement is, that a service emits events whenever its state (see: `dynamic_config()`) changes. So the sending process could wait until the event was signaled that there are subscribers and then starts publishing.
Today you could also realize this but you have to do this explicitly by creating an event service and send a notification when the process has created a subscriber. Events can have multiple event_ids so you could define your event_id for new subscriber, subscriber disconnected, new publisher, and so on.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FlAK2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/305,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FndZW,iceoryx2,2241713750,305,NA,appcypher,20358651,Stephen Akinyemi,,NA,2024-07-21T17:02:58Z,2024-07-21T17:02:58Z,"> I have not yet thought of this use case, but we have already an API available to handle this issue:

This should work in my case.

> Another approach we want to implement is, that a service emits events whenever its state (see: dynamic_config()) changes. So the sending process could wait until the event was signaled that there are subscribers and then starts publishing.

Cool. Will make the API nicer for use cases like this. 

I'm closing this issue since I can make the publisher block if there is no one to deliver to using `service.dynamic_config().number_of_subscribers()` ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6FndZW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/309,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/309,iceoryx2,2421019120,309,Use callback strategy from `Node::list` in `Service::list`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-20T19:04:23Z,2024-07-20T20:22:04Z,"## Brief feature description

The callback strategy between those two is different and we decided for the `Node::list` approach. The `Service::list` has to be adjusted.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/314,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/314,iceoryx2,2423612699,314,Dead lock in `UnableToDeliverStrategy::Block` when Subscriber is removed while Publisher Blocks,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-22T19:24:34Z,2024-07-22T19:24:34Z,"## Required information

See #305 

> The publisher blocks when there is a subscriber present when buffer gets filled. It also remains blocked when you remove the last subscriber before it consumes its buffer.

A publisher shall be unblocked when the subscriber, one which the publisher is waiting on, is removed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/314/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316,iceoryx2,2424913496,316,Zero-Copy IPC between Native Windows Applications and Linux Containers on WSL,yakiro-nvg,846026,"Nguyen, Giang",,OPEN,2024-07-23T11:03:12Z,2024-07-26T09:16:11Z,"Hi,

Is there any support for zero-copy between native Windows applications and Linux containers running on Windows Subsystem for Linux (WSL)?

Use Case: We are using Media Foundation to encode video streams from a camera on a native Windows application. The raw frames are also needed by an AI component running in a Linux container on WSL2. Efficient zero-copy IPC would greatly enhance performance in this scenario.

If there is support, could you provide guidance on how to achieve this? If not, are there any alternative approaches you recommend?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6F03Us,iceoryx2,2245227820,316,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-23T13:16:08Z,2024-07-23T13:16:08Z,"It is not yet supported and also not yet on our Roadmap (oversight), but I will put it there since iceoryx2 should definitely support this use case!

To achieve this you have to share a memory-mapped file between windows and the WSL instance - something that already works. The linux pendant requires a data segment implementation that is based on memory-mapped files instead of posix shared memory and then the communication could be established.

The event messaging-pattern could be implemented via UDP between Windows and WSL, and then everything should work.

I think that everything could be implemented in 2 months, but the sad news is that we focus currently on feature requests from our customers like C/C++/python binding, Request-Response and the ROS2 rmw layer and do not have the capacity to realize it yet.

@yakiro-nvg  When would you need this feature?

> If not, are there any alternative approaches you recommend?

Sadly no.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6F03Us/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6F61e_,iceoryx2,2246793151,316,NA,yakiro-nvg,846026,"Nguyen, Giang",,NA,2024-07-24T03:29:45Z,2024-07-24T03:29:45Z,"Thank you for your response.

Regarding the need for this feature, we can work around the limitation at this time. For example, instead of using Media Foundation on Windows, we can move that component to WSL 2, forward the camera USB port, and use ffmpeg, or write a proxy on WSL 2 that publishes the data to iceoryx2.

However, our use case is quite complex and this feature would be very helpful.

Our product is an ADAS/AD/CDC system for cars. It would be incredibly useful to have zero-copy pub/sub from different OSs using hypervisor primitives. For now, we can proceed with a single OS, but in the future, it would be more flexible if we could relocate ADAS/AD components to different OSs.

Thanks again for your support!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6F61e_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/316,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6GP4-2,iceoryx2,2252312502,316,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-07-26T09:13:23Z,2024-07-26T09:13:23Z,"> Our product is an ADAS/AD/CDC system for cars. It would be incredibly useful to have zero-copy pub/sub from different OSs using hypervisor primitives. For now, we can proceed with a single OS, but in the future, it would be more flexible if we could relocate ADAS/AD components to different OSs.

On our roadmap is also exactly this use case. The thing is that the Windows <-> WSL2 communication is realized completely different than a hypervisor communication between for instance QNX <-> Linux, the typical automotive use case. But from an iceoryx2 user perspective you shouldn't care about those details and iceoryx2 will in the future take care of this completely.

The iceoryx2 hypervisor support should be available beginning of next year but it will be a commercial extension from us (https://ekxide.io) to iceoryx2 and not part of the open-source project. The architecture of iceoryx2 is designed so that extensions can be added on all layers and this will be one of them.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6GP4-2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/318,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/318,iceoryx2,2428484823,318,Cross compilation may corrupt `scandir.c` with bindgen,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-24T21:12:19Z,2024-07-26T12:41:34Z,"## Required information

**Operating system:**
 * Yocto

**Rust version:**
rustc 1.79.0

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**
The `scandir` function returns a `dirent` entry where the `d_name == '\0'` which should never happen.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/318/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/320,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/320,iceoryx2,2431122834,320,`sendmsg` fails with EFAULT in sending unix domain socket file descriptors,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-25T23:28:04Z,2024-07-25T23:28:04Z,"## Required information

**Operating system:**
Linux ubuntu:22.04

**Rust version:**
rustc 1.80.0 (051478957 2024-07-21)

**Cargo version:**
cargo 1.80.0 (376290515 2024-07-16)

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

Everything was build for target `i686-unknown-linux-gnu`

The tests (`:
 * unix_datagram_socket_sending_receiving_with_max_supported_fd_and_credentials_works (introduced with rust 1.71)
 * unix_datagram_socket_sending_receiving_with_single_fd_works (introduced with rust 1.80)

fail in the `posix::sendmsg` call since it emits an `EFAULT`. Those errors where introduced whenever a new rust version was introduced.

**Expected result or behaviour:**
What do you expect to happen?

**Conditions where it occurred / Performed steps:**
```sh
cargo nextest run -p iceoryx2-bb-posix --target i686-unknown-linux-gnu --test unix_datagram_socket_tests sending_receiving_with_single_fd_works
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/320/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/323,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/323,iceoryx2,2433963053,323,Rename `{zero_copy|process_local}::Service` into `{ipc|local}::Service`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-28T14:39:00Z,2024-07-31T20:24:01Z,"## (Code) Example Of Cumbersome API

The current naming is misleading and confusing, rename it to be more precise.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/327,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/327,iceoryx2,2438741124,327,Integrate version check into `StaticStorage` concept,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-07-30T21:51:39Z,2024-07-30T21:51:39Z,"## Brief feature description

Currently, only the dynamic storage performs a version check, but for a first discovery, only the static storage is used. The version number must also be encoded there.

## Detailed information

Encode the static storage version into its name.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/327/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/329,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/329,iceoryx2,2440172249,329,Build the C and C++ language bindings with bazel,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-07-31T14:14:07Z,2024-08-14T20:22:13Z,"## Brief feature description

Bazel is often used for large C++ code bases, especially in a mono repo. In order to help integrating iceoryx2 with the C and C++ bindings in such repos, support to build iceoryx2 with bazel shall be added.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/329/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330,iceoryx2,2440177785,330,Implement streaming operator for CXX types,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-07-31T14:16:38Z,2024-11-30T19:44:08Z,"## Brief feature description

Some types have implemented a streaming operator to allow the user to print details more easily. The iceoryx_hoofs logger shall support them as well.

## Detailed information

 * [x] iceoryx2-ffi/cxx/include/iox2/event_id.hpp
 * [x] iceoryx2-ffi/cxx/include/iox2/static_config.hpp
 * [x] iceoryx2-ffi/cxx/include/iox2/messaging_pattern.hpp
 * [x] iceoryx2-ffi/cxx/include/iox2/attribute_set.hpp
 * [x] check with `rg ""operator<<""` if any class is missing.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Vhx7s,iceoryx2,2508660460,330,NA,sushanthkumar2004,43837277,Sushanth Sathish Kumar,,NA,2024-11-29T21:00:32Z,2024-11-29T21:00:32Z,"Sorry if I missed something, but aren't the streaming operators for the 4 classes above already there? ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Vhx7s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjRK8,iceoryx2,2509050556,330,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-30T16:55:08Z,2024-11-30T16:55:08Z,"@sushanthkumar2004 you are completely right. I guess we can close the issue.

Sorry for misleading issue. If you would like to contribute to iceoryx2 I can take a look for another good first issue if you like.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjRK8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/330,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjuK2,iceoryx2,2509169334,330,NA,sushanthkumar2004,43837277,Sushanth Sathish Kumar,,NA,2024-11-30T19:44:07Z,2024-11-30T19:44:07Z,Yeah I'd love to help out! @elfenpiff ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjuK2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/335,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/335,iceoryx2,2443752188,335,Add `Subscriber::has_samples()`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-02T00:44:27Z,2024-08-02T09:26:54Z,"## Brief feature description

When waiting in some loop context it may be valuable to check if the subscriber has data or not.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/337,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/337,iceoryx2,2443789018,337,When Publisher disconnects before subscriber called receive samples are lost,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-02T01:33:09Z,2024-09-03T10:34:39Z,"## Required information

**Observed result or behaviour:**
When a publisher sends samples and removes itself before the subscriber called `Subscriber::receive` then the samples are lost.

**Expected result or behaviour:**
The `Subscriber::receive` call shall return samples until they are no more.

**Details:**
The problem originates in the `update_connections` call in the Subscriber. Whenever receive is called this method is called internally at first. When the method discovers that a publisher has disconnected it removes the zero copy connection, therefore the subscriber can no longer acquire sample from that connection leading to lost samples.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/337/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/342,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/342,iceoryx2,2445951264,342,Node convinience functions,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-03T02:02:57Z,2024-08-05T07:10:38Z,"## Brief feature description

Implement `id` as a node convenience function to acquire the node ID. Furthermore, `NodeState`, `AliveNode`, and `DeadNode` are not cloneable despite being annotated with `[#derive(Clone)]`; therefore, this must be manually implemented.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/345,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/345,iceoryx2,2449913368,345,Make node debug information accessible,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-06T04:31:07Z,2024-08-07T00:09:10Z,"## Brief feature description

The NodeId already contains the process ID and node creation time, but they are not yet publicly available. Also, the binary name shall be stored in the NodeDetails.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/345/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/347,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/347,iceoryx2,2450893080,347,Fully enable FreeBSD CI,elBoberido,56729607,Mathias Kraus,,OPEN,2024-08-06T13:27:07Z,2024-08-06T13:27:07Z,"## Brief feature description

Due to disk space limitations on the github CI, the FreeBSD jobs do not build the examples, neither in-tree nor out-of-tree.

The root cause needs to be found and the build of the examples need to be re-enabled.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/347/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/348,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/348,iceoryx2,2450907959,348,Base C++ Bindings on a released iceoryx_hoofs,elBoberido,56729607,Mathias Kraus,,OPEN,2024-08-06T13:32:57Z,2024-08-13T13:49:55Z,"## Brief feature description

Currently, the C++ bindings are based on a pre-release tag of iceoryx_hoofs.

## Detailed information

Once iceoryx1 has its v3.0 release, the following tasks should be finished

- [ ] cmake should use the release tag for the automatic dependency resolution with FetchContent
- [x] bazel should switch from `git_repository` to `http_archive` to get the dependency
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/348/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/349,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/349,iceoryx2,2450916162,349,Bazel support for the Rust crates,elBoberido,56729607,Mathias Kraus,,OPEN,2024-08-06T13:36:37Z,2024-10-17T23:14:38Z,"## Brief feature description

Currently `foreign_cc` is used to build the C binding and `cc_library` to build the C++ bindings. In order to fully exhaust the capabilities of bazel, the C binding and therefore the Rust code should be build with `rules_rust`.

## Action Items

- [x] Use `rules_rust`
- [ ] Move everything to a single BUILD.bazel
- [ ] Add tests
- [x] Add feature flags
- [x] Create `GITROOT/FAQ_iceoryx2_devs.md` with the errors that can show up with bazel
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/349/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/350,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/350,iceoryx2,2461989322,350,Extend dynamic config API,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-12T22:21:27Z,2024-08-14T10:47:49Z,"## Brief feature description

To provide further methods to acquire extended details about the services dynamic config.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/350/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/355,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/355,iceoryx2,2468572970,355,Port iceoryx2 to bzlmod,elBoberido,56729607,Mathias Kraus,,OPEN,2024-08-15T17:30:12Z,2024-08-15T17:30:12Z,"## Brief feature description

bzlmod is the now approach for dependency management in bazel and iceoryx should be ported to this new approach.

See also https://bazel.build/external/migration

## References

- https://github.com/eclipse-iceoryx/iceoryx/issues/2325","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/355/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/356,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/356,iceoryx2,2468720019,356,FreeBSD github CI runs out of disk space,elBoberido,56729607,Mathias Kraus,,OPEN,2024-08-15T18:47:53Z,2024-08-15T18:47:53Z,"## Required information

Due to disk space limitations the FreeBSD github CI build skips building the C and C++ bindings.

We need to find a way to reduce the disk space usage and re-enable the C and C++ bindings.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/356/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/360,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/360,iceoryx2,2494457285,360,Benchmark Release Preparations,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-29T13:30:41Z,2024-08-30T17:45:43Z," * The CPU core affinity shall be customizable with command line for all benchmarks
 * Update the benchmark numbers","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/360/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/361,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/361,iceoryx2,2494725949,361,Creation waiting timeout is set to zero,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-08-29T14:53:10Z,2024-09-02T18:31:35Z,"## Required information

**Observed result or behaviour:**
The timeout for the concepts DynamicStorage, SharedMemory and ZeroCopyConnection how long to wait until the initialization is finalized is not set in iceoryx2. This can lead to errors of being unable to connect to another port since the resource is still in initialization.

The StaticStorage requires a timeout as well but here it is not yet implemented. Here a service can be detected of being in a corrupted state.

**Expected result or behaviour:**
The config settings `global.service.creation-timeout` is used for initializing timeouts instead a duration of zero.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/361/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/364,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/364,iceoryx2,2500390350,364,Clean initialization for dynamic storage,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-09-02T08:53:04Z,2024-09-02T09:00:10Z,"## Overview

Currently, the initialization of the dynamic storage is handled by setting the permissions to write only during initialization and then adjust them to read/write after the initialization was completed.
But, this approach only works for linux since FreeBSD, MacOs and Windows seem to be unable to adjust the permissions of the shared memory after it was created.

Every posix shared memory based dynamic storage also contains a version number to ensure that non-compatible versions are unable to connect. If the version number is zero it is also regarded as uninitialized. The problem is, that this is undefined behavior but works most of the time since the operating system zero's the memory before providing it to the application.

A cleaner approach would be to use the permissions again. FreeBSD and MacOs use a trampoline file to point to the correct shared memory, due to the name length limitations. Instead of adjusting the shared memory access rights, one could work with the access rights of the trampoline file which would offer a clean solution.
On Windows we could implement a similar approach.

## Details

 * The actual concept is affected by it but does not require change, since the algorithm is correct but the platform does not support the permission initialization strategy.
 * The platform needs to support permission adjustments of shared memory after the shared memory was created.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/364/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369,iceoryx2,2507014654,369,"Pub/Sub Benchmark, unable to map publishers data segment",elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-09-05T07:34:44Z,2024-10-15T13:35:31Z,"## Required information

## Log Output

```
       0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 20, data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: Permission(448), has
_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
       1 [T] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeBy
teString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value
: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, stati
c_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connection_suffix: Fi
leName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffi
x: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" }
}, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: tr
ue } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowed_sa
mples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 },
event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } }
             | Loaded.
       2 [T] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeBy
teString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value
: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, stati
c_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connection_suffix: Fi
leName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffi
x: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" }
}, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: tr
ue } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowed_sa
mples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 },
event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } }
             | Set as global config.
       3 [T] Directory { path: Path { value: FixedSizeByteString<255> { len: 49, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046"" } }, directory_stream: 0x583104125630,
file_descriptor: FileDescriptor { value: 3, is_owned: false } }
             | created
       4 [T] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, config: Configuration { path: Path { value: Fix
edSizeByteString<255> { len: 49, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } },
prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } } }
             | Created service root directory ""/tmp/iceoryx2/nodes/10481548106459210960760478046"" since it did not exist before.
       5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 67, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_node.details"" } }, acce
ss_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
             | created
       6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 78, data: ""/tmp/iceoryx2/nodes/iox2_10481548106459210960760478046.node_monitor_owner_lock
"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: true, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
             | created
       7 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 67, data: ""/tmp/iceoryx2/nodes/iox2_10481548106459210960760478046.node_monitor"" } }, acce
ss_mode: ReadWrite, permission: Permission(128), has_ownership: true, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
             | created
       8 [T] ""ProcessGuard::new()""
             | create process state ""/tmp/iceoryx2/nodes/iox2_10481548106459210960760478046.node_monitor"" for monitoring
       9 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 107, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_9c8644f5b78c0c7ba767f2
1c6ee2b7e3227ee148.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some
(CreateExclusive) }
             | created
      10 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148.service""
} }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
             | created
      11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_9c8644f5b78c0c7ba767f21c6ee2b7e3227e
e148.dynamic"" } }, size: 987, base_address: 0x75ca6aeb0000, has_ownership: false, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
             | create
      12 [T] ""Service::open()""
             | open service: a2b (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148"" } }))
      13 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 107, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_ed2ee19d017cb42504336d
5a4aa43a814987bd41.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some
(CreateExclusive) }
             | created
      14 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_ed2ee19d017cb42504336d5a4aa43a814987bd41.service""
} }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
             | created
      15 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_ed2ee19d017cb42504336d5a4aa43a814987
bd41.dynamic"" } }, size: 987, base_address: 0x75ca6aeaf000, has_ownership: false, file_descriptor: FileDescriptor { value: 10, is_owned: true }, memory_lock: None }
             | create
      16 [T] ""Service::open()""
             | open service: b2a (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }))
      17 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 95, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_89727713997303446496847337822.p
ublisher_data"" } }, size: 41282, base_address: 0x75ca6aea4000, has_ownership: true, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
      18      [T]          | create
SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_168956358340522989383879498078.publisher_data
"" } }, size: 41282, base_address: 0x75ca6ae99000, has_ownership: true, file_descriptor: FileDescriptor { value: 11, is_owned: true }, memory_lock: None }
             | create
      20        19 [D] [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_16895635834052
2989383879498078_248186557744267945986112887134.connection"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode: None, zero_mem
ory: true, access_mode: ReadWrite, enforce_base_address: None }SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758
453273c6c65cb372831b_89727713997303446496847337822_327414785965834674133079693662.connection"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(4
48), creation_mode: None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
             | Unable to open shared memory since the shared memory does not exist.

             | Unable to open shared memory since the shared memory does not exist.
      21 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 61, data: ""168956358340522989383879498078_248186557744267945986112887134"" } }, supplementa
ry_size: 67, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, prefix: FileName { value: FixedSi
zeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_conn
ection::common::details::SharedManagementData> }, timeout: 500ms, initializer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementD
ata> }
      22 [D]               | Failed to open  since a shared memory with that name does not exists.Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 60, d
ata: ""89727713997303446496847337822_327414785965834674133079693662"" } }, supplementary_size: 67, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeB
yteString<255> { len: 11, data: "".connection"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> {
len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }, timeout: 500ms, initializer: , _phantom_data
: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }

             | Failed to open  since a shared memory with that name does not exists.
      23 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_168956358340522989383879498078_2481
86557744267945986112887134.connection"" } }, size: 227, base_address: 0x75ca6ae98000, has_ownership: true, file_descriptor: FileDescriptor { value: 12, is_owned: true }, memory_lo
ck: None }
             | create
      24 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_89727713997303446496847337822_32741
4785965834674133079693662.connection"" } }, size: 227, base_address: 0x75ca6ae97000, has_ownership: true, file_descriptor: FileDescriptor { value: 13, is_owned: true }, memory_loc
k: None }
             | create
      25 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_168956358340522989383879498078.
publisher_data"" } }, size: 41282, base_address: 0x75ca6ae8c000, has_ownership: false, file_descriptor: FileDescriptor { value: 14, is_owned: true }, memory_lock: None }
         26            [T] | open
SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 95, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_89727713997303446496847337822.publisher_data""
} }, size: 41282, base_address: 0x75ca6ae81000, has_ownership: false, file_descriptor: FileDescriptor { value: 15, is_owned: true }, memory_lock: None }
             | open
      27 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_89727713997303446496847337822_32741
4785965834674133079693662.connection"" } }, size: 227, base_address: 0x75ca6ab70000, has_ownership: false, file_descriptor: FileDescriptor { value: 16, is_owned: true }, memory_lo
ck: None }
             | open
      28 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_168956358340522989383879498078_2481
86557744267945986112887134.connection"" } }, size: 227, base_address: 0x75ca6ab6f000, has_ownership: false, file_descriptor: FileDescriptor { value: 17, is_owned: true }, memory_l
ock: None }
             | open
      29 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_89727713997303446496847337822_32741
4785965834674133079693662.connection"" } }, size: 227, base_address: 0x75ca6ae97000, has_ownership: false, file_descriptor: FileDescriptor { value: 13, is_owned: true }, memory_lo
ck: None }
             | close
      30 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_168956358340522989383879498078_2481
86557744267945986112887134.connection"" } }, size: 227, base_address: 0x75ca6ae98000, has_ownership: false, file_descriptor: FileDescriptor { value: 12, is_owned: true }, memory_l
ock: None }
             | close
      31 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 95, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_89727713997303446496847337822.p
ublisher_data"" } }, size: 41282, base_address: 0x75ca6ae81000, has_ownership: false, file_descriptor: FileDescriptor { value: 15, is_owned: true }, memory_lock: None }
             | close
      32 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_168956358340522989383879498078.
publisher_data"" } }, size: 41282, base_address: 0x75ca6ae8c000, has_ownership: false, file_descriptor: FileDescriptor { value: 14, is_owned: true }, memory_lock: None }
             | close
      33 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_168956358340522989383879498078.
publisher_data"" } }, size: 41282, base_address: 0x75ca6ae99000, has_ownership: true, file_descriptor: FileDescriptor { value: 11, is_owned: true }, memory_lock: None }
             | close
      34 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 95, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_89727713997303446496847337822.p
ublisher_data"" } }, size: 41282, base_address: 0x75ca6aea4000, has_ownership: true, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
             | close
      35 [T]        36 SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_168956358340522989383
879498078.publisher_data"" } }, size: 41282, base_address: 0x75ca6ae99000, has_ownership: true, file_descriptor: FileDescriptor { value: 11, is_owned: true }, memory_lock: None }[
T]  
SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 95, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_6494_89727713997303446496847337822.publisher_data""
} }, size: 41282, base_address: 0x75ca6aea4000, has_ownership: true, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
             | delete
             | delete
      37 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_168956358340522989383879498078_2481
86557744267945986112887134.connection"" } }, size: 227, base_address: 0x75ca6ab6f000, has_ownership: true, file_descriptor: FileDescriptor { value: 17, is_owned: true }, memory_lo
ck: None }
      38 [T]               | closeSharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_89727713997303
446496847337822_327414785965834674133079693662.connection"" } }, size: 227, base_address: 0x75ca6ab70000, has_ownership: true, file_descriptor: FileDescriptor { value: 16, is_owne
d: true }, memory_lock: None }

             | close
      39 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 118, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_168956358340522989383879498078_2481
86557744267945986112887134.connection"" } }, size: 227, base_address: 0x75ca6ab6f000, has_ownership: true, file_descriptor: FileDescriptor { value: 17, is_owned: true }, memory_lo
ck: None }
             | delete
      40 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_89727713997303446496847337822_32741
4785965834674133079693662.connection"" } }, size: 227, base_address: 0x75ca6ab70000, has_ownership: true, file_descriptor: FileDescriptor { value: 16, is_owned: true }, memory_loc
k: None }
             | delete
iceoryx2::service::ipc::Service ::: Iterations: 1, Time: 0.000644707, Latency: 322353 ns, Sample Size: 8192
      41 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 107, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_ed2ee19d017cb42504336d
5a4aa43a814987bd41.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      42 [T] ""File::remove""
             | ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_ed2ee19d017cb42504336d5a4aa43a814987bd41.service_tag""
      43 [T] ""ServiceState::drop()""
             | close and remove service: b2a (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }))
      44 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_ed2ee19d017cb42504336d5a4aa43a814987
bd41.dynamic"" } }, size: 987, base_address: 0x75ca6aeaf000, has_ownership: true, file_descriptor: FileDescriptor { value: 10, is_owned: true }, memory_lock: None }
             | close
      45 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_ed2ee19d017cb42504336d5a4aa43a814987
bd41.dynamic"" } }, size: 987, base_address: 0x75ca6aeaf000, has_ownership: true, file_descriptor: FileDescriptor { value: 10, is_owned: true }, memory_lock: None }
             | delete
      46 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_ed2ee19d017cb42504336d5a4aa43a814987bd41.service""
} }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      47 [T] ""File::remove""
             | ""/tmp/iceoryx2/services/iox2_ed2ee19d017cb42504336d5a4aa43a814987bd41.service""
      48 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 107, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_9c8644f5b78c0c7ba767f2
1c6ee2b7e3227ee148.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      49 [T] ""File::remove""
             | ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148.service_tag""
      50 [T] ""ServiceState::drop()""
             | close and remove service: a2b (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148"" } }))
      51 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_9c8644f5b78c0c7ba767f21c6ee2b7e3227e
e148.dynamic"" } }, size: 987, base_address: 0x75ca6aeb0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
             | close
      52 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_9c8644f5b78c0c7ba767f21c6ee2b7e3227e
e148.dynamic"" } }, size: 987, base_address: 0x75ca6aeb0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
             | delete
      53 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148.service""
} }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      54 [T] ""File::remove""
             | ""/tmp/iceoryx2/services/iox2_9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148.service""
      55 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 67, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_node.details"" } }, acce
ss_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      56 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 67, data: ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_node.details"" } }, acce
ss_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
             | opened
      57 [T] ""File::remove""
             | ""/tmp/iceoryx2/nodes/10481548106459210960760478046/iox2_node.details""
      58 [T] ""Directory::remove""
             | removed ""/tmp/iceoryx2/nodes/10481548106459210960760478046""
      59 [T] ""File::remove""
             | ""/tmp/iceoryx2/nodes/iox2_10481548106459210960760478046.node_monitor""
      60 [T] ""File::remove""
             | ""/tmp/iceoryx2/nodes/iox2_10481548106459210960760478046.node_monitor_owner_lock""
      61 [T] ""Service::open()""
             | open service: a2b (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148"" } }))
      62 [T] ""Service::open()""
             | open service: b2a (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }))
      63 [D] Builder { name: FileName { value: FixedSizeByteString<255> { len: 61, data: ""566976270706792965573263235422_646205090275634464627326196062"" } }, supplementary_size:
67, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, prefix: FileName { value: FixedSizeByteSt
ring<255> { len: 5, data: ""iox2_"" } }, path_hint: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_connect
ion::common::details::SharedManagementData> }, initializer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }
             | Failed to open dynamic storage since the storage does not exist.
      64 [D] Builder { name: FileName { value: FixedSizeByteString<255> { len: 61, data: ""487747867259604281259265628510_725434282173558347434978974046"" } }, supplementary_size:
67, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, prefix: FileName { value: FixedSizeByteSt
ring<255> { len: 5, data: ""iox2_"" } }, path_hint: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_connect
ion::common::details::SharedManagementData> }, initializer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }
             | Failed to open dynamic storage since the storage does not exist.
      65 [D] Builder { name: FileName { value: FixedSizeByteString<255> { len: 35, data: ""6494_566976270706792965573263235422"" } }, supplementary_size: 0, has_ownership: false,
config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, da
ta: ""iox2_"" } }, path_hint: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::shared_memory::common::details::Allocat
orDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>> }, initializer: , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails
<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>> }
             | Failed to open dynamic storage since the storage does not exist.
      66 [D] Builder { name: FileName { value: FixedSizeByteString<255> { len: 35, data: ""6494_566976270706792965573263235422"" } }, size: 0, config: Configuration { zero_memory:
true, dynamic_storage_config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, prefix: FileName { value: FixedSizeByteS
tring<255> { len: 5, data: ""iox2_"" } }, path_hint: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::shared_memory::c
ommon::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>> }, _phantom: PhantomData<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>
, _phantom_storage: PhantomData<iceoryx2_cal::dynamic_storage::process_local::Storage<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::
pool_allocator::PoolAllocator>>> }, timeout: 500ms, has_ownership: true }
             | Unable to open shared memory since a shared memory with that name does not exist.
      67 [D] PublisherConnections { connections: [UnsafeCell { .. }], subscriber_id: UniqueSubscriberId(UniqueSystemId { value: 646205090275634464627326196062, pid: 6494, creati
on_time: Time { clock_type: Realtime, seconds: 1725374656, nanoseconds: 671109769 } }), service_state: ServiceState { static_config: StaticConfig { service_id: ServiceId(Restrict
edFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }), service_name: ServiceName { value: ""b2a"" }, attributes: AttributeSet
([]), messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 1, max_publishers: 1, max_nodes: 20, history_size: 0, subscriber_max_buffer_size: 1, subscriber_max_borr
owed_samples: 2, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_su
bscribe::Header"", size: 32, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""()"", size: 0, alignment: 1 }, payload: TypeDetail { variant: Dynamic, type_n
ame: ""u8"", size: 1, alignment: 1 } } }) }, shared_node: SharedNode { id: NodeId(UniqueSystemId { value: 408511447724438134238484633950, pid: 6494, creation_time: Time { clock_typ
e: Realtime, seconds: 1725374656, nanoseconds: 670613475 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 27, data: ""benchmark-publish-s
ubscribe"" } }, name: NodeName { value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_
path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, ser
vice: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len:
15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName
{ value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".conne
ction"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { l
en: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteSt
ring<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true
, cleanup_dead_nodes_on_destruction: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buf
fer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscr
iber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } } }, monitoring_token: UnsafeCell { .. }, reg
istered_services: RegisteredServices { data: Mutex { data: {ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd
41"" } }): (ContainerHandle { index: 0, container_id: 11 }, 1), ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""9c8644f5b78c0c7ba767f21c6ee2b7e3227
ee148"" } }): (ContainerHandle { index: 0, container_id: 8 }, 1)}, poisoned: false, .. } }, _details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4,
data: ""node"" } }, has_ownership: false, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 50, data: ""/tmp/iceoryx2/nodes/408511447724438134238484633950""
} }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, content
: StorageContent { is_locked: true, value: [] } } }, dynamic_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a8
14987bd41"" } }, data: StorageDetails { data_ptr: 0x583104127a28, layout: Layout { size: 979, align: 8 (1 << 3) } }, has_ownership: false, config: Configuration { suffix: FileName
{ value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path_hint: Path { value: FixedS
izeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> } }, static_storage: Storage { name: FileName { val
ue: FixedSizeByteString<255> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }, has_ownership: false, config: Configuration { path: Path { value: FixedSizeByteStrin
g<255> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteSt
ring<255> { len: 5, data: ""iox2_"" } } }, content: StorageContent { is_locked: true, value: [] } } }, static_config: StaticConfig { max_subscribers: 1, max_publishers: 1, max_node
s: 20, history_size: 0, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 2, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDeta
il { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 32, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""()
"", size: 0, alignment: 1 }, payload: TypeDetail { variant: Dynamic, type_name: ""u8"", size: 1, alignment: 1 } } }, buffer_size: 1 }
             | Unable to establish connection to publisher UniquePublisherId(UniqueSystemId { value: 566976270706792965573263235422, pid: 6494, creation_time: Time { clock_type:
Realtime, seconds: 1725374656, nanoseconds: 671074150 } }) from subscriber UniqueSubscriberId(UniqueSystemId { value: 646205090275634464627326196062, pid: 6494, creation_time: T
ime { clock_type: Realtime, seconds: 1725374656, nanoseconds: 671109769 } }). since the publishers data segment could not be opened.
      68 [W] Subscriber { dynamic_subscriber_handle: Some(ContainerHandle { index: 0, container_id: 9 }), publisher_connections: PublisherConnections { connections: [UnsafeCell
{ .. }], subscriber_id: UniqueSubscriberId(UniqueSystemId { value: 646205090275634464627326196062, pid: 6494, creation_time: Time { clock_type: Realtime, seconds: 1725374656, nan
oseconds: 671109769 } }), service_state: ServiceState { static_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""
ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }), service_name: ServiceName { value: ""b2a"" }, attributes: AttributeSet([]), messaging_pattern: PublishSubscribe(StaticConfig { max_s
ubscribers: 1, max_publishers: 1, max_nodes: 20, history_size: 0, subscriber_max_buffer_size: 1, subscriber_max_borrowed_samples: 2, enable_safe_overflow: true, message_type_deta
ils: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 32, alignment: 8 }, user_header: TypeD
etail { variant: FixedSize, type_name: ""()"", size: 0, alignment: 1 }, payload: TypeDetail { variant: Dynamic, type_name: ""u8"", size: 1, alignment: 1 } } }) }, shared_node: Shared
Node { id: NodeId(UniqueSystemId { value: 408511447724438134238484633950, pid: 6494, creation_time: Time { clock_type: Realtime, seconds: 1725374656, nanoseconds: 670613475 } }),
details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 27, data: ""benchmark-publish-subscribe"" } }, name: NodeName { value: """" }, config: Config {
global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17
, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<2
55> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix
: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic""
} }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connection_suffix: FileName { value: FixedSi
zeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: Fi
xedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix:
FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults: Defau
lts { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max
_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_list
eners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {Se
rviceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }): (ContainerHandle { index: 0, container_id: 11 }, 1),
ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""9c8644f5b78c0c7ba767f21c6ee2b7e3227ee148"" } }): (ContainerHandle { index: 0, container_id: 8 }, 1
)}, poisoned: false, .. } }, _details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, config: Configuration
{ path: Path { value: FixedSizeByteString<255> { len: 50, data: ""/tmp/iceoryx2/nodes/408511447724438134238484633950"" } }, suffix: FileName { value: FixedSizeByteString<255> { len
: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, content: StorageContent { is_locked: true, value: [] } } }, dynamic_s
torage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }, data: StorageDetails { data_ptr: 0x583104127a2
8, layout: Layout { size: 979, align: 8 (1 << 3) } }, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic""
} }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path_hint: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _dat
a: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> } }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""ed2ee19d017cb42
504336d5a4aa43a814987bd41"" } }, has_ownership: false, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix:
FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, content: StorageConte
nt { is_locked: true, value: [] } } }, static_config: StaticConfig { max_subscribers: 1, max_publishers: 1, max_nodes: 20, history_size: 0, subscriber_max_buffer_size: 1, subscri
ber_max_borrowed_samples: 2, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header
::publish_subscribe::Header"", size: 32, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""()"", size: 0, alignment: 1 }, payload: TypeDetail { variant: Dyn
amic, type_name: ""u8"", size: 1, alignment: 1 } } }, buffer_size: 1 }, to_be_removed_connections: UnsafeCell { .. }, static_config: StaticConfig { service_id: ServiceId(Restricted
FileName { value: FixedSizeByteString<64> { len: 40, data: ""ed2ee19d017cb42504336d5a4aa43a814987bd41"" } }), service_name: ServiceName { value: ""b2a"" }, attributes: AttributeSet([
]), messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 1, max_publishers: 1, max_nodes: 20, history_size: 0, subscriber_max_buffer_size: 1, subscriber_max_borrow
ed_samples: 2, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subs
cribe::Header"", size: 32, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""()"", size: 0, alignment: 1 }, payload: TypeDetail { variant: Dynamic, type_nam
e: ""u8"", size: 1, alignment: 1 } } }) }, degration_callback: None, publisher_list_state: UnsafeCell { .. }, _payload: PhantomData<[u8]>, _user_header: PhantomData<()> }
             | Unable to establish connection to new publisher UniquePublisherId(UniqueSystemId { value: 566976270706792965573263235422, pid: 6494, creation_time: Time { clock_t
ype: Realtime, seconds: 1725374656, nanoseconds: 671074150 } }).
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P0euY,iceoryx2,2412899224,369,NA,IpFruion,2003353,Derrick Lockwood,,NA,2024-10-15T04:56:54Z,2024-10-15T04:56:54Z,"I know this was opened a while ago but I am experiencing a similar issue. For extra context I see this occur when I have my subscriber busy looping in debug mode and my publisher sends a singular message and then exits program normally.

If I add a `thread::sleep` to the publisher after sending the dynamic payload (`[u8]`) the subscriber is able to receive the data sent.

Not sure how to deal with this race condition but that seems to be an issue with the subscriber receiving the payload but during that call the publisher cleans up the sent information after being deallocated from the program ending.

In the config I specifically removed node cleanup for construction and destruction of the publisher.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P0euY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P1zEP,iceoryx2,2413244687,369,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-15T08:35:47Z,2024-10-15T08:35:47Z,"@IpFruion Is your sequence somehow like this:

1. Subscriber created
2. Publisher created
3. Publisher sends sample
4. Publisher is removed
5. Subscriber calls receive and receives nothing?

If so then this is something caused by the decentral architecture of iceoryx2. The underlying reason is that the subscriber checks in receive if the service had any updates and if so connects to the new publishers and removes the old ones. But in this case there is nothing to connect since the publisher is gone again.

Currently, we are evaluating multiple approaches to handle this issue. We could add a configurable parameter so that the publisher waits on drop (with a timeout X) until every subscriber has confirmed that it is connected. This would require the subscriber to have a loop that waits for at most X. With the new [WaitSet (Event multiplexing mechanism)]( https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event_multiplexing) this could be handled elegantly by waking up another process.
There will be an example demonstrating this in the near future. 
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P1zEP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/369,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P4csy,iceoryx2,2413939506,369,NA,IpFruion,2003353,Derrick Lockwood,,NA,2024-10-15T13:35:29Z,2024-10-15T13:35:29Z,"@elfenpiff Yes exactly that is the flow I am working with. Thanks for the insight to the issue ð¯. I am working with a kind of mpsc (multiple producers single consumer) kind of situation. My current set of solutions (plus the one you gave)

1. Use the event system to wait until the subscriber has received the message and post the event back to the publisher saying it received the content.
2. Use the `WaitSet` solution
3. The future planned request response work should also help with this.

If you have any others to keep an eye on let me know.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6P4csy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/370,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/370,iceoryx2,2507021127,370,iceoryx2 domain separation example,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-05T07:37:49Z,2024-09-19T15:19:07Z,"## (Code) Example Of Cumbersome API

If users would like to create multiple iceoryx2 domains that do not interact they can utilize the iceoryx2 config. Currently, there is no example that demonstrates how this can be achieved.

## Improvement Suggestion

 * [ ] Create Rust example
 * [ ] Create C example
 * [ ] Create C++ example
 * [ ] Write article
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/370/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/372,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/372,iceoryx2,2509725404,372,Adjust `internal/scripts/generate-coverage.sh` to use source-coverage,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-09-06T07:29:03Z,2024-10-03T07:25:53Z,"## Brief feature description

The current code coverage script is not yet perfectly configured to generate a branch coverage report.
Follow the documentation from:
 * https://doc.rust-lang.org/rustc/instrument-coverage.html
 * https://rustc-dev-guide.rust-lang.org/llvm-coverage-instrumentation.html

To adjust the script so that it generates a coverage report
 * for the whole iceoryx2 workspace
 * for every component individually, via CLI arguments
 * for the C and C++ language bindings.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/372/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/377,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/377,iceoryx2,2522254486,377,TypeSetter in publish_subscribe shall use reference instead of move,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-12T12:25:06Z,2024-09-12T14:00:36Z,"## (Code) Example Of Cumbersome API

The type setter functions move the argument of the payload type instead of using a reference. Change this.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/377/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/381,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/381,iceoryx2,2529177751,381,Colcon package for C/C++ bindings,orecham,8487595,Jeff Ithier,,CLOSED,2024-09-16T18:30:18Z,2024-09-19T18:39:06Z,"## Brief feature description

Add a `package.xml` to enable building `iceoryx2` C or C++ bindings with colcon.

## Detailed information

Enables `iceoryx2` usage in `ros2` projects that are built with `colcon`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/381/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,iceoryx2,2537902117,385,"Minimal pub-sub example failed to launch:  ""Failed to create config since the config file could not be opened.""",nodakai,90726,NODA Kai,nodakai@gmail.com,CLOSED,2024-09-20T05:23:27Z,2024-09-21T03:51:21Z,"## Required information

**Operating system:**
 * Debian trixie-slim container
 * `Linux ------ 5.10.0-20-amd64 #1 SMP Debian 5.10.158-2 (2022-12-13) x86_64 GNU/Linux`

**Rust version:**
`rustc 1.80.1`

**Cargo version:**
`cargo 1.80.1 (376290515 2024-07-16)`

**iceoryx2 version:**
name = ""iceoryx2""
version = ""0.3.0""

**Observed result or behaviour:**
```
root@------:/host# cargo run -- --pub
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/testio2 --pub`
        0 [D] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 20, data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | Unable to open file since it does not exist.
        1 [D] Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""C:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_
              timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true,
               unable_to_deliver_strategy: Block }, event: Event { max_listeners: 1, max_notifiers: 16, event_id_max_value: 32 } } }
              | Failed to create config since the config file could not be opened.
        2 [W] ""Config::get_global_config()""
              | Unable to load default config file, populate config with default values.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }, access_mode: ReadWrite, permission: OWNER_READ | OWNER_WRITE | OWNER_EXEC | OWNER_ALL, has_ownership: false, owner: None, group: None, t
              runcate_size: None, creation_mode: Some(CreateExclusive) }
              | created
        4 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 570, base_address: 0x7fea82b57000, has_ownership: false, file_descriptor: FileDescriptor { value: 4, is_owned: true }
              , memory_lock: None }
              | create
        5 [T] ServiceState { static_config: StaticConfig { uuid: ""b61bd15e8c3ea16146985e960906a8e125156a73"", service_name: ServiceName { value: FixedSizeByteString<255> { len: 19, data: ""My/Funk/ServiceName"" } }, messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 8, max_publishers: 2, history_size: 1, 
              subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, enable_safe_overflow: true, type_name: ""usize"", type_size: 32, type_alignment: 16 }) }, global_config: Config { global: Global { root_path_unix: ""/tmp/iceoryx2/"", root_path_windows: ""C:\\Temp\\iceoryx2\\"", prefix: ""iox2_"", service: Service
               { directory: ""services"", publisher_data_segment_suffix: "".publisher_data"", static_config_storage_suffix: "".service"", dynamic_config_storage_suffix: "".dynamic"", creation_timeout: 500ms, connection_suffix: "".connection"" } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max
              _publishers: 2, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block }, event: Event { max_listeners: 1, max_notifiers: 16, event_id_max_value: 32 } } }, dynamic_storage:
               Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b61bd15e8c3ea16146985e960906a8e125156a73.dynamic"" } }, size: 570, base_address: 0x7fea82b57000, has_ownership: false, file_descriptor: FileDescriptor { value: 4, 
              is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255
              > { len: 40, data: ""b61bd15e8c3ea16146985e960906a8e125156a73"" } }, config: Configuration { path: Path { value: FixedSizeByteString<4096> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByte
              String<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<4096> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b61bd15e8c3ea16146985e960906a8e125156a73.service"" } }), file_descriptor: FileDescriptor { value: 3, is_owned: true }, has_owner
              ship: false }, len: 353 } }
              | open service
        6 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_5332_422444594209983705762963455475712.publisher_data"" } }, size: 1454, base_address: 0x7fea82b56000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: t
              rue }, memory_lock: None }
              | create
```


**Expected result or behaviour:**
https://github.com/eclipse-iceoryx/iceoryx2/tree/v0.3.0?tab=readme-ov-file#publish-subscribe

**Conditions where it occurred / Performed steps:**

It's just the pub and sub samples from the README combined into a single binary

```
use std::time::Duration;
use std::env;

use iceoryx2::prelude::*;

const CYCLE_TIME: Duration = Duration::from_secs(1);

fn pub_main() -> Result<(), Box<dyn std::error::Error>> {
  let service_name = ServiceName::new(""My/Funk/ServiceName"")?;

  let service = zero_copy::Service::new(&service_name)
    .publish_subscribe()
    .open_or_create::<usize>()?;

  let publisher = service.publisher().create()?;

  while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {
    let sample = publisher.loan_uninit()?;
    let sample = sample.write_payload(1234);
    sample.send()?;
  }

  Ok(())
}

fn sub_main() -> Result<(), Box<dyn std::error::Error>> {
  let service_name = ServiceName::new(""My/Funk/ServiceName"")?;

  let service = zero_copy::Service::new(&service_name)
    .publish_subscribe()
    .open_or_create::<usize>()?;

  let subscriber = service.subscriber().create()?;

  while let Iox2Event::Tick = Iox2::wait(CYCLE_TIME) {
    while let Some(sample) = subscriber.receive()? {
      println!(""received: {:?}"", *sample);
    }
  }

  Ok(())
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
  if env::args().skip(1).any(|e| e == ""--pub"") {
    pub_main()
  } else {
    sub_main()
  }
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M3PLP,iceoryx2,2363290319,385,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-09-20T09:34:40Z,2024-09-20T09:34:40Z,"@nodakai, thanks for reporting the issue!

The error message just states that the config file could not be opened, but actually, this is not a problem since the following line states: `Unable to load default config file, populate config with default values.`

When the process is started twice, once with `--pub` and argument and once without so that the subscriber is started, do you observe the `println` with the send sample or not? From the code point of view everything looks fine.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M3PLP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M6cqd,iceoryx2,2364131997,385,NA,nodakai,90726,NODA Kai,nodakai@gmail.com,NA,2024-09-20T16:51:02Z,2024-09-20T16:51:02Z,"Ah so `[D]` are Debug logs, and `[T]` are Trace logs, which can be ignored?

In fact the publisher and the subscriber seem to work fine, except they produce noisy Debug/Trace logs.

Where can I disable logs below Info level? I can't seem to find config items for log levels under https://docs.rs/iceoryx2/latest/iceoryx2/config/index.html 
Maybe I need to enable `logger_log` and configure the `log` crate?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M6cqd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M6fo5,iceoryx2,2364144185,385,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-09-20T16:59:07Z,2024-09-20T16:59:07Z,"You can use these call
```rs
use iceoryx2_bb_log::set_log_level;

set_log_level(iceoryx2_bb_log::LogLevel::Info);
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M6fo5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M7JaM,iceoryx2,2364315276,385,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-09-20T18:38:50Z,2024-09-20T18:38:50Z,"@nodakai you are right, they are currently a bit noisy - some left over from the early days. We will release v0.4 next week and there we will turn down the noisyness of the examples a bit.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M7JaM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/385,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M9shY,iceoryx2,2364983384,385,NA,nodakai,90726,NODA Kai,nodakai@gmail.com,NA,2024-09-21T03:51:20Z,2024-09-21T03:51:20Z,"Thank you both, I guess the tutorial could start with `set_log_level(iceoryx2_bb_log::LogLevel::Info)` unless you're planning a major overhaul","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6M9shY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/386,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/386,iceoryx2,2540508413,386,Add markdown linting check to CI,orecham,8487595,Jeff Ithier,,CLOSED,2024-09-21T21:02:10Z,2024-09-22T20:58:53Z,"## Brief feature description

1. A `.markdownlint.yaml` has been recently added to the repository that can aid with consistency and readability of markdown documentation
2. A CI check for added or edited markdown files will ensures they are according to the defined configuration automatically

## Detailed information

Pros:
1. Ensures all added or modified markdown files are consistent with the rest in the repository and free of syntax or format issues

Cons:
1. Extra effort for contributors in ensuring documentation adheres to the configuration -> can be mitigated with tooling, some suggestions can be added to CONTRIBUTING.md","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/386/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/388,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/388,iceoryx2,2541081684,388,Use `ServiceId` to generate service id (hash) instead of old `create_uuid`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-22T13:27:54Z,2024-09-22T21:39:07Z,"## Required information

The old free function `create_uuid` is used when acquiring service details. We introduced `ServiceId` and should use it here.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/388/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/390,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/390,iceoryx2,2541271449,390,iceoryx WaitSet integration,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-22T21:48:51Z,2024-11-27T09:11:43Z,"## Brief feature description

In iceoryx2 we require an event multiplexing mechanism like the iceoryx waitset. It is connected to `Node::wait()`  and maybe integrated into the `Node` or a separate mechanism.

## ToDo List

 * [x] Implement WaitSet
 * [x] C and C++ bindings
 * [ ] Add example how event based communication can look like

## Terms

 * **tick** - periodic event to produce something
 * **timeout** - periodic deadline event to consume something

## API

```rust
impl WaitSetBuilder {
  fn new() -> Self;
  fn allocator(); // sets custom allocator to now allocate management stuff on the heap
  fn tick(CyclicTimer); // sets tick timeout, whenever wait/run shall emit WaitEvent::Tick
  fn create();
}

pub enum Attachment<'a, T: SynchronousMultiplexing> {
  Notification(&'a T),
  Deadline((&'a T, Duration)),
  Tick(Duration),
};

impl WaitSet {
  fn attach<T>(attachment: Attachment);
  fn run(callback); // runs in a timed loop defined by tick
  fn try_run(callback); // no ticks? tries to gather all events.
}
```

## Preconsiderations

### Details

 * `SynchronousMultiplexing` is a trait implemented by every file descriptor based construct where the file descriptor emits events and can be attached to `select`, `poll` or `epoll`
 * Every struct that implements `SynchronousMultiplexing` shall be attachable
   * Enables the user to implement the trait for sockets and attach them
 * A `Listener` port shall be attachable.
 * `Listener` ports from different `Node`s shall be attachable.
   * When the app acts as a gateway between 2 isolated iceoryx2 domains the gateway shall wake up whenever it receives a message from one of the domains without requiring multiple threads
 * `Node` knows all ports, the first idea was to handle background tasks like `Publisher::update_connections()` in `Node::wait()` to deliver the history to newly connected `Subscriber`s
 * `Publisher::update_connections()` problem, how is the `Subscriber`s history delivered?
   * can be handled with cyclic `Node::wait(CYCLE_TIME)` when the node calls it explicitly for every port - can cause a latency up to `CYCLE_TIME`
   * can be handled explicitly by the user - can be error prone when the user has to call this for every publisher
   * Combine pubsub service with event service with the same name.
     * specify and reserve an `IOX2_SERVICE_UPDATE` id and emit this whenever a `Subscriber` did connect to a service
     * `Node::wait()` fetches event internally and calls `update_connections()` explicitly
     * requires the user to create the event, attach it and to emit the `IOX2_SERVICE_UPDATE` event
* The `WaitSet` shall emit signals to handle CTRL+c, SIGINT, SIGTERM events in the same call as additional events
* `WaitSet` shall provide 3 variants: `try_wait`, `timed_wait`, `blocking_wait` 

### Results
 1. `Node::wait()` is obsolete?
 2. Create `WaitsetBuilder` and provide optionally allocator for custom dynamic memory, otherwise use heap
 3. `Waitset::attach_fn()` must, `Waitset::attach()`
 4. Aim for
 ```rust
while event = waitset::wait() {
  event.call(); // call callback set with `attach_fn()`.
}
```
5. Is independent of the node!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/390/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/392,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/392,iceoryx2,2547174126,392,Noisy logger,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-25T07:25:05Z,2024-09-25T20:56:56Z,"## (Code) Example Of Cumbersome API

All examples are running with log-level trace, which is very noisy and shall be used only in the case of debugging an application.

## Improvement Suggestion

So by default the log-level shall be increased to warn and the `set_log_level` API be exported to become public iceoryx2 API so that a user can go into log-level trace when it is required.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/392/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/394,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/394,iceoryx2,2547233169,394,`SampleMut<MaybeUninit<T>>` offers `send` method,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-09-25T07:48:56Z,2024-09-27T13:01:00Z,"## Required Information

This is an API bug.

For the user it is possible to send an uninitialized sample, this must be prevented by the API otherwise it will induce undefined behavior in another application.

## Example

```rust
// bad
let sample = publisher.loan_uninit()?;
sample.send()?; // must be a compile failure

// good
let mut sample = publisher.loan_uninit()?;
sample.write_payload(123);
let sample = unsafe { sample.assume_init() };
sample.send()?;
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/394/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/396,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/396,iceoryx2,2548431683,396,Add `-l` / `--log-level` option to all examples,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-09-25T16:24:12Z,2024-09-25T20:27:34Z,"## (Code) Example Of Cumbersome API

Sometimes, a bug occurs in an example, or the example is the starting point of a user project, and then something goes wrong. It would be helpful if the user could easily increase the log level by adding a command-line option.

This should be implemented as efficiently as possible (from a lines of code view). This means that the argument parsing should only be one or two lines of additional code in the examples. The logic shall be stored in an external library that does all the logic.
This logic shall be available for all examples in all languages.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/396/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/396,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NkoNL,iceoryx2,2375189323,396,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-09-25T20:27:32Z,2024-09-25T20:27:32Z,"@elfenpiff I just remember that I introduced a `log_level_from_env_or(LogLevel)` function in iceoryx1.

We could also do this for iceoryx2 and just set an `IOX2_LOG_LEVEL=trace` environment variable in out bashrc. With this, we would still have the detailed log by default and the examples would have a less noisy by default.

It would also require less code to be added to the examples","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NkoNL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/398,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/398,iceoryx2,2549007053,398,Expose function to set log level in C/C++ bindings,orecham,8487595,Jeff Ithier,,OPEN,2024-09-25T21:11:01Z,2024-09-26T23:17:34Z,"## Brief feature description

1. [x] Enable the ability to set the `iceoryx2` log level from C/C++
1. [ ] Additionally, set `iceoryx` log level within the same calls
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/398/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/398,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Nt4VT,iceoryx2,2377614675,398,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-09-26T18:06:10Z,2024-09-26T18:06:10Z,@orecham @elfenpiff I guess it's too late to propose to also change the iceoryx1 log level with the same call?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Nt4VT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/398,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NvwOY,iceoryx2,2378105752,398,NA,orecham,8487595,Jeff Ithier,,NA,2024-09-26T23:17:18Z,2024-09-26T23:17:18Z,"> @orecham @elfenpiff I guess it's too late to propose to also change the iceoryx1 log level with the same call?

@elBoberido Re-opened and added this as an additional task. Will get it next time I change something.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6NvwOY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/400,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/400,iceoryx2,2553338316,400,Add `cargo audit` CI target,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-09-27T16:42:13Z,2024-09-27T21:29:25Z,"## Brief feature description

Can be installed with `cargo install cargo-audit` and run with `cargo audit`.

It lists all known security advisories/warnings from all dependencies. The goal would be that iceorx2 does not depend on any package that has known security issues.

A CI target shall verify it. The problem is that a security issue of an unmaintained package may cause a lot of effort on our side to fix it. So it should be an optional target that does not block the CI but informs us so that we can take action.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/400/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/400,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6N2JfQ,iceoryx2,2379782096,400,NA,orecham,8487595,Jeff Ithier,,NA,2024-09-27T17:51:15Z,2024-09-27T17:51:15Z,"If we want to add this, it should be a nightly job.

Having a completely unrelated MR blocked because of a newly failing audit of an unrelate dependency would be frustrating.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6N2JfQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/400,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6N3S7Q,iceoryx2,2380082896,400,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-09-27T21:29:25Z,2024-09-27T21:29:25Z,In theory github will warn us. But I'm not sure if it needs to be enabled somewhere. At least I once got a warning for `iceray`.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6N3S7Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/401,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/401,iceoryx2,2553346671,401,Lock-free atomics on 32-bit architectures,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-09-27T16:47:47Z,2024-09-27T18:42:53Z,"## Brief feature description

Currently, on 32-bit architectures, atomics with a lock are used for 64 bit data types. This is in general not required since all common 32-bit architectures support 8 byte CAS operation.

The atomics with locks should be replaced by the builtin atomics.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/401/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/402,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/402,iceoryx2,2553382655,402,Interoperability between 32-bit and 64-bit applications.,elBoberido,56729607,Mathias Kraus,,OPEN,2024-09-27T17:10:39Z,2024-09-27T17:10:39Z,"## Brief feature description

Having interoperability between 32-bit and 64-bit applications would help porting legacy application to 64-bit by opening the path to port one application at a time and keep the system running.

Additionally, there are SoCs with 32-bit realtime cores and 64-bit performance cores. An interoperability between 32-bit and 64-bit application is a precondition for zero-copy between those cores.

The goal is to get iceoryx2 running on the [Kria KR260 Robotics Starter Kit](https://www.amd.com/en/products/system-on-modules/kria/k26/kr260-robotics-starter-kit.html)

## Detailed information

Due to differences in the alignment of 64-bit PODs on 32-bit architectures compared to 64-bit architectures, it must be ensured that all data structures have the same data layout. With C++ and GCC this can be done via the `-malign-double` flag, which ensures that the alignment of 64-bit PODs on 32-bit architectures matches the alignment of the 64-bit architectures.

If Rust does not support such a compiler flag, all 64-bit data structures must have an explicit alignment to 8 bytes.

Additionally, POSIX data structures like Â´sem_tÂ´ have a different size on 32-bit than on 64-bit. These structures cannot be used in shared memory and need an replacement. On Linux, a futex based solution can be used and on Windows a similar approach with `WaitOnAddress` is feasible. Operating systems which do not support such a mechanism, can either use a spin based solution or a completely different concept which does not rely on such a data structure being placed into the shared memory.

## References

- https://github.com/eclipse-iceoryx/iceoryx/blob/main/doc/website/advanced/iceoray-on-32-bit.md
- https://github.com/eclipse-iceoryx/iceoryx/issues/2301","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/402/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/409,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/409,iceoryx2,2554531227,409,Failing to retrieve search paths in `iox2` terminates execution,orecham,8487595,Jeff Ithier,,CLOSED,2024-09-28T21:49:19Z,2024-09-28T23:31:16Z,"## Required information

**Operating system:** macOS 15.0; Darwin Kernel Version 24.0.

**Rust version:** rustc 1.81

**Cargo version:** rustc 1.81.

**iceoryx2 version:** 0.4.0

**Detailed log output:**

```
$iox2 --paths
Failed to list search paths: Failed to list search paths
```

**Observed result or behaviour:**

Error message as per above.

**Expected result or behaviour:**

Search paths that were able to be retrieved are listed.

**Conditions where it occurred / Performed steps:**

```rust
$ cargo install iceoryx2-cli
$ iox2 --paths
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/409/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/412,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/412,iceoryx2,2554572201,412,Factor out commonalities of CLI setup into lib,orecham,8487595,Jeff Ithier,,OPEN,2024-09-29T00:23:24Z,2024-09-29T00:35:07Z,"## Improvement Suggestion

1. Currently `iox2` CLIs must set up a bunch of boilerplate
2. Factoring out the common parts could reduce manual boilerplate allow for uniformity across CLI implementations
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/412/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,iceoryx2,2554574463,413,CLI for participating with `iox2` communication from the terminal,orecham,8487595,Jeff Ithier,,OPEN,2024-09-29T00:30:29Z,2025-01-09T17:32:23Z,"## Brief feature description

Make it possible to publish, subscribe, notify, listen (request, respond, etc.) to iceoryx2 services directly from the CLI, e.g.

```console
iox2 service publish <TOPIC> <PAYLOAD>
iox2 service subscribe <TOPIC>
iox2 service listen <TOPIC>
iox2 service notify <TOPIC>
// etc.
```

## Detailed information

Nice to have:
1. Make it possible to plug in custom logic for working with payloads, e.g.
    1. Publish data from a file
    2. Display image payloads from subscribers directly in the terminal","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UkDW9,iceoryx2,2492478909,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-11-21T22:28:37Z,2024-11-21T22:28:37Z,"Hi @orecham, I'm currently working on this feature. First, I'm trying to implement the publish subcommand. I'm using the âpublish_subscribe_subscriberâ example as a test endpoint. As I understand it, in order to communicate with the subscriber, I need to define a service with a specific payload size. Can I get the size of this payload and create a new service with this payload size at runtime? (Because at compile time, I don't know the payload size and the subscriber needs a payload of size)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UkDW9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UoLPa,iceoryx2,2493559770,413,NA,orecham,8487595,Jeff Ithier,,NA,2024-11-22T11:41:26Z,2024-11-22T11:41:26Z,"@brosier01 

Hmm, this is a tough problem to solve - something I completely overlooked when imagining this feature, my mistake.

As a first step, I guess the CLI could be made to only use [the `[u8]` payload type](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/rust/publish_subscribe_dynamic_data/publisher.rs#L23) so that concrete types aren't needed. We are currently working on updating `iceoryx2` so that the [`maximum_slice_len`](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/rust/publish_subscribe_dynamic_data/publisher.rs#L29) does not need to be provided when defining services of type `[u8]`. This however would mean that applications would also need to use the `[u8]` payload type for the CLI to connect to it, which is not ideal for many reasons (usability, safety, etc.). Proceeding with this first though would allow for focusing on the other (maybe simpler) aspects of implementing the CLI.

To get the CLI to work with services with [concrete types](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/rust/publish_subscribe/publisher.rs#L25), two ideas come to mind (but I think they might definitely need some more thought):

1. Add functionality for `iceoryx2` applications to compile type definitions into a separate shared library
    1. The CLI would need to have a way to find these libraries to get the type definitions
        1. Ideally this would be automatic, but could be done manually by passing an argument as a stepping stone
1. Use something like [`schemars`](https://crates.io/crates/schemars) (and `serde`?) to store type descriptions along with services?
    1. Not sure how feasible it is, but could also be an interesting option
    2. Not sure if this removes the requirement of using `[u8]` payload types though

Let me know if you have any other ideas. I am not yet super confident that one of these two options would be optimal. Might need some discussion before we work out what makes the most sense.

> Can I get the size of this payload and create a new service with this payload size at runtime?

Until we remove the `max_slice_len` requirement, you could maybe just make the size the actual size of the payload.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UoLPa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UxKR7,iceoryx2,2495915131,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-24T10:00:58Z,2024-11-24T10:00:58Z,"@brosier01 First of all, thanks for taking care of the CLI it is much appreciated!

And here some constructive help for your challenge.

First of all, you have to acquire the type details for the payload and the user header that are stored in the static service details of the service. To do this, you first need to acquire the static service details with:

```rust
let details = ipc::Service::details(
    &""My/Funk/ServiceName"".try_into()?,
    Config::global_config(),
    MessagingPattern::PublishSubscribe,
).unwrap().unwrap();
```

When you have it you need to extract the static details for publish subscribe
```rust
let user_header;
let payload;
if let iceoryx2::service::static_config::messaging_pattern::MessagingPattern::PublishSubscribe(
    config,
) = details.static_details.messaging_pattern()
{
    user_header = config.message_type_details().user_header.clone();
    payload = config.message_type_details().payload.clone();

    println!(""user header: {:?}"", user_header);
    println!(""payload: {:?}"", payload);
} else {
    panic!()
}
```

With those details you can now define a service with custom type details. This is not safe since you could mix things up here and induce undefined behavior or a crash in another application. It is also internal API, but we use the same approach for our internal tooling so I think the CLI can be an exception too. To be able to override the payload and user header type details you need to define the `[CustomPayloadMarker]` as payload type and `CustomHeaderMarker` as user header type.

```rust
use iceoryx2::service::builder::publish_subscribe::{CustomHeaderMarker, CustomPayloadMarker};

let expert_service = unsafe {
    node.service_builder(&""My/Funk/ServiceName"".try_into()?)
        .publish_subscribe::<[CustomPayloadMarker]>()
        .user_header::<CustomHeaderMarker>()
        .__internal_set_payload_type_details(&payload)
        .__internal_set_user_header_type_details(&user_header)
        .open()
        .unwrap();
};
```

The subscriber and the publisher port now behave like if they would have been created with `[u8]` payload type and you are able to send and receive any arbitrary data.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UxKR7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Va17N,iceoryx2,2506841805,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-11-28T23:10:23Z,2024-11-28T23:10:23Z,"Hi @elfenpiff, I've tried to implement your code in my CLI tool but my current application crashes. Here is the code : 

```rust
let node = NodeBuilder::new().create::<ipc::Service>()?;

let expert_service = unsafe {
        node.service_builder(&""My/Funk/ServiceName"".try_into()?)
        .publish_subscribe::<[CustomPayloadMarker]>()
            .user_header::<CustomHeaderMarker>()
            .__internal_set_payload_type_details(&payload)
            .__internal_set_user_header_type_details(&user_header)
            .open()
            .unwrap();
    };
```

As I understand it, it's the service_builder method that's causing the error.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Va17N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VdVsr,iceoryx2,2507496235,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-29T10:15:14Z,2024-11-29T10:15:14Z,@brosier01 can you please set the log level to tracing `set_log_level(LogLevel::Trace)` and add the full output that leads to the crash?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VdVsr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Vi8N-,iceoryx2,2508964734,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-11-30T13:34:11Z,2024-11-30T13:34:11Z,"[crash_log.txt](https://github.com/user-attachments/files/17965548/crash_log.txt)
@elfenpiff Here is the complete output leading to the crash with set_log_level(LogLevel::Trace) enabled.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Vi8N-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjNYR,iceoryx2,2509035025,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-30T16:46:53Z,2024-11-30T16:46:53Z,"@brosier01 In the output line 18 shows the problem:

```
Unable to open publish subscribe service since the service offers the type 
""MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 32, alignment: 8 } ... 
which is not compatible to the requested type 
""MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 24, alignment: 8 } ..."".
```

For whatever reason the `Header`, not the user header, has for one variant a size of 24 and for the other a size of 32. The header which is used for publish subscribe is located in `iceoryx2/src/service/header/publish_subscribe.rs` and has the size 24 with alignment 8.

But I have no idea why this does not work on your side - do you have maybe anywhere a typo? I will look in parallel if the implementation is maybe somewhere screwed up.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjNYR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjNko,iceoryx2,2509035816,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-30T16:49:40Z,2024-11-30T16:49:40Z,"@brosier01 We have an internal introspection client and there we use this code snippet successfully:

```rust
if let iceoryx2::service::static_config::messaging_pattern::MessagingPattern::PublishSubscribe(pub_sub_details) = pub_sub_details.static_details.messaging_pattern() {
   let message_type = pub_sub_details.message_type_details();

   subscriber = unsafe { node
       .service_builder(name)
       .publish_subscribe::<[CustomPayloadMarker]>()
       .user_header::<CustomHeaderMarker>()
       .__internal_set_payload_type_details(&message_type.payload)
       .__internal_set_user_header_type_details(&message_type.user_header)
       .open()
       .unwrap();
}
```

Is it possible that you mix different iceoryx2 versions?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VjNko/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1xMM,iceoryx2,2513900300,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-12-03T08:52:01Z,2024-12-03T08:52:01Z,"@elfenpiff applogies, I mixed up the versions of iceoryx2. Now it works fine on my side. From this expert service can I create a new pubisher like the publisher.rs in the examples?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1xMM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V15CR,iceoryx2,2513932433,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-03T09:06:37Z,2024-12-03T09:06:37Z,"@brosier01 Yes you can create both ports when you have opened/created a service like I described above. 
FYI: in the previous example the variable name is wrong, it should be `service` instead of `subscriber`

```rust
   service = unsafe { node // service not subscriber
       .service_builder(name)
       .publish_subscribe::<[CustomPayloadMarker]>()
       .user_header::<CustomHeaderMarker>()
       .__internal_set_payload_type_details(&message_type.payload)
       .__internal_set_user_header_type_details(&message_type.user_header)
       .open()
       .unwrap();
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V15CR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WG8jd,iceoryx2,2518403293,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-12-04T19:39:02Z,2024-12-04T19:39:02Z,"Hi @elfenpiff, I'm trying to send data from a publisher : 
```rust
let service = unsafe { node
            .service_builder(&""My/Funk/ServiceName"".try_into()?)
            .publish_subscribe::<[CustomPayloadMarker]>()
            .user_header::<CustomHeaderMarker>()
            .__internal_set_payload_type_details(&payload)
            .__internal_set_user_header_type_details(&user_header)
            .open().unwrap()
        };

let publisher = service.publisher_builder().create().unwrap();

let sample = unsafe {publisher.loan_custom_payload(1)?};
```

How can I write my data into my payload and send it ?

Sorry I'm a beginner with Iceoryx2","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WG8jd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WOOc4,iceoryx2,2520311608,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-05T13:20:55Z,2024-12-05T13:20:55Z,"@brosier01 

> Sorry I'm a beginner with Iceoryx2

Don't feel sorry. We are here to help you - this is the beauty of an open-source community :) 

> How can I write my data into my payload and send it ?

When you call `loan_custom_payload(N)` you get `N` times the size of the `payload`. So assume your payload has a size of 4 and `N` is 2 you get 8 bytes since it is handled like a slice.

Let's assume your data type is `Fuu` you could write the data like:
```rust
unsafe { (sample.payload_mut()[0].as_mut_ptr() as *mut Fuu).write(Fuu::new()) };
```

If you want to write arbitrary bytes into it that were provided as arguments from the console you can do it like:
```rust
for n in 0..payload.size { // unsure if it is really payload.size, but you require the type size of the payload
  unsafe { (sample.payload_mut()[n].as_mut_ptr() as *mut u8).write(123) };
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WOOc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WRfkx,iceoryx2,2521168177,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-12-05T18:52:01Z,2024-12-05T18:52:01Z,"Hi @elfenpiff, I'm currently experiencing the following trace when I run this code : 

```rust
let publisher = service.publisher_builder().create().unwrap();
```

       47 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 96, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_56780_8299710088
              3668424327209999820.publisher_data"" } }, size: 1970, base_address: 0x7e6ab5dd1000, has_ownership: true, file_descriptor: FileDescriptor { value:
               7, is_owned: true }, memory_lock: None }
              | create
       48 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_82997100
              883668424327209999820_96302794734962440936158699768.connection"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permissi
              on(448), creation_mode: None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       49 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 59, data: ""82997100883668424327209999820_96302794734962440936158699768
              "" } }, supplementary_size: 113, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 11, data:
               "".connection"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255>
               { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }, timeout
              : 500ms, initializer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }
              | Failed to open  since a shared memory with that name does not exists.
       50 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_829971008836684
              24327209999820_96302794734962440936158699768.connection"" } }, size: 273, base_address: 0x7e6ab5dd0000, has_ownership: true, file_descriptor: Fil
              eDescriptor { value: 9, is_owned: true }, memory_lock: None }
              | create

What is the meaning of â[D]â ? I suppose it means failure ?
Do you have any idea of the origin of these failures ?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WRfkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WT6ys,iceoryx2,2521803948,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-06T00:23:13Z,2024-12-06T00:23:13Z,"@brosier01 

Those failures are not a problem. `[T]` = trace log output, `[D]` debug, `[I]` info, `[W]` warning, `[E]` error, `[F]` fatal last log output before a crash.

In this case it just means that a specific shared memory could not be opened but iceoryx2 could handle it by creating it and then open it.
`[D]` is always emitted when a function returns a `Result` with an error.

For the user only are only warnings and errors interesting. Just add
```rust
set_log_level(LogLevel::Warn);
```
at the top of your program and the log messages vanishes.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6WT6ys/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Wvk1g,iceoryx2,2529054048,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-12-09T18:37:02Z,2024-12-09T18:37:02Z,"@elfenpiff, At the moment, communication between my CLI publisher and my example subscriber is not working. I think it's because of the specific shared memory that couldn't be opened. Do you have any debugging tips to share with me (debugging tool etc...)? Do you have a tip for understanding low-level middleware functionality :) ?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Wvk1g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6W_RGJ,iceoryx2,2533167497,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-10T23:08:25Z,2024-12-10T23:08:25Z,"@brosier01 I think the problem is that your subscriber is waiting for messages and the publisher is being created, sends out the message and then destroys itself - making it undetectable for the subscriber since it is happening so fast.
So could you please do the following:
1. start the subscriber and call in an infinite loop `receive`
2. create the publisher, send the sample and then wait a second

Do you now receive the sample on subscriber side? If so, I need to add a little something extra to the API so that publisher blocks until the subscriber has confirmed the connection.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6W_RGJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XPmNj,iceoryx2,2537448291,413,NA,brosier01,71630425,Bruce Rosier,,NA,2024-12-12T00:01:41Z,2024-12-12T00:01:41Z,"@elfenpiff you're right! After a one-second wait, the subscriber received the data.
Another point for this CLI tool: did I need to know the payload data structure ? IIn my case, I'm sending the TransmissionData data structure, which is composed of {i32, i32, f64}. With the CLI tool iox-service details, I can obtain information on the payload : 

payload: (
                variant: FixedSize,
                type_name: ""examples_common::transmission_data::TransmissionData"",
                size: 16,
                alignment: 8,
)

But I still don't know how to fill my payload.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XPmNj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XclQB,iceoryx2,2540852225,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-13T08:23:10Z,2024-12-13T08:23:10Z,"@brosier01 This is no longer your problem, but the user has to solve it. You already have ensured that the size and alignment fits and now the user has to fill the sample. My idea was that the user either provides a binary stream so that the cli could be handled somehow like this - via a unix pipe

```sh
cat /dev/some_device | iox2 service publish some_topic
```

Or that the user can provide the bytes explicitly as hex codes like
```sh
iox2 service publish --hex 0xab 0x12 0x32 0x44 ...
```

For the unix pipe approach, you fill the sample until it is full and send it out, for the hex code approach you have to check if the correct amount of bytes was provided and then send it out.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XclQB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZiY2S,iceoryx2,2575928722,413,NA,brosier01,71630425,Bruce Rosier,,NA,2025-01-07T18:07:30Z,2025-01-07T18:07:30Z,@elfenpiff does the hex option mean it has several payload formats ? What is your vision? What formats do I need to implement ?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZiY2S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zptp2,iceoryx2,2577848950,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-08T14:45:04Z,2025-01-08T14:45:04Z,"@brosier01 no, it is still strongly typed. But the hex approach is the only possible way to send any data format via command line, except the piping approach.

So the underlying publisher would just translate the hex code into byte code, copies it directly into the sample and on the other side it can be interpreted as an int or struct. The cli user is then responsible for providing a correct hex format.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zptp2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zqv-U,iceoryx2,2578120596,413,NA,brosier01,71630425,Bruce Rosier,,NA,2025-01-08T16:36:24Z,2025-01-08T16:36:24Z,"If hex is the only option. Is the cli ""--hex"" option mandatory ?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zqv-U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zq4R9,iceoryx2,2578154621,413,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-08T16:51:28Z,2025-01-08T16:51:28Z,"@brosier01 I think I was a bit too rigorous with my statement: ""is the only possible way"". @orecham made me aware that it is absolutely reasonable to provide json bytes and combine this with serde to publish data. It is a pain to handle this in the cli but for some minimalistic use cases this is absolutely valid. And in combination with pipes it is also easy to use, when doing things like `cat some_data.json | iox service publish some_topic`.

So please keep the `--hex` option.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zq4R9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/413,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZuSt0,iceoryx2,2579049332,413,NA,orecham,8487595,Jeff Ithier,,NA,2025-01-09T02:25:00Z,2025-01-09T02:25:00Z,"@brosier01 @elfenpiff 

For completion, the idea I was considering was supporting functionality similar to what is available in ROS 2 (as in example [found here](https://roboticsbackend.com/ros2-topic-cmd-line-tool-debug-ros2-topics-from-the-terminal/#ros2_topic_pub_%E2%80%93_Publish_to_a_topic_from_the_terminal)):

```
$ ros2 topic pub -r 10 /greetings example_interfaces/msg/String ""{data: 'Hello from terminal'}""
publisher: beginning loop
publishing #1: example_interfaces.msg.String(data='Hello from terminal')

publishing #2: example_interfaces.msg.String(data='Hello from terminal')

...
```

This is the direction I was thinking in with my [previous comment](https://github.com/eclipse-iceoryx/iceoryx2/issues/413#issuecomment-2493559770). The benefit of this is that it could open up avenues for users to quickly interact with a running system from the CLI. The scenario I have in mind is a developer plugging their laptop into the running system for debugging / testing.

This functionality is more complex to implement than sending the (unchecked) hex bytes though, since the CLI would need a way to find the message definition. For the first PR, feel free to choose just one of the possibilities (whatever is easiest or most interesting).","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZuSt0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414,iceoryx2,2554575458,414,CLI for introspecting memory usage from the terminal,orecham,8487595,Jeff Ithier,,OPEN,2024-09-29T00:33:36Z,2024-10-29T17:22:54Z,"## Brief feature description

Make it possible to fetch statistics related to memory usage of an `iox2` system from the CLI

## Detailed information

Nice to haves:
1. Memory usage of allocated memory per-service (max samples, used samples)
2. Memory usage of entire `iox2` system (how many storages? what size are they and how much is in use?)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QQ8L6,iceoryx2,2420359930,414,NA,zmostafa,24865512,Ziad Mostafa,mohammedziad.badr@gmail.com,NA,2024-10-17T19:26:12Z,2024-10-17T19:26:12Z,"@orecham dou have a sample for how the output shall look like? 
also, to help me kick off, this will be an aggregation of the data found under `/tmp/iceoryx2/.../iox2_node.details` for each running node/service? or is there other sources to look for for getting this data?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QQ8L6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QSWWX,iceoryx2,2420729239,414,NA,orecham,8487595,Jeff Ithier,,NA,2024-10-17T22:29:23Z,2024-10-17T22:29:23Z,"@zmostafa This one might be a little bit challenging, but if you are willing to dive into the internals a little bit, it should be OK ð .

I am not extremely familiar with that corner of the code base, but at a high level, I think something like the following would be required (needs to be verified):

1. Add functionality to the `ShmAllocator` trait to track usage in addition to their capacity
    1. Thread-safety needs to be considered here, an atomic for the usage metric should be sufficient I think
    2. Maintaining the usage metric would also add (small) overhead, so maybe it should also be behind an opt-in feature flag or something to allow users to choose to run with or without this additional overhead
4. Add functionality to the `DynamicStorage` trait to retrieve this usage and capacity via the used `ShmAllocator`
5. Add functionality to `ServiceState` and `NodeState` structs to retrieve the usage and capacity of the underlying `DynamicStorage` used for their data
    1. It should be possible for a process accessing the states with read-only access to see the metrics so they would need to be stored in the storage somehow

Then in the CLI:

1. List all services/nodes
2. Retrieve their capacity and usage
3. Pretty print these metrics per-service, maybe also % usage (e.g. `iox2 memory show âservices`)
3. Pretty print these metrics per-node, maybe also % usage (e.g. `iox2 memory show ânodes`)
5. Optional: Pretty print the total memory capacity reserved for iceoryx2 and the usage (e.g. `iox2 memory show âtotal`)
6. Print all 3-5 if no flags specified (e.g. `iox2 memory show`)
7. Optional: If you are feeling adventurous, launching a terminal ui (e.g. with `iox2 memory watch`) to monitor this live could be cool

If you have different ideas feel free to take some creative liberties. Also, you donât need to do everything at once, could start with e.g. only showing memory used by services.

@elfenpiff @elBoberido Could you provide some additional pointers / point out any oversights.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QSWWX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/414,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RulT3,iceoryx2,2444907767,414,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-29T17:22:53Z,2024-10-29T17:22:53Z,"@orecham I'm also not yet that familiar with that part and we need to wait for input from @elfenpiff 

cc @zmostafa ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RulT3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,iceoryx2,2555186568,416,Android support,elBoberido,56729607,Mathias Kraus,,OPEN,2024-09-29T22:09:42Z,2025-02-15T19:43:27Z,"## Brief feature description

Supporting Android would increase our user base even more. It is also widely used in infotainments systems in the automotive world.

## Detailed information

For now, this issue shall just act as a place where interesting information regarding the Android port can be gathered.

## References

- [Gradle - Plugin](https://plugins.gradle.org/plugin/io.github.andrefigas.rustjni)
- [Rust JNI](https://github.com/andrefigas/RustJNI)
- [UniFFI - a multi-language bindings generator for Rust](https://github.com/mozilla/uniffi-rs)
  - might also be interesting for Python, Golang, C# and Swift
- [Rust Android Gradle Plugin](https://github.com/mozilla/rust-android-gradle)
  - another gradle plugin; this one is from Mozilla
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OfHS5,iceoryx2,2390521017,416,NA,calvin2021y,85545400,,,NA,2024-10-03T05:00:21Z,2024-10-03T05:00:21Z,"maybe first step just add termux tests case without JNI stuff,  traits it like linux.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OfHS5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ecdej,iceoryx2,2658260899,416,NA,journaux,98918683,journaux,,NA,2025-02-14T04:39:40Z,2025-02-14T04:39:40Z,significant increase in user base - we'd look at adopting. please let us know how to help accelerate timeline (presuming the zero copy semantics maintained / better than binderfs),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ecdej/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eiqZ9,iceoryx2,2659886717,416,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-14T17:24:50Z,2025-02-14T17:24:50Z,"@journaux 

> significant increase in user base

I agree. We wish to work on this, but the core team is currently working on other customer-accelerated features like Python support, request-response, and blackboard pattern. 

> please let us know how to help accelerate timeline

Please look at the bottom of the main readme if you would like to have a contact to accelerate this feature as well.

Things that would help us as well would be documentation on how to set up a development environment with Rust for Android, with iceoryx2 as an example. This would provide us with the perfect starting point to start directly with the implementation. The lowest building blocks of iceoryx2 should already be compatible with android `iceoryx2-pal-concurrency-sync`.

>  (presuming the zero copy semantics maintained / better than binderfs)

Yes, zero-copy semantics would be maintained but it takes more effort than a platform like windows due to the sandbox nature of android. iceoryx2 requires direct access to lower system resources like shared memory, things which seem not be feasible with android - but I am not an android expert. See: https://developer.android.com/ndk/reference/group/memory#group___memory_1ga5bbfa70e48fcbc488a8cb8fa7657c878

Normally, multiple processes would open a shared memory with the same name, on android one process creates the shared memory and shares this shared memory via binder with the other processes. As soon as everyone has the shared memory handle, zero copy communication can start. So to get android running, we need to implement and add this as a subsystem to iceoryx2.

A port of iceoryx2 would have essentially two milestones:
1. it compiles on android and iceoryx2 can be used for intra-process communication
2. binder integration and iceoryx2 can be used for inter-process communication

iceoryx2 also provides a special optimization for intra-process. When you create a node like

```rust
let node = NodeBuilder::new().create<local::Service>()?; // local::Service instead of ipc::Service
```

then you use the process local optimized variant.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eiqZ9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eitRo,iceoryx2,2659898472,416,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-14T17:31:01Z,2025-02-14T17:31:01Z,@journaux  Btw: this is the restriction we have to handle: https://stackoverflow.com/questions/53142275/can-i-share-memory-between-2-process-without-any-passing-in-android-ndk,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eitRo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/416,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6enIN5,iceoryx2,2661057401,416,NA,journaux,98918683,journaux,,NA,2025-02-15T19:28:17Z,2025-02-15T19:28:17Z,"agree w/ all the notes, came across iceoryx2 searching for an RPC over shared memory that works across windows/linux/android (each necessitate their own approach). 

most IPC over shemem designs have brokerless discovery since memory regions are mapped via a common path / consistent hash, whereas android needs a central broker to maintain the lookup table of key -> file descriptor. for me, that's the largest change that needs to happen (i.e. separate, native activity to manage shmem index)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6enIN5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417,iceoryx2,2555622887,417,Add more comparison benchmarks,tusharmath,194482,Tushar Mathur,,OPEN,2024-09-30T05:47:07Z,2024-10-29T17:52:03Z,"Hi there!

Your benchmarks look promising, but I would like to see how it compares to Thrift, gRPC and WASM.

These are some of the most popular alternatives for building RPC. I'd love to explore this for [Tailcall](https://tailcall.run/) as we are building a plugin API.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OBF-A,iceoryx2,2382651264,417,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-09-30T09:50:16Z,2024-09-30T09:50:16Z,"I think I can deliver a gRPC benchmark quickly, I have no experience with Thrift so if someone would like to support here I would be super happy.

@tusharmath I do not completely get what you mean with WASM. I know WebAssembly but unsure what you would like to compare here?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OBF-A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OCHAX,iceoryx2,2382917655,417,NA,tusharmath,194482,Tushar Mathur,,NA,2024-09-30T11:25:59Z,2024-09-30T11:25:59Z,"@elfenpiff Communication from Native (Rust) to a WASM module. While building a WASM based application you often need to communicate with the real world for example making and HTTP call or a DB query. Data needs to be sent from the native realm where the drivers are actually implemented to the application code which is typically in WASM. If the performance of iceoryx can beat this overhead of communicating with a WASM module, I think it will make it worthy candidate for building distributed applications. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OCHAX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/417,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ruz-j,iceoryx2,2444967843,417,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-29T17:52:01Z,2024-10-29T17:52:01Z,"@tusharmath it would be desirable to make iceoryx2 work in a WASM module but I think we would need to break out of the sandbox to make this work. I don't have experience with WASM, just reading about it now and then, but I think it will be quite challenging to solve that problem.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ruz-j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,iceoryx2,2555773828,418,Use cargo-c instead of cmake,nappa85,7566389,Marco Napetti,,OPEN,2024-09-30T07:15:02Z,2024-11-10T22:01:32Z,"[cargo-c](https://github.com/lu-zero/cargo-c) exists exactly to ease the build of Rust programs into C libraries, it's an easier and less error-prone approach than managing the cmakefiles yourself.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuwXf,iceoryx2,2444953055,418,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-29T17:44:45Z,2024-10-29T17:44:45Z,"We also need to support colcon via cmake and as far as I understand cargo-c, this is not easily possible. We need cmake to integrate into the C and C++ world, not to integrate C and C++ libraries into iceoryx2.

If I didn't miss anything, we are not able to use cargo-c.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuwXf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RwKmP,iceoryx2,2445322639,418,NA,nappa85,7566389,Marco Napetti,,NA,2024-10-29T21:01:05Z,2024-10-29T21:01:05Z,"cargo-c produces a platform-correct shared library a pkg-config file and
one or more headers, cmake can consume the pkg-config files fairly easy.

Il mar 29 ott 2024, 18:45 Mathias Kraus ***@***.***> ha
scritto:

> We also need to support colcon via cmake and as far as I understand
> cargo-c, this is not easily possible. We need cmake to integrate into the C
> and C++ world, not to integrate C and C++ libraries into iceoryx2.
>
> If I didn't miss anything, we are not able to use cargo-c.
>
> â
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse-iceoryx/iceoryx2/issues/418#issuecomment-2444953055>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABZXINLMBKRJRMNJO5LGZI3Z57CSHAVCNFSM6AAAAABPCTXFRGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDINBUHE2TGMBVGU>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RwKmP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKmor,iceoryx2,2452253227,418,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-01T17:09:12Z,2024-11-01T17:09:12Z,"Does this also easily work with cross compilation and on more exotic OSes like QNX and VxWorks?

I'm a little bit hesitant to add another layer of indirection since the cmake files are not that complex and we are little bit burned by the - supposedly simple - bazel.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKmor/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKwV3,iceoryx2,2452292983,418,NA,nappa85,7566389,Marco Napetti,,NA,2024-11-01T17:33:25Z,2024-11-01T17:33:25Z,"Does Rust works on QNX and VxWorks?

Il ven 1 nov 2024, 18:09 Mathias Kraus ***@***.***> ha
scritto:

> Does this also easily work with cross compilation and on more exotic OSes
> like QNX and VxWorks?
>
> I'm a little bit hesitant to add another layer of indirection since the
> cmake files are not that complex and we are little bit burned by the -
> supposedly simple - bazel.
>
> â
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse-iceoryx/iceoryx2/issues/418#issuecomment-2452253227>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ABZXINOHPEXM5E3A7XLME4DZ6OYU3AVCNFSM6AAAAABPCTXFRGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDINJSGI2TGMRSG4>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKwV3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SK2rN,iceoryx2,2452318925,418,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-01T17:50:44Z,2024-11-01T17:50:44Z,It works on QNX and I think also VxWorks but I not so sure about the latter. We want to target both OSes and even more exotic ones like eMCOS which are used in safety domains.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SK2rN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SO46U,iceoryx2,2453376660,418,NA,lu-zero,239012,Luca Barbato,,NA,2024-11-03T10:32:26Z,2024-11-03T10:32:26Z,"> Does this also easily work with cross compilation and on more exotic OSes like QNX and VxWorks?

The two targets aren't currently supported since I'm taking a conservative approach since every platform has its own set of details for shared libraries.

If you have experience with any of those platform target I'd welcome a pull request to add the necessary informations:
- if the platform uses soname to embed the library version in the library (common on unix-like elf systems)
- which is library naming convention (e.g. `lib{name}.so` vs `name.dll`, symlinks over version minor/major)

For people with access to the platform it would take 10 minutes to prepare the patch. `eMCOS` isn't currently even present in the [documentation](https://doc.rust-lang.org/nightly/rustc/platform-support.html) so I guess its addition is very recent.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SO46U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Sbkre,iceoryx2,2456701662,418,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-05T09:45:18Z,2024-11-05T09:45:18Z,"eMCOS is something we recently put on our *interesting* project list. It is quite often used in safety critical domains, similar to VxWorks and QNX.

We also need to be conservative, since at some point everything needs to be either certified or qualified, which is very costly. Some of the dependencies we currently have will also be replaced by tailored, custum implementations due to that.

cargo-c is for sure a great project, but for us it does not add as much value as for other projects and we also do not have a complex CMake setup.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Sbkre/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/418,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TCrP5,iceoryx2,2466952185,418,NA,lu-zero,239012,Luca Barbato,,NA,2024-11-10T22:00:55Z,2024-11-10T22:00:55Z,"Adding the cargo-c metadata doesn't prevent you from using your custom machinery for custom targets, but makes the life of linux distributors much easier.

If you are planning to use ferrocene, cargo-c can use that compiler as any other versions of rustc.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TCrP5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/419,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/419,iceoryx2,2556388786,419,Python Bindings,orecham,8487595,Jeff Ithier,,OPEN,2024-09-30T11:37:09Z,2024-10-03T07:24:47Z,"## Brief feature description

Enable communication using `iceoryx2` in Python applications.

## Detailed information

A couple of options have been briefly investigated:

1. [PyO3](https://github.com/PyO3/pyo3)
    1. Allows for annotating Rust functions and structs to be made available via a Python module
    2. Good overview on the topic: https://www.youtube.com/watch?v=lyG6AKzu4ew
3. [Extending using C/C++ Bindings](https://docs.python.org/3/extending/extending.html)
    1. Allows for more control over the implementation
    2. However, requires more boilerplate
    4. It is not obvious if the extra effort warrants the benefit

The PyO3 option seems more maintainable and less effort to me.

**Other considerations:**

1. Loose coupling to `iceoryx2` internals
    1. The implementation should not modify `iceoryx2` API or its internals to work
        1. i.e. Do not directly annotate the API or its internal structs and functions, prefer to make new ones mirroring the public API for annotation","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/422,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/422,iceoryx2,2558359882,422,Fix flaky test posix thread test,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-01T07:00:55Z,2024-10-01T10:06:42Z,"## Required information

Every timing test shall only test at least timings not upper limits and use `assert_that!( ... , time_at_least ...)`.
The flaky test did not follow this rule.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/422/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/425,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/425,iceoryx2,2560353936,425,Cyclic Timer,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-01T23:00:02Z,2024-10-02T17:33:11Z,"## Brief feature description

Implement a timer to which many cyclic periodic timeouts can be attached and always the next waiting duration is returned.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/425/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/429,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/429,iceoryx2,2562984101,429,Request / Response Messaging Pattern,kczimm,4733573,,,OPEN,2024-10-03T02:34:04Z,2025-01-13T16:00:47Z,"I see that Request / Response messaging pattern in on the roadmap as a bonus item for the next release. Is there any design discussion about how this would be implemented? I'm interested in the current status, if there is one, or possibly an opportunity to help implement it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/429/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/429,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of8g3,iceoryx2,2390738999,429,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:43:54Z,2024-10-03T07:43:54Z,"@kczimm thank you for the offer! Currently, we have some deadlines we have to meet until the 14th of October with the #424 and some other iceoryx2 infrastructure stuff.

After this, we wanted to slowly focus on the request-response messaging pattern. The implementation is rather complex and would require some longer onboarding with internal design documents (we still have to write), but what could help would be to write either some examples in Rust/C/C++ and documentation for the best practices around request response or to write unit tests.

If you are still interested, I will ping you as soon as we start with it, but it will most likely be at some point in November.

In the meantime, if you would like to support, I cleaned up the open issues and updated the good first issue label - so if you like you can grab one of those: https://github.com/eclipse-iceoryx/iceoryx2/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22

Btw. we have here our chat: https://app.gitter.im/#/room/#eclipse_iceoryx:gitter.im if you need direct support from the community.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of8g3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430,iceoryx2,2563220884,430,FIx Cargo Clippy Warnings,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,OPEN,2024-10-03T06:22:55Z,2024-10-03T09:49:53Z,"Currently, `cargo clippy` under the root returns many warnings about the project, I propose we can follow the suggestions from rust clippy and resolve them.

Many comments violate the [first doc comment paragraph is too long](https://rust-lang.github.io/rust-clippy/master/index.html#/too_long_first_doc_paragraph) rules because they don't have a short and brief introduction as the first doc comment.

I plan to fix them gradually, on the way of learning and understanding more about iceoryx2 codebase. Moreover, I will try to put the doc fixing in separated PRs for better reviewing(it may take efforts for reviewing because of the in-accurate statements).
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of-xZ,iceoryx2,2390748249,430,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:49:12Z,2024-10-03T07:49:12Z,@xieyuschen Thanks for opening the issue. Could you share the `cargo clippy` command you used to receive those warnings? I am asking since when I run `cargo clippy` from `main` I got no warnings at all.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of-xZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OgX1t,iceoryx2,2390850925,430,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-03T08:42:26Z,2024-10-03T08:42:26Z,"> @xieyuschen Thanks for opening the issue. Could you share the `cargo clippy` command you used to receive those warnings? I am asking since when I run `cargo clippy` from `main` I got no warnings at all.

@elfenpiff only put a part of the output of `cargo clippy`.

```
â  iceoryx2 git:(main) cargo --version       
cargo 1.83.0-nightly (80d82ca22 2024-09-27)
â  iceoryx2 git:(main) cargo clippy --version
clippy 0.1.83 (06bb8364 2024-10-01)
â  iceoryx2 git:(main) git rev-parse HEAD
6d25b61fd679e94044f6142e8af5b2106bf8facf

â  iceoryx2 git:(main) cargo clippy
warning: first doc comment paragraph is too long
   --> iceoryx2-pal/concurrency-sync/src/iox_atomic.rs:134:1
    |
134 | / /// iceoryx2 implementation of an atomic that has an internal [`RwLockWriterPreference`].
135 | | /// It enables atomic operations on platforms that do not support them with the restriction that
136 | | /// those operations are no longer lock-free.
    | |_
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
    = note: `#[warn(clippy::too_long_first_doc_paragraph)]` on by default
help: add an empty line
...
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OgX1t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/430,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Og5Lc,iceoryx2,2390987484,430,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T09:49:52Z,2024-10-03T09:49:52Z,"@xieyuschen Thanks, you reminded me that I need to call `rustup update` again ;)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Og5Lc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/432,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/432,iceoryx2,2563337453,432,CLI for displaying the full system configuration,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-10-03T07:34:20Z,2024-10-05T13:44:48Z,"## Brief feature description

The file `iceoryx2-bb/posix/src/system_configuration.rs` provides the interface to the configuration of all system resources and a `print_system_configuration()` function to show them. Now, since `iox2` is finally here, we should remove the function `print_system_configuration()` and move it into an `iox2-config` command to show the config from the command line.

1. Make a binary called `iox2-config` in the crate `iceoryx2-cli`
2. Make a verb `show` to show the currently used configuration
3. Make a verb `generate` that generates a default configuration file in the default location that `iceoryx2` looks for it","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/432/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/432,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of43Z,iceoryx2,2390724057,432,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-03T07:34:53Z,2024-10-03T07:34:53Z,cc @orecham maybe you can provide a bit more details what steps one has to make and also provide a name suggestion directly in the issue description.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Of43Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/432,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OiWuB,iceoryx2,2391370625,432,NA,orecham,8487595,Jeff Ithier,,NA,2024-10-03T13:03:40Z,2024-10-03T13:03:40Z,"@elfenpiff Made a rough plan, the implementer can take some creative liberties though, if they have ideas that make more sense","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OiWuB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/433,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/433,iceoryx2,2564661924,433,RMW implementation for ROS2,orecham,8487595,Jeff Ithier,,OPEN,2024-10-03T17:55:33Z,2024-10-05T13:40:24Z,"## Brief feature description

Implement the RMW interface to enable ROS2 applications to use `iceoryx2`

## Detailed information

1. `iceoryx2` to manage communication between components within a single host
2. Support for inter-host communication shall be via `iceoryx2` gateways (yet to be implemented)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/433/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,iceoryx2,2566770779,434,Pub/sub: ~300 ms latency,nodakai,90726,NODA Kai,nodakai@gmail.com,CLOSED,2024-10-04T16:41:16Z,2024-12-13T08:17:42Z,"## Required information

**Operating system:**

* Debian trixie
* `Linux db 6.1.0-25-cloud-arm64 #1 SMP Debian 6.1.106-3 (2024-08-26) aarch64 GNU/Linux`

**Rust version:**
`rustc 1.81.0 (eeb90cda1 2024-09-04)`

**Cargo version:**
`cargo 1.81.0 (2dbb1af80 2024-08-20)`

**iceoryx2 version:**

```
[dependencies]
iceoryx2 = ""0.4.1""
```

**Detailed log output:**

<details><summary>Details</summary>
<pre>
        0 [D] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 20, data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | Unable to open file since it does not exist.
        1 [D] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5
              , data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { va
              lue: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".conne
              ction"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data:
               "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_
              destruction: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } }
              | Failed to create config since the config file could not be opened.
        2 [W] ""Config::global_config()""
              | Default config file found but unable to read data, populate config with default values.
        3 [T] Directory { path: Path { value: FixedSizeByteString<255> { len: 48, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711"" } }, directory_stream: 0xaaaaf83ffb40, file_descriptor: FileDescriptor { value: 3, is_owned: false } }
              | created
        4 [T] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 48, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711"" } }, suffix: FileName { v
              alue: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } } }
              | Created service root directory ""/tmp/iceoryx2/nodes/6479049688623293062137549711"" since it did not exist before.
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711/iox2_node.details"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None
              , creation_mode: Some(CreateExclusive) }
              | created
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 77, data: ""/tmp/iceoryx2/nodes/iox2_6479049688623293062137549711.node_monitor_owner_lock"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: true, owner: None, group: None, truncate_
              size: None, creation_mode: Some(CreateExclusive) }
              | created
        7 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/iox2_6479049688623293062137549711.node_monitor"" } }, access_mode: ReadWrite, permission: Permission(128), has_ownership: true, owner: None, group: None, truncate_size: None,
               creation_mode: Some(CreateExclusive) }
              | created
        8 [T] ""ProcessGuard::new()""
              | create process state ""/tmp/iceoryx2/nodes/iox2_6479049688623293062137549711.node_monitor"" for monitoring
        9 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 106, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owne
              r: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
       10 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_
              size: None, creation_mode: Some(CreateExclusive) }
              | created
       11 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_4eacadf2695a3f4b2eb95485759246ce1a2aa906.dynamic"" } }, size: 1411, base_address: 0xffff99b75000, has_ownership: false, file_descriptor: FileDescriptor 
              { value: 8, is_owned: true }, memory_lock: None }
              | create
       12 [T] ""Service::open()""
              | open service: My/Funk/ServiceName (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""4eacadf2695a3f4b2eb95485759246ce1a2aa906"" } }))
       13 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 273, base_address: 0xffff99b74000, has_ownership: false, file_descr
              iptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | open
       14 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 97, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_824223_80384572563851900296847201183.publisher_data"" } }, size: 2242, base_address: 0xffff99b6f000, has_ownership: false, file_descriptor: FileDescript
              or { value: 9, is_owned: true }, memory_lock: None }
              | open
received: Msg { data: 1234, i: 1728059776063045068 } delay: 289894.3 us
received: Msg { data: 1234, i: 1728059777063175660 } delay: 289886.3 us
received: Msg { data: 1234, i: 1728059778063315400 } delay: 289876.7 us
received: Msg { data: 1234, i: 1728059779063456511 } delay: 289879.3 us
received: Msg { data: 1234, i: 1728059780063573663 } delay: 289897.6 us
received: Msg { data: 1234, i: 1728059781063700998 } delay: 289894.1 us
       15 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 273, base_address: 0xffff99b74000, has_ownership: true, file_descri
              ptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | close
       16 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 273, base_address: 0xffff99b74000, has_ownership: true, file_descri
              ptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | delete
       17 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 97, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_824223_80384572563851900296847201183.publisher_data"" } }, size: 2242, base_address: 0xffff99b6f000, has_ownership: false, file_descriptor: FileDescript
              or { value: 9, is_owned: true }, memory_lock: None }
              | close
</pre>

<pre>
        0 [D] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 20, data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | Unable to open file since it does not exist.
        1 [D] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5
              , data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { va
              lue: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".conne
              ction"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data:
               "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_
              destruction: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_over
              flow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } }
              | Failed to create config since the config file could not be opened.
        2 [W] ""Config::global_config()""
              | Default config file found but unable to read data, populate config with default values.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711/iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cre
              ation_mode: None }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/iox2_6479049688623293062137549711.node_monitor"" } }, access_mode: Write, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cr
              eation_mode: None }
              | opened
        5 [T] Directory { path: Path { value: FixedSizeByteString<255> { len: 48, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191"" } }, directory_stream: 0xaaab06de3ca0, file_descriptor: FileDescriptor { value: 3, is_owned: false } }
              | created
        6 [T] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 48, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191"" } }, suffix: FileName { v
              alue: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } } }
              | Created service root directory ""/tmp/iceoryx2/nodes/1128777915323046143846028191"" since it did not exist before.
        7 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_node.details"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None
              , creation_mode: Some(CreateExclusive) }
              | created
        8 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 77, data: ""/tmp/iceoryx2/nodes/iox2_1128777915323046143846028191.node_monitor_owner_lock"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: true, owner: None, group: None, truncate_
              size: None, creation_mode: Some(CreateExclusive) }
              | created
        9 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/iox2_1128777915323046143846028191.node_monitor"" } }, access_mode: ReadWrite, permission: Permission(128), has_ownership: true, owner: None, group: None, truncate_size: None,
               creation_mode: Some(CreateExclusive) }
              | created
       10 [T] ""ProcessGuard::new()""
              | create process state ""/tmp/iceoryx2/nodes/iox2_1128777915323046143846028191.node_monitor"" for monitoring
       11 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size:
               None, creation_mode: None }
              | opened
       12 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size:
               None, creation_mode: None }
              | opened
       13 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size:
               None, creation_mode: None }
              | opened
       14 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size:
               None, creation_mode: None }
              | opened
       15 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 106, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owne
              r: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
       16 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_4eacadf2695a3f4b2eb95485759246ce1a2aa906.dynamic"" } }, size: 1411, base_address: 0xffff9962f000, has_ownership: false, file_descriptor: FileDescriptor 
              { value: 9, is_owned: true }, memory_lock: None }
              | open
       17 [T] ""Service::open()""
              | open service: My/Funk/ServiceName (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""4eacadf2695a3f4b2eb95485759246ce1a2aa906"" } }))
       18 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 97, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_824223_80384572563851900296847201183.publisher_data"" } }, size: 2242, base_address: 0xffff9962e000, has_ownership: true, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | create
       19 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission:
               Permission(448), creation_mode: None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       20 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 59, data: ""80384572563851900296847201183_85727422363461066471884231567"" } }, supplementary_size: 113, has_ownership: true, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 
              11, data: "".connection"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, _data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManageme
              ntData> }, timeout: 500ms, initializer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }
              | Failed to open  since a shared memory with that name does not exists.
       21 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 273, base_address: 0xffff99629000, has_ownership: true, file_descri
              ptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
published: Msg { data: 1234, i: 1728059776063045068 }
published: Msg { data: 1234, i: 1728059777063175660 }
published: Msg { data: 1234, i: 1728059778063315400 }
published: Msg { data: 1234, i: 1728059779063456511 }
published: Msg { data: 1234, i: 1728059780063573663 }
published: Msg { data: 1234, i: 1728059781063700998 }
^C       22 [D] ""nanosleep_with_clock""
              | Interrupted ""nanosleep"": { duration: 1s, clock_type: Realtime }, remaining sleeping time: 0ns
       23 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 97, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_824223_80384572563851900296847201183.publisher_data"" } }, size: 2242, base_address: 0xffff9962e000, has_ownership: true, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | close
       24 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 97, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_824223_80384572563851900296847201183.publisher_data"" } }, size: 2242, base_address: 0xffff9962e000, has_ownership: true, file_descriptor: FileDescripto
              r { value: 6, is_owned: true }, memory_lock: None }
              | delete
       25 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_80384572563851900296847201183_85727422363461066471884231567.connection"" } }, size: 273, base_address: 0xffff99629000, has_ownership: false, file_descr
              iptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       26 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 106, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: No
              ne, group: None, truncate_size: None, creation_mode: None }
              | opened
       27 [T] ""File::remove""
              | ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_4eacadf2695a3f4b2eb95485759246ce1a2aa906.service_tag""
       28 [T] ""ServiceState::drop()""
              | close service: My/Funk/ServiceName (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""4eacadf2695a3f4b2eb95485759246ce1a2aa906"" } }))
       29 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_4eacadf2695a3f4b2eb95485759246ce1a2aa906.dynamic"" } }, size: 1411, base_address: 0xffff9962f000, has_ownership: false, file_descriptor: FileDescriptor 
              { value: 9, is_owned: true }, memory_lock: None }
              | close
       30 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/6479049688623293062137549711/iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cre
              ation_mode: None }
              | opened
       31 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/iox2_6479049688623293062137549711.node_monitor"" } }, access_mode: Write, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cr
              eation_mode: None }
              | opened
       32 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cre
              ation_mode: None }
              | opened
       33 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 66, data: ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, cre
              ation_mode: None }
              | opened
       34 [T] ""File::remove""
              | ""/tmp/iceoryx2/nodes/1128777915323046143846028191/iox2_node.details""
       35 [T] ""Directory::remove""
              | removed ""/tmp/iceoryx2/nodes/1128777915323046143846028191""
       36 [T] ""File::remove""
              | ""/tmp/iceoryx2/nodes/iox2_1128777915323046143846028191.node_monitor""
       37 [T] ""File::remove""
              | ""/tmp/iceoryx2/nodes/iox2_1128777915323046143846028191.node_monitor_owner_lock""
</pre>
</details> 



**Observed result or behaviour:**

`received: Msg { data: 1234, i: 1728059776063045068 } delay: 289894.3 us`

```rust
use std::time::Duration;
use std::env;

use libc;
use anyhow::Result;
use iceoryx2::prelude::*;
use iceoryx2_bb_log::{self, LogLevel};

const CYCLE_TIME: Duration = Duration::from_secs(1);

const SVC_NAME: &str = ""My/Funk/ServiceName"";

#[derive(Debug, Clone)]
struct Msg {
  data: usize,
  i: i64
}

pub fn current_time() -> i64 {
  let mut ts = libc::timespec { tv_sec: 0, tv_nsec: 0 };
  let rc = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, &mut ts) };
  if rc < 0 {
    panic!(""clock_gettime failed: {rc}"");
  }
  ts.tv_sec * 1_000_000_000_i64 + ts.tv_nsec
}

fn pub_main() -> Result<()> {
  let node = NodeBuilder::new().create::<ipc::Service>()?;

  let service =
    node.service_builder(&SVC_NAME.try_into()?)
    .publish_subscribe::<Msg>()
    .open_or_create()?;

  let publisher = service.publisher_builder().create()?;

  while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
    let sample = publisher.loan_uninit()?;
    let data = Msg{data: 1234, i: current_time()};
    let sample = sample.write_payload(data.clone());
    sample.send()?;
    println!(""published: {:?}"", data);
  }

  Ok(())
}

fn sub_main() -> Result<()> {
  let node = NodeBuilder::new().create::<ipc::Service>()?;

  let service =
    node.service_builder(&SVC_NAME.try_into()?)
    .publish_subscribe::<Msg>()
    .open_or_create()?;

  let subscriber = service.subscriber_builder().create()?;

  while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
    while let Some(sample) = subscriber.receive()? {
      let tr = current_time();
      let dt = tr - sample.i;

      println!(""received: {:?} delay: {:.1} us"", *sample, dt as f64 * 1e-3);
    }
  }

  Ok(())
}

fn main() -> Result<()> {
  set_log_level(LogLevel::Trace);
  if env::args().skip(1).any(|e| e == ""--pub"") {
    pub_main()
  } else {
    sub_main()
  }
}
```

**Expected result or behaviour:**

single digit us latency


**Conditions where it occurred / Performed steps:**


","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OswgS,iceoryx2,2394097682,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-04T16:45:56Z,2024-10-04T16:45:56Z,"@nodakai I think if you change the code in the subscriber to:

```rust
  // while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
  //  while let Some(sample) = subscriber.receive()? {
  while let NodeEvent::Tick = node.wait(Duration::ZERO) {
    if let Some(sample) = subscriber.receive()? {
      let tr = current_time();
      let dt = tr - sample.i;

      println!(""received: {:?} delay: {:.1} us"", *sample, dt as f64 * 1e-3);
    }
  }
```

It would fix the issue.

If you do not want to perform a busy wait, you can combine the publish-subscribe service with an event service and fire an event after the publisher has sent the message. On the subscriber side you wait on a listener until you have received the event and then receive your sample on the subscriber. For the event you can find an example here: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OswgS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OtCjM,iceoryx2,2394171596,434,NA,nodakai,90726,NODA Kai,nodakai@gmail.com,NA,2024-10-04T17:08:36Z,2024-10-04T17:08:36Z,"Hmm, applying the suggested change (`Duration::ZERO` only) reduced latency to 20--50 us, without consuming 100 % CPU core. So it appears that IO2's implementation does not rely on classical busy looping on an atomic variable in shared memory? Is there any docs on what synchronization primitives are used for each operation mode?

It's still much slower than these numbers so I'll have to continue investigation
https://github.com/eclipse-iceoryx/iceoryx2/blob/main/internal/plots/benchmark_mechanism.svg","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OtCjM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OthNr,iceoryx2,2394297195,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-04T18:03:26Z,2024-10-04T18:03:26Z,"@nodakai another problem can be this call `libc::clock_gettime(libc::CLOCK_REALTIME, &mut ts)` depending on what underlying clock source it uses - either HPET or TSC. With one of them you have a huge performance impact @elBoberido knows more here.
We encountered the same problem in our benchmarks and the solution was, instead of sending one sample and measure the time from A to B, we use a setup where process A sends a sample to process B and as soon as process B has received it, we send a sample back to A. We repeat this a million times and then measure the total time divided by the repetition times 2 (since we send the sample back and forth).

This is a common method called ping-pong benchmark.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OthNr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OtjG7,iceoryx2,2394304955,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-04T18:07:02Z,2024-10-04T18:07:02Z,"@nodakai Oh, could you adjust your code to:

```rust
  // while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
  //  while let Some(sample) = subscriber.receive()? {
  loop {
    if let Some(sample) = subscriber.receive()? {
      let tr = current_time();
      let dt = tr - sample.i;

      println!(""received: {:?} delay: {:.1} us"", *sample, dt as f64 * 1e-3);
    }
  }
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OtjG7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Otkvl,iceoryx2,2394311653,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-04T18:11:10Z,2024-10-04T18:11:10Z,"Since you are working on an aarch64 target, you should be able to expect a latency in a single-digit microsecond, see: https://raw.githubusercontent.com/eclipse-iceoryx/iceoryx2/refs/heads/main/internal/plots/benchmark_architecture.svg

For the raspberry pi 4b we achieved a latency of ~800ns","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Otkvl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OuLwj,iceoryx2,2394471459,434,NA,nodakai,90726,NODA Kai,nodakai@gmail.com,NA,2024-10-04T19:51:21Z,2024-10-04T19:51:21Z,"Removing `node.wait(...)` reduced latency further to 3--5 us at the cost of consuming 100 % CPU core (it does look like a busy looping now).

It still lags noticeably behind your Rasp Pi result. I know I shouldn't expect an ultimate performance from a shared, HT-enabled cloud machine but 0.8 us vs 5 us seems weird.

Was your Rasp Pi result obtained with busy looping (100 % CPU core consumption)?

I already verified the following test yields ~50 ns on the target Linux machine so I'm not worried about the accuracy/overhead of `clock_gettime(CLOCK_REALTIME)`. It should be accelerated by vDSO https://man7.org/linux/man-pages/man7/vdso.7.html#ARCHITECTURE-SPECIFIC_NOTES

```rust
    loop {
      let t0 = current_time();
      let t1 = current_time();
      println!(""t1 - t0 = {}"", t1 - t0);
      std::thread::sleep(CYCLE_TIME);
    }
```
  ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OuLwj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OvFbd,iceoryx2,2394707677,434,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-04T21:41:23Z,2024-10-04T21:41:23Z,"@nodakai I hesitate to ask, but are you building in release mode? On my system, debug builds are ~6.5 times slower than release builds.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OvFbd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ov_l7,iceoryx2,2394945915,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-05T06:14:25Z,2024-10-05T06:14:25Z,"@nodakai 

> Was your Rasp Pi result obtained with busy looping (100 % CPU core consumption)?

Yes, our benchmarks are part of the repo and you can run them yourself: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/benchmarks

 * `cargo run --bin benchmark-publish-subscribe --release -- --bench-all` runs a ping-pong style pub-sub benchmark with two busy spin loops
 * `cargo run --bin benchmark-event --release -- --bench-all` runs a ping-pong style event benchmark with two loop waiting for a notification. Here the threads perform under the hood a sys call to wait for the notification to arrive and then fire a response.

> It still lags noticeably behind your Rasp Pi result. I know I shouldn't expect an ultimate performance from a shared, HT-enabled cloud machine but 0.8 us vs 5 us seems weird.

We never experimented with such a machine and our benchmark suite, but it would be good to add them. One idea is that the hardware is emulated, and you pay with latency? But this is just a wild guess.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ov_l7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Pl5cy,iceoryx2,2409076530,434,NA,nodakai,90726,NODA Kai,nodakai@gmail.com,NA,2024-10-13T18:24:05Z,2024-10-13T18:24:05Z,"> but are you building in release mode?

Surely using `--release`

> Yes, our benchmarks are part of the repo and you can run them yourself: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/benchmarks

Thanks, I'll give it a try. However, it seems that thereâs quite a bit of parameter tuning involved. If the examples in the README arenât reflective of typical usage, there might be room for improvement in the API design.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Pl5cy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PrtSJ,iceoryx2,2410599561,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-14T09:35:18Z,2024-10-14T09:35:18Z,"> Thanks, I'll give it a try. However, it seems that thereâs quite a bit of parameter tuning involved. If the examples in the README arenât reflective of typical usage, there might be room for improvement in the API design.

You could divide the parameter tuning into to fields: deployment and iceoryx2.

* For the deployment we used the posix thread feature to pin a thread to a specific CPU core and add a high priority which reduces jittering from your OS.

* For iceoryx2 it is essentially, the less the better (at least for most parameter). If you have a setup with 1 publisher and 1000 subscribers, the latency will go up - this goes also for other parameters like history size. In the future, we need to provide a benchmark for such a setups as well, but the first benchmark focuses on a minimal use case with one publisher and one subscriber. I expect only a few nanoseconds when you increase these numbers significantly - but this needs to be proven by a benchmark.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PrtSJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/434,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XcjNE,iceoryx2,2540843844,434,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-13T08:17:41Z,2024-12-13T08:17:41Z,"@nodakai I am closing the issue since your issue with the 300ms is fixed. If you still have some open questions, please don't hesitate to reopen this issue or create a new one.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6XcjNE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,iceoryx2,2568652420,436,Pub/sub example creates unkillable process with 100% core usage and no output when switched to use string,Cypher1,1120798,Jay Pratt,jay@skfl.tech,CLOSED,2024-10-06T13:04:32Z,2024-10-08T08:33:07Z,"## r.e. FAQ
I've seen the 'dynamically sized' portion of the FAQ. This is not about the ability to transmit variably sized data types. This issue is about how badly iceoryx handles dynamically sized data.
Ideally this would be prevented at compile time, but at minimum the program should respond to SIGKILL/SIGTERM and should probably crash when failing to handle dynamically sized data, rather than spinning at 100% core usage.

## Required information

**Operating system:**

* OS name, version: Ubuntu 24.04.1 LTS
* Additionally, on Linux, Mac Os, Unix, output of: `uname -a`: Linux HOSTNAME 6.8.0-45-generic # 45-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug 30 12:02:04 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

**Rust version:**
rustc 1.80.1 (3f5fd8dd4 2024-08-06)

**Cargo version:**
cargo 1.80.1 (376290515 2024-07-16)

**iceoryx2 version:**
v0.4.1

**Detailed log output:**
I think this is
a) easy to reproduce and
b) is worth reproducing, so I have not collected log data myself.

**Observed result or behaviour:**
./sub runs at 100% core usage and does not respond to attempts to kill it (e.g. SIGKILL, SIGTERM). It has to be SIGSTOP'd and abandoned.

pub.rs
```
use std::process::ExitCode;
use core::time::Duration;
use iceoryx2::prelude::*;

const CYCLE_TIME: Duration = Duration::from_secs(1);

fn main() -> ExitCode {
    let mut count = 0;
    let node = NodeBuilder::new().create::<ipc::Service>().expect(""1"");

    // create our port factory by creating or opening the service
    let service = node.service_builder(&""My/Funk/ServiceName4"".try_into().expect(""2""))
        .publish_subscribe::<String>()
        .open_or_create().expect(""3"");

    let publisher = service.publisher_builder().create().expect(""4"");

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        let sample = publisher.loan_uninit().expect(""5"");
        let sample = sample.write_payload(format!(""{:?}"", count));
        count += 1;
        sample.send().expect(""6"");
    }
    ExitCode::SUCCESS
}
```

sub.rs
```
use std::process::ExitCode;
use core::time::Duration;
use iceoryx2::prelude::*;

const CYCLE_TIME: Duration = Duration::from_secs(1);

fn main() -> ExitCode {
    let node = NodeBuilder::new().create::<ipc::Service>().expect(""1"");

    // create our port factory by creating or opening the service
    let service = node.service_builder(&""My/Funk/ServiceName4"".try_into().expect(""2""))
        .publish_subscribe::<String>()
        .open_or_create().expect(""3"");

    let subscriber = service.subscriber_builder().create().expect(""4"");

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        while let Some(sample) = subscriber.receive().expect(""5"") {
            println!(""received: {:?}"", *sample);
        }
    }
    ExitCode::SUCCESS
}
```


**Expected result or behaviour:**
The following alternatives would be acceptable.
- pub/sub fails to build at compile time due to indirection/dynamically sized data
- pub/sub fails to run due to indirection/dynamically sized data
- pub/sub fails at runtime but can be killed

**Conditions where it occurred / Performed steps:**
Build the above files and attempt to run them in any order. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ox3G0,iceoryx2,2395435444,436,NA,Cypher1,1120798,Jay Pratt,jay@skfl.tech,NA,2024-10-06T13:10:56Z,2024-10-06T13:10:56Z,"Also, I suspect that the sub process is performing a buffer overflow and reading from memory not associated with the sender. I've not spent the time to actually prove this but it would explain the high CPU usage.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ox3G0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OyIwU,iceoryx2,2395507732,436,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-06T16:57:18Z,2024-10-06T16:57:18Z,"@Cypher1 Thanks for the bug report!

You cannot send a `String` with iceoryx2. The reason is that a `String` uses heap memory and contains a pointer. iceoryx2 supports only self-contained data types.
We already provide some containers that are shared memory compatible, in your case, take a look at the complex data types example: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/complex_data_types

Here, we demonstrate how to use a `FixedSizeByteString` and a `FixedSizeByteString` as payload data.

> Ideally this would be prevented at compile time, 

With v0.5 we will introduce a macro that prevents users from using incompatible types. Also, we will add this to the documentation so that no one else will run into this issue before v0.5!

> but at minimum the program should respond to SIGKILL/SIGTERM and should probably crash when failing to handle dynamically sized data, rather than spinning at 100% core usage.

You uncovered a bug in our signal handler caused by a SEGFAULT by using the string. This should definitely not happen and I completely agree. We will look into it and fix it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OyIwU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O1HV-,iceoryx2,2396288382,436,NA,Cypher1,1120798,Jay Pratt,jay@skfl.tech,NA,2024-10-07T08:41:31Z,2024-10-07T08:41:31Z,"Great to hear! Thanks

Just btw, on early reflection (and I haven't spent much time on it yet) I don't think a macro should be needed for the safety I'm describing.
I think it would be simpler (and more 'Rust') to provide a trait like `SelfContained` and implement it for all primitives and maybe even `Copy` types. Whatever is happening during the serialization / copying into shared memory step is not working for heap data and this is likely `unsafe`.

Anyway, sounds like you have it in hand, thanks for the speedy response","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O1HV-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O3f37,iceoryx2,2396913147,436,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-07T13:18:30Z,2024-10-07T13:18:30Z,"@Cypher1 

I added the type restrictions and how to define payload types for iceoryx to all example documentations and the FAQ. Furthermore, with #448 the signal handling should now be correct - so if you let your `String` example run again, the subscriber should terminate when the `SIGSEGV` is received.

> Just btw, on early reflection (and I haven't spent much time on it yet) I don't think a macro should be needed for the safety I'm describing.
I think it would be simpler (and more 'Rust') to provide a trait like SelfContained and implement it for all primitives and maybe even Copy types.

Yes, this was our idea. To have a proc macro with a corresponding trait like `SelfContained` or `ShmSend` which is implemented for all primitive types. So you just have to annotate your struct with `#[ShmSend]` and if one member does not implement the trait you get a compile failure.

> Whatever is happening during the serialization / copying into shared memory step is not working for heap data and this is likely unsafe.

One of the benefits of zero copy communication is that you do not need to serialize the data at all. You can use the API so that you do not need to perform a single copy. The workflow should be like acquire memory with `Publisher::loan()` provide this memory to your thing that produces data - for instance V4L2 API has a call so that the camera writes the frame directly into the provided memory - and then you send it out to the next process.
So you do not have a single copy in this pipeline and then iceoryx2 becomes incredibly fast.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O3f37/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O3hGo,iceoryx2,2396918184,436,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-07T13:20:30Z,2024-10-07T13:20:30Z,#448 and #447 are merged and solving the issue. @Cypher1 if there is still an open problem please feel free to reopen this issue or create a new one.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O3hGo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O_9c5,iceoryx2,2399131449,436,NA,Cypher1,1120798,Jay Pratt,jay@skfl.tech,NA,2024-10-08T08:00:56Z,2024-10-08T08:00:56Z,"Thanks! That should do it (aside from the ongoing questions around detecting safe vs unsafe types [relocatable I think would be the requirement] types at compile time). I think I'm going to have to use flatbuffer or cap'n proto (I have dynamic message size requirements and want to support communications between machines, so I can't get the perf improvements from iceoryx) but I'm really glad you all are working on it.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O_9c5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PAK-J,iceoryx2,2399186825,436,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-08T08:24:37Z,2024-10-08T08:24:37Z,"@Cypher1 Until the end of this year, we will focus on making the allocation in the publisher as dynamic as possible so that the user will no longer need to set the worst-case size. When this is done (and request-response, a lot of users are waiting for it) we will look into relocatable types then you shouldn't need to serialize data anymore which should give you another performance boost.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PAK-J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/436,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PAPwH,iceoryx2,2399206407,436,NA,Cypher1,1120798,Jay Pratt,jay@skfl.tech,NA,2024-10-08T08:33:06Z,2024-10-08T08:33:06Z,"Exciting to hear, Thanks!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PAPwH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/437,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/437,iceoryx2,2568677431,437,Warning regarding default config is misleading ,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-10-06T14:00:35Z,2024-10-06T15:40:28Z,"## Required information

**Operating system:**

any

**Rust version:**

any

**Cargo version:**

any

**iceoryx2 version:**
E.g. `v1.2.3` or `main` branch

- `v0.4.1`
- `main`

**Detailed log output:**

```
        2 [W] ""Config::global_config()""
              | Default config file found but unable to read data, populate config with default values.
```

**Observed result or behaviour:**

When running an iceoryx2 application, it looks for `config/iceoryx2.toml`. When it is not found, it prints the warning from above. This is misleading, since the config is not found. 

**Expected result or behaviour:**

The warning should not be printed when the config file was not found but only when it was found and and could not be read.

**Conditions where it occurred / Performed steps:**

Create an out-of-tree iceoryx2 application and run it.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/437/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/437,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ox7Cn,iceoryx2,2395451559,437,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-06T14:00:53Z,2024-10-06T14:00:53Z,"Furthermore, it looks at a relative path to where the application is started. This is also error prone since the application might behave differently when launched from different locations. I'll open a separate issue for this if you agree that it should be changed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Ox7Cn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/441,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/441,iceoryx2,2568722033,441,[bug] payload_ptr_from_header doesn't work as expected,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,CLOSED,2024-10-06T15:39:34Z,2024-10-09T16:04:10Z,"see https://github.com/eclipse-iceoryx/iceoryx2/pull/440, you  can run :

```
cargo test --package iceoryx2 --lib -- 

service::static_config::message_type_details::tests::test_payload_ptr_from_header --exact 
```
I use linux when I devloped the iceoryx2.
```
â  iceoryx2 git:(report-bug) â uname -a
Linux xieyuschen 5.15.0-48-generic #54~20.04.1-Ubuntu SMP Thu Sep 1 
16:17:26 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
```

 I think something goes wrong during retrieve the payload pointer. I will delve it on Monday and just reported it first.
It's found when I tried to add some test cases in #439 so I have separated the normal test and the abnormal in different PRs.

I got the failure: listed below:
```
running 1 test
test service::static_config::message_type_details::tests::test_payload_ptr_from_header ... FAILED

failures:

---- service::static_config::message_type_details::tests::test_payload_ptr_from_header stdout ----
thread 'service::static_config::message_type_details::tests::test_payload_ptr_from_header' panicked at iceoryx2/src/service/static_config/message_type_details.rs:147:9:
assertion failed: expr: got == 9999;  value: 1 == 9999
stack backtrace:
   0: rust_begin_unwind
             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/std/src/panicking.rs:665:5
   1: core::panicking::panic_fmt
             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/core/src/panicking.rs:74:14
   2: iceoryx2::service::static_config::message_type_details::tests::test_payload_ptr_from_header
             at ./src/service/static_config/message_type_details.rs:147:9
   3: iceoryx2::service::static_config::message_type_details::tests::test_payload_ptr_from_header::{{closure}}
             at ./src/service/static_config/message_type_details.rs:130:38
   4: core::ops::function::FnOnce::call_once
             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/core/src/ops/function.rs:250:5
   5: core::ops::function::FnOnce::call_once
             at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/core/src/ops/function.rs:250:5
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.


failures:
    service::static_config::message_type_details::tests::test_payload_ptr_from_header
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/441/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/441,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PH6di,iceoryx2,2401216354,441,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-09T03:52:47Z,2024-10-09T03:52:47Z,"closed it as it could be solved by adding `#[repr(C)]`. i'm trying to understand whether we have a way to force users add it for their structures. Thanks again, i have missed this part before.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PH6di/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/441,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PNtgv,iceoryx2,2402736175,441,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-09T16:04:09Z,2024-10-09T16:04:09Z,@xieyuschen we are planning to have a proc macro which would add `#[repr(C)]` or at least check for it. It would also implement a trait if it can ensure the the type is shared memory compatible.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PNtgv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/442,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/442,iceoryx2,2568723958,442,Move default config to a standard location,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-10-06T15:43:04Z,2025-02-04T18:24:49Z,"## Brief feature description

Currently, when an application is run, it looks for `config/iceoryx2.toml`, relative to where it was started. This is error prone and the config should be at a standard location like `/etc/iceoryx2/config.toml` or `/etc/iceoryx2/domain-id/config.toml`.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/442/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443,iceoryx2,2568727070,443,cargo build failed at iceoryx2/iceoryx2-pal/posix because missing stddef.h,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,CLOSED,2024-10-06T15:50:10Z,2024-10-08T14:44:51Z,"I have tried to read iceoryx2 in my weekend at my linux:
```
â  iceoryx2 git:(main) â uname -a
Linux xieyuschen 5.15.0-48-generic #54~20.04.1-Ubuntu SMP Thu Sep 1 16:17:26 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
```
However, I encountered error when i tried to buld `iceoryx2/iceoryx2-pal/posix`. However, it's fine to build a `.c` file with `stddef.h` import. Hence, I tried to check more about it. I found the bindgen respects the `/usr/include/x86_64-linux-gnu/` only, but the `stddef.h` actually locates in `/usr/lib/gcc/x86_64-linux-gnu/9/include`(I found it by calling `echo | gcc -E -x c - -v`). Note that I haven't installed `clang` due to the system issue.

```
â  posix git:(main) cargo build
   Compiling iceoryx2-pal-posix v0.4.1 (/home/xieyuschen/codespace/iceoryx2/iceoryx2-pal/posix)
error: failed to run custom build command for `iceoryx2-pal-posix v0.4.1 (/home/xieyuschen/codespace/iceoryx2/iceoryx2-pal/posix)`

Caused by:
  process didn't exit successfully: `/home/xieyuschen/codespace/iceoryx2/target/debug/build/iceoryx2-pal-posix-fe2665ecc42216ae/build-script-build` (exit status: 101)
  --- stdout
  cargo:rustc-link-lib=pthread
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-env-changed=TARGET
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_x86_64-unknown-linux-gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_x86_64_unknown_linux_gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS
  cargo:rerun-if-changed=src/c/posix.h

  --- stderr
  /usr/include/x86_64-linux-gnu/sys/types.h:144:10: fatal error: 'stddef.h' file not found
  thread 'main' panicked at iceoryx2-pal/posix/build.rs:46:18:
  Unable to generate bindings: ClangDiagnostic(""/usr/include/x86_64-linux-gnu/sys/types.h:144:10: fatal error: 'stddef.h' file not found\n"")
  stack backtrace:
     0: rust_begin_unwind
               at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/std/src/panicking.rs:665:5
     1: core::panicking::panic_fmt
               at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/core/src/panicking.rs:74:14
     2: core::result::unwrap_failed
               at /rustc/eeb90cda1969383f56a2637cbd3037bdf598841c/library/core/src/result.rs:1679:5
     3: core::result::Result<T,E>::expect
     4: build_script_build::main
     5: core::ops::function::FnOnce::call_once
  note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
```

I proposed to add a check in `iceoryx2-pal/posix/build.rs` to check whether the `clang` is installed, if not, let the `build.rs` suggests users to install it. Or at least it reports some warnings so I can aware that I need to find the `stddef.h` by myself and set up it the bindgen builder:
```diff
            bindgen::Builder::default()
                .header(""src/c/posix.h"")
+               .clang_arg(""-I/usr/lib/gcc/x86_64-linux-gnu/9/include"")
                .blocklist_type(""max_align_t"")
                .parse_callbacks(Box::new(CargoCallbacks::new()))
                .use_core()
                .generate()
                .expect(""Unable to generate bindings"")
```

How do you think about it? This should be an document issue for us to improve.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OyJQs,iceoryx2,2395509804,443,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-06T17:03:36Z,2024-10-06T17:03:36Z,"@xieyuschen 

I like your proposal to let the `build.rs` suggest that the user shall install `clang`. Also, this would be a nice entry for our getting started documentation to install clang. Maybe also an FAQ entry: What shall I do when `stddef.h` cannot be found?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6OyJQs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O31JD,iceoryx2,2397000259,443,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-07T13:52:59Z,2024-10-07T13:52:59Z,"> @xieyuschen
> 
> I like your proposal to let the `build.rs` suggest that the user shall install `clang`. Also, this would be a nice entry for our getting started documentation to install clang. Maybe also an FAQ entry: What shall I do when `stddef.h` cannot be found?

Sure, i think this is a good idea and let me help to create a PR for it. Besides, I cannot install `clang` in my ubuntu as the dependencies are messy now and i don't want to tackle them at all.

For me, adding a `clang_arg` call is enough, but it's of course rediculous to merge the path which only makes sense in my own desktop. Hence, I proposed we support an env var `ICEORYX2_CLANG_ARG` in `build.rs` to do so.  ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O31JD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/443,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PDftw,iceoryx2,2400058224,443,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-08T14:44:51Z,2024-10-08T14:44:51Z,"close as it could be solved by `export BINDGEN_EXTRA_CLANG_ARGS`, see https://github.com/rust-lang/rust-bindgen?tab=readme-ov-file#environment-variables.

sorry for missing the bindgen documentation. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PDftw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/446,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/446,iceoryx2,2568810060,446,Improved Getting Started Documentation,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-10-06T18:22:41Z,2024-10-07T20:54:22Z,"## Improvement Suggestion

In https://iceoryx2.readthedocs.io and also our examples we need to clearly define the restrictions on the payload type. On the Rust side we can solve this cleanly with the `shmem` derive macro but on the C/C++ side we must document it. 

It already led to a bug; see #436, so this shall be done sooner rather than later. Otherwise, another user will also run into this pitfall.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/446/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/450,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/450,iceoryx2,2571147056,450,documentation: how it works,tamird,1535036,Tamir Duberstein,tamird@gmail.com,OPEN,2024-10-07T18:23:11Z,2024-10-07T21:12:16Z,"It would be great to have something like a design document: what problems does this library solve, how does it solve them, how does it avoid various pitfalls, etc.

I came across [this reply](https://news.ycombinator.com/item?id=41690606) from @elBoberido on HN and it's emblematic of what's lacking; the parent talks about shared memory challenges in the presence of process death and the response simply states
> We found a few ways on how to make this feasible, though.

Another point of confusion for me: how does this work without a central broker? According to https://iceoryx.io/ there is no need for one.

Anyway, something that describes the design of the software would go a long way in increasing (at least my) confidence in it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/450/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/450,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O7Ish,iceoryx2,2397866785,450,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-07T20:48:49Z,2024-10-07T20:48:49Z,"@tamird I appreciate and completely get it.

Just to give you some context, we have all been working together for the last seven years. Starting with a Bosch research project, the predecessor of iceoryx, then we fought for over a year to make it open source. In the last years, we have certified parts of iceoryx1 according to ISO 26262 and realized that some things make the zero-copy communication hard to certify - one key element was the central broker.

We started redesigning iceoryx again and came up with the iceoryx2 architecture. It just took us five years to realize that everyone has a central broker - it is the operating system. So we founded ekxide to realize the next generation of iceoryx.

At the moment we have the goal to reach feature parity with iceoryx and complete the user documentation with a good getting started guide. When this is done, we will present the iceoryx2 design in detail. Maybe it would be a great topic for a FOSDEM 2025 talk but I think we need a bit more than just one hour.

Just out of curiosity, what topic would you be most interested in:
 * Architecture without a central daemon
 * Decentralized process monitoring and resource cleanup
 * Decentralized communication and service discovery
 * Zero trust approach for shared memory communication
 * Indestructible processes
 * Incorruptible data structures","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O7Ish/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/450,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O7SP2,iceoryx2,2397905910,450,NA,tamird,1535036,Tamir Duberstein,tamird@gmail.com,NA,2024-10-07T21:12:16Z,2024-10-07T21:12:16Z,All of these would be interesting topics. I would probably start with the first 3 which sound least fantastical ð .,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6O7SP2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,iceoryx2,2572786357,453,Fail to build on arm64,jerry-xie-000,13086687,jerry_xie,,CLOSED,2024-10-08T10:32:56Z,2024-11-04T01:34:12Z,"Before posting the bug, take a look at the
[FAQ](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/FAQ.md)
for a possible solution.

## Required information

**Operating system:**

HOST:  Linux UBUNTU2204_ROCKCHIP_DOCKER 5.15.146.1-microsoft-standard-WSL2 #1 SMP Thu Jan 11 04:09:03 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

TARGET: Linux rk3588 5.10.198 #206 SMP Thu Aug 29 06:05:00 UTC 2024 aarch64 GNU/Linux


**Rust version:**
rustc 1.81.0 (eeb90cda1 2024-09-04)

**Cargo version:**
cargo 1.81.0 (2dbb1af80 2024-08-20)

**iceoryx2 version:**
`main` branch

**Observed result or behaviour:**

workflow:
1. init the arm64 environment
```
$ source /mnt/sda1/xzy/SDK_real/aarch64-buildroot-linux-gnu_sdk-buildroot-rockchip/environment-setup
 _           _ _     _                 _
| |__  _   _(_) | __| |_ __ ___   ___ | |_
| '_ \| | | | | |/ _` | '__/ _ \ / _ \| __|
| |_) | |_| | | | (_| | | | (_) | (_) | |_
|_.__/ \__,_|_|_|\__,_|_|  \___/ \___/ \__|

       Making embedded Linux easy!

Some tips:
* PATH now contains the SDK utilities
* Standard autotools variables (CC, LD, CFLAGS) are exported
* Kernel compilation variables (ARCH, CROSS_COMPILE, KERNELDIR) are exported
* To configure do ""./configure $CONFIGURE_FLAGS"" or use
  the ""configure"" alias
* To build CMake-based projects, use the ""cmake"" alias

```

2. cmake
```
$ cmake -S . -B build -DBUILD_EXAMPLES=ON -DCMAKE_INSTALL_PREFIX=`pwd`/../_OUTPUT
-- The C compiler identification is GNU 12.3.0
-- The CXX compiler identification is GNU 12.3.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /mnt/sda1/xzy/SDK_real/aarch64-buildroot-linux-gnu_sdk-buildroot-rockchip/bin/aarch64-buildroot-linux-gnu-gcc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /mnt/sda1/xzy/SDK_real/aarch64-buildroot-linux-gnu_sdk-buildroot-rockchip/bin/aarch64-buildroot-linux-gnu-g++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- iceoryx2 options:
--   BUILD_CXX_BINDING: ON (Description: Build C++ binding)
--   BUILD_EXAMPLES: ON (Description: Build examples)
--   BUILD_TESTING: OFF (Description: Build tests)
--   SANITIZERS: OFF (Description: Build with undefined-behavior- and address-sanitizer)
--   RUST_TARGET_TRIPLET:  (Description: The target triplet for cross compilation, e.g. 'aarch64-unknown-linux-gnu')
-- The package 'iceoryx2-c' is used in source code version.
-- iceoryx_hoofs not found! Using FetchContent!
-- [i] IOX_REPRODUCIBLE_BUILD: ON
-- [i] <<<<<<<<<<<<< Start iceoryx_platform configuration: >>>>>>>>>>>>>
-- [i] IOX_PLATFORM_TEMP_DIR: /tmp/
-- [i] IOX_PLATFORM_LOCK_FILE_PATH_PREFIX: /tmp/
-- [i] IOX_PLATFORM_UDS_SOCKET_PATH_PREFIX: /tmp/
-- [i] <<<<<<<<<<<<<< End iceoryx_platform configuration: >>>>>>>>>>>>>>
-- The package 'iceoryx_platform' is used in source code version.
-- [i] <<<<<<<<<<<<< Start iceoryx_hoofs configuration: >>>>>>>>>>>>>
-- [i] IOX_MINIMAL_LOG_LEVEL: TRACE
-- [i] IOX_MAX_NAMED_PIPE_MESSAGE_SIZE: 4096
-- [i] IOX_MAX_NAMED_PIPE_NUMBER_OF_MESSAGES: 10
-- [i] IOX_EXPERIMENTAL_POSH_FLAG:
-- [i] <<<<<<<<<<<<<< End iceoryx_hoofs configuration: >>>>>>>>>>>>>>
-- The package 'iceoryx_hoofs' is used in source code version.
CMake Warning at iceoryx2-ffi/cxx/cmake/fetch-iceoryx-hoofs.cmake:60 (message):
  #############################################################

  The project was build by obtaining iceoryx with FetchContent.

  This is fine for development but for production, it is

  recommended to use an existing installation with

  '-DCMAKE_PREFIX_PATH=/path/to/installed/iceoryx'!

  #############################################################

Call Stack (most recent call first):
  iceoryx2-ffi/cxx/CMakeLists.txt:16 (include)


-- The package 'iceoryx2-cxx' is used in source code version.
-- Configuring done
-- Generating done
-- Build files have been written to: /mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/build

```

3. make
```
$ make
   Compiling proc-macro2 v1.0.87
   Compiling unicode-ident v1.0.13
   Compiling serde v1.0.210
   Compiling libc v0.2.159
   Compiling rustix v0.38.37
   Compiling cfg-if v1.0.0
   Compiling memchr v2.7.4
   Compiling bitflags v2.6.0
   Compiling linux-raw-sys v0.4.14
   Compiling either v1.13.0
   Compiling glob v0.3.1
   Compiling log v0.4.22
   Compiling prettyplease v0.2.22
   Compiling minimal-lexical v0.2.1
   Compiling iceoryx2-pal-concurrency-sync v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/concurrency-sync)
   Compiling regex-syntax v0.8.5
   Compiling home v0.5.9
   Compiling shlex v1.3.0
   Compiling bindgen v0.69.4
   Compiling lazy_static v1.5.0
   Compiling rustc-hash v1.1.0
   Compiling lazycell v1.3.0
   Compiling libloading v0.8.5
   Compiling iceoryx2-pal-configuration v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/configuration)
   Compiling version_check v0.9.5
   Compiling heck v0.4.1
   Compiling iceoryx2-bb-elementary v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/elementary)
   Compiling cc v1.1.28
   Compiling autocfg v1.4.0
   Compiling tiny-fn v0.1.7
   Compiling syn v1.0.109
   Compiling hashbrown v0.15.0
   Compiling itertools v0.12.1
   Compiling yansi v1.0.1
   Compiling serde_json v1.0.128
   Compiling equivalent v1.0.1
   Compiling os_str_bytes v6.6.1
   Compiling hashbrown v0.12.3
   Compiling strsim v0.10.0
   Compiling fastrand v2.1.1
   Compiling itoa v1.0.11
   Compiling once_cell v1.20.2
   Compiling winnow v0.6.20
   Compiling clang-sys v1.8.1
   Compiling termcolor v1.4.1
   Compiling textwrap v0.16.1
   Compiling proc-macro2-diagnostics v0.10.1
   Compiling bitflags v1.3.2
   Compiling cbindgen v0.26.0
   Compiling ryu v1.0.18
   Compiling byteorder v1.5.0
   Compiling clap_lex v0.2.4
   Compiling aliasable v0.1.3
   Compiling nom v7.1.3
   Compiling static_assertions v1.1.0
   Compiling iceoryx2-bb-testing v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/testing)
   Compiling sha1_smol v1.0.1
   Compiling indexmap v1.9.3
   Compiling quote v1.0.37
   Compiling syn v2.0.79
   Compiling indexmap v2.6.0
   Compiling termsize v0.1.9
   Compiling atty v0.2.14
   Compiling iceoryx2-bb-log v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/log)
   Compiling iceoryx2-bb-lock-free v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/lock-free)
   Compiling clap v3.2.25
   Compiling regex-automata v0.4.8
   Compiling which v4.4.2
   Compiling tempfile v3.13.0
   Compiling cexpr v0.6.0
   Compiling regex v1.11.0
   Compiling serde_derive v1.0.210
   Compiling iceoryx2-bb-derive-macros v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/derive-macros)
   Compiling enum-iterator-derive v1.4.0
   Compiling ouroboros_macro v0.18.4
   Compiling iceoryx2-ffi-macros v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-ffi/ffi-macros)
   Compiling enum-iterator v2.1.0
   Compiling ouroboros v0.18.4
   Compiling iceoryx2-pal-posix v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/posix)
   Compiling toml v0.5.11
   Compiling iceoryx2-bb-container v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/container)
   Compiling serde_spanned v0.6.8
   Compiling toml_datetime v0.6.8
   Compiling cdr v0.2.4
   Compiling toml_edit v0.22.22
   Compiling iceoryx2-bb-system-types v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/system-types)
   Compiling toml v0.8.19
The following warnings were emitted during compilation:

warning: iceoryx2-pal-posix@0.4.1: aarch64-buildroot-linux-gnu-gcc.br_real: error: unrecognized command-line option â-m64â

error: failed to run custom build command for `iceoryx2-pal-posix v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/posix)`

Caused by:
  process didn't exit successfully: `/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/build/rust/native/release/build/iceoryx2-pal-posix-bc9b3375cf6a096b/build-script-build` (exit status: 1)
  --- stdout
  cargo:rustc-link-lib=pthread
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-env-changed=TARGET
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_x86_64-unknown-linux-gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_x86_64_unknown_linux_gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-changed=/usr/include/mqueue.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/features-time64.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/timesize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/stdc-predef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/cdefs.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/long-double.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/gnu/stubs.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/gnu/stubs-64.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/types.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/timesize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/typesizes.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/time64.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/clock_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/timer_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stdint-intn.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/endian.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/endian.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/endianness.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/byteswap.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/uintn-identity.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/select.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/select.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/endian.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/struct_mutex.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h
  cargo:rerun-if-changed=/usr/include/fcntl.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/fcntl.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stat.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/struct_stat.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/mqueue.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/arpa/inet.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/netinet/in.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/socket.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/socket.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/socket_type.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sockaddr.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/socket.h
  cargo:rerun-if-changed=/usr/include/asm-generic/socket.h
  cargo:rerun-if-changed=/usr/include/linux/posix_types.h
  cargo:rerun-if-changed=/usr/include/linux/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/posix_types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/posix_types_64.h
  cargo:rerun-if-changed=/usr/include/asm-generic/posix_types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/bitsperlong.h
  cargo:rerun-if-changed=/usr/include/asm-generic/bitsperlong.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/sockios.h
  cargo:rerun-if-changed=/usr/include/asm-generic/sockios.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_osockaddr.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/in.h
  cargo:rerun-if-changed=/usr/include/endian.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/byteswap.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/uintn-identity.h
  cargo:rerun-if-changed=/usr/include/dirent.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/dirent.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/posix1_lim.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/local_lim.h
  cargo:rerun-if-changed=/usr/include/linux/limits.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthread_stack_min.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/dirent_ext.h
  cargo:rerun-if-changed=/usr/include/grp.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/FILE.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/netinet/in.h
  cargo:rerun-if-changed=/usr/include/pthread.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/sched.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sched.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/cpu-set.h
  cargo:rerun-if-changed=/usr/include/time.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/time.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/clock_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/timer_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/locale_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/endian.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/setjmp.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/setjmp.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h
  cargo:rerun-if-changed=/usr/include/pwd.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/FILE.h
  cargo:rerun-if-changed=/usr/include/sched.h
  cargo:rerun-if-changed=/usr/include/semaphore.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/semaphore.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/mman.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/mman.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/mman-linux.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/mman-shared.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/resource.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/resource.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/select.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/socket.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/un.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/cdefs.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sockaddr.h
  cargo:rerun-if-changed=/usr/include/string.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/libc-header-start.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/locale_t.h
  cargo:rerun-if-changed=/usr/include/strings.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/locale_t.h
  cargo:rerun-if-changed=/usr/include/unistd.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/posix_opt.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/environments.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/confname.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/getopt_posix.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/getopt_core.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/unistd_ext.h
  cargo:rerun-if-changed=/usr/include/errno.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/errno.h
  cargo:rerun-if-changed=/usr/include/linux/errno.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/asm/errno.h
  cargo:rerun-if-changed=/usr/include/asm-generic/errno.h
  cargo:rerun-if-changed=/usr/include/asm-generic/errno-base.h
  cargo:rerun-if-changed=/usr/include/fcntl.h
  cargo:rerun-if-changed=/usr/include/signal.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/signum-generic.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/signum-arch.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/wordsize.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigaction.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigcontext.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/stack_t.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/ucontext.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/stack_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigstack.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigstksz.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/ss_flags.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/sigthread.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/signal_ext.h
  cargo:rerun-if-changed=/usr/include/stdio.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/libc-header-start.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stdarg.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/__FILE.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/FILE.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stdio_lim.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/floatn.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/floatn-common.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/long-double.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/floatn.h
  cargo:rerun-if-changed=/usr/include/stdlib.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/libc-header-start.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/waitflags.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/waitstatus.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/floatn.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/types.h
  cargo:rerun-if-changed=/usr/include/alloca.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/lib/llvm-14/lib/clang/14.0.0/include/stddef.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stdlib-float.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/floatn.h
  cargo:rerun-if-changed=/usr/include/string.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/stat.h
  cargo:rerun-if-changed=/usr/include/features.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/types/time_t.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/bits/stat.h
  cargo:rerun-if-changed=/usr/include/x86_64-linux-gnu/sys/types.h
  cargo:rerun-if-changed=/usr/include/time.h
  cargo:rerun-if-changed=src/c/sigaction.c
  OUT_DIR = Some(/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/build/rust/native/release/build/iceoryx2-pal-posix-1192dd49b9364f14/out)
  TARGET = Some(x86_64-unknown-linux-gnu)
  OPT_LEVEL = Some(3)
  HOST = Some(x86_64-unknown-linux-gnu)
  cargo:rerun-if-env-changed=CC_x86_64-unknown-linux-gnu
  CC_x86_64-unknown-linux-gnu = None
  cargo:rerun-if-env-changed=CC_x86_64_unknown_linux_gnu
  CC_x86_64_unknown_linux_gnu = None
  cargo:rerun-if-env-changed=HOST_CC
  HOST_CC = None
  cargo:rerun-if-env-changed=CC
  CC = Some(aarch64-buildroot-linux-gnu-gcc)
  cargo:rerun-if-env-changed=CC_KNOWN_WRAPPER_CUSTOM
  CC_KNOWN_WRAPPER_CUSTOM = None
  RUSTC_WRAPPER = None
  cargo:rerun-if-env-changed=CC_ENABLE_DEBUG_OUTPUT
  cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS
  CRATE_CC_NO_DEFAULTS = None
  DEBUG = Some(false)
  CARGO_CFG_TARGET_FEATURE = Some(fxsr,sse,sse2)
  cargo:rerun-if-env-changed=CFLAGS_x86_64-unknown-linux-gnu
  CFLAGS_x86_64-unknown-linux-gnu = None
  cargo:rerun-if-env-changed=CFLAGS_x86_64_unknown_linux_gnu
  CFLAGS_x86_64_unknown_linux_gnu = None
  cargo:rerun-if-env-changed=HOST_CFLAGS
  HOST_CFLAGS = None
  cargo:rerun-if-env-changed=CFLAGS
  CFLAGS = Some(-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64  -Os -g0 -D_FORTIFY_SOURCE=1)
  cargo:rerun-if-env-changed=CC_SHELL_ESCAPED_FLAGS
  CC_SHELL_ESCAPED_FLAGS = None
  cargo:warning=aarch64-buildroot-linux-gnu-gcc.br_real: error: unrecognized command-line option â-m64â

  --- stderr


  error occurred: Command ""aarch64-buildroot-linux-gnu-gcc"" ""-O3"" ""-ffunction-sections"" ""-fdata-sections"" ""-fPIC"" ""-m64"" ""-D_LARGEFILE_SOURCE"" ""-D_LARGEFILE64_SOURCE"" ""-D_FILE_OFFSET_BITS=64"" ""-Os"" ""-g0"" ""-D_FORTIFY_SOURCE=1"" ""-o"" ""/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/build/rust/native/release/build/iceoryx2-pal-posix-1192dd49b9364f14/out/9090567339c54aec-sigaction.o"" ""-c"" ""src/c/sigaction.c"" with args aarch64-buildroot-linux-gnu-gcc did not execute successfully (status code exit status: 1).


warning: build failed, waiting for other jobs to finish...
make[2]: *** [iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step.dir/build.make:70: iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step] Error 101
make[1]: *** [CMakeFiles/Makefile2:442: iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step.dir/all] Error 2
make: *** [Makefile:136: all] Error 2

```

It seems need to remove the ""-m64"". How to remove it ?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PIJR3,iceoryx2,2401277047,453,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-09T04:15:22Z,2024-10-09T04:15:22Z,"Hi @jerry-xie-000 looks like you're going to cross-compile from arm to x86_64, but you use the compiler for `aarch`(arm).
I believe you have used a wrong compiler and you need to change to a right cross compiler. Can refer to this issue whether it's helpful: https://github.com/rust-lang/rust/issues/119500

> ""g++-x86-64-linux-gnu"" is the cross-compiler to x86_64 - so you want export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/x86_64-linux-gnu-gcc (rather than aarch64-linux-gnu-gcc) 

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PIJR3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PItCb,iceoryx2,2401423515,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-10-09T06:29:22Z,2024-10-09T06:29:22Z,"It seems not suit to my question. I try to cross-compile from x86_64 to arm64. The host machine is x86_64 ubuntu 22.04, and need to cross-compile the source, and then run on arm64 linux.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PItCb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PNwyQ,iceoryx2,2402749584,453,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-09T16:10:29Z,2024-10-09T16:10:29Z,"Cross compilation is not yet fully tested with the cmake build. There is an option to tell cmake the Rust target, though. Have you tried specifying RUST_TARGET_TRIPLET?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PNwyQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PRdaI,iceoryx2,2403718792,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-10-10T01:30:50Z,2024-10-10T01:30:50Z,"I try to use RUST_TARGET_TRIPLET when cmake, but my cross-compiler is:
```
aarch64-buildroot-linux-gnu-addr2line           aarch64-buildroot-linux-gnu-gcc.br_real         aarch64-linux-ar                                aarch64-linux-gcov
aarch64-buildroot-linux-gnu-ar                  aarch64-buildroot-linux-gnu-gcov                aarch64-linux-as                                aarch64-linux-gcov-dump
aarch64-buildroot-linux-gnu-as                  aarch64-buildroot-linux-gnu-gcov-dump           aarch64-linux-c++                               aarch64-linux-gcov-tool
aarch64-buildroot-linux-gnu-c++                 aarch64-buildroot-linux-gnu-gcov-tool           aarch64-linux-c++.br_real                       aarch64-linux-gdb
aarch64-buildroot-linux-gnu-c++.br_real         aarch64-buildroot-linux-gnu-gdb                 aarch64-linux-c++filt                           aarch64-linux-gprof
aarch64-buildroot-linux-gnu-c++filt             aarch64-buildroot-linux-gnu-gdb-add-index       aarch64-linux-cc                                aarch64-linux-ld
aarch64-buildroot-linux-gnu-cc                  aarch64-buildroot-linux-gnu-gprof               aarch64-linux-cc.br_real                        aarch64-linux-ld.bfd
aarch64-buildroot-linux-gnu-cc.br_real          aarch64-buildroot-linux-gnu-ld                  aarch64-linux-cpp                               aarch64-linux-lto-dump
aarch64-buildroot-linux-gnu-cpp                 aarch64-buildroot-linux-gnu-ld.bfd              aarch64-linux-cpp.br_real                       aarch64-linux-nm
aarch64-buildroot-linux-gnu-cpp.br_real         aarch64-buildroot-linux-gnu-lto-dump            aarch64-linux-elfedit                           aarch64-linux-objcopy
aarch64-buildroot-linux-gnu-elfedit             aarch64-buildroot-linux-gnu-nm                  aarch64-linux-g++                               aarch64-linux-objdump
aarch64-buildroot-linux-gnu-g++                 aarch64-buildroot-linux-gnu-objcopy             aarch64-linux-g++.br_real                       aarch64-linux-ranlib
aarch64-buildroot-linux-gnu-g++.br_real         aarch64-buildroot-linux-gnu-objdump             aarch64-linux-gcc                               aarch64-linux-readelf
aarch64-buildroot-linux-gnu-gcc                 aarch64-buildroot-linux-gnu-ranlib              aarch64-linux-gcc-12.3.0                        aarch64-linux-size
aarch64-buildroot-linux-gnu-gcc-12.3.0          aarch64-buildroot-linux-gnu-readelf             aarch64-linux-gcc-12.3.0.br_real                aarch64-linux-strings
aarch64-buildroot-linux-gnu-gcc-12.3.0.br_real  aarch64-buildroot-linux-gnu-size                aarch64-linux-gcc-ar                            aarch64-linux-strip
aarch64-buildroot-linux-gnu-gcc-ar              aarch64-buildroot-linux-gnu-strings             aarch64-linux-gcc-nm                            
aarch64-buildroot-linux-gnu-gcc-nm              aarch64-buildroot-linux-gnu-strip               aarch64-linux-gcc-ranlib                        
aarch64-buildroot-linux-gnu-gcc-ranlib          aarch64-linux-addr2line                         aarch64-linux-gcc.br_real         
```

Not in the support list by `rustc --print target-list`.:
```
$ rustc --print target-list
aarch64-apple-darwin
aarch64-apple-ios
aarch64-apple-ios-macabi
aarch64-apple-ios-sim
aarch64-apple-tvos
aarch64-apple-tvos-sim
aarch64-apple-visionos
aarch64-apple-visionos-sim
aarch64-apple-watchos
aarch64-apple-watchos-sim
aarch64-fuchsia
aarch64-kmc-solid_asp3
aarch64-linux-android
aarch64-nintendo-switch-freestanding
aarch64-pc-windows-gnullvm
aarch64-pc-windows-msvc
aarch64-unknown-freebsd
aarch64-unknown-fuchsia
aarch64-unknown-hermit
aarch64-unknown-illumos
aarch64-unknown-linux-gnu
aarch64-unknown-linux-gnu_ilp32
aarch64-unknown-linux-musl
aarch64-unknown-linux-ohos
aarch64-unknown-netbsd
aarch64-unknown-none
aarch64-unknown-none-softfloat
aarch64-unknown-nto-qnx710
aarch64-unknown-openbsd
aarch64-unknown-redox
aarch64-unknown-teeos
aarch64-unknown-uefi
aarch64-uwp-windows-msvc
aarch64-wrs-vxworks
aarch64_be-unknown-linux-gnu
aarch64_be-unknown-linux-gnu_ilp32
aarch64_be-unknown-netbsd
arm-linux-androideabi
```
How to add `aarch64-buildroot-linux-gnu` into the target-list?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PRdaI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PT86A,iceoryx2,2404372096,453,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-10T08:03:56Z,2024-10-10T08:03:56Z,"@jerry-xie-000 From here: https://rust-lang.github.io/rustup/cross-compilation.html

Try out: `rustup target add aarch64-buildroot-linux-gnu`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PT86A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PULGx,iceoryx2,2404430257,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-10-10T08:23:19Z,2024-10-10T08:23:19Z,"> @jerry-xie-000 From here: https://rust-lang.github.io/rustup/cross-compilation.html
> 
> Try out: `rustup target add aarch64-buildroot-linux-gnu`


Not support:

```
$ rustup target add aarch64-buildroot-linux-gnu
error: toolchain 'stable-x86_64-unknown-linux-gnu' does not support target 'aarch64-buildroot-linux-gnu'
note: you can see a list of supported targets with `rustc --print=target-list`
note: if you are adding support for a new target to rustc itself, see https://rustc-dev-guide.rust-lang.org/building/new-target.html
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PULGx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PiEQa,iceoryx2,2408072218,453,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-11T20:20:44Z,2024-10-11T20:20:44Z,@jerry-xie-000 I think `aarch64-unknown-linux-gnu` should work for you. Can you try that. It just passes that to `rustc`. There might be other issues though.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PiEQa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuoiW,iceoryx2,2444920982,453,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-29T17:29:02Z,2024-10-29T17:29:02Z,@jerry-xie-000 did you have time to try my suggestion from above?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuoiW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RysN_,iceoryx2,2445984639,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-10-30T06:36:19Z,2024-10-30T06:36:19Z,"Try it, and meet another problem:
```
   Compiling atty v0.2.14
   Compiling iceoryx2-bb-log v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/log)
   Compiling indexmap v2.6.0
   Compiling iceoryx2-bb-lock-free v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/lock-free)
   Compiling clap v3.2.25
   Compiling regex-automata v0.4.8
   Compiling cexpr v0.6.0
   Compiling which v4.4.2
   Compiling tempfile v3.13.0
   Compiling regex v1.11.0
   Compiling serde_derive v1.0.210
   Compiling iceoryx2-bb-derive-macros v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/derive-macros)
   Compiling enum-iterator-derive v1.4.0
   Compiling ouroboros_macro v0.18.4
   Compiling iceoryx2-ffi-macros v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-ffi/ffi-macros)
   Compiling enum-iterator v2.1.0
   Compiling ouroboros v0.18.4
   Compiling iceoryx2-pal-posix v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/posix)
   Compiling toml v0.5.11
   Compiling iceoryx2-bb-container v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/container)
   Compiling toml_datetime v0.6.8
   Compiling serde_spanned v0.6.8
   Compiling cdr v0.2.4
   Compiling toml_edit v0.22.22
   Compiling iceoryx2-bb-system-types v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-bb/system-types)
error: failed to run custom build command for `iceoryx2-pal-posix v0.4.1 (/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/iceoryx2-pal/posix)`

Caused by:
  process didn't exit successfully: `/mnt/sda1/xzy/Workspace/device_controller/third_party/iceoryx2/target/ffi/build/rust/release/build/iceoryx2-pal-posix-bc9b3375cf6a096b/build-script-build` (exit status: 101)
  --- stdout
  cargo:rustc-link-lib=pthread
  cargo:rerun-if-changed=src/c/posix.h
  cargo:rerun-if-env-changed=TARGET
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64-unknown-linux-gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu
  cargo:rerun-if-env-changed=BINDGEN_EXTRA_CLANG_ARGS
  cargo:rerun-if-changed=src/c/posix.h

  --- stderr
  /usr/include/features-time64.h:20:10: fatal error: 'bits/wordsize.h' file not found
  thread 'main' panicked at iceoryx2-pal/posix/build.rs:46:18:
  Unable to generate bindings: ClangDiagnostic(""/usr/include/features-time64.h:20:10: fatal error: 'bits/wordsize.h' file not found\n"")
  stack backtrace:
  note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
warning: build failed, waiting for other jobs to finish...
make[2]: *** [iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step.dir/build.make:70: iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step] Error 101
make[1]: *** [CMakeFiles/Makefile2:442: iceoryx2-ffi/c/CMakeFiles/iceoryx2-build-step.dir/all] Error 2
make: *** [Makefile:136: all] Error 2
```

I haven't build the rust for arm before, so I have no idea how to fix these errors. It seems rust doesn't find 'bits/wordsize.h' in the arm64 sysroot path. My arm64 sysroot path does include this file.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RysN_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6R5C0T,iceoryx2,2447650067,453,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-30T16:03:38Z,2024-10-30T16:03:38Z,@jerry-xie-000 can you try using the `BINDGEN_EXTRA_CLANG_ARGS` env var to point to your sysroot? See also https://docs.rs/bindgen/latest/bindgen/struct.Builder.html#clang-arguments,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6R5C0T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SGQ3Y,iceoryx2,2451115480,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-11-01T01:18:12Z,2024-11-01T01:18:12Z,"Great, it build successfully after I set the `export BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/path/to/sysroot`.

Another small issue, when I run `make install`, it only copy` libiceoryx2_cxx.soãlibiceoryx2_ffi.so`  to the install folder. But when I run the example, it need `libiceoryx_platform.so and libiceoryx_hoofs.so`, these libs are left in `build\_deps\iceoryx-build\iceoryx_platform`, so I need to copy them by myself.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SGQ3Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SHdAQ,iceoryx2,2451427344,453,NA,orecham,8487595,Jeff Ithier,,NA,2024-11-01T07:25:49Z,2024-11-01T07:25:49Z,"@jerry-xie-000 

You can incorporate the build and install of these components into your build system separately using these instructions: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/iceoryx2-ffi/cxx","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SHdAQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKkug,iceoryx2,2452245408,453,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-01T17:04:34Z,2024-11-01T17:04:34Z,@jerry-xie-000 could you please compile all the steps you did to make cross-compilation work with buildroot and put it under `doc/cross-compile/buildroot.md`?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SKkug/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/453,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SQEM0,iceoryx2,2453685044,453,NA,jerry-xie-000,13086687,jerry_xie,,NA,2024-11-04T01:33:42Z,2024-11-04T01:33:42Z,Ok. I create pr: https://github.com/eclipse-iceoryx/iceoryx2/pull/502,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SQEM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/456,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/456,iceoryx2,2576134317,456,Remove unnecessary ACLs,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-09T14:38:00Z,2024-10-09T16:38:01Z,"## Brief feature description

Access Control Lists were implemented in the early stages of iceoryx2 and are not used and also not planned to be used, therefore they can be removed.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/456/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,iceoryx2,2577261704,458, Win32 API error in event open,xxshady,54737754,xshady,,CLOSED,2024-10-10T00:53:43Z,2025-01-17T17:40:06Z,"Not sure if it's a bug, probably somehow related to [this](https://github.com/eclipse-iceoryx/iceoryx2/blob/main/FAQ.md#application-does-not-remove-servicesports-on-shutdown-or-several-application-restarts-lead-to-port-count-exceeded)?

## Required information

**Operating system:** Windows 11, 23H2, `ver`: `Microsoft Windows [Version 10.0.22631.4169]`

**Rust version:** rustc 1.81.0 (eeb90cda1 2024-09-04)

**Cargo version:** cargo 1.81.0 (2dbb1af80 2024-08-20)

**iceoryx2 version:** 0.4.1

**Detailed log output:**
<details><summary>Details</summary>

```
Running `target\debug\host.exe`
        0 [D] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 20, data: ""config/iceoryx2.toml"" } }, access_mode: Read, permission: 
              Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | Unable to open file since it does not exist.
        1 [D] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path 
              { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""
              iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: 
              FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic""
               } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connectio
              n_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<2
              55> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_
              suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255
              > { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults: Defaults { p
              ublish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, subscriber_max_borrowe
              d_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscri
              ber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_value: 32 } } }
              | Failed to create config since the config file could not be opened.
        2 [W] ""Config::global_config()""
              | Default config file found but unable to read data, populate config with default values.
        3 [T] Directory { path: Path { value: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, directory_s
              tream: 0x2, file_descriptor: FileDescriptor { value: 0, is_owned: false } }
              | created
        4 [T] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, config: Configuration { pat
              h: Path { value: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: 
              FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } } }     
              | Created service root directory ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" since it did not exist before.
        5 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_n
              ode.details"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, crea
              tion_mode: Some(CreateExclusive) }
              | created
        6 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 80, data: ""c:\Temp\iceoryx2\nodes\iox2_2344370886309983727313240896.n
              ode_monitor_owner_lock"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: true, owner: None, group: None, truncate_size: 
              None, creation_mode: Some(CreateExclusive) }
              | created
        7 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\iox2_2344370886309983727313240896.n
              ode_monitor"" } }, access_mode: ReadWrite, permission: Permission(128), has_ownership: true, owner: None, group: None, truncate_size: None, creat
              ion_mode: Some(CreateExclusive) }
              | created
        8 [T] ""ProcessGuard::new()""
              | create process state ""c:\Temp\iceoryx2\nodes\iox2_2344370886309983727313240896.node_monitor"" for monitoring
        9 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       10 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       11 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       12 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       13 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       14 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       15 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       16 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       17 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       18 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       19 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       20 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       21 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       22 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       23 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       24 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       25 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       26 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       27 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       28 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       29 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       30 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       31 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       32 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       33 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       34 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       35 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       36 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       37 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       38 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       39 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       40 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       41 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       42 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       43 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       44 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       45 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       46 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       47 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       48 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       49 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       50 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       51 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       52 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       53 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       54 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       55 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       56 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       57 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       58 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       59 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       60 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       61 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       62 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       63 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false, owner: Non
              e, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
< Win32 API error > C:\Users\xshad\.cargo\registry\src\index.crates.io-6f17d22bba15001f\iceoryx2-pal-posix-0.4.1\src\windows\mman.rs:174 OpenFileMappingA(FILE_MAP_ALL_ACCESS, false as i32, name as *const u8)
 [ 2 ] The system cannot find the file specified.

       64 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b658a14a0
              58f0680bd49c7d22c200d81a4c0670c.dynamic"" } }, size: 0, is_memory_locked: false, has_ownership: true, permission: Permission(448), creation_mode:
               None, zero_memory: true, access_mode: ReadWrite, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       65 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }, supplementar
              y_size: 0, has_ownership: false, config: Configuration { suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, pref
              ix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Te
              mp\iceoryx2\"" } }, _data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, timeout: 500ms, initializer: , _phantom_data: Phantom
              Data<iceoryx2::service::dynamic_config::DynamicConfig> }
              | Failed to open  since a shared memory with that name does not exists.
       66 [D] BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              a: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([]), messaging_pa
              ttern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: SharedNode { id: NodeI
              d(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520730, nanoseconds
              : 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, name: NodeName {
               value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, ro
              ot_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<
              255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher
              _data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName 
              { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { le
              n: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection
              "" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value:
               FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monito
              r"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: F
              ixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, 
              defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_buffer_size: 2, 
              subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unable_to_deliver_st
              rategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, event_id_max_valu
              e: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: false, .. } }, _
              details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { val
              ue: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: fal
              se, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox
              2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phantom_data: Phanto
              mData<iceoryx2::service::ipc::Service> }
              | Failed to open dynamic service information since the dynamic storage could not be opened.
       67 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       68 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_b658a14a058f0680bd49c7d22c2
              00d81a4c0670c.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None,
               creation_mode: None }
              | opened
       69 [D] Builder { base: BuilderWithServiceType { service_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64
              > { len: 40, data: ""b658a14a058f0680bd49c7d22c200d81a4c0670c"" } }), service_name: ServiceName { value: ""EveryTick"" }, attributes: AttributeSet([
              ]), messaging_pattern: Event(StaticConfig { max_notifiers: 16, max_listeners: 2, max_nodes: 36, event_id_max_value: 32 }) }, shared_node: Shared
              Node { id: NodeId(UniqueSystemId { value: 2344370886309983727313240896, pid: 17216, creation_time: Time { clock_type: Realtime, seconds: 1728520
              730, nanoseconds: 127088600 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 8, data: ""host.exe"" } }, 
              name: NodeName { value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/ic
              eoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: Fixe
              dSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services
              "" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_s
              uffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByte
              String<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, da
              ta: "".connection"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { director
              y: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, dat
              a: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: Fil
              eName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruc
              tion: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_
              buffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 1, enable_safe_overflow: true, unab
              le_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 2, max_notifiers: 16, max_nodes: 36, e
              vent_id_max_value: 32 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {}, poisoned: 
              false, .. } }, _details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { 
              path: Path { value: FixedSizeByteString<255> { len: 51, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896"" } }, suffix: FileName { valu
              e: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, ha
              s_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983
              727313240896\iox2_node.details"" } }), file_descriptor: FileDescriptor { value: 0, is_owned: true }, has_ownership: false }, len: 1114 } }, _phan
              tom_data: PhantomData<iceoryx2::service::ipc::Service> }, verify_max_notifiers: false, verify_max_listeners: false, verify_max_nodes: false, ver
              ify_event_id_max_value: false }
              | Unable to open event service since the dynamic service information could not be opened (DynamicStorageOpenError(DoesNotExist)). This could ind
              | icate a corrupted system or a misconfigured system where services are created/removed with a high frequency.
       70 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 109, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_
              b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, gr
              oup: None, truncate_size: None, creation_mode: None }
              | opened
       71 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_b658a14a058f0680bd49c7d22c200d81a4c0670c.service_tag""
       72 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_n
              ode.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_
              mode: None }
              | opened
       73 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_n
              ode.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_
              mode: None }
              | opened
       74 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896\iox2_node.details""
       75 [T] ""Directory::remove""
              | removed ""c:\Temp\iceoryx2\nodes\2344370886309983727313240896""
       76 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_2344370886309983727313240896.node_monitor""
       77 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_2344370886309983727313240896.node_monitor_owner_lock""
Error: EventOpenError(ServiceInCorruptedState)
```
</code>
</details>

**Observed result or behaviour:**
event notifier:
```rs
fn main() -> Result<(), Box<dyn std::error::Error>> {
    use core::time::Duration;
    use iceoryx2::prelude::*;

    set_log_level(LogLevel::Trace);

    const CYCLE_TIME: Duration = Duration::from_millis(10);

    let node = NodeBuilder::new().create::<ipc::Service>()?;

    let event = node
        .service_builder(&""EveryTick"".try_into()?)
        .event()
        .open_or_create()?;

    let notifier = event.notifier_builder().create()?;

    while let NodeEvent::Tick = node.wait(CYCLE_TIME) {
        notifier.notify()?;
    }

    Ok(())
}
```

event listener:
```rs
fn main() -> Result<(), Box<dyn std::error::Error>> {
    use iceoryx2::prelude::*;

    let node = NodeBuilder::new().create::<ipc::Service>()?;

    let event = node
        .service_builder(&""EveryTick"".try_into()?)
        .event()
        .open_or_create()?;

    let event_listener = event.listener_builder().create()?;

    while let Some(id) = event_listener.blocking_wait_one()? {
        println!(""woke up {id:?}"");
    }

    Ok(())
}
```

**Expected result or behaviour:**
No error or at least more readable one?

**Conditions where it occurred / Performed steps:**
For the first time notifier and listener run correctly, the second time win32 errors occur (ctrl+c, cargo run again)
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVB0D,iceoryx2,2404654339,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-10T10:04:37Z,2024-10-10T10:04:37Z,"@xxshady I can confirm the bug, also partially on Linux. It is actually two separate issues.

The cause is `event_listener.blocking_wait_one()` in the `listener.rs`. When you press CTRL+c you send a SIGINT/SIGTERM signal and cause the application to abnormally terminate since no signal handler was registered and then also the resources of the process are not cleaned up.

If you adjust the code to this, the termination signal should be handled cleanly.

```rust
// you need to add iceoryx2-bb-posix as dependency into your Cargo.toml
use iceoryx2_bb_posix::signal::*;

// ...

while !SignalHandler::termination_requested() {
    match event_listener.blocking_wait_one() {
        Ok(Some(id)) => println!(""woke up {id:?}""),
        Ok(None) => (),
        Err(_) => break,
    }
}
```

So whenever you have a blocking call you need to register some kind of signal handler so that the application can cleanly terminate when CTRL+c is pressed.

Another issue is, that we have introduced with v0.4. a stale resource cleanup when a node crashes or does not cleanup the resources. Then another node takes over and cleans the resources.
On Linux it is working and you see something like:
```
        6 [W] ""Node::<iceoryx2::service::ipc::Service>::cleanup_dead_nodes()""
              | Dead node (NodeId(UniqueSystemId { value: 1667667095615766886193595845
              | , pid: 34245, creation_time: Time { clock_type: Realtime, seconds: 172
              | 8553806, nanoseconds: 90404414 } })) detected
```
In your case this should happen as well but it seems there is a problem on Windows.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVB0D/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvP7F,iceoryx2,2579300037,458,NA,gyk,4338714,Yukun Guo,,NA,2025-01-09T06:56:02Z,2025-01-09T06:56:02Z,"@elfenpiff On Windows, when a node is started after an old iceoryx2 process was abruptly terminated, `Node::list` does not find any nodes except the current one, could it be the reason `cleanup_dead_nodes` does not work?

In the case that a node gets stuck due to this OpenFileMapping error, what can we do to clean up stale resources (other than manually removing files in `C:\Temp\`)? Can we fall back to `CreateFileMappingA` in this [branch](https://github.com/eclipse-iceoryx/iceoryx2/blob/v0.5.0/iceoryx2-pal/posix/src/windows/mman.rs#L176-L180), supposing all the files for static storage are present on disk?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvP7F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxV1L,iceoryx2,2579848523,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-09T11:01:54Z,2025-01-09T11:01:54Z,"@gyk Sadly, no, since we do not know what size they have or if they are currently used by something else. But I will look into this issue and can maybe provide a bug fix in the next few days.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxV1L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aMdMD,iceoryx2,2586956547,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-13T12:19:01Z,2025-01-13T12:19:01Z,"@gyk @xxshady I unraveled the issue with Windows. Shared Memory is not persistent in Windows. Whenever the last process that holds a shared memory handle terminates or crashes Windows removes the memory-mapped file from the file system. When a new process starts, it detects that there seems to exist the service but the dynamic segment of the service is missing - since the last process holding it crashed. So, it is correctly identified as corrupted, and the cleanup aborts here.
I will adjust the code so that corrupted services are also removed, which should solve the Windows issue.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aMdMD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aPHcZ,iceoryx2,2587653913,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-13T16:51:55Z,2025-01-13T16:51:55Z,@gyk @xxshady The issue is fixed on the current main branch. Could you please verify if the bug is now solved for you?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aPHcZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aXIUm,iceoryx2,2589754662,458,NA,gyk,4338714,Yukun Guo,,NA,2025-01-14T12:12:18Z,2025-01-14T12:12:18Z,"@elfenpiff Testing with the `publish_subscribe_dyn_subscriber` example, it now reports different error messages, but still raises a `PublishSubscribeCreateError(ServiceInCorruptedState)`:

```
> cargo run --example publish_subscribe_dyn_subscriber
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.92s
     Running `target\debug\examples\publish_subscribe_dyn_subscriber.exe`
< Win32 API error > iceoryx2-pal\posix\src\windows\mman.rs:230 CreateFileA(shm_file_path(name, SHM_STATE_SUFFIX).as_ptr(), GENERIC_WRITE |
GENERIC_READ, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
core::ptr::null::<SECURITY_ATTRIBUTES>(), CREATE_NEW, FILE_ATTRIBUTE_NORMAL,
0,)
 [ 80 ] The file exists.

Error: PublishSubscribeCreateError(ServiceInCorruptedState)
error: process didn't exit successfully: `target\debug\examples\publish_subscribe_dyn_subscriber.exe` (exit code: 1)
```

In the `Err` branch, I can remove the stale files, but `cleanup_dead_nodes` does not work.

Is it expected behavior?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aXIUm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6abT_i,iceoryx2,2590851042,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-14T18:45:37Z,2025-01-14T18:45:37Z,"@gyk No, it is not - thanks for the finding! It is a specialty in Windows, where we require shared memory state files. It slipped since process crashes are hard to test - especially on Windows.

But it shouldn't be hard to fix - I will create another pull request and ping you when this is done.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6abT_i/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aiz7M,iceoryx2,2592816844,458,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-15T13:08:57Z,2025-01-15T13:08:57Z,@gyk Could you please verify again that the bug is now solved on your side. I tested it with the same example you have and killing a process with the task manager and then start it again works now fine in main with the merged PR: #592 ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aiz7M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/458,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6a48Lz,iceoryx2,2598617843,458,NA,gyk,4338714,Yukun Guo,,NA,2025-01-17T15:31:27Z,2025-01-17T15:31:27Z,@elfenpiff Have tested a few examples and found them work flawlessly. I can confirm the issue is resolved on my end. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6a48Lz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/459,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/459,iceoryx2,2578464252,459,Proposal: use rust Layout to calculate Sample Layout,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,OPEN,2024-10-10T10:56:41Z,2024-10-10T11:12:51Z,"Method `sample_layout` calculates the layout by appending and call functions with unsafe. 
https://github.com/eclipse-iceoryx/iceoryx2/blob/ca22976c4bce5f9b92c53e3a0e1571ad9d8a086d/iceoryx2/src/service/static_config/message_type_details.rs#L104-L118

I'm not sure why we use this approach to calculate layout(probably to keep the same with iceoryx in c++). I found we can rely on rust to calculate the layout as if we define a structure for the whole sample. Hence, `sample_layout_genric::<i32, bool, i64>(2)` works as if we define a structure `S1`:
```rust
        #[repr(C)]
        struct S1 {
            _a: i32,
            _user_header: bool,
            _layout: [i64; 2],
        }
```

The sample_layout_genric is shown below:

```rust
    pub(crate) fn sample_layout_genric<Header, UserHeader, Payload>(&self, n: usize) -> Layout {
        let layout_header = Layout::new::<Header>();
        let layout_user_header = Layout::new::<UserHeader>();
        let layout_array = Layout::array::<Payload>(n).ok().unwrap();
        layout_header
            .extend(layout_user_header)
            .ok()
            .unwrap()
            .0
            .extend(layout_array)
            .ok()
            .unwrap()
            .0
            .pad_to_align()
    }
```

I have the committed the [change](https://github.com/xieyuschen/iceoryx2/commit/d40956c02283626f9cdc6913bc77c39d9f5f373a) for you to check in my forked repo.

Do you think it's a better solution comparing with current one? Note that I don't know whether we have the compatible concerns, so please let me know if the underlying layout calculation is crucial. 

@elfenpiff @elBoberido @orecham 


 ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/459/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/459,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVke-,iceoryx2,2404796350,459,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-10T11:08:46Z,2024-10-10T11:08:46Z,"@xieyuschen it seems that I can look at your proposal earliest the beginning of next week. But when wrote this piece of code I was still coming from the C++ world and was unaware of `extend` or `pad_to_align` in `Layout` so most likely your approach is the more idiomatic one.

If all corner cases are tested and the tests are passed for both approaches I would prefer your proposal.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVke-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/459,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVmhf,iceoryx2,2404804703,459,NA,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,NA,2024-10-10T11:12:50Z,2024-10-10T11:12:50Z,"> @xieyuschen it seems that I can look at your proposal earliest the beginning of next week. But when wrote this piece of code I was still coming from the C++ world and was unaware of `extend` or `pad_to_align` in `Layout` so most likely your approach is the more idiomatic one.
> 
> If all corner cases are tested and the tests are passed for both approaches I would prefer your proposal.

Acked. The calculated layouts are different between the current approach and my proposal, so that's probably a concern for the compatibility issue. I will try to revise the existing code for the project to test, so we can know more about this approach when you dive into it next week.  ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6PVmhf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/460,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/460,iceoryx2,2578596325,460,Developer permissions for resources,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-10T11:42:41Z,2024-10-16T13:14:29Z,"## Brief feature description

When deploying iceoryx2 in a docker environment with inconsistent user setup, meaning that every docker container and the host are using a contradicting `/etc/passwd`, `/etc/group` then the default permissions prevent that a connection can be established between them.

To solve this, a flag `development-permissions` will be introduced. It will grant read-and-write access to every process, with the downside that this raises some security concerns since every process can modify the underlying resources. But this can be helpful during development when the permissions and final setup are not yet clear. 

## ToDo 

 * [x] Add feature flag to rust and cargo
 * [x] Add `dev_permissions` flag to cmake
 * [x] Add `dev_permissions` flag to bazel","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/460/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/464,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/464,iceoryx2,2586081208,464,Create File Logger,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-14T13:38:27Z,2024-11-01T10:30:39Z,"## Brief feature description

Instead of logging everything to the console, iceoryx2 shall also provide a file logger. It must be threadsafe without slowing down the hot path.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/464/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/473,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/473,iceoryx2,2592022670,473,Add support for `getrlimit(RLIMIT_AS)` in macOS platform abstraction,orecham,8487595,Jeff Ithier,,OPEN,2024-10-16T14:10:17Z,2024-10-16T14:10:17Z,"## Brief feature description

Required for functionality to get system configuration on macOS.

## Detailed information

Fetching the system configuration on macOS fails with this error:

```
        0 [F] ""ProcessResourceLimit::soft_limit""
              | This should never happen! Unable to acquire soft limit for MaxSizeOfTotalMemory due to an unknown error (errno { name = ""EINVAL"", value = 22, details = ""Invalid argument"" }).
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/473/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/475,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/475,iceoryx2,2592048404,475,Use an alternative approach to make version available in `PackageVersion`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-16T14:19:28Z,2024-10-16T16:03:10Z,"## Brief feature description

Currently, the `iceoryx2_bb_elementary::PackageVersion` uses the env variables `CARGO_PKG_VERSION_{MAJOR|MINOR|PATCH}` to acquire the crate version. This is essential, since this number is also stored in every shared memory construct to prevent a communication between incompatible iceoryx2 versions. Sadly, those env variables are not set by Bazel and depend on the deployed environment that does not have to be cargo. Therefore, we need a method to set the iceoryx2 version number in code and ensure that it is consistent with `CARGO_PKG_VERSION_**` stuff.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/475/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/476,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/476,iceoryx2,2592116282,476,Use feature instead of exporting the crate for testing with hidden doc,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,OPEN,2024-10-16T14:44:42Z,2024-10-16T14:57:43Z,"Currently, iceoryx exposes an API for testing purpose and hides its docs. I think a more reasonable approach is define a feature called **iox2-test**  for it so we can ensure it won't be involved inside users code except the explicit feature setting up. A testing feature is needed because the default `test` doesn't support cross package usage.

https://github.com/eclipse-iceoryx/iceoryx2/blob/558c727395f50793f4e341dae73dd7315c4f6a4f/iceoryx2-bb/elementary/src/bump_allocator.rs#L17-L20
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/476/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481,iceoryx2,2594989372,481,"Apart from the memory layout, iceoryx2 also requires the type name to be the same.",XiaoPengYouCode,120481176,Zhongjin Lu,,CLOSED,2024-10-17T14:54:42Z,2024-10-30T16:07:13Z,"Apart from the memory layout, iceoryx2 also requires the type name to be the same.

The Rust side uses `core::any::type_name()` to get the undecorated name, like `""std::option::Option<std::string::String>""`:

https://github.com/eclipse-iceoryx/iceoryx2/blob/a657228f03d9a7ed040616cedff940b43bd447a1/iceoryx2/src/service/static_config/message_type_details.rs#L44-L56

However, the C++ side uses `typeid().name`, whose format is undefined and left to the compiler. Acoording to [this question](https://stackoverflow.com/questions/4465872/why-does-typeid-name-return-weird-characters-using-gcc-and-how-to-make-it-prin), on GCC/Clang it's the mangled name, while on MSVC it's the demangled name. So the type name is not only different from Rust and C++, but also different from GCC/Clang and MSVC.

https://github.com/eclipse-iceoryx/iceoryx2/blob/a657228f03d9a7ed040616cedff940b43bd447a1/iceoryx2-ffi/cxx/include/iox2/message_type_details.hpp#L21-L42

Unfortunately, looks like there is currently no way in iceoryx2 to customize the type name.

_Originally posted by @Chaoses-Ib in https://github.com/eclipse-iceoryx/iceoryx2/discussions/480#discussioncomment-10972638_","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QO7CG,iceoryx2,2419830918,481,NA,Chaoses-Ib,50246090,,Chaos-es@outlook.com,NA,2024-10-17T15:14:39Z,2024-10-17T15:14:39Z,"Sometimes even GCC and Clang will mangle the same name in different ways. The most notable case is lambda, but other cases may also exist. And even with the same compiler, it may change with the compiler version since there is no guarantee.

In my opinion, the full type name should really not be used to identify the schema, even in Rust. Using it would couple the project structure with the implementation and is quite unexpected.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6QO7CG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuoAd,iceoryx2,2444918813,481,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-10-29T17:28:01Z,2024-10-29T17:28:01Z,See also #480. We are on it but it will take some time until it will work seamlessly.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6RuoAd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/481,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6R5Fpv,iceoryx2,2447661679,481,NA,XiaoPengYouCode,120481176,Zhongjin Lu,,NA,2024-10-30T16:07:10Z,2024-10-30T16:07:10Z,"Yes I have see the discussion, I will close this issue!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6R5Fpv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/483,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/483,iceoryx2,2603614879,483,Extend pub/sub benchmark to include memory ops,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-21T20:40:53Z,2024-10-25T10:21:47Z,"## (Code) Example Of Cumbersome API

Currently, the benchmark considers only a true zero-copy use case. By adding a parameter also a copy into the sample shall be simulated and measured.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/483/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/486,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/486,iceoryx2,2605764344,486,Bazel doesn't work in MacOS ,xieyuschen,52945328,Griffin,xieyuschen@gmail.com,OPEN,2024-10-22T15:17:02Z,2024-10-23T09:48:12Z,"I could run `bazel test //...` in main latest commit in my ubuntu22.04, but I encountered several problems in macOS when i tried my new feature in macos https://github.com/eclipse-iceoryx/iceoryx2/pull/478#issuecomment-2428199107

I have listed some problems I encountered.

### 1(fixed): bindgen issue

The issue is propably caused by incorrect release downloading.
```
/bin/bash: external/bindgen/bindgen: cannot execute binary file
```

<details><summary> My Solution(Click me to unfold) </summary>

```diff
-    sha256 = ""b7e2321ee8c617f14ccc5b9f39b3a804db173ee217e924ad93ed16af6bc62b1d"",
-    strip_prefix = ""bindgen-cli-x86_64-unknown-linux-gnu"",
-    urls = [""https://github.com/rust-lang/rust-bindgen/releases/download/v0.69.5/bindgen-cli-x86_64-unknown-linux-gnu.tar.xz""],
+   strip_prefix = ""bindgen-cli-aarch64-apple-darwin"",
+   urls = [""https://github.com/rust-lang/rust-bindgen/releases/download/v0.69.5/bindgen-cli-aarch64-apple-darwin.tar.xz""],
```

</details>

### 2(fixed) cbindgen issue
It's similar, the downloading binary is still for linux only. Download its source code and build it during the project works.

<details><summary> My Solution(Click me to unfold) </summary>

```diff
--- a/WORKSPACE.bazel
+++ b/WORKSPACE.bazel
@@ -50,9 +53,8 @@ rust_register_toolchains(
 maybe(
     name = ""bindgen"",
     repo_rule = http_archive,
-    sha256 = ""b7e2321ee8c617f14ccc5b9f39b3a804db173ee217e924ad93ed16af6bc62b1d"",
-    strip_prefix = ""bindgen-cli-x86_64-unknown-linux-gnu"",
-    urls = [""https://github.com/rust-lang/rust-bindgen/releases/download/v0.69.5/bindgen-cli-x86_64-unknown-linux-gnu.tar.xz""],
+    strip_prefix = ""bindgen-cli-aarch64-apple-darwin"",
+    urls = [""https://github.com/rust-lang/rust-bindgen/releases/download/v0.69.5/bindgen-cli-aarch64-apple-darwin.tar.xz""],

+rust_repositories()
+
+http_archive(
+    name = ""cbindgen_source"",
+    urls = [""https://github.com/mozilla/cbindgen/archive/refs/tags/0.26.0.tar.gz""],
 )
 
+load(""@rules_rust//rust:defs.bzl"", ""rust_library"")

--- a/iceoryx2-ffi/ffi/BUILD.bazel
+++ b/iceoryx2-ffi/ffi/BUILD.bazel
@@ -20,9 +20,19 @@ filegroup(
     srcs = glob([""**""]),
 )
 
-filegroup(
+
+load(""@rules_rust//rust:defs.bzl"", ""rust_binary"")
+
+rust_binary(
     name = ""cbindgen-cli"",
-    srcs = [""@cbindgen//file""],
+    srcs = [
+        ""external/cbindgen_source/src/main.rs"",
+        ""external/cbindgen_source/build.rs"",
+    ],
+    data = [
+        ""external/cbindgen_source/Cargo.toml"",
+        ""external/cbindgen_source/Cargo.lock"",
+    ],
 )
```

</details>

### 3: enable_if_pointer_t not in std

I have encountered the issue listed below. I briefly searched it and looks like it's a compiler version issue.
```
external/iceoryx/iceoryx_platform/generic/include/iceoryx_platform/atomic.hpp:283:5: error: no template named 'enable_if_pointer_t'
    enable_if_pointer_t<U> fetch_sub(std::ptrdiff_t value, std::memory_order order = std::memory_order_seq_cst) noexcept
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/486/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/488,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/488,iceoryx2,2613509328,488,Implement streaming operator and `std::hash` for `WaitSetAttachmentId`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-25T08:57:52Z,2024-10-25T15:19:14Z,"## Improvement Suggestion

 * streaming operator to support debugging by printing out the contents of the `WaitSetAttachmentId`
 * `std::hash<WaitSetAttachmentId` to add it to a  hashmap.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/488/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/490,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/490,iceoryx2,2618140130,490,Loan slices from C/C++ API,orecham,8487595,Jeff Ithier,,CLOSED,2024-10-28T11:27:11Z,2024-11-07T13:17:31Z,"## Brief feature description

Functionality for loaning slices is not yet implemented in the C/C++ API.

## Detailed information

This examples should be functional:

1. https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/cxx/publish_subscribe_dynamic_data

Furthermore, a C example should be added.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/490/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/491,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/491,iceoryx2,2618145890,491,Provide error description strings via C/C++ API,orecham,8487595,Jeff Ithier,,CLOSED,2024-10-28T11:29:44Z,2024-11-20T10:34:51Z,"## Brief feature description

For convenience / logging purposes, an API to retrieve a pointer to a string describing each error variant would be useful.

## Detailed information

1. Description strings should be statically compiled into the binary to avoid dynamic allocations
2. The API should provide a pointer to the correct string given an error variant as input","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/491/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/493,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/493,iceoryx2,2624028449,493,Add pubsub/event tests to ensure service is usable when ports still exist,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-10-30T12:59:34Z,2024-10-30T16:29:30Z,"## Brief feature description

Services must be available as long as a port is still available. In this issue we write tests that proof this.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/493/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,iceoryx2,2626339987,496,"ServiceType use 'Local', subscriber can not receive data, in C++ binding language examples",xfsaid,22762407,,,CLOSED,2024-10-31T09:00:53Z,2024-11-15T04:13:05Z,"**Operating system:**
Ubuntu20.04.2  x86 

**Version:**
  cmake : 3.31.0-rc3
  cargo : 1.82.0
  gcc : 9.4.0
  g++ : 9.4.0

**Files:**
examples/cxx/publish_subscribe/src/publisher.cpp
examples/cxx/publish_subscribe/src/subscriber.cpp
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SA0cH,iceoryx2,2449688327,496,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-31T12:04:45Z,2024-10-31T12:04:45Z,"@xfsaid `ServiceType::Local` means that you can only communicate in one single process between threads. Therefore, when you use `ServiceType::Local` all publishers and subscribers must be in the same process - they can be in different threads though.

Does this explanation solve your issue?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SA0cH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SBO3W,iceoryx2,2449796566,496,NA,xfsaid,22762407,,,NA,2024-10-31T13:04:25Z,2024-10-31T13:04:25Z,"OK, thank you very much. I am not familiar with the interface.
When I used the ""IPC"" option, I found that the larger the structure to be transmitted, the slower the transmission speed. I thought that the ""LOCAL"" option was used for transmission through shared memory. I misunderstood.
However, why does the time required for transmission increase as the structure increases?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SBO3W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SCXWj,iceoryx2,2450093475,496,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-10-31T14:55:29Z,2024-10-31T14:55:29Z,"@xfsaid The transmission latency (speed) should stay constant - independent of the structure size. Could you share your code snippet here that shows how you send and receive your large structure?

Are you using the `loan` and `send` API or do you call `send_copy` which creates a copy of the transmitted data which has a significant performance impact?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6SCXWj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TNiHd,iceoryx2,2469798365,496,NA,xfsaid,22762407,,,NA,2024-11-12T07:37:17Z,2024-11-12T07:37:17Z,"@elfenpiff  I know the reason. My publisher sends messages at a frequency of 1000Hz.
I added an array of 1M to the test structure (path: examples/cxx/publish_subscribe/src/transmission_data.hpp).
`struct TransmissionData {`
`    std::int32_t x;`
`    std::int32_t y;`
`    double funky;`
`    char c[1024*1024];`
`}`
I found that the efficiency of the program is affected by the size of the array.
By default, when the max_slice_len interface is not called, the CPU usage will increase from 3% to 35% when the array is larger than 1M.

Now I know that the publisher needs to call this interface: max_slice_len(uint64_t).
`auto publisher = service.publisher_builder()`
`    .max_slice_len(1024 * 1024 + 100)`
`    .create();`

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TNiHd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TO6T4,iceoryx2,2470159608,496,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-12T10:29:12Z,2024-11-12T10:29:12Z,"@xfsaid 

Please do not use `max_slice_len` in this case. It is an API-Bug on our side that this is available for non-`iox::Slice` types. The idea behind this call is that you can define the length of the dynamic array you want to handle - we call in this case slice.

Translated to your use case, it would mean if your construct the service with a payload of `iox::Slice<TransmissionData>` to have a dynamic array of `TransmissionData` elements.

```cxx
auto service = node.service_builder(ServiceName::create(""Service With Dynamic Data"")
                   .publish_subscribe<iox::Slice<TransmissionData>>()
                   .open_or_create()
                   .expect(""successful service creation/opening"");
```

But this is not want you want in your use case!

When `TransmissionData` has a size of ~ 1MB and you allocate it with `publisher.loan()` then the whole 1MB is always initialized, meaning that all elements of `TransmissionData::c` are zeroed which is very CPU demanding. 
This is why we offer `publisher.loan_uninit()`. It returns you uninitialized memory and the CPU usage should be decreased.

The summary:

* `publisher.loan()` is best for:
   * small data
   * data that must be initialized before using it
* `publisher.loan_uninitialized` is best for:
   * large data (roughly > 4kb)
   * data that is initialized explicitly by the user  
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TO6T4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TW_EW,iceoryx2,2472276246,496,NA,xfsaid,22762407,,,NA,2024-11-13T03:07:32Z,2024-11-13T03:07:32Z,"@elfenpiff 
Thank you very much for your explanation.
To add, I did the test on ARM hardware.
But I always used the loan_uninit interface. 
After my test, I found that the high CPU usage was caused by calling the interface ""sample.write_payload"". After commenting this line of code, although the data received by the subscriber is 0, the CPU usage will be very low.

I'll post my test code.

examples/cxx/publish_subscribe/src/transmission_data.hpp
```c++
#ifndef IOX2_EXAMPLES_TRANSMISSION_DATA_HPP
#define IOX2_EXAMPLES_TRANSMISSION_DATA_HPP

#include <cstdint>
#include <iostream>

struct TransmissionData {
    std::int32_t x;
    std::int32_t y;
    double funky;
    char c[1024*1024];
};

inline auto operator<<(std::ostream& stream, const TransmissionData& value) -> std::ostream& {
    stream << ""TransmissionData { x: "" << value.x << "", y: "" << value.y << "", funky: "" << value.funky << "" }"";
    return stream;
}

#endif
```

examples/cxx/publish_subscribe/src/subscriber.cpp
```c++
#include <iostream>

#include ""iox/duration.hpp""
#include ""iox2/node.hpp""
#include ""iox2/service_name.hpp""
#include ""iox2/service_type.hpp""
#include ""transmission_data.hpp""

constexpr iox::units::Duration CYCLE_TIME = iox::units::Duration::fromMilliseconds(1); // fromMilliseconds fromSeconds

auto main() -> int {
    using namespace iox2;
    auto node = NodeBuilder().create<ServiceType::Ipc>().expect(""successful node creation"");

    auto service = node.service_builder(ServiceName::create(""My/Funk/ServiceName"").expect(""valid service name""))
                       .publish_subscribe<TransmissionData>()
                    //    .history_size(100)
                       .subscriber_max_buffer_size(200) // å³å®äºç¼å­çå¤§å°
                       .subscriber_max_borrowed_samples(200) // è®¢éèå¯ä»¥åç¨çæå¤§æ ·æ¬æ°é
                       .open_or_create()
                       .expect(""successful service creation/opening"");

    auto subscriber = service.subscriber_builder().create().expect(""successful subscriber creation"");
    std::cout << ""history_size:"" << service.static_config().history_size() << std::endl;
    std::cout << ""subscriber_max_borrowed_samples:"" << service.static_config().subscriber_max_borrowed_samples() << std::endl;


    int counter = 0;
    while (node.wait(CYCLE_TIME).has_value()) {
        auto sample = subscriber.receive().expect(""receive succeeds"");
        while (sample.has_value()) {
            counter += 1;
            if (counter % 1000 == 0)
            {
                std::cout << ""received: "" << sample->payload() << "", counter: "" << counter << std::endl;
            }
            sample = subscriber.receive().expect(""receive succeeds"");
        }
    }

    std::cout << ""exit"" << std::endl;

    return 0;
}
```

examples/cxx/publish_subscribe/src/publisher.cpp
```c++
#include ""iox/duration.hpp""
#include ""iox2/node.hpp""
#include ""iox2/sample_mut.hpp""
#include ""iox2/service_name.hpp""
#include ""iox2/service_type.hpp""
#include ""transmission_data.hpp""

#include <iostream>
#include <utility>

constexpr iox::units::Duration CYCLE_TIME = iox::units::Duration::fromMilliseconds(1); // fromMilliseconds fromSeconds

auto main() -> int {
    using namespace iox2;
    auto node = NodeBuilder().create<ServiceType::Ipc>().expect(""successful node creation"");

    auto service = node.service_builder(ServiceName::create(""My/Funk/ServiceName"").expect(""valid service name""))
                       .publish_subscribe<TransmissionData>()
                       .subscriber_max_buffer_size(200) // å³å®äºç¼å­çå¤§å°
                       .subscriber_max_borrowed_samples(200) // è®¢éèå¯ä»¥åç¨çæå¤§æ ·æ¬æ°é
                       .open_or_create()
                       .expect(""successful service creation/opening"");

    auto publisher = service.publisher_builder()
                        // .max_slice_len(1024 * 1024 + 100)
                        .create().expect(""successful publisher creation"");

    auto counter = 0;
    while (node.wait(CYCLE_TIME).has_value() && counter < (1000 * 60 * 60 + 5)) {
        counter += 1;

        auto sample = publisher.loan_uninit().expect(""acquire sample"");

        sample.write_payload(TransmissionData { counter, counter * 3, counter * 812.12 }); // NOLINT
        auto initialized_sample = assume_init(std::move(sample));

        send(std::move(initialized_sample)).expect(""send successful"");

        if (counter % 1000 == 0)
        {
            std::cout << ""Send sample "" << counter << "" ..."" << std::endl;
        }

    }

    std::cout << ""exit"" << std::endl;

    return 0;
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TW_EW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TaJHJ,iceoryx2,2473103817,496,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-13T10:23:52Z,2024-11-13T10:23:52Z,"@xfsaid the high CPU usage is expected in the line `sample.write_payload(...)`. Memory read/write operations are always expensive this is why we try do reduce them as much as possible and use zero-copy communication in the first place.

But you can optimize it further by reducing the memory write operations. `sample.write_payload(...)` creates a new `TransmissionData` instance and copies this in the shared memory which is maybe unnecessary when not all member need to be initialized.
Let's assume you only need to initialize `x`, `y`, and the first 100 elements of `c`. You can do this explicitly and leave the rest uninitialized which saves you a lot of memory write operations.

```cxx
auto sample = publisher.loan_uninit().expect(""acquire sample"");
sample->x = 123;
sample->y = 856;
for(auto n = 0; n < 100; ++n) {
  sample->c[n] = 5;
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TaJHJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/496,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TcF7g,iceoryx2,2473615072,496,NA,xfsaid,22762407,,,NA,2024-11-13T13:24:56Z,2024-11-13T13:24:56Z,"@elfenpiff 
Thank you very much for your explanation, I understand.

Regarding the problem that many header files are missing after executing the ""make install"" command, I will create a new issue.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TcF7g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/497,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/497,iceoryx2,2628777372,497,ResizableSharedMemory,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-01T10:33:46Z,2024-12-01T18:27:58Z,"## Brief feature description

We require a struct that allows us to resize `SharedMemory` concepts during their lifetime.

It shall be a generic struct that has the same interface as the `SharedMemory` concept but with an extended behavior. As soon as the underlying pool allocator bucket size is exceeded it will increase the pool allocator bucket size, allocate a new shared memory segment and uses this.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/497/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/498,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/498,iceoryx2,2629193818,498,Cleanup MessageTypeDetails usage,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-01T14:48:04Z,2024-11-06T11:05:06Z,"## (Code) Example Of Cumbersome API

The message type details usage in the internal C API is confusing and needs to be cleaned up","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/498/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/500,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/500,iceoryx2,2630368625,500,Expose UniquePortId value in C/C++ API,orecham,8487595,Jeff Ithier,,CLOSED,2024-11-02T10:21:30Z,2024-11-19T11:46:37Z,"## Brief feature description

Make it possible to get the value of `UniquePortIds` in the CXX API

## Detailed information

Currently only comparison and equality operations are supported, however users on the CXX layer have no access to the bytes of the ID.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/500/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/503,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/503,iceoryx2,2637921030,503,Waitset example with UnixDatagramSocket,elBoberido,56729607,Mathias Kraus,,OPEN,2024-11-06T12:11:01Z,2024-11-06T12:44:43Z,"## Brief feature description

The iceoryx2 Waitset is much more powerful than the one from iceoryx1 since it can also wait on file descriptors. The event multiplexing example should be extended to show this capability.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/503/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/504,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/504,iceoryx2,2638001052,504,Introduce `SlotMap` to manage multiple shared memory data segments,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-06T12:47:09Z,2024-11-19T08:48:12Z,"## Brief feature description

To enable the publisher to have multiple data segments, we need to add the data segment id to the pointer. This only works when the segment id is static.
A `SlotMap` is the ideal container to store things with static id's to access/manage them.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/504/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/507,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/507,iceoryx2,2644061597,507,`WaitSet` adjustments,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-08T13:29:40Z,2024-11-12T00:13:02Z,"## (Code) Example Of Cumbersome API

When `WaitSet::stop` was called, the `WaitSet` becomes unusable. The original intention was to interrupt the callback, not the `WaitSet` usage completely.

* The user would like to interrupt the `wait_and_process` call after a specific event
  * It shall be possible to recall it again and continue
  * All unhandled events will be lost

## Improvement Suggestion

 * Remove `WaitSet::stop()` and use the existing `CallbackProgression` approach for callbacks, see: `WaitSet::wait_and_process<F: FnMut(WaitSetAttachmentId<Service>) /* NEW*/ -> CallbackProgression>`
 * introduce `WaitSet::blocking_wait_and_process_once()` it blocking waits until 1..N events arrived, calls the callback for every event and then returns back to the user in contrast to `WaitSet::wait_and_process()` that keeps going.
 * `WaitSet::try_wait_and_process()` actually blocks for timers, this needs to be refactored so that it is non-blocking
 * rename `WaitSet::wait_and_process` into `WaitSet::blocking_wait_and_process`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/507/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/507,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6S6Xou,iceoryx2,2464774702,507,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-08T13:30:32Z,2024-11-08T13:30:32Z,@orecham I think when this is implemented `WaitSet::blocking_wait_and_process_once()` would be exactly what you need.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6S6Xou/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/508,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/508,iceoryx2,2644080952,508,Introduce `socketpair` abstraction for process local events,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-08T13:37:34Z,2025-01-21T18:01:11Z,"## Brief feature description

Since the `WaitSet` must support file descriptors, the event messaging pattern must be based on file descriptors. Currently, the process local variant uses non-process local unix datagram sockets which violate the process local contract.

This can be solved by creating an abstraction for `socketpair()` and implementing an event concept on them so that it can be used in process local services.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/508/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/508,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6S6cyl,iceoryx2,2464795813,508,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-08T13:41:17Z,2024-11-08T13:41:17Z,See this for windows inspiration: https://github.com/sunfishcode/socketpair/blob/main/src/windows_async_std.rs,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6S6cyl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,iceoryx2,2650483076,510,iOS support,brookman,1568303,Beni Bachmann,,OPEN,2024-11-11T21:50:52Z,2024-11-19T09:06:33Z,"## Timeline for iOS support

I just wanted to ask if there is a timeline for iOS support. Thanks in advance!

## Detailed information

lâm looking for a unified solution to pass (largeish amounts of) data between Flutter and Unity. On Windows and MacOS those would be separate processes while on iOS they run in the same process. Iâm currently working with ZeroMQ but Iceoryx2 seems to be faster and less error prone to integrate with C# and Dart.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TL4RE,iceoryx2,2469364804,510,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-12T00:49:23Z,2024-11-12T00:49:23Z,"@brookman We plan to support Android first, and then plan to extend it to iOS, which means that iOS will be available in 2026 or later.

However, timelines can be accelerated by contracting us (info@ekxide.io) - this is how we fund our open-source work. Currently, the most requested features from the community are:

1. Request-response support  
2. Parity with iceoryx1 features  
3. Python and Go language bindings  
4. Network communication  
5. Gateways  

We're actively working on these features in roughly this order.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TL4RE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TPCXX,iceoryx2,2470192599,510,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-12T10:43:58Z,2024-11-12T10:43:58Z,"@brookman I looked at how to deploy Rust code to iOS, and it seems pretty straightforward. Also, iceoryx2 is already ported to mac os, which should make things much simpler. So the work that has to be done is maybe less than we think. However, the apps are usually sandboxed, which means that we do not have direct access to the system's underlying shared memory, which is essential for zero-copy communication. We can handle this by extending the architecture of iceoryx2, something that is already planned independent of iOS or Android.

What we essentially require is that there is a process that owns the service. Every participant uses unix-domain sockets to register at this process, and this process then sends the services corresponding shared memory file-descriptors via unix-domain sockets to the participants. 

But when your use-case is: 
> On Windows and MacOS those would be separate processes while on iOS they run in the same process.

We do not need all of this (the extended architecture) and can work with the `process_local` service variants that are perfect for sandbox'ed environments. This is maybe already possible without any adjustments in iOS.

Would you then also require a C# language binding or could you then work with the C/C++ language bindings?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TPCXX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TRExG,iceoryx2,2470726726,510,NA,brookman,1568303,Beni Bachmann,,NA,2024-11-12T14:44:22Z,2024-11-12T14:44:22Z,"Thank you for the quick and detailed feedback!

I could be wrong, but I don't think that it's possible to run multiple processes on iOS. An app only ever consists of one process.

> We do not need all of this (the extended architecture) and can work with the `process_local` service variants that are perfect for sandbox'ed environments. This is maybe already possible without any adjustments in iOS.

So are you saying that the crate might already compile and use `process_local` on iOS?

When I try to build an example for iOS (--target aarch64-apple-ios) I'm getting an error regarding <libproc.h>.

> Would you then also require a C# language binding or could you then work with the C/C++ language bindings?

I have successfully used Rust crates from C#/Unity via csbindgen FFI and NativeArrays. For Flutter the easiest choice would be flutter_rust_bridge. I have used it successfully in production.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TRExG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/510,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UH6aR,iceoryx2,2485102225,510,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-19T09:06:32Z,2024-11-19T09:06:32Z,"@brookman 

> So are you saying that the crate might already compile and use `process_local` on iOS?

Not yet but the only thing we need to add is an iceoryx2 ""sandbox"" mode. This will be a rust feature flag that disables all IPC dependencies and would make it much easier to port iceoryx2 to another OS. When this is introduced the `libproc.h` problem may vanish completely since it is no longer used.

> I have successfully used Rust crates from C#/Unity via csbindgen FFI and NativeArrays.

We already use cbindgen for the C language bindings and build on top a C++ abstraction so that C++ and Rust users have a similar and comfortable API. Would this also be a valid approach for C#? I assume you would just create bindings for the low-level iceoryx2-ffi API which is pretty cumbersome to use.


With the sandbox approach, we should be able to quickly port iceoryx2 to iOS. I would start with the sandbox flag in December, and maybe we can have iOS support in January.
When would you need iOS support?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UH6aR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,iceoryx2,2652965939,512,Document compatibility guarantees,jayhf,828594,Jay Fleischer,jayhf614@gmail.com,OPEN,2024-11-12T18:17:55Z,2024-11-13T16:18:19Z,"This falls under the umbrella of https://github.com/eclipse-iceoryx/iceoryx2/issues/450, but one specific piece of information I couldn't find anywhere is what guarantees Iceoryx2 makes regarding protocol stability across versions, which is important for making decisions about how and where we can use Iceoryx2. If I build two applications with two different versions of each other, should I expect them to be able to communicate with each other, assuming one isn't using a new feature not supported by the other? If so, will you ever make breaking changes and how will these correspond with release version numbers?
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TVSFT,iceoryx2,2471829843,512,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-12T23:24:28Z,2024-11-12T23:24:28Z,"@jayhf, we aim to provide clear guarantees as we progress towards v1.0.

> If I build two applications with two different versions of each other, should I expect them to be able to communicate with each other, assuming one isn't using a new feature not supported by the other?

Currently, all processes must use the same iceoryx2 version. For instance, a publisher built with iceoryx2 v0.3 will be incompatible with a subscriber built with iceoryx2 v0.4 and will report an incompatibility error. However, in the future, we plan to decouple the iceoryx2 version from its protocol version.

In the future, we will introduce an iceoryx2 protocol version number so that the iceoryx2 version is not strictly coupled to the protocol version. Here the idea is that the protocol itself is specified in detail so that in theory another 3rd party client could follow the specification and be able to participate in the communication. Also an iceoryx2 version could then be compiled with a specific iceoryx2 protocol version.

> If so, will you ever make breaking changes and how will these correspond with release version numbers?

Until we have reached v1.0 there will be breaking changes and I think afterwards, there may still be breaking changes with new protocol version but this will be unlikely. But just for some context, even though we did not yet have reached v1.0 the pub/sub pattern is pretty much stable since some key design elements originated from iceoryx1 which are very well proven in use.

## The Protocol

It will contain the structure of the underlying communication mechanisms and how they are structured in memory. Additionally, we will write an iceoryx2 independent test suite that verifies the correctness of the iceoryx2 protocol inside iceoryx2. This also will identify breaking changes between versions if they ever happen.
Additionally, the protocol will contain the definition of data types like a vector or a string. The idea is that when using shared-memory you do not need payload serialization at all and since it is memory and CPU intensive we should also strive to avoid it at all costs. Therefore, we provide shared-memory compatible data types like `Vec`, `ByteString` (Rust) or `iox::vector` and `iox::string` (C++). Those data types have a language idiomatic interface but the underlying data structure will be memory-compatible with each other.

Meaning
```rust
// rust
#[derive(ShmSend)]
struct MyDataType {
  data_1: FixedSizeVec<u64, 1024>,
  data_2: FixedSizeByteString<128>
  data_3: RelocatableVec<uint64_t>,
}
```
and 
```cxx
// C++
struct MyDataType {
  iox::fixed_size_vector<uint64_t, 1024> data_1;
  iox::fixed_size_byte_string<128> data_2;
  iox::relocatable_vector<uint64_t> data_3;
};
```
are in memory identical and can be received, send, modified by C++ and Rust.

## Long-term support

We at ([ekxide.io](https://ekxide.io), contact (info@ekxide.io)) pursue an open-core business strategy. To address the problem of long-term compatibility and bug fixes, we also offer that a specific iceoryx2 version will get support from us, even when the open-source support has ended. This means it will run in our internal CI, bug-fixes are back-ported as well as features (when feasible).

> which is important for making decisions about how and where we can use Iceoryx2.

I am interested in your use case. Can you tell us a bit more about it?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TVSFT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TW7bH,iceoryx2,2472261319,512,NA,jayhf,828594,Jay Fleischer,jayhf614@gmail.com,NA,2024-11-13T02:51:43Z,2024-11-13T02:51:43Z,Thanks @elfenpiff! Appreciate your detailed answer here. I'm just looking for a cross platform shared memory pub/sub library for Rust (and potentially other languages). Future compatibility is important to us because it means we can use iceoryx2 in a microservice architecture and update services without breaking the system.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TW7bH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TaF2R,iceoryx2,2473090449,512,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-13T10:18:09Z,2024-11-13T10:18:09Z,"@jayhf, we have the micro-service use case on our radar, and by v1.0, we will have a strategy defined for ensuring protocol stability and providing a smooth migration path when multiple protocol versions are required.

Community feedback would be invaluable when we design the protocol strategy! Would you be opened to review it by considering your use case so that we can identify weak points early and have something that can be actually used?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TaF2R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TcbO5,iceoryx2,2473702329,512,NA,jayhf,828594,Jay Fleischer,jayhf614@gmail.com,NA,2024-11-13T14:00:28Z,2024-11-13T14:00:28Z,"Yes, I think I'd be happy to review it!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TcbO5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TdVWh,iceoryx2,2473940385,512,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-13T15:25:20Z,2024-11-13T15:25:20Z,"@jayhf would it be an option to just link to the shared libraries? Of course, this would lead to the weird situation that we need a Rust Wrapper for the C binding. But it would be much more robust to use the same shared library for every application.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6TdVWh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/512,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Td5dt,iceoryx2,2474088301,512,NA,jayhf,828594,Jay Fleischer,jayhf614@gmail.com,NA,2024-11-13T16:18:18Z,2024-11-13T16:18:18Z,"For our use case, we'd strongly prefer a stable protocol to a stable C library for a few reasons:
- A C library would presumably add a system dependency which would be an extra thing to manage anywhere these services are deployed. Adds an extra opportunity for version incompatibility.
- We heavily use [nix](https://nixos.org/) which is really good at making sure every package gets the right dependency versions, but also means there isn't one system version to link against. On the plus side it makes it easier to ensure multiple packages build with the same version of the library, but this doesn't work as well for native Rust projects that might have Cargo.lock pinned to different versions or for a complicated project I have to build outside of nix for now that bundles its own dependencies.
- C libraries add build complexity to Rust projects and may make cross compilation etc. more difficult

We've built an in house shared memory pub/sub framework in Rust and recently switched to using protobuf as part of the interface to ensure compatibility across versions. I'm investigating iceoryx2 to get better cross platform support","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Td5dt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/515,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/515,iceoryx2,2658673976,515,"Header files missing after executing ""make install""",xfsaid,22762407,,,CLOSED,2024-11-14T12:30:25Z,2024-11-14T14:09:51Z,"iceoryx2-ffi/cxx/cmake/install.cmake
```cmake
install(
    # the '/' at the end is important in order to not have the 'include' folder installed but only the content
    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
    DESTINATION ${DESTINATION_INCLUDEDIR}
    COMPONENT dev
)
```
I found that the installation of C++ related header files is here, but there are many missing. For example:
```c++
#include ""iox/duration.hpp""
#include ""iox/expected.hpp""
#include ""iox/log/logstream.hpp""
#include ""iox/logging.hpp""
#include ""iox/assertions.hpp""
#include ""iox/error_reporting/configuration.hpp""
```

I don't know if anyone is completing these. If not, I think I need to complete them myself.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/515/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/515,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Tm6YN,iceoryx2,2476451341,515,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-14T14:09:51Z,2024-11-14T14:09:51Z,"Those headers come from [iceoryx_hoofs](https://github.com/eclipse-iceoryx/iceoryx/tree/main/iceoryx_hoofs). For ease of use, the iceoryx_hoofs dependency is automatically fetched in developer setups. Please have a look https://github.com/eclipse-iceoryx/iceoryx2/blob/main/iceoryx2-ffi/cxx/README.md on how to use iceoryx_hoofs in a production setup.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Tm6YN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/516,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/516,iceoryx2,2671896627,516,Expose individual components of UniquePortId in CXX API,orecham,8487595,Jeff Ithier,,OPEN,2024-11-19T11:39:24Z,2024-11-19T11:39:24Z,"## Brief feature description

The `UniquePortId` is made up of components:
    ```
    pub struct UniqueSystemId {
        pid: u32,
        seconds: u32,
        nanoseconds: u32,
        counter: u32,
    }
    ```

An API to access these individual elements, in addition to all of the bytes making up the ID, should be added.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/516/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/518,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/518,iceoryx2,2675213338,518,`WaitSet` goes into infinite loop when deadline was reached.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-20T09:39:16Z,2024-11-22T11:03:37Z,"**Observed result or behaviour:**
When a deadline or an interval is attached to the `WaitSet`, the `WaitSet` waits for the provided time and then goes into an infinite loop retriggering the missed deadline/interval.

**Expected result or behaviour:**
When a deadline/interval with timeout X is attached, the `WaitSet` shall notify the user once when timeout X is reached and then reset the event. The next timeout missed notification shall be triggered after a timeout of X as again passed, so in total after 2*X.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/518/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/520,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/520,iceoryx2,2678471462,520,"In the C++ interface, can the subscriber receive and process the received message by setting a callback function?",xfsaid,22762407,,,CLOSED,2024-11-21T08:09:06Z,2024-11-26T06:16:27Z,"Currently, subscribers can only obtain messages by calling receive(). Is it necessary to use the Listener and Notifier of the Event module to complete this function?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/520/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/520,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uc_vh,iceoryx2,2490629089,520,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-21T10:00:15Z,2024-11-21T10:00:15Z,"@xfsaid yes, events are required to achieve this functionality. The listener is the most simple approach and for more complex scenarios, the waitset can be used for event multiplexing. On the producer side, a notifier needs to signal that new data is available. Please have a look at the examples for more details.

In the future there might be an additional, more high level API for generic use cases which does a few things implicitely, like notify on each send. This comes with a cost though, since the pure data transport does not require a context switch but the signaling mechanism does. By having that functionality split into two distict messaging pattern, the user has the option to get the most performance out of iceoryx2.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uc_vh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/520,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uq_KD,iceoryx2,2494296707,520,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-22T17:05:38Z,2024-11-22T17:05:38Z,@xfsaid was the provided answer sufficient? Can we close this issue?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uq_KD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/521,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/521,iceoryx2,2680728114,521,iceoryx2 cannot be build with cmake when included as submodule,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-11-21T19:55:41Z,2024-11-22T18:10:52Z,"## Required information

**Operating system:**

any

**Rust version:**

any

**Cargo version:**

any

**iceoryx2 version:**

`main` branch

**Detailed log output:**
 n/a

**Observed result or behaviour:**

iceoryx2 cannot be build with cmake when the repo is included as submodule into another repo

**Expected result or behaviour:**

iceoryx2 can be included as submodule

**Conditions where it occurred / Performed steps:**

include iceoryx2 as submodule and build with cmake
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/521/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,iceoryx2,2682463997,523,"Disable intra-process ,Only use inter-process communication",smileghp,42567524,,,CLOSED,2024-11-22T08:56:28Z,2025-01-11T16:32:48Z,"Due to the specific application scenario, I only want to use inter-process communication and not intra-process communication. For example, within the same process, there is a writer_1 and a reader_1, while in another process, there is a reader_2. They are all on the same topic. When writer_1 sends a message, only reader_2 should receive the message, while reader_1 should not receive it. How can this be configured or changed?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UrQfp,iceoryx2,2494367721,523,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-11-22T17:26:33Z,2024-11-22T17:26:33Z,"Interesting idea. We did not think about something like this. Can you tell something about the use case for such a feature.

Currently, this is unfortunately not easily possible. A workaround could be to use the user-header feature to publish the PID and on the subscriber side drop all samples with the PID of the same process.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6UrQfp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uwgtk,iceoryx2,2495744868,523,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-24T01:43:09Z,2024-11-24T01:43:09Z,"@smileghp Currently this does not work, but you are able to identify the origin of a sample and can discard it.

The publisher has a unique id that is stored in every samples header. You can acquire it via

```rust
let publisher_id = publisher.publisher_id();
```

On the subscriber side you can acquire the publisher id in the same fashion and discard the sample when it comes from the local publisher

```rust
while let Some(sample) = subscriber.receive()? {
    if publisher_id == sample.header().publisher_id() {
        continue; // do not handle the sample
    }
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Uwgtk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U05sb,iceoryx2,2496895771,523,NA,smileghp,42567524,,,NA,2024-11-25T05:27:56Z,2024-11-25T05:27:56Z,"@elBoberido performance optimization is also one of my job responsibilities. For intra-process communication, sometimes passing object pointers of data entities is more efficient, thereby avoiding unnecessary serialization processes. In my own project, I operate this way, so I need to disable the intra-process functionality of IOX2.""","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U05sb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U06Hx,iceoryx2,2496897521,523,NA,smileghp,42567524,,,NA,2024-11-25T05:29:34Z,2024-11-25T05:29:34Z,"@elfenpiff Thank you very much. Before the new version comes out, I can try the method you mentioned, but this will waste some performance in data transmission","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U06Hx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U07PV,iceoryx2,2496902101,523,NA,smileghp,42567524,,,NA,2024-11-25T05:33:31Z,2024-11-25T05:33:31Z,"> Interesting idea. We did not think about something like this. Can you tell something about the use case for such a feature.
> 
> Currently, this is unfortunately not easily possible. A workaround could be to use the user-header feature to publish the PID and on the subscriber side drop all samples with the PID of the same process.

Yes, in DDS, it is implemented by identifying the recipient's PID in transmit process, rather than filtering only at the time of subscription. I think this approach is more efficient.""","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U07PV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U12VS,iceoryx2,2497144146,523,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-25T07:58:00Z,2024-11-25T07:58:00Z,"@smileghp

> performance optimization is also one of my job responsibilities. For intra-process communication, sometimes passing object pointers of data entities is more efficient, thereby avoiding unnecessary serialization processes.

This exactly what is happening with iceoryx2 under the hood. Also, you do not need serialization when using zero-copy communication. We already provide containers that are shared-memory compatible, see this example that introduces the `FixedSize{String|Vec}` https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/rust/complex_data_types/complex_data_types.rs

When a publisher delivers a message to a subscriber, it iterates over a vector and copies a pointer (8 byte) into the receiver buffer of the subscriber. I am a bit skeptical if a filter on the publisher side is more efficient than on the subscriber side - maybe it is even slower. The reason might be that the publisher always has to check the filter for all subscribers, but on the subscriber's side, you only need to activate it when you explicitly need it. 

However, when you combine this with events and wake up the other process/thread just so that it can filter out the sample, then it will cost you a lot of performance.

> Yes, in DDS, it is implemented by identifying the recipient's PID in transmit process, rather than filtering only at the time of subscription. I think this approach is more efficient.

For cyclone dds for instance I know the details. It is far more efficient since it than utilizes a zero-copy behavior where just a pointer to the payload is shared (the are using classic iceoryx for this). This is far more efficient but this is how zero-copy works so such kind of optimizations will maybe gain you nothing when you already use a zero-copy framework.

### zero-copy communication in iceoryx2

Here is a brief overview how zero-copy in iceoryx2 works:

1. `Publisher::loan()`&`Publisher::loan_uninit()` provides memory that is shared between processes. The returned sample is you payload and is written directly inside the shared memory. If you have a data producing function, the best way to utilize zero-copy is to provide a data pointer into the producing function and produce the data directly in shared memory.
2. `Publisher::send()` iterates over the list of all `Subscribers` and copies a relative pointer to the shared memory of 8 bytes into the `Subscribers` receiver buffer.
3. `Subscriber::receive()` copies out the 8 bytes of relative pointer and translates the relative pointer into a process local absolute pointer (it is just a simply addition (relative pointer value + shared memory start address)
4. `Sample::payload()` dereferences the absolut pointer and you have access directly to the memory you have written in step 1.

Since both applications share the actual memory you do not need serialization if your data types are shared memory compatible.

### network communication

Here is a comparison to network communication - I marked the (**high runtime cost**). I ignore here the serialization/deserialization steps (that are additional huge bottlenecks) and just assume we want to transmit something like an array of `uint8_t`.

1. `Send` copies the actual data into the buffer of every subscriber (**high runtime cost**). The larger the data is, the longer it takes. The more subscribers you have, the longer it takes. Additionally, you have to use syscalls here to establish the socket based communication (**high runtime cost**) - meaning the OS will interfere. - In iceoryx2 this is not the case since our pubsub communication works without syscalls and is handled completely with lock-free queues and shared memory -.
2. `Receive` on subscriber side will copy the data out of the buffer and into the user space (**high runtime cost**), which again takes time and costs a lot of memory. And every subscriber has to do this. So an optimization that ignores local subscribers absolutely makes sense! So you share only the data pointer with the subscriber, like iceoryx2 by default does.

### Summary

1. For network communication, you have at least 2 additional copies, from publisher to subscriber buffer and from subscriber buffer to user space - and this ignores the overhead of serialization
2. For network communication, you have to utilize sys-calls that cause OS interference and context-switches
3. In iceoryx2, the pubsub communication does not require sys-calls at all
4. Zero-copy communication produces data only once and then distributes a pointer to all recipients. So no additional copies at all!

So my recommendation would be to look into the complex data types example since I think the biggest performance gain can be made by getting rid of serialization. Additionally, check if you utilize the iceoryx2 API efficiently by using `Publisher::loan_uninit()` and by producing your data directly into shared memory you can access via `SampleMut::payload_mut()`. I think the overhead of checking the publisher id on the subscriber side is in the single-digit nanoseconds.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U12VS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U3mHK,iceoryx2,2497601994,523,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-25T10:32:00Z,2024-11-25T10:32:00Z,"@smileghp 

If you want to know how expensive even a single copy is you can use our benchmark that comes with a `--send-copy` option.

With copy and a payload size of 40960 bytes:

```sh
cargo run --bin benchmark-publish-subscribe --release -- --bench-all -p 40960 --send-copy
# iceoryx2::service::ipc::Service ::: Iterations: 10000000, Time: 9.739591612, Latency: 486 ns, Sample Size: 40960
```

Without copy:

```sh
cargo run --bin benchmark-publish-subscribe --release -- --bench-all -p 40960 --send-copy
# iceoryx2::service::ipc::Service ::: Iterations: 10000000, Time: 2.7868404509999998, Latency: 139 ns, Sample Size: 40960
```

I measured both things on my laptop. So a unnecessary copy of 40kb increases the latency by a factor of 4.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U3mHK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V-JKf,iceoryx2,2516095647,523,NA,smileghp,42567524,,,NA,2024-12-04T03:31:58Z,2024-12-04T03:31:58Z,Thank you very much for your response. I will follow your instructions and verify,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V-JKf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/523,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aGPIx,iceoryx2,2585326129,523,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-11T16:32:47Z,2025-01-11T16:32:47Z,@smileghp I am assuming that your question was answered and therefore I close this issue. Feel free to reopen it or create a new one if you have other questions.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aGPIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/525,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/525,iceoryx2,2690457365,525,ResizableSharedMemory support in ZeroCopyConnection,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-25T11:43:02Z,2024-12-04T12:07:14Z,"## Brief feature description

Currently, the ZeroCopyConnection supports only one non-resizable data segment due to the restrictions of the underlying sample tracker. The sample tracker is the building block to recover samples from dead receivers or to verify that a receiver follows the contract and does not return samples that it does not own.

We would require a sample tracker for every shared memory segment inside the ZeroCopyConnection to support multiple segments.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/525/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,iceoryx2,2692245226,528,Compatibility with `signal-hook`,bytefall,44868003,Oleg Scherbakov,,CLOSED,2024-11-25T21:07:45Z,2024-11-27T09:15:18Z,"First of all, thank you for your library!

There is a quite popular [signal-hook](https://lib.rs/crates/signal-hook) crate. Basic service that uses subscriber looks looks like this:

```rust
use anyhow::Result;
use core::time::Duration;
use iceoryx2::prelude::*;
use std::{
    io::Write,
    sync::{
        atomic::{AtomicBool, Ordering},
        Arc,
    },
};

const CYCLE_TIME: Duration = Duration::from_secs(1);

fn main() -> Result<()> {
    let stop = Arc::new(AtomicBool::new(false));
    signal_hook::flag::register(signal_hook::consts::SIGINT, Arc::clone(&stop))?;
    signal_hook::flag::register(signal_hook::consts::SIGTERM, Arc::clone(&stop))?;

    let node = NodeBuilder::new().create::<ipc::Service>()?;
    let service = node
        .service_builder(&""My/Funk/ServiceName"".try_into()?)
        .publish_subscribe::<u64>()
        .open_or_create()?;
    let subscriber = service.subscriber_builder().create()?;

    while !stop.load(Ordering::Relaxed) {
        // while let NodeEvent::Tick = dbg!(node.wait(CYCLE_TIME)) {
        //     while let Some(sample) = subscriber.receive()? {
        //         println!(""received: {:?}"", *sample);
        //     }
        // }

        print!(""."");
        std::io::stdout().flush()?;
        std::thread::sleep(Duration::from_secs(1));
    }

    println!(""Bye"");

    Ok(())
}
```

Pressing `Ctrl+C` stops the program (you will see ""Bye""). Uncommented `node.wait` code prevents `signal-hook` to handle `Ctrl+C` so that the program keeps running.

I couldn't find a [crate feature](https://lib.rs/crates/iceoryx2/features) to disable signal handling (using only `logger_log` feature, which is very helpful).","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U-rs7,iceoryx2,2499459899,528,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-26T02:07:11Z,2024-11-26T02:07:11Z,"@bytefall I already have this on my radar. I will add a builder parameter to the node and the waitset to explicitly disable signal handler registration.

The PR should be out in the next week or so.

By the way, we created our own signal handler since we must be able to certify the code according to ISO26262 for ASIL D so that iceoryx2 can also run in mission-critical systems like a car's emergency break.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U-rs7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U-1Hj,iceoryx2,2499498467,528,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-26T02:16:14Z,2024-11-26T02:16:14Z,"@bytefall btw. if you do not need all the `signal_hook` features you can also simply just use `Node::wait()`. It will reporte to you if a signal was received via its return result value `NodeWaitFailure`.

If you just want to terminate on SIGINT (CTRL+c) or SIGTERM (`kill $PID$`) you can write

```rust
while node.wait(CYCLE_TIME).is_ok() {
  // ...
}
```

or if you want to handle it a bit more explicitly

```rust
while !stop.load(Ordering::Relaxed) {
  match node.wait(CYCLE_TIME) {
    Ok(()) => my_algorithm(),
    Err(NodeWaitFailure::TerminationRequest) => {
      // someone called for instance kill PID
      stop.store(true, Ordering::Relaxed);
    }
    Err(NodeWaitFailure::Interrupt) => {
      // someone pressed CTRL+c
      stop.store(true, Ordering::Relaxed);
    }
  }
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6U-1Hj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VD1Tw,iceoryx2,2500809968,528,NA,bytefall,44868003,Oleg Scherbakov,,NA,2024-11-26T13:30:28Z,2024-11-26T13:30:28Z,"Thanks @elfenpiff for addressing this requirement.

I'm not developing any mission-critical systems so the certification doesn't make any difference to me. Talking from the perspective of a general developer on the Internet, who is looking for d-bus alternatives.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VD1Tw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VD-UM,iceoryx2,2500846860,528,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-26T13:46:23Z,2024-11-26T13:46:23Z,"@bytefall you said the required keyword ""d-bus alternatives"". We wanted to promote iceoryx2 as d-bus alternative in the near future when some other features like request response are implemented and the documentation is a bit mature.

Could you share some of your d-bus use cases with us?
What features did you use? 
Why are you looking for d-bus alternatives?
Are their features on the iceoryx2 side missing which d-bus provides and you would see as important?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VD-UM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VFR2m,iceoryx2,2501189030,528,NA,bytefall,44868003,Oleg Scherbakov,,NA,2024-11-26T15:37:11Z,2024-11-26T15:37:11Z,"> Could you share some of your d-bus use cases with us?

Sure, I have a [patch](https://github.com/bytefall/debugbox) for dosbox that adds ability to communicate via d-bus. Also there is a TUI front-end to control dosbox.

> Why are you looking for d-bus alternatives?

Out of curiosity.

> Are their features on the iceoryx2 side missing which d-bus provides and you would see as important

Basically, as you specified in the docs, ""Request-Response"" is missing.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VFR2m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/528,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VNcwy,iceoryx2,2503330866,528,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-27T09:14:57Z,2024-11-27T09:14:57Z,"@bytefall I added the ability to disable the automatic signal handling on the `Node` and the `WaitSet` via the corresponding builder.

When you write:

```rust
let node = NodeBuilder::new()
                .name(&""my_little_node"".try_into()?)
                .signal_handling_mode(SignalHandlingMode::Disabled)
                .create::<ipc::Service>()?;

/// this will no longer fetch SIGINT or SIGTERM
while node.wait(CYCLE_TIME).is_ok() {
    
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VNcwy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,iceoryx2,2698937502,531,Benchmarking with C++ Bindings,CyberPoN-3,186841924,,,OPEN,2024-11-27T15:34:26Z,2024-12-18T11:12:36Z,"I'm trying to write a benchmark to evaluate performance improvement over the first iceoryx (version 2.0.5) using C++ bindings.

The benchmark consists in sampling repeatedly the time spent between the publish and the corresponding event notification on the consumer, running in two different processes (not two different threads of the same process). The iceoryx1 test uses WaitSet. After having studied the new examples of iceoryx2, I've found that the communication pattern that I would like to test is the 'event' one, so without having to explicitly poll for the new data.

I took _cxx/event_multiplexing_ example as reference code, but I noticed that apparently I cannot send data through that mechanism, so the strategy I implemented is to first publish the data as in _cxx/publish_subscribe_ example and then using the event communication pattern to wake up the consumer process that will poll only one time in order to get the published data (as explained in the _cxx/publish_subscribe_ example).
The operations executed in the time lapse recorded are:

Publisher side:
- the publish of the data struct
- the event trigger

Subscriber side:
- the wakeup from the trigger
- the 1 time poll to get the data
- the time needed to compute time diff with the timestamp recorded in the sent struct by the publisher

The results I got are comparable without substantial differences w.r.t the first iceoryx, as the following graphs show:

![image](https://github.com/user-attachments/assets/d9d13ad9-cc64-4cb6-b2c1-ab451edfafdf)

So I would like to as you if there's a smarter way to conduct the benchmark keeping the thing on two different processes and eventually if sending data through events is possible. If that's possible, an example would be very useful.

Thanks in advance,
Matteo","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VR_je,iceoryx2,2504521950,531,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-27T18:09:32Z,2024-11-27T18:09:32Z,"@CyberPoN-3 Awesome, this is a benchmark missing in iceoryx2. Would you be open to contribute the benchmark? The perfect place would be `benchmarks/cxx` and then I will later move the current benchmarks into `benchmarks/rust`.

> eventually if sending data through events is possible

This will never be possible on that level. We explicitly separated the payload delivery (pubsub or request response) from the wakeup mechanism in iceoryx2. The reason for separation are
* in an unseparated form the publisher will always trigger the other side with a syscall which can cause overhead
* complex events are impossible to realize like: trigger other side only when 2 samples from service A and one sample from service B is delivered and its Friday
    * with classic iceoryx you would constantly wake up the other side, causing unnecessary scheduling overhead etc
* ability to explicitly poll for data without any syscall when a higher executor instance woke you up

You implemented it exactly like it was intended to be used. Yesterday we also added a more complex example describing this setup, take a look at: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/cxx/event_based_communication

> So I would like to as you if there's a smarter way to conduct the benchmark

The benchmark we did was to measure a ping-pong setup. 
 * You have two processes P1 and P2
 * A pubsub and event service S12 for communication from P1 to P2 
 * A pubsub and event service S21 for communication from P2 to P1

For your benchmark you would do the following:
 1. Send a sample from P1 to P2 via the publisher of S12
 2. Send a notification from P1 to P2 via the notifier of S12
 3. Wait on P2 until you received the notification
 4. Send a sample from P2 to P1 via the publisher of S21
 5. Send a notification from P2 to P1 via the notifier of S21
 6. Wait on P1 until you received the notification
 7. GoTo step 1

You repeat this cycle 1.000.000 times an measure the runtime T. Then you divide the measured runtime T by 1.000.000 times 2. Times 2 because you had here a two way communication, once from P1 to P2 and then back from P2 to P1.

The reason why we did this is, that the underlying system time call `clock_gettime` may have a huge overhead compared to the overall iceoryx2 communication. On some AMD systems, we observed a runtime of around 1us, which is hard when the latency of iceoryx2 is 100ns, so this call can increase the runtime by a factor of 10. But when you repeat the communication 1.000.000 times and call `clock_gettime` only twice (once at start and once at the end) the overhead influence of that call becomes irrelevant.

> eventually if sending data through events is possible. If that's possible, an example would be very useful.

Btw. in the long-term we want to introduce something like a meta port which contains all ports and does the event notifications for you so that you can enjoy a much simpler API. But this port would have the disadvantages I described above. When ultra-low latency is not a requirement this becomes a nice alternative.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VR_je/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VSAe1,iceoryx2,2504525749,531,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-11-27T18:11:58Z,2024-11-27T18:11:58Z,@CyberPoN-3 btw. What does the red dotted line in your graphics mean?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VSAe1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VqNxU,iceoryx2,2510871636,531,NA,CyberPoN-3,186841924,,,NA,2024-12-02T08:27:05Z,2024-12-02T08:27:05Z,"Hi, sorry for the late reply!

> Would you be open to contribute the benchmark?

That's for sure, give me the time to get it written as good as I can, then I'll be pleased to share with you! Also feel free to edit the benchmark as you prefer, since I'm testing a use-case I need for my application, infact that 100us red dashed line was a reference I selected based on my previous benchmarks.

> The benchmark we did was to measure a ping-pong setup.

I see, that's a great way to conduct the test and I agree with the strategy you adopted! In my case I would be interested also on benchmarking the readiness of the system when there is a delay between a ping-pong and the next one, in order to simulate what happens if, for example, I publish some data at a certain frequency, like 1Hz, 10Hz, 100Hz etc... That's one of the main focuses of the benchmark I'm doing. Infact, from the actual results I got, it looks like that the lower the frequency between publishes the higher the response time to wake up the subscriber process in front of an event. Before talking about numbers (actually ~50us difference from 100Hz and 1Hz), since I'm pretty new to Iceoryx, I would like to ensure myself to have done my best to get the benchmark written the fastest way possible.

> The reason why we did this is, that the underlying system time call clock_gettime may have a huge overhead compared to the overall iceoryx2 communication....

That's really interesting, I'm working on a solution to benchmark the way I need, trying to exclude that huge overhead. 

Thanks for sharing! Any advice would be appreciated!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6VqNxU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1Xjt,iceoryx2,2513795309,531,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-03T07:58:07Z,2024-12-03T07:58:07Z,"@CyberPoN-3 

>  from the actual results I got, it looks like that the lower the frequency between publishes the higher the response time to wake up the subscriber process in front of an event

What you observe here is a delay in the operating system. The lower the frequency is, the longer the receiving side sleeps, and the OS puts a process into a deeper sleep the longer it is inactive. Meaning, processes that are getting activated with a high frequency are getting more often rescheduled and are maybe in a higher priority scheduling queue and inactive process are rescheduled with a lower frequency and are moved to a low priority scheduling queue. Or maybe when there is a priority queue in place the priority of that process decreases over time - depending on the underlying scheduler of the OS.

To have a more responsive system, you could on linux compile your own kernel and configure it with the parameters:
* https://cateee.net/lkddb/web-lkddb/HZ_1000.html
* https://cateee.net/lkddb/web-lkddb/PREEMPT.html

This should increase the frequency with which the scheduler checks for process activities, at the slight cost of an increased CPU load.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1Xjt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1qnr,iceoryx2,2513873387,531,NA,CyberPoN-3,186841924,,,NA,2024-12-03T08:39:08Z,2024-12-03T08:39:08Z,"Thank you for the advices @elfenpiff, I'll try them out!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V1qnr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V2peS,iceoryx2,2514130834,531,NA,CyberPoN-3,186841924,,,NA,2024-12-03T10:20:40Z,2024-12-03T10:20:40Z,"@elfenpiff 

> To have a more responsive system, you could on linux compile your own kernel and configure it with the parameters:

I'm working on a NVidia Jetson Xavier AGX, actually I've finished right now checking both and it seems they are set by default as you suggested.
By executing `uname -a` I get: _Linux tegra-ubuntu 5.10.216-tegra #1 SMP **PREEMPT** Wed Aug 28 01:46:00 PDT 2024 aarch64 aarch64 aarch64 GNU/Linux_

In order to determine the timer interrupt frequency I followed [that guide](https://advenage.com/topics/linux-timer-interrupt-frequency) that gives a small test to unveil the setting (since I don't have a /boot/config- file to read on the NVidia Jetson...) and its result is:
 _kernel timer interrupt frequency is approx. 4016 Hz or higher_.

> The lower the frequency is, the longer the receiving side sleeps, and the OS puts a process into a deeper sleep the longer it is inactive.

Actually my setup sees publisher, subscriber and RouDi running on maximum real time priority level (99) on a round robin scheduling scheme (I used [chrt](https://man7.org/linux/man-pages/man1/chrt.1.html) for that and obv checked via htop that the priority was set correctly). Other than that I locked CPU frequency at maximum frequency for the Xavier (~2.2GHz, 8 cores) with Performance scaling governor applied and MAXN nvpmodel.  The board was completely left unload during the benchmarks and also a run varying roudi/subscriber/publisher priority in [99RT, 100CFS, 119CFS] trying all possible combinations of them has been done and the pattern showing the increasing response time with longer publish periods still shows on.

Is there anything else I can do to dig more on that?
Thanks in advance

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V2peS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V3ADJ,iceoryx2,2514223305,531,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-03T10:59:52Z,2024-12-03T10:59:52Z,"@CyberPoN-3 I found this answer interesting: https://stackoverflow.com/a/13619750 

It stated that round-robin is a suboptimal scheduling algorithm, especially when it comes to processes waiting for IO - exactly what you are doing here. Waiting for an event notification that is sent via a UNIX datagram socket.

Could you try other schedulers? Maybe deadline or CTF will provide better results - I am not an experts on schedulers so those are just wild guesses. I think I would explore schedulers and how they work to optimize the reaction time.

Maybe you are able to decrease the latency of waking up another process but it could come at a high price, higher CPU load and then the actual computation time increases which would then increase the latency of the overall system.

Waking up a process/thread that is in deep sleep always takes a bit longer, since the process and memory has to be reloaded. So the simplest way to avoid a deep sleep is a busy loop - but this will cost massive CPU time.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V3ADJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V3sfV,iceoryx2,2514405333,531,NA,CyberPoN-3,186841924,,,NA,2024-12-03T12:17:13Z,2024-12-03T12:17:13Z,"@elfenpiff
Thank you elfenpiff, I'll try more about schedulers in order to see the difference. As soon as I have the results I'll update you!

> or CTF will provide better results

What about CTF? Actually I never heard about that and google didn't save me that time xD
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6V3sfV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/531,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YDdI_,iceoryx2,2551042623,531,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-18T11:12:34Z,2024-12-18T11:12:34Z,"@CyberPoN-3 

> What about CTF? Actually I never heard about that and google didn't save me that time xD

My mistake, I mixed something up. I meant the CFS (completely fair scheduler)","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YDdI_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/532,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/532,iceoryx2,2699417325,532,ResizableSharedMemory support for publisher,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-27T18:17:57Z,2024-12-05T16:44:08Z,"## Brief feature description

The publisher shall be able to utilize the `ResizableSharedMemory` to support fully dynamic payload","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/532/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/533,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/533,iceoryx2,2707492843,533,Add timeout to `WaitSet::wait_and_process_once()`,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-11-30T15:19:31Z,2024-11-30T17:48:58Z,"## Brief feature description

User shall be able to provide a timeout to the waitset so that they do not wait for infinity until something arrives.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/533/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/535,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/535,iceoryx2,2708849441,535,Benchmark for iceoryx2 queues,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-12-01T09:27:23Z,2024-12-01T18:27:25Z,"## Brief feature description

Implement a benchmark to measure the latency of the iceoryx2 queues.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/535/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/547,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/547,iceoryx2,2739920648,547,Move WaitSet out of port namespace,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-12-14T14:37:38Z,2024-12-16T13:45:02Z,"## Brief feature description

The WaitSet does not really fit into the port name space and should be moved into the main namespace.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/550,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/550,iceoryx2,2742742105,550,Set ids for custom events,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-12-16T15:46:03Z,2024-12-19T15:13:26Z,"## Brief feature description

For the event messaging pattern the user shall be able to define a custom event id whenever a notifier:
 * is created, 
 * is destroyed 
 * is identified as dead

The events shall be emitted automatically by the notifier without any additional user interaction.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/550/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554,iceoryx2,2749802312,554,publisher and subscriber support callback,owny990312,89577994,han J,,OPEN,2024-12-19T09:58:28Z,2025-01-03T16:16:33Z,"when I use publisher and subscriber demo,I find it use pollingï¼ Is there an event-driven subscription mechanism like iceoryx1 to reduce system load?
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YMR_S,iceoryx2,2553356242,554,NA,owny990312,89577994,han J,,NA,2024-12-19T10:28:02Z,2024-12-19T10:28:02Z,"> when I use publisher and subscriber demo,I find it use pollingï¼ Is there an event-driven subscription mechanism like iceoryx1 to reduce system load?å½æä½¿ç¨åå¸èåè®¢éèç¤ºä¾æ¶ï¼æåç°å®ä½¿ç¨äºè½®è¯¢ãæ¯å¦æç±»ä¼¼äº iceoryx1 çäºä»¶é©±å¨è®¢éæºå¶ä»¥åå°ç³»ç»è´è½½ï¼

and what is the difference between pub/sub and listen/notify
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YMR_S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YNsze,iceoryx2,2553728222,554,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-19T12:38:04Z,2024-12-19T12:38:04Z,"@owny990312 

* This example introduces events: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event
* This example demonstrates how pub/sub can be combined with events: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event_based_communication to achieve a communication like iceoryx classic but which is much more flexible

> and what is the difference between pub/sub and listen/notify

* pub/sub sends the actual payload like the sensor data in an unidirectional way, meaning always from publisher to subscriber
* events are used to exchange notifications between processes and shall be used to wake up other processes whenever something interesting has happened. the events have an id (u32) to distinguish them. One process can wait either on one listener, or multiple listener and file descriptors (waitset: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/event_multiplexing) until an event arrives. The event will then wake up the process and inform it on what channel what event id arrived.

So the normal workflow looks like:
1. One process processes a specific work load, maybe sends multiple samples via multiple publishers to many processes.
2. When the process is finished it can emit an event via the notifier to wake up the other processes that are waiting on the waitset or listener to inform them that they can now process their work.

The decoupling of pub/sub and event in iceoryx2 has now the advantage that the user can define and emit any kind of custom event. In classic iceoryx there was only one event: `HAS_DATA_RECEIVED` (or something like this) which was always emitted implicitly by the publisher whenever a sample was sent. In iceoryx2 you have now the total freedom - you can emit the event only on fridays when the sky is blue, or when publisher A has sent 2 samples and publisher B 5.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YNsze/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/554,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJzbk,iceoryx2,2569484004,554,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-03T16:16:32Z,2025-01-03T16:16:32Z,@owny990312 is your question answered? Can this issue be closed?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJzbk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/555,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/555,iceoryx2,2750225314,555,health monitoring example,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2024-12-19T12:48:32Z,2024-12-20T21:33:18Z,"## Brief feature description

Example that demonstrates the tools that are available in iceoryx2 to monitor the health state of a system.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/555/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/556,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/556,iceoryx2,2750305652,556,"Use enum approach in builder options to make default, disabled, custom arguments clearer",elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2024-12-19T13:17:09Z,2024-12-19T13:17:09Z,"## Brief feature description

Currently, service QoS settings can be handled by:
1. explicitly stating them and make them a requirement when a service is opened
2. not stating them and implicitly use the default values used by the service.

The idea is to introduce some kind of enum to make this more visible in the API.

```rust
let service = node.service_builder().some_setting(SettingEnum::Default).another_setting(SettingEnum::Require(123).create();
```

This issue originated from the discussion: https://github.com/eclipse-iceoryx/iceoryx2/pull/552#discussion_r1891852170
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/556/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/559,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/559,iceoryx2,2752753427,559,Reuse existing cargo build with C and C++ bindings,elBoberido,56729607,Mathias Kraus,,CLOSED,2024-12-20T13:32:33Z,2024-12-20T20:16:12Z,"## Brief feature description

cmake invokes cargo to build the Rust project instead of using an existing build. This simplifies the life of the developers since they have to invoke only one command but makes life harder for integrators.

Similar to our handling with `iceoryx_hoofs`, a cmake parameter shall be introduced to tell cmake where to look for the Rust artifacts. If they are not found, the cmake shall invoke cargo and build everything from scratch.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/559/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/562,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/562,iceoryx2,2754430219,562,CLI output of global config on PowerShell is not formatted properly,orecham,8487595,Jeff Ithier,,OPEN,2024-12-22T01:12:14Z,2024-12-22T01:33:44Z,"## Required information

**Operating system:** Windows 10

**iceoryx2 version:** `main`

**Observed result or behaviour:**

In `PowerShell`:

```
iox2 config show system
â[4;92mposix system configurationâ[0m

 â[4;92msystem infoâ[0m
  â[37mPosixVersion                                      â[0m â[94m200809â[0m
  â[37mPageSize                                          â[0m â[94m4096â[0m
  â[37mNumberOfClockTicksPerSecond                       â[0m â[94m0â[0m
  â[37mNumberOfCpuCores                                  â[0m â[94m16â[0m

 â[4;92mlimitâ[0m
  â[37mMaxLengthOfHostname                               â[0m â[94m[ unlimited ]â[0m
  â[37mMaxLengthOfLoginName                              â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfSupplementaryGroupIds                  â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfOpenFiles                              â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfSimultaneousProcessesPerUser           â[0m â[94m[ unlimited ]â[0m
  â[37mMaxLengthOfArguments                              â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfOpenStreams                            â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfSymbolicLinks                          â[0m â[94m[ unlimited ]â[0m
  â[37mMaxLengthOfTerminalDeviceName                     â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfBytesInATimezone                       â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfSemaphores                             â[0m â[94m[ unlimited ]â[0m
  â[37mMaxSemaphoreValue                                 â[0m â[94m2147483646â[0m
  â[37mMaxNumberOfOpenMessageQueues                      â[0m â[94m[ unlimited ]â[0m
  â[37mMaxMessageQueuePriority                           â[0m â[94m[ unlimited ]â[0m
  â[37mMaxNumberOfThreads                                â[0m â[94m1024â[0m
  â[37mMaxSizeOfPasswordBuffer                           â[0m â[94m[ unlimited ]â[0m
  â[37mMaxSizeOfGroupBuffer                              â[0m â[94m[ unlimited ]â[0m
  â[37mMaxPathLength                                     â[0m â[94m260â[0m
  â[37mMaxFileNameLength                                 â[0m â[94m[ unlimited ]â[0m
  â[37mMaxUnixDomainSocketNameLength                     â[0m â[94m108â[0m
  â[37mMinStackSizeOfThread                              â[0m â[94m1048576â[0m

 â[4;92moptionsâ[0m
  AdvisoryInfo                                       false
  CpuTime                                            false
  Fsync                                              false
  Ipv6                                               false
  MemLock                                            false
  MemLockRange                                       false
  MessagePassing                                     false
  PrioritizedIo                                      false
  PriorityScheduling                                 false
  RegularExpressions                                 false
  Spawn                                              false
  ProcessSporadicServer                              false
  SynchronizedIo                                     false
  ThreadStackAddress                                 false
  ThreadStackSize                                    false
  ThreadCpuTimeClock                                 false
  ThreadExecutionScheduling                          false
  ThreadProcessSharedSynchronization                 false
  MutexPriorityInheritance                           false
  MutexPriorityProtection                            false
  RobustMutexPriorityInhertiance                     false
  RobustMutexPriorityProtection                      false
  ThreadSporadicServer                               false
  Trace                                              false
  TraceEventFilter                                   false
  TraceInherit                                       false
  TraceLog                                           false
  TypedMemoryObjects                                 false

 â[4;92mfeaturesâ[0m
  â[37mBarriers                                          â[0m â[94mtrueâ[0m
  AsynchronousIo                                     false
  ClockSelection                                     false
  JobControl                                         false
  â[37mMappedFiles                                       â[0m â[94mtrueâ[0m
  MemoryProtection                                   false
  MonotonicClock                                     false
  RawSockets                                         false
  â[37mReaderWriterLocks                                 â[0m â[94mtrueâ[0m
  RealtimeSignals                                    false
  SavedUserAndGroupIds                               false
  â[37mSemaphores                                        â[0m â[94mtrueâ[0m
  â[37mSharedMemoryObjects                               â[0m â[94mtrueâ[0m
  Shell                                              false
  â[37mSpinLocks                                         â[0m â[94mtrueâ[0m
  â[37mThreadSafeFunctions                               â[0m â[94mtrueâ[0m
  Threads                                            false
  â[37mTimeouts                                          â[0m â[94mtrueâ[0m
  â[37mTimers                                            â[0m â[94mtrueâ[0m
  OpenRealtimeOptionGroup                            false
  OpenRealtimeThreadsOptionGroup                     false

 â[4;92mprocess resource limitsâ[0m
  â[37mMaxCoreFileSize                            â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxConsumableCpuTime                       â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxDataSegmentSize                         â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxFileSize                                â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxNumberOfOpenFileDescriptors             â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxStackSize                               â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
  â[37mMaxSizeOfTotalMemory                       â[0m soft:  â[94m0                       â[0m hard:  â[94m0â[0m
```

**Expected result or behaviour:**

Clean formatting of system configuration is printed.

**Conditions where it occurred / Performed steps:**

In `PowerShell` on `Windows`:

```
iox2 config show system
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/562/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/562,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YfHR2,iceoryx2,2558293110,562,NA,orecham,8487595,Jeff Ithier,,NA,2024-12-22T01:33:43Z,2024-12-22T01:33:43Z,To be done after https://github.com/eclipse-iceoryx/iceoryx2/pull/468 is merged.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YfHR2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,iceoryx2,2757067201,566,run event_based_communication on C++,owny990312,89577994,han J,,CLOSED,2024-12-24T02:39:41Z,2024-12-24T13:11:19Z,"when I first run ./example_cxx_event_based_communication_subscriber,
then run ./example_cxx_event_based_communication_publisher, the publisher is coredump like the following picture:

![image](https://github.com/user-attachments/assets/871b4cf7-fc19-4d82-8a3d-3859b879a644)

But when I first run  example_cxx_event_based_communication_publisher 
then run  ./example_cxx_event_based_communication_subscriber,it works.

But In my case, it must run subscriber first. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo1CD,iceoryx2,2560839811,566,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-24T08:37:31Z,2024-12-24T08:37:31Z,@owny990312 Thanks for the bug-report - I can confirm the bug! It is only present in the C++ version of the example. I suppose it is a bug in the example itself.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo1CD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo2cN,iceoryx2,2560845581,566,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-24T08:42:57Z,2024-12-24T08:42:57Z,@owny990312 the problem was that the publisher and the subscriber had inconsistent history requirements. This is fixed with #567 ,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo2cN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo4Ez,iceoryx2,2560852275,566,NA,owny990312,89577994,han J,,NA,2024-12-24T08:49:28Z,2024-12-24T08:49:28Z,"> @owny990312 the problem was that the publisher and the subscriber had inconsistent history requirements. This is fixed with #567é®é¢æ¯åºçååè®¢éèçåå²è¦æ±ä¸ä¸è´ãè¿éè¿ #567 è§£å³äºã

Thanks for your reply","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo4Ez/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo4sF,iceoryx2,2560854789,566,NA,owny990312,89577994,han J,,NA,2024-12-24T08:51:59Z,2024-12-24T08:51:59Z,"> @owny990312 the problem was that the publisher and the subscriber had inconsistent history requirements. This is fixed with #567é®é¢æ¯åºçååè®¢éèçåå²è¦æ±ä¸ä¸è´ãè¿éè¿ #567 è§£å³äºã

By the way, what is the function of `HISTORY_SIZE`? Does it store the history messages of the publisher? In other words, can a subscriber receive up to 20 history messages from the publisher?

If  I don't set this value, it can work? Because In some case I never mind the history value, so I don't want to subscriber this value.But In my practice, it default to 1 not zero","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yo4sF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/566,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp4YA,iceoryx2,2561115648,566,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-24T13:11:17Z,2024-12-24T13:11:17Z,"`HISTORY_SIZE` determines how many previously delivered samples the publisher will send to the subscriber when the subscriber connects. In this case, the subscriber would receive up to the latest 20 samples from the publisher on connection.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp4YA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,iceoryx2,2757514499,568,Adjust Shared-memory pool's size,owny990312,89577994,han J,,OPEN,2024-12-24T09:49:38Z,2025-01-03T16:06:05Z,"Adjust Shared-memory pool's size like iceoryx1, we have a .toml file to set the shm-pool's size. Or iceoryx2 can auto-adjust it ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp2dP,iceoryx2,2561107791,568,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-12-24T13:02:52Z,2024-12-24T13:02:52Z,In iceoryx2 it's not necessary anymore. Each publisher has it's own mempool and the number of memory chunks are inferred from the confiuration of the service.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp2dP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yrcsj,iceoryx2,2561526563,568,NA,owny990312,89577994,han J,,NA,2024-12-25T01:22:20Z,2024-12-25T01:22:20Z,"> In iceoryx2 it's not necessary anymore. Each publisher has it's own mempool and the number of memory chunks are inferred from the confiuration of the service.å¨ iceoryx2 ä¸­ä¸åéè¦è¿æ ·åãæ¯ä¸ªåå¸èé½æèªå·±ç mempoolï¼åå­åçæ°éæ¯ä»æå¡çéç½®ä¸­æ¨æ­åºæ¥çã

Thanks for your reply. I also want to ask: there are three method to write data in a shared-memory, 
>  inline void SampleMutUninit<S, Payload, UserHeader>::write_payload(T&& value) 
>  inline void SampleMutUninit<S, Payload, UserHeader>::write_from_fn(const iox::function<typename T::ValueType(uint64_t)>& initializer)
> inline void SampleMutUninit<S, Payload, UserHeader>::write_from_slice(iox::ImmutableSlice<ValueType>& value) 

Is there a C++ API similar to iceoryx1 where I can manually loan shared memory of a desired size and release it through explicit user calls? In iceoryx1 I use 
> iox_pub_loaned_shm_ptr = iox_pub->loan(loan_size) to loan shared memory of a desired size
> iox_pub->release(iox_pub_loaned_shm_ptr) to release it.

am confused about the lifecycle of shared memory","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yrcsj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YriLI,iceoryx2,2561549000,568,NA,orecham,8487595,Jeff Ithier,,NA,2024-12-25T02:13:46Z,2024-12-25T02:13:46Z,"@owny990312 

> Is there a C++ API similar to iceoryx1 where I can manually loan shared memory of a desired size

For this use-case, the `Slice` payload type should be used (representing an arbitrarily sized chunk of memory).

Take a look at this example: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/cxx/publish_subscribe_dynamic_data/src/publisher.cpp#L55

Note that you can also access a pointer to the shared memory via something like:

```
auto sample = publisher.loan_slice_uninit(required_memory_size).expect(""acquire sample"");
auto ptr = sample.payload().data();
```

You can then do a placement new, or populate the bytes via any other mechanism, but you have the ensure not to exceed the loaned size yourself, so it is safer to use one of the provided methods that you listed.

> release it through explicit user calls

The sample is released when it goes out of scope through RAII mechanisms. You can also manually destruct the sample to achieve this.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YriLI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yrj2E,iceoryx2,2561555844,568,NA,owny990312,89577994,han J,,NA,2024-12-25T02:29:58Z,2024-12-25T02:29:58Z,"> @owny990312
> 
> > Is there a C++ API similar to iceoryx1 where I can manually loan shared memory of a desired size
> 
> For this use-case, the `Slice` payload type should be used (representing an arbitrarily sized chunk of memory).å¯¹äºè¿ä¸ªç¨ä¾ï¼åºè¯¥ä½¿ç¨`Slice`è´è½½ç±»åï¼è¡¨ç¤ºä»»æå¤§å°çåå­çæ®µï¼ã
> 
> Take a look at this example: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/cxx/publish_subscribe_dynamic_data/src/publisher.cpp#L55æ¥çè¿ä¸ªç¤ºä¾ï¼https://github.com/eclipse-iceoryx/iceoryx2/blob/main/examples/cxx/publish_subscribe_dynamic_data/src/publisher.cpp#L55
> 
> Note that you can also access a pointer to the shared memory via something like:
> 
> ```
> auto sample = publisher.loan_slice_uninit(required_memory_size).expect(""acquire sample"");
> auto ptr = sample.payload().data();
> ```
> 
> You can then do a placement new, or populate the bytes via any other mechanism, but you have the ensure not to exceed the loaned size yourself, so it is safer to use one of the provided methods that you listed.ä½ å¯ä»¥ç¶åä½¿ç¨ placement new è¿è¡åå§åï¼æèéè¿å¶ä»æºå¶å¡«åå­èï¼ä½ä½ éè¦ç¡®ä¿ä¸è¦è¶è¿åç¨çå¤§å°ï¼å æ­¤ä½¿ç¨ä½ ååºçå¶ä¸­ä¸ä¸ªæä¾çæ¹æ³ä¼æ´å®å¨ã
> 
> > release it through explicit user callséè¿æ¾å¼ç¨æ·è°ç¨éæ¾å®
> 
> The sample is released when it goes out of scope through RAII mechanisms. You can also manually destruct the sample to achieve this.The sample æ¯å¨è¶åºä½ç¨åæ¶éè¿ RAII æºå¶éæ¾çãä½ ä¹å¯ä»¥æå¨éæ¯æ ·æ¬ä»¥å®ç°è¿ä¸ç¹ã


I have a question about DDS sample lifecycle management. In a distributed scenario where Process A publishes data and Process B subscribes to it, if the sample is released when it goes out of scope in the publisher's function, will this affect the subscriber's ability to receive the data?
Additionally, how can I manually destruct the sample?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yrj2E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YtG3f,iceoryx2,2561961439,568,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-25T17:41:49Z,2024-12-25T17:41:49Z,"@owny990312 The subscriber can consume the sample if it holds the `Sample` object. When it goes out of scope, it is released - this is completely independent of the publisher.

> Additionally, how can I manually destruct the sample?

Just let the sample go out of scope.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YtG3f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/568,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJv38,iceoryx2,2569469436,568,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-03T16:05:57Z,2025-01-03T16:05:57Z,@owny990312 is your question answered? Can the issue be closed?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJv38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569,iceoryx2,2757626530,569,conflict between iceoryx2 and iceoyxc,owny990312,89577994,han J,,CLOSED,2024-12-24T11:15:23Z,2025-01-11T16:33:38Z,"when I build my project, which include iceoryx and iceoryx2 (first fetch iceoryx then fetch iceoryx2) , it failed like the following picture: 

![image](https://github.com/user-attachments/assets/cf130f33-8e11-44e9-b7f5-5d21fa4b37e3)


in my case, I want iceoryx and iceoryx2 can exist together","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp1of,iceoryx2,2561104415,569,NA,elBoberido,56729607,Mathias Kraus,,NA,2024-12-24T12:59:24Z,2024-12-24T12:59:24Z,"@owny990312 iceoryx2 needs a specific version of iceoryx_hoofs. Currently it's v2.95.3.

Please also have a look at https://github.com/eclipse-iceoryx/iceoryx2/tree/main/iceoryx2-ffi/cxx. Those intructions can be used to utilize iceoryx_hoofs from an already installed iceoryx classic.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yp1of/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJwdg,iceoryx2,2569471840,569,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-03T16:07:28Z,2025-01-03T16:07:28Z,@owny990312 did you try the proposed solution? Can this issue be closed?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZJwdg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/569,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aGPNB,iceoryx2,2585326401,569,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-11T16:33:38Z,2025-01-11T16:33:38Z,@owny990312 I am assuming your question was answered and therefore I close this issue. Feel free to reopen it if you still have problems.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6aGPNB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570,iceoryx2,2758679891,570,add  shared library download,calvin2021y,85545400,,,OPEN,2024-12-25T09:44:13Z,2025-01-02T18:36:32Z,"## Brief feature description

please consider add windows/linux/macOS shared library download support, for x86_64 and aachr64/arm64

and linux alpine/musl
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YtGR6,iceoryx2,2561959034,570,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-25T17:30:14Z,2024-12-25T17:30:14Z,"@calvin2021y Do You mean that we add a shared library to our releases? Or do you have some package manager in mind?


","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6YtGR6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yt932,iceoryx2,2562186742,570,NA,calvin2021y,85545400,,,NA,2024-12-26T05:54:26Z,2024-12-26T05:54:26Z,"I mean add CI/CD process to build shared library,  and put into the github release download links. 

This will easy the process for newbie to rust like me.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Yt932/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/570,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZE6cV,iceoryx2,2568202005,570,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-02T18:36:24Z,2025-01-02T18:36:24Z,"@calvin2021y having a binary distribution opens a can of worms. Due to the shared memory approach, all libraries and applications needs to be build with the same compiler flags, else it opens the door for subtle but hard to debug bugs.

Can you elaborate a bit about what part of the build process is cumbersome for you? Maybe there are other solutions than distributing binaries.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZE6cV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,iceoryx2,2762258161,571,The publishers retrieve channel is full and the sample cannot be returned,smileghp,42567524,,,CLOSED,2024-12-29T13:44:17Z,2025-01-09T11:03:24Z,"## Required information

**Operating system:**
Linux

* OS name, version
* Additionally, on Linux, Mac Os, Unix, output of: `uname -a`
* Additionally, on Windows, output of: `ver`
Linux for  arm64 

**Rust version:**
Output of: `rustc --version`

**Cargo version:**
Output of: `cargo --version`

**iceoryx2 version:**
0.4.1

**Detailed log output:**
 
[F] Sample<[u8], iceoryx2::service::builder::publish_subscribe::CustomHeaderMarker, iceoryx2::service::ipc::Service> { details: SampleDetails { publisher_connection: Connection { receiver: R
              eceiver { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 120, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_11190463427929560482297      388 [F] 
              58164885_1348123209380142857096792137656.connection"" } }, size: 358, base_address: 0xffffa179e000, has_ownership: false, file_descriptor: FileDescriptor { value: 93, is_owned: true }, me
              mory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 63, data: ""1119046342792956048229758164885_1348123209380142857096792137656"" } }, _phantom_data: PhantomData<ice
              oryx2_cal::zero_copy_connection::common::details::SharedManagementData> }, borrow_counter: UnsafeCell { .. }, name: FileName { value: FixedSizeByteString<255> { len: 63, data: ""111904634
              2792956048229758164885_1348123209380142857096792137656"" } } }, data_segment: Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 98, d
              ata: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_24469_1119046342792956048229758164885.publisher_data"" } }, size: 14750638, base_address: 0xfffef21ec000, has_ownership: false, file_de
              scriptor: FileDescriptor { value: 94, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 37, data: ""24469_1119046342792956048229758164885"" } }
              , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedS
 Sample<[u8], iceoryx2::service::builder::publish_subscribe::CustomHeaderMarker, iceoryx2::service::ipc::Service> { details: SampleDetails { publisher_connection: Connection { receiver: R             izeByteString<255> { len: 37, data: ""24469_1119046342792956048229758164885"" } }, payload_start_address: 281470448877696, _phantom: PhantomData<iceoryx2_cal::shm_allocator::pool_allocator
              ::PoolAllocator> }, publisher_id: UniquePublisherId(UniqueSystemId { value: 1119046342792956048229758164885, pid: 24469, creation_time: Time { clock_type: Realtime, seconds: 1735479263, 

                            nanoseconds: 534081654 } }) }, offset: PointerOffset(204864), origin: UniquePublisherId(UniqueSystemId { value: 1119046342792956048229758164885, pid: 24469, creation_time: Time { clock_teceiver { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 120, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_11190463427929560482297
              ype: Realtime, seconds: 1735479263, nanoseconds: 534081654 } }) } }

                   | This should never happen! The publishers retrieve channel is full and the sample cannot be returned.       


I am using a C++ API, and when receiving a certain topic, this phenomenon inevitably occurs after running for a period of time. I would like to know the cause of this issue and if you have any suggestions or ideas. Thank you!

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y50IE,iceoryx2,2565292548,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T10:27:09Z,2024-12-30T10:27:09Z,"@smileghp As the error message says, this should never happen and is a bug on our side. This occurs when the publisher sends multiple samples and then stops, then the subscriber receives all samples and lets them go out of scope, which then leads to a full queue.

I think I am able to reproduce this cleanly on our side when you provide me with some more details:
1. How many publishers are there in the setup?
2. Do you use the default configuration or do you specify certain QoS like: publisher history size, subscriber max buffer size, subscriber max borrowed samples, publisher max loaned samples, safe overflow. If you set one of the parameters, please provide me the values.
3. How many subscribers are there in the setup?

Can you provide more details about the circumstances that led to the issue?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y50IE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y51io,iceoryx2,2565298344,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T10:32:45Z,2024-12-30T10:32:45Z,"@smileghp Oh and two more question. 

1. In your setup, when the bug occurred, was the publisher or the subscriber created first?
2. Do you use multi threading? Are samples accessed, released in a different thread then the subscriber is handled?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y51io/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y5537,iceoryx2,2565316091,571,NA,smileghp,42567524,,,NA,2024-12-30T10:49:00Z,2024-12-30T10:49:00Z,"The configuration I used is as follows. I canât clearly specify the method for reproduction at this moment, but I will try to create a scenario that can be reliably reproduced.


[global]
root-path-unix                              = '/tmp/iceoryx2/'
root-path-windows                           = 'c:\Temp\iceoryx2\'
prefix                                      = 'iox2_'

[global.node]
directory                                   = 'nodes'
monitor-suffix                              = '.node_monitor'
static-config-suffix                        = '.details'
service-tag-suffix                          = '.service_tag'
cleanup-dead-nodes-on-creation              = true
cleanup-dead-nodes-on-destruction           = true

[global.service]
directory                                   = 'services'
publisher-data-segment-suffix               = '.publisher_data'
static-config-storage-suffix                = '.service'
dynamic-config-storage-suffix               = '.dynamic'
event-connection-suffix                     = '.event'
connection-suffix                           = '.connection'
creation-timeout.secs                       = 0
creation-timeout.nanos                      = 500000000

[defaults.publish-subscribe]
max-subscribers                             = 8
max-publishers                              = 4
max-nodes                                   = 20
publisher-history-size                      = 1
subscriber-max-buffer-size                  = 10
subscriber-max-borrowed-samples             = 10
publisher-max-loaned-samples                = 10
enable-safe-overflow                        = true
unable-to-deliver-strategy                  = 'Block' # or 'DiscardSample'
subscriber-expired-connection-buffer        = 128

[defaults.event]
max-listeners                               = 4
max-notifiers                               = 16
max-nodes                                   = 36
event-id-max-value                          = 32","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y5537/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y58Px,iceoryx2,2565325809,571,NA,smileghp,42567524,,,NA,2024-12-30T10:57:40Z,2024-12-30T10:57:40Z,"> 1. In your setup, when the bug occurred, was the publisher or the subscriber created first?

subscriber created first.

> 2. Do you use multi threading? Are samples accessed, released in a different thread then the subscriber is handled?

yes,it's a mutli-thread process, but samples accessed, released in a same thread when subscriber handled.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y58Px/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y59ao,iceoryx2,2565330600,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T11:01:58Z,2024-12-30T11:01:58Z,@smileghp Is the publisher accessed from multiple threads?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y59ao/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y5-4P,iceoryx2,2565336591,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T11:07:11Z,2024-12-30T11:07:11Z,"@smileghp The underlying mechanism is a construct with a submission and a completion queue. Your problem is, that the completion queue capacity is exceeded. The capacity is calculated as the sum of the subscriber buffer size `N` + subscriber max borrowed samples `B` + 1 (required when the processes interrupt each other).

Whenever the publisher delivers a sample, it calls `Publisher::retrieve_returned_samples` first to acquire all returned samples from the completion queue. The thing is, I cannot think of a scenario where the completion queue needs a capacity greater than `N + B + 1`.

Here are some abstract scenarios I have drafted, maybe you have an idea how the capacity of the completion queue can be exceeded - if you cannot create a reproducible minimal example.

* subscriber buffer size = N, subscriber max borrowed samples = B
* subscriber current borrowed samples = S
* submission queue size = Q (capacity = N)
* completion queue size = C (capacity = N + B + 1)

Case 1:
* Start state: Q = N, C = 0, S = B

1. Publisher sends sample
   * Publisher::retrieve_returned_samples()
   * Publisher interrupted
2. Subscriber returns B samples
   * C = B
   * S = 0
   * Q = N
3. Subscriber consumes N and returns all N
   * C = B + N
   * S = 0
   * Q = 0
4. Publisher continues and delivers sample
   * C = B + N
   * S = 0
   * Q = 1
5. Subscriber consumer sample and returns it
   * C = B + N + 1
   * S = 0
   * Q = 0

Case 2:
* Start state: Q = N, C = 0, S = B

1. Subscriber returns sample
   * Interrupted before ZeroCopyReceiver::release() call
2. Publisher sends sample
   * Publisher::retrieve_returned_samples()
   * Publisher interrupted
3. Subscriber continues and releases sample
   * C = 1
   * S = B - 1
   * Q = N
3. Subscriber consumes another sample
   * C = 1
   * S = B
   * Q = N - 1
5. Publisher continues and delivers sample
   * C = 1
   * S = B
   * Q = N
6. Subscriber consumes and releases all samples
   * C = B + N + 1
   * S = 0
   * Q = 0
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y5-4P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6Hia,iceoryx2,2565372058,571,NA,smileghp,42567524,,,NA,2024-12-30T11:41:26Z,2024-12-30T11:41:26Z,"> @smileghp Is the publisher accessed from multiple threads?

yes","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6Hia/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6QeK,iceoryx2,2565408650,571,NA,smileghp,42567524,,,NA,2024-12-30T12:16:24Z,2024-12-30T12:16:24Z,"Based on your description, I initially think that this error should occur in the publisherâs process, but I observed that the phenomenon seems to happen in the subscriberâs thread.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6QeK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6SQi,iceoryx2,2565415970,571,NA,smileghp,42567524,,,NA,2024-12-30T12:22:37Z,2024-12-30T12:22:37Z,"And sometimes the subscriber encounters the error âExceedsMaxBorrowedSamplesâ

In C++, does it return the sample immediately, or could you explain the timing of when the sample is returned? Is there an interface to actively return the sample?

 the subscriber handle is as follows
>  if (!subscriber_->has_samples().expect(""has samples"")) {
    return false;
  }
  auto expect = subscriber_->receive();
  if (expect.has_error()) {
    std::cout << ""iox2 read error: "" << channel_name() << "" err: "" << ErrToString(expect.error())
              << std::endl;
  }
  auto sample = std::move(expect.value());
  if (!sample.has_value()) {
    return false;
  }
  while (sample.has_value()) {
    if (pub_unique_id_ == nullptr || !(sample->origin() == * pub_unique_id_)) {
      const DataType* data_raw = &sample->payload();
      if(data_raw == nullptr) {
        return false;
      }
      callback(data_raw->data, data_raw->length); //do something 
    } else {
      const auto data_raw = sample->payload();
    }
    auto expect = subscriber_->receive();
    if (expect.has_error()) {
      std::cout << ""iox2 read error: "" << channel_name() << "" err: "" << ErrToString(expect.error())
                << std::endl;
    }
    sample = std::move(expect.value());
  }","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6SQi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6aL9,iceoryx2,2565448445,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T12:54:19Z,2024-12-30T12:54:19Z,"@smileghp 

> Based on your description, I initially think that this error should occur in the publisherâs process, but I observed that the phenomenon seems to happen in the subscriberâs thread.

It is a bug on the publisher side that will affect the subscriber side.

> > Is the publisher accessed from multiple threads?

> yes

This can also be the root cause since no construct of iceoryx2 is thread-safe. If you want to access the publisher from multiple threads you can create a separate publisher for each thread.

I created a pull request #572 that addresses one issue that can lead to the error you encountered. But it happens when the subscriber has a smaller buffer size than the history size, and the history is consumed on the subscriber side while the publisher is delivering it.
Could you please try out this version? Maybe it has already fixed your issue.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6aL9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6eO7,iceoryx2,2565465019,571,NA,smileghp,42567524,,,NA,2024-12-30T13:10:12Z,2024-12-30T13:10:12Z,"Okay, I will pick your changes and test them in my environment.

although multiple threads can access the publisher, there will be no competition because I used a lock to ensure it.

> In C++, does it return the sample immediately, or could you explain the timing of when the sample is returned? Is there an interface to actively return the sample?

Can you explain this?

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6eO7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6kmu,iceoryx2,2565491118,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T13:32:56Z,2024-12-30T13:32:56Z,"> Okay, I will pick your changes and test them in my environment.
> although multiple threads can access the publisher, there will be no > competition because I used a lock to ensure it.

Actually, this is not enough since the `SampleMut` is coupled with the `Publisher`, and as soon as you call send, you have a concurrency issue again which could lead to the exact scenario you are observing. This can only be handled with a low level mutex deep inside the publisher on the Rust side. We will tackle this problem soon and provide on the Rust and the C++ side publisher/subscriber and sample versions that are out-of-the-box threadsafe.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6kmu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6k3v,iceoryx2,2565492207,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T13:33:58Z,2024-12-30T13:33:58Z,"> In C++, does it return the sample immediately, or could you explain the timing of when the sample is returned? Is there an interface to actively return the sample?

As soon as the `Sample` goes out of scope on the `Subscriber` side it will be returned to the `Publisher`.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6k3v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6ofV,iceoryx2,2565507029,571,NA,smileghp,42567524,,,NA,2024-12-30T13:46:54Z,2024-12-30T13:46:54Z,"> > In C++, does it return the sample immediately, or could you explain the timing of when the sample is returned? Is there an interface to actively return the sample?
> 
> As soon as the `Sample` goes out of scope on the `Subscriber` side it will be returned to the `Publisher`.

@elfenpiff  okay but I still donât understand why the âExceedsMaxBorrowedSamplesâ error occurs in 'Subscriber' side. My implementation is the code mentioned above.

> And sometimes the subscriber encounters the error âExceedsMaxBorrowedSamplesâ
> 
> In C++, does it return the sample immediately, or could you explain the timing of when the sample is returned? Is there an interface to actively return the sample?
> 
> the subscriber handle is as follows
> 
> > {
>> if (!subscriber_->has_samples().expect(""has samples"")) {
> > return false;
> > }
> > auto expect = subscriber_->receive();
> > if (expect.has_error()) {
> > std::cout << ""iox2 read error: "" << channel_name() << "" err: "" << ErrToString(expect.error())
> > << std::endl;
> > }
> > auto sample = std::move(expect.value());
> > if (!sample.has_value()) {
> > return false;
> > }
> > while (sample.has_value()) {
> > if (pub_unique_id_ == nullptr || !(sample->origin() == * pub_unique_id_)) {
> > const DataType* data_raw = &sample->payload();
> > if(data_raw == nullptr) {
> > return false;
> > }
> > callback(data_raw->data, data_raw->length); //do something
> > } else {
> > const auto data_raw = sample->payload();
> > }
> > auto expect = subscriber_->receive();
> > if (expect.has_error()) {
> > std::cout << ""iox2 read error: "" << channel_name() << "" err: "" << ErrToString(expect.error())
> > << std::endl;
> > }
> > sample = std::move(expect.value());
> > }

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y6ofV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y7MZC,iceoryx2,2565654082,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2024-12-30T15:55:49Z,2024-12-30T15:55:49Z,"@smileghp Since the completion queue is filled by the subscriber whenever a sample is released and the publisher has the responsibility to recycle the samples from the completion queue.

It follows a specific contract, and when the publisher violates that contract, it causes a failure on the subscriber side since the subscriber just adds samples to the completion queue.

It would make sense to handle this differently on the subscriber side so that it is not harshly affected - a better way would be just to cut the connection to the publisher since it is obviously malfunctioning.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Y7MZC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZHPKL,iceoryx2,2568811147,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-03T07:50:55Z,2025-01-03T07:50:55Z,@smileghp The pull request has been merged. Could you please confirm if this solves the bug.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZHPKL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/571,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxWte,iceoryx2,2579852126,571,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-09T11:03:24Z,2025-01-09T11:03:24Z,"@smileghp I am closing this issue. Please feel free to reopen it, when the bug persists.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxWte/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/573,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/573,iceoryx2,2766066913,573,Deadline property for event services,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-02T13:49:19Z,2025-01-03T18:58:00Z,"## Brief feature description

The deadline property shall define the maximum time between two notifications emitted by any notifiers of an event messaging service.
It is defined when the service is created. A listener that is attached to a waitset shall be signaled when the deadline was hit. A notiifer shall be informed when the notification was sent after the deadline was hit.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/573/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,iceoryx2,2774644636,575,Unable to transfer data larger than 8MiB,gyk,4338714,Yukun Guo,,CLOSED,2025-01-08T08:23:47Z,2025-01-10T06:31:46Z,"## Required information

**Operating system:**

Windows 11 23H2 (22635.4655)

**Rust version:**

rustc 1.82.0 (f6e511eec 2024-10-15)

**Cargo version:**

cargo 1.82.0 (8f40fc59f 2024-08-21)

**iceoryx2 version:**

0.5.0

**Observed result or behaviour:**

In the `publish_subscribe_dynamic_data` example, the publisher cannot send u8 slice exceeding 8 MiB. It can be reproduced by

```diff
--- a/examples/rust/publish_subscribe_dynamic_data/publisher.rs
+++ b/examples/rust/publish_subscribe_dynamic_data/publisher.rs
@@ -35,10 +35,10 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {
         .allocation_strategy(AllocationStrategy::PowerOfTwo)
         .create()?;

-    let mut counter = 0;
+    let mut counter = 1;

     while node.wait(CYCLE_TIME).is_ok() {
-        let required_memory_size = (counter + 1) * (counter + 1);
+        let required_memory_size = counter;
         let sample = publisher.loan_slice_uninit(required_memory_size)?;
         let sample = sample.write_from_fn(|byte_idx| ((byte_idx + counter) % 255) as u8);

@@ -49,7 +49,7 @@ fn main() -> Result<(), Box<dyn std::error::Error>> {
             counter, required_memory_size
         );

-        counter += 1;
+        counter *= 2;
     }

     println!(""exit"");
```

The publisher crashes with error

```
< Win32 API error > iceoryx2-pal\posix\src\windows\mman.rs:332 MapViewOfFile(win_handle.handle.handle, FILE_MAP_ALL_ACCESS, 0, 0, len)
 [ 5 ] Access is denied.

       81 [F] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_3892_97239722077290829675606576948__10.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownership
              : true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | This should never happen! A valid shared memory object should never contain a base address with null value.
thread 'main' panicked at iceoryx2-bb\posix\src\shared_memory.rs:484:17:
From: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_3892_97239722077290829675606576948__10.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None } ::: This should never happen! A valid shared memory object should never contain a base address with null value.
```

According to my test, the maximum length of u8 slice that can be successfully sent is ~~`8192 * 1024 - 100 + 64`~~.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zp2hR,iceoryx2,2577885265,575,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-08T15:00:28Z,2025-01-08T15:00:28Z,"@gyk the `Access is denied` error is suspicious. Can you reduce the number of subscribers and check if the limit is still the same? A wild guess is that it depends on the amount of shared memory the publisher wants to use and with the default configuration, this limit is reached with ~8M","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Zp2hR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvEf0,iceoryx2,2579253236,575,NA,gyk,4338714,Yukun Guo,,NA,2025-01-09T06:11:58Z,2025-01-09T06:11:58Z,"@elBoberido I only run one subscriber and one publisher, using [these commands](https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/rust/publish_subscribe_dynamic_data#running-the-example).","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvEf0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvX89,iceoryx2,2579332925,575,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-09T07:23:46Z,2025-01-09T07:23:46Z,"@gyk I can partially reproduce your issue. But for me, it is not 8 MB. It is ~20MB. And I am not out of memory.

Could you please add `set_log_level(LogLevel::Trace);` to the beginning of your source code, rerun the code again, and send me the output?

I think we hit some kind of internal Windows limit here, and I'll try to provide at least a better error message,e but in the meantime, you can adjust some service settings to reduce the required memory via the service builder:

```rust
    let service = node
        .service_builder(&""Service With Dynamic Data"".try_into()?)
        .publish_subscribe::<[u8]>()
        .max_subscribers(1)
        .history_size(1)
        .subscriber_max_borrowed_samples(1)
        .subscriber_max_buffer_size(1)
        .open_or_create()?;
```

Here is the documentation of this part: https://docs.rs/iceoryx2/latest/iceoryx2/service/index.html","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZvX89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZwIjb,iceoryx2,2579531995,575,NA,gyk,4338714,Yukun Guo,,NA,2025-01-09T09:09:17Z,2025-01-09T09:09:17Z,"@elfenpiff I have modified the reproduction code above to send `counter` bytes instead of `counter * counter` bytes.
It panicked at sending 8388608 bytes, and after applying your suggestion, the number is now 67108864. Thanks!

And my PC has 32 GB memory and the paging file size is configured to approx. 6 GB.

<details><summary>The output before change</summary>

```
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 7.42s
     Running `target\debug\examples\publish_subscribe_dyn_publisher.exe`
        0 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 20, data: ""config/iceoryx2.toml"" } }, access
              _mode: Read, permission: Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation
              _mode: None }
              | opened
        1 [T] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } },
               root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName {
               value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByte
              String<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> {
               len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len:
              8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dy
              namic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".c
              onnection"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, nod
              e: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { val
              ue: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByt
              eString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12,
              data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults:
              Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_b
              uffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 0, enable_s
              afe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_
              listeners: 16, max_notifiers: 16, max_nodes: 36, event_id_max_value: 4294967295, deadline: None, notifier_created_event
              : None, notifier_dropped_event: None, notifier_dead_event: None } } }
              | Loaded.
        2 [T] Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } },
               root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName {
               value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByte
              String<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> {
               len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len:
              8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dy
              namic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".c
              onnection"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, nod
              e: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { val
              ue: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByt
              eString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12,
              data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults:
              Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 8, max_publishers: 2, max_nodes: 20, subscriber_max_b
              uffer_size: 2, subscriber_max_borrowed_samples: 2, publisher_max_loaned_samples: 2, publisher_history_size: 0, enable_s
              afe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_
              listeners: 16, max_notifiers: 16, max_nodes: 36, event_id_max_value: 4294967295, deadline: None, notifier_created_event
              : None, notifier_dropped_event: None, notifier_dead_event: None } } }
              | Set as global config.
        3 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\1652287786
              860849093471658572\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner:
               None, group: None, truncate_size: None, creation_mode: None }
              | opened
        4 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\iox2_16522
              87786860849093471658572.node_monitor"" } }, access_mode: Write, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
        5 [T] Directory { path: Path { value: FixedSizeByteString<255> { len: 52, data: ""c:\Temp\iceoryx2\nodes\122729435023924952503
              06247360"" } }, directory_stream: 0x2, file_descriptor: FileDescriptor { value: 0, is_owned: false } }
              | created
        6 [T] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, has_ownership: false, co
              nfig: Configuration { path: Path { value: FixedSizeByteString<255> { len: 52, data: ""c:\Temp\iceoryx2\nodes\12272943502
              392495250306247360"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: Fil
              eName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } } }
              | Created service root directory ""c:\Temp\iceoryx2\nodes\12272943502392495250306247360"" since it did not exist before.
        7 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1227294350
              2392495250306247360\iox2_node.details"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownership: false,
              owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
        8 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 81, data: ""c:\Temp\iceoryx2\nodes\iox2_12272
              943502392495250306247360.node_monitor_owner_lock"" } }, access_mode: ReadWrite, permission: Permission(448), has_ownersh
              ip: true, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
        9 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\iox2_12272
              943502392495250306247360.node_monitor"" } }, access_mode: ReadWrite, permission: Permission(128), has_ownership: true, o
              wner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclusive) }
              | created
       10 [T] ""ProcessGuard::new()""
              | create process state ""c:\Temp\iceoryx2\nodes\iox2_12272943502392495250306247360.node_monitor"" for monitoring
       11 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_bc
              3ab41f6420f6b82c95ca160a9d440946aa6490.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: fal
              se, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
       12 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_bc
              3ab41f6420f6b82c95ca160a9d440946aa6490.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: fal
              se, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
       13 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_bc
              3ab41f6420f6b82c95ca160a9d440946aa6490.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: fal
              se, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
       14 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 79, data: ""c:\Temp\iceoryx2\services\iox2_bc
              3ab41f6420f6b82c95ca160a9d440946aa6490.service"" } }, access_mode: Read, permission: Permission(448), has_ownership: fal
              se, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
       15 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 110, data: ""c:\Temp\iceoryx2\nodes\122729435
              02392495250306247360\iox2_bc3ab41f6420f6b82c95ca160a9d440946aa6490.service_tag"" } }, access_mode: ReadWrite, permission
              : Permission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: Some(CreateExclu
              sive) }
              | created
       16 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5
              743e42e7_bc3ab41f6420f6b82c95ca160a9d440946aa6490.dynamic"" } }, size: 1435, base_address: 0x15c4c880000, has_ownership:
               false, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | open
       17 [T] ""Service::open()""
              | open service: Service With Dynamic Data (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, dat
              | a: ""bc3ab41f6420f6b82c95ca160a9d440946aa6490"" } }))
       18 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 102, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__mgmt.publisher_data"" } }, size: 148, base_address: 0x15c4c890000, has_ow
              nership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | create
       19 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__0.publisher_data"" } }, size: 1639, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       20 [D] SharedMemoryBuilder { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f6469687584532
              73c6c65cb372831b_91987690542484328654466722496_81282616992048165476571832908.connection"" } }, size: 0, is_memory_locked
              : false, has_ownership: true, permission: Permission(448), creation_mode: None, zero_memory: true, access_mode: ReadWri
              te, enforce_base_address: None }
              | Unable to open shared memory since the shared memory does not exist.
       21 [D] Builder { storage_name: FileName { value: FixedSizeByteString<255> { len: 59, data: ""91987690542484328654466722496_8128
              2616992048165476571832908"" } }, supplementary_size: 16915, has_ownership: true, config: Configuration { suffix: FileNam
              e { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, prefix: FileName { value: FixedSizeByteString<2
              55> { len: 5, data: ""iox2_"" } }, path: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } },
               _data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }, timeout: 500ms, initi
              alizer: , _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }
              | Failed to open posix_shared_memory::DynamicStorage since a shared memory with that name does not exists.
       22 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65
              cb372831b_91987690542484328654466722496_81282616992048165476571832908.connection"" } }, size: 17075, base_address: 0x15c
              4cb00000, has_ownership: true, file_descriptor: FileDescriptor { value: 7, is_owned: true }, memory_lock: None }
              | create
Send sample 1 with 1 bytes...
Send sample 2 with 2 bytes...
Send sample 4 with 4 bytes...
Send sample 8 with 8 bytes...
Send sample 16 with 16 bytes...
       23 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 1480, _phantom: PhantomData<core::ce
              ll::UnsafeCell<u32>> }, capacity: 34, head: 167772160, is_memory_initialized: true }, bucket_size: 40, bucket_alignment
              : 8, start: 1495935156360, size: 1360, is_memory_initialized: true }
              | The requested allocation size 56 is greater than the maximum supported size of 40.
       24 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 1480, _ph
              antom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 167772160, is_memory_initialized: true }, bucket
              _size: 40, bucket_alignment: 8, start: 1495935156360, size: 1360, is_memory_initialized: true }, base_address: 14959351
              56360, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       25 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__0.publisher_data"" } }, size: 1639, base_
              address: 0x15c4caf0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock:
               None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__0"" } }
              , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_919876905
              42484328654466722496__0"" } }, payload_start_address: 1495935156360, _phantom: PhantomData<iceoryx2_cal::shm_allocator::
              pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       26 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__1.publisher_data"" } }, size: 2455, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       27 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__0.publisher_data"" } }, size: 1639, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       28 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__0.publisher_data"" } }, size: 1639, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 32 with 32 bytes...
       29 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 2296, _phantom: PhantomData<core::ce
              ll::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 64, bucket_alignment:
               8, start: 1495935287432, size: 2176, is_memory_initialized: true }
              | The requested allocation size 88 is greater than the maximum supported size of 64.
       30 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 2296, _ph
              antom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_
              size: 64, bucket_alignment: 8, start: 1495935287432, size: 2176, is_memory_initialized: true }, base_address: 149593528
              7432, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       31 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__1.publisher_data"" } }, size: 2455, base_
              address: 0x15c4cb10000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock:
               None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__1"" } }
              , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_919876905
              42484328654466722496__1"" } }, payload_start_address: 1495935287432, _phantom: PhantomData<iceoryx2_cal::shm_allocator::
              pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       32 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__2.publisher_data"" } }, size: 4631, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       33 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__1.publisher_data"" } }, size: 2455, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       34 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__1.publisher_data"" } }, size: 2455, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 64 with 64 bytes...
       35 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 4472, _phantom: PhantomData<core::ce
              ll::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 128, bucket_alignment
              : 8, start: 1495935156360, size: 4352, is_memory_initialized: true }
              | The requested allocation size 152 is greater than the maximum supported size of 128.
       36 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 4472, _ph
              antom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_
              size: 128, bucket_alignment: 8, start: 1495935156360, size: 4352, is_memory_initialized: true }, base_address: 14959351
              56360, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       37 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__2.publisher_data"" } }, size: 4631, base_
              address: 0x15c4caf0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock:
               None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__2"" } }
              , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_919876905
              42484328654466722496__2"" } }, payload_start_address: 1495935156360, _phantom: PhantomData<iceoryx2_cal::shm_allocator::
              pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       38 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__3.publisher_data"" } }, size: 8983, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       39 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__2.publisher_data"" } }, size: 4631, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       40 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__2.publisher_data"" } }, size: 4631, base_address: 0x15c4caf0000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 128 with 128 bytes...
       41 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 8824, _phantom: PhantomData<core::ce
              ll::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 256, bucket_alignment
              : 8, start: 1495935287432, size: 8704, is_memory_initialized: true }
              | The requested allocation size 280 is greater than the maximum supported size of 256.
       42 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 8824, _ph
              antom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_
              size: 256, bucket_alignment: 8, start: 1495935287432, size: 8704, is_memory_initialized: true }, base_address: 14959352
              87432, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       43 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__3.publisher_data"" } }, size: 8983, base_
              address: 0x15c4cb10000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock:
               None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__3"" } }
              , _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_919876905
              42484328654466722496__3"" } }, payload_start_address: 1495935287432, _phantom: PhantomData<iceoryx2_cal::shm_allocator::
              pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       44 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__4.publisher_data"" } }, size: 17687, base_address: 0x15c4caf0000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       45 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__3.publisher_data"" } }, size: 8983, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       46 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__3.publisher_data"" } }, size: 8983, base_address: 0x15c4cb10000, has_owner
              ship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 256 with 256 bytes...
       47 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 17528, _phantom: PhantomData<core::c
              ell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 512, bucket_alignmen
              t: 8, start: 1495935156360, size: 17408, is_memory_initialized: true }
              | The requested allocation size 536 is greater than the maximum supported size of 512.
       48 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 17528, _p
              hantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket
              _size: 512, bucket_alignment: 8, start: 1495935156360, size: 17408, is_memory_initialized: true }, base_address: 149593
              5156360, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       49 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__4.publisher_data"" } }, size: 17687, base
              _address: 0x15c4caf0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock
              : None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__4"" }
              }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocato
              r::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690
              542484328654466722496__4"" } }, payload_start_address: 1495935156360, _phantom: PhantomData<iceoryx2_cal::shm_allocator:
              :pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       50 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__5.publisher_data"" } }, size: 35095, base_address: 0x15c4cb10000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       51 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__4.publisher_data"" } }, size: 17687, base_address: 0x15c4caf0000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       52 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__4.publisher_data"" } }, size: 17687, base_address: 0x15c4caf0000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 512 with 512 bytes...
       53 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 34936, _phantom: PhantomData<core::c
              ell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 1024, bucket_alignme
              nt: 8, start: 1495935287432, size: 34816, is_memory_initialized: true }
              | The requested allocation size 1048 is greater than the maximum supported size of 1024.
       54 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 34936, _p
              hantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket
              _size: 1024, bucket_alignment: 8, start: 1495935287432, size: 34816, is_memory_initialized: true }, base_address: 14959
              35287432, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       55 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__5.publisher_data"" } }, size: 35095, base
              _address: 0x15c4cb10000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock
              : None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__5"" }
              }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocato
              r::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690
              542484328654466722496__5"" } }, payload_start_address: 1495935287432, _phantom: PhantomData<iceoryx2_cal::shm_allocator:
              :pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       56 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__6.publisher_data"" } }, size: 69911, base_address: 0x15c4cb20000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       57 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__5.publisher_data"" } }, size: 35095, base_address: 0x15c4cb10000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       58 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__5.publisher_data"" } }, size: 35095, base_address: 0x15c4cb10000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 1024 with 1024 bytes...
       59 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 69752, _phantom: PhantomData<core::c
              ell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 2048, bucket_alignme
              nt: 8, start: 1495935352968, size: 69632, is_memory_initialized: true }
              | The requested allocation size 2072 is greater than the maximum supported size of 2048.
       60 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 69752, _p
              hantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket
              _size: 2048, bucket_alignment: 8, start: 1495935352968, size: 69632, is_memory_initialized: true }, base_address: 14959
              35352968, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       61 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__6.publisher_data"" } }, size: 69911, base
              _address: 0x15c4cb20000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock
              : None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__6"" }
              }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocato
              r::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690
              542484328654466722496__6"" } }, payload_start_address: 1495935352968, _phantom: PhantomData<iceoryx2_cal::shm_allocator:
              :pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       62 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__7.publisher_data"" } }, size: 139543, base_address: 0x15c4cb40000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       63 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__6.publisher_data"" } }, size: 69911, base_address: 0x15c4cb20000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       64 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__6.publisher_data"" } }, size: 69911, base_address: 0x15c4cb20000, has_owne
              rship: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 2048 with 2048 bytes...
       65 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 139384, _phantom: PhantomData<core::
              cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 4096, bucket_alignm
              ent: 8, start: 1495935484040, size: 139264, is_memory_initialized: true }
              | The requested allocation size 4120 is greater than the maximum supported size of 4096.
       66 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 139384, _
              phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucke
              t_size: 4096, bucket_alignment: 8, start: 1495935484040, size: 139264, is_memory_initialized: true }, base_address: 149
              5935484040, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       67 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__7.publisher_data"" } }, size: 139543, bas
              e_address: 0x15c4cb40000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_loc
              k: None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__7"" }
               }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocat
              or::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_9198769
              0542484328654466722496__7"" } }, payload_start_address: 1495935484040, _phantom: PhantomData<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       68 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__8.publisher_data"" } }, size: 278807, base_address: 0x15c4cb70000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       69 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__7.publisher_data"" } }, size: 139543, base_address: 0x15c4cb40000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       70 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__7.publisher_data"" } }, size: 139543, base_address: 0x15c4cb40000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 4096 with 4096 bytes...
       71 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 278648, _phantom: PhantomData<core::
              cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 8192, bucket_alignm
              ent: 8, start: 1495935680648, size: 278528, is_memory_initialized: true }
              | The requested allocation size 8216 is greater than the maximum supported size of 8192.
       72 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 278648, _
              phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucke
              t_size: 8192, bucket_alignment: 8, start: 1495935680648, size: 278528, is_memory_initialized: true }, base_address: 149
              5935680648, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       73 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__8.publisher_data"" } }, size: 278807, bas
              e_address: 0x15c4cb70000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_loc
              k: None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__8"" }
               }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocat
              or::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_9198769
              0542484328654466722496__8"" } }, payload_start_address: 1495935680648, _phantom: PhantomData<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       74 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__9.publisher_data"" } }, size: 557335, base_address: 0x15c4cbc0000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       75 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__8.publisher_data"" } }, size: 278807, base_address: 0x15c4cb70000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       76 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__8.publisher_data"" } }, size: 278807, base_address: 0x15c4cb70000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 8192 with 8192 bytes...
       77 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 557176, _phantom: PhantomData<core::
              cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 16384, bucket_align
              ment: 8, start: 1495936008328, size: 557056, is_memory_initialized: true }
              | The requested allocation size 16408 is greater than the maximum supported size of 16384.
       78 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 557176, _
              phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucke
              t_size: 16384, bucket_alignment: 8, start: 1495936008328, size: 557056, is_memory_initialized: true }, base_address: 14
              95936008328, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       79 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2
              _0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__9.publisher_data"" } }, size: 557335, bas
              e_address: 0x15c4cbc0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_loc
              k: None }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_91987690542484328654466722496__9"" }
               }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocat
              or::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 38, data: ""10944_9198769
              0542484328654466722496__9"" } }, payload_start_address: 1495936008328, _phantom: PhantomData<iceoryx2_cal::shm_allocator
              ::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       80 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__10.publisher_data"" } }, size: 1114391, base_address: 0x15c4cc50000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       81 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__9.publisher_data"" } }, size: 557335, base_address: 0x15c4cbc0000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       82 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 99, data: ""iox2_0354a209029e7d094a819e2d4030ea33
              1e6caaf0_10944_91987690542484328654466722496__9.publisher_data"" } }, size: 557335, base_address: 0x15c4cbc0000, has_own
              ership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 16384 with 16384 bytes...
       83 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 1114232, _phantom: PhantomData<core:
              :cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 32768, bucket_alig
              nment: 8, start: 1495936598152, size: 1114112, is_memory_initialized: true }
              | The requested allocation size 32792 is greater than the maximum supported size of 32768.
       84 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 1114232,
              _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buck
              et_size: 32768, bucket_alignment: 8, start: 1495936598152, size: 1114112, is_memory_initialized: true }, base_address:
              1495936598152, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       85 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__10.publisher_data"" } }, size: 1114391,
              base_address: 0x15c4cc50000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_
              lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__1
              0"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_919
              87690542484328654466722496__10"" } }, payload_start_address: 1495936598152, _phantom: PhantomData<iceoryx2_cal::shm_allo
              cator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       86 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__11.publisher_data"" } }, size: 2228503, base_address: 0x15c4cd70000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       87 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__10.publisher_data"" } }, size: 1114391, base_address: 0x15c4cc50000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
       88 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__10.publisher_data"" } }, size: 1114391, base_address: 0x15c4cc50000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 32768 with 32768 bytes...
       89 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 2228344, _phantom: PhantomData<core:
              :cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 65536, bucket_alig
              nment: 8, start: 1495937777800, size: 2228224, is_memory_initialized: true }
              | The requested allocation size 65560 is greater than the maximum supported size of 65536.
       90 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 2228344,
              _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buck
              et_size: 65536, bucket_alignment: 8, start: 1495937777800, size: 2228224, is_memory_initialized: true }, base_address:
              1495937777800, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       91 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__11.publisher_data"" } }, size: 2228503,
              base_address: 0x15c4cd70000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_
              lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__1
              1"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_919
              87690542484328654466722496__11"" } }, payload_start_address: 1495937777800, _phantom: PhantomData<iceoryx2_cal::shm_allo
              cator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       92 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__12.publisher_data"" } }, size: 4456727, base_address: 0x15c4cfa0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
       93 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__11.publisher_data"" } }, size: 2228503, base_address: 0x15c4cd70000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
       94 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__11.publisher_data"" } }, size: 2228503, base_address: 0x15c4cd70000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 65536 with 65536 bytes...
       95 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 4456568, _phantom: PhantomData<core:
              :cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 131072, bucket_ali
              gnment: 8, start: 1495940071560, size: 4456448, is_memory_initialized: true }
              | The requested allocation size 131096 is greater than the maximum supported size of 131072.
       96 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 4456568,
              _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buck
              et_size: 131072, bucket_alignment: 8, start: 1495940071560, size: 4456448, is_memory_initialized: true }, base_address:
               1495940071560, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
       97 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__12.publisher_data"" } }, size: 4456727,
              base_address: 0x15c4cfa0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_
              lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__1
              2"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_919
              87690542484328654466722496__12"" } }, payload_start_address: 1495940071560, _phantom: PhantomData<iceoryx2_cal::shm_allo
              cator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
       98 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__13.publisher_data"" } }, size: 8913175, base_address: 0x15c4d3f0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
       99 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__12.publisher_data"" } }, size: 4456727, base_address: 0x15c4cfa0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      100 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__12.publisher_data"" } }, size: 4456727, base_address: 0x15c4cfa0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 131072 with 131072 bytes...
      101 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 8913016, _phantom: PhantomData<core:
              :cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 262144, bucket_ali
              gnment: 8, start: 1495944593544, size: 8912896, is_memory_initialized: true }
              | The requested allocation size 262168 is greater than the maximum supported size of 262144.
      102 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 8913016,
              _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buck
              et_size: 262144, bucket_alignment: 8, start: 1495944593544, size: 8912896, is_memory_initialized: true }, base_address:
               1495944593544, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      103 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__13.publisher_data"" } }, size: 8913175,
              base_address: 0x15c4d3f0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_
              lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__1
              3"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_919
              87690542484328654466722496__13"" } }, payload_start_address: 1495944593544, _phantom: PhantomData<iceoryx2_cal::shm_allo
              cator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      104 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__14.publisher_data"" } }, size: 17826071, base_address: 0x15c4dc80000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      105 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__13.publisher_data"" } }, size: 8913175, base_address: 0x15c4d3f0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      106 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__13.publisher_data"" } }, size: 8913175, base_address: 0x15c4d3f0000, has_
              ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 262144 with 262144 bytes...
      107 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 17825912, _phantom: PhantomData<core
              ::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 524288, bucket_al
              ignment: 8, start: 1495953571976, size: 17825792, is_memory_initialized: true }
              | The requested allocation size 524312 is greater than the maximum supported size of 524288.
      108 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 17825912,
               _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buc
              ket_size: 524288, bucket_alignment: 8, start: 1495953571976, size: 17825792, is_memory_initialized: true }, base_addres
              s: 1495953571976, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      109 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__14.publisher_data"" } }, size: 17826071,
               base_address: 0x15c4dc80000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory
              _lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__
              14"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91
              987690542484328654466722496__14"" } }, payload_start_address: 1495953571976, _phantom: PhantomData<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      110 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__15.publisher_data"" } }, size: 35651863, base_address: 0x15c4ed90000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      111 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__14.publisher_data"" } }, size: 17826071, base_address: 0x15c4dc80000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      112 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__14.publisher_data"" } }, size: 17826071, base_address: 0x15c4dc80000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 524288 with 524288 bytes...
      113 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 35651704, _phantom: PhantomData<core
              ::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 1048576, bucket_a
              lignment: 8, start: 1495971463304, size: 35651584, is_memory_initialized: true }
              | The requested allocation size 1048600 is greater than the maximum supported size of 1048576.
      114 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 35651704,
               _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buc
              ket_size: 1048576, bucket_alignment: 8, start: 1495971463304, size: 35651584, is_memory_initialized: true }, base_addre
              ss: 1495971463304, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      115 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__15.publisher_data"" } }, size: 35651863,
               base_address: 0x15c4ed90000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory
              _lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__
              15"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91
              987690542484328654466722496__15"" } }, payload_start_address: 1495971463304, _phantom: PhantomData<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      116 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__16.publisher_data"" } }, size: 71303447, base_address: 0x15c50fa0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      117 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__15.publisher_data"" } }, size: 35651863, base_address: 0x15c4ed90000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      118 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__15.publisher_data"" } }, size: 35651863, base_address: 0x15c4ed90000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 1048576 with 1048576 bytes...
      119 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 71303288, _phantom: PhantomData<core
              ::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 2097152, bucket_a
              lignment: 8, start: 1496007180424, size: 71303168, is_memory_initialized: true }
              | The requested allocation size 2097176 is greater than the maximum supported size of 2097152.
      120 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 71303288,
               _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, buc
              ket_size: 2097152, bucket_alignment: 8, start: 1496007180424, size: 71303168, is_memory_initialized: true }, base_addre
              ss: 1496007180424, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      121 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__16.publisher_data"" } }, size: 71303447,
               base_address: 0x15c50fa0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory
              _lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496__
              16"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91
              987690542484328654466722496__16"" } }, payload_start_address: 1496007180424, _phantom: PhantomData<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      122 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__17.publisher_data"" } }, size: 142606615, base_address: 0x15c553b0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      123 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__16.publisher_data"" } }, size: 71303447, base_address: 0x15c50fa0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      124 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__16.publisher_data"" } }, size: 71303447, base_address: 0x15c50fa0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 2097152 with 2097152 bytes...
      125 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 142606456, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 4194304, bucket_
              alignment: 8, start: 1496078549128, size: 142606336, is_memory_initialized: true }
              | The requested allocation size 4194328 is greater than the maximum supported size of 4194304.
      126 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 142606456
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bu
              cket_size: 4194304, bucket_alignment: 8, start: 1496078549128, size: 142606336, is_memory_initialized: true }, base_add
              ress: 1496078549128, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      127 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__17.publisher_data"" } }, size: 142606615
              , base_address: 0x15c553b0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496_
              _17"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_9
              1987690542484328654466722496__17"" } }, payload_start_address: 1496078549128, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      128 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__18.publisher_data"" } }, size: 285212951, base_address: 0x15c5dbc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      129 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__17.publisher_data"" } }, size: 142606615, base_address: 0x15c553b0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      130 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__17.publisher_data"" } }, size: 142606615, base_address: 0x15c553b0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 4194304 with 4194304 bytes...
      131 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 285212792, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 8388608, bucket_
              alignment: 8, start: 1496221221000, size: 285212672, is_memory_initialized: true }
              | The requested allocation size 8388632 is greater than the maximum supported size of 8388608.
      132 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 285212792
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bu
              cket_size: 8388608, bucket_alignment: 8, start: 1496221221000, size: 285212672, is_memory_initialized: true }, base_add
              ress: 1496221221000, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      133 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__18.publisher_data"" } }, size: 285212951
              , base_address: 0x15c5dbc0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496_
              _18"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_9
              1987690542484328654466722496__18"" } }, payload_start_address: 1496221221000, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      134 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__19.publisher_data"" } }, size: 570425623, base_address: 0x15c00000000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      135 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__18.publisher_data"" } }, size: 285212951, base_address: 0x15c5dbc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      136 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__18.publisher_data"" } }, size: 285212951, base_address: 0x15c5dbc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 8388608 with 8388608 bytes...
      137 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 570425464, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bucket_size: 16777216, bucket
              _alignment: 8, start: 1494648619144, size: 570425344, is_memory_initialized: true }
              | The requested allocation size 16777240 is greater than the maximum supported size of 16777216.
      138 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 570425464
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 34, head: 33554432, is_memory_initialized: true }, bu
              cket_size: 16777216, bucket_alignment: 8, start: 1494648619144, size: 570425344, is_memory_initialized: true }, base_ad
              dress: 1494648619144, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 0 }
              | Unable to allocate memory.
      139 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__19.publisher_data"" } }, size: 570425623
              , base_address: 0x15c00000000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_91987690542484328654466722496_
              _19"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""10944_9
              1987690542484328654466722496__19"" } }, payload_start_address: 1494648619144, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
< Win32 API error > iceoryx2-pal\posix\src\windows\mman.rs:332 MapViewOfFile(win_handle.handle.handle, FILE_MAP_ALL_ACCESS, 0, 0, len)
 [ 5 ] Access is denied.

      140 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__20.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      141 [F] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__20.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | This should never happen! A valid shared memory object should never contain a base address with null value.
thread 'main' panicked at iceoryx2-bb\posix\src\shared_memory.rs:484:17:
From: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_10944_91987690542484328654466722496__20.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None } ::: This should never happen! A valid shared memory object should never contain a base address with null value.
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library/std\src\panicking.rs:662
   1: core::panicking::panic_fmt
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library/core\src\panicking.rs:74
   2: iceoryx2_bb_posix::shared_memory::SharedMemory::base_address
             at .\iceoryx2-bb\posix\src\shared_memory.rs:484
   3: iceoryx2_cal::dynamic_storage::posix_shared_memory::Builder<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator> >::init_impl<iceoryx2_cal::shared_memory::common::details::AllocatorDetai
             at .\iceoryx2-cal\src\dynamic_storage\posix_shared_memory.rs:289
   4: iceoryx2_cal::dynamic_storage::posix_shared_memory::impl$6::create<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator> >
             at .\iceoryx2-cal\src\dynamic_storage\posix_shared_memory.rs:364
   5: iceoryx2_cal::shared_memory::common::details::impl$5::create<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_storage::posix_shared_memory::Storage<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal:
             at .\iceoryx2-cal\src\shared_memory\common.rs:232
   6: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:573
   7: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:621
   8: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:665
   9: iceoryx2_cal::resizable_shared_memory::dynamic::impl$11::allocate<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynam
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:745
  10: iceoryx2::port::details::data_segment::DataSegment<iceoryx2::service::ipc::Service>::allocate<iceoryx2::service::ipc::Service>
             at .\iceoryx2\src\port\details\data_segment.rs:120
  11: iceoryx2::port::publisher::PublisherBackend<iceoryx2::service::ipc::Service>::allocate<iceoryx2::service::ipc::Service>
             at .\iceoryx2\src\port\publisher.rs:313
  12: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::allocate<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:778
  13: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::loan_slice_uninit_impl<iceoryx2::service::ipc::Service,u8,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:1061
  14: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::loan_slice_uninit<iceoryx2::service::ipc::Service,u8,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:1042
  15: publish_subscribe_dyn_publisher::main
             at .\examples\rust\publish_subscribe_dynamic_data\publisher.rs:43
  16: core::ops::function::FnOnce::call_once<enum2$<core::result::Result<tuple$<>,alloc::boxed::Box<dyn$<core::error::Error>,alloc::alloc::Global> > > (*)(),tuple$<> >
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
      142 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__20.publisher_data"" } }, size: 1140850967, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
      143 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__19.publisher_data"" } }, size: 570425623, base_address: 0x15c00000000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      144 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__19.publisher_data"" } }, size: 570425623, base_address: 0x15c00000000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
      145 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 102, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__mgmt.publisher_data"" } }, size: 148, base_address: 0x15c4c890000, has_ow
              nership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | close
      146 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 102, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_10944_91987690542484328654466722496__mgmt.publisher_data"" } }, size: 148, base_address: 0x15c4c890000, has_ow
              nership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | delete
      147 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65
              cb372831b_91987690542484328654466722496_81282616992048165476571832908.connection"" } }, size: 17075, base_address: 0x15c
              4cb00000, has_ownership: false, file_descriptor: FileDescriptor { value: 7, is_owned: true }, memory_lock: None }
              | close
      148 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 110, data: ""c:\Temp\iceoryx2\nodes\122729435
              02392495250306247360\iox2_bc3ab41f6420f6b82c95ca160a9d440946aa6490.service_tag"" } }, access_mode: Read, permission: Per
              mission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
      149 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\12272943502392495250306247360\iox2_bc3ab41f6420f6b82c95ca160a9d440946aa6490.service_tag""
      150 [T] ""ServiceState::drop()""
              | close service: Service With Dynamic Data (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, da
              | ta: ""bc3ab41f6420f6b82c95ca160a9d440946aa6490"" } }))
      151 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5
              743e42e7_bc3ab41f6420f6b82c95ca160a9d440946aa6490.dynamic"" } }, size: 1435, base_address: 0x15c4c880000, has_ownership:
               false, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | close
      152 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1227294350
              2392495250306247360\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      153 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\1652287786
              860849093471658572\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner:
               None, group: None, truncate_size: None, creation_mode: None }
              | opened
      154 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 69, data: ""c:\Temp\iceoryx2\nodes\iox2_16522
              87786860849093471658572.node_monitor"" } }, access_mode: Write, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      155 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1227294350
              2392495250306247360\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      156 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\12272943502392495250306247360\iox2_node.details""
      157 [T] ""Directory::remove""
              | removed ""c:\Temp\iceoryx2\nodes\12272943502392495250306247360""
      158 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_12272943502392495250306247360.node_monitor""
      159 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_12272943502392495250306247360.node_monitor_owner_lock""
error: process didn't exit successfully: `target\debug\examples\publish_subscribe_dyn_publisher.exe` (exit code: 101)
```

</details>

<details><summary>The output after change</summary>

```
...
Send sample 4194304 with 4194304 bytes...
      131 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 41943160, _phantom: PhantomData<core
              ::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }, bucket_size: 8388608, buck
              et_alignment: 8, start: 2098514755720, size: 41943040, is_memory_initialized: true }
              | The requested allocation size 8388632 is greater than the maximum supported size of 8388608.
      132 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 41943160,
               _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true },
               bucket_size: 8388608, bucket_alignment: 8, start: 2098514755720, size: 41943040, is_memory_initialized: true }, base_a
              ddress: 2098514755720, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 1 }
              | Unable to allocate memory.
      133 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__18.publisher_data"" } }, size: 41943203,
               base_address: 0x1e8993a0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory
              _lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93889033347649720323135284804__
              18"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93
              889033347649720323135284804__18"" } }, payload_start_address: 2098514755720, _phantom: PhantomData<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      134 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__19.publisher_data"" } }, size: 83886243, base_address: 0x1e89bbb0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      135 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__18.publisher_data"" } }, size: 41943203, base_address: 0x1e8993a0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      136 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__18.publisher_data"" } }, size: 41943203, base_address: 0x1e8993a0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 8388608 with 8388608 bytes...
      137 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 83886200, _phantom: PhantomData<core
              ::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }, bucket_size: 16777216, buc
              ket_alignment: 8, start: 2098556764296, size: 83886080, is_memory_initialized: true }
              | The requested allocation size 16777240 is greater than the maximum supported size of 16777216.
      138 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 83886200,
               _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true },
               bucket_size: 16777216, bucket_alignment: 8, start: 2098556764296, size: 83886080, is_memory_initialized: true }, base_
              address: 2098556764296, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 1 }
              | Unable to allocate memory.
      139 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__19.publisher_data"" } }, size: 83886243,
               base_address: 0x1e89bbb0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory
              _lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93889033347649720323135284804__
              19"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93
              889033347649720323135284804__19"" } }, payload_start_address: 2098556764296, _phantom: PhantomData<iceoryx2_cal::shm_all
              ocator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      140 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__20.publisher_data"" } }, size: 167772323, base_address: 0x1e8a0bc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      141 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__19.publisher_data"" } }, size: 83886243, base_address: 0x1e89bbb0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      142 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__19.publisher_data"" } }, size: 83886243, base_address: 0x1e89bbb0000, has
              _ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 16777216 with 16777216 bytes...
      143 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 167772280, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }, bucket_size: 33554432, bu
              cket_alignment: 8, start: 2098640715912, size: 167772160, is_memory_initialized: true }
              | The requested allocation size 33554456 is greater than the maximum supported size of 33554432.
      144 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 167772280
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }
              , bucket_size: 33554432, bucket_alignment: 8, start: 2098640715912, size: 167772160, is_memory_initialized: true }, bas
              e_address: 2098640715912, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 1 }
              | Unable to allocate memory.
      145 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__20.publisher_data"" } }, size: 167772323
              , base_address: 0x1e8a0bc0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93889033347649720323135284804_
              _20"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_9
              3889033347649720323135284804__20"" } }, payload_start_address: 2098640715912, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      146 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__21.publisher_data"" } }, size: 335544483, base_address: 0x1e8aabd0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      147 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__20.publisher_data"" } }, size: 167772323, base_address: 0x1e8a0bc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      148 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__20.publisher_data"" } }, size: 167772323, base_address: 0x1e8a0bc0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
Send sample 33554432 with 33554432 bytes...
      149 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 335544440, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }, bucket_size: 67108864, bu
              cket_alignment: 8, start: 2098808553608, size: 335544320, is_memory_initialized: true }
              | The requested allocation size 67108888 is greater than the maximum supported size of 67108864.
      150 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 335544440
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }
              , bucket_size: 67108864, bucket_alignment: 8, start: 2098808553608, size: 335544320, is_memory_initialized: true }, bas
              e_address: 2098808553608, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 1 }
              | Unable to allocate memory.
      151 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__21.publisher_data"" } }, size: 335544483
              , base_address: 0x1e8aabd0000, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93889033347649720323135284804_
              _21"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_9
              3889033347649720323135284804__21"" } }, payload_start_address: 2098808553608, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
      152 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__22.publisher_data"" } }, size: 671088803, base_address: 0x1e8bebe0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | create
      153 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__21.publisher_data"" } }, size: 335544483, base_address: 0x1e8aabd0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | close
      154 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__21.publisher_data"" } }, size: 335544483, base_address: 0x1e8aabd0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
Send sample 67108864 with 67108864 bytes...
      155 [D] PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 671088760, _phantom: PhantomData<cor
              e::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }, bucket_size: 134217728, b
              ucket_alignment: 8, start: 2099144163464, size: 671088640, is_memory_initialized: true }
              | The requested allocation size 134217752 is greater than the maximum supported size of 134217728.
      156 [D] PoolAllocator { allocator: PoolAllocator { buckets: UniqueIndexSet { data_ptr: RelocatablePointer { distance: 671088760
              , _phantom: PhantomData<core::cell::UnsafeCell<u32>> }, capacity: 5, head: 1099528404993, is_memory_initialized: true }
              , bucket_size: 134217728, bucket_alignment: 8, start: 2099144163464, size: 671088640, is_memory_initialized: true }, ba
              se_address: 2099144163464, max_supported_alignment_by_memory: 4096, number_of_used_buckets: 1 }
              | Unable to allocate memory.
      157 [D] Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox
              2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__22.publisher_data"" } }, size: 671088803
              , base_address: 0x1e8bebe0000, has_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memor
              y_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_93889033347649720323135284804_
              _22"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_a
              llocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 39, data: ""42564_9
              3889033347649720323135284804__22"" } }, payload_start_address: 2099144163464, _phantom: PhantomData<iceoryx2_cal::shm_al
              locator::pool_allocator::PoolAllocator> }
              | Failed to allocate shared memory due to an internal allocator failure.
< Win32 API error > iceoryx2-pal\posix\src\windows\mman.rs:332 MapViewOfFile(win_handle.handle.handle, FILE_MAP_ALL_ACCESS, 0, 0, len)
 [ 5 ] Access is denied.

      158 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__23.publisher_data"" } }, size: 1342177443, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | create
      159 [F] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__23.publisher_data"" } }, size: 1342177443, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | This should never happen! A valid shared memory object should never contain a base address with null value.
thread 'main' panicked at iceoryx2-bb\posix\src\shared_memory.rs:484:17:
From: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_42564_93889033347649720323135284804__23.publisher_data"" } }, size: 1342177443, base_address: 0x0, has_ownership: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None } ::: This should never happen! A valid shared memory object should never contain a base address with null value.
stack backtrace:
   0: std::panicking::begin_panic_handler
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library/std\src\panicking.rs:662
   1: core::panicking::panic_fmt
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library/core\src\panicking.rs:74
   2: iceoryx2_bb_posix::shared_memory::SharedMemory::base_address
             at .\iceoryx2-bb\posix\src\shared_memory.rs:484
   3: iceoryx2_cal::dynamic_storage::posix_shared_memory::Builder<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator> >::init_impl<iceoryx2_cal::shared_memory::common::details::AllocatorDetai
             at .\iceoryx2-cal\src\dynamic_storage\posix_shared_memory.rs:289
   4: iceoryx2_cal::dynamic_storage::posix_shared_memory::impl$6::create<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator> >
             at .\iceoryx2-cal\src\dynamic_storage\posix_shared_memory.rs:364
   5: iceoryx2_cal::shared_memory::common::details::impl$5::create<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_storage::posix_shared_memory::Storage<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal:
             at .\iceoryx2-cal\src\shared_memory\common.rs:232
   6: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:573
   7: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:621
   8: iceoryx2_cal::resizable_shared_memory::dynamic::DynamicMemory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynamic_s
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:665
   9: iceoryx2_cal::resizable_shared_memory::dynamic::impl$11::allocate<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::shared_memory::common::details::Memory<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator,iceoryx2_cal::dynam
             at .\iceoryx2-cal\src\resizable_shared_memory\dynamic.rs:745
  10: iceoryx2::port::details::data_segment::DataSegment<iceoryx2::service::ipc::Service>::allocate<iceoryx2::service::ipc::Service>
             at .\iceoryx2\src\port\details\data_segment.rs:120
  11: iceoryx2::port::publisher::PublisherBackend<iceoryx2::service::ipc::Service>::allocate<iceoryx2::service::ipc::Service>
             at .\iceoryx2\src\port\publisher.rs:313
  12: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::allocate<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:778
  13: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::loan_slice_uninit_impl<iceoryx2::service::ipc::Service,u8,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:1061
  14: iceoryx2::port::publisher::Publisher<iceoryx2::service::ipc::Service,slice2$<u8>,tuple$<> >::loan_slice_uninit<iceoryx2::service::ipc::Service,u8,tuple$<> >
             at .\iceoryx2\src\port\publisher.rs:1042
  15: publish_subscribe_dyn_publisher::main
             at .\examples\rust\publish_subscribe_dynamic_data\publisher.rs:47
  16: core::ops::function::FnOnce::call_once<enum2$<core::result::Result<tuple$<>,alloc::boxed::Box<dyn$<core::error::Error>,alloc::alloc::Global> > > (*)(),tuple$<> >
             at /rustc/f6e511eec7342f59a25f7c0534f1dbea00d01b14\library\core\src\ops\function.rs:250
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
      160 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__23.publisher_data"" } }, size: 1342177443, base_address: 0x0, has_ownersh
              ip: true, file_descriptor: FileDescriptor { value: 8, is_owned: true }, memory_lock: None }
              | delete
      161 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__22.publisher_data"" } }, size: 671088803, base_address: 0x1e8bebe0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | close
      162 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 100, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__22.publisher_data"" } }, size: 671088803, base_address: 0x1e8bebe0000, ha
              s_ownership: true, file_descriptor: FileDescriptor { value: 5, is_owned: true }, memory_lock: None }
              | delete
      163 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 102, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__mgmt.publisher_data"" } }, size: 148, base_address: 0x1e896a90000, has_ow
              nership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | close
      164 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 102, data: ""iox2_0354a209029e7d094a819e2d4030ea3
              31e6caaf0_42564_93889033347649720323135284804__mgmt.publisher_data"" } }, size: 148, base_address: 0x1e896a90000, has_ow
              nership: true, file_descriptor: FileDescriptor { value: 3, is_owned: true }, memory_lock: None }
              | delete
      165 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 116, data: ""iox2_b9fc73e5c1f646968758453273c6c65
              cb372831b_93889033347649720323135284804_95653425680137484110787528148.connection"" } }, size: 9656, base_address: 0x1e89
              6ab0000, has_ownership: false, file_descriptor: FileDescriptor { value: 7, is_owned: true }, memory_lock: None }
              | close
      166 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 110, data: ""c:\Temp\iceoryx2\nodes\141037459
              58220021593595225668\iox2_bc3ab41f6420f6b82c95ca160a9d440946aa6490.service_tag"" } }, access_mode: Read, permission: Per
              mission(448), has_ownership: false, owner: None, group: None, truncate_size: None, creation_mode: None }
              | opened
      167 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\14103745958220021593595225668\iox2_bc3ab41f6420f6b82c95ca160a9d440946aa6490.service_tag""
      168 [T] ""ServiceState::drop()""
              | close service: Service With Dynamic Data (ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, da
              | ta: ""bc3ab41f6420f6b82c95ca160a9d440946aa6490"" } }))
      169 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5
              743e42e7_bc3ab41f6420f6b82c95ca160a9d440946aa6490.dynamic"" } }, size: 1071, base_address: 0x1e896a80000, has_ownership:
               false, file_descriptor: FileDescriptor { value: 6, is_owned: true }, memory_lock: None }
              | close
      170 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1410374595
              8220021593595225668\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      171 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1606863041
              8021712384896288212\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      172 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\iox2_16068
              630418021712384896288212.node_monitor"" } }, access_mode: Write, permission: Permission(448), has_ownership: false, owne
              r: None, group: None, truncate_size: None, creation_mode: None }
              | opened
      173 [T] FileBuilder { file_path: FilePath { value: FixedSizeByteString<255> { len: 70, data: ""c:\Temp\iceoryx2\nodes\1410374595
              8220021593595225668\iox2_node.details"" } }, access_mode: Read, permission: Permission(448), has_ownership: false, owner
              : None, group: None, truncate_size: None, creation_mode: None }
              | opened
      174 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\14103745958220021593595225668\iox2_node.details""
      175 [T] ""Directory::remove""
              | removed ""c:\Temp\iceoryx2\nodes\14103745958220021593595225668""
      176 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_14103745958220021593595225668.node_monitor""
      177 [T] ""File::remove""
              | ""c:\Temp\iceoryx2\nodes\iox2_14103745958220021593595225668.node_monitor_owner_lock""
error: process didn't exit successfully: `target\debug\examples\publish_subscribe_dyn_publisher.exe` (exit code: 101)
```

</details>","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZwIjb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Z0jrJ,iceoryx2,2580691657,575,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-09T16:13:37Z,2025-01-09T16:13:37Z,"@gyk I fixed the issue and merged the pull request. The underlying problem was that the windows API required me to provide an upper limit for shared memory - I set it to 1GB, way too low!
This is now increased to 128GB per segment.

Could you please confirm that the bug is fixed on your side, then I would close the issue.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Z0jrJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/575,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Z4VxX,iceoryx2,2581683287,575,NA,gyk,4338714,Yukun Guo,,NA,2025-01-10T03:45:42Z,2025-01-10T03:45:42Z,I can confirm that now it successfully sends 268435456 bytes (with committed memory of 70+ GB) and panics at x2 of that. This is sufficient for my use case of transferring 4K raw RGBA images (31.6 MB). ð,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6Z4VxX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/576,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/576,iceoryx2,2777343539,576,Temp files on Windows,gyk,4338714,Yukun Guo,,OPEN,2025-01-09T09:50:49Z,2025-01-09T11:54:24Z,"- Consider using `std::env::temp_dir()` for temp files, as it is the standard location. However, ANSI APIs may not play well with some usernames.
- Consider relaxing the initial privileges for temp files. Currently admin privileges are required for removing some of them, so the program itself cannot clean up the resources after being ended in task manager.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/576/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/576,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxS_p,iceoryx2,2579836905,576,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-09T10:56:52Z,2025-01-09T10:56:52Z,"@gyk 

> However, ANSI APIs may not play well with some usernames.

This is why we initially decided against it and used `C:\Temp`. But you can override the default folder via the iceoryx2 config and choose whatever you want, see https://github.com/eclipse-iceoryx/iceoryx2/tree/main/config

> Consider relaxing the initial privileges for temp files.

This makes sense! We will look into it.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxS_p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/576,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxzhL,iceoryx2,2579970123,576,NA,gyk,4338714,Yukun Guo,,NA,2025-01-09T11:54:22Z,2025-01-09T11:54:22Z,Thanks! Didn't know it is configurable.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ZxzhL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/579,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/579,iceoryx2,2781922481,579,Use 'std_instead_of_core' clippy warning,elBoberido,56729607,Mathias Kraus,,CLOSED,2025-01-11T14:40:41Z,2025-01-13T12:26:48Z,"## Brief feature description

In order to ease the transition to `no_std`, the `std_instead_of_core` clippy warning should be used when types are imported from `std` when they are also available in `core`.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/579/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/582,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/582,iceoryx2,2782028262,582,Use 'std_instead_of_alloc' clippy warning,elBoberido,56729607,Mathias Kraus,,CLOSED,2025-01-11T17:17:32Z,2025-01-13T12:26:49Z,"## Brief feature description

In order to ease the transition to `no_std`, the `std_instead_of_alloc` clippy warning should be used when types are imported from `std` when they are also available in `core`.

Crates that use `no_std]` will typically use the `alloc` crate instead.

See also https://doc.rust-lang.org/alloc/index.html.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/582/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/585,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/585,iceoryx2,2783780089,585,Make port details internal public API for introspection.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-13T12:06:27Z,2025-01-13T14:49:49Z,"The dynamic config allows already to list the internal node ids of all registered ports. The callbacks shall expanded so that they will deliver all port details - required for introspection.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/585/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/588,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/588,iceoryx2,2785701122,588,Replace the unmaintained 'serde_yaml',elBoberido,56729607,Mathias Kraus,,OPEN,2025-01-13T23:17:52Z,2025-01-13T23:17:53Z,"## Required information

**Operating system:**

any

**Rust version:**

any

**Cargo version:**

any

**iceoryx2 version:**

v0.4

**Issue:**

`serde_yaml` is not maintained anymore and needs to be replaced. Currently it is used in `iceoryx2-cli`

See also https://crates.io/crates/serde_yaml

Potential alternatives:
- https://crates.io/crates/serde_yaml_ng
- https://crates.io/crates/serde_yml","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/588/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/590,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/590,iceoryx2,2786813360,590,Make attributes easier accessible.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-14T10:44:38Z,2025-01-14T17:20:55Z,"## (Code) Example Of Cumbersome API

The API is currently a bit cumbersome if someone wants to acquire a specific attribute value since it always has to be combined with a callback. Direct access to len of attribute values to a specific key and and value index getter would solve the issue.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/590/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/593,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/593,iceoryx2,2789774316,593,Host-to-host communication,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2025-01-15T12:52:31Z,2025-01-20T18:50:08Z,"## Brief feature description

We require a tunnel or gateway to connect multiple `iceoryx2` instances on different machines with each other. 

A Gateway utilizes another host-to-host-capable communication mechanism to connect `iceoryx2` instances on different hosts. Applications using this mechanism will also be able to hook into the traffic.

A tunnel writes `iceoryx2` payloads directly to the transport, which requires more configuration and does not enable hooking into the network traffic from non-iceoryx2 applications, but the reduced overhead improves latency.

## Detailed information

### Requirements

 * The gateway shall be configurable
   * it comes with a allow/deny list - services can automatically be shared with the world or are explicitly excluded
   * the configuration is in TOML - like the rest of the iceoryx2 configuration
   * a gateway config shall also contain protocol specific configurations
   * the config shall contain options for peer2peer as well as multicast communications
     * peer2peer example: provide a list of all iceoryx2 endpoints with ip/port
* If possible, the gateway shall not come with extra background threads. The user shall be able to handle everything in the main thread.
  * Certain protocol enforce background threads, but our implementation shall not
* The gateway shall be traffic efficient
  * only publish things that are required from an endpoint in the network
* Gateway shall be usable right out-of-the-box
  * Sane default configuration
  * iceoryx2 provides a service discovery service that is provided by every gateway. this allows other gateways to discover local services
* Service Discovery is written so that it does not require a background thread
   * it shall be split into two parts: 1. the library that performs the service discovery, 2. a binary that can be started and provides the service discovery service
   * the library shall be usable from within an arbitrary application. in the main loop one can call the loop callback of the service discovery to update the internal state and send out updates
   * publish-subscribe: service diff details like: service X, new publisher
   * request-response: to provide full service state
   * event: to notify others about service diff details
   * requires a user side struct for convenience to handle the service diffs(pubsub), state(rpc), events with one convenenient API
* so that samples are not forwarded in circle we need to be able to determine the machine origin of a sample
   * (if possible) find a way to generate a machine unique id automatically and use it in the gateway, otherwise the user must provide a unique id
   * the pubsub header must be extended so that the id can be stored there
* gateways and service discovery must be able to support multiple service styles:
   * ipc::Service, local::Service and future gpu::Service or hypervisor::Service
   * gateways shall support different iceoryx2 configs, see: https://github.com/eclipse-iceoryx/iceoryx2/tree/main/config
   and https://docs.rs/iceoryx2/latest/iceoryx2/config/index.html


### Next Steps

 - [ ] implement service discovery
    * use `Service::list()` to acquire all static service infos, see: https://docs.rs/iceoryx2/latest/iceoryx2/service/trait.Service.html#method.list
    * connect to service to acquire dynamic service info, see:
```rust
// event
let service = self.node.service_builder(element.static_details.name()).event().open().unwrap();
let dynamic_config = service.dynamic_config();

// pubsub
ipc::Service::list(Config::global_config(), |element| {
match element.static_details.messaging_pattern() {
iceoryx2::service::static_config::messaging_pattern::MessagingPattern::PublishSubscribe(config) => {
if let Ok(service) = unsafe { self.node.service_builder(element.static_details.name())
                        .publish_subscribe::<[CustomPayloadMarker]>()
                        .user_header::<CustomHeaderMarker>()
                        .__internal_set_payload_type_details(&config.message_type_details().payload)
                        .__internal_set_user_header_type_details(&config.message_type_details().user_header)
                        .open() } {
                        let dynamic_config = service.dynamic_config();
```
 * event, use: https://docs.rs/iceoryx2/latest/iceoryx2/service/dynamic_config/event/struct.DynamicConfig.html
 * pubsub, use: https://docs.rs/iceoryx2/latest/iceoryx2/service/dynamic_config/publish_subscribe/index.html
 * The internal but public methods acquire more details:
     * pubsub: `dynamic_config.__internal_list_subscribers()`, `dynamic_config.__internal_list_publishers()`
     * event: `dynamic_config.__internal_list_listeners()`, `dynamic_config.__internal_list_notifiers()`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/593/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/594,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/594,iceoryx2,2797098985,594,Remove obsolete posix wrapper,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-18T17:50:22Z,2025-01-20T07:25:53Z,Some posix wrappers are not used. Remove them,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/594/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/596,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/596,iceoryx2,2799246307,596,Remove Port from ZeroCopyConnection instead of  the Connection itself,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-20T13:15:44Z,2025-01-20T19:14:27Z,"When a node dies and the resources are cleaned up a dead subscriber or publisher lead to a removal of the underlying zero copy connection. This can cause undefined behavior on the other living side when the object inside the shared memory has called drop.

The right approach is to remove the port from the connection and if the port was the last element of the connection, then remove the connection itself.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/596/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/600,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/600,iceoryx2,2803285700,600,build iox1 and iox2 together,owny990312,89577994,han J,,CLOSED,2025-01-22T03:36:15Z,2025-01-22T18:34:51Z,"Issue:
When attempting to build iceoryx (v2.0.6) and iceoryx2 (v0.5) together in the same environment, compilation errors occur. The errors suggest a potential version mismatch in the shared iceoryx-hoofs dependency.

Context:

- iceoryx: Version 2.0.6

- iceoryx2: Version 0.5

Observed Error:

![Image](https://github.com/user-attachments/assets/e3eddfc4-c680-40f5-8306-1350384f290d)

Key Questions:

- Do iceoryx and iceoryx2 officially support coexistence in the same build?

- Is there documentation specifying compatible iceoryx-hoofs versions for each?

- How can I get the  iceoryx-hoofs's version information","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/600/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/600,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bcrzr,iceoryx2,2607987947,600,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-22T18:34:50Z,2025-01-22T18:34:50Z,Please have a look to my last answer to this topic - https://github.com/eclipse-iceoryx/iceoryx2/issues/569#issuecomment-2561104415,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bcrzr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,iceoryx2,2806026127,601,Residual shared memory resources after kill -9 cause crash when reusing service name,owny990312,89577994,han J,,OPEN,2025-01-23T06:19:39Z,2025-01-26T10:02:55Z,"**>> Environment:**
iceoryx2 version: v0.5
OS: 22.04.1-Ubuntu

**>> Description**
Observed persistent shared memory resources after forced process termination, leading to application crashes when reusing the same service name.

**>> Reproducible Steps**
1.Navigate to example directory:   cd examples/cxx/event_based_communication
2.Start publisher:  ./example_cxx_event_based_communication_publisher
3.Forcefully terminate process: kill -9 <publisher_pid>
4.Verify residual resources: ls -l /dev/shm/
5.Clean shared memory: rm -rf /dev/shm/*
6.Restart publisher: ./example_cxx_event_based_communication_publisher

**>> Expected Behavior**
Application should restart normally after clean shutdown and shared memory cleanup.

**>> Actual Behavior**
Application crashes on restart with original service name (""My/Funk/ServiceName""), but works when using a _different service name_ or _restart your PC_.

![Image](https://github.com/user-attachments/assets/f0e2a17f-7753-44e8-8f13-980574714f50)

**>> Thinking**
While unsure if this is by design or a defect, the observed behavior suggests the system detects persistent occupation or corruption of iceoryx2 resources tied to particular _service names_, leading to runtime failures
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bj4hT,iceoryx2,2609875027,601,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-23T13:56:44Z,2025-01-23T13:56:44Z,"@owny990312 Just skip step 5) and everything works fine. iceoryx2 cleans up all stale resources for you. `rm -rf /dev/shm/*` is not needed! If you remove the shared memory part of a service, but the static storage remains, iceoryx2 assumes that the service itself is corrupted and does nothing.

So whenever an iceoryx2 application crashes, every other iceoryx2 application will cleanup all of its stale resources whenever:
1. a new node is created
2. a node is destroyed
3. it connects to the service to which the crashed application was previously connected.

So, there is no need to remove resources for you.

If you need to remove resources manually, you have to remove all of the service files. See the FAQ: https://github.com/eclipse-iceoryx/iceoryx2/blob/main/FAQ.md#a-crash-leads-to-the-failure-publishsubscribeopenerrorunabletoopendynamicserviceinformation

So in your case `rm -rf /dev/shm/*; rm -rf /tmp/iceoryx2/*`.
But be aware that this removes all services! If they are currently running and in used by other processes, they will continue working but new participants will no longer be able to connect to them.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bj4hT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0ogH,iceoryx2,2614265863,601,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-26T08:08:22Z,2025-01-26T08:08:22Z,"@owny990312 I realized that this issue is already completely fixed with: #458 

So when you follow your reproducible steps:

1.Navigate to example directory: cd examples/cxx/event_based_communication
2.Start publisher: ./example_cxx_event_based_communication_publisher
3.Forcefully terminate process: kill -9 <publisher_pid>
4.Verify residual resources: ls -l /dev/shm/
5.Clean shared memory: rm -rf /dev/shm/*
6.Restart publisher: ./example_cxx_event_based_communication_publisher

In step 6) the publisher will on clean up identify the remaining service as corrupted and remove it completely.
This is already available on the current `main` branch. Could you please check it out and verify if it solves your issue?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0ogH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0pw2,iceoryx2,2614271030,601,NA,owny990312,89577994,han J,,NA,2025-01-26T08:24:14Z,2025-01-26T08:24:14Z,"> [@owny990312](https://github.com/owny990312) I realized that this issue is already completely fixed with: [#458](https://github.com/eclipse-iceoryx/iceoryx2/issues/458)ææè¯å°è¿ä¸ªé®é¢å·²ç»å®å¨è§£å³äºï¼ [#458](https://github.com/eclipse-iceoryx/iceoryx2/issues/458)
> 
> So when you follow your reproducible steps:å½ä½ éµå¾ªå¯éå¤çæ­¥éª¤æ¶ï¼
> 
> 1.Navigate to example directory: cd examples/cxx/event_based_communicationå¯¼èªå°ç¤ºä¾ç®å½: cd examples/cxx/event_based_communication 2.Start publisher: ./example_cxx_event_based_communication_publisher2. å¼å§åå¸è: ./example_cxx_event_based_communication_publisher 3.Forcefully terminate process: kill -9 <publisher_pid>å¼ºå¶ç»æ­¢è¿ç¨: kill -9 <publisher_pid> 4.Verify residual resources: ls -l /dev/shm/éªè¯å©ä½èµæºï¼ls -l /dev/shm/ 5.Clean shared memory: rm -rf /dev/shm/*5. æ¸çå±äº«åå­ï¼rm -rf /dev/shm/* 6.Restart publisher: ./example_cxx_event_based_communication_publisheréå¯åå¸è: ./example_cxx_event_based_communication_publisher
> 
> In step 6) the publisher will on clean up identify the remaining service as corrupted and remove it completely.å¨ç¬¬ 6 æ­¥ä¸­ï¼åºçåå°è¯å«å¹¶æ¸çå©ä½çæå¡ï¼å°å¶å®å¨ç§»é¤ã This is already available on the current `main` branch. Could you please check it out and verify if it solves your issue?è¿å·²ç»å¨å½å `main` åæ¯ä¸å¯ç¨ãæ¨è½æ£æ¥ä¸ä¸çæ¯å¦è§£å³äºæ¨çé®é¢åï¼

Thanks for your reply. And if have an async-API for waitset.wait_and_process ? wait_and_process maybe is a blocking function","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0pw2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/601,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0ykH,iceoryx2,2614307079,601,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-26T10:02:54Z,2025-01-26T10:02:54Z,"@owny990312 

> Thanks for your reply. And if have an async-API for waitset.wait_and_process ? wait_and_process maybe is a blocking function

I do not understand your question - could you give a bit more context please? Do you want to cleanup nodes while waiting on the waitset?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b0ykH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/602,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/602,iceoryx2,2808147679,602,Introduce marker trait for type safe shared memory usage,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2025-01-23T23:29:39Z,2025-01-23T23:29:39Z,"## Brief feature description

Currently, the iceoryx2 API allows the user to use types incompatible with shared memory. Like a `String` or a `Vec`. We need a marker trait for shared memory compatible types - in combination with a derive proc macro - so that the compiler prevents the user from misusing the API.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/602/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/604,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/604,iceoryx2,2808160568,604,Intoduce platform abstraction based on the 'libc' crate,elBoberido,56729607,Mathias Kraus,,CLOSED,2025-01-23T23:39:29Z,2025-02-03T11:41:25Z,"## Brief feature description

Currently, bindgen is invoked to generate `extern ""C"" fn` and other constants for a given platform. This complicates cross-compilation as well as the bazel setup. Having a platform based on the `libc` crate would simplify these operations for platforms where the `libc` create supports the subset which iceoryx2 requires.

## Detailed information

The `libc` crate based platform shall be optional and can be enabled via a feature flag.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/604/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,iceoryx2,2808604669,605,could not compile  publish-subscribe example,lucyTheSlayer,10773905,,saber_zyl@qq.com,CLOSED,2025-01-24T06:22:09Z,2025-01-27T10:47:05Z,"**Operating system:**
Linux timing 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux

**Rust version:**
rustc 1.84.0 (9fc6b4312 2025-01-07)

**Cargo version:**
cargo 1.84.0 (66221abde 2024-11-19)

**iceoryx2 version:**
v0.5.0


While I run command ""cargo run --example publish_subscribe_publisher"", it could not compile and outputs such error:

error[E0425]: cannot find value `SIGPOLL` in module `crate::internal`
    --> iceoryx2-pal/posix/src/linux/constants.rs:56:43
     |
56   | pub const SIGPOLL: int = crate::internal::SIGPOLL as _;
     |                                           ^^^^^^^
     |
    ::: /root/works/iceoryx2/target/debug/build/iceoryx2-pal-posix-23aba6f515cda163/out/posix_generated.rs:1043:1
     |
1043 | pub const SIGILL: u32 = 4;
     | -------------------------- similarly named constant `SIGILL` defined here
     |
help: a constant with a similar name exists
     |
56   | pub const SIGPOLL: int = crate::internal::SIGILL as _;
     |                                           ~~~~~~
help: consider importing this constant through its public re-export
     |
16   + use crate::posix::SIGPOLL;
     |
help: if you import `SIGPOLL`, refer to it directly
     |
56   - pub const SIGPOLL: int = crate::internal::SIGPOLL as _;
56   + pub const SIGPOLL: int = SIGPOLL as _;
     |

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bt3tj,iceoryx2,2612493155,605,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-24T13:07:59Z,2025-01-24T13:07:59Z,@lucyTheSlayer This looks like an issue with bindgen and the `libc` version you are using. What linux distribution and libc version are you using?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bt3tj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bzVjU,iceoryx2,2613926100,605,NA,lucyTheSlayer,10773905,,saber_zyl@qq.com,NA,2025-01-25T10:54:07Z,2025-01-25T10:54:07Z,"> [@lucyTheSlayer](https://github.com/lucyTheSlayer) This looks like an issue with bindgen and the `libc` version you are using. What linux distribution and libc version are you using?

ldd (GNU libc) 2.17

Operating System: CentOS Linux 7 (Core)
CPE OS Name: cpe:/o:centos:centos:7
Kernel: Linux 3.10.0-1160.el7.x86_64
Architecture: x86-64

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6bzVjU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b1del,iceoryx2,2614482853,605,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-26T15:56:08Z,2025-01-26T15:56:08Z,@lucyTheSlayer It should be fixed now on the `main` branch. Could you please check it out and confirm that the issue is solved for you?,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b1del/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b2Qwd,iceoryx2,2614692893,605,NA,lucyTheSlayer,10773905,,saber_zyl@qq.com,NA,2025-01-27T01:20:51Z,2025-01-27T01:20:51Z,"It now failed with other errors:

 iceoryx2 git:(main) cargo run --example publish_subscribe_publisher
   Compiling iceoryx2-pal-posix v0.5.0 (/root/works/iceoryx2/iceoryx2-pal/posix)
   Compiling iceoryx2-bb-posix v0.5.0 (/root/works/iceoryx2/iceoryx2-bb/posix)
error[E0609]: no field `sched_priority` on type `iceoryx2_pal_posix::internal::sched_param`
   --> iceoryx2-bb/posix/src/process.rs:228:15
    |
228 |         param.sched_priority = scheduler.policy_specific_priority(priority);
    |               ^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
228 |         param.__sched_priority = scheduler.policy_specific_priority(priority);
    |               ~~~~~~~~~~~~~~~~

error[E0609]: no field `sched_priority` on type `iceoryx2_pal_posix::internal::sched_param`
   --> iceoryx2-bb/posix/src/process.rs:266:15
    |
266 |         param.sched_priority = scheduler.policy_specific_priority(0);
    |               ^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
266 |         param.__sched_priority = scheduler.policy_specific_priority(0);
    |               ~~~~~~~~~~~~~~~~

error[E0609]: no field `sched_priority` on type `&iceoryx2_pal_posix::internal::sched_param`
  --> iceoryx2-bb/posix/src/scheduler.rs:88:34
   |
88 |         let priority = parameter.sched_priority;
   |                                  ^^^^^^^^^^^^^^ unknown field
   |
help: a field with a similar name exists
   |
88 |         let priority = parameter.__sched_priority;
   |                                  ~~~~~~~~~~~~~~~~

error[E0689]: can't call method `clamp` on ambiguous numeric type `{float}`
  --> iceoryx2-bb/posix/src/scheduler.rs:98:18
   |
98 |                 .clamp(0.0, 1.0),
   |                  ^^^^^

error[E0609]: no field `sched_priority` on type `iceoryx2_pal_posix::internal::sched_param`
   --> iceoryx2-bb/posix/src/thread.rs:384:15
    |
384 |         param.sched_priority = self.scheduler.policy_specific_priority(self.priority);
    |               ^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
384 |         param.__sched_priority = self.scheduler.policy_specific_priority(self.priority);
    |               ~~~~~~~~~~~~~~~~

Some errors have detailed explanations: E0609, E0689.
For more information about an error, try `rustc --explain E0609`.
error: could not compile `iceoryx2-bb-posix` (lib) due to 5 previous errors
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b2Qwd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b3ud3,iceoryx2,2615076727,605,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-01-27T08:08:47Z,2025-01-27T08:08:47Z,"@lucyTheSlayer I looked up the glibc version 2.17 (https://sourceware.org/glibc/wiki/Glibc%20Timeline) it is from 2012 - 13 years old. Is it possible for you to update the glibc version?

It is possible to get iceoryx2 running on your system - with a restricted feature set. But this would be then a special version just for your old system.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b3ud3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b3xoJ,iceoryx2,2615089673,605,NA,lucyTheSlayer,10773905,,saber_zyl@qq.com,NA,2025-01-27T08:16:05Z,2025-01-27T08:16:05Z,"> [@lucyTheSlayer](https://github.com/lucyTheSlayer) I looked up the glibc version 2.17 (https://sourceware.org/glibc/wiki/Glibc%20Timeline) it is from 2012 - 13 years old. Is it possible for you to update the glibc version?
> 
> It is possible to get iceoryx2 running on your system - with a restricted feature set. But this would be then a special version just for your old system.

Thank youã
I will consider upgrading glibcã","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b3xoJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/605,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b5Akp,iceoryx2,2615413033,605,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-01-27T10:47:04Z,2025-01-27T10:47:04Z,@lucyTheSlayer I don't know if it works but you could also try to build iceoryx2 with musl libc. Just in case the glibc update is difficult to accomplish.,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6b5Akp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/608,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/608,iceoryx2,2816381113,608,`set_log_level` does not work with custom logger,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-28T17:58:32Z,2025-01-30T09:32:24Z,"When using a custom logger with `set_logger()`, the `set_log_level` function no longer works, and all log messages are always forwarded to the custom logger.
This is unexpected, and the log level shall be handled directly by iceoryx2 and not the custom logger.

### Fix

iceoryx2 pre-filters the log messages, depending on the current log-level and forwards only valid log-messages to the custom logger.


","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/608/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/610,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/610,iceoryx2,2820134688,610,Extend benchmarks so that the number of endpoints can be configured.,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-01-30T07:48:31Z,2025-01-30T09:32:39Z,"## (Code) Example Of Cumbersome API

Currently, the benchmarks only have one-to-one connections. To get a more real-life experience the number of senders/receivers shall be configurable as well to see what impact they have.

The setup would stay the same (ping pong between two threads and two ports) - the only thing that would be added would be additional ports which would receive messages as well.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/617,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/617,iceoryx2,2830130108,617,Config file load order,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2025-02-04T12:36:46Z,2025-02-04T12:59:57Z,"## (Code) Example Of Cumbersome API

Currently, the config file path `$PWD/config/iceoryx2.toml` has the highest load order. It is perfect for playing around with iceoryx2, running the examples with cargo run, and for development, but it may also lead to annoying bugs when this is the case for production systems.

This issue requires that `getpwnam_r` and `getpwuid_r` is implemented for Windows. This might be a challenge since the Windows user id (SID) is fundamentally different from the posix uid. One solution could be a SID hash to `pid_t` and then have an internal `pid_t` -> `SID` hashmap to translate between those two, like it is done for `HANDLE` and file descriptors.

## ToDo

 * [ ] `$PWD/config/iceoryx2.toml` shall not be used as config file lookup
 * [ ] all C, C++ and Rust example documentations must be adjusted
 * [ ] adjust `config/README.md`
 * [ ] user must be easily able to provide a config file path to iceoryx2
   * to run iceoryx2 examples and play around with the config without the need to store it at the cumbersome location `$HOME/.config/iceoryx2.toml`
   * for development and testing
 * [ ] `Config::iterate_over_config_files` is able to user `%PROFILEDIR%/.config` in Windows, 
   *  remove all ``// TODO: #617``","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/617/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/618,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/618,iceoryx2,2830237998,618,Extended domains with advanced configuration,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,OPEN,2025-02-04T13:19:46Z,2025-02-04T13:23:03Z,"## Brief feature description

Inspired by the following conversation: https://github.com/eclipse-iceoryx/iceoryx2/pull/616#discussion_r1940964975

The iceoryx2 config folder shall contain subfolders with the domain name so that every domain can have their individual configuration.

From @elBoberido 

```
.config/iceoryx2
  |- generic
  |- io.iceoryx2
  |- org.phantom
  |- org.phantom.opera
  |- iceoryx2.toml
```

A node created via `NodeBuilder::new()` would end up in `generic` and a node created via `NodeBuilder::new_with_domain(""org phantom.opera"")` would end up in that domain. One could think of moving everything to `.config/iceoryx2/domains/`, in case we need other, iceoryx related folders in `iceoryx2`. Each domain could have it's own config file. If that's not present, look at `/etc/iceoryx2/domains/org.phantom.opera/iceoryx2.toml`, then `.config/iceoryx2/domains/iceoryx2.toml` and finally `/etc/iceoryx2/domains/iceoryx2.toml`","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/618/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,iceoryx2,2831424824,619,Unable to create or open service due to ServiceInCorruptedState,mespencer,20260543,Myles Spencer,,CLOSED,2025-02-04T22:27:29Z,2025-02-05T17:46:19Z,"## Required information

**Operating system:**
MacOs Sequoia 15.3 (latest version)

`uname -a`: `Darwin Tyrion.local 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6020 arm64`

**Rust version:**
rustc 1.83.0 (90b35a623 2024-11-26)

**Cargo version:**
cargo 1.83.0 (5ffbef321 2024-10-29)

**iceoryx2 version:**
main (0f47a5b)

**Detailed log output:**
[trace-log-output.log](https://github.com/user-attachments/files/18664063/trace-log-output.log)

**Observed result or behaviour:**
When trying to create services with certain names (that have been used in the past) I get the error: `PublishSubscribeOpenOrCreateError::PublishSubscribeOpenError(ServiceInCorruptedState)`. If I change the service name it works fine. I tried to restart my mac as in the past when a service wasn't shut down properly on Mac you had to restart, however that didn't appear to fix anything.

Reproduction example:
```
let node = NodeBuilder::new()
        .create::<ipc::Service>()
        .expect(""Failed to create node"");

    let service = node
        .service_builder(
            &""/inference0/detections""
                .try_into()
                .expect(""Failed to convert service name""),
        )
        .publish_subscribe::<[u8]>()
        .open_or_create()
        .expect(""Failed to create or open service"");
```

**Expected result or behaviour:**
The service should be opened or created, any bad state should be cleaned up.

**Conditions where it occurred / Performed steps:**
It seems to have started right after I updated my Mac to the latest OS. Granted that could also just be a coincidence as according to the detailed log it appears to be some issue with mismatched version iceoryx2 version. Is this expected? Is there any way to fix it without downgrading iceoryx2?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dEoy0,iceoryx2,2635238580,619,NA,mespencer,20260543,Myles Spencer,,NA,2025-02-04T22:47:15Z,2025-02-04T22:47:15Z,Just realized that I accidentally had another node running when generating the logs (not sure if that would cause any confusion). Here are logs when no other nodes are running: [trace-log-output.log](https://github.com/user-attachments/files/18664221/trace-log-output.log),"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dEoy0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dEsfx,iceoryx2,2635253745,619,NA,mespencer,20260543,Myles Spencer,,NA,2025-02-04T22:58:54Z,2025-02-04T22:58:54Z,"Reverting to an old version (0.4.1) does seem to work, however it doesn't seem to cleanup whatever corrupted state is causing the newer version (0.5.0) to have issues (i.e. even after a well shutdown run with 0.4.1 I still get issues with 0.5.0). Either that or my basic test program isn't shutting down properly and is leaving the state corrupted. However, based on the trace logs everything does seem to shutdown properly from what I can tell.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dEsfx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dJDHX,iceoryx2,2636394967,619,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-05T10:53:41Z,2025-02-05T10:53:41Z,"@mespencer Thanks for the bug report. I think the problem is that we have to make the underlying issue more visible for the user.

In the trace log you provided, the following lines point you to the underlying problem:

```
        | Failed to open posix_shared_memory::DynamicStorage since the dynamic storage was created with version 0.4.1 but this process requires version 0.5.0.
81 [T] SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_e15818a4d1bc5b028ef8f3846ca863c79f1efabe.dynamic"" } }, size: 16384, base_address: 0x103598000, has_ownership: false, file_descriptor: FileDescriptor { value: 5, is_owned: true
        }, memory_lock: None }
        | close
82 [D] ""Service::open_dynamic_details<iceoryx2::service::ipc::Service>(ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: \""e15818a4d1bc5b028ef8f3846ca863c79f1efabe\"" } }))""
        | Unable to open the services dynamic config since there is a version mismatch. Please use the same iceoryx2 version for the whole system.
83 [D] ""Service::remove_node_from_service(NodeId(UniqueSystemId { value: 1441508831314384721754091161259, pid: 1707, creation_time: Time { clock_type: Realtime, seconds: 1738701424, nanoseconds: 834939000 } }), ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: \""e15818a4d1bc5b028e
        f8f3846ca863c79f1efabe\"" } }))""
        | Unable to remove node from service since the service version does not match.
```

When processes want to communicate via iceoryx2, they must all use identical iceoryx2 versions; otherwise, iceoryx2 will not try to connect, clean up, or do anything with the communication resources it discovers.
In this case, you mixed 0.4.1 with 0.5.0.

But sometimes, a crashed node cleans up partially so that another iceoryx2 instance can no longer acquire the version number of the remaining stale resources - in this case, it tries by force to clean up everything since the assumption is that something really went wrong.

Could you please reboot your whole system (so that every stale resource gets cleaned up by a clean reboot) and try to reproduce the problem again? I think the issue came with the version mixup and then different iceoryx2 versions created different communication resources and then blocked since they were no longer consistent, causing your problem.

If this fixes your issue, I would add a FAQ entry and try to find a better way to print a nicer error log message to highlight this problem.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dJDHX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/619,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dNsob,iceoryx2,2637613595,619,NA,mespencer,20260543,Myles Spencer,,NA,2025-02-05T17:46:17Z,2025-02-05T17:46:17Z,"@elfenpiff that did it, thanks! 

Before filing this bug I tried restarting and it didn't fix it. My best guess is somehow my nodes got out of sync version wise, so even when restarting it didn't fix it. Then once I started messing with the versions they got back in sync so once I restarted a second time everything was in sync version wise and had a clean slate. Purely speculation, however that's the only way I could explain why the first restart didn't fix things, and the second did.

I do think surfacing that there is a version mismatch in the error would definitely be helpful. Trying to interpret trace level logs can be hard sometimes when you're not familiar with what is recoverable and what isn't. Potentially even just making the version mismatch a higher log level could at least be a partial solution.

Thanks again!","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dNsob/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620,iceoryx2,2836424410,620,Tracing logger appears to suppress some logs,mespencer,20260543,Myles Spencer,,OPEN,2025-02-06T19:43:03Z,2025-02-07T01:50:36Z,"I'm finding that when using the `logger_tracing` feature a lot of the logs seem to be suppressed, particularly trace and debug level logs.

## Required information

**Operating system:**
MacOS Sequoia 15.3
`uname -a`: `Darwin Tyrion.local 24.3.0 Darwin Kernel Version 24.3.0: Thu Jan  2 20:24:23 PST 2025; root:xnu-11215.81.4~3/RELEASE_ARM64_T6020 arm64`

**Rust version:**
rustc 1.83.0 (90b35a623 2024-11-26)

**Cargo version:**
cargo 1.83.0 (5ffbef321 2024-10-29)

**iceoryx2 version:**
main

**Detailed log output:**
[without-tracing.log](https://github.com/user-attachments/files/18695188/trace-log-output.log)

[with-tracing.log](https://github.com/user-attachments/files/18695220/trace-log-output.log)

**Observed result or behaviour:**
Without tracing and `logger_tracing` feature not enabled:
```
set_log_level(LogLevel::Trace);

let node = NodeBuilder::new()
    .create::<ipc::Service>()
    .expect(""Failed to create node"");

let service = node
    .service_builder(
        &""/omnis/definitions""
            .try_into()
            .expect(""Failed to convert service name""),
    )
    .publish_subscribe::<[u8]>()
    .open_or_create()
    .expect(""Failed to create or open service"");
```

With tracing and `logger_tracing` feature enabled:
```
tracing_subscriber::fmt()
    .with_max_level(LevelFilter::TRACE)
    .init();

tracing::trace!(""Test log."");

let node = NodeBuilder::new()
    .create::<ipc::Service>()
    .expect(""Failed to create node"");

let service = node
    .service_builder(
        &""/omnis/definitions""
            .try_into()
            .expect(""Failed to convert service name""),
    )
    .publish_subscribe::<[u8]>()
    .open_or_create()
    .expect(""Failed to create or open service"");
```

The example with tracing enabled doesn't output any trace level logs from iceoryx2, only the test log in the example and a warning log from iceoryx2.

**Expected result or behaviour:**
They should both output the same logs (although may be formatted differently).

**Conditions where it occurred / Performed steps:**
The above code should reproduce the bug. The main thing is enabling the `logger_tracing` feature, that is what seems to trigger it.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dbhuN,iceoryx2,2641238925,620,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-06T22:23:15Z,2025-02-06T22:23:15Z,"@mespencer 

The log level filtering is happening inside of iceoryx2, and it forwards only the log messages compliant with the current log level.

If you add `set_log_level(LogLevel::Trace);` to the second example, you should see the same log output.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dbhuN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dbn6J,iceoryx2,2641264265,620,NA,mespencer,20260543,Myles Spencer,,NA,2025-02-06T22:27:24Z,2025-02-06T22:27:24Z,"Ah, that worked. Thank you. The documentation make it seems like that function was not needed when using an external logging crate.

```
/// Sets the current log level. This is ignored for external frameworks like `log` or `tracing`.
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dbn6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/620,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ddbbC,iceoryx2,2641737410,620,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-07T01:50:35Z,2025-02-07T01:50:35Z,@mespencer thanks for the hint. I will update it!,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ddbbC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/621,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/621,iceoryx2,2838149045,621,a,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-02-07T13:20:58Z,2025-02-07T13:23:50Z,,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/621/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/622,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/622,iceoryx2,2838152376,622,a,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,CLOSED,2025-02-07T13:22:39Z,2025-02-07T13:24:04Z,,"{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/622/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/623,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/623,iceoryx2,2841625930,623,Make iceoryx2::port::publisher::Publisher impl Send,lucyTheSlayer,10773905,,saber_zyl@qq.com,CLOSED,2025-02-10T08:00:07Z,2025-02-11T01:23:30Z,"## Brief feature description

Make iceoryx2::port::publisher::Publisher implements trait Send.

## Detailed information

I have a mutlithread program that each thread will publish data to the same one topic. 
Is it possible to make Publisher Send just like crossbeam channel's writer so that I can clone the publisher and send it to the other thread? 
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/623/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/623,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dzawh,iceoryx2,2647501857,623,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-10T10:03:20Z,2025-02-10T10:03:20Z,"@lucyTheSlayer Sadly, this is not possible. We have this on our radar to introduce a `{Publisher|Subscriber|Listener|Notifier}Ts` variant, which is threadsafe but requires a mutex.  For mission-critical embedded devices (our first focus), this would be an absolute no-go, but in other areas, it makes sense!

But your issue can easily be addressed. My suggestion is to create a `Node` for each thread, open the service in there and create a `Publisher` per thread - iceoryx2 supports multiple publishers by default. It is restricted to 2 at the moment, but you can adjust your config file and set an arbitrary number there. See: `defaults.publish-subscribe.max-publishers` in https://github.com/eclipse-iceoryx/iceoryx2/tree/main/config

The CPU overhead should be minimal as well.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6dzawh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/623,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6d7dSI,iceoryx2,2649609352,623,NA,lucyTheSlayer,10773905,,saber_zyl@qq.com,NA,2025-02-11T01:23:29Z,2025-02-11T01:23:29Z,"One node per thread seems  fine. 
Thanks for your detailed explanation.
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6d7dSI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,iceoryx2,2846982879,624,Memory corruption issue using C++ binding,rbdm-qnt,61274891,,,OPEN,2025-02-12T01:58:26Z,2025-02-15T15:24:52Z,"## Required information

Linux 6.5.0-1018-aws #18~22.04.1-Ubuntu SMP Fri Apr  5 17:44:33 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

rustc 1.75.0 (82e1608df 2023-12-21) (built from a source tarball)

cargo 1.75.0

**iceoryx2 version:**
main branch, ICEORYX2_VERSION_STRING=""0.5.0"", commit hash: 5b45d39c15c4ab24a0476f7de48d7fe5a123f293

**Detailed log output:**
Attached below

**Observed result or behaviour:**
This happened while using Pub/Sub mode using C++ bindings. It happened in the publisher application. We have multiple pub instances in the same application in different threads publishing data on the same bus. Logging level is TRACE. We had no crashes so far, and about 400MB worth of this error in the log files per day. We publish 500GB+ of data per day via the bus. No error and no logs for the subscriber.


```
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], payload_size: 280 }], data_segment: DataSegment { memory: Static(Memory { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 91, data: ""iox2_0354a209029e7d094a819e2d4030ea331e6caaf0_239570042580385605080812073151.publisher_data"" } }, size: 10127376534, base_address: 0x7856591a3000, has_ownership: true, file_descriptor: FileDescriptor { value: 17, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 30, data: ""239570042580385605080812073151"" } }, _phantom_data: PhantomData<iceoryx2_cal::shared_memory::common::details::AllocatorDetails<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator>> }, name: FileName { value: FixedSizeByteString<255> { len: 30, data: ""239570042580385605080812073151"" } }, payload_start_address: 132312257409160, _phantom: PhantomData<iceoryx2_cal::shm_allocator::pool_allocator::PoolAllocator> }) }, port_id: UniquePublisherId(UniqueSystemId { value: 239570042580385605080812073151, pid: 3387583, creation_time: Time { clock_type: Realtime, seconds: 1739220282, nanoseconds: 102216143 } }), config: LocalPublisherConfig { max_loaned_samples: 8192, unable_to_deliver_strategy: Block, degration_callback: None, initial_max_slice_len: 1, allocation_strategy: Static }, service_state: ServiceState { static_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }), service_name: ServiceName { value: ""Company/App/my_program"" }, attributes: AttributeSet([]), messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 256, max_publishers: 256, max_nodes: 256, history_size: 0, subscriber_max_buffer_size: 131072, subscriber_max_borrowed_samples: 8192, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 24, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""v"", size: 0, alignment: 1 }, payload: TypeDetail { variant: FixedSize, type_name: ""N6my_program18FixedSizeByteArrayE"", size: 256, alignment: 1 } } }) }, shared_node: SharedNode { id: NodeId(UniqueSystemId { value: 160319116027617802878482362559, pid: 3387583, creation_time: Time { clock_type: Realtime, seconds: 1739220282, nanoseconds: 100982102 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 15, data: ""my_program_publisher"" } }, name: NodeName { value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 256, max_publishers: 256, max_nodes: 256, subscriber_max_buffer_size: 131072, subscriber_max_borrowed_samples: 8192, publisher_max_loaned_samples: 8192, publisher_history_size: 0, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 16, max_notifiers: 16, max_nodes: 36, event_id_max_value: 4294967295, deadline: None, notifier_created_event: None, notifier_dropped_event: None, notifier_dead_event: None }, request_response: RequestResonse { enable_safe_overflow_for_requests: true, enable_safe_overflow_for_responses: true, max_active_responses: 4, max_active_requests: 2, max_borrowed_responses: 4, max_borrowed_requests: 2, max_response_buffer_size: 2, max_request_buffer_size: 4, max_servers: 2, max_clients: 8, max_nodes: 20 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }): (ContainerHandle { index: 3, container_id: 2 }, 1)}, poisoned: false, .. } }, signal_handling_mode: HandleTerminationRequests, _details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 50, data: ""/tmp/iceoryx2/nodes/160319116027617802878482362559"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 68, data: ""/tmp/iceoryx2/nodes/160319116027617802878482362559/iox2_node.details"" } }), file_descriptor: FileDescriptor { value: 14, is_owned: true }, has_ownership: false }, len: 1471 } }, dynamic_storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 94, data: ""iox2_305ad9523c6b202364d581359ec3d2c5743e42e7_b7e671b10f398ee12fd67c143c8e378808d973e3.dynamic"" } }, size: 38211, base_address: 0x785b3786f000, has_ownership: false, file_descriptor: FileDescriptor { value: 20, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }, _phantom_data: PhantomData<iceoryx2::service::dynamic_config::DynamicConfig> }, static_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 22, data: ""/tmp/iceoryx2/services"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 76, data: ""/tmp/iceoryx2/services/iox2_b7e671b10f398ee12fd67c143c8e378808d973e3.service"" } }), file_descriptor: FileDescriptor { value: 18, is_owned: true }, has_ownership: false }, len: 762 } }, subscriber_connections: SubscriberConnections { connections: [UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }, UnsafeCell { .. }], port_id: UniquePublisherId(UniqueSystemId { value: 239570042580385605080812073151, pid: 3387583, creation_time: Time { clock_type: Realtime, seconds: 1739220282, nanoseconds: 102216143 } }), shared_node: SharedNode { id: NodeId(UniqueSystemId { value: 160319116027617802878482362559, pid: 3387583, creation_time: Time { clock_type: Realtime, seconds: 1739220282, nanoseconds: 100982102 } }), details: NodeDetails { executable: FileName { value: FixedSizeByteString<255> { len: 15, data: ""my_program_publisher"" } }, name: NodeName { value: """" }, config: Config { global: Global { root_path_unix: Path { value: FixedSizeByteString<255> { len: 14, data: ""/tmp/iceoryx2/"" } }, root_path_windows: Path { value: FixedSizeByteString<255> { len: 17, data: ""c:\Temp\iceoryx2\"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } }, service: Service { directory: Path { value: FixedSizeByteString<255> { len: 8, data: ""services"" } }, publisher_data_segment_suffix: FileName { value: FixedSizeByteString<255> { len: 15, data: "".publisher_data"" } }, static_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".service"" } }, dynamic_config_storage_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".dynamic"" } }, creation_timeout: 500ms, connection_suffix: FileName { value: FixedSizeByteString<255> { len: 11, data: "".connection"" } }, event_connection_suffix: FileName { value: FixedSizeByteString<255> { len: 6, data: "".event"" } } }, node: Node { directory: Path { value: FixedSizeByteString<255> { len: 5, data: ""nodes"" } }, monitor_suffix: FileName { value: FixedSizeByteString<255> { len: 13, data: "".node_monitor"" } }, static_config_suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, service_tag_suffix: FileName { value: FixedSizeByteString<255> { len: 12, data: "".service_tag"" } }, cleanup_dead_nodes_on_creation: true, cleanup_dead_nodes_on_destruction: true } }, defaults: Defaults { publish_subscribe: PublishSubscribe { max_subscribers: 256, max_publishers: 256, max_nodes: 256, subscriber_max_buffer_size: 131072, subscriber_max_borrowed_samples: 8192, publisher_max_loaned_samples: 8192, publisher_history_size: 0, enable_safe_overflow: true, unable_to_deliver_strategy: Block, subscriber_expired_connection_buffer: 128 }, event: Event { max_listeners: 16, max_notifiers: 16, max_nodes: 36, event_id_max_value: 4294967295, deadline: None, notifier_created_event: None, notifier_dropped_event: None, notifier_dead_event: None }, request_response: RequestResonse { enable_safe_overflow_for_requests: true, enable_safe_overflow_for_responses: true, max_active_responses: 4, max_active_requests: 2, max_borrowed_responses: 4, max_borrowed_requests: 2, max_response_buffer_size: 2, max_request_buffer_size: 4, max_servers: 2, max_clients: 8, max_nodes: 20 } } } }, monitoring_token: UnsafeCell { .. }, registered_services: RegisteredServices { data: Mutex { data: {ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }): (ContainerHandle { index: 3, container_id: 2 }, 1)}, poisoned: false, .. } }, signal_handling_mode: HandleTerminationRequests, _details_storage: Storage { name: FileName { value: FixedSizeByteString<255> { len: 4, data: ""node"" } }, config: Configuration { path: Path { value: FixedSizeByteString<255> { len: 50, data: ""/tmp/iceoryx2/nodes/160319116027617802878482362559"" } }, suffix: FileName { value: FixedSizeByteString<255> { len: 8, data: "".details"" } }, prefix: FileName { value: FixedSizeByteString<255> { len: 5, data: ""iox2_"" } } }, has_ownership: false, file: File { path: Some(FilePath { value: FixedSizeByteString<255> { len: 68, data: ""/tmp/iceoryx2/nodes/160319116027617802878482362559/iox2_node.details"" } }), file_descriptor: FileDescriptor { value: 14, is_owned: true }, has_ownership: false }, len: 1471 } }, static_config: StaticConfig { max_subscribers: 256, max_publishers: 256, max_nodes: 256, history_size: 0, subscriber_max_buffer_size: 131072, subscriber_max_borrowed_samples: 8192, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 24, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""v"", size: 0, alignment: 1 }, payload: TypeDetail { variant: FixedSize, type_name: ""N6my_program18FixedSizeByteArrayE"", size: 256, alignment: 1 } } }, number_of_samples: 35659776, max_number_of_segments: 1 }, subscriber_list_state: UnsafeCell { .. }, history: None, static_config: StaticConfig { service_id: ServiceId(RestrictedFileName { value: FixedSizeByteString<64> { len: 40, data: ""b7e671b10f398ee12fd67c143c8e378808d973e3"" } }), service_name: ServiceName { value: ""Company/App/my_program"" }, attributes: AttributeSet([]), messaging_pattern: PublishSubscribe(StaticConfig { max_subscribers: 256, max_publishers: 256, max_nodes: 256, history_size: 0, subscriber_max_buffer_size: 131072, subscriber_max_borrowed_samples: 8192, enable_safe_overflow: true, message_type_details: MessageTypeDetails { header: TypeDetail { variant: FixedSize, type_name: ""iceoryx2::service::header::publish_subscribe::Header"", size: 24, alignment: 8 }, user_header: TypeDetail { variant: FixedSize, type_name: ""v"", size: 0, alignment: 1 }, payload: TypeDetail { variant: FixedSize, type_name: ""N6my_program18FixedSizeByteArrayE"", size: 256, alignment: 1 } } }) }, loan_counter: 0, is_active: true } 
| Unable to reclaim samples from connection Connection { sender: Sender { storage: Storage { shm: SharedMemory { name: FileName { value: FixedSizeByteString<255> { len: 117, data: ""iox2_b9fc73e5c1f646968758453273c6c65cb372831b_239570042580385605080812073151_92154754679238304942278291628.connection"" } }, size: 37822693, base_address: 0x785645d7f000, has_ownership: false, file_descriptor: FileDescriptor { value: 19, is_owned: true }, memory_lock: None }, name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""239570042580385605080812073151_92154754679238304942278291628"" } }, _phantom_data: PhantomData<iceoryx2_cal::zero_copy_connection::common::details::SharedManagementData> }, name: FileName { value: FixedSizeByteString<255> { len: 60, data: ""239570042580385605080812073151_92154754679238304942278291628"" } } }, subscriber_id: UniqueSubscriberId(UniqueSystemId { value: 92154754679238304942278291628, pid: 3387564, creation_time: Time { clock_type: Realtime, seconds: 1739220278, nanoseconds: 700751965 } }) } due to ReceiverReturnedCorruptedPointerOffset. This may lead to a situation where no more samples will be delivered to this connection.
```
","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eTvyq,iceoryx2,2655976618,624,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-13T09:15:10Z,2025-02-13T09:15:10Z,"@rbdm-qnt This issue should only arise when the `Subscriber` returns a sample twice or some kind of race condition occurs. Returning a sample twice could happen if you have some kind of lifetime issue on the subscriber side.

Please be aware that:
 * the Publisher, Subscriber, Sample are not threadsafe
 * the publisher, subscriber and sample are not allowed to be moved between threads. You cannot receive something in thread A and move the sample to another thread B. For such use cases you must create a subscriber per thread - but this does not affect the overall performance.

Could you provide us a code snippet of the subscriber receive part that snapshots the whole lifetime of a received sample (from receive until it goes out-of-scope) and give me a bit more context so that I might be able to reproduce it locally.

Also could you please attach a the logfile to the issue - not as copy and paste (then github seems to cut out parts). If its too large, maybe the last 100 lines.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eTvyq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eWGwY,iceoryx2,2656594968,624,NA,rbdm-qnt,61274891,,,NA,2025-02-13T13:24:40Z,2025-02-13T13:24:40Z,"This is the method we use to receive the data in the Sub. The sub is single-threaded and has only 1 instance of iceoryx2 Bus. The callback reads the data and appends it to a file to save it to disk. The sub never gets destroyed, the application runs 24/7 with no interruption and the process or thread are never restarted. The processing of the sample is completely sync with no other threads active.


```
const iox::string<256> Bus::kReceiveSucceeds = ""receive succeeds"";

void Bus::Sub::receive(std::function<void(const FixedSizeByteArray&)> cb) {
  auto sample = subscriber_->receive().expect(kReceiveSucceeds);
  if (sample.has_value()) {
    cb(sample->payload());
  }
}
```

> [@rbdm-qnt](https://github.com/rbdm-qnt) This issue should only arise when the `Subscriber` returns a sample twice or some kind of race condition occurs. Returning a sample twice could happen if you have some kind of lifetime issue on the subscriber side.
> 
> Please be aware that:
> 
> * the Publisher, Subscriber, Sample are not threadsafe
> * the publisher, subscriber and sample are not allowed to be moved between threads. You cannot receive something in thread A and move the sample to another thread B. For such use cases you must create a subscriber per thread - but this does not affect the overall performance.
> 
> Could you provide us a code snippet of the subscriber receive part that snapshots the whole lifetime of a received sample (from receive until it goes out-of-scope) and give me a bit more context so that I might be able to reproduce it locally.
> 
> Also could you please attach a the logfile to the issue - not as copy and paste (then github seems to cut out parts). If its too large, maybe the last 100 lines.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eWGwY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ebcYn,iceoryx2,2657994279,624,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-02-14T00:32:21Z,2025-02-14T00:32:21Z,"@rbdm-qnt just to be clear. You do not experience (visible) communication issues. It's just the log that indicates that there might be issues, right?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ebcYn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ebmNb,iceoryx2,2658034523,624,NA,rbdm-qnt,61274891,,,NA,2025-02-14T01:07:51Z,2025-02-14T01:07:51Z,"> [@rbdm-qnt](https://github.com/rbdm-qnt) just to be clear. You do not experience (visible) communication issues. It's just the log that indicates that there might be issues, right?

Not that I'm aware of. From the error message it doesn't seem like a sample is lost (although this is almost impossible to verify on our side), just that one of preallocated chunks got corrupted, so I don't know if this will cause a crash down the line after the application runs for many days. I've noticed that this issue happens about twice a day, each time writing 2 lines (that I posted at the start of this issue) that weight about 50MB in the log files: it basically prints my entire preallocated memory chunk as all zeros. This seems to happen at a similar frequency to that of the crashes we used to get with Iceoryx 1. The error messages were similar, I can't find one now but it was something along the lines of POPO_CHUNK_INVALID_CHUNK, and it was fatal, so it's a big upgrade either way.

Would it improve things if I changed my design to something like this to immediately free the sample before calling my callback? This would minimise the time we ""hold on"" to the sample as much as possible, and make it constant. We'd rather not copy those 256 bytes one extra time, but if it guarantees stability we can temporarily keep it this way.

```
void Bus::Sub::receive(std::function<void(const FixedSizeByteArray&)> cb, FixedSizeByteArray& buffer) {
  auto sample = subscriber_->receive().expect(kReceiveSucceeds);
  if (!sample.has_value())
    return;
  
  std::memcpy(buffer.data(), sample->payload().data(), FixedSizeByteArraySize);
  cb(buffer);
}
```","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ebmNb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ec-qN,iceoryx2,2658396813,624,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-14T06:34:27Z,2025-02-14T06:34:27Z,"@rbdm-qnt I think we are one step closer to a possible solution. I could reproduce your bug, but only in three misuse scenario.

1. Calling `Publisher::send_copy()` on the same publisher but from different threads 
2. Calling `Publisher::loan()` or `Publisher::loan_uninit()` but from different threads
3. Calling `send(std::move(sample))` in a different thread then where the `Publisher::loan()` was called to get the sample.

Could you take a look at the publisher side if you find any instance where you might access the publisher by accident from multiple threads. Or maybe you can share a piece of code here.

Also to point it out. In classic iceoryx and iceoyrx2 you are not allows to loan a sample in one thread and send or access it in another thread. `send(std::move(sample))` must be called from the same thread as it was loaned.

","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6ec-qN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eh1ls,iceoryx2,2659670380,624,NA,rbdm-qnt,61274891,,,NA,2025-02-14T15:46:26Z,2025-02-14T15:46:26Z,"> [@rbdm-qnt](https://github.com/rbdm-qnt) I think we are one step closer to a possible solution. I could reproduce your bug, but only in three misuse scenario.
> 
> 1. Calling `Publisher::send_copy()` on the same publisher but from different threads
> 2. Calling `Publisher::loan()` or `Publisher::loan_uninit()` but from different threads
> 3. Calling `send(std::move(sample))` in a different thread then where the `Publisher::loan()` was called to get the sample.
> 
> Could you take a look at the publisher side if you find any instance where you might access the publisher by accident from multiple threads. Or maybe you can share a piece of code here.
> 
> Also to point it out. In classic iceoryx and iceoyrx2 you are not allows to loan a sample in one thread and send or access it in another thread. `send(std::move(sample))` must be called from the same thread as it was loaned.

Ok, then we'll do an in-depth code review of how we use our publishers, do some tests and report back in a week or so. So you confirm that the change I proposed to my ""receive"" method in my previous comment is useless, right?","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eh1ls/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eiscT,iceoryx2,2659895059,624,NA,elfenpiff,56729169,Christian Eltzschig,me@elchris.org,NA,2025-02-14T17:29:10Z,2025-02-14T17:29:10Z,"@rbdm-qnt You are already using the subscriber correctly therefore there is no need for this change.

> Ok, then we'll do an in-depth code review of how we use our publishers, do some tests and report back in a week or so.

If we can support you, please let us know! I suspect there is a concurrency issue with the publisher usage since you seem to have the same issue with classic iceoryx which has the same restriction.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6eiscT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6emlnN,iceoryx2,2660915661,624,NA,elBoberido,56729607,Mathias Kraus,,NA,2025-02-15T12:58:18Z,2025-02-15T12:58:18Z,"@rbdm-qnt you mentioned that you have the issue twice a day, each time with two log entries. Does it happen more or less periodically? I just want to rule out that there is somewhere a overflow or something similar, e.g. for twice a day, a 32 bit integer would overflow when the publishing rate would be 100kH.","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6emlnN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/624,https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6emzAA,iceoryx2,2660970496,624,NA,rbdm-qnt,61274891,,,NA,2025-02-15T15:24:51Z,2025-02-15T15:24:51Z,"Thank you for your availability! Will keep you posted after we review everything. 

It doesn't happen exactly periodically. I've seen it happen once every 20-28 hours, and I've seen it happen every 4-10 hours. But the field of application is finance, so the message rate has a ton of variance, so I wouldn't rule this theory out completely. For reference, we are dealing with 2-5 billion messages per day, on average. ","{""url"": ""https://api.github.com/repos/eclipse-iceoryx/iceoryx2/issues/comments/IC_kwDOK46AYc6emzAA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
