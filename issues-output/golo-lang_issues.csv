type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,golo-lang,12656137,1,Parser : multiline comments,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-04-01T09:10:30Z,2013-06-07T11:42:22Z,"it would be more practical : 

```
###
 Oh! what a nice comment
 I could write my doc here
 with markdown format
###
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1NzEyMDU1,golo-lang,15712055,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-01T11:11:48Z,2013-04-01T11:11:48Z,"Not sure I like that syntax but a way to embed markdown is definitely something to have in the long run. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1NzEyMDU1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1NzEyMTc5,golo-lang,15712179,1,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-04-01T11:17:48Z,2013-04-01T11:17:48Z,"```
""""""

""""""
```

like python ;)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1NzEyMTc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTExNjc5,golo-lang,15911679,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-04T17:31:29Z,2013-04-04T17:31:29Z,"How about something like:

```
---
This is *awesome*.

Parameters:

- `a` is some value,
- `b` is some value, too.
---
function foo = |a, b| {
  return a + b
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTExNjc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTEzNjA1,golo-lang,15913605,1,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-04-04T18:06:30Z,2013-04-04T18:06:30Z,"perfect !

On Thu, Apr 4, 2013 at 7:31 PM, Julien Ponge notifications@github.comwrote:

> How about something like:
> 
> ---
> 
> This is _awesome_.
> 
> Parameters:
> - `a` is some value,
> 
> ## \- `b` is some value, too.
> 
> function foo = |a, b| {
>   return a + b
> }
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/1#issuecomment-15911679
> .

## 

http://about.me/ph.charriere
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTEzNjA1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTIyMTU4,golo-lang,15922158,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-04T20:36:46Z,2013-04-04T20:36:46Z,"Ok I'll think about it when we get something like `golodoc`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTIyMTU4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU2MTU5,golo-lang,15956159,1,NA,titimoby,348156,Thierry Chantier,,NA,2013-04-05T13:42:36Z,2013-04-05T13:42:36Z,"I think there are 2 purposes here:
- multiline comment: several lines to explain a piece of the code
- golodoc directives: tell what needs to appear in the documentation
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU2MTU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU2ODgx,golo-lang,15956881,1,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-04-05T13:55:27Z,2013-04-05T13:55:27Z,"and a golo script to generate html from markdown comment :)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU2ODgx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU3Mjgx,golo-lang,15957281,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-05T14:02:48Z,2013-04-05T14:02:48Z,"Exactly. 

I think # is fine for comments and 3 dashes are clean for documentation purposes. 

Multiline comments should remain 1 # per line, like in many similar languages. 

Just my humble opinion :-)

On Fri, Apr 5, 2013 at 3:42 PM, Thierry notifications@github.com wrote:

> I think there are 2 purposes here:
> - multiline comment: several lines to explain a piece of the code
> 
> ## \- golodoc directives: tell what needs to appear in the documentation
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/golo-lang/golo-lang/issues/1#issuecomment-15956159
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU3Mjgx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU5NDM0,golo-lang,15959434,1,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-04-05T14:41:37Z,2013-04-05T14:41:37Z,"in my case, as I can do multi-line, I'm happy, mais on pouvait aussi utiliser ça : ✿✿✿
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU5NDM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxMjk2,golo-lang,16101296,1,NA,titimoby,348156,Thierry Chantier,,NA,2013-04-09T08:55:01Z,2013-04-09T08:55:01Z,"Sounds good to me. The doc generation is under its way ? or still way below in the TODO list ? 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxMjk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNDgw,golo-lang,16101480,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-09T08:59:22Z,2013-04-09T08:59:22Z,"It has yet to be started, we were brainstorming on a possible syntax that would be doc-specific and different from comments.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNDgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNTkx,golo-lang,16101591,1,NA,titimoby,348156,Thierry Chantier,,NA,2013-04-09T09:01:51Z,2013-04-09T09:01:51Z,"ok.
where's the GSR ? :)
When possible, tell us what format/syntax was choosen... Just for us to critisize ;)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNTkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNzA4,golo-lang,16101708,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-09T09:04:59Z,2013-04-09T09:04:59Z,"It could be good idea to have something like:

```
    ----
    This is the documentation in *markdown*.
    
    - `foo`: an argument
    - `bar`: some other argument
    ----
    function plop = |foo, bar| {
      # ... some code over here
    }    
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxNzA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxOTgw,golo-lang,16101980,1,NA,titimoby,348156,Thierry Chantier,,NA,2013-04-09T09:11:08Z,2013-04-09T09:11:08Z,"I will appreciate markdown or whatever just to have something nice to generate.
Also, something to reference other module/functions like in javadoc.
Maybe:
{@link  module#function  label}
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAxOTgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAyMjIx,golo-lang,16102221,1,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-04-09T09:14:47Z,2013-04-09T09:14:47Z,"if markdown, you can use `[module](href2module)`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MTAyMjIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/1,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NTYzMjAw,golo-lang,16563200,1,NA,jponge,25961,Julien Ponge,,NA,2013-04-18T08:13:59Z,2013-04-18T08:13:59Z,"Let's continue the discussion in #18 .
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NTYzMjAw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/3,https://api.github.com/repos/eclipse-archived/golo-lang/issues/3,golo-lang,12844870,3,Migrate from Stack to Deque,jponge,25961,Julien Ponge,,CLOSED,2013-04-05T13:17:00Z,2015-06-30T13:52:09Z,"`java.util.Stack` is used in many places in the compiler and bytecode generation code. I forgot that it extends the old `java.util.Vector`.

The code shall be upgraded to user [`java.util.Deque`](http://docs.oracle.com/javase/7/docs/api/java/util/Deque.html) instead, with a backing `java.util.LinkedList` implementation.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/3,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU1MzQ5,golo-lang,15955349,3,NA,vietj,225674,Julien Viet,julien@julienviet.com,NA,2013-04-05T13:26:42Z,2013-04-05T13:26:42Z,"why not java.util.LinkedList directly :-) 

On Apr 5, 2013, at 3:17 PM, Julien Ponge notifications@github.com wrote:

> java.util.Stack is used in many places in the compiler and bytecode generation code. I forgot that it extends the old java.util.Vector.
> 
> The code shall be upgraded to user java.util.Deque instead, with a backing java.util.LinkedList implementation.
> 
> —
> Reply to this email directly or view it on GitHub.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU1MzQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/3,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU3MTY5,golo-lang,15957169,3,NA,jponge,25961,Julien Ponge,,NA,2013-04-05T14:00:54Z,2013-04-05T14:00:54Z,":-)

On Fri, Apr 5, 2013 at 3:29 PM, Julien Viet notifications@github.com
wrote:

> why not java.util.LinkedList directly :-) 
> On Apr 5, 2013, at 3:17 PM, Julien Ponge notifications@github.com wrote:
> 
> > java.util.Stack is used in many places in the compiler and bytecode generation code. I forgot that it extends the old java.util.Vector.
> > 
> > The code shall be upgraded to user java.util.Deque instead, with a backing java.util.LinkedList implementation.
> > 
> > —
> > Reply to this email directly or view it on GitHub.
> > 
> > ---
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/golo-lang/golo-lang/issues/3#issuecomment-15955349
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTU3MTY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/3,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTkzODQx,golo-lang,15993841,3,NA,jponge,25961,Julien Ponge,,NA,2013-04-06T10:13:41Z,2013-04-06T10:13:41Z,"See pull request #5 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE1OTkzODQx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/6,https://api.github.com/repos/eclipse-archived/golo-lang/issues/6,golo-lang,12881483,6,gololang.DynamicObject can't be pimped,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-04-06T18:21:58Z,2015-06-30T13:52:09Z,"The golo provided `DynamicObject` object can't be pimped. I know, I know it may sounds silly to dinamically add a method to a dynamic object. This the use case:

```
module test


pimp java.util.ArrayList {
  function dump = |this| -> this: each(|it| -> println(it))
}

pimp gololang.DynamicObject {

  function dump = |this| {
    this: properties(): each(|prop| {
      println (prop: getKey() + "" -> "" + prop: getValue())
    })
  }
}


function main = |args| {
  let  list = java.util.ArrayList()
  list: add(0)
  list: add(1)
  list: dump()

  let mrbean = DynamicObject():
  name(""Mr Bean""):
  email(""mrbean@gmail.com""):
  toString(|this| -> this: name() + "" <"" + this: email() + "">"")

  mrbean: dump()
}
```

and there you  have the stack

```
0
1
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.NoSuchMethodException: Missing DynamicObject definition for dump
    at gololang.DynamicObject.propertyMissing(DynamicObject.java:151)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.installDynamicObjectDispatch(MethodInvocationSupport.java:201)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:159)
    at test.main(test2.golo)
    ... 5 more
```

The stack clearly shows that the `DynamicObject` is trying to handle the `dump` method (invoking `gololang.DynamicObject.propertyMissing`)

It could be an understandable limitation of the language.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/6,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDExODM1,golo-lang,16011835,6,NA,jponge,25961,Julien Ponge,,NA,2013-04-07T09:03:34Z,2013-04-07T09:03:34Z,"Dynamic objects dispatch is indeed different, and this shall be considered as a limitation of the language.

That being said you can get around this by using the ability to mix in dynamic objects. This is similar to many idioms in languages like Python or JavaScript.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDExODM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/8,https://api.github.com/repos/eclipse-archived/golo-lang/issues/8,golo-lang,12902664,8,newWithSameType pimp function implementation is not 100% safe,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-04-07T21:43:41Z,2015-06-30T13:52:09Z,"Currently most of the Collections/functional function pimps are based on the `newWithSameType` function. The function name is quite explicit but during the runtime we can face some disturbing issues. Indeed, some ""Types"" are not accessible for instanciation.  Private inner classes for instance, such as `java.util.HashMap$EntrySet
`. It's a private implementation of the `Set` interface.
http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/HashMap.java

There is a usecase based on the now famous Mr. Bean....

```
module test

local function mrbean = -> DynamicObject():
  name(""Mr Bean""):
  email(""mrbean@gmail.com""):
  toString(|this| -> this: name() + "" <"" + this: email() + "">"")

function main = |args| {

  let bean = mrbean()
  println(bean: toString())

  bean: email(""mrbean@outlook.com"")
  println(bean: toString())

  println(""Displaying all the properties"")
  println(bean: properties())
  println(bean: properties(): getClass())
  println(bean: properties(): filter(|it| -> it: getKey() == ""name""))

}

```

and there you have the statck:

```
Mr Bean <mrbean@gmail.com>
Mr Bean <mrbean@outlook.com>
Displaying all the properties
[email=mrbean@outlook.com, name=Mr Bean, toString=MethodHandle(Object)Object]
class java.util.HashMap$EntrySet
Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.InstantiationException: java.util.HashMap$EntrySet
    at java.lang.Class.newInstance0(Class.java:359)
    at java.lang.Class.newInstance(Class.java:327)
    at java.lang.invoke.MethodHandleImpl$BindCaller$T/24300697.invoke_V(MethodHandleImpl.java:1404)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at gololang.StandardPimps$java$util$Collection.newWithSameType(standard-pimps.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at gololang.StandardPimps$java$util$Set.filter(standard-pimps.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at test.main(test1.golo)
    ... 5 more
```

So basically I'm trying to invoke the `filter` pimp to get only the ""name"" property (the original use case was to filter closures w/ `isClosure`). The `filter` pimp try to create a fresh instance of `java.util.HashMap$EntrySet` but it can not and BAZINGA!!

I don't think it could be consider as a language limitation since the behavior is unpredictable. We're not responsible of the implementation underneath an interface.
Of course, we could imagine setting up some reflection voodoo to be able to instantiate a private class but the SecurityManager policies won't help us to do so....
Maybe the easiest solution could be to define some default types which will be use instead of the original one if we""re not able to access/instantiate it.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/8,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDM3MjM1,golo-lang,16037235,8,NA,jponge,25961,Julien Ponge,,NA,2013-04-08T07:59:15Z,2013-04-08T07:59:15Z,"Good point. Maybe we could have some forms of filter / map / reduce with a target collection element, like in Groovy? Otherwise the trick is indeed either default collections or reflection wizardry.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDM3MjM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/8,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ4NDYz,golo-lang,16748463,8,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-04-21T23:12:13Z,2013-04-21T23:12:13Z,"Regarding the implementaion, Have a look at:
https://github.com/danielpetisme/golosa/blob/master/src/main/golo/golosa/util/augment-util.golo

I definitively prefer the default collections approach. To be more flexible I use a kind of container (very very basic). 
- You register the default mappings (could be externailized)
- The functions try to invoke the sameType constructor
- If it fails, use the default collection associated

It works pretty well( have a look at the test : https://github.com/danielpetisme/golosa/blob/master/src/test/golo/golosa/util/TestUtil.golo
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ4NDYz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/8,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU4MTE0,golo-lang,16758114,8,NA,jponge,25961,Julien Ponge,,NA,2013-04-22T07:00:02Z,2013-04-22T07:00:02Z,"We could try something like that indeed.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU4MTE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/10,https://api.github.com/repos/eclipse-archived/golo-lang/issues/10,golo-lang,13315771,10,The compiler blocks on incomplete files,jponge,25961,Julien Ponge,,CLOSED,2013-04-17T19:38:10Z,2015-06-30T13:52:09Z,"The compiler blocks waiting for more tokens from its input in examples such as the following:

```
module plop

function plop = {
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/11,https://api.github.com/repos/eclipse-archived/golo-lang/issues/11,golo-lang,13337840,11,Underscores in number literals,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T07:55:10Z,2015-06-30T13:52:09Z,"Allowing underscores in number literals would increase readability: `123456789` _versus_ `123_456_789`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/12,https://api.github.com/repos/eclipse-archived/golo-lang/issues/12,golo-lang,13337875,12,Value classes and objects,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T07:56:45Z,2013-08-27T19:29:28Z,"Golo would benefit from the ability to define value classes and objects.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/12/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/12,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjM0NzY3,golo-lang,21234767,12,NA,jponge,25961,Julien Ponge,,NA,2013-07-19T07:08:59Z,2013-07-19T07:08:59Z,"#63 implements part of that.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjM0NzY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,golo-lang,13337896,13,Common collection literals,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T07:57:26Z,2015-06-30T13:52:09Z,"Golo should provide literals for common collections: arrays, lists, sets and maps.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjA1ODkx,golo-lang,20205891,13,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-06-28T18:30:32Z,2013-06-28T18:30:32Z,"I tried to start this one but JavaCC is _currently_ out of my knowledges. Nevertheless, I would be very interested to understand the golo black magic and implement the feature (at least a draft for arrays). Could we hangout or skype some day to have a explanations about:
- The grammar structure
- The details of the ir package VS. compiler
- Some hints to start a first attempt.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjA1ODkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTc3MDk3,golo-lang,20577097,13,NA,jponge,25961,Julien Ponge,,NA,2013-07-07T20:38:05Z,2013-07-07T20:38:05Z,"Forgot about your message Daniel, got caught up with other things recently.

I started working on this, so once I push the wip branch to my development repo you will be able to follow the changes, which is more than enough if you are interested in learning about how it works.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTc3MDk3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTk3NzI3,golo-lang,20597727,13,NA,jponge,25961,Julien Ponge,,NA,2013-07-08T10:45:53Z,2013-07-08T10:45:53Z,"See: https://github.com/jponge/golo-lang/tree/wip/collection-literals

Examples:

```
function nested_tuples = -> [1, 2, 3, [10, 20]]

function some_array = -> array[1, ""a""]

function some_list = -> list[1, 2, 3]

function some_vector = -> vector[1, 2, 3]

function some_set = -> set[""a"", ""b"", ""a""]

function some_map = -> map[[""foo"", ""bar""], [""plop"", ""da plop""]]

function funky_data = -> map[
  [""foo"", ""bar""],
  [""plop"", set[1, 2, 3, 4, 5]],
  [""mrbean"", map[
    [""name"", ""Mr Bean""],
    [""email"", ""bean@outlook.com""]
  ]]
]
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTk3NzI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/13,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTk4Njk2,golo-lang,20598696,13,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-08T11:10:34Z,2013-07-08T11:10:34Z,"Nice!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTk4Njk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,golo-lang,13337963,14,String interpolation,jponge,25961,Julien Ponge,,OPEN,2013-04-18T08:00:09Z,2015-11-28T15:18:20Z,"String interpolation is a nice feature found in modern languages, such as the following in Ruby:

``` ruby
name = ""world""
str = ""Hello #{name}!""
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU2Njcx,golo-lang,18056671,14,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-17T11:37:32Z,2013-05-17T11:37:32Z,"Oups, Sorry for the duplication. I copyNpaste
Let's interpole embeded expressions within a String.
Here's a sample test

```
//Given
let answer  = 42
let what = ""answer""

//When 
let sentence = ""The ${what: toUpperCase()} is ${answer}""

//Then 
require(sentence == ""The ANSWER is 42"")
```

I think the variable interpolation is not that hard (IMHO) where an expresion could be tricky. Maybe we have to split this _Specification_ in 2 (variable & expression)

Regarding the syntax, I dunno care. `$` is the historical variable prefix (shell) but any symbol suit fine (Eg. `#`).

The brackets could be optionnal for variable but mandatory for expressions.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU2Njcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzI3Njcy,golo-lang,29727672,14,NA,ggrossetie,333276,Guillaume Grossetie,,NA,2013-12-03T16:51:11Z,2013-12-03T16:51:11Z,"I'm interested to work on this issue but I have no clue how ? I think I need to understand the JJT https://github.com/golo-lang/golo-lang/blob/master/src/main/jjtree/Golo.jjt ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzI3Njcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzI4Mzcz,golo-lang,29728373,14,NA,jponge,25961,Julien Ponge,,NA,2013-12-03T16:57:58Z,2013-12-03T16:57:58Z,"Yep
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzI4Mzcz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/14,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzUzNDU4,golo-lang,29753458,14,NA,ggrossetie,333276,Guillaume Grossetie,,NA,2013-12-03T21:30:36Z,2013-12-03T21:30:36Z,"> nice feature found in modern languages

And also in PHP : https://java.net/downloads/javacc/contrib/grammars/php.jj :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NzUzNDU4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/15,https://api.github.com/repos/eclipse-archived/golo-lang/issues/15,golo-lang,13338096,15,Invoke methods on JVM arrays and make them iterable,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T08:04:40Z,2015-06-30T13:52:09Z,"Golo currently deals with JVM arrays through special functions like `aget`, `aset`, etc.

We could improve their manipulation and make them work like other collections such as those from `java.util` by dealing with them as special receivers on method invocations.

This would allow code like: `some_array: get(5)` or `some_array: iterator()`, which could also make arrays directly usable in `foreach` loops without a prior conversion using `atoList()`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/15,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQ4MDA4,golo-lang,16848008,15,NA,jponge,25961,Julien Ponge,,NA,2013-04-23T09:28:36Z,2013-04-23T09:28:36Z,"I started working on this.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQ4MDA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/15,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQ5OTcz,golo-lang,16849973,15,NA,jponge,25961,Julien Ponge,,NA,2013-04-23T10:18:00Z,2013-04-23T10:18:00Z,"Work-in-progress branch: https://github.com/jponge/golo-lang/tree/wip-arrays-as-objects
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQ5OTcz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/15,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTE0ODc2,golo-lang,16914876,15,NA,jponge,25961,Julien Ponge,,NA,2013-04-24T08:51:08Z,2013-04-24T08:51:08Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTE0ODc2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/16,https://api.github.com/repos/eclipse-archived/golo-lang/issues/16,golo-lang,13338163,16,JVM bytecode debug symbols,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T08:06:44Z,2015-06-30T13:52:09Z,"The Golo bytecode currently lacks debug informations. This makes it hard to spot the source of, say, an exception as there is no correspondence between bytecode and line numbers in the original Golo source code.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/16,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDY4MDM3,golo-lang,25468037,16,NA,jponge,25961,Julien Ponge,,NA,2013-10-01T16:54:24Z,2013-10-01T16:54:24Z,"See #87.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDY4MDM3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/16,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NTc0NDg2,golo-lang,25574486,16,NA,jponge,25961,Julien Ponge,,NA,2013-10-02T20:39:04Z,2013-10-02T20:39:04Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NTc0NDg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,golo-lang,13338220,17,Maven incremental compilation,jponge,25961,Julien Ponge,,OPEN,2013-04-18T08:08:39Z,2016-12-14T13:38:49Z,"The Golo Maven plugin recompiles everytime it is being invoked. We could improve it by making it incremental. Data comparisons should be enough because Golo is a dynamic language, and there is no cross-module check at compile time.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTQ1OTUx,golo-lang,30145951,17,NA,kelcecil,373621,Kel Cecil,kelcecil@praisechaos.com,NA,2013-12-09T16:21:25Z,2013-12-09T16:21:25Z,"Would you mind elaborating on what you mean by ""data comparisons?"" I'd like to better understand what you had in mind.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTQ1OTUx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTUxOTI3,golo-lang,30151927,17,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-12-09T17:22:57Z,2013-12-09T17:22:57Z,"A simple file checksum?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTUxOTI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTc1NjQ2,golo-lang,30175646,17,NA,jponge,25961,Julien Ponge,,NA,2013-12-09T21:32:43Z,2013-12-09T21:32:43Z,"Yes, checksums or even file sizes are good change indicators.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTc1NjQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTk3Mzkz,golo-lang,30197393,17,NA,kelcecil,373621,Kel Cecil,kelcecil@praisechaos.com,NA,2013-12-10T03:49:48Z,2013-12-10T03:49:48Z,"I figured an MD5 hash per bolo file would do, but I wanted to make sure I wasn't missing something. I'm taking a stab at it.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMTk3Mzkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMjA5NzA4,golo-lang,30209708,17,NA,jponge,25961,Julien Ponge,,NA,2013-12-10T09:14:53Z,2013-12-10T09:14:53Z,"Yes you can use md5 checksums but it may be slow. Maybe a date + file size strategy is simpler to do.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMjA5NzA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU0NTE0NA==,golo-lang,162545144,17,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-07T14:47:07Z,2015-12-07T14:47:07Z,"Couldn't we close this issue, since we moved to gradle?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU0NTE0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/17,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU1MTExNg==,golo-lang,162551116,17,NA,jponge,25961,Julien Ponge,,NA,2015-12-07T15:09:31Z,2015-12-07T15:09:31Z,"We still have the Maven plugin, and it doesn’t have incremental compilation :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU1MTExNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,golo-lang,13338388,18,golodoc,jponge,25961,Julien Ponge,,CLOSED,2013-04-18T08:13:39Z,2015-06-30T13:52:09Z,"The language should provide a dedicated syntax for API documentations.

I propose a notation such as:

```
----
Integer and string concatenation. This is *awesome*.

- `a` must be some number
- `b` must be a string

It returns the concatenation of `a` and `b`, as a string.
----
function concat = |a, b| -> a + b
```

The nice thing is that documentation could be written in Markdown, and that the special `----` delimiters could only apply to `function`, `module`, `augment` or any upcoming top-level declaration.

`----` is inspired by blocks in AsciiDoc.

The parser could enforce that, meaning that `#` is for comments while `----` is for documentation.

See #1 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ2NTUw,golo-lang,16746550,18,NA,titimoby,348156,Thierry Chantier,,NA,2013-04-21T21:16:49Z,2013-04-21T21:16:49Z,"How may we help on this one ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ2NTUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU3Mjg1,golo-lang,16757285,18,NA,jponge,25961,Julien Ponge,,NA,2013-04-22T06:32:58Z,2013-04-22T06:32:58Z,"This requires parser tweaks and, say, markdownj integration.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU3Mjg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzYwOTc1,golo-lang,16760975,18,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-04-22T07:47:18Z,2013-04-22T07:47:18Z,"I though aout splitting the doc gen in 2 parts:
1- Reading symbols and produce a easy to exploit data model - Text2Model
2- Use the data model to generate what ever you want (Json, Md, HTML, etc.) - Model2Text

The benefits of having a pure JSON output format is tolet everybody customize the doc format. Or even integrate it in a search enfine or what so ever.

The first point could be done either:
- Parsing the source files... Easy But not efficient
- Through a more complex tool (it's a kind of compilation in fact)

With this  2 steps process, you can split the tak. Once the data model defined (and I think is not that complex) the 2 can work by their own.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzYwOTc1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA1NzEw,golo-lang,16805710,18,NA,jponge,25961,Julien Ponge,,NA,2013-04-22T17:43:56Z,2013-04-22T17:43:56Z,"I'd rather just assume that text is in markdown :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA1NzEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA2OTUy,golo-lang,16806952,18,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-04-22T17:51:46Z,2013-04-22T17:51:46Z,"You'll parse the source file and generate the Md output ? What about the actual source code ? it'll be ignored ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA2OTUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA3Njc0,golo-lang,16807674,18,NA,jponge,25961,Julien Ponge,,NA,2013-04-22T17:56:36Z,2013-04-22T17:56:36Z,"That's the idea. Text is markdown, you know where it applies (function, etc), so with MarkdownJ it is very simple to output something.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA3Njc0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA4NDk5,golo-lang,16808499,18,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-04-22T18:02:10Z,2013-04-22T18:02:10Z,"Sweet!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODA4NDk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODg0OTA2,golo-lang,17884906,18,NA,jponge,25961,Julien Ponge,,NA,2013-05-14T15:47:00Z,2013-05-14T15:47:00Z,"For those interested I am experimenting in https://github.com/jponge/golo-lang/commits/wip-golodoc

**Warning:** it is a _work-in-progress_ branch and as such is subject to `git rebase` and `git push --force` anytime. There is no guarantee that it will be a success either :wink: 

It looks like https://github.com/rjeschke/txtmark is the tiny Markdown processing library that I had been looking for: fast, self-contained and minimal.

Playing with early parser modifications made me realize that _fun_ stuff may happen, for example when documenting augmentation functions:

```
----
A bunch of String extensions.
----
augment java.lang.String {

----
This

- is
- cool
----
  function test = |this, arg| -> this + arg

}
```

Documentation need to be shifted left, otherwise indentation as in the next example breaks markdown:

```
----
A bunch of String extensions.
----
augment java.lang.String {

  ----
  This

  - is
  - cool
  ----
  function test = |this, arg| -> this + arg

}
```

I am mainly writing this as a reminder to myself: this could be fixed by removing _n_ trailing spaces from the markdown lines, where _n_ is the indentation of the opening documentation delimiter.

:beer: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODg0OTA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTU5NjY4,golo-lang,17959668,18,NA,jponge,25961,Julien Ponge,,NA,2013-05-15T19:13:16Z,2013-05-15T19:13:16Z,"Branch renamed to https://github.com/jponge/golo-lang/tree/wip/golodoc
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTU5NjY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY0Njky,golo-lang,25064692,18,NA,jponge,25961,Julien Ponge,,NA,2013-09-25T06:33:23Z,2013-09-25T06:33:23Z,"I'll keep a pull-request alive for this, see #77 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY0Njky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/18,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5OTcxNjI0,golo-lang,29971624,18,NA,jponge,25961,Julien Ponge,,NA,2013-12-06T08:31:25Z,2013-12-06T08:31:25Z,"Fixed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5OTcxNjI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/19,https://api.github.com/repos/eclipse-archived/golo-lang/issues/19,golo-lang,13458420,19,Add a join method on the List Std Augmentation,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-04-21T23:05:13Z,2015-06-30T13:52:09Z,"Cause is always useful!!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/19,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ4MzYy,golo-lang,16748362,19,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-04-21T23:05:55Z,2013-04-21T23:05:55Z,"PR: https://github.com/golo-lang/golo-lang/pull/20
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzQ4MzYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/22,https://api.github.com/repos/eclipse-archived/golo-lang/issues/22,golo-lang,13580016,22,ClassCastException at runtime with varargs closure,artpej,693299,Sylvain Desgrais,,CLOSED,2013-04-24T10:29:11Z,2015-06-30T13:52:09Z,"with this class in Java:

``` java
public class JavaObjectArrayMethod {

    public void method(Object[] args){
                //do somthing
    }

}
```

when i try to invoke this Java method in a Golo varargs parametrized closure return by a function tike this (call1 funtion):

``` golo
import JavaObjectArrayMethod

function call1 = {
        let javaObject = JavaObjectArrayMethod()
        return |args...| -> javaObject: method(args)
}

function call2 = {
        return |args...| {
                let javaObject = JavaObjectArrayMethod()
                javaObject: method(args)
        }
}

function call3 = {
        let javaObject = JavaObjectArrayMethod()
        return |args| -> javaObject: method(args)
}



function main = |args| {
        let function1 = call1() # fail ( ClassCastException: cannot bind class JavaObjectArrayMethod argument to parameter #1 of (Object,Object[])Object )
        let function2 = call2() # works
        function2(""test"",""test"")
        let function3 = call3() # works
        function3(Array(""test"",""test""))

}
```

( ClassCastException: cannot bind class JavaObjectArrayMethod argument to parameter #1 of (Object,Object[])Object ) is thrown.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/22,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTIzMzA1,golo-lang,16923305,22,NA,jponge,25961,Julien Ponge,,NA,2013-04-24T12:32:25Z,2013-04-24T12:32:25Z,"Good catch, but how did you end up with such a corner case? :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTIzMzA1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/22,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTIzNzM1,golo-lang,16923735,22,NA,artpej,693299,Sylvain Desgrais,,NA,2013-04-24T12:41:30Z,2013-04-24T12:41:30Z,"With playing with JNA abstraction for Golo ;)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTIzNzM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/22,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTE3MjYy,golo-lang,17117262,22,NA,jponge,25961,Julien Ponge,,NA,2013-04-27T14:48:22Z,2013-04-27T14:48:22Z,"Fixed, thanks @Artpej :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTE3MjYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/23,https://api.github.com/repos/eclipse-archived/golo-lang/issues/23,golo-lang,13719450,23,Use weak references for mega-morphic inline caches,jponge,25961,Julien Ponge,,CLOSED,2013-04-27T10:38:49Z,2013-04-27T15:07:38Z,"The current cache implementation is a straight  `HashMap`. We should investigate the usage of a  `WeakReference` indirection to the mapped values.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/23,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTE3NTYy,golo-lang,17117562,23,NA,jponge,25961,Julien Ponge,,NA,2013-04-27T15:07:38Z,2013-04-27T15:07:38Z,"Bad after all idea :-1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTE3NTYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/27,https://api.github.com/repos/eclipse-archived/golo-lang/issues/27,golo-lang,14278086,27,Use local functions in augmentations,jponge,25961,Julien Ponge,,CLOSED,2013-05-13T19:45:30Z,2015-06-30T13:52:10Z,"Local functions cannot be used from augmentations defined from the same module.

Indeed, augmentations and module functions are compiled to different class files, and they would need some access lifting at runtime as they are effectively JVM-`private`.

See #26 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,golo-lang,14278200,28,Dynamic code evaluation,jponge,25961,Julien Ponge,,CLOSED,2013-05-13T19:47:55Z,2015-06-30T13:52:10Z,"It would be useful to provide a shortcut (think the evil `eval()`) to dynamically load code from:
1. strings,
2. files.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODQzNjU2,golo-lang,17843656,28,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-13T21:54:58Z,2013-05-13T21:54:58Z,"What usecases do you have in mind?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODQzNjU2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODU5OTc4,golo-lang,17859978,28,NA,jponge,25961,Julien Ponge,,NA,2013-05-14T07:03:28Z,2013-05-14T07:03:28Z,"Dynamic code loading is a general-purpose feature in a dynamic language. Think reloading, meta-programming, etc
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODU5OTc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYwOTY3,golo-lang,17860967,28,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-14T07:34:09Z,2013-05-14T07:34:09Z,".... and code injection: _With great power, comes great responsability...._
I'm not a dynamic expert but isn't close to the Ruby eRB stuff?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYwOTY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYxNjI0,golo-lang,17861624,28,NA,jponge,25961,Julien Ponge,,NA,2013-05-14T07:51:17Z,2013-05-14T07:51:17Z,"require in Ruby.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYxNjI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYxNjUz,golo-lang,17861653,28,NA,jponge,25961,Julien Ponge,,NA,2013-05-14T07:52:23Z,2013-05-14T07:52:23Z,"Erb is for templating.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYxNjUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/28,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTgzNzgw,golo-lang,17983780,28,NA,jponge,25961,Julien Ponge,,NA,2013-05-16T06:12:26Z,2013-05-16T06:12:26Z,"Experiment under way at https://github.com/jponge/golo-lang/tree/wip/dynamic-evaluation

Doing it in Java code. Maybe one day we'll rewrite it in Golo, once we have classes to build services (think [""Functional in the small, OO in the large""](http://www.johndcook.com/blog/2009/03/23/functional-in-the-small-oo-in-the-large/))
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTgzNzgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/30,https://api.github.com/repos/eclipse-archived/golo-lang/issues/30,golo-lang,14284436,30,Extend asInterfaceInstance to multi-methods interfaces,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-13T22:06:58Z,2013-11-05T08:28:07Z,"Curently the `asInterfaceInstance` native function allow to convert a lambda expression to  an anonymous implementation of a single method interface.
http://golo-lang.org/documentation/next/#_closures_to_single_method_interfaces

It would be nice to have suh feature for multi-methods interfaces.

Regarding the syntax, Groovy allow to duck type a map to as an interface anonymous impl. Golo provides a `DynamicObject` which could be used for this issue.

```
let myList = DynamicObject():
  add(|this, element| -> println(I'm addin stuff): 
  asInterfaceInstance(java.util.List.class)
```

Or it could be part of the Predefined functions

```
let myList = asInterfaceInstance(java.util.List.class, DynamicObject():
  add(|this, element| -> println(I'm addin stuff))

```

_My concern was to use Golo to create a `FileVisitor` implementation http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html_
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/30,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYwMDk0,golo-lang,17860094,30,NA,jponge,25961,Julien Ponge,,NA,2013-05-14T07:07:03Z,2013-05-14T07:07:03Z,"This relates to #12. It will come with a more general object support, which is in itself a substantial piece if work to get right. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3ODYwMDk0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/30,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mjg4MzE4,golo-lang,27288318,30,NA,jponge,25961,Julien Ponge,,NA,2013-10-29T09:30:27Z,2013-10-29T09:30:27Z,"See the work in #94 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mjg4MzE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/31,https://api.github.com/repos/eclipse-archived/golo-lang/issues/31,golo-lang,14383661,31,Impossible to execute a compiled Golo source code with the Java command,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-15T23:02:33Z,2013-06-19T06:46:38Z,"Let's illustrate with a simple example.

```
module test

function main = |args| {
 println(""Hello"")   
}
```
- `$ gologolo test.golo` > `Hello`
- `goloc test.golo; java test`

_Error: Main method not found in class test, please define the main method as:  
   public static void main(String[] args)_
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/31,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTgzNTEw,golo-lang,17983510,31,NA,jponge,25961,Julien Ponge,,NA,2013-05-16T06:00:45Z,2013-05-16T06:00:45Z,"This is not the intended usage, and one still needs the Golo runtime library anyway.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3OTgzNTEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/32,https://api.github.com/repos/eclipse-archived/golo-lang/issues/32,golo-lang,14391883,32,Multiline strings,jponge,25961,Julien Ponge,,CLOSED,2013-05-16T06:02:15Z,2015-06-30T13:52:10Z,"A nice feature to have, such as in:

```
let text = """"""This is
a multiline
piece of
      text.""""""
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/32,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDI3MzU2,golo-lang,18027356,32,NA,jponge,25961,Julien Ponge,,NA,2013-05-16T20:35:54Z,2013-05-16T20:35:54Z,"See #33 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDI3MzU2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/32,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU3NTEz,golo-lang,18057513,32,NA,jponge,25961,Julien Ponge,,NA,2013-05-17T12:00:09Z,2013-05-17T12:00:09Z,"Merged
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU3NTEz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/34,https://api.github.com/repos/eclipse-archived/golo-lang/issues/34,golo-lang,14446565,34,String interpolation,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-17T10:37:48Z,2013-05-17T11:12:09Z,"Let's interpole embeded expressions within a String.
Here's a sample test

```
//Given
let answer  = 42
let what = ""answer""

//When 
let sentence = ""The ${what: toUpperCase()} is ${answer}""

//Then 
require(sentence == ""The ANSWER is 42"")
```

I think the variable interpolation is not that hard (IMHO) where an expresion could be tricky. Maybe we have to split this _Specification_ in 2 (variable & expression)

Regarding the syntax, I dunno care. `$` is the historical variable prefix (shell) but any symbol suit fine (Eg. `#`).

The brackets could be optionnal for variable but mandatory for expressions.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/34,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU1NzU4,golo-lang,18055758,34,NA,jponge,25961,Julien Ponge,,NA,2013-05-17T11:12:09Z,2013-05-17T11:12:09Z,"Duplicates #14 :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDU1NzU4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,golo-lang,14622439,35,Add --version option to Golo CLI,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-22T13:21:26Z,2015-06-30T13:52:10Z,"AFAIK, there is no way to get the version from the executable. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/35/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg0NDMx,golo-lang,18284431,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T15:01:16Z,2013-05-22T15:01:16Z,"Only with `goloc`:
- `goloc -version`
- `goloc -fullversion`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg0NDMx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1MzQw,golo-lang,18285340,35,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-22T15:13:58Z,2013-05-22T15:13:58Z,"From you POV, It makes sense to have the version options on all the CLI commands or it's a nice to have?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1MzQw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1Njgz,golo-lang,18285683,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T15:18:59Z,2013-05-22T15:18:59Z,"It would be nice to have. Even better, a unified CLI interface with plugins, in the style of

```
git <command>
git help <command>
ceylon <command>
(...)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1Njgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1NzI1,golo-lang,18285725,35,NA,titimoby,348156,Thierry Chantier,,NA,2013-05-22T15:19:39Z,2013-05-22T15:19:39Z,"If I have my bike driving licence exam tomorrow, I'll give a look if it's a beginner task.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1NzI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1ODUw,golo-lang,18285850,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T15:21:31Z,2013-05-22T15:21:31Z,"@titimoby good luck!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg1ODUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg2MzM2,golo-lang,18286336,35,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-22T15:28:18Z,2013-05-22T15:28:18Z,"@titimoby Lucky you have to pass the theoretical part and it's a f**cking borring. I can't wait to start my first driving lesson :/ Good luck!

Regarding the CLI. I see 2 ways:
- Do it manually. Is still meaningful after 15y of Java dev? But it'll be lighter
- Pick a CLI lib and increase the final package jar...

I think it depends what we want to do exactly with the options/commands
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg2MzM2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg3MDk4,golo-lang,18287098,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T15:39:33Z,2013-05-22T15:39:33Z,"No third-party library, please :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg3MDk4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4NDIz,golo-lang,18288423,35,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-22T15:58:00Z,2013-05-22T15:58:00Z,"+1 
The CLI pattern
    $ golo <command> <options>
sounds perfect and easy to implement

But that means the `golo`, `goloc` & `gologolo` can't have options like `--version` or `--args`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4NDIz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4Nzg3,golo-lang,18288787,35,NA,titimoby,348156,Thierry Chantier,,NA,2013-05-22T16:03:11Z,2013-05-22T16:03:11Z,"As I can see, there is only one Metadata class that provide one and only one version number.
Is there a need for different version number for golo, goloc and gologolo ?

(by the way, j'ai déjà le code, je passe le plateau demain ;) )
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4Nzg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4ODkw,golo-lang,18288890,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T16:04:40Z,2013-05-22T16:04:40Z,"Well in that case you get psubcommands out of golo: run, compile, doc, etc
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg4ODkw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg5MDgw,golo-lang,18289080,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-22T16:07:24Z,2013-05-22T16:07:24Z,"Same version for all tools: they originate from the same Jar :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mjg5MDgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjgwMzQx,golo-lang,18680341,35,NA,jponge,25961,Julien Ponge,,NA,2013-05-30T13:36:19Z,2013-05-30T13:36:19Z,"Perhaps [JCommander](http://jcommander.org/) could be useful? I just checked and the Jar is self-contained and minimal.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjgwMzQx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzM2NTA2,golo-lang,19336506,35,NA,jponge,25961,Julien Ponge,,NA,2013-06-12T16:11:03Z,2013-06-12T16:11:03Z,"I'm starting work on this, I'll let you know when I have a branch. JCommander is really simple!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzM2NTA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzM4MjE0,golo-lang,19338214,35,NA,jponge,25961,Julien Ponge,,NA,2013-06-12T16:38:23Z,2013-06-12T16:38:23Z,"You can follow the work in progress at https://github.com/jponge/golo-lang/tree/wip/jcommander
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzM4MjE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/35,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzczMTM1,golo-lang,19373135,35,NA,jponge,25961,Julien Ponge,,NA,2013-06-13T05:40:36Z,2013-06-13T05:40:36Z,"All done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MzczMTM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/36,https://api.github.com/repos/eclipse-archived/golo-lang/issues/36,golo-lang,14683516,36,Partial boolean evaluation,jponge,25961,Julien Ponge,,CLOSED,2013-05-23T16:33:28Z,2015-06-30T13:52:10Z,"The current implementation of the binary boolean operators `and` and `or` evaluates the full expression.

This means that an expression such as:

```
(foo isnt null) and (foo: bar())
```

should raise a `NullPointerException` when `foo` is `null`.

Instead, such operators should evaluate each sub-expression in order, and have conditional branching to deal with it. This requires special handling at the AST / IR representation level (rewriting the AST or IR with `if` statements is a possibility).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,golo-lang,14687313,37,Provide an enVironment Manager tool,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-23T18:01:35Z,2013-05-30T12:43:54Z,"As POC I've made the [govm](https://github.com/danielpetisme/govm) (stands fo Golo enVironment Manager). The tool is a fork + sed 's/gvm/govm/g' of the [gvm](https://github.com/gvmtool/gvm) tool.

I think an enVironment Manager would be a great killer feature for golo adoption, so it should be managed though the official Github account.

Now, regarding the implementation
govm, gvm client side is obsviously do in shell (compliant bash & cygwin). For server side Vert.x + mongoDB (currenlty hosted on heroku). I ask to the gvm manager if it would be possible to have an environment manager techno agnostic (xvm). Adding a custom wrapper on top of it.

@jponge proposed [jenv](https://github.com/hikage/jenv) (inspired by rbenv). The installation seems a bit harder. I dunno how the backend is managed.

So basically we have to choose:
- the hosting behavior (heroku, cloudbees, custom?)
- a basic tool to reuse (gvm/jenv)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/37/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4OTE1,golo-lang,18368915,37,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T20:17:43Z,2013-05-23T20:17:43Z,":+1: 

Out of curiosity, why do you need a database? Can't we just have a pure static file setup?

I am asking because the simpler, the better :wink: (think maintenance)

I am also putting @hikage in CC, he's the guy behind `jenv`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4OTE1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4OTYz,golo-lang,18368963,37,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T20:18:35Z,2013-05-23T20:18:35Z,"re: the name, again, `govm` seems a bad choice to me because of the easy confusion with Google Go.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4OTYz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcwMDgz,golo-lang,18370083,37,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T20:38:23Z,2013-05-23T20:38:23Z,"+1 for ``golovm`

Gvm is curently using a DB to:
- stores the candidates (groovy, gradle, grails) packages url
- define what is the current version of the candidate. For instance in golo if you invoke `golovm install golo`, it should install the version `0-preview4`
- to store the broadcast messages, ie. to broadcast when a new version of `gvm` is available and to encourage the client upgrade.

Basically, to be exploitable your static file must have a predefined format (JSON?) so why not but in that case the backend will have to query the static file. Isn't easier to request a DB? 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcwMDgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcxMjg3,golo-lang,18371287,37,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T20:59:58Z,2013-05-23T20:59:58Z,"Having a static JSON file somewhere is indeed what I had in mind. Simple, and clients can still query it from time to time.

Call that _""static web services""_ :dart: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcxMjg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMTgy,golo-lang,18372182,37,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T21:15:36Z,2013-05-23T21:15:36Z,"a JSON file somewhere == _""static web services""_ you should be commercial!!! :smile: 

:+1:  for the JSON file stored in GitHub (let's get it in the raw format). 

Since you seem very attached to `jenv` I'll get a closer look at it. :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMTgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMzM2,golo-lang,18372336,37,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T21:18:18Z,2013-05-23T21:18:18Z,"Yeah I know, I am a marketer in disguise :chart_with_upwards_trend: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMzM2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzczODAw,golo-lang,18373800,37,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T21:44:33Z,2013-05-23T21:44:33Z,"As far as I can see, `jenv` manages your environment locally. I mean it wasn't design to install java or any of the ecosystem component. (Based on https://github.com/sstephenson/rbenv/wiki/Why-rbenv%3F)

The main benefits of `rvm` & `gvm` are:
- a one line installation (vs `jenv`)
- install components (`ruby`, `groovy`, etc.)

From my POV these are the **must be done** features.
`jenv` suits perfect to have a fine management of the already installed environment.

@jponge @hikage any thoughts on that?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzczODAw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mzg5Mzkz,golo-lang,18389393,37,NA,gcuisinier,135300,Gildas Cuisinier,hikage@hikage.be,NA,2013-05-24T06:58:00Z,2013-05-24T06:58:00Z,"Hi all,

At this time, jenv is only for managing already-installed java JDK.
But the installation of component (like maven, etc.. ) is in my todolist, and I also plan to use a static file for managing candidates.
About the one line install, it's also in my todo list for jenv.

My opinion is that gvm, golovm, jenv could/should be merge to avoid the ""Java Framework effect (too many project for one need).

At the origin, I make jenv to avoid manual switch between Java. Quickly, I need to ""wrap"" component to allow them  to use the correct java version.
At possible next step is to allow installation of these component, and to manage ( per dir, per shell ) which version of these component to be used...

But ... this is partially provided by ""gvm"". So .. Can I use GVM and jenv together ?
And gvm + golovm + jenv + anotherThingVM  .. etc ?

I think the better thing to do is to discuss of really needed features for ""JVM base environment"" : 
- Managing Java version per dir, per shell, globally. 
- Possibility to use a ""less specific version"". ""I need to use a 1.7"", ""I need to used a Oracle JDK"", ...
- Installing Java version ?
- Installing component ( golo, groovy, maven, gradle, .... )
- Managing component version per dir, per shell
- Managing options ( JVM Option ) per dir, per shell
- Other ? 

And discuss to merge all these needs into one project.
There is several advantages for this : 
- One tool, simpler for end user
- One ""unique"" DB, less work to maintain it
- No interference between multiple tools that modify the ""PATH"".

What do you thing  about that ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4Mzg5Mzkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/37,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzkxNzQ5,golo-lang,18391749,37,NA,jponge,25961,Julien Ponge,,NA,2013-05-24T08:06:00Z,2013-05-24T08:06:00Z,":+1: @hikage 

I'd love to see a single proposition for that, too!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzkxNzQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,golo-lang,14687513,38,Industrialize Golo packaging and distribution,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-05-23T18:06:35Z,2013-05-30T12:43:54Z,"Currently @jponge package and deploy the golo distribution manually? Non mais Allô quoi!

Industrialize 'em all! 
- Build
- Deployment

Which Service ? Travis ? Drone.io ? Jenkins@Cloudbees?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4NzEx,golo-lang,18368711,38,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T20:13:56Z,2013-05-23T20:13:56Z,"The only manual step is uploading to Sourceforge, all other operations are automated.

I'll see to add a `rsync` or `sftp` target to the `Rakefile`, as Sourceforge supports this.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY4NzEx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY5NjQ5,golo-lang,18369649,38,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T20:30:30Z,2013-05-23T20:30:30Z,"Who will be in charge of uploading the distrib package ? you or Travis ? I don't know how TravisCI manages the credentials. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzY5NjQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcxMTcy,golo-lang,18371172,38,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T20:57:43Z,2013-05-23T20:57:43Z,"`rake release` and I'm done!

Travis has support for encrypted credentials, but when it comes to releases it is best when done locally (and release artifacts have to be GnuPG-signed to be pushed to Maven Central anyway).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcxMTcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMjYy,golo-lang,18372262,38,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T21:17:06Z,2013-05-23T21:17:06Z,"... continuous deployment? :worried: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyMjYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyNTE4,golo-lang,18372518,38,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T21:21:33Z,2013-05-23T21:21:33Z,"Hey, it's not like if we were pushing an app to a server 4 times a day :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyNTE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyNzI0,golo-lang,18372724,38,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-23T21:24:53Z,2013-05-23T21:24:53Z,"My bad! 
Automate building & deployment aka story of my pro life :expressionless:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzcyNzI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/38,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzczMTQ5,golo-lang,18373149,38,NA,jponge,25961,Julien Ponge,,NA,2013-05-23T21:31:55Z,2013-05-23T21:31:55Z,"There are worse stories to have in a pro life!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MzczMTQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,golo-lang,14770103,39,"DynamicObject and ""define"" or named method",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-05-26T13:07:15Z,2015-06-30T13:52:10Z,"this sample runs well

```
module dyno

function Human = |firstName, lastName| {

    return DynamicObject()
    :firstName(firstName)
    :lastName(lastName)
    :toString(
        |this|-> 
            this:firstName()+"" ""+this:lastName()
    )
    :sayHello(
        |this, message|-> 
            println(message + "" from "" + this:toString())
    )   
}

function SuperHero = |firstName, lastName, heroName, power|{
let human = Human(firstName, lastName)

return DynamicObject()
    :mixin(human)
    :name(heroName)
    :power(power)
    :define(""toString"",
        |this|-> 
            this:firstName()+"" ""+this:lastName()+"" aka ""+this:name()+"" power : ""+this:power()
    )
}


function main = |args| {

let clark = SuperHero(""Clark"", ""Kent"", ""SuperMan"", ""flying"")

clark:sayHello(""Hello World!"")

}
```

but if i use a named method instead using `define` : 

```
    :toString(
        |this|-> 
            this:firstName()+"" ""+this:lastName()+"" aka ""+this:name()+"" power : ""+this:power()
    )
```

it fires an error :

```
Caused by: java.lang.IllegalArgumentException: toString must have the following signature: (Object,Object)Object (found: (Object)Object)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4MDYw,golo-lang,18468060,39,NA,jponge,25961,Julien Ponge,,NA,2013-05-26T19:20:31Z,2013-05-26T19:20:31Z,"Would you have a full stacktrace?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4MDYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4MzIy,golo-lang,18468322,39,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-05-26T19:36:07Z,2013-05-26T19:36:07Z,"Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.IllegalArgumentException: toString must have the following signature: (Object,Object)Object (found: (Object)Object)
    at gololang.DynamicObject.plug(DynamicObject.java:165)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.installDynamicObjectDispatch(MethodInvocationSupport.java:222)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:164)
    at dyno.SuperHero(03-dynamic.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:599)
    at fr.insalyon.citi.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:104)
    at dyno.main(03-dynamic.golo)
    ... 5 more
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4MzIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjE3,golo-lang,18468617,39,NA,jponge,25961,Julien Ponge,,NA,2013-05-26T19:51:58Z,2013-05-26T19:51:58Z,"Ah I see!

It's because `toString` had already been injected through the mixin, so `define` is indeed the way to change its definition.

Written like you did, it means calling `toString`, no redefining it.

Creating properties directly by name is ok for values, but hazardous when it comes to methods.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjU3,golo-lang,18468657,39,NA,jponge,25961,Julien Ponge,,NA,2013-05-26T19:53:40Z,2013-05-26T19:53:40Z,"I'm leaving this open, it's worth a documentation clarification.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjU3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjY1,golo-lang,18468665,39,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-05-26T19:54:10Z,2013-05-26T19:54:10Z,":+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY4NjY1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY5ODUy,golo-lang,18469852,39,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-26T21:15:23Z,2013-05-26T21:15:23Z,"As far as I understand, when you do no use the explicitly `define` function, the object will invoke `plug`. So, if I'm right `define` is used for ""static"" definitions (is a kind of keyword to declare something) where `plug` sounds dynamic.
Moreover, `define` will always invalidate the previous definition for the new one. 
Right?
But now in the usage why they are incompatible? 
When `plug` is invoked can't we just invoke `define` behind the scene?

In all cases, it's a very interesting topic!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NDY5ODUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTQ4MjI1,golo-lang,18548225,39,NA,jponge,25961,Julien Ponge,,NA,2013-05-28T12:54:31Z,2013-05-28T12:54:31Z,"`plug` is undocumented on purpose, it is what the `invokedynamic` runtime uses to update a call site, but it had to be made public to be visible for the runtime.

So:
- `define` or just the property `name` on values (ints, strings, ...) is ok,
- `define` is the way to go for functions, except if you know what you are doing such as the immediate call after the dynamic object creation, in which case using a named property effectively creates it, but subsequent _setter-style_ calls will not do what you expect: they will just call the function as a method.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTQ4MjI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/39,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTU3NTMx,golo-lang,18557531,39,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-05-28T15:19:54Z,2013-05-28T15:19:54Z,"Be carefull `mixin != inheritance`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTU3NTMx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,golo-lang,14860892,40,""""".format()",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-05-28T20:56:06Z,2015-06-30T13:52:10Z,"i've found strange behaviour :

```
println(""%s %s"":format(""5.0"",""2.0"")) #5.0 2.0
println(""%s %s"":format(""5.0"",2.0))  #5.0 2.0

println(""%s %s"":format(5.0,2.0)) #ouch
```

Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.NoSuchMethodError: class java.lang.String::format
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.findTarget(MethodInvocationSupport.java:277)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at test.main(test.golo)

```
println("" %s "":format(""5.0""))
```

Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
    at fr.insalyon.citi.golo.runtime.TypeMatching.canAssign(TypeMatching.java:62)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.findMethodOrField(MethodInvocationSupport.java:365)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.findTarget(MethodInvocationSupport.java:243)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at test.main(test.golo)

```
println(""%d %d"":format(5.0,2.0)) #ouch
```

Exception in thread ""main"" java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:69)
Caused by: java.lang.NoSuchMethodError: class java.lang.String::format
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.findTarget(MethodInvocationSupport.java:277)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:176)
    at test.main(test.golo)

etc. ...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/40/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI2NjQy,golo-lang,18626642,40,NA,jponge,25961,Julien Ponge,,NA,2013-05-29T15:56:54Z,2013-05-29T15:56:54Z,"`format` is a static method: http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#format%28java.util.Locale,%20java.lang.String,%20java.lang.Object...%29

The following is probably what you wanted:

```
module test

function main = |args| {
  println(java.lang.String.format("">>> %s %s %s"", 1, ""a"", 2.0))
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI2NjQy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI3MTg3,golo-lang,18627187,40,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-05-29T16:03:54Z,2013-05-29T16:03:54Z,"yes i know that, but then, """".format() should'nt be possible ? 

this runs :
println(""%s %s"":format(""5.0"",""2.0"")) #5.0 2.0
println(""%s %s"":format(""5.0"",2.0))  #5.0 2.0
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI3MTg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI3MzE4,golo-lang,18627318,40,NA,jponge,25961,Julien Ponge,,NA,2013-05-29T16:06:00Z,2013-05-29T16:06:00Z,"It could be a standard augmentation :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjI3MzE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/40,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjQyMjI5,golo-lang,18642229,40,NA,jponge,25961,Julien Ponge,,NA,2013-05-29T20:02:52Z,2013-05-29T20:02:52Z,"Now in `master`!

You can do stuff like:

```
function str_format1 = -> ""%s"": format(""plop"")
function str_format2 = -> ""%s %s"": format(""plop"", ""da plop"")
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NjQyMjI5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,golo-lang,14983290,42,control flow: case \n generates error,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-05-31T08:27:09Z,2015-06-30T13:52:10Z,"ie : newline after when generates error

```
case {
    when macouleur is ""orange"" {
        println(""good!"")
    }

    otherwise {
        println("":("")
    }
}
```

generates :
    [error] Encountered "" ""\n"" ""\n """" at line N, column M.
    Was expecting one of:
        ""when"" ...
        ""otherwise"" ...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0NDY4,golo-lang,19074468,42,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T21:12:09Z,2013-06-06T21:12:09Z,"Same as with successive `if` / `else` blocks, we would prefer to enforce such code style with no superfluous line breaks. Tweaking the parser to support jumps is easy though.

Is it really blocking for you? 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0NDY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0NjY4,golo-lang,19074668,42,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-06-06T21:15:49Z,2013-06-06T21:15:49Z,"no
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0NjY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0OTA4,golo-lang,19074908,42,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T21:19:33Z,2013-06-06T21:19:33Z,"I'll get you a :beer: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0OTA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0OTQ4,golo-lang,19074948,42,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-06-06T21:20:17Z,2013-06-06T21:20:17Z,":+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0OTQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDkyNjgy,golo-lang,19092682,42,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-06-07T07:22:51Z,2013-06-07T07:22:51Z,"I love this kind of fix:
J: ""Bloking point?""
P: ""Nope, so good so bar""
**Fixed** :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDkyNjgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/42,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDk1ODM1,golo-lang,19095835,42,NA,jponge,25961,Julien Ponge,,NA,2013-06-07T08:52:54Z,2013-06-07T08:52:54Z,"We can always pretend that ""Golo is opiniated"" :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDk1ODM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/43,https://api.github.com/repos/eclipse-archived/golo-lang/issues/43,golo-lang,14999799,43,strange bug when string affectation in body of each() method of hashmap (parser?),k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-05-31T15:49:44Z,2015-06-30T13:52:10Z,"  import java.util.HashMap

  function main = |args| {

```
let h = HashMap()
    :add(""firstName"",""Bob"")
    :add(""lastName"",""Morane"")

let s = """"
h:each(|key, value|{
  println(s + key+ "" "" + value + "" "")
})
```

  }

Result : OK

```
lastName Morane 
firstName Bob 
```

I try this :

  import java.util.HashMap

  function main = |args| {

```
let h = HashMap()
    :add(""firstName"",""Bob"")
    :add(""lastName"",""Morane"")

let s = """"
h:each(|key, value|{
  println(s + key+ "" "" + value + "" "")
  s = s + key+ "" "" + value + "" ""
})
```

  }

Result : KO

Exception in thread ""main"" java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    pouet.__$$_closure_0(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; @0: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @0
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/Object' }
    stack: { }
  Bytecode:
    0000000: 2c2a 1248 2b12 48ba 004f 0000 ba00 4f00
    0000010: 00ba 004f 0000 ba00 4f00 00ba 0052 0000
    0000020: 572c 2a12 482b 1248 ba00 4f00 00ba 004f
    0000030: 0000 ba00 4f00 00ba 004f 0000 4d01 b0  

```
at java.lang.Class.getDeclaredMethods0(Native Method)
at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
at java.lang.Class.getMethod0(Class.java:2685)
at java.lang.Class.getMethod(Class.java:1620)
at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:68)
```

I try this :

  import java.util.HashMap

  function main = |args| {

```
let h = HashMap()
    :add(""firstName"",""Bob"")
    :add(""lastName"",""Morane"")

let s = """"
h:each(|key, value|{
  s = s + key+ "" "" + value + "" ""
})
```

  }

result : KO

Exception in thread ""main"" java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    pouet.__$$_closure_0(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; @0: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @0
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/Object' }
    stack: { }
  Bytecode:
    0000000: 2c2a 1217 2b12 17ba 0022 0000 ba00 2200
    0000010: 00ba 0022 0000 ba00 2200 004d 2cb0     

```
at java.lang.Class.getDeclaredMethods0(Native Method)
at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
at java.lang.Class.getMethod0(Class.java:2685)
at java.lang.Class.getMethod(Class.java:1620)
at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:68)
```

I try this :

  import java.util.HashMap

  function main = |args| {

```
let h = HashMap()
    :add(""firstName"",""Bob"")
    :add(""lastName"",""Morane"")

let s = """"
h:each(|key, value| {
  s = key + "" "" + value + "" ""
})

println(s)
```

  }

Result : no error, but s is empty

i try this :

  import java.util.HashMap

  function main = |args| {

```
let h = HashMap()
    :add(""firstName"",""Bob"")
    :add(""lastName"",""Morane"")

let s = """"
h:each(|key, value| {
  println(s + key + "" "" + value + "" "")
  s = key + "" "" + value + "" ""
})

println(s)
```

  }

Result :
Error again

Exception in thread ""main"" java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    pouet.__$$_closure_0(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; @0: aload_2
  Reason:
    Type top (current frame, locals[2]) is not assignable to reference type
  Current Frame:
    bci: @0
    flags: { }
    locals: { 'java/lang/Object', 'java/lang/Object' }
    stack: { }
  Bytecode:
    0000000: 2c2a 1217 2b12 17ba 0022 0000 ba00 2200
    0000010: 00ba 0022 0000 ba00 2200 00ba 002c 0000
    0000020: 572a 1217 2b12 17ba 0022 0000 ba00 2200
    0000030: 00ba 0022 0000 4d01 b0                 

```
at java.lang.Class.getDeclaredMethods0(Native Method)
at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
at java.lang.Class.getMethod0(Class.java:2685)
at java.lang.Class.getMethod(Class.java:1620)
at fr.insalyon.citi.golo.cli.MainGoloGolo.main(MainGoloGolo.java:68)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/43/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/43,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyOTQ4,golo-lang,18832948,43,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T10:30:03Z,2013-06-03T10:30:03Z,"You are trying to reassign a captured variable `s`, which is incidentally both a constant and a parameter.

The Golo IR visitors should not let you do that and report a compilation error instead. The runtime error is a side-effect of how the Golo bytecode is being generated.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyOTQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/43,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTIxODg1,golo-lang,19121885,43,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-06-07T17:42:53Z,2013-06-07T17:42:53Z,"patch tested and successful :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTIxODg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/43,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTMwNzY5,golo-lang,19130769,43,NA,jponge,25961,Julien Ponge,,NA,2013-06-07T20:23:38Z,2013-06-07T20:23:38Z,"Pull request open for reviews
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTMwNzY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,golo-lang,15028950,44,OSGI bundles for golo,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,CLOSED,2013-06-01T16:09:23Z,2015-06-30T13:52:10Z,"As i'm preparing next iteration for GLDT (Golo Eclipse), I noticed that the Golo jars on Central are not OSGI compliant. This would be nice is this will be available
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/44/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyNzk2,golo-lang,18832796,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T10:25:51Z,2013-06-03T10:25:51Z,"Good point!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyNzk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyODI1,golo-lang,18832825,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T10:26:50Z,2013-06-03T10:26:50Z,"I will ensure that the correct metadata is present. I am not sure that the Golo runtime and OSGi classloaders interaction is safe, though.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODMyODI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM2Mjg1,golo-lang,18836285,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T11:56:17Z,2013-06-03T11:56:17Z,"Is there a tool to automate the `MANIFEST.MF` entries generation?

The Felix Maven Plugin does not work on Java 7 bytecode.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM2Mjg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3MjQ3,golo-lang,18837247,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-03T12:19:34Z,2013-06-03T12:19:34Z,"I'm using the Felix Maven Plugin. I know it using under the hood the Bnd library so maybe if you change the dependency, this may work. I will Google to find a soluton
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3MjQ3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3Mzk4,golo-lang,18837398,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T12:22:48Z,2013-06-03T12:22:48Z,"Seems like the use a bad version of ASM underneath.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3Mzk4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3NzYw,golo-lang,18837760,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-03T12:30:56Z,2013-06-03T12:30:56Z,"I don't see ASM in the dependency tree of the Maven Felix Bundle plugin
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3NzYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3Nzk3,golo-lang,18837797,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T12:31:39Z,2013-06-03T12:31:39Z,"Or are they using cglib or similar?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3Nzk3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3OTc0,golo-lang,18837974,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-03T12:35:10Z,2013-06-03T12:35:10Z,"They are using bndlib which seems to be self-contained (no dependencies).
Can you gist your build output ?

On Mon, Jun 3, 2013 at 2:31 PM, Julien Ponge notifications@github.comwrote:

> Or are they using cglib or similar?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-18837797
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM3OTc0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4NDM5,golo-lang,18838439,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T12:44:25Z,2013-06-03T12:44:25Z,"I got it to work. I'll open a pull-request for review.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4NDM5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4NTQ4,golo-lang,18838548,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-03T12:46:32Z,2013-06-03T12:46:32Z,"Cool

On Mon, Jun 3, 2013 at 2:44 PM, Julien Ponge notifications@github.comwrote:

> I got it to work. I'll open a pull-request for review.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-18838439
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4NTQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4ODM5,golo-lang,18838839,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-03T12:52:36Z,2013-06-03T12:52:36Z,"Well... it doesn't work if you want to let it generate the correct imports / exports, see https://gist.github.com/jponge/5697894
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4ODM4ODM5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ0NDU0,golo-lang,19044454,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T13:22:11Z,2013-06-06T13:22:11Z,"Maybe we should just write the manifest entries by ourselves, but this is somehow error-prone unless we have a way to have a test for correctness. Any idea?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ0NDU0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ1Nzcy,golo-lang,19045772,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-06T13:45:03Z,2013-06-06T13:45:03Z,"Hello,

why don't you use the felix bundle plugin ?
Do you want to check the correctness of the MANIFEST or the execution
inside an OSGI container ?

Jeff

On Thu, Jun 6, 2013 at 3:22 PM, Julien Ponge notifications@github.comwrote:

> Maybe we should just write the manifest entries by ourselves, but this is
> somehow error-prone unless we have a way to have a test for correctness.
> Any idea?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-19044454
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ1Nzcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2MTk3,golo-lang,19046197,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T13:51:26Z,2013-06-06T13:51:26Z,"If I let the Felix plugin do the job, it will call bnd and fail on bytecode.

Or maybe I should just write a manifest tool helper by myself, it's very easy to use ASM and see what imports are needed.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2MTk3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2Njkx,golo-lang,19046691,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-06T13:58:42Z,2013-06-06T13:58:42Z,"Julien,

did you try with the latest bnd library ?. It has jumped to 2.0-something.
Maybe this should work ?

Jeff

On Thu, Jun 6, 2013 at 3:51 PM, Julien Ponge notifications@github.comwrote:

> If I let the Felix plugin do the job, it will call bnd and fail on
> bytecode.
> 
> Or maybe I should just write a manifest tool helper by myself, it's very
> easy to use ASM and see what imports are needed.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-19046197
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2Njkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2OTk2,golo-lang,19046996,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T14:03:04Z,2013-06-06T14:03:04Z,"Haven't tried, no. Hopefully it will work ;-)

(the current bnd implementation apparently has its own bytecode parser, which is pure WTF when you have ASM)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ2OTk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ4MzY1,golo-lang,19048365,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-06T14:23:08Z,2013-06-06T14:23:08Z,"Found this discussion: https://github.com/bndtools/bnd/issues/179

On Thu, Jun 6, 2013 at 4:03 PM, Julien Ponge notifications@github.comwrote:

> Haven't tried, no. Hopefully it will work ;-)
> 
> (the current bnd implementation apparently has its own bytecode parser,
> which is pure WTF when you have ASM)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-19046996
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDQ4MzY1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDczNjU5,golo-lang,19073659,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T20:57:11Z,2013-06-06T20:57:11Z,"I guess we can wait for the 2.4.0 release, see https://issues.apache.org/jira/browse/FELIX-4005
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDczNjU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDczOTM0,golo-lang,19073934,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-06T21:02:24Z,2013-06-06T21:02:24Z,"OK for me.

On Thu, Jun 6, 2013 at 10:57 PM, Julien Ponge notifications@github.comwrote:

> I guess we can wait for the 2.4.0 release, see
> https://issues.apache.org/jira/browse/FELIX-4005
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/44#issuecomment-19073659
> .

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDczOTM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0MjAz,golo-lang,19074203,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T21:07:14Z,2013-06-06T21:07:14Z,"Meanwhile you can try the branch in the pull-request.

Does the metadata work for your needs?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDc0MjAz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDk2Njg4,golo-lang,19096688,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-07T09:14:53Z,2013-06-07T09:14:53Z,"Seems to me that the OSGI metadata is correct. I will try it in an OSGI container
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDk2Njg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAwNDIx,golo-lang,19100421,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-07T10:53:22Z,2013-06-07T10:53:22Z,"I did a first test inside Eclipse where I added golo and ASM 4.1 to my Eclipse test configuration and both bundles where successfully loaded. I will continue with a simple plugin using the golo classes
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAwNDIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAyMjg2,golo-lang,19102286,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-07T11:42:22Z,2013-06-07T11:42:22Z,"Did a test with a simple OSGI bundle and the Golo class loader. 
The following code in the activator start method:
        GoloClassLoader cl = new GoloClassLoader(Activator.class.getClassLoader());
        InputStream is = Activator.class.getResourceAsStream(""echo-args.golo"");
        Class<?> clazz = cl.load(""test.golo"", is);
        Method m = clazz.getMethod(""main"", Object.class);
        Object parms = new String[] {""first"", ""second""};
        m.invoke(null, parms);

leads to:

osgi> With a for loop and an index:
  #0 -> first
  #1 -> second
With a foreach loop:
  first
  second
With a foreach over a range:
  #0 -> first
  #1 -> second

in the OSGI console
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAyMjg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAyMzQ4,golo-lang,19102348,44,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-06-07T11:44:01Z,2013-06-07T11:44:01Z,"OSGI meta data seems ok but should be fine to add OSGI directive

Bundle-RequiredExecutionEnvironment: JavaSE-1.7

as Golo requires at least 1.7
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTAyMzQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTA1OTEx,golo-lang,19105911,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-07T13:13:14Z,2013-06-07T13:13:14Z,"Good point, see 4f451238f6933dc4e97e3999eb419460bae785b4
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTA1OTEx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/44,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5Mzk2MTUy,golo-lang,19396152,44,NA,jponge,25961,Julien Ponge,,NA,2013-06-13T14:42:15Z,2013-06-13T14:42:15Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5Mzk2MTUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/45,https://api.github.com/repos/eclipse-archived/golo-lang/issues/45,golo-lang,15222364,45,Call functions on expressions,jponge,25961,Julien Ponge,,CLOSED,2013-06-06T13:28:52Z,2013-10-11T07:22:51Z,"Expressions should be evaluable as functions. This currently does not work:

```
let f = -> |x| -> x + 1
f()(1)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/45/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/45,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTIwNTYw,golo-lang,25920560,45,NA,jponge,25961,Julien Ponge,,NA,2013-10-08T19:36:19Z,2013-10-08T19:36:19Z,"See #88 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTIwNTYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,golo-lang,15241892,46,goloc and OperatorSupport : java.lang.NoClassDefFoundError,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-06-06T19:55:23Z,2013-06-19T06:46:39Z,"i compile a golo library  : `goloc -output classes 42.golo`

```
module org.fortytwo.H2G2

function hello = |name| {
    let r = ""Hello "" + name
    return r
}
```

when i use it with java :

```
System.out.println(hello(""Bobby""));
```

i've got an error :

```
Exception in thread ""main"" java.lang.NoClassDefFoundError: fr/insalyon/citi/golo/runtime/OperatorSupport
at org.fortytwo.H2G2.hello(42.golo)
at Main.main(Main.java:8)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:601)
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.ClassNotFoundException: fr.insalyon.citi.golo.runtime.OperatorSupport
at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
... 7 more
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwMDE1,golo-lang,19070015,46,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T19:56:46Z,2013-06-06T19:56:46Z,"Put the Golo Jar in your classpath :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwMDE1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwMjM0,golo-lang,19070234,46,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-06-06T20:00:37Z,2013-06-06T20:00:37Z,"hum hum 

with this, no error :

```
function hello = |name| {
    let r = ""Hello ""
    return r
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwMjM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwNDIy,golo-lang,19070422,46,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-06-06T20:03:39Z,2013-06-06T20:03:39Z,"ok with Golo jar (I thought I could make standalone libraries)
sorry
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwNDIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/46,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwNTAw,golo-lang,19070500,46,NA,jponge,25961,Julien Ponge,,NA,2013-06-06T20:05:01Z,2013-06-06T20:05:01Z,"It is because in that case the bytecode is free from any Golo runtime class (no function call, no operator, etc).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDcwNTAw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,golo-lang,16258057,58,Helpers for incremental compilers,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,CLOSED,2013-07-02T10:43:38Z,2013-10-04T08:59:15Z,"as I am implementing automatic Golo compilation in GLDT, I need to implement incremental compilation. In order to do it, I need get from the Golo file name the name of the generated files. The current Golo compiler exports compilation results as a separate object which is fine but the mapping from this compilation result to the corresponding target file is hidden into the Golo compiler. Would it be possible to export a function/method that exposes it to the outside world ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDQwNjg4,golo-lang,20440688,58,NA,jponge,25961,Julien Ponge,,NA,2013-07-03T19:49:37Z,2013-07-03T19:49:37Z,"If you have the AST then you can deduce the generated files for a `.golo` file: a class for the module, a class per augmentation, etc. I am unsure about the usefulness in the Golo codebase.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDQwNjg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDQ0MzQ1,golo-lang,20444345,58,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-07-03T20:53:12Z,2013-07-03T20:53:12Z,"I will be working at the compiler level. Your explanation means that we need to be aware of the compiler and Golo runtime internals (guessing the class name of a module is quite simple, for an augmentation is not that simple). Would'nt it be possible to add a function that give the target file path to the Golo compiler result 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDQ0MzQ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDY2NDYy,golo-lang,20466462,58,NA,jponge,25961,Julien Ponge,,NA,2013-07-04T09:00:53Z,2013-07-04T09:00:53Z,"The name mangling is quite simple :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNDY2NDYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjUxNTA4,golo-lang,25651508,58,NA,jponge,25961,Julien Ponge,,NA,2013-10-03T19:41:28Z,2013-10-03T19:41:28Z,"Jeff, I'm realising that this somehow slipped down under the radar... Do you still have the issue? How can we move forward?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjUxNTA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjgzNDA3,golo-lang,25683407,58,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2013-10-04T08:32:51Z,2013-10-04T08:32:51Z,"Yes, I duplicated the quite simple algorithm in GLDT. I thought you closed it before 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjgzNDA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/58,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Njg0NjI2,golo-lang,25684626,58,NA,jponge,25961,Julien Ponge,,NA,2013-10-04T08:59:15Z,2013-10-04T08:59:15Z,"Thanks Jeff!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Njg0NjI2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,golo-lang,16406324,59,List#sort() clash in Java 8,jponge,25961,Julien Ponge,,CLOSED,2013-07-05T14:47:09Z,2015-06-30T13:52:10Z,"The standard augmentations contain `sort()`. Java 8 is adding this method, too, hence we need to rename it to avoid clashes.

This causes test failures in `gololang.StandardAugmentationsTest` when run under a recent build of OpenJDK 8:
- `list_sort`
- `list_sort_reverse`
- `list_sorted`
- `list_sorted_reverse`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTIzMzc0,golo-lang,20523374,59,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-05T15:04:15Z,2013-07-05T15:04:15Z,"order / ordered
???
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTIzMzc0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI1ODQ3,golo-lang,20525847,59,NA,ludoch,80077,Ludovic Champenois,ludovic.champenois@gmail.com,NA,2013-07-05T15:54:38Z,2013-07-05T15:54:38Z,"File a bug on openjdk8 that should adapt to Golo...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI1ODQ3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI1OTk3,golo-lang,20525997,59,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-05T15:57:44Z,2013-07-05T15:57:44Z,"+1000
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI1OTk3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI2NTg0,golo-lang,20526584,59,NA,jponge,25961,Julien Ponge,,NA,2013-07-05T16:07:51Z,2013-07-05T16:07:51Z,"@ludoch yeah! :beers: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI2NTg0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI2NzAw,golo-lang,20526700,59,NA,jponge,25961,Julien Ponge,,NA,2013-07-05T16:10:05Z,2013-07-05T16:10:05Z,"@k33g maybe I can have a small runtime modification that lets the target method search pass through. If it gets hack-ish we'll do a renaming.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTI2NzAw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUwMTI3,golo-lang,20550127,59,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-06T06:54:25Z,2013-07-06T06:54:25Z,"@jponge these augmentations aren't essential. Perhaps we can delete them 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUwMTI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxNTI2,golo-lang,20551526,59,NA,jponge,25961,Julien Ponge,,NA,2013-07-06T09:06:31Z,2013-07-06T09:06:31Z,"Digging into the issue the most elegant fix is probably to rename to `order` / `ordered`:

``` diff

diff --git a/src/main/golo/standard-augmentations.golo b/src/main/golo/standard-augmentations.golo
index eca3864..d5419dd 100644
--- a/src/main/golo/standard-augmentations.golo
+++ b/src/main/golo/standard-augmentations.golo
@@ -208,26 +208,26 @@ augment java.util.List {
     return reversedList: reverse()
   }

-  function sort = |this| {
+  function order = |this| {
     java.util.Collections.sort(this)
     return this
   }

-  function sorted = |this| {
+  function ordered = |this| {
     let sortedList = this: newWithSameType()
     sortedList: addAll(this)
-    return sortedList: sort()
+    return sortedList: order()
   }

-  function sort = |this, comparator| {
+  function order = |this, comparator| {
     java.util.Collections.sort(this, comparator)
     return this
   }

-  function sorted = |this, comparator| {
+  function ordered = |this, comparator| {
     let sortedList = this: newWithSameType()
     sortedList: addAll(this)
-    return sortedList: sort(comparator)
+    return sortedList: order(comparator)
   }
 }

diff --git a/src/test/resources/for-test/bootstrapped-standard-augmentations.golo b/src/test/resources/for-test/bootstrapped-standard-augmentations.golo
index 2c1885a..4f3ab3e 100644
--- a/src/test/resources/for-test/bootstrapped-standard-augmentations.golo
+++ b/src/test/resources/for-test/bootstrapped-standard-augmentations.golo
@@ -50,19 +50,19 @@ function list_reversed = {
 }

 function list_sort = {
-  return list_data(): sort()
+  return list_data(): order()
 }

 function list_sorted = {
-  return list_data(): sorted()
+  return list_data(): ordered()
 }

 function list_sort_reverse = {
-  return list_data(): sort(java.util.Collections.reverseOrder())
+  return list_data(): order(java.util.Collections.reverseOrder())
 }

 function list_sorted_reverse = {
-  return list_data(): sorted(java.util.Collections.reverseOrder())
+  return list_data(): ordered(java.util.Collections.reverseOrder())
 }

 # ............................................................................................... #
```

Agreed?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxNTI2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxNjg3,golo-lang,20551687,59,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-06T09:22:09Z,2013-07-06T09:22:09Z,"Yep
Le 6 juil. 2013 11:06, ""Julien Ponge"" notifications@github.com a écrit :

> Digging into the issue the most elegant fix is probably to rename to order/
> ordered:
> 
> diff --git a/src/main/golo/standard-augmentations.golo b/src/main/golo/standard-augmentations.goloindex eca3864..d5419dd 100644--- a/src/main/golo/standard-augmentations.golo+++ b/src/main/golo/standard-augmentations.golo@@ -208,26 +208,26 @@ augment java.util.List {
>      return reversedList: reverse()
>    }
> -  function sort = |this| {+  function order = |this| {
>    java.util.Collections.sort(this)
>    return this
>   }
> -  function sorted = |this| {+  function ordered = |this| {
>    let sortedList = this: newWithSameType()
>    sortedList: addAll(this)-    return sortedList: sort()+    return sortedList: order()
>   }
> -  function sort = |this, comparator| {+  function order = |this, comparator| {
>    java.util.Collections.sort(this, comparator)
>    return this
>   }
> -  function sorted = |this, comparator| {+  function ordered = |this, comparator| {
>    let sortedList = this: newWithSameType()
>    sortedList: addAll(this)-    return sortedList: sort(comparator)+    return sortedList: order(comparator)
>   }
>   }
>   diff --git a/src/test/resources/for-test/bootstrapped-standard-augmentations.golo b/src/test/resources/for-test/bootstrapped-standard-augmentations.goloindex 2c1885a..4f3ab3e 100644--- a/src/test/resources/for-test/bootstrapped-standard-augmentations.golo+++ b/src/test/resources/for-test/bootstrapped-standard-augmentations.golo@@ -50,19 +50,19 @@ function list_reversed = {
>   }
>   
>   function list_sort = {-  return list_data(): sort()+  return list_data(): order()
>   }
>   
>   function list_sorted = {-  return list_data(): sorted()+  return list_data(): ordered()
>   }
>   
>   function list_sort_reverse = {-  return list_data(): sort(java.util.Collections.reverseOrder())+  return list_data(): order(java.util.Collections.reverseOrder())
>   }
>   
>   function list_sorted_reverse = {-  return list_data(): sorted(java.util.Collections.reverseOrder())+  return list_data(): ordered(java.util.Collections.reverseOrder())
>   }
>   
>   # ...............................................................................................
> 
> Agreed?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/59#issuecomment-20551526
> .
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxNjg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxOTMw,golo-lang,20551930,59,NA,jponge,25961,Julien Ponge,,NA,2013-07-06T09:44:14Z,2013-07-06T09:44:14Z,"Fixed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUxOTMw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/59,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUyMTU4,golo-lang,20552158,59,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-07-06T10:05:19Z,2013-07-06T10:05:19Z,"Cool, then i'm going to have a drink ...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwNTUyMTU4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/62,https://api.github.com/repos/eclipse-archived/golo-lang/issues/62,golo-lang,16517182,62,"Handle "" in template delimiter bounds",jponge,25961,Julien Ponge,,CLOSED,2013-07-09T10:13:52Z,2015-06-30T13:52:10Z,"Golo templates currently have an issue with code such as:

```
<a href=""<%= plop %>"">Plop</a>
```

because the template splits into strings that have `""` at their bounds. Combined with the fact that the template engine renders template elements in multiline strings (`""""""`), it yields parser errors.

A fix would be to look at template text substrings, and have special handling when they start and/or end with `""`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/62/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/65,https://api.github.com/repos/eclipse-archived/golo-lang/issues/65,golo-lang,17335231,65,Subscript operators for collections,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-07-29T11:44:25Z,2013-09-29T17:05:55Z,"Long live collection literals!!!  Next improvement could be **subscript operators** cause they are so handy!

There is a Spec:

```
let list = [1, 2, 3]
require(list[0] is 1)
require(list[1] is 2)
require(list[3] is 3)

let map = [[""a"", 1], [""b"",2]]
require(map[""a""] is 1) 
require(map[""b""] is 2) 
```

What's youre thoughts on that?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/65/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/65,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNzE1NzAy,golo-lang,21715702,65,NA,jponge,25961,Julien Ponge,,NA,2013-07-29T12:14:28Z,2013-07-29T12:14:28Z,"Just looking at your example, you would have parsing issues :wink: (`list[ ... ]`, `map[...]`).

I think we are fine with method calls rather than having a special syntax support for these, so I won't put efforts into that, which translates as ""pull requests welcome"" :tada: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNzE1NzAy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/65,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNzE2OTI0,golo-lang,21716924,65,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-07-29T12:41:19Z,2013-07-29T12:41:19Z,"In fact I'm very interested by the compilation process but i'm a newbie :sweat: Nevertheless I definitively want to give it a try. 

i've already tried but I'm lose myself in the packages/classses, javaCC stuff. 
Could you documentate it a bit
- what are the steps/phasis. 
- What each package is aimed for 

Just a first shot, I may be able to complete. It could be use for further black magic newbies :imp: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNzE2OTI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/65,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxODE4OTQ1,golo-lang,21818945,65,NA,jponge,25961,Julien Ponge,,NA,2013-07-30T20:09:28Z,2013-07-30T20:09:28Z,"@danielpetisme It's obviously hard to explain at length, and it requires that you spend some time figuring out things by yourself.

Your mileage varies depending on how much impact your change has.

You may look into @franckverrot recent changes to support underscores. As it was a parser-only change, he could go fine without touching the internal representation and bytecode generation.

You should look at closed pull requests that had both syntax and generation impact. Structs and collection literals are good examples I think. Look at the steps in each commit as the evolution builds up (I didn't squash the commits on purpose, so that folks can dissect the steps).

In general, steps for coding / testing a _full stack change_ are grossly as follows.
1. Tweak the grammar, ensure it has no ambiguities when `mvn generate-sources` runs. Also, you **need** to understand what a LL(k) parser is.
2. Add a test case for the parser. See what happens with `rake test:parser`. Check that you move JavaCC-generated files into the main source tree. Reformat so that it looks good, has a `toString()` method, etc.
3. Play with the impact from the parser AST tree to Golo IR model. Sometimes you may need new types in the IR model, sometimes not. Avoid if you can. The AST -> IR transformation happens in a single tree walk.
4. Have fun with `rake test:visitors`.
5. Have fun with `rake test:run` (add tests to run whole pieces of Golo code).

I may have missed some steps, and it largely depends on the feature you need to implement. 

Also, don't rely too much on tests based on Golo source code for runtime code changes, and push as much as you can to straight tests to the runtime classes. It is pretty much like writing tons of (brittle by nature) Selenium tests while you could do much better at the controller level in a webapp.

Hope it helps.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxODE4OTQ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/66,https://api.github.com/repos/eclipse-archived/golo-lang/issues/66,golo-lang,17569909,66,for back to school ... : parser ,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-08-02T16:45:50Z,2013-09-04T16:57:36Z,"if, then, ... are keywords, ok. But it would be nice if we could use them as ""personal"" functions to do something like that :

```
module verbalexpression

struct verEx = { foo }

augment verbalexpression.types.verEx {
    function find = |z| {
        #foo
    }

    function then = |z| {
        #foo
    }
}

function main = |args| {
    let tester = verEx():find(""bob""):then(""morane"")
}
```

I do not want to write `Then`, it's less beautiful than `then`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/66/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/66,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMDIxNzM4,golo-lang,22021738,66,NA,jponge,25961,Julien Ponge,,NA,2013-08-02T17:43:47Z,2013-08-02T17:43:47Z,"Play with escaping :wink:

On Fri, Aug 2, 2013 at 6:45 PM, Philippe CHARRIERE
notifications@github.com wrote:

> if, then, ... are keywords, ok. But it would be nice if we could use them as ""personal"" functions to do something like that :
>   module verbalexpression
>   struct verEx = { foo }
>   augment verbalexpression.types.verEx {
>       function find = |z| {
>           #foo
>       }
>       function then = |z| {
>           #foo
>       }
>   }
>   function main = |args| {
>       let tester = verEx():find(""bob""):then(""morane"")
>   }
> 
> ## I do not want to write `Then`, it's less beautiful than `then`
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/golo-lang/golo-lang/issues/66
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMDIxNzM4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/66,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMDI0MzYw,golo-lang,22024360,66,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-08-02T18:27:58Z,2013-08-02T18:27:58Z,":loudspeaker:  mouarf ... 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMDI0MzYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,golo-lang,18835211,70,Bug with recursive closure invocation,jponge,25961,Julien Ponge,,CLOSED,2013-09-01T10:48:24Z,2015-06-30T13:52:10Z,"There is a bug in the code generation when recursive calls are being made on closures, such as:

```
module hello

function main = |args| {
  let fun = |n| {
    println(n)
    fun(n + 1)
  }
}
```

The problem is that the `fun` reference loading needs a partial application of `fun` itself. The generated bytecode is incorrect and breaks the verifier rules (here, a bogus `ALOAD_1`.

A potential fix is to rewrite such recursive calls as function calls, and remove the function name from the captured references.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjIyNjMx,golo-lang,23622631,70,NA,jponge,25961,Julien Ponge,,NA,2013-09-01T10:48:54Z,2013-09-01T10:48:54Z,"cc @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjIyNjMx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjI0MTk0,golo-lang,23624194,70,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-01T12:44:27Z,2013-09-01T12:44:27Z,"i've got that, that runs but it takes a **lot** of time with n = 40

```
let o = DynamicObject():define(""fibonacci"",|this,n| {
   if n <= 1 {
     return n
   } else {
     return this:fibonacci(n - 1) + this:fibonacci(n - 2)
   }
 })
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjI0MTk0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjI0MjE3,golo-lang,23624217,70,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-01T12:45:52Z,2013-09-01T12:45:52Z,"48 seconds with this version against 2 seconds with a more classical ""function call""
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjI0MjE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMxNDk2,golo-lang,23631496,70,NA,jponge,25961,Julien Ponge,,NA,2013-09-01T19:35:10Z,2013-09-01T19:35:10Z,"@k33g Yes, dispatching through dynamic object is much slower, but it is out of the scope of this issue :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMxNDk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMzMDEy,golo-lang,23633012,70,NA,jponge,25961,Julien Ponge,,NA,2013-09-01T21:00:27Z,2013-09-01T21:00:27Z,"You may want to check https://github.com/jponge/golo-lang/tree/wip/fix-closure-self-references as a potential fix.

/cc @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMzMDEy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/70,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMzMjA3,golo-lang,23633207,70,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-01T21:10:22Z,2013-09-01T21:10:22Z,"tested with fibonacci sample and it's ok :+1: 

```
 let fibonacci = |n| {
    if n <= 1 {
      return n
    } else {
      return fibonacci(n - 1) + fibonacci(n - 2)
    }
  }

let start = java.lang.System.currentTimeMillis()
let result = fibonacci(40)
let duration = java.lang.System.currentTimeMillis() - start
println("">>> "" + result + "" (took "" + duration + ""ms)"")
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjMzMjA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/75,https://api.github.com/repos/eclipse-archived/golo-lang/issues/75,golo-lang,19867886,75,A compiled golo program is launched 2 times,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2013-09-22T04:29:22Z,2015-06-30T13:52:10Z,"Modus operandi :

file tryme.golo :

```
module tryme

function main = |arg|{
  println(""HELLO"")
}
```

command : `golo compile --output tryme_classes tryme.golo`

then : 

```
cd tryme_classes
golo run --module tryme
```

and i get :

```
HELLO
HELLO
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/75,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3NjUy,golo-lang,24877652,75,NA,jponge,25961,Julien Ponge,,NA,2013-09-22T07:49:09Z,2013-09-22T07:49:09Z,"Confirmed. It must be on the `run` command side, because the bytecode is 100% correct :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3NjUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/75,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3Njkz,golo-lang,24877693,75,NA,jponge,25961,Julien Ponge,,NA,2013-09-22T07:54:10Z,2013-09-22T07:54:10Z,"That was an epic fail :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3Njkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/75,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3Nzgw,golo-lang,24877780,75,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-22T08:02:27Z,2013-09-22T08:02:27Z,"tested
works fine (thx) :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0ODc3Nzgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,golo-lang,20024182,76,Provide a `golo new` command,jponge,25961,Julien Ponge,,CLOSED,2013-09-25T06:25:19Z,2013-12-09T08:49:40Z,"This command would generate a new project.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/76/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY1ODA1,golo-lang,25065805,76,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-09-25T07:05:14Z,2013-09-25T07:05:14Z,"What do you call a ""new golo"" project? Why not use the standard Maven archetype mechanism?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY1ODA1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY1ODY3,golo-lang,25065867,76,NA,jponge,25961,Julien Ponge,,NA,2013-09-25T07:07:09Z,2013-09-25T07:07:09Z,"You could generate a hello world, a gradle project, or a Maven project.

Even if you generate a Maven project, `golo new hello` is nicer than
the equivalent Maven archetype-based solution :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY1ODY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY2NDgy,golo-lang,25066482,76,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-09-25T07:22:41Z,2013-09-25T07:22:41Z,"IDE already has the Maven archetype generation support... but both solutions can coexist (eg. grails app creation & Maven generation).

Anyway:
- `golo new Hello` would produce a simple Hello.golo file?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY2NDgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY3MDYw,golo-lang,25067060,76,NA,jponge,25961,Julien Ponge,,NA,2013-09-25T07:34:59Z,2013-09-25T07:34:59Z,"It is open, but it could create a structure for it, build support, etc.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY3MDYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/76,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY5MTk0,golo-lang,25069194,76,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-25T08:20:18Z,2013-09-25T08:20:18Z,"i <3 this idea

```
golo new Hello
cd Hello

# tree 
/Hello
|--- main.golo
|--- hello.sh
|--- /imports
    |--- golo files
|---/jars
   |--- jar files
```

:+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDY5MTk0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/79,https://api.github.com/repos/eclipse-archived/golo-lang/issues/79,golo-lang,20076754,79,Strange behavior in varargs in dynamic object methods when capture needed,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-09-25T23:27:24Z,2015-06-30T13:52:10Z,"Remember https://github.com/golo-lang/golo-lang/pull/68
I tried to make the closure capture an object but it fails:

```
 module test

function main = |args| {
  let decorator = "">"" 

  let o = DynamicObject()
  o: define(""fun"", |this, args...| {
    println(""@fun()"")
    foreach arg in args {
      println(""  "" + decorator + arg)
    }
  })
  o: fun(""plop"", ""da"", ""plop"")
  o: fun(""flock"", ""flock"")
  o: fun(""flick"")
  o: fun()
}
```

```
Exception in thread ""main"" java.lang.invoke.WrongMethodTypeException: cannot convert MethodHandle(Object,Object[])Object to (Object,Object,Object,Object)Object
    at java.lang.invoke.MethodHandle.asType(MethodHandle.java:691)
    at java.lang.invoke.InvokeGeneric.dispatch(InvokeGeneric.java:103)
    at java.lang.invoke.InvokeGeneric.dispatchWithConversion(InvokeGeneric.java:117)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:162)
    at test.main(test.golo)
    at fr.insalyon.citi.golo.cli.Main.callRun(Main.java:254)
    at fr.insalyon.citi.golo.cli.Main.golo(Main.java:282)
    at fr.insalyon.citi.golo.cli.Main.main(Main.java:155)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/79/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/79,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTQzOTE3,golo-lang,25143917,79,NA,jponge,25961,Julien Ponge,,NA,2013-09-26T05:03:46Z,2013-09-26T05:03:46Z,"Cool, that is an approachable test case. Will check later. 

Thanks!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTQzOTE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/79,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTQ1MzUz,golo-lang,25145353,79,NA,jponge,25961,Julien Ponge,,NA,2013-09-26T05:59:17Z,2013-09-26T05:59:17Z,"Did a quick check, the problem appears whenever there is a capture:

```
module test

function main = |args| {
  let prefix = ""> ""
  let o = DynamicObject(): define(""f"", |this, args...| {
    println(prefix + args: toString())
  })
  o: f()
  o: f(1)
  o: f(1, 2)
}
```

whereas this has no errors:

```
module test

function main = |args| {
  let o = DynamicObject(): define(""f"", |this, args...| {
    println(args: toString())
  })
  o: f()
  o: f(1)
  o: f(1, 2)
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTQ1MzUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/79,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTUyODY4,golo-lang,25152868,79,NA,jponge,25961,Julien Ponge,,NA,2013-09-26T09:01:40Z,2013-09-26T09:01:40Z,"Looks like you guys have a pull-request to review.

Ping @danielpetisme @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTUyODY4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,golo-lang,20113458,82,Impossible to get properly an Array class type,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-09-26T14:38:13Z,2015-06-30T13:52:10Z,"Silly mistake coming from the lexer (I guess).

```
module array

function main = |args| {
  require(args oftype java.lang.Object[].class, ""Should be an array of object"")
}
```

Output

```
[error] In Golo module: issue-array.golo
[error] Encountered "" <COLL_START> ""[ """" at line 5, column 39.
Was expecting one of:
    ""."" ...
    ""("" ...

[error] Encountered "" ""."" "". """" at line 5, column 41.
...
```

Possible workaround

```
  let array_type = -> java.lang.reflect.Array.newInstance(java.lang.Object.class, 0): getClass()
  require(args oftype ARRAY_TYPE(), ""Should be an array of object"")
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczNDU5,golo-lang,25173459,82,NA,jponge,25961,Julien Ponge,,NA,2013-09-26T14:44:45Z,2013-09-26T14:44:45Z,"You can't write that. We should create a `isArray` function in `gololang.Predefined`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczNDU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczNzQy,golo-lang,25173742,82,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-09-26T14:47:51Z,2013-09-26T14:47:51Z,"It forbids also to use `asVarargsCollector` in golo code....

`myClosure: asVarargsCollector(java.lang.Object[].class)` :confused: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczNzQy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczODkz,golo-lang,25173893,82,NA,jponge,25961,Julien Ponge,,NA,2013-09-26T14:49:59Z,2013-09-26T14:49:59Z,"There is no way to express an array type in Golo.

Anyway we can easily have helper functions.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MTczODkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MjQ1ODM0,golo-lang,25245834,82,NA,jponge,25961,Julien Ponge,,NA,2013-09-27T13:44:09Z,2013-09-27T13:44:09Z,"I'll make something for it.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MjQ1ODM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Mjc4OTg4,golo-lang,25278988,82,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-09-27T21:34:54Z,2013-09-27T21:34:54Z,"```
function isArray = |this, o| -> o?: getClass()?: isArray() orIfNull false 
```

no?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Mjc4OTg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzIxODg0,golo-lang,25321884,82,NA,jponge,25961,Julien Ponge,,NA,2013-09-29T15:05:36Z,2013-09-29T15:05:36Z,"@k33g that's the idea, but I'm going to make it in `Predefined`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzIxODg0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/82,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzIyNTY3,golo-lang,25322567,82,NA,jponge,25961,Julien Ponge,,NA,2013-09-29T15:47:11Z,2013-09-29T15:47:11Z,"See my proposal in #84.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzIyNTY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/85,https://api.github.com/repos/eclipse-archived/golo-lang/issues/85,golo-lang,20238285,85,"Strange behavior with a closure named ""beforeEach""",danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-09-29T23:29:11Z,2015-06-30T13:52:10Z,"I succeed to shrink the beforeEach issue into a test case:
I pass closures as function arguments but if the argument is named `beforeEach` the code fails. Nevertheless, if you change the arg name it works.

The stacktrace explains that the signature is wrong, in fact during the runtime the `beforeEach` identifier is mapped to the `it` and vice-versa (to check it, uncomment the beforeEach & it and comment the current ones).

```
module weird

local function test = |describe, it, beforeEach| {
  describe(""MySuite"", {
    beforeEach({
      println(""before"")
    })
    #beforeEach(""False it"", { println(""before"") })

    it(""MyTest"", {
      println(""it"")
    })
    #it( { println(""before"") })
  })
}

function main = |args| {

  let describeFn = |description, specifications| {
    println(""Describe "" + description + "" "" + specifications)
    specifications()
  }

  let itFn = |description, fn| {
    println(""It "" + description + "" "" + fn)
    fn()
  }

  let beforeEachFn = |fn| {
    println(""BeforeEach "" + fn)
    fn()
  }

  test(describeFn, itFn, beforeEachFn)
}
```

Output

```
Describe MySuite MethodHandle()Object
Exception in thread ""main"" java.lang.IllegalArgumentException: target and fallback types must match: (MethodHandle,Object,Object)Object != (MethodHandle,Object)Object
    at java.lang.invoke.MethodHandleStatics.newIllegalArgumentException(MethodHandleStatics.java:102)
    at java.lang.invoke.MethodHandles.misMatchedTypes(MethodHandles.java:2263)
    at java.lang.invoke.MethodHandles.guardWithTest(MethodHandles.java:2247)
    at fr.insalyon.citi.golo.runtime.ClosureCallSupport.fallback(ClosureCallSupport.java:79)
    at weird.__$$_closure_0(weird.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.ClosureCallSupport.fallback(ClosureCallSupport.java:81)
    at weird.__$$_closure_3(weird.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.ClosureCallSupport.fallback(ClosureCallSupport.java:81)
    at weird.test(weird.golo)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:566)
    at fr.insalyon.citi.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:104)
    at weird.main(weird.golo)
    at fr.insalyon.citi.golo.cli.Main.callRun(Main.java:234)
    at fr.insalyon.citi.golo.cli.Main.golo(Main.java:267)
    at fr.insalyon.citi.golo.cli.Main.main(Main.java:138)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/85,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzM4Nzk2,golo-lang,25338796,85,NA,jponge,25961,Julien Ponge,,NA,2013-09-30T05:47:35Z,2013-09-30T05:47:35Z,"Interesting, I will have a look ""when time permits"" :wink:.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzM4Nzk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/85,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzQ3ODQ5,golo-lang,25347849,85,NA,jponge,25961,Julien Ponge,,NA,2013-09-30T09:35:23Z,2013-09-30T09:35:23Z,"Had 5 minutes to play with and did something I contemplated for a long time: using insertion-order preserving sets and maps in the intermediate representation. This makes diagnosis easier, too.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MzQ3ODQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/95,https://api.github.com/repos/eclipse-archived/golo-lang/issues/95,golo-lang,22327439,95,Provide a golo wrapper script with no JVM tuning,jponge,25961,Julien Ponge,,CLOSED,2013-11-08T09:55:44Z,2015-06-30T13:52:10Z,"JVM tuning is great except for environments such as the RaspberryPi where default configuration is better.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,golo-lang,22724878,97,Test access_items_from_subclass failing with hotspot build 1.7.0_45-b18,coupelon,4260276,,,CLOSED,2013-11-15T10:37:15Z,2015-06-30T13:52:10Z,"Hi,

There seem to be a problem with the test 'access_items_from_subclass' under hotspot build 1.7.0_45-b18, linux 64bit version, with the latest build b2643b645b33b2f36868d1951693d39fa465f629
The test is the only one to fail, producing the following error :

```
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Configuring TestNG with: TestNG652Configurator
>>> 5
Tests run: 317, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.289 sec <<< FAILURE!
test_method_invocations(fr.insalyon.citi.golo.compiler.CompileAndRunTest)  Time elapsed: 0.03 sec  <<< FAILURE!
java.lang.reflect.InvocationTargetException: null
    at java.lang.invoke.MethodHandleStatics.newIllegalArgumentException(MethodHandleStatics.java:113)
    at java.lang.invoke.MemberName.getMethodType(MemberName.java:125)
    at java.lang.invoke.DirectMethodHandle.<init>(DirectMethodHandle.java:58)
    at java.lang.invoke.DirectMethodHandle.<init>(DirectMethodHandle.java:47)
    at java.lang.invoke.DirectMethodHandle$StaticAccessor.<init>(DirectMethodHandle.java:439)
    at java.lang.invoke.DirectMethodHandle$StaticAccessor.<init>(DirectMethodHandle.java:432)
    at java.lang.invoke.DirectMethodHandle.make(DirectMethodHandle.java:85)
    at java.lang.invoke.MethodHandles$Lookup.getDirectField(MethodHandles.java:1299)
    at java.lang.invoke.MethodHandles$Lookup.unreflectField(MethodHandles.java:993)
    at java.lang.invoke.MethodHandles$Lookup.unreflectGetter(MethodHandles.java:985)
    at fr.insalyon.citi.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:100)
    at golotest.execution.MethodInvocations.access_items_from_subclass(method-invocations.golo:53)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at fr.insalyon.citi.golo.compiler.CompileAndRunTest.test_method_invocations(CompileAndRunTest.java:568)


Results :

Failed tests: 
  CompileAndRunTest.test_method_invocations:568 » InvocationTarget

Tests run: 317, Failures: 1, Errors: 0, Skipped: 0
```

Commenting it, the rest passes with no errors.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYwODg3,golo-lang,28560887,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T10:47:24Z,2013-11-15T10:47:24Z,"Sounds fun :-)

Is that an OpenJDK?

Can you put a try/catch around the method to get the exception nested within InvocationTargetException?

Cheers
- Julien
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYwODg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYxNjIz,golo-lang,28561623,97,NA,coupelon,4260276,,,NA,2013-11-15T11:02:01Z,2013-11-15T11:02:01Z,"No, that's Oracle's Hotspot JVM v1.7.0_45.

Here is the 'caused by' caught within a try catch block :

```
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at fr.insalyon.citi.golo.compiler.CompileAndRunTest.test_method_invocations(CompileAndRunTest.java:569)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
    at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
    at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
    at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
    at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
    at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
    at org.testng.TestRunner.privateRun(TestRunner.java:767)
    at org.testng.TestRunner.run(TestRunner.java:617)
    at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
    at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
    at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
    at org.testng.SuiteRunner.run(SuiteRunner.java:240)
    at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
    at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
    at org.testng.TestNG.run(TestNG.java:1057)
    at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
    at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:189)
    at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:105)
    at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:117)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray2(ReflectionUtils.java:208)
    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:159)
    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:87)
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:95)
Caused by: java.lang.IllegalArgumentException: not invocable, no method type
    at java.lang.invoke.MethodHandleStatics.newIllegalArgumentException(MethodHandleStatics.java:113)
    at java.lang.invoke.MemberName.getMethodType(MemberName.java:125)
    at java.lang.invoke.DirectMethodHandle.<init>(DirectMethodHandle.java:58)
    at java.lang.invoke.DirectMethodHandle.<init>(DirectMethodHandle.java:47)
    at java.lang.invoke.DirectMethodHandle$StaticAccessor.<init>(DirectMethodHandle.java:439)
    at java.lang.invoke.DirectMethodHandle$StaticAccessor.<init>(DirectMethodHandle.java:432)
    at java.lang.invoke.DirectMethodHandle.make(DirectMethodHandle.java:85)
    at java.lang.invoke.MethodHandles$Lookup.getDirectField(MethodHandles.java:1299)
    at java.lang.invoke.MethodHandles$Lookup.unreflectField(MethodHandles.java:993)
    at java.lang.invoke.MethodHandles$Lookup.unreflectGetter(MethodHandles.java:985)
    at fr.insalyon.citi.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:100)
    at golotest.execution.MethodInvocations.access_items_from_subclass(method-invocations.golo:53)
    ... 39 more
```

Then is is a 'not invocable, no method type'. 

The modification i made to the test to get that  : 

```
    try {
      Method access_items_from_subclass = moduleClass.getMethod(""access_items_from_subclass"");
      access_items_from_subclass.invoke(null);
    } catch (InvocationTargetException e) {
      e.printStackTrace();
    }
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYxNjIz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYxNzUz,golo-lang,28561753,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T11:05:05Z,2013-11-15T11:05:05Z,"Waaaa, it's not crystal clear :-)
- Julien
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYxNzUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzNjY2,golo-lang,28563666,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T11:45:59Z,2013-11-15T11:45:59Z,"In `src/test/resources/for-execution/method-invocations.golo`, could you insert `println` statements to isolate the faulty line in the `access_items_from_subclass` function?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzNjY2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzODI4,golo-lang,28563828,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T11:49:42Z,2013-11-15T11:49:42Z,"What's your Git branch BTW? `master`?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzODI4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzOTg2,golo-lang,28563986,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T11:53:31Z,2013-11-15T11:53:31Z,"Oh, the joy: http://mail.openjdk.java.net/pipermail/serviceability-dev/2013-March/008897.html
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTYzOTg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY2NjEx,golo-lang,28566611,97,NA,coupelon,4260276,,,NA,2013-11-15T12:49:46Z,2013-11-15T12:49:46Z,"Yes that was on master. So I think that bug can be closed since it's not a Golo one :-) But that's unfortunate since it applies to the latest hotspot jdk7...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY2NjEx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/97,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTcxMDMx,golo-lang,28571031,97,NA,jponge,25961,Julien Ponge,,NA,2013-11-15T14:09:15Z,2013-11-15T14:09:15Z,"Just tried on the latest Java 8 EA and it is fine:

```
$ java -version
java version ""1.8.0-ea""
Java(TM) SE Runtime Environment (build 1.8.0-ea-b115)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b57, mixed mode)
```

From what I see in your stack trace the problem seems to be a static field invocation, but this is clearly a VM bug.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTcxMDMx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/99,https://api.github.com/repos/eclipse-archived/golo-lang/issues/99,golo-lang,22902046,99,Bash completion,jponge,25961,Julien Ponge,,CLOSED,2013-11-19T10:42:24Z,2013-12-11T09:27:35Z,"Bash completion for the `golo` command line interface would be very useful.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,golo-lang,23184645,100,Generate a Java compliant main method signature,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-11-23T09:31:43Z,2013-12-08T17:38:16Z,"If a user try to run compiled Golo module with a `main` method with the Java command , it won't work.

`java` is looking for a method with the following signature:
`public static void main(String[] args)`

Golo bytecode generation strategy is the same for all the Golo functions. The bytecode generated for the main is:
`public static java.lang.Object main(java.lang.Object)`

It would be nice to make Golo main modules 100% Java compliant by generating the appropriate signature for the main method.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTQ5ODc3,golo-lang,29149877,100,NA,jponge,25961,Julien Ponge,,NA,2013-11-24T06:25:58Z,2013-11-24T06:25:58Z,"I've tagged this as `backlog`. It's an easy fix for someone to grab :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTQ5ODc3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjQ5NDQx,golo-lang,29249441,100,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-11-25T22:31:34Z,2013-11-25T22:31:34Z,"Silly question, why there is a forced return statement insertion in the function IR construction ?
https://github.com/golo-lang/golo-lang/blob/master/src/main/java/fr/insalyon/citi/golo/compiler/ParseTreeToGoloIrVisitor.java#L220

If I'm right, every function as a return bytecode generated even if they do not return anything.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjQ5NDQx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY4OTQy,golo-lang,29268942,100,NA,jponge,25961,Julien Ponge,,NA,2013-11-26T05:44:58Z,2013-11-26T05:44:58Z,"1. To keep the stack consistent, and
2. To align Golo with the handling of `void` in JSR 292.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY4OTQy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY5MDA2,golo-lang,29269006,100,NA,jponge,25961,Julien Ponge,,NA,2013-11-26T05:47:03Z,2013-11-26T05:47:03Z,"BTW every method returns on the JVM. We could `RETURN` instead of `ARETURN` in such cases, but the method handles plumbing would still box a `null`...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY5MDA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc0Njg4,golo-lang,29274688,100,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-11-26T08:28:34Z,2013-11-26T08:28:34Z,"So it's not possible to generate a method which a `void` return type? Java detects a mismatch between the return code and the actual return statement.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc0Njg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/100,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc3OTQ2,golo-lang,29277946,100,NA,jponge,25961,Julien Ponge,,NA,2013-11-26T09:27:21Z,2013-11-26T09:27:21Z,"You could return `void` in theory, but no matter what `invokedynamic` converts void to `null`.

When dealing with Golo from Java, you see a `Object` return type, and you just have to know that such functions return `null`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc3OTQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,golo-lang,23250117,101,Java 8 lambda interoperability,jponge,25961,Julien Ponge,,CLOSED,2013-11-25T15:40:28Z,2015-06-30T13:52:10Z,"Java 8 lambdas are being created using `java.lang.invoke.LambdaMetafactory`.

Golo can already convert functions to SAM interfaces, but full Java 8 lambda interoperability uses a more complex  creation process because of, say, default methods.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/101/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NTIxNjU0,golo-lang,47521654,101,NA,jponge,25961,Julien Ponge,,NA,2014-06-30T11:38:52Z,2014-06-30T11:38:52Z,"We'll need to see if we can do it all in the runtime with Java 7 bytecode and dynamic Java 8 detection.

Otherwise we'll have to bump to Java 8 bytecode, which will cause a major version bump in semantic versioning.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NTIxNjU0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTA5NDAz,golo-lang,51909403,101,NA,jponge,25961,Julien Ponge,,NA,2014-08-12T12:53:26Z,2014-08-12T12:53:26Z,"https://github.com/TypeUnsafe/late-bound could be used to support both Java 7 and 8. In that case the Java 8 specific code would be part of a sub-project compiled against Java 8.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxOTA5NDAz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MDIxOTUw,golo-lang,85021950,101,NA,jponge,25961,Julien Ponge,,NA,2015-03-23T14:25:24Z,2015-03-23T14:25:24Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MDIxOTUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/101,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MTI1Nzg2,golo-lang,85125786,101,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-23T18:03:57Z,2015-03-23T18:03:57Z,"\o/
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1MTI1Nzg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/108,https://api.github.com/repos/eclipse-archived/golo-lang/issues/108,golo-lang,23893528,108,Build failure on Windows (documentation),ggrossetie,333276,Guillaume Grossetie,,CLOSED,2013-12-06T23:47:01Z,2015-06-30T13:52:10Z,"I'm a bit ashamed to report this issue... but yes sometimes I use Windows :smile: 

```
[INFO] --- golo-maven-plugin:0-preview10-SNAPSHOT:goloc (goloc) @ golo ---
[INFO] Compiling to: target/classes
[INFO] Compiling: src\main\golo\standard-augmentations.golo
[ERROR] Encountered "" <COMMUTATIVE_OPERATOR> ""- """" at line 19, column 1.
Was expecting one of:
    ""\n"" ...
    ""module"" ...
    <COMMENT> ...
    <DOCUMENTATION> ...
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/108,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDg1Nzgz,golo-lang,30085783,108,NA,jponge,25961,Julien Ponge,,NA,2013-12-08T17:10:32Z,2013-12-08T17:10:32Z,"Heretic! :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDg1Nzgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/108,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDkzNjI5,golo-lang,30093629,108,NA,ggrossetie,333276,Guillaume Grossetie,,NA,2013-12-08T21:40:23Z,2013-12-08T21:40:23Z,"Thanks :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDkzNjI5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/110,https://api.github.com/repos/eclipse-archived/golo-lang/issues/110,golo-lang,23931056,110,Token not always returned in problem (compiler exception),jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,CLOSED,2013-12-08T21:01:00Z,2013-12-09T13:56:00Z,"When a semantic error is detected by the compiler, the problem associated with the compiler exception does not have a token so it is not possible to find the location in the source code. GLDT and other IDEs only have the option to signal the error in line 1
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/110/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/114,https://api.github.com/repos/eclipse-archived/golo-lang/issues/114,golo-lang,24186199,114,Token offset not managed,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,CLOSED,2013-12-12T15:37:32Z,2015-06-30T13:52:10Z,"Token generated by the parser have a startOffset and endOffset fields but these are not managed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/114/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,golo-lang,24199025,116,Add a fallback helper method for DynamicObject,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2013-12-12T18:44:05Z,2015-06-30T13:52:10Z,"Thanks @k33g you remember me this one ;)

The `fallback` helper method would act as a default fallback for method invocation on a DynOb. 

Usecases:
- DSLs
- object adaptation to its context

Thoughts?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/116/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDYxODMw,golo-lang,30461830,116,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2013-12-12T21:07:19Z,2013-12-12T21:07:19Z,"""very TypeUnsafe"" ;) i <3 that
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDYxODMw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDYyNjgz,golo-lang,30462683,116,NA,jponge,25961,Julien Ponge,,NA,2013-12-12T21:17:40Z,2013-12-12T21:17:40Z,"""I'll leave that to you as an exercise.""
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDYyNjgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDkxNTAz,golo-lang,30491503,116,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2013-12-13T07:31:45Z,2013-12-13T07:31:45Z,"Thanks Prof ;)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDkxNTAz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/116,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMTY5OTE2,golo-lang,32169916,116,NA,jponge,25961,Julien Ponge,,NA,2014-01-13T13:44:11Z,2014-01-13T13:44:11Z,"Done by @danielpetisme :beers: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMTY5OTE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/120,https://api.github.com/repos/eclipse-archived/golo-lang/issues/120,golo-lang,24353504,120,Port the micro-benchmarks to OpenJDK JMH,jponge,25961,Julien Ponge,,CLOSED,2013-12-16T14:47:41Z,2015-06-30T13:52:10Z,"The benchmark suite is currently using JUnitBenchmarks.

[OpenJDK JMH](http://openjdk.java.net/projects/code-tools/jmh/) provides better accuracy and programming model in the context of rigorous scientific evaluations.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/120/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/120,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMTY5ODcw,golo-lang,32169870,120,NA,jponge,25961,Julien Ponge,,NA,2014-01-13T13:43:32Z,2014-01-13T13:43:32Z,"I'm working on this.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMTY5ODcw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/120,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDY0MzM4,golo-lang,32464338,120,NA,jponge,25961,Julien Ponge,,NA,2014-01-16T12:22:15Z,2014-01-16T12:22:15Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDY0MzM4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/123,https://api.github.com/repos/eclipse-archived/golo-lang/issues/123,golo-lang,26781165,123,Inconsistency in Newline Causing Build Test to Fail on Windows,chrants,4203662,Christian Tschoepe,tschoepe.christian@gmail.com,CLOSED,2014-02-03T05:02:34Z,2015-06-30T13:52:10Z,"There is an inconsistency that is causing a test to fail on Windows.

`fr.insalyon.citi.golo.compiler.CompileAndRunTest.java` and `org.hamcrest.MatcherAssert.java` (shown in the below screenshot).

![screenshot 2014-02-02 22 56 13](https://f.cloud.github.com/assets/4203662/2062501/88a22b30-8c8f-11e3-8587-7afa16fdccd2.png)

After I hacked the source of  `CompileAndTestRun.java` into expecting a newline, consistent with what `MatcherAssert.java` was expecting, it built successfully (meaning that it's not consistent on Windows by default and this is the only issue preventing builds on windows).

![screenshot 2014-02-02 22 53 42](https://f.cloud.github.com/assets/4203662/2062492/327930c8-8c8f-11e3-88fe-7da15bd79bd7.png)

Note:
*_OS: *_ Windows 8 x64
*_Java: *_ JDK 8 ea
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/123,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTQwNjI0,golo-lang,33940624,123,NA,jponge,25961,Julien Ponge,,NA,2014-02-03T10:46:35Z,2014-02-03T10:46:35Z,"Do you have Git line ending conversions on? (https://help.github.com/articles/dealing-with-line-endings)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTQwNjI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/123,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTQwODgz,golo-lang,33940883,123,NA,jponge,25961,Julien Ponge,,NA,2014-02-03T10:50:14Z,2014-02-03T10:50:14Z,"Ah I got it, the `String.format()` is platform-dependent.

Can you confirm that just the hardcoded `""This is\n*awesome*""` string passes the test on Windows? (without a `String.format` like what you have in your code)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzOTQwODgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/123,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MDI2NDY5,golo-lang,34026469,123,NA,chrants,4203662,Christian Tschoepe,tschoepe.christian@gmail.com,NA,2014-02-04T03:02:05Z,2014-02-04T03:02:05Z,"Yes
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MDI2NDY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/124,https://api.github.com/repos/eclipse-archived/golo-lang/issues/124,golo-lang,26922140,124,Python-style decorators,jponge,25961,Julien Ponge,,CLOSED,2014-02-04T22:36:27Z,2015-06-30T13:52:10Z,"""Simple, elegant and doable"".
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/124/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/124,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjU3ODI5,golo-lang,42657829,124,NA,jponge,25961,Julien Ponge,,NA,2014-05-09T11:48:43Z,2014-05-09T11:48:43Z,"Marking this as in-progress by @Artpej
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNjU3ODI5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,golo-lang,27252700,125,Support 'private' elements in structs,jponge,25961,Julien Ponge,,CLOSED,2014-02-10T10:00:53Z,2015-06-30T13:52:10Z,"Structs elements are all 'public' with public accessors being provided.

We could have some elements being declared private with access allowed only to functions and augmentations from the declaring module.

Ideas for distinguishing private and public elements:
- by convention (e.g., `_foo`), or
- by syntax (e.g., `local foo`).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODU4OTIy,golo-lang,34858922,125,NA,jponge,25961,Julien Ponge,,NA,2014-02-12T11:09:03Z,2014-02-12T11:09:03Z,"I'm working on this with `_` as a private elements marker.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODU4OTIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODYzNDA1,golo-lang,34863405,125,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-02-12T12:19:55Z,2014-02-12T12:19:55Z,"C++ strikes back :)

Daniel PETISME
+33 (0) 6 69 29 45 55
daniel.petisme@gmail.com

On Wed, Feb 12, 2014 at 12:09 PM, Julien Ponge notifications@github.comwrote:

> I'm working on this with _ as a private elements marker.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/125#issuecomment-34858922
> .
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODYzNDA1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODYzNjA0,golo-lang,34863604,125,NA,jponge,25961,Julien Ponge,,NA,2014-02-12T12:22:53Z,2014-02-12T12:22:53Z,"Do not feed the troll.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODYzNjA0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY2MDIz,golo-lang,34866023,125,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-02-12T12:57:53Z,2014-02-12T12:57:53Z,"the private fields will be maniuplated with methods defined in the Struct augmentation?
Can you give us a use case ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY2MDIz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY2NzI5,golo-lang,34866729,125,NA,jponge,25961,Julien Ponge,,NA,2014-02-12T13:07:26Z,2014-02-12T13:07:26Z,"> the private fields will be maniuplated with methods defined in the Struct augmentation?

Absolutely, and kept private outside the defining module. They won't appear in toString(), members() and values().

> Can you give us a use case ?

It's a Go-style way to encapsulate data. If you couple structs with augmentations, you get a simple object model.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY2NzI5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY3NDUz,golo-lang,34867453,125,NA,jponge,25961,Julien Ponge,,NA,2014-02-12T13:17:37Z,2014-02-12T13:17:37Z,"See https://github.com/jponge/golo-lang/tree/wip/structs-encapsulation

(it's far from finished / tested / whatever)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODY3NDUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcxMDYw,golo-lang,34871060,125,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-02-12T14:03:37Z,2014-02-12T14:03:37Z,"> It's a Go-style way to encapsulate data. If you couple structs with augmentations, you get a simple object model.

So far, I see the augmentation as a _trait_ mechanism. But as everybody as used it as a way to provide behavior to a structure. Is it the appropriate way to implement an Object model?

Pivate fields will be manipulated with augmentations. But the structure is not owner of the augmentations. That means everybody could use it's own augmentations/procedures to manage the private fields? How to handle augmentations collisions?

_NB: I don't know Go, so I don't know how it is managed..._
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcxMDYw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/125,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcxMzg1,golo-lang,34871385,125,NA,jponge,25961,Julien Ponge,,NA,2014-02-12T14:07:37Z,2014-02-12T14:07:37Z,"> Private fields will be manipulated with augmentations. But the structure is not owner of the augmentations. That means everybody could use it's own augmentations/procedures to manage the private fields? How to handle augmentations collisions?

Only the defining module functions and augmentations will be able to access private struct members.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODcxMzg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,golo-lang,27580847,127,Simplify same-module augmentations declaration,jponge,25961,Julien Ponge,,CLOSED,2014-02-14T08:36:40Z,2014-02-28T10:29:22Z,"Augmentations need to be made on a fully qualified Java type (e.g., `augment foo.bar.Baz`).

When declaring a struct in a module, one still needs to fully qualify an augmentation declaration, even from the same module:

```
module Plop

struct Foo = { a, b, _c }

augment Plop.types.Foo {
  function whatever = |receiver, a, b| -> ""Plop""
}
```

We could automatically expand augmentation names when they match the simple name of a same-module struct, as in:

```
module Plop

struct Foo = { a, b, _c }

augment Foo {
  function whatever = |receiver, a, b| -> ""Plop""
}
```

There should be little opportunity for name clashes, and this shall be relatively easy to do at compilation time.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/127/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDY1NTUw,golo-lang,35065550,127,NA,jponge,25961,Julien Ponge,,NA,2014-02-14T08:40:34Z,2014-02-14T08:40:34Z,"/cc @danielpetisme who triggered the discussion in #126 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDY1NTUw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDc2MjE2,golo-lang,35076216,127,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-02-14T11:34:23Z,2014-02-14T11:34:23Z,"> There should be little opportunity for name clashes...

What do you have in mind?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDc2MjE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDc5NzIy,golo-lang,35079722,127,NA,jponge,25961,Julien Ponge,,NA,2014-02-14T12:36:51Z,2014-02-14T12:36:51Z,"> What do you have in mind?

Nothing special, but you can always think of stupid clashes between a struct name and a JVM class.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDc5NzIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzM4MTEw,golo-lang,36338110,127,NA,jponge,25961,Julien Ponge,,NA,2014-02-28T10:28:27Z,2014-02-28T10:28:27Z,"Done!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzM4MTEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/127,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzM4MTc2,golo-lang,36338176,127,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-02-28T10:29:22Z,2014-02-28T10:29:22Z,"Well done :wink
Le 28 févr. 2014 11:28, ""Julien Ponge"" notifications@github.com a écrit :

> Done!
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/127#issuecomment-36338110
> .
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MzM4MTc2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/129,https://api.github.com/repos/eclipse-archived/golo-lang/issues/129,golo-lang,28118582,129,textToFile() does not actually overwrite the previous file,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-02-23T13:33:30Z,2015-06-30T13:52:10Z,"if you run this : 

```
module trytowritetofile

function content1 = -> """"""
hello 1

hello 2
""""""

function content2 = -> """"""
hello 3
""""""

function main = |args| {

  textToFile(content1(), ""foo.txt"")
  textToFile(content2(), ""foo.txt"")

}
```

Content of foo.txt is : 

```
hello 3

hello 2
```

instead of

```
hello 3
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/129,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODM3MTY0,golo-lang,35837164,129,NA,jponge,25961,Julien Ponge,,NA,2014-02-23T17:29:14Z,2014-02-23T17:29:14Z,"Hum, we probably miss that flag in the `textToFile` implementation: http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardOpenOption.html#TRUNCATE_EXISTING
Do you think that you can check it?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODM3MTY0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/134,https://api.github.com/repos/eclipse-archived/golo-lang/issues/134,golo-lang,29716012,134,ConcurrentModificationException on multiple concise augmentations,jponge,25961,Julien Ponge,,CLOSED,2014-03-19T09:06:39Z,2015-06-30T13:52:10Z,"We get a `ConcurrentModificationException` when several concise struct augmentation are in the same module.

Sample code:

``` golo
module DoubleConciseStructAugmentations

struct Foo = { _none }
struct Bar = { _none }

augment Foo {
  function foo = |this| -> ""foo""
}

augment Bar {
  function bar = |this| -> ""bar""
}

function main = |args| {
  println(Foo(): foo())
  println(Bar(): bar())
}
```

This was reported by @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/134/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,golo-lang,32126699,140,JSON helpers,jponge,25961,Julien Ponge,,CLOSED,2014-04-24T07:37:28Z,2015-06-30T13:52:10Z,"It would be nice to have JSON helpers from/to Java collections. We could either write a simple parser in Golo, or embed an existing small footprint Java library.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUxOTEy,golo-lang,41251912,140,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-04-24T07:40:12Z,2014-04-24T07:40:12Z,"I knew it, Size matters!! :wink: 
What about gson (~500KB)?
https://code.google.com/p/google-gson/
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUxOTEy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUxOTU4,golo-lang,41251958,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T07:41:06Z,2014-04-24T07:41:06Z,"Too big!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUxOTU4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUyMTYy,golo-lang,41252162,140,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-04-24T07:43:54Z,2014-04-24T07:43:54Z,"I'm used to that answer... 
What **small** means to you?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUyMTYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUyMjcx,golo-lang,41252271,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T07:45:36Z,2014-04-24T07:45:36Z,"> What small means to you?

2-3 classes max in a package, not a huge pile of code like gson :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjUyMjcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjU4MTI3,golo-lang,41258127,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T09:01:23Z,2014-04-24T09:01:23Z,"That is an example of a _KISS_ JSON library :smiley: http://sharegov.blogspot.fr/2011/11/mjson-11-released.html
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjU4MTI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjU4Mjky,golo-lang,41258292,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T09:03:05Z,2014-04-24T09:03:05Z,"That one looks good, too: https://code.google.com/p/json-simple/
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjU4Mjky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjY4Mjg1,golo-lang,41268285,140,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2014-04-24T11:11:34Z,2014-04-24T11:11:34Z,"I think our implementation should be based on DynamicObject
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjY4Mjg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjczMDQ1,golo-lang,41273045,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T12:18:50Z,2014-04-24T12:18:50Z,"> I think our implementation should be based on DynamicObject

In a second step we should have bridges from/to DynamicObject and GoloStruct.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjczMDQ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjc0MjI3,golo-lang,41274227,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-24T12:33:59Z,2014-04-24T12:33:59Z,"See #142 (I'll push commits as the feature gets implemented)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMjc0MjI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/140,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTU0NjIx,golo-lang,41554621,140,NA,jponge,25961,Julien Ponge,,NA,2014-04-28T12:58:06Z,2014-04-28T12:58:06Z,"Fixed by #142 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTU0NjIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/141,https://api.github.com/repos/eclipse-archived/golo-lang/issues/141,golo-lang,32126827,141,State for augmentations,jponge,25961,Julien Ponge,,CLOSED,2014-04-24T07:40:37Z,2014-05-23T14:48:59Z,"Augmentations cannot have receiver-specific state association. It would be useful to have a way to associate a per-instance state.

Adapters do not have such problem, since provided functions can capture state around their declaration.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/141,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMDg2NTk4,golo-lang,43086598,141,NA,jponge,25961,Julien Ponge,,NA,2014-05-14T14:23:21Z,2014-05-14T14:23:21Z,"I've been looking into ways to do that efficiently and I don't see a clean way to implement that.

Basically fields cannot be added to Java classes, unless of course one does bytecode manipulation.

Augmentations are static method that the Golo runtime can leverage to resolve methods outside of a receiver object class. 

Associating ""new"" state to objects can only be done through some hack-ish hash map, and I'm quite tempted to say when augmentation code needs side effect, then one is better using encapsulation in a dynamic object or a struct + augmentation.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzMDg2NTk4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/143,https://api.github.com/repos/eclipse-archived/golo-lang/issues/143,golo-lang,32595750,143,Golo doc : augmentation,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-05-01T05:32:36Z,2015-06-30T13:52:10Z,"If i document only one method inside an augmentation, the others (not documented) take the same comment
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/143/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/143,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTUxNzk5,golo-lang,41951799,143,NA,jponge,25961,Julien Ponge,,NA,2014-05-01T20:17:24Z,2014-05-01T20:17:24Z,"Do you want to investigate yourself? I don't think it is too hard to spot and fix.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTUxNzk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/143,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTg1MjQ1,golo-lang,41985245,143,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-05-02T04:05:27Z,2014-05-02T04:05:27Z,"ok, i'll see it tomorrow

On Thu, May 1, 2014 at 10:17 PM, Julien Ponge notifications@github.comwrote:

> Do you want to investigate yourself? I don't think it is too hard to spot
> and fix.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/golo-lang/golo-lang/issues/143#issuecomment-41951799
> .

## 

http://www.k33g.org
http://fr.viadeo.com/fr/profile/philippe.charriere1
fr.linkedin.com/in/phcharriere/
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTg1MjQ1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/143,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ4ODc3,golo-lang,42348877,143,NA,jponge,25961,Julien Ponge,,NA,2014-05-06T19:39:42Z,2014-05-06T19:39:42Z,"Fixed by @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ4ODc3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,golo-lang,32595836,144,Golo doc : structure before augmentation,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-05-01T05:35:50Z,2015-06-30T13:52:11Z,"when i use golo doc with the ""kindOfClass"" pattern (augmented structure), the augmentation documentation appears before the structure documentation, then reading is more difficult (imo)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTUxODM0,golo-lang,41951834,144,NA,jponge,25961,Julien Ponge,,NA,2014-05-01T20:17:49Z,2014-05-01T20:17:49Z,"Agreed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTUxODM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDk4Nzc2,golo-lang,42098776,144,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-05-03T07:42:39Z,2014-05-03T07:42:39Z,"But which order ?
- Structure
- Augmentation
- Function

?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDk4Nzc2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTEwMzQ5,golo-lang,42110349,144,NA,jponge,25961,Julien Ponge,,NA,2014-05-03T17:04:44Z,2014-05-03T17:04:44Z,"I would do that indeed, sounds about the right order since a struct can be augmented.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTEwMzQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/144,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ4OTA0,golo-lang,42348904,144,NA,jponge,25961,Julien Ponge,,NA,2014-05-06T19:39:57Z,2014-05-06T19:39:57Z,"Fixed by @k33g 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzQ4OTA0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/146,https://api.github.com/repos/eclipse-archived/golo-lang/issues/146,golo-lang,32741911,146,"Function, augmentation, structure sections with markdown documentation",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-05-03T07:28:14Z,2014-05-03T18:06:55Z,"Section appears even if empty with markdown documentation generation
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/146/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,golo-lang,33893075,150,Tests fail on Windows,jflipp,7645437,Johannes Lipp,johannes.lipp@googlemail.com,CLOSED,2014-05-20T14:25:36Z,2015-06-30T13:52:11Z,"Here's a minor problem when building on Windows.

The test fr.insalyon.citi.golo.compiler.parser.ParserSanityTest fails because of line 37 in ParserSanityTest.java.

That line currently is:
return TestUtils.goloFilesIn(""src/test/resources/for-parsing-and-compilation"".replaceAll(""/"", File.separator));

The problem is that on Windows, File.separator is ""\"" which collides with regular expressions.

A solution would be to replace File.separator with File.separator.replace(""\\"", ""\\\\"").

The same problem occurs in the test fr.insalyon.citi.golo.compiler.ParseTreeToGoloIrAndVisitorsTest
in line 44 of ParseTreeToGoloIrAndVisitorsTest.java.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjQ1MDAw,golo-lang,43645000,150,NA,jponge,25961,Julien Ponge,,NA,2014-05-20T15:55:03Z,2014-05-20T15:55:03Z,"The joy of Windows.

Fancy a pull-request?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNjQ1MDAw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjEwMTM0,golo-lang,45210134,150,NA,jponge,25961,Julien Ponge,,NA,2014-06-05T11:51:32Z,2014-06-05T11:51:32Z,"@jflipp does #154 work for you? (I don't have a Windows machine)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjEwMTM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzAzOTM3,golo-lang,45303937,150,NA,artpej,693299,Sylvain Desgrais,,NA,2014-06-06T05:22:16Z,2014-06-06T05:22:16Z,"I try to compile with a Windows 7 host another issue appened (new line differ on windows and json tests don't like it) : 

```
Failed tests:
  CompileAndRunTest.test_functions_with_returns:107
Expected: is ""This is\n*awesome*""
     but: was ""This is\r\n*awesome*""
  CompileAndRunTest.test_method_invocations:600 ╗ InvocationTarget
  JSONTest.dyobj_stringify:76
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.dyobj_stringify_mixin:84
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.stringify_mix_struct_and_dynobj:116
Expected: a string containing ""{\""name\"":\""Mr Bean\""""
     but: was ""{""b"":{""email"":64,""age"":""mrbean@outlook.com"",""name"":""Mr Bean""},""a"":""1""}""
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzAzOTM3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzEwNjky,golo-lang,45310692,150,NA,jponge,25961,Julien Ponge,,NA,2014-06-06T07:38:16Z,2014-06-06T07:38:16Z,"@Artpej Thanks. As I don't have a Windows machine, may I ask you to fix it?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MzEwNjky/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTc5NDAz,golo-lang,45579403,150,NA,artpej,693299,Sylvain Desgrais,,NA,2014-06-10T06:50:25Z,2014-06-10T06:50:25Z,"@jponge  no problem, I'll try to do this quickly :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTc5NDAz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTgwMDg0,golo-lang,45580084,150,NA,jponge,25961,Julien Ponge,,NA,2014-06-10T07:01:07Z,2014-06-10T07:01:07Z,"Thanks!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTgwMDg0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA2ODM1,golo-lang,45806835,150,NA,jflipp,7645437,Johannes Lipp,johannes.lipp@googlemail.com,NA,2014-06-11T22:10:18Z,2014-06-11T22:10:18Z,"@jponge I verified the fix for #150 on Windows, and it works. Thank you.

Nice solution. I could have thought of that, too. :)  :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA2ODM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODM0NzY1,golo-lang,45834765,150,NA,artpej,693299,Sylvain Desgrais,,NA,2014-06-12T06:38:14Z,2014-06-12T06:38:14Z,"@jponge after investigation it works fine for me too.

```
CompileAndRunTest.test_functions_with_returns:107
Expected: is ""This is\n*awesome*""
     but: was ""This is\r\n*awesome*""
```

This test failed because my git command line client is configured retrieve files in dos format (with `\r\n` new line delimiter). No problem after changing this.

```
  CompileAndRunTest.test_method_invocations:600 ╗ InvocationTarget
  JSONTest.dyobj_stringify:76
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.dyobj_stringify_mixin:84
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.stringify_mix_struct_and_dynobj:116
Expected: a string containing ""{\""name\"":\""Mr Bean\""""
     but: was ""{""b"":{""email"":64,""age"":""mrbean@outlook.com"",""name"":""Mr Bean""},""a"":""1""}""
```

This tests failed because i tried to compile with a JDK7 (45) that do strange things with hashmaps key  order. With a JDK8 all works fine.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODM0NzY1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/150,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODQxMjA4,golo-lang,45841208,150,NA,jponge,25961,Julien Ponge,,NA,2014-06-12T08:14:25Z,2014-06-12T08:14:25Z,"Ok, so everything's fine then, let's merge :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODQxMjA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/151,https://api.github.com/repos/eclipse-archived/golo-lang/issues/151,golo-lang,34017685,151,spring integration,2325407504,2542342,,,CLOSED,2014-05-21T19:50:08Z,2014-05-22T08:08:32Z,"please add spring boot integration example
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/151/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/151,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODUzNTIx,golo-lang,43853521,151,NA,jponge,25961,Julien Ponge,,NA,2014-05-22T06:42:17Z,2014-05-22T06:42:17Z,"Please do not post junk issues.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODUzNTIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/151,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODUzNTc4,golo-lang,43853578,151,NA,jponge,25961,Julien Ponge,,NA,2014-05-22T06:43:12Z,2014-05-22T06:43:12Z,"A Golo/Spring Boot integration would be another project. I'll close the issue. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQzODUzNTc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,golo-lang,35527343,155,Ship a Docker image,jponge,25961,Julien Ponge,,CLOSED,2014-06-11T21:09:31Z,2015-06-30T13:52:11Z,"We shall ship a Docker image with Golo based on Ubuntu that stays current with Dockerhub.

I have no idea whether this is useful or not, but the hype is so strong that Golo cannot ship 1.0.0 without anything related to Docker. Period.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/155/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAwNjc3,golo-lang,45800677,155,NA,titimoby,348156,Thierry Chantier,,NA,2014-06-11T21:11:59Z,2014-06-11T21:11:59Z,"So first things first: we need a name for it :)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODAwNjc3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA2MTY0,golo-lang,45806164,155,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-06-11T22:03:10Z,2014-06-11T22:03:10Z,"goulue ?

On Wed, Jun 11, 2014 at 11:11 PM, Thierry notifications@github.com wrote:

> So first things first: we need a name for it :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/155#issuecomment-45800677.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODA2MTY0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgwOTA3,golo-lang,45880907,155,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2014-06-12T11:35:24Z,2014-06-12T11:35:24Z,"Maybe you can wait for the hype to fall down
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgwOTA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMDEx,golo-lang,45882011,155,NA,jponge,25961,Julien Ponge,,NA,2014-06-12T11:50:21Z,2014-06-12T11:50:21Z,"> Maybe you can wait for the hype to fall down

No way, we must be on top of the wave!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMDEx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMDgx,golo-lang,45882081,155,NA,titimoby,348156,Thierry Chantier,,NA,2014-06-12T11:51:14Z,2014-06-12T11:51:14Z,"may I bring my pink ukulele? ;)

On Thu, Jun 12, 2014 at 1:50 PM, Julien Ponge notifications@github.com
wrote:

> > Maybe you can wait for the hype to fall down
> 
> No way, we must be on top of the wave!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/155#issuecomment-45882011.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMDgx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMjE4,golo-lang,45882218,155,NA,jponge,25961,Julien Ponge,,NA,2014-06-12T11:53:20Z,2014-06-12T11:53:20Z,"Sure!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODgyMjE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODg4MTIx,golo-lang,45888121,155,NA,jponge,25961,Julien Ponge,,NA,2014-06-12T13:03:36Z,2014-06-12T13:03:36Z,"There is a pull-request for that: #156 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODg4MTIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/155,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTE2MDc4,golo-lang,45916078,155,NA,jponge,25961,Julien Ponge,,NA,2014-06-12T16:38:11Z,2014-06-12T16:38:11Z,"Done!

Let there by hype.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1OTE2MDc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,golo-lang,36351590,157,File path problem in ParserSanityTest in Windows environment,bmaingret,1751970,Baptiste Maingret,baptiste.maingret@gmail.com,CLOSED,2014-06-24T03:51:26Z,2015-06-30T13:52:11Z,"When running rake test:parser, I have a problem with `line 37` of `/src/test/java/fr/insalyon/citi/golo/compiler/parser/ParserSanityTest.java` : 

``` Java
return TestUtils.goloFilesIn(""src/test/resources/for-parsing-and-compilation"".replaceAll(""/"", File.separator));
```

leading to the test being skipped.

Reproducing the bug I get the following exception : 
`Exception in thread ""main"" java.lang.IllegalArgumentException: character to be escaped is missing`

I fixed it replacing (no joke there) the method `replaceAll` by `replace`: 

``` Java
return TestUtils.goloFilesIn(""src/test/resources/for-parsing-and-compilation"".replace(""/"", File.separator));
```

Doing some test, it appears there is no problem changing `File.separator` with `""/""`, but still when replacing by `""\\""`, so I guess it will only affect Windows users.

`replaceAll` seems to be using regex engine, whereas `replace` simply does what it says, hence the source of the bug.

cf. http://stackoverflow.com/questions/10827872/difference-between-java-string-replace-and-replaceall

Cheers
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/157/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTQzNjI0,golo-lang,46943624,157,NA,jponge,25961,Julien Ponge,,NA,2014-06-24T08:15:51Z,2014-06-24T08:15:51Z,"We've had reports like that, and I think it's already been fixed in the master branch, see https://github.com/golo-lang/golo-lang/blob/master/src/test/java/fr/insalyon/citi/golo/compiler/parser/ParserSanityTest.java 

Basically using just `/` and no replacement works just very fine on that peculiar operating system :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2OTQzNjI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Mjc0MDQ4,golo-lang,47274048,157,NA,jponge,25961,Julien Ponge,,NA,2014-06-26T20:12:52Z,2014-06-26T20:12:52Z,"@bmaingret Just checking, do you confirm / infirm the issue?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Mjc0MDQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzA1ODk5,golo-lang,47305899,157,NA,bmaingret,1751970,Baptiste Maingret,baptiste.maingret@gmail.com,NA,2014-06-27T04:02:47Z,2014-06-27T04:02:47Z,"No, it is ok with what you said above, plus it is fixed in the master. I was using preview 12 !
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzA1ODk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/157,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE1MTM3,golo-lang,47315137,157,NA,jponge,25961,Julien Ponge,,NA,2014-06-27T07:26:52Z,2014-06-27T07:26:52Z,"Great, thanks Baptiste!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE1MTM3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/158,https://api.github.com/repos/eclipse-archived/golo-lang/issues/158,golo-lang,38127025,158,Unable to use golo from Git Bash (Windows),ath0mas,217720,Alexis THOMAS,,CLOSED,2014-07-17T21:19:41Z,2015-06-30T13:52:11Z,"Golo runs fine in cmd, but not in Git Bash: ""Error: Could not find or load main class...""
cf. https://twitter.com/ath0mas/status/487255510488727553

Windows 7
Git Bash, from msysgit 1.9.4
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/158,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA0MDY3,golo-lang,49404067,158,NA,jponge,25961,Julien Ponge,,NA,2014-07-18T07:44:58Z,2014-07-18T07:44:58Z,"Somehow Maven dependency checks didn't spot a bunch of plugin updates... doing it, thanks!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA0MDY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/160,https://api.github.com/repos/eclipse-archived/golo-lang/issues/160,golo-lang,38132651,160,"Antivirus ""Security Alert"" stops mvn install",ath0mas,217720,Alexis THOMAS,,CLOSED,2014-07-17T22:23:44Z,2015-06-30T13:52:11Z,"While running ""rake special:bootstrap"", Avira security alert makes build fail on surefire test phase.

![golo-rake](https://cloud.githubusercontent.com/assets/217720/3620370/73cad74c-0dff-11e4-9487-312c9b9df51e.png)

Windows 7
Avira Free Antivirus 14.0.5.464 02/07/2014, with Real-Time Protection ""ON""

> Real-Time Protection ""OFF"" makes things run fine :/

about designated [CVE-2013-0422](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0422)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/160/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/160,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA0Mzg1,golo-lang,49404385,160,NA,jponge,25961,Julien Ponge,,NA,2014-07-18T07:49:23Z,2014-07-18T07:49:23Z,"That does not qualifies as a Golo issue, rather a specific JDK + third party antivirus software on Microsoft Windows.

There isn't much for us to do :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NDA0Mzg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,golo-lang,38309448,162,3 failing tests inside JSONTest with JDK 7,ath0mas,217720,Alexis THOMAS,,CLOSED,2014-07-21T14:45:31Z,2014-07-22T15:38:53Z,"3 failed tests:
- JSONTest.dyobj_stringify
- JSONTest.dyobj_stringify_mixin
- JSONTest.stringify_mix_struct_and_dynobj

Checked on Ubuntu and Windows, JDK 7u60 and 7u65

```
Failed tests: 
  JSONTest.dyobj_stringify:76 
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.dyobj_stringify_mixin:84 
Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
     but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
  JSONTest.stringify_mix_struct_and_dynobj:116 
Expected: a string containing ""{\""name\"":\""Mr Bean\""""
     but: was ""{""b"":{""email"":64,""age"":""mrbean@outlook.com"",""name"":""Mr Bean""},""a"":""1""}""
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjE1NjU5,golo-lang,49615659,162,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2014-07-21T14:53:11Z,2014-07-21T14:53:11Z,"Yes I noticed also. Works with JDK 8. Seems related to different
implementations for Map between JDK 7 and JDK 8

Jeff

On Mon, Jul 21, 2014 at 4:45 PM, Alexis THOMAS notifications@github.com
wrote:

> 3 failed tests:
> - JSONTest.dyobj_stringify
> - JSONTest.dyobj_stringify_mixin
> - JSONTest.stringify_mix_struct_and_dynobj
> 
> Checked on Ubuntu and Windows, JDK 7u60 and 7u65
> 
> Failed tests:
>   JSONTest.dyobj_stringify:76
> Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
>      but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
>   JSONTest.dyobj_stringify_mixin:84
> Expected: a string containing ""\""nested\"":{\""a\"":\""1\"",\""b\"":\""2\""}""
>      but: was ""{""nested"":{""b"":""2"",""a"":""1""},""foo"":""bar"",""bar"":""baz""}""
>   JSONTest.stringify_mix_struct_and_dynobj:116
> Expected: a string containing ""{\""name\"":\""Mr Bean\""""
>      but: was ""{""b"":{""email"":64,""age"":""mrbean@outlook.com"",""name"":""Mr Bean""},""a"":""1""}""
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/162.

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjE1NjU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzE5ODE4,golo-lang,49719818,162,NA,ath0mas,217720,Alexis THOMAS,,NA,2014-07-22T10:02:42Z,2014-07-22T10:02:42Z,"Indeed, it is due to iterating over entries/keys of DynamicObject ""HashMap<String, Object> properties"" attribute.

Are these JSON tests expectations strong and correct, and must stay the same?
Or, is the order of elements in return value not important, and test match should be more flexible?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzE5ODE4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2MDY2,golo-lang,49726066,162,NA,jponge,25961,Julien Ponge,,NA,2014-07-22T11:18:22Z,2014-07-22T11:18:22Z,"Maps-based tests shall be more flexible then.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2MDY2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2NDE3,golo-lang,49726417,162,NA,jeffmaury,695993,Jeff MAURY,jmaury@redhat.com,NA,2014-07-22T11:23:18Z,2014-07-22T11:23:18Z,"Maybe using JSONAssert: http://jsonassert.skyscreamer.org ?

Jeff

On Tue, Jul 22, 2014 at 1:18 PM, Julien Ponge notifications@github.com
wrote:

> Maps-based tests shall be more flexible then.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/162#issuecomment-49726066.

## 

Jeff MAURY

""Legacy code"" often differs from its suggested alternative by actually
working and scaling.
- Bjarne Stroustrup

http://www.jeffmaury.com
http://riadiscuss.jeffmaury.com
http://www.twitter.com/jeffmaury
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2NDE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/162,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2Njcx,golo-lang,49726671,162,NA,jponge,25961,Julien Ponge,,NA,2014-07-22T11:26:23Z,2014-07-22T11:26:23Z,"Why not, fancy trying it? :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzI2Njcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/166,https://api.github.com/repos/eclipse-archived/golo-lang/issues/166,golo-lang,38437153,166,--jvmArgs flag support,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-07-22T19:53:48Z,2015-06-30T13:52:11Z,"It would be fine to have support of jvmArgs flag (ie: `-Djava.library.path`) when launching Golo.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/166/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/166,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODQzNDE2,golo-lang,49843416,166,NA,jponge,25961,Julien Ponge,,NA,2014-07-23T07:55:44Z,2014-07-23T07:55:44Z,"It just came back to my mind that the generated scripts already support that: http://golo-lang.org/documentation/1.0.0/index.html#_passing_jvm_specific_flags

So we can already do that :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODQzNDE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/166,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODQ2OTIw,golo-lang,49846920,166,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-07-23T08:36:06Z,2014-07-23T08:36:06Z,"nice :)

On Wed, Jul 23, 2014 at 9:55 AM, Julien Ponge notifications@github.com
wrote:

> It just came back to my mind that the generated scripts already support
> that:
> http://golo-lang.org/documentation/1.0.0/index.html#_passing_jvm_specific_flags
> 
> So we can already do that [image: :smile:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/166#issuecomment-49843416.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5ODQ2OTIw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/167,https://api.github.com/repos/eclipse-archived/golo-lang/issues/167,golo-lang,38604861,167,Remove deprecated array methods,jponge,25961,Julien Ponge,,CLOSED,2014-07-24T07:48:43Z,2015-06-30T13:52:11Z,"See http://golo-lang.org/documentation/1.0.0/index.html#_arrays_deprecated
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/167/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/168,https://api.github.com/repos/eclipse-archived/golo-lang/issues/168,golo-lang,38605187,168,Document gololang.Async,jponge,25961,Julien Ponge,,CLOSED,2014-07-24T07:54:08Z,2015-06-30T13:52:11Z,"The Golo Programming Language Guide does not have documentation for `gololang.Async`.

This should be part of the ""Misc. modules"" section, just like there is a subsection for `gololang.JSON`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/168/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/169,https://api.github.com/repos/eclipse-archived/golo-lang/issues/169,golo-lang,38721037,169,JMH Benchmarking - Annotation renamed in latest version,bmaingret,1751970,Baptiste Maingret,baptiste.maingret@gmail.com,CLOSED,2014-07-25T11:33:20Z,2014-07-25T11:50:49Z,"EDIT
Already fixed in latest version... sorry about that !

Hi,

Apparently in the latest version of JMH the annotatino @GenerateMicroBenchmark has been renamed to @Benchmark. c.f. [http://hg.openjdk.java.net/code-tools/jmh/rev/85fd5890b795]. Since they did not bump the version, there is no direct way to take into account by maven.

Simply replacing should be enough?
A pull request might follow if it is that simple.

Cheers
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/169/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/170,https://api.github.com/repos/eclipse-archived/golo-lang/issues/170,golo-lang,38808518,170,Document  gololang.StandardAugmentations module,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-07-26T06:39:46Z,2015-06-30T13:52:11Z,"The Golo Programming Language Guide does not have **real** documentation for `gololang.StandardAugmentations`.

For example, I just realized that we did not explain anywhere that we could do a `each` on `java.lang.Iterable`, `filter` on `java.util.List`, etc.

This is part of ""sexies"" things that may interest people.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/170,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjU4NTA5,golo-lang,50258509,170,NA,jponge,25961,Julien Ponge,,NA,2014-07-27T08:03:11Z,2014-07-27T08:03:11Z,":+1:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjU4NTA5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,golo-lang,38823940,171,"Basic ""golo run"" fails with 1.1.0-SNAPSHOT",ath0mas,217720,Alexis THOMAS,,CLOSED,2014-07-26T18:57:24Z,2015-06-30T13:52:11Z,"I built current 1.1.0-SNAPSHOT version and used it to re-run basic commands from Golo Programming Language Guide: `golo golo` _OK_ ; `golo compile` _OK_ ; `golo run` **KO**
Checked again with released 1.0.0 and no failure.

```
$ golo golo --files helloworld.golo
Hello world!
$ golo compile --output classes helloworld.golo
$ cd classes
$ golo run --module hello.World
The module hello.World could not be loaded.
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/171/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjU4NDg1,golo-lang,50258485,171,NA,jponge,25961,Julien Ponge,,NA,2014-07-27T08:01:31Z,2014-07-27T08:01:31Z,"Maybe this is due to class path settings with the updated appassembler plugin. To be checked!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjU4NDg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjY2OTUx,golo-lang,50266951,171,NA,ath0mas,217720,Alexis THOMAS,,NA,2014-07-27T15:15:19Z,2014-07-27T15:15:19Z,"I did more tests: problem is linked to appassembler-maven-plugin recent version update from 1.3.1 to 1.8.1 (cf. [plugin versions history](http://search.maven.org/#search|gav|1|g%3A%22org.codehaus.mojo%22%20AND%20a%3A%22appassembler-maven-plugin%22))
In fact, problem appears between versions 1.5 and 1.6 (while previous issue #158 is ""fixed"" thanks to 1.6...)
Digging more in [1.6 release notes](http://jira.codehaus.org/secure/ReleaseNote.jspa?projectId=11780&version=19575), I found this resolved issue about classpath: [MAPPASM-188](http://jira.codehaus.org/browse/MAPPASM-188).

In generated scripts, hard coding CLASSPATH_PREFIX=""."" makes ""run"" works fine.
I did not find how to tweak [assemble goal](http://mojo.codehaus.org/appassembler/appassembler-maven-plugin/assemble-mojo.html) configuation to force CLASSPATH_PREFIX value in pom.xml yet.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMjY2OTUx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzA4MTI1,golo-lang,50308125,171,NA,jponge,25961,Julien Ponge,,NA,2014-07-28T07:37:23Z,2014-07-28T07:37:23Z,"An option is to use classloader tricks.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzA4MTI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzA5NjE2,golo-lang,50309616,171,NA,jponge,25961,Julien Ponge,,NA,2014-07-28T08:01:27Z,2014-07-28T08:01:27Z,"That was an easy fix :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzA5NjE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/171,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzEwNzkx,golo-lang,50310791,171,NA,ath0mas,217720,Alexis THOMAS,,NA,2014-07-28T08:17:52Z,2014-07-28T08:17:52Z,"For sure!
I can now let appassembler contributors alone, and stop asking this behavior in corresponding Jira issue.
 :laughing:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMzEwNzkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,golo-lang,39380835,172,Gradle build failure for new project,ath0mas,217720,Alexis THOMAS,,CLOSED,2014-08-03T22:17:28Z,2014-08-05T19:55:25Z,"I just installed Gradle 2.0, and get error while executing `gradle build`.
## 

New project created with:
`$ golo new Baz --type gradle`

and then tried to build it:

```
$ gradle build --stacktrace

FAILURE: Build failed with an exception.

* Where:
Build file 'D:\path\Creating_projects\Baz\build.gradle' line: 17

* What went wrong:
A problem occurred evaluating root project 'Baz'.
> Could not find method add() for arguments [compileGolo, class org.gololang.gradle.GoloCompile] on task set.

* Try:
Run with --info or --debug option to get more log output.

* Exception is:
org.gradle.api.GradleScriptException: A problem occurred evaluating root project 'Baz'.
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:54)
        at org.gradle.configuration.DefaultScriptPluginFactory$ScriptPluginImpl.apply(DefaultScriptPluginFactory.java:187)
        at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:39)
        at org.gradle.configuration.project.BuildScriptProcessor.execute(BuildScriptProcessor.java:26)
        at org.gradle.configuration.project.ConfigureActionsProjectEvaluator.evaluate(ConfigureActionsProjectEvaluator.java:34)
        at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:55)
        at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:470)
        at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:79)
        at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:31)
        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:128)
        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:105)
        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:85)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:81)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:33)
        at org.gradle.launcher.cli.ExecuteBuildAction.run(ExecuteBuildAction.java:24)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:39)
        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:29)
        at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:50)
        at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:171)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)
        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)
        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)
        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)
        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)
        at org.gradle.launcher.Main.doAction(Main.java:33)
        at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)
        at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)
        at org.gradle.launcher.GradleMain.main(GradleMain.java:23)
Caused by: org.gradle.api.internal.MissingMethodException: Could not find method add() for arguments [compileGolo, class org.gololang.gradle.GoloCompile] on task set.
        at org.gradle.api.internal.AbstractDynamicObject.methodMissingException(AbstractDynamicObject.java:68)
        at org.gradle.api.internal.AbstractDynamicObject.invokeMethod(AbstractDynamicObject.java:56)
        at org.gradle.api.internal.CompositeDynamicObject.invokeMethod(CompositeDynamicObject.java:172)
        at org.gradle.api.internal.tasks.DefaultTaskContainer_Decorated.invokeMethod(Unknown Source)
        at org.gololang.gradle.GoloPlugin$_configureSourceSetDefaults_closure1.doCall(GoloPlugin.groovy:91)
        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:59)
        at org.gradle.api.internal.DefaultDomainObjectCollection.all(DefaultDomainObjectCollection.java:110)
        at org.gradle.api.internal.DefaultDomainObjectCollection.all(DefaultDomainObjectCollection.java:115)
        at org.gradle.api.DomainObjectCollection$all$0.call(Unknown Source)
        at org.gololang.gradle.GoloPlugin.configureSourceSetDefaults(GoloPlugin.groovy:83)
        at org.gololang.gradle.GoloPlugin.this$2$configureSourceSetDefaults(GoloPlugin.groovy)
        at org.gololang.gradle.GoloPlugin$this$2$configureSourceSetDefaults.callCurrent(Unknown Source)
        at org.gololang.gradle.GoloPlugin.apply(GoloPlugin.groovy:75)
        at org.gololang.gradle.GoloPlugin.apply(GoloPlugin.groovy)
        at org.gradle.api.internal.plugins.DefaultPluginContainer.providePlugin(DefaultPluginContainer.java:110)
        at org.gradle.api.internal.plugins.DefaultPluginContainer.addPluginInternal(DefaultPluginContainer.java:69)
        at org.gradle.api.internal.plugins.DefaultPluginContainer.apply(DefaultPluginContainer.java:35)
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.applyPlugin(DefaultObjectConfigurationAction.java:117)
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.access$200(DefaultObjectConfigurationAction.java:36)
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction$3.run(DefaultObjectConfigurationAction.java:85)
        at org.gradle.api.internal.plugins.DefaultObjectConfigurationAction.execute(DefaultObjectConfigurationAction.java:130)
        at org.gradle.api.internal.project.AbstractPluginAware.apply(AbstractPluginAware.java:41)
        at org.gradle.api.Project$apply$0.call(Unknown Source)
        at org.gradle.api.internal.project.ProjectScript.apply(ProjectScript.groovy:34)
        at org.gradle.api.Script$apply$0.callCurrent(Unknown Source)
        at build_4qtl97ebhf7shiuu42c6580u7t.run(D:\path\Creating_projects\Baz\build.gradle:17)
        at org.gradle.groovy.scripts.internal.DefaultScriptRunnerFactory$ScriptRunnerImpl.run(DefaultScriptRunnerFactory.java:52)
        ... 31 more
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/172/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDQyMDE0,golo-lang,51042014,172,NA,jponge,25961,Julien Ponge,,NA,2014-08-04T10:10:23Z,2014-08-04T10:10:23Z,"You should report the issue on the Gradle plugin project instead.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDQyMDE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDQ3NDUz,golo-lang,51047453,172,NA,ath0mas,217720,Alexis THOMAS,,NA,2014-08-04T11:14:08Z,2014-08-04T11:14:08Z,"Double-posted for now, as I don't know if it is linked to project generation or gradle plugin.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDQ3NDUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDkwMDYx,golo-lang,51090061,172,NA,jponge,25961,Julien Ponge,,NA,2014-08-04T17:25:34Z,2014-08-04T17:25:34Z,"Seems like a Gradle-specific issue.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMDkwMDYx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/172,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMjQ4MjM2,golo-lang,51248236,172,NA,erdi,205451,Marcin Erdmann,,NA,2014-08-05T19:37:15Z,2014-08-05T19:37:15Z,"It's been fixed in gradle golo plugin. You'll need to use plugin version 0.4 to get that fix.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMjQ4MjM2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/177,https://api.github.com/repos/eclipse-archived/golo-lang/issues/177,golo-lang,41490129,177,Use the Maven versions plugin in Rake,jponge,25961,Julien Ponge,,CLOSED,2014-08-29T10:55:20Z,2015-06-30T13:52:11Z,"A new Rake task shall take advantage of the Maven versions plugin to change all projects versions at once.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/177/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/177,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDM3OTkx,golo-lang,54037991,177,NA,jponge,25961,Julien Ponge,,NA,2014-09-01T09:17:09Z,2014-09-01T09:17:09Z,"This plugin and other plugins have so many shortcomings that a simple ""find and replace"" just works better...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDM3OTkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/179,https://api.github.com/repos/eclipse-archived/golo-lang/issues/179,golo-lang,41620963,179,GoloCompilationException.Builder not reset for each files,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-09-01T09:20:16Z,2015-06-30T13:52:11Z,"In the `GoloCompiler` class, the exception builder `GoloCompilationException.Builder` is not reseted when parsing a new file, resulting in wrong filename in errors when compiling several golo files

```
$ golo compile ok.golo err.golo
[error] In Golo module: ok.golo
...
```

The reset could be done in the `cli.Main.compile` method, or more conveniently in `GoloCompiler.compile`.
Except if I'm missing something.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/179/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/179,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQxODEw,golo-lang,54041810,179,NA,jponge,25961,Julien Ponge,,NA,2014-09-01T09:58:17Z,2014-09-01T09:58:17Z,"Very good catch!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQxODEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/179,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQxODM2,golo-lang,54041836,179,NA,jponge,25961,Julien Ponge,,NA,2014-09-01T09:58:32Z,2014-09-01T09:58:32Z,"Do you wanna go for it @yloiseau?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQxODM2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/179,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQzNzcw,golo-lang,54043770,179,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-09-01T10:22:17Z,2014-09-01T10:22:17Z,"ok
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MDQzNzcw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/182,https://api.github.com/repos/eclipse-archived/golo-lang/issues/182,golo-lang,42044329,182,ASTStructDeclaration class should implement NamedNode,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-09-05T13:06:29Z,2015-06-30T13:52:11Z,"The class `fr.insalyon.citi.golo.compiler.parser.ASTStructDeclaration` has `String getName()` and `void setName(String)`, but is not declared as implementing `NamedNode` interface. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/182/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/182,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjIyMjc4,golo-lang,54622278,182,NA,jponge,25961,Julien Ponge,,NA,2014-09-05T13:08:31Z,2014-09-05T13:08:31Z,"Go for it :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjIyMjc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/182,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjIyNDQ0,golo-lang,54622444,182,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-09-05T13:10:11Z,2014-09-05T13:10:11Z,"just filled an issue for references
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjIyNDQ0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,golo-lang,44702000,189,Default values on function parameters,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2014-10-02T15:39:34Z,2019-02-09T13:18:45Z,"Wouldn't be nice to do 

``` golo
function split = |text, seperator="";""| {
...
}

require(split(""foo;bar"") is [""foor"", ""bar""], ""Default separator value"")
require(split(""foo:bar"", "":"") is [""foor"", ""bar""], ""Explicited defined separator value"")

```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/189/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk0MTA2,golo-lang,57694106,189,NA,jponge,25961,Julien Ponge,,NA,2014-10-02T19:45:14Z,2014-10-02T19:45:14Z,"Yeah, it would be nice :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk0MTA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5MjMw,golo-lang,57699230,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-10-02T20:24:23Z,2014-10-02T20:24:23Z,"ie. DIY isn't it ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5MjMw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5NTc1,golo-lang,57699575,189,NA,jponge,25961,Julien Ponge,,NA,2014-10-02T20:26:53Z,2014-10-02T20:26:53Z,"> ie. DIY isn't it ?

That would make a fun exercise :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5NTc1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5ODk5,golo-lang,57699899,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2014-10-02T20:29:18Z,2014-10-02T20:29:18Z,"Sounds famimiar. You told me the dame with the string interpolation :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU3Njk5ODk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU4Njc0OTg2,golo-lang,58674986,189,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-10T15:50:43Z,2014-10-10T15:50:43Z,"You can already do

``` golo

function split = |text, seperator| {
...
}

function split = |text| -> split(text, "";"")

require(split(""foo;bar"") is [""foor"", ""bar""], ""Default separator value"")
require(split(""foo:bar"", "":"") is [""foor"", ""bar""], ""Explicited defined separator value"")
```

:smile: 

my 2cts
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDU4Njc0OTg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjMyNDg1,golo-lang,60232485,189,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T12:41:03Z,2014-10-23T12:41:03Z,"btw, having named arguments/parameters would also be nice, and seems to be a related topic.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjMyNDg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDM5Mzg2MA==,golo-lang,210393860,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-04-15T09:50:13Z,2016-04-15T09:50:13Z,"Question about this one.

Currently, the function resolution is based on the function name + number of args (+ types when applicable). When a parameter has a default value the argument is optional and the resolution is a bit harder.

``` golo
# let's call it split_1
function split = |text, separator="";""| {
...
}

# let's call it split_2
function split = |text| -> split(text, ""-"")

# which one should be called ?
split(""foo;bar"") 
```

1- Explicit > Implicit: name match and nbArgs match => split(""foo;bar"")  invokes `split_2`
2- Partialization first, invokes `split_1` the longer signature with default values ?

@yloiseau how is it handled in Python?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDM5Mzg2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0MDI4NQ==,golo-lang,210440285,189,NA,jponge,25961,Julien Ponge,,NA,2016-04-15T12:09:57Z,2016-04-15T12:09:57Z,"In that case `split(""foo;bar"")` must call `split_2`.

An implementation of default arguments shall detect function arity clashes in a module and report errors at compilation time IMHO.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0MDI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0MTUxMQ==,golo-lang,210441511,189,NA,jponge,25961,Julien Ponge,,NA,2016-04-15T12:13:31Z,2016-04-15T12:13:31Z,"@danielpetisme This is not supported in Python, a function gets redefined:

``` python
def a(x, y=0):
    return x + y

def a(n):
    return n * 100

print a(1)
print a(1, 2)
```

Gives:

```
python foo.py 
100
Traceback (most recent call last):
  File ""foo.py"", line 8, in <module>
    print a(1, 2)
TypeError: a() takes exactly 1 argument (2 given)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0MTUxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0NDc0Mg==,golo-lang,210444742,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-04-15T12:22:59Z,2016-04-15T12:22:59Z,"So given:

``` golo
function split = |text, separator = "";""| -> ...
function split = |text| -> ...

split(""foo:bar"")
```

this snippet should raise a kind of `Ambiguous resolution exception`

Right ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0NDc0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0NjQ1NA==,golo-lang,210446454,189,NA,jponge,25961,Julien Ponge,,NA,2016-04-15T12:31:21Z,2016-04-15T12:31:21Z,"That would be sane :-)

On 15 April 2016 at 14:23:50, Daniel PETISME (notifications@github.com) wrote:

> So given:
> `
> function split = |text, separator = "";""| -> ...
> function split = |text| -> ...
> 
> split(""foo:bar"")
> `
> 
> this snippet should raise a kind of `Ambiguous resolution exception`
> 
> Right ?
> 
> ---
> 
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub:
> https://github.com/eclipse/golo-lang/issues/189#issuecomment-210444742
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0NjQ1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0ODgzNg==,golo-lang,210448836,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-04-15T12:40:57Z,2016-04-15T12:40:57Z,"Other point.
What's the best option.
Build a Parameter structure which holds the parameter name and the default value, when the bytecode is generated pass the default values in the BSM arguments (just as named args are working right now) => The default values injection is made at compilation time.

Or at compilation time generate the partialized function

``` golo
function split = |text, separator = "";""| -> ...
# would produce the bytecode for
function split = |text, separator| -> ...
function split = |text| -> split(text, "";"")
```

At last but not least, do we accept constants or variables/expression are allowed.

``` golo
function split = |text, separator = System.lineSeparator()| ...
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDQ0ODgzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDYxNzgwNA==,golo-lang,210617804,189,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-04-15T19:57:06Z,2016-04-15T19:57:06Z,"I would say compile time generation. Simpler to implement. Moreover, this would automatically raise the ambiguous exception, and allow the use of expressions.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMDYxNzgwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMTIzODg5MQ==,golo-lang,211238891,189,NA,jponge,25961,Julien Ponge,,NA,2016-04-18T07:11:55Z,2016-04-18T07:11:55Z,"+1
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMTIzODg5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTYwMDcyNg==,golo-lang,311600726,189,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-28T09:02:19Z,2017-06-28T09:02:19Z,"I disagree with myself :smile:

We can't do compile time generation of partialized functions (see discussion in #419 and #426 ).

For instance, given
```golo
function foo = |a, b=""answer"", c=42| -> ""%s %s %s"": format(a, b, c)
```

should generate
```golo
# full args, OK 
function foo = |a, b, c| -> ""%s %s %s"": format(a, b, c)

# this one is OK
function foo = |a| -> foo(a, ""answer"", 42)

# Oups...
function foo = |a, b| -> foo(a, b, 42)
function foo = |a, c| -> foo(a, ""answer"", c)
```

unless we restrict usage. But it would be a pity, since default parameters play really nice with named arguments (i.e. Python-like)

```golo
foo(a=""a"", c=666) # calls foo(""a"", ""answer"", 666)
foo(a=""a"", b=""hello"") # calls foo(""a"", ""hello"", 42)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTYwMDcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/189,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0MzkxNw==,golo-lang,462043917,189,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2019-02-09T13:18:45Z,2019-02-09T13:18:45Z,"Time flies... 
Feel free to reopen the issue with needed.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0MzkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,golo-lang,46373564,192,Macros,jponge,25961,Julien Ponge,,CLOSED,2014-10-21T09:38:08Z,2020-08-28T07:50:50Z,"Wouldn't it be fun to have (hygienic) macros? :smile: 

https://en.wikipedia.org/wiki/Hygienic_macro
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/192/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjMyNjcz,golo-lang,60232673,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T12:42:56Z,2014-10-23T12:42:56Z,"At which stage would you see the macro expansion  ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjMyNjcz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM2NzQw,golo-lang,60236740,192,NA,artpej,693299,Sylvain Desgrais,,NA,2014-10-23T13:18:36Z,2014-10-23T13:18:36Z,"I love this idea, it will be awesome to have something like http://sweetjs.org/ !

At which stage is a good question (as usual :wink:) : i think it can be done at compile time, I have no idea how it can be done at runtime ...
At compile time it could  be viewed as compiler plugin? (I have in mind the java annotations processors)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM2NzQw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM3OTU3,golo-lang,60237957,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T13:27:36Z,2014-10-23T13:27:36Z,"Also think compile time is the more natural. Seems like just some “simple” AST/IR manipulation (aside from the hygienic problem)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM3OTU3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM5MzQ2,golo-lang,60239346,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T13:37:41Z,2014-10-23T13:37:41Z,"An other reference to harvest ideas from: http://doc.rust-lang.org/0.12.0/guide-macros.html
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjM5MzQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQwMDg4,golo-lang,60240088,192,NA,jponge,25961,Julien Ponge,,NA,2014-10-23T13:42:51Z,2014-10-23T13:42:51Z,"For me it's an AST/IR manipulation work.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQwMDg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQyMzk2,golo-lang,60242396,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T13:59:05Z,2014-10-23T13:59:05Z,"Would you want “importable” macros, or just macros defined in the current module ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQyMzk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQyODI4,golo-lang,60242828,192,NA,jponge,25961,Julien Ponge,,NA,2014-10-23T14:01:44Z,2014-10-23T14:01:44Z,"> Would you want “importable” macros, or just macros defined in the current module ?

Importable is more interesting, don't you think so?=
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQyODI4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQzMDgz,golo-lang,60243083,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-23T14:03:16Z,2014-10-23T14:03:16Z,"of course, but also harder to do... probably more than just AST manipulation
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQzMDgz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQzNTc1,golo-lang,60243575,192,NA,jponge,25961,Julien Ponge,,NA,2014-10-23T14:06:30Z,2014-10-23T14:06:30Z,"Yep, the parser work is more involved...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwMjQzNTc1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0Mzk0MDc5,golo-lang,64394079,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-25T12:44:28Z,2014-11-25T12:44:28Z,"Here are some ideas about a possible macro implementation, for discussion.

A low level macro is a “callable” (static method, or single method interface, to be defined) that is “discoverable” at compile time. This callable take a IR subtree and returns a new (or modified) IR subtree.

The Golo parser is modified to identify macro calls, and thus adds a new node in the AST/IR (say `MacroInvocation`) containing the macro name and the subtree on which it will be applied.

A new visitor (say `MacroExpansionGoloIrVisitor`) then transform the IR tree by searching `MacroInvocation` nodes and replacing them with the result of the application of the corresponding macro. The resulting IR tree is then compiled as usual.

An new macro definition language should be defined (maybe using predefined low level macros) to ease the creation of low level macros, that could be compiled in a preliminary step. See for example Caml, Rust or sweetjs macro languages.

How the available macros are made discoverable to the compiler is yet to be defined.

As a side note, a `GoloSourceGoloIrVisitor`, serializing an IR tree as golo source code could be useful for debugging macros expansion. It could also be used as a golo pretty printer.

Some references:
- [Macros in JS](http://sweetjs.org/): mini language with an independent pre-compilation
  step,
- [Macros in Rust](http://doc.rust-lang.org/0.12.0/guide-macros.html) mini
  language macro definition integrated in the main language, no pre-compilation
  required,
- [Macros in Python](https://github.com/lihaoyi/macropy): regular python
  function expanded at import time (use the special import hook),
- [Macros in Caml](http://caml.inria.fr/pub/docs/tutorial-camlp4/index.html)
  mini language with a separate pre-compile step
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0Mzk0MDc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0Mzk4NDk1,golo-lang,64398495,192,NA,jponge,25961,Julien Ponge,,NA,2014-11-25T13:23:54Z,2014-11-25T13:23:54Z,"Makes sense as an approach :+1:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0Mzk4NDk1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDA5MDgy,golo-lang,64409082,192,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-11-25T14:44:14Z,2014-11-25T14:44:14Z,I can't wait ;),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDA5MDgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDM3MTkz,golo-lang,64437193,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-25T17:23:54Z,2014-11-25T17:23:54Z,":smile:

I started a pretty printer, just to warm up…
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDM3MTkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDM5MTI3,golo-lang,64439127,192,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-11-25T17:35:45Z,2014-11-25T17:35:45Z,":)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY0NDM5MTI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzU0MDMz,golo-lang,66754033,192,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-12T10:08:47Z,2014-12-12T10:08:47Z,"Some (very generic) use cases:
- code generation to avoid boiler plate
- syntax extension: e.g. adding operators
- pattern matching and restructuring
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzU0MDMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/192,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4MzM0OQ==,golo-lang,682383349,192,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T07:50:50Z,2020-08-28T07:50:50Z,I think this is done 😉 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4MzM0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,golo-lang,46818505,195,New direct/reversed infix application operators,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-10-25T17:58:09Z,2016-02-24T13:57:35Z,"What about adding direct/reversed infix application operators. As an example (using caml symbols), 
- the direct application operator `<|` is defined as: `f <| x = f(x)` with right priority,
- the reverse application operator `|>` is defined as: `x |> f = f(x)` with left priority,
  Such that a function call:

```
h(g(f (x)))
```

can be written

```
h <| g <| f<| x
```

or

```
x |> f |> g |> h
```

(Unix like)

What do you think?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/195/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTY0NzU1,golo-lang,60564755,195,NA,jponge,25961,Julien Ponge,,NA,2014-10-27T09:03:34Z,2014-10-27T09:03:34Z,"Why not. How does it work with more than 1 parameter?

In any case it's worth exploring!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTY0NzU1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTc1NTY5,golo-lang,60575569,195,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-27T10:50:53Z,2014-10-27T10:50:53Z,"For easy composing of functions, they should have _only one_ argument (which can be a tuple :smile:).
However, all this can already be written as 

``` golo
f:andThen(g):andThen(h)(x)
```

e.g.

``` golo
let f = |x| -> x + 1
let g = |x| -> 2 * x
let h = |x| -> ""answer: "" + x
require(h(g(f(20))) == ""answer: 42"", ""err"")
require(f:andThen(g):andThen(h)(20) == ""answer: 42"", ""err"")
```

or using a HOF to do the hard work:

``` golo
let pipe = |funcs...| -> atoList(funcs): reduce(
  |x| -> x,
  |f, g| -> f:andThen(g)
)
require(pipe(f, g, h)(20) == ""answer: 42"", ""err"")
```

So it may not be necessary after all
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTc1NTY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyMzYy,golo-lang,60592362,195,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-27T13:33:48Z,2014-10-27T13:33:48Z,"Btw I'm currently builing a golo lib with useful hof and generic generators, with among other things this pipe function, a curry/uncurry one, and one to convert n-ary functions into a unary function taking a tuple and the other way (useful for composing)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyMzYy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyNjMw,golo-lang,60592630,195,NA,jponge,25961,Julien Ponge,,NA,2014-10-27T13:36:08Z,2014-10-27T13:36:08Z,"You're awesome!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyNjMw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyNzkz,golo-lang,60592793,195,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-27T13:37:28Z,2014-10-27T13:37:28Z,":smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyNzkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyODIz,golo-lang,60592823,195,NA,jponge,25961,Julien Ponge,,NA,2014-10-27T13:37:44Z,2014-10-27T13:37:44Z,"That being said you can experiment with the application operators if you want.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTkyODIz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/195,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTk0Mjgy,golo-lang,60594282,195,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-10-27T13:48:18Z,2014-10-27T13:48:18Z,"Of course, just for fun. And to train processing AST skills since this could also be another use case for macros.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNTk0Mjgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,golo-lang,48091161,198,Property-style methods,jponge,25961,Julien Ponge,,CLOSED,2014-11-07T15:08:37Z,2016-03-21T10:33:57Z,"Golo currently does no magic on method resolution. 

We _could_ offer a shorter property-style method syntax such that:

``` golo
foo: getBar(): getBaz(): setThat(123)
```

could be written as:

``` golo
foo: bar: baz: that(123)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/198/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTU3MDg1,golo-lang,62157085,198,NA,jponge,25961,Julien Ponge,,NA,2014-11-07T15:09:01Z,2014-11-07T15:09:01Z,"Just an idea... this is all open for comments!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTU3MDg1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTc2OTUx,golo-lang,62176951,198,NA,artpej,693299,Sylvain Desgrais,,NA,2014-11-07T17:09:35Z,2014-11-07T17:09:35Z,":+1:  great idea

maybe more like this : 

``` golo
foo: bar(): baz(): that(123)
```

like Dynamic Objects
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTc2OTUx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTgzMTk1,golo-lang,62183195,198,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-07T17:40:35Z,2014-11-07T17:40:35Z,"You mean when using Java object providing get/set methods? Seems good to me. 

:+1: for @artpej to keep consistency with DynamicObject and struct 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTgzMTk1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTg0MjE3,golo-lang,62184217,198,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-07T17:47:35Z,2014-11-07T17:47:35Z,"Btw such code is a message chain smell (see law of Demeter) :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTg0MjE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzIzOTgw,golo-lang,62323980,198,NA,jponge,25961,Julien Ponge,,NA,2014-11-09T22:54:32Z,2014-11-09T22:54:32Z,"Agree with Sylvain on keeping the parens.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzIzOTgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODkxMjE5,golo-lang,65891219,198,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-06T09:36:16Z,2014-12-06T09:36:16Z,"It would be great to have this in 1.2, if time allows it... (but winter is coming...)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODkxMjE5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MTE5MzA2,golo-lang,66119306,198,NA,jponge,25961,Julien Ponge,,NA,2014-12-08T14:03:32Z,2014-12-08T14:03:32Z,"No need to rush, this can wait for 1.3 or 2.0 (depending on how we will schedule releases)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MTE5MzA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzExMDM5,golo-lang,66311039,198,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-09T16:29:53Z,2014-12-09T16:29:53Z,"The comment was mainly for the joke
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzExMDM5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzI2ODUy,golo-lang,66326852,198,NA,artpej,693299,Sylvain Desgrais,,NA,2014-12-09T17:58:25Z,2014-12-09T17:58:25Z,"It could be fun to expose java setters as with the builder pattern when it is possible  (if the setter returns void):

``` java
public class MyPojo {

  private String firstName;
  private String lastName;

  public void setFirstName(String name) {
    this.firstname = name;
  }

  public void setLastName(String name) {
    this.lastName = name;
  }
}
```

could be used like this : 

``` golo
let pojo = MyPojo(): firstName(""John""): lastName(""Doe"")
```

What do you think?

(Personnal reminder : a getter on a primitive boolean value is often exposed with the prefix `is` (`isValid()` instead of `getValid()`)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzI2ODUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzMyMzQ2,golo-lang,66332346,198,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-09T18:32:12Z,2014-12-09T18:32:12Z,":+1:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzMyMzQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzM5OTE3,golo-lang,66339917,198,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-12-09T19:17:33Z,2014-12-09T19:17:33Z,"+1

On Tue Dec 09 2014 at 7:32:13 PM Yannick Loiseau notifications@github.com
wrote:

> [image: :+1:]
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/198#issuecomment-66332346.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzM5OTE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzY0MTcy,golo-lang,66364172,198,NA,jponge,25961,Julien Ponge,,NA,2014-12-09T21:47:54Z,2014-12-09T21:47:54Z,"It's not too hard to hack with method handles.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzY0MTcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/198,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTIxNjc0NA==,golo-lang,199216744,198,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-03-21T10:29:46Z,2016-03-21T10:29:46Z,"shouldn't be closed? via #332 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTIxNjc0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/199,https://api.github.com/repos/eclipse-archived/golo-lang/issues/199,golo-lang,48195447,199,REPL,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2014-11-09T08:32:36Z,2016-12-14T13:38:40Z,"It would be awesome to have a REPL (_read eval print loop_, i.e. an interactive interpreter) for Golo.

For simple single-line expressions, a simple `while true readln` + `EvaluationEnvironment.run` could do the trick, but being able to define functions, structures and augments in this top level repl would be very valuable.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/199/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/199,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzIzOTE1,golo-lang,62323915,199,NA,jponge,25961,Julien Ponge,,NA,2014-11-09T22:53:19Z,2014-11-09T22:53:19Z,"Oh yes, that would be great :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzIzOTE1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/199,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzY4MDc4,golo-lang,62368078,199,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-10T10:46:30Z,2014-11-10T10:46:30Z,"I’ve already done some tests, but it’s a lot less obvious than it first seems…
- an anonymous module must be built _incrementally_
- the `main` should be to just print the evaluation of the entered expression, of update the module if it is a declaration
- the reader should be contextual, since we would like to be able to enter a definition expression spanning several lines
- …
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMzY4MDc4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/200,https://api.github.com/repos/eclipse-archived/golo-lang/issues/200,golo-lang,48264225,200,Golo doc: multiple augmentations,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-11-10T13:29:06Z,2015-06-30T13:52:11Z,"When defining multiples augmentations on the same target, the generated documentation only takes the last one into account.

E.g. given:

``` golo
augment SomeTarget {
  function foo = |this| -> ""foo""
}

augment SomeTarget {
  function bar = |this| -> ""bar""
}
```

only `bar` is documented, while it is valid golo code (although maybe not good style).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/200/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,golo-lang,48539409,202,Error using a reference to a polymorphic function,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-11-12T17:41:37Z,2014-11-21T22:12:02Z,"Using a reference to a polymorphic (overloaded) function in a higher order function exhibits a random exception when trying to resolve it.

Here is a snippet showing the bug:

``` golo
module testCall

#== Some test functions

# standard (monomorphic)
function bar = |a, b| -> a + b

# polymorphic (overloaded)
function foo = |a, b| -> a + b

function foo = |t| -> t:get(0) + t:get(1)

#== HOF to apply functions

function apply = |f, a, b| -> f(a, b)

function apply2 = |f, args| -> f:invokeWithArguments(args)

function apply3 = |f, args...| -> f:invokeWithArguments(args)


#==
function main = |args| {

  # overloading is ok
  require(foo(1, 2) == 3, ""err"")
  require(foo([1, 2]) == 3, ""err"")

  # apply works on lambda
  require(apply(|a, b| -> a + b, 1, 2) == 3, ""err"")
  require(apply(|a, b| -> foo(a, b), 1, 2) == 3, ""err"")

  # apply2 works on lambda
  require(apply2(|a, b| -> a + b, array[1, 2]) == 3, ""err"")
  require(apply2(|a, b| -> foo(a, b), array[1, 2]) == 3, ""err"")

  # and so apply3 on lambda
  require(apply3(|a, b| -> a + b, 1, 2) == 3, ""err"")
  require(apply3(|a, b| -> foo(a, b), 1, 2) == 3, ""err"")

  # using a ref to a monomorphic function is OK
  require(apply(^bar, 1, 2) == 3, ""err"")
  require(apply2(^bar, array[1, 2]) == 3, ""err"")
  require(apply3(^bar, 1, 2) == 3, ""err"")

  # but using a ref on polymorphic function... blam (sometimes)
  # IllegalArgumentException: target and fallback types must match: 
  #   (MethodHandle,Object)Object != (MethodHandle,Object,Object)Object
  # or 
  # WrongMethodTypeException: 
  #   cannot convert MethodHandle(Object)Object to (Object,Object)Object
  try {
    require(apply(^foo, 1, 2) == 3, ""err"")
  } catch (e) {
    println(e)
  }
  try {
    require(apply2(^foo, array[1, 2]) == 3, ""err"")
  } catch (e) {
    println(e)
  }
  try {
    require(apply3(^foo, 1, 2) == 3, ""err"")
  } catch (e) {
    println(e)
  }
}
```

Calling this script sometimes shows exceptions, sometimes no. It's all or nothing.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/202/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyODQ5MTQz,golo-lang,62849143,202,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-13T06:49:57Z,2014-11-13T06:49:57Z,"I'm using  golo 1.2.0-Snapshot. Same result using golo compile/run or golo golo. Same result using vanilla-golo. Same result using JDK7 or JDK8

It looks like a JVM optimisation issue, but I'm not well versed in that magic (yet).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyODQ5MTQz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyODYyOTE3,golo-lang,62862917,202,NA,artpej,693299,Sylvain Desgrais,,NA,2014-11-13T09:21:04Z,2014-11-13T09:21:04Z,"I think it is not really a JVM optimisation issue. Function reslolution `^` use `Class.getDeclaredMethods()` to find the corresponding function. 

https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getDeclaredMethods() 

According to the javadoc : 

_...The elements in the array returned are_ **not sorted** _and are_ **not in any particular order** _..._

If we don't know the function arity the first finded method with the correct name is choosen.

You can expicitly specify witch method to keep using the predifined `fun` function : 

http://golo-lang.org/documentation/next/index.html#_closures_2

``` golo
  fun(""foo"",testCall.module ,2)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYyODYyOTE3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE2NjQx,golo-lang,63016641,202,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-14T06:41:06Z,2014-11-14T06:41:06Z,"Well done... Sometimes I'm too dumb: obviously, without a call, we can't know the arity, and thus we can't choose the function. 

On the other hand, using the `fun` function for every HOF argument passing seems cumbersome and looses some genericity, and using it only if necessary is maybe worse (breaks module encapsulation, heterogeneous code, ...).

In a case like this one, maybe using a variadic function, with checks and tests on the number of passed arguments will fit the bill, but it's a lot less elegant IMO. However, I don't see other solution. Even default  arguments would not work in the sample above. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE2NjQx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE3MzQz,golo-lang,63017343,202,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-14T06:53:30Z,2014-11-14T06:53:30Z,"Something like:

``` golo
function foo2 = |a, args...| -> match {
  when args: size() == 0 then a: get(0) + a: get(1)
  when args: size() == 1 then a + args: get(0)
  otherwise raise(""Invalid number of Arguments"", IllegalArgumentException())
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE3MzQz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE5MzAy,golo-lang,63019302,202,NA,artpej,693299,Sylvain Desgrais,,NA,2014-11-14T07:26:28Z,2014-11-14T07:26:28Z,"IMHO the executed code should stay determinist. A random issue should not appear. Maybe we can sort polymorphic functions  by arity and always return the same... (think aloud)

I'm currently working on the performance issue detected with the decorators implementation (https://github.com/golo-lang/golo-lang/pull/148#issuecomment-51620687). A part of the problem is that the closure reference (or a function reference) is resolved when the reference is created. I'm currently investigate a way to create a real `FunctionReference` object that contains all needed things to be able to  resolve the effective function at call time.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE5MzAy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/202,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE5OTEz,golo-lang,63019913,202,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-11-14T07:36:02Z,2014-11-14T07:36:02Z,":+1: for deterministic code, but I rather raise an `AmbiguousFunctionReferenceException`. Indeed, from a user pov using the first one could works as expected or not. And as the Zen of Python says: In the face of ambiguity, refuse the temptation to guess. :-P
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDE5OTEz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/211,https://api.github.com/repos/eclipse-archived/golo-lang/issues/211,golo-lang,50510088,211,utf-8 support,guai,220780,,,CLOSED,2014-12-01T10:46:10Z,2015-06-30T13:52:11Z,"It seams that golo does not allow nonASCII in function names, modules, variables. Java otoh does. How will they interoperate?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/211/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/211,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDYyNjQ2,golo-lang,65062646,211,NA,jponge,25961,Julien Ponge,,NA,2014-12-01T13:14:08Z,2014-12-01T13:14:08Z,"Golo identifiers are indeed restricted to `[ ""A""-""Z"", ""a""-""z"", ""_"", ""$"", ""0""-""9"" ]`.

Why is that a problem for you?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MDYyNjQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/211,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzY2MDA3,golo-lang,66766007,211,NA,jponge,25961,Julien Ponge,,NA,2014-12-12T12:21:09Z,2014-12-12T12:21:09Z,"Fixed by #220 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzY2MDA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,golo-lang,50973605,216,Module level state variable is captured inside the closures,artpej,693299,Sylvain Desgrais,,CLOSED,2014-12-04T13:13:12Z,2015-06-30T13:52:11Z,"It seems that in the following code, `counter` is considered as an enclosed variable inside the closure : 

``` golo
module bug

var counter = 0

function func = {
  counter = counter + 1
  return {
    counter = counter + 1 # try to access to an enclosed variable
  }
}

function main = |args| {
  func()()
}
```

this code throws : 

```
[error] In Golo module: bug.golo
[error] Assigning `counter` at {line=11, column=7} but it is a constant reference
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/216/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjMwMzk2,golo-lang,65630396,216,NA,jponge,25961,Julien Ponge,,NA,2014-12-04T13:21:53Z,2014-12-04T13:21:53Z,"Good catch!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjMwMzk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjMxMDg3,golo-lang,65631087,216,NA,jponge,25961,Julien Ponge,,NA,2014-12-04T13:28:09Z,2014-12-04T13:28:09Z,"I'm having a look.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjMxMDg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjcyMjcx,golo-lang,65672271,216,NA,jponge,25961,Julien Ponge,,NA,2014-12-04T17:48:56Z,2014-12-04T17:48:56Z,"@Artpej see #217 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjcyMjcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzUzNzkz,golo-lang,65753793,216,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-05T06:49:56Z,2014-12-05T06:49:56Z,"BTW, this fails in Python too... (aaahh,pythonistas are back)
e.g.

``` python
counter = 0

def func():
    counter = counter + 1
    def inner():
        counter = counter + 1
    return inner

func()()
```

yields a `UnboundLocalError: local variable 'counter' referenced before assignment`

while 

``` python
counter = [0]

def func():
    counter[0] = counter[0] + 1
    def inner():
        counter[0] = counter[0] + 1
    return inner

func()()
```

works.

``` golo
let counter = list[0]

function func = {
  counter: set(0, counter: get(0) + 1)
  return { 
    counter: set(0, counter: get(0) + 1)
  }
}
```

should work (can't test right now).

In other words, references to bounded variables are immutable, so not assignable. Python conclude that it is ""not the same"" `counter`, thus a local one hiding the global one closed, and raise an exception since it is not initialized yet. Using a list to contain the value works, since the ref. to the list is not changed. The same trick works in golo (in a test I used a `struct Ref = {v}` to do the trick).

Other langages allow closed references to be changed (see Lisp family, EcmaScript, ...)
I don't know what behavior is wanted here, but I don't find the current one that disturbing.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzUzNzkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzU0MDU2,golo-lang,65754056,216,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-05T06:54:31Z,2014-12-05T06:54:31Z,"As a side note, the closed list trick is a (not un)common idiom in python, although I admit not very readable at first sight. Like all patterns, it compensates for language flaws :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzU0MDU2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzU2MDE0,golo-lang,65756014,216,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-05T07:28:00Z,2014-12-05T07:28:00Z,"I just realized that I maybe missed the point. The problem was closure vs. global state, wasn't it ?
Well, actually, in Python, global (module level) state used in a function is always a closure. And any assignment to a non-locally bound variable creates a new local variable, hiding de more global one, thus the previous error. 

If it's not the desired behavior, you have to say it explicitly (since it's “better than implicit”, and global states are baaaaaad) with the global keyword.

So

``` python
counter = 0

def func():
    global counter
    counter = counter + 1
    def inner():
        global counter
        counter = counter + 1
    return inner

func()()
print(counter)
```

works as expected (note the `global` on the _use_ of the ref, not the declaration). I tend to like this approach, but I'm biased :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzU2MDE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzYxMzg4,golo-lang,65761388,216,NA,jponge,25961,Julien Ponge,,NA,2014-12-05T08:41:37Z,2014-12-05T08:41:37Z,":smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzYxMzg4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/216,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzg2NDEz,golo-lang,65786413,216,NA,jponge,25961,Julien Ponge,,NA,2014-12-05T12:58:16Z,2014-12-05T12:58:16Z,"Fixed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzg2NDEz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/218,https://api.github.com/repos/eclipse-archived/golo-lang/issues/218,golo-lang,51096355,218,Bad reference lookups before initialization,jponge,25961,Julien Ponge,,CLOSED,2014-12-05T13:01:59Z,2015-06-30T13:52:11Z,"Code such as:

``` golo
module Jumbo

function main = |args| {
  var foo = foo + 1
}
```

causes bytecode errors:

```
$ golo golo --files dumb.golo 
Exception in thread ""main"" java.lang.IllegalAccessException: no such method: Jumbo.main(String[])void/invokeStatic
    at java.lang.invoke.MemberName.makeAccessException(MemberName.java:869)
    at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:990)
    at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1382)
    at java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:777)
    at fr.insalyon.citi.golo.cli.Main.callRun(Main.java:454)
    at fr.insalyon.citi.golo.cli.Main.golo(Main.java:494)
    at fr.insalyon.citi.golo.cli.Main.main(Main.java:215)
Caused by: java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    Jumbo.main([Ljava/lang/String;)V @0: aload_1
  Reason:
    Type top (current frame, locals[1]) is not assignable to reference type
  Current Frame:
    bci: @0
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { }
  Bytecode:
    0x0000000: 2b04 b800 19ba 0025 0000 4c01 b1       

    at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
    at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:962)
    at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:987)
    ... 5 more
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/218/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/218,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzkxODY2,golo-lang,65791866,218,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-05T13:51:05Z,2014-12-05T13:51:05Z,"What is the expected behavior? An compilation error?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NzkxODY2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/218,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzk1OTQ4,golo-lang,65795948,218,NA,jponge,25961,Julien Ponge,,NA,2014-12-05T14:25:41Z,2014-12-05T14:25:41Z,"That would make sense to have a compilation error.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzk1OTQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/219,https://api.github.com/repos/eclipse-archived/golo-lang/issues/219,golo-lang,51112353,219,Calling an anonymous function,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2014-12-05T15:42:36Z,2015-06-30T13:52:11Z,"It's not possible to call directly an anonymous function

``` golo
let r = (|a| -> a): invokeWithArguments(1)
println(r)
```

display 1 which is ok, but

``` golo
let r = (|a| -> a)(1)
println(r)
```

displays `MethodHandle(Object)Object` which is weired.

Even worse, 

``` golo
println((|a| -> a): invokeWithArguments(1))
```

displays 1, but

``` golo
println((|a| -> a)(1))
```

raises a syntax error...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/219/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/219,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODA3Mzgy,golo-lang,65807382,219,NA,jponge,25961,Julien Ponge,,NA,2014-12-05T15:44:34Z,2014-12-05T15:44:34Z,"Wanna investigate it Yannick?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODA3Mzgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/219,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODA4MzY5,golo-lang,65808369,219,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2014-12-05T15:51:01Z,2014-12-05T15:51:01Z,"I can have a look
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODA4MzY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,golo-lang,52961803,227,Problem building Golo on Windows,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2014-12-27T17:37:23Z,2015-06-30T13:52:11Z,"when building Golo on Windows 8.1

```
    Tests run: 616, Failures: 3, Errors: 0, Skipped: 145, Time elapsed: 6.8 sec <<<
    FAILURE! - in TestSuite
    generate_bytecode(fr.insalyon.citi.golo.compiler.CompilationTest)  Time elapsed:
     0.016 sec  <<< FAILURE!
    fr.insalyon.citi.golo.compiler.parser.TokenMgrError: Lexical error at line 3, co
    lumn 10.  Encountered: ""\u201e"" (8222), after : """"
            at fr.insalyon.citi.golo.compiler.parser.GoloParserTokenManager.getNextT
    oken(GoloParserTokenManager.java:7079)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.jj_consume_token(Gol
    oParser.java:3491)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.LetOrVar(GoloParser.
    java:2063)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.ToplevelDeclaration(
    GoloParser.java:550)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.CompilationUnit(Golo
    Parser.java:336)
            at fr.insalyon.citi.golo.compiler.GoloCompiler.parse(GoloCompiler.java:1
    66)
            at fr.insalyon.citi.golo.compiler.GoloCompiler.compile(GoloCompiler.java
    :100)
            at fr.insalyon.citi.golo.compiler.CompilationTest.generate_bytecode(Comp
    ilationTest.java:51)

    convert_then_apply_visitors(fr.insalyon.citi.golo.compiler.ParseTreeToGoloIrAndV
    isitorsTest)  Time elapsed: 0 sec  <<< FAILURE!
    fr.insalyon.citi.golo.compiler.parser.TokenMgrError: Lexical error at line 3, co
    lumn 10.  Encountered: ""\u201e"" (8222), after : """"
            at fr.insalyon.citi.golo.compiler.parser.GoloParserTokenManager.getNextT
    oken(GoloParserTokenManager.java:7079)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.jj_consume_token(Gol
    oParser.java:3491)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.LetOrVar(GoloParser.
    java:2063)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.ToplevelDeclaration(
    GoloParser.java:550)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.CompilationUnit(Golo
    Parser.java:336)
            at fr.insalyon.citi.golo.compiler.ParseTreeToGoloIrAndVisitorsTest.conve
    rt_then_apply_visitors(ParseTreeToGoloIrAndVisitorsTest.java:50)

    check_parse(fr.insalyon.citi.golo.compiler.parser.ParserSanityTest)  Time elapse
    d: 0 sec  <<< FAILURE!
    fr.insalyon.citi.golo.compiler.parser.TokenMgrError: Lexical error at line 3, co
    lumn 10.  Encountered: ""\u201e"" (8222), after : """"
            at fr.insalyon.citi.golo.compiler.parser.GoloParserTokenManager.getNextT
    oken(GoloParserTokenManager.java:7079)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.jj_consume_token(Gol
    oParser.java:3491)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.LetOrVar(GoloParser.
    java:2063)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.ToplevelDeclaration(
    GoloParser.java:550)
            at fr.insalyon.citi.golo.compiler.parser.GoloParser.CompilationUnit(Golo
    Parser.java:336)
            at fr.insalyon.citi.golo.compiler.parser.ParserSanityTest.check_parse(Pa
    rserSanityTest.java:48)


    Results :

    Failed tests:
      CompilationTest.generate_bytecode:51 » TokenMgr Lexical error at line 3, colum
    ...
      ParseTreeToGoloIrAndVisitorsTest.convert_then_apply_visitors:50 » TokenMgr Lex
    ...
      ParserSanityTest.check_parse:48 » TokenMgr Lexical error at line 3, column 10.
    ...

    Tests run: 616, Failures: 3, Errors: 0, Skipped: 145

    [INFO] ------------------------------------------------------------------------
    [INFO] BUILD FAILURE
    [INFO] ------------------------------------------------------------------------
    [INFO] Total time: 33.402 s
    [INFO] Finished at: 2014-12-27T18:34:53+01:00
    [INFO] Final Memory: 28M/324M
    [INFO] ------------------------------------------------------------------------
    [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.
    17:test (default-test) on project golo: There are test failures.
    [ERROR]
    [ERROR] Please refer to C:\Users\Philippe\Documents\GitHub\golo-lang\target\sure
    fire-reports for the individual test results.
    [ERROR] -> [Help 1]
    [ERROR]
    [ERROR] To see the full stack trace of the errors, re-run Maven with the -e swit
    ch.
    [ERROR] Re-run Maven using the -X switch to enable full debug logging.
    [ERROR]
    [ERROR] For more information about the errors and possible solutions, please rea
    d the following articles:
    [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureExc
    eption
    rake aborted!
    Command failed with status (1): [mvn clean install -P !bootstrapped...]
    C:/Users/Philippe/Documents/GitHub/golo-lang/Rakefile:113:in `block (2 levels) i
    n <top (required)>'
    Tasks: TOP => special:bootstrap
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/227/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjAyOTA4,golo-lang,68202908,227,NA,jponge,25961,Julien Ponge,,NA,2014-12-28T09:55:54Z,2014-12-28T09:55:54Z,"Wrong system character encoding?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjAyOTA4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjAyOTQ5,golo-lang,68202949,227,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-12-28T09:58:17Z,2014-12-28T09:58:17Z,"something like that, @jeffmaury has the same issue https://groups.google.com/forum/#!topic/golo-lang/G410mYjgKYo
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjAyOTQ5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjExMDU2,golo-lang,68211056,227,NA,jponge,25961,Julien Ponge,,NA,2014-12-28T16:08:08Z,2014-12-28T16:08:08Z,"@k33g @jeffmaury Would forcing the JVM with `java -Dfile.encoding=UTF-8` help?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjExMDU2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjExODIw,golo-lang,68211820,227,NA,jponge,25961,Julien Ponge,,NA,2014-12-28T16:33:32Z,2014-12-28T16:33:32Z,"Is this working?

``` diff
diff --git a/src/main/java/fr/insalyon/citi/golo/compiler/GoloCompiler.java b/src/main/java/fr/insalyon/citi/golo/compiler/GoloCompiler.java
index b492ea3..62801b8 100644
--- a/src/main/java/fr/insalyon/citi/golo/compiler/GoloCompiler.java
+++ b/src/main/java/fr/insalyon/citi/golo/compiler/GoloCompiler.java
@@ -23,6 +23,8 @@ import fr.insalyon.citi.golo.compiler.parser.GoloParser;
 import fr.insalyon.citi.golo.compiler.parser.ParseException;

 import java.io.*;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -69,7 +71,7 @@ public class GoloCompiler {
    * @return the parser.
    */
   public final GoloParser initParser(InputStream sourceCodeInputStream) {
-    return initParser(new InputStreamReader(sourceCodeInputStream));
+    return initParser(new InputStreamReader(sourceCodeInputStream, StandardCharsets.UTF_8));
   }

   /**
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjExODIw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjEyMjg5,golo-lang,68212289,227,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2014-12-28T16:49:06Z,2014-12-28T16:49:06Z,"no :cry: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjEyMjg5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NDQwMjg3,golo-lang,68440287,227,NA,guai,220780,,,NA,2014-12-31T12:56:20Z,2014-12-31T12:56:20Z,"Hit same error. Dumped all tokens to file https://dl.dropboxusercontent.com/u/92229574/golo-tokens.txt
Maybe it will help to find exact point.
Breakpoint was at line 3492 at GoloParser.java
Last file hit in fr.insalyon.citi.golo.compiler.CompilationTest#generate_bytecode was ""variables.golo""
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NDQwMjg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIwMjE0,golo-lang,68520214,227,NA,jponge,25961,Julien Ponge,,NA,2015-01-02T11:16:16Z,2015-01-02T11:16:16Z,"@guai @k33g did you check the #229 PR branch with @jeffmaury's code?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIwMjE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIwNzg2,golo-lang,68520786,227,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-02T11:28:09Z,2015-01-02T11:28:09Z,"I've just finished to install W10, try the PR branch and yes it's ok :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIwNzg2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/227,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIxMDQ4,golo-lang,68521048,227,NA,jponge,25961,Julien Ponge,,NA,2015-01-02T11:34:32Z,2015-01-02T11:34:32Z,"Closed by #229 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NTIxMDQ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,golo-lang,54156024,235,Structure augmentations do not pass into the templates,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2015-01-13T06:34:34Z,2015-12-16T10:57:47Z,"This is ok :

``` golo
function ViewHelpers = {
  return DynamicObject()
    : define(""plop"", |this| {
        println(""you're calling plop..."")
        return ""PLOP!!!""
    })
}

function helloViewTpl = -> """"""
<%@params entities, tools %>
<%= tools: plop() %>
<hr>
<h2><%= entities: get(0) %></h2>
""""""

let helloView = gololang.TemplateEngine(): compile(helloViewTpl())
let tools = ViewHelpers()
helloView(list[""Bob Morane""]  , tools)
```

But if I replace DynamicObject with augmented structure, `plop` method isn't seen when the compiled template is executed:

``` golo
struct viewHelpers = {
  foo
}

augment viewHelpers {
  function plop = |this| {
    println(""you're calling plop..."")
    return ""PLOP!!!""
  }
}

let helloView = gololang.TemplateEngine(): compile(helloViewTpl())
let tools = viewHelpers()
helloView(list[""Bob Morane""]  , tools)
```

`Exception in thread ""main"" java.lang.NoSuchMethodError: class views.types.viewHelpers::plop`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/235/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzAzNDc1,golo-lang,69703475,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-13T07:02:50Z,2015-01-13T07:02:50Z,"Is it a regression?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzAzNDc1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzA5ODEw,golo-lang,69709810,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-13T08:20:30Z,2015-01-13T08:20:30Z,"In fact I don't know, it's the first time I try

On Tue, Jan 13, 2015 at 8:02 AM, Yannick Loiseau notifications@github.com
wrote:

> Is it a regression?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/235#issuecomment-69703475.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzA5ODEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzA5OTM1,golo-lang,69709935,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-13T08:21:44Z,2015-01-13T08:21:44Z,"... the first try I test this use case

On Tue, Jan 13, 2015 at 9:20 AM, Philippe Charrière ph.charriere@gmail.com
wrote:

> In fact I don't know, it's the first time I try
> 
> On Tue, Jan 13, 2015 at 8:02 AM, Yannick Loiseau <notifications@github.com
> 
> > wrote:
> > 
> > Is it a regression?
> > 
> > —
> > Reply to this email directly or view it on GitHub
> > https://github.com/golo-lang/golo-lang/issues/235#issuecomment-69703475
> > .
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzA5OTM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzExMTIw,golo-lang,69711120,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-13T08:33:46Z,2015-01-13T08:33:46Z,"It's because the augmentation is not visible from within the module.

Are you missing a `<%@import foo.bar.Baz %>` clause?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzExMTIw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzExMzE0,golo-lang,69711314,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-13T08:35:47Z,2015-01-13T08:35:47Z,"oh oh, i'm going to try that after my meeting (my boss is sitting next to
me)

On Tue Jan 13 2015 at 9:33:47 AM Julien Ponge notifications@github.com
wrote:

> It's because the augmentation is not visible from within the module.
> 
> Are you missing a `<%@import foo.bar.Baz %>` clause?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/235#issuecomment-69711120.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzExMzE0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzQ2MzMz,golo-lang,69746333,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-13T13:51:32Z,2015-01-13T13:51:32Z,"I'm afraid that even with the import I've got a problem
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzQ2MzMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzU5Mzk2,golo-lang,69759396,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-13T15:17:47Z,2015-01-13T15:17:47Z,"Then we need to investigate :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NzU5Mzk2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5Nzk4NjY2,golo-lang,69798666,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-13T18:59:56Z,2015-01-13T18:59:56Z,"It's also broken in v1.1.0
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5Nzk4NjY2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODgyOTc5,golo-lang,69882979,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T08:18:02Z,2015-01-14T08:18:02Z,"BTW, it works on struct fields access. Only failed on augmentation...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODgyOTc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODg4NjY5,golo-lang,69888669,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-14T09:17:06Z,2015-01-14T09:17:06Z,"it's a feature ;) I'll use DynamicObjects instead

On Wed Jan 14 2015 at 9:18:03 AM Yannick Loiseau notifications@github.com
wrote:

> BTW, it works on struct fields access. Only failed on augmentation...
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/235#issuecomment-69882979.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODg4NjY5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODkwOTk5,golo-lang,69890999,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T09:38:32Z,2015-01-14T09:38:32Z,"The template engine creates an anonymous `EvaluationEnvironment` to “privately” execute the generated code (sandbox like). Seems like the augmentations are not visible in this environment. 

Why do you say it’s a feature ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODkwOTk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODkyMzcz,golo-lang,69892373,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-14T09:50:34Z,2015-01-14T09:50:34Z,"Augmentations shall be visible in that sandbox.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODkyMzcz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk2MzAy,golo-lang,69896302,235,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-01-14T10:24:26Z,2015-01-14T10:24:26Z,"@Yannick feature : golo humour ;)

On Wed Jan 14 2015 at 10:50:38 AM Julien Ponge notifications@github.com
wrote:

> Augmentations shall be visible in that sandbox.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/golo-lang/golo-lang/issues/235#issuecomment-69892373.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk2MzAy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk2Njg3,golo-lang,69896687,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T10:27:50Z,2015-01-14T10:27:50Z,":smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk2Njg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3NTcx,golo-lang,69897571,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T10:35:17Z,2015-01-14T10:35:17Z,"indeed, standard augmentations work, but not the ones defined in the module itself.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3NTcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3ODI0,golo-lang,69897824,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-14T10:37:29Z,2015-01-14T10:37:29Z,"Oh, what if you add a template `import` for the module itself? That should be the fix.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3ODI0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3ODMx,golo-lang,69897831,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T10:37:32Z,2015-01-14T10:37:32Z,"AH... running with `golo golo --files test.golo` fails, but `golo compile test.golo && golo run --module test`      works! (with an `@import test` in the template)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3ODMx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3OTEw,golo-lang,69897910,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-14T10:38:13Z,2015-01-14T10:38:13Z,"@yloiseau Classloader are weird at times :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk3OTEw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk4NzUy,golo-lang,69898752,235,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-01-14T10:45:44Z,2015-01-14T10:45:44Z,"It's not even a “same module” problem. Putting struct, augment and function in a module and the main in another leads to the same behavior. It seems that the anon `EvaluationEngine` can't import the module if it is not previously compiled… weird indeed
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY5ODk4NzUy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDYyNjEz,golo-lang,70062613,235,NA,jponge,25961,Julien Ponge,,NA,2015-01-15T09:53:35Z,2015-01-15T09:53:35Z,"How about with this patch?

``` diff
diff --git a/src/main/java/fr/insalyon/citi/golo/cli/Main.java b/src/main/java/fr/insalyon/citi/golo/cli/Main.java
index 89a18c3..dac8cef 100644
--- a/src/main/java/fr/insalyon/citi/golo/cli/Main.java
+++ b/src/main/java/fr/insalyon/citi/golo/cli/Main.java
@@ -481,8 +481,8 @@ public class Main {

   private static void golo(GoloGoloCommand gologolo) throws Throwable {
     URLClassLoader primaryClassLoader = primaryClassLoader(gologolo.classpath);
-    Thread.currentThread().setContextClassLoader(primaryClassLoader);
     GoloClassLoader loader = new GoloClassLoader(primaryClassLoader);
+    Thread.currentThread().setContextClassLoader(loader);
     Class<?> lastClass = null;
     for (String goloFile : gologolo.files) {
       lastClass = loadGoloFile(goloFile, gologolo.module, loader);
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDYyNjEz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/235,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjIxMQ==,golo-lang,160312211,235,NA,jponge,25961,Julien Ponge,,NA,2015-11-28T15:39:13Z,2015-11-28T15:39:13Z,"One idea that we evoked this summer with @k33g and @yloiseau: making the fallback resolution mechanism stack/caller dependent. For instance if the caller had an import on `foo.bar`, then a fallback resolution would look into it.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjIxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/240,https://api.github.com/repos/eclipse-archived/golo-lang/issues/240,golo-lang,54865445,240,Update the copyright year,jponge,25961,Julien Ponge,,CLOSED,2015-01-20T10:18:29Z,2015-06-30T13:52:11Z,,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/240/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/240,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3ODgxMTc5,golo-lang,77881179,240,NA,jponge,25961,Julien Ponge,,NA,2015-03-09T15:55:27Z,2015-03-09T15:55:27Z,"Done
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3ODgxMTc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/241,https://api.github.com/repos/eclipse-archived/golo-lang/issues/241,golo-lang,54865529,241,Get rid of compilation warnings,jponge,25961,Julien Ponge,,CLOSED,2015-01-20T10:19:15Z,2015-03-03T13:08:26Z,"A few warnings appear while compiling Golo. We should be able to easily get rid of them, even at the cost of mindful `@SuppressWarning` annotations :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/241/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/241,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc2OTQxOTIz,golo-lang,76941923,241,NA,jponge,25961,Julien Ponge,,NA,2015-03-03T13:08:24Z,2015-03-03T13:08:24Z,"Just realized it was already fixed.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc2OTQxOTIz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/245,https://api.github.com/repos/eclipse-archived/golo-lang/issues/245,golo-lang,55783497,245,Better runtime error reporting,jponge,25961,Julien Ponge,,OPEN,2015-01-28T16:58:40Z,2015-11-28T15:18:20Z,"The Golo runtime provides a very crude error reporting in the form of plain old Java exceptions.

We could improve this by:
- giving more explicit messages, possibly with context information
- filtering stack traces to get rid of `LambdaForm` and other noise.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/248,https://api.github.com/repos/eclipse-archived/golo-lang/issues/248,golo-lang,59394939,248,Local struct must be fully qualified to access its class,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-03-01T12:56:59Z,2016-11-19T14:09:01Z,"To access the class object of a locally defined struct, it _must_ be fully qualified, contrary to other classes.
For instance, given the module:

``` golo
module foo

struct Foo = {a}

function main = |args| {
  println(Tuple.class)
  println(String.class)
  println(foo.types.Foo.class)
}
```

outputs the expected:

```
class gololang.Tuple
class java.lang.String
class foo.types.Foo
```

but if we use instead 

``` golo
  println(Foo.class)
```

we got a `BootstrapMethodError`. An explicit `import foo.types` is required, which seems counter intuitive.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/248/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/248,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzg0NDIx,golo-lang,77384421,248,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-05T15:31:13Z,2015-03-05T15:31:13Z,"Is this a feature? :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzg0NDIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/248,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk0Mjgy,golo-lang,77394282,248,NA,jponge,25961,Julien Ponge,,NA,2015-03-05T16:18:19Z,2015-03-05T16:18:19Z,"No, feel free to fix it :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk0Mjgy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/248,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk2ODM1,golo-lang,77396835,248,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-05T16:30:28Z,2015-03-05T16:30:28Z,"Ok, I'll try to have a look...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk2ODM1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,golo-lang,59395347,249,Functions in imported module must be fully qualified to get a reference,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-03-01T13:09:01Z,2016-02-23T12:17:43Z,"To get a reference to a function defined in an imported module using the `^` operator, it _must_ be fully qualified, contrary to its usage.

For instance, given the module:

``` golo
module foo

function bar = -> ""bar in foo""
```

and a module using it:

``` golo
module baz
import foo

function main = |args| {
  println(bar())

  let fqn_ref = ^foo::bar
  println(fqn_ref())

  let ref = ^bar
  println(ref())
}
```

The direct call works as expected, as the fully qualified reference. But the last assignment yields a 
`NoSuchMethodException: bar in class baz`, which seems counter intuitive since it is “visible in the local scope” (or act as if).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/249/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzg0Mzc2,golo-lang,77384376,249,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-05T15:31:02Z,2015-03-05T15:31:02Z,"Is this a feature? :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzg0Mzc2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk0MjA1,golo-lang,77394205,249,NA,jponge,25961,Julien Ponge,,NA,2015-03-05T16:17:54Z,2015-03-05T16:17:54Z,"No, feel free to fix it :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk0MjA1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk2Nzg3,golo-lang,77396787,249,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-05T16:30:16Z,2015-03-05T16:30:16Z,"Ok, I'll try to have a look...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk2Nzg3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk3MjA5,golo-lang,77397209,249,NA,jponge,25961,Julien Ponge,,NA,2015-03-05T16:32:18Z,2015-03-05T16:32:18Z,"Great!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3Mzk3MjA5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NDAyMTMz,golo-lang,77402133,249,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-05T16:54:53Z,2015-03-05T16:54:53Z,"Just wanted to be sure that it's not on purpose (performances or explicitness) that imported modules are not looked up for function references :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NDAyMTMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTMzNzMz,golo-lang,77533733,249,NA,jponge,25961,Julien Ponge,,NA,2015-03-06T09:55:44Z,2015-03-06T09:55:44Z,"Because the bootstrap method yields a constant call site, you need to look into the caller module imports. Same for #248 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTMzNzMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTM2MDUz,golo-lang,77536053,249,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-06T10:14:10Z,2015-03-06T10:14:10Z,"yep, it's the path I'm investigating
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTM2MDUz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/249,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTM2MDk5,golo-lang,77536099,249,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-06T10:14:34Z,2015-03-06T10:14:34Z,"not as trivial as I first thought :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDc3NTM2MDk5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,golo-lang,63957198,254,Extend `to` to functional interfaces,jponge,25961,Julien Ponge,,OPEN,2015-03-24T10:08:05Z,2017-06-28T12:29:22Z,"The `MethodHandle` `to` augmentation allows converting a closure reference to an interface instance object. This delegates a call to `asInterfaceInstance`.

We should also support converting to functional interface objects (`asFunctionalInterface`).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/254/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDQ1Mjcy,golo-lang,85445272,254,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-24T10:41:02Z,2015-03-24T10:41:02Z,"`to` or `as` ?

``` golo
(|a, b| -> Integer.compare(a, b)): to(Comparator.class)
```

vs.

``` golo
(|a, b| -> Integer.compare(a, b)): as(Comparator.class)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDQ1Mjcy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDUyNDkx,golo-lang,85452491,254,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-03-24T11:08:36Z,2015-03-24T11:08:36Z,"Sorry, I'd forgotten that `to` already exists...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDUyNDkx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDY3NzM0,golo-lang,85467734,254,NA,jponge,25961,Julien Ponge,,NA,2015-03-24T11:59:21Z,2015-03-24T11:59:21Z,"No worries, `as` is nice, too :smiley:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDg1NDY3NzM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/254,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY0NTE4Ng==,golo-lang,311645186,254,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-28T12:29:22Z,2017-06-28T12:29:22Z,"As a side note, it's no more a `MethodHandle` augmentation, but a `FunctionReference` method.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY0NTE4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/259,https://api.github.com/repos/eclipse-archived/golo-lang/issues/259,golo-lang,66565315,259,Split the JMH benchmarks as a separate project,jponge,25961,Julien Ponge,,CLOSED,2015-04-06T09:13:05Z,2015-06-30T13:52:11Z,,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/259/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/260,https://api.github.com/repos/eclipse-archived/golo-lang/issues/260,golo-lang,66663813,260,Fix the operators associativity,jponge,25961,Julien Ponge,,CLOSED,2015-04-06T17:48:27Z,2015-06-30T13:52:11Z,"In Golo we encourage people to use explicit parens in arithmetic expressions. While this is generally a good practice in any language, a non-parens expression shall yell _sensible_ results, which is not the case in Golo.

Given this example:

``` golo
module Priority

function main = |args| {
  let a = 10 + 3 * 4
  println(a + "" (22)"")
  let b = 10 * 1 / 2 + 1
  println(b + "" (6)"")
}
```

an execution gives:

```
22 (22)
1 (6)
```

which is clearly not correct. Here is how the AST is being build:

```
>>> AST for: oppriority.golo
% CompilationUnit
%  ASTModuleDeclaration{name='Priority'}
%  ToplevelDeclaration
%   ASTFunctionDeclaration{name='main', local=false, augmentation=false}
%    ASTFunction{arguments=[args], varargs=false, compactForm=false}
%     ASTBlock{}
%      ASTLetOrVar{type=LET, name='a', moduleState=false}
%       ASTCommutativeExpression{operators=[+]}
%        ASTAssociativeExpression{operators=[]}
%         ASTLiteral{literalValue=10}
%        ASTAssociativeExpression{operators=[*]}
%         ASTLiteral{literalValue=3}
%         ASTAssociativeExpression{operators=[]}
%          ASTLiteral{literalValue=4}
%      ASTCommutativeExpression{operators=[]}
%       ASTAssociativeExpression{operators=[]}
%        ASTFunctionInvocation{name='println', constant='false'}
%         ASTCommutativeExpression{operators=[+]}
%          ASTAssociativeExpression{operators=[]}
%           ASTReference{name='a'}
%          ASTAssociativeExpression{operators=[]}
%           ASTLiteral{literalValue= (22)}
%      ASTLetOrVar{type=LET, name='b', moduleState=false}
%       ASTCommutativeExpression{operators=[+]}
%        ASTAssociativeExpression{operators=[*]}
%         ASTLiteral{literalValue=10}
%         ASTAssociativeExpression{operators=[/]}
%          ASTLiteral{literalValue=1}
%          ASTAssociativeExpression{operators=[]}
%           ASTLiteral{literalValue=2}
%        ASTAssociativeExpression{operators=[]}
%         ASTLiteral{literalValue=1}
%      ASTCommutativeExpression{operators=[]}
%       ASTAssociativeExpression{operators=[]}
%        ASTFunctionInvocation{name='println', constant='false'}
%         ASTCommutativeExpression{operators=[+]}
%          ASTAssociativeExpression{operators=[]}
%           ASTReference{name='b'}
%          ASTAssociativeExpression{operators=[]}
%           ASTLiteral{literalValue= (6)}
```

As a side note: the JavaCC code here was hastily written by myself. The terms `associative` / `commutative` in the parser  are wrong: `-` is not commutative for instance :confused: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/260,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDkwNDExODgw,golo-lang,90411880,260,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-04-07T07:16:11Z,2015-04-07T07:16:11Z,"Same problem with tests, where an expression like `x % 2 == 0` raises a exception saying “Operator modulo is not supported for types class java.lang.Integer and class java.lang.Boolean”
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDkwNDExODgw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,golo-lang,73742298,262,Improve function chaining error messages,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2015-05-06T21:27:26Z,2015-06-30T13:52:11Z,"Considering this snippet

```
module chaining


function main = |args...| {
  let f = |x, y| -> x + y
  let g = |a, b| -> a + b
  let h = f: andThen(g)

  h: invoke(1, 2)
}
```

Obviously the function chain can' t work as is because `g` is expecting 2 args when `f` will return one and only one value. 

The according error message (Which frankly freaked me out!) is:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000144d8ec62, pid=12674, tid=4867
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode bsd-amd64 compressed oops)
# Problematic frame:
# j  java.lang.invoke.DirectMethodHandle.internalMemberName(Ljava/lang/Object;)Ljava/lang/Object;+0
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /Users/daniel/workspace/golo-temp/hs_err_pid12674.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
[1]    12674 abort      golo golo --files chaining.golo
```

From a user point of view is 1/ scary to see a message raise by the JVM itself 2/ helpless to find  and fix the root problem.

Would be nice to detect such mistakes and warn the developer.

If I'm right the filter function (ie. the `andThen` argument) can have 0 or 1 argument (no more). So we could easily detect that during the invocation of the brand new `FunctionReference`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzQ3MDI5,golo-lang,99747029,262,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-05-07T06:52:35Z,2015-05-07T06:52:35Z,"the composing functions (this is a function composition, not a filter :p) must have 1 parameter, since they are called with the result of the previous function as argument. This could be checked indeed. 
We could even go farther, by autospreading arguments, such that:

``` golo
let f = |x, y| -> [x + y, x - y]
let g = |a, b| -> a + b
let h = f: andThen(g)
require(h(21) == 42, ""err"")
```

would work; kinda implicit uncurry, but explicit is better than implicit.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzQ3MDI5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNDIx,golo-lang,99750421,262,NA,jponge,25961,Julien Ponge,,NA,2015-05-07T07:02:54Z,2015-05-07T07:02:54Z,"Oh yes we could add a check in andThen() 

On Thu, May 7, 2015, at 08:52, Yannick Loiseau wrote:

> the composing functions (this is a function composition, not a filter :p)
> must have 1 parameter, since they are called with the result of the
> previous function as argument. This could be checked indeed. 
> We could even go farther, by autospreading arguments, such that:
> 
> ``` golo
> let f = |x, y| -> [x + y, x - y]
> let g = |a, b| -> a + b
> let h = f: andThen(g)
> require(h(21) == 42, ""err"")
> ```
> 
> would work; kinda implicit uncurry, but explicit is better than implicit.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/golo-lang/golo-lang/issues/262#issuecomment-99747029
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNDIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNTE1,golo-lang,99750515,262,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-05-07T07:04:00Z,2015-05-07T07:04:00Z,"Based on [MethodHandles.filterReturnValue](http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandles.html#filterReturnValue%28java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle%29) the target method can return `void` and the chaining can work.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNTE1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNzAx,golo-lang,99750701,262,NA,jponge,25961,Julien Ponge,,NA,2015-05-07T07:05:44Z,2015-05-07T07:05:44Z,"But method handles always return something, null in case of void. 

On Thu, May 7, 2015, at 09:04, Daniel PETISME wrote:

> Based on
> [MethodHandles.filterReturnValue](http://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandles.html#filterReturnValue%28java.lang.invoke.MethodHandle,%20java.lang.invoke.MethodHandle%29)
> the target method can return `void` and the chaining can work.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/golo-lang/golo-lang/issues/262#issuecomment-99750515
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5NzUwNzAx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5ODI1ODI1,golo-lang,99825825,262,NA,jponge,25961,Julien Ponge,,NA,2015-05-07T11:33:59Z,2015-05-07T11:33:59Z,"I can reproduce the `SIGSEGV` :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5ODI1ODI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5ODI5NjI2,golo-lang,99829626,262,NA,jponge,25961,Julien Ponge,,NA,2015-05-07T11:43:55Z,2015-05-07T11:43:55Z,"@danielpetisme see #263
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5ODI5NjI2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTMzMDMz,golo-lang,99933033,262,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-05-07T16:40:50Z,2015-05-07T16:40:50Z,"@jponge wouldn't be nice to open issue on the official jdk tracker? I don't think the `SIGSEGV` is the expected behavior :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTMzMDMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTM2MDkz,golo-lang,99936093,262,NA,jponge,25961,Julien Ponge,,NA,2015-05-07T16:48:57Z,2015-05-07T16:48:57Z,"Oh yes. Do you want to open a bug?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTM2MDkz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/262,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTYzNjU0,golo-lang,99963654,262,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-05-07T18:08:32Z,2015-05-07T18:08:32Z,"I'll do it ASAP...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDk5OTYzNjU0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/264,https://api.github.com/repos/eclipse-archived/golo-lang/issues/264,golo-lang,74307994,264,Consider another JavaCC Maven plugin,jponge,25961,Julien Ponge,,CLOSED,2015-05-08T09:58:57Z,2015-11-28T15:37:34Z,"The Mojo plugin is stuck on older versions of JavaCC. 

We should evaluate https://github.com/phax/ph-javacc-maven-plugin or try contributing to MojoHaus, the replacement for Codehaus Mojo. 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/264/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/264,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjE0Mw==,golo-lang,160312143,264,NA,jponge,25961,Julien Ponge,,NA,2015-11-28T15:37:34Z,2015-11-28T15:37:34Z,"Fixed in Golo 3.0.0
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjE0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,golo-lang,80667203,268,Boxing problem appearing on augmented `List#join` when all tests ran,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2015-05-25T21:03:45Z,2015-11-28T15:40:38Z,"Teaser: This is a tricky one

In the standard-augmentations, the current impl of `List#join` (mine in fact :confused:) raise an exception when all tests are ran but not if your run the failing-ish tests.

_how to reproduce_
Add the following method in any golo code used for tests

```
function plop = -> list[1, 2, 3]: join(""-"")
```

Add the associated Java code

```
Method plop = moduleClass.getMethod(""plop"");
assertThat((String) plop.invoke(null), is(""1-2-3""));
```

Now run `mvn clean test`, 2 tests fail:
- `DocumentationRenderingTest.html_processor`
- `DocumentationRenderingTest.markdown_processor`

```
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Number
        at sun.invoke.util.ValueConversions.primitiveConversion(ValueConversions.java:242)
        at sun.invoke.util.ValueConversions.unboxInteger(ValueConversions.java:76)
        at gololang.StandardAugmentations$java$util$List.join(standard-augmentations.golo:430)
        at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:625)
        at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:191)
        at anonymous317906307738923.__$$_closure_0($Anonymous$_317906307759624.golo:137)
        at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:625)
        at fr.insalyon.citi.golo.doc.MarkdownProcessor.render(MarkdownProcessor.java:34)
        at fr.insalyon.citi.golo.doc.DocumentationRenderingTest.markdown_processor(DocumentationRenderingTest.java:53)
```

if you run unitary the test `mvn -Dtest=DocumentationRenderingTest#html_processor clean test` it passes.

Fix:
In fact I know how to fix the issue. It comes from the current `join` implementation

```
1  function join = |this, separator| {
2     var buffer = java.lang.StringBuilder("""")
3     if not (this: isEmpty()) {
4       buffer: append(this: head())
5       let tail = this: tail()
6       if not (tail: isEmpty()) {
7         buffer: append(separator)
8         buffer: append(tail: join(separator))
9       }
10    }
11   return buffer: toString()
12  }
```

Replacing the line`#4` by `buffer: append(this: head(): toString())` (adding a `toString())` fix the issue.

Questions:
1- `toString` should not be invoked automatically?
2- Why it appears only when all the tests run (and not unitary)

**Edit:** I've created a branch with a test which raises the cast issue
https://github.com/danielpetisme/golo-lang/tree/fix-268
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/268/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQyODgwOA==,golo-lang,105428808,268,NA,jponge,25961,Julien Ponge,,NA,2015-05-26T07:43:19Z,2015-05-26T07:43:19Z,"Where do you get that error? I can build Golo just fine :-)

Java 8u60
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQyODgwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ4OTY0Nw==,golo-lang,105489647,268,NA,jponge,25961,Julien Ponge,,NA,2015-05-26T11:03:57Z,2015-05-26T11:03:57Z,"`StringBuilder::append` is overloaded, so it is likely that the first invocation binds the callsite to `append(Integer)`, and hence it's why `:toString()` fixes the problem.

Golo (like at least Jython) does not deal with overloaded Java methods very well. It's a bit tricky to mount efficient guards over an array of parameters, but we can investigate a way to detect overloaded methods, and mount special (albeit likely slower) method handle chains to deal with them.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ4OTY0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ5NDc5NA==,golo-lang,105494794,268,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-05-26T11:34:57Z,2015-05-26T11:34:57Z,"What I propose:
1- Make a PR adding a `toString()` (or mergind the `Tuple` and `List` algos). 
2- Create the appropriate test case for this issue
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ5NDc5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ5NDkzOQ==,golo-lang,105494939,268,NA,jponge,25961,Julien Ponge,,NA,2015-05-26T11:36:05Z,2015-05-26T11:36:05Z,"Go for it!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNTQ5NDkzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/268,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjI3MA==,golo-lang,160312270,268,NA,jponge,25961,Julien Ponge,,NA,2015-11-28T15:40:36Z,2015-11-28T15:40:36Z,"Fixed by #269 and #285 it seems.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMjI3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,golo-lang,81878490,271,"So I tried to override a ClassLoader, and then ...",artpej,693299,Sylvain Desgrais,,OPEN,2015-05-28T11:02:13Z,2017-07-07T18:03:32Z,"When I tried to override a ClassLoader with the `AdapterFabric` or `Adapters` some issues append.

(reminder) This is a part of the `ClassLoader` prototype:

``` java
public abstract class ClassLoader {

  //...

  public Class<?> loadClass(String name) throws ClassNotFoundException {
    //...
  }

  protected Class<?> loadClass(String name, boolean resolve) 
      throws ClassNotFoundException{
    //...
  }

  protected final Class<?> defineClass(String name, byte[] b, int off, int len)
        throws ClassFormatError {
    //...
  }

  protected final Class<?> findLoadedClass(String name) {
    //...
  }

  //...

}
```

Let's see what's append with the following code:

``` golo
local function create = {
  return Adapter():
     extends(""java.lang.ClassLoader""):
     overrides(""loadClass"", |super, this, name, resolve| {
        let already_loaded = this: findLoadedClass(name)
       # ...
        let defined = this: defineClass(...)        
       # ...
     }): newInstance()

}
```

The `ClassLoader` class contains two methods named `loadClass`. Overriding one of them cause the second one is no more visible because of the method resolution in the `Adapter`:

``` golo
create(): loadClass(""java.lang.Object"")
```

In this case `Class<?> loadClass(String name)` is not resolved. This appends because the resolver find a method named `loadClass` in the overrided methods `set` and return it directly, but it's the wrong one.

The overrided methods are stored in a `map` with the method's name as `key`. So it is not possible to override two methods with the same name and with a different arity.

Another issue append when I invoke `this: findLoadedClass(...)`  or `this: defineClass(...)`. Both are not found in this context. It is because both methods are protected and not overrided, and according the documentation of [getDeclaredMethods](https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getDeclaredMethods%28%29) and [getMethods](https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getMethods%28%29) there's no direct way to obtain the inherited protected method of a class.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/271/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjI4MzYzMQ==,golo-lang,106283631,271,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-05-28T11:24:06Z,2015-05-28T11:24:06Z,"For the protected ones, does using `super` instead of `this` solve the problem (just a question, I have never looked at the `AdapterFabric` code)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjI4MzYzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjI4NDExOA==,golo-lang,106284118,271,NA,artpej,693299,Sylvain Desgrais,,NA,2015-05-28T11:26:53Z,2015-05-28T11:26:53Z,"`super` is a function reference not an object (it's the parent's overrided method) :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjI4NDExOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjU5MDc4OA==,golo-lang,106590788,271,NA,jponge,25961,Julien Ponge,,NA,2015-05-28T20:47:08Z,2015-05-28T20:47:08Z,"Overloaded methods are evil :smile: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjU5MDc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjU5MTA4Nw==,golo-lang,106591087,271,NA,jponge,25961,Julien Ponge,,NA,2015-05-28T20:48:29Z,2015-05-28T20:48:29Z,"So yes, the solution would be to have keys based not just on names, but also parameter types.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjU5MTA4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjg0MDE3Mg==,golo-lang,106840172,271,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-05-29T15:02:57Z,2015-05-29T15:02:57Z,"means go for it :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwNjg0MDE3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5ODQyOQ==,golo-lang,313398429,271,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T13:38:13Z,2017-07-06T13:38:13Z,"Maybe in `o.e.g.runtime.MethodInvocationSupport` and `o.e.g.runtime.adapters.AdapterSupport` we should walk the class hierarchy (`getSuperclass().getDeclaredMethods()`) to also find inherited protected method…

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5ODQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzQwOTg0NQ==,golo-lang,313409845,271,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T14:19:06Z,2017-07-06T14:19:06Z,"The same issue raises with augmentations:
```java
package test;

public class Super {
  protected int answer() {
    return 42;
  }
}
```

```golo
module Test

augment test.Super {
  function foo = |this| -> ""the answer is "" + this: answer()
}

function main = |args| {
  println(test.Super(): foo())
}
```

fails with: `NoSuchMethodError: class test.Super::answer`, while if `answer is public, it works just fine. Actually, augmentations can only access public methods. Not sure if it's a bug or a feature :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzQwOTg0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzQ5OTYwNw==,golo-lang,313499607,271,NA,jponge,25961,Julien Ponge,,NA,2017-07-06T19:45:47Z,2017-07-06T19:45:47Z,"Good question... :-)

On Thu, Jul 6, 2017 at 4:19 PM Yannick Loiseau <notifications@github.com>
wrote:

> The same issue raises with augmentations:
>
> package test;
> public class Super {
>   protected int answer() {
>     return 42;
>   }
> }
>
> module Test
> augment test.Super {
>   function foo = |this| -> ""the answer is "" + this: answer()}
> function main = |args| {
>   println(test.Super(): foo())}
>
> fails with: NoSuchMethodError: class test.Super::answer, while if `answer
> is public, it works just fine. Actually, augmentations can only access
> public methods. Not sure if it's a bug or a feature 😄
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/golo-lang/issues/271#issuecomment-313409845>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABlacWuVdZYfOs29wtm6JXvGMxVFOOlks5sLOzagaJpZM4EtWR7>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzQ5OTYwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/271,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzc1MjQ0NQ==,golo-lang,313752445,271,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-07T18:02:29Z,2017-07-07T18:02:29Z,"I'd say private methods/fields should not be accessible from augmentations/adapters since it breaks encapsulation and create a coupling on implementation details (except struct private fields which would be useless otherwise).

However, protected and package member should be, since otherwise some java libs based on inheritance/overloading would be impossible to use (see #492 for instance)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzc1MjQ0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/273,https://api.github.com/repos/eclipse-archived/golo-lang/issues/273,golo-lang,84640568,273,Exception when adapting a golo closure to a Java8 functional interface,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-06-03T16:05:47Z,2015-06-08T09:21:46Z,"When we want to use a golo closure as a Java8 functional interface that returns a _primitive type_, the adaptation fails, and we got a `java.lang.AbstractMethodError`.

For instance, the given Golo code:

``` golo
let f = Foo(2)
f: bar(|v| -> v)
```

works with `Foo` declared as

``` java
public class Foo {
  private int v;
  public Foo(int v) {
    this.v = v;
  }

  public Integer bar(Function<Integer,Integer> f) {
    return f.apply(v);
  }
}
```

but if

``` java
public class Foo {
  private int v;
  public Foo(int v) {
    this.v = v;
  }

  public int bar(IntUnaryOperator f) {
    return f.applyAsInt(v);
  }
}
```

golo raises 

```
Exception in thread ""main"" java.lang.AbstractMethodError: Method pb$$Lambda$1.applyAsInt(I)I is abstract
```

This issue also raises with `Stream::filter` that accept a `Predicate` which returns a `boolean`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/273/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/275,https://api.github.com/repos/eclipse-archived/golo-lang/issues/275,golo-lang,85076191,275,Problem with varargs augmentation,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-06-04T12:31:36Z,2015-12-31T14:49:53Z,"The following Golo code:

``` golo
struct Test = { v }

augment Test {
  function foo = |this, args...| -> ""## Hey: "" + this: v(): toString() + args: asList(): toString()
}

function main = |args| {
  let f = Test(42)
  println(f: foo(""a""))
  println(f: foo())
}
```

gives:

```
## Hey: 42[a]
Exception in thread ""main"" java.lang.NoSuchMethodError: class pb.types.Test::foo
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.findTarget(MethodInvocationSupport.java:217)
    at fr.insalyon.citi.golo.runtime.MethodInvocationSupport.lookupTarget(MethodInvocationSupport.java:141)
...
```

Probably a bug when dealing with varargs.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/275/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/277,https://api.github.com/repos/eclipse-archived/golo-lang/issues/277,golo-lang,85135789,277,Exception when adapting a golo closure to a Java8 functional interface: back from the future,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2015-06-04T15:00:13Z,2015-11-28T15:18:20Z,"Related to #273, but more subtle...

``` golo
 [1..6]: stream(): map(|v| -> v + 1)
```

vs.

``` golo
let a = 1
 [1..6]: stream(): map(|v| -> v + a)
```

The second sample raises a `IllegalArgumentException: not a direct method handle`.
Here the handle is a “real” closure, i.e. it captures values. Thus, it's no more a `DirectMethodHandle`, since an adaptation is done to close the value, but a `BoundMethodHandle$Species_LL`, that can't apparently be used as a handle for `metafactory`.

See http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8020816 for a similar bug.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/277/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/277,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwODkyNzQxNQ==,golo-lang,108927415,277,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-06-04T15:04:51Z,2015-06-04T15:04:51Z,"Note that explicitly converting the closure fix the problem:

``` golo
let a = 1
[1..6]: stream(): map(asFunctionalInterface(Function.class, |v| -> v + a)) # ok
[1..6]: stream(): map(asInterfaceInstance(Function.class, |v| -> v + a)) # ok
```

so we can say it's a Golo feature (explicit over implicit :wink:)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDEwODkyNzQxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,golo-lang,87113945,278,User defined operators in augmentations,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2015-06-10T21:29:57Z,2019-02-09T13:19:17Z,"I don't think I need to describe operator overloading. My question is why not implementing them in Golo.

``` golo
augment java.util.List {
  function plus = |this, element| {
    if element oftype Collection.class {
      this: addAll(element)
    } else {
      this: add(element)
    }
    return this
  }
}

let data = list[1,2,3]
println( data + 4)
#Prints [1,2,3,4]
```

Regarding the implementation, [OperatorSupport](https://github.com/danielpetisme/golo-lang/blob/master/src/main/java/fr/insalyon/citi/golo/runtime/OperatorSupport.java) is already mapping the operator symbol (e.g. ""`+`"") to a function `plus(left, ritgh)`. Currently generic calls `plus(Object, Object)` are [simply rejected](https://github.com/danielpetisme/golo-lang/blob/master/src/main/java/fr/insalyon/citi/golo/runtime/OperatorSupport.java#L118). 
The aim would allow these calls and try to find their definition in the receiver class augmentation.

Would be interesting to merge `OperatorSupport` with `MethodInvocationSupport`.
Boxed primitives types will be augmented in `standard-augmentations` with their native operators (`plus`, `minus`,etc) and user defined operators will follow the same resolution path as a ""normal"" augmentations.

Thoughts?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/278/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAxOTU4MA==,golo-lang,111019580,278,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-06-11T07:12:23Z,2015-06-11T07:12:23Z,"I like the idea (very pythonish) and I was also thinking about it for some times…

However, since doing this “reserve” the method name for a special purpose, I'd use a less common name for the “operator method”, e.g. (python-like) `__plus__` to avoid name clashes.

On merging `OperatorSupport` with `MethodInvocationSupport`, why not :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAxOTU4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAyMDQ0Mw==,golo-lang,111020443,278,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-06-11T07:14:19Z,2015-06-11T07:14:19Z,"BTW, this could quite easily be made with macros :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAyMDQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzMjY5Mg==,golo-lang,111032692,278,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-06-11T07:48:53Z,2015-06-11T07:48:53Z,"On a other hand, operator overloading can be quite complex. As an example, your toy implementation of `+` on lists has several problems (I know it's just an example):
- should be sides-effect free (i.e. return a new list without changing the original one)
- `list[ list[1,2], list[3, 4] ] + list[5, 6]` will return `list[ list[1,2], list[3, 4], 5, 6]` while I wanted `list[ list[1,2], list[3, 4], list[5, 6]]`, and I thus must use `add` (python does the same thing btw).

I don't say we should not go this path, just that is can be less trivial (from a semantic pov) than is seems
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzMjY5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNDE4MA==,golo-lang,111034180,278,NA,jponge,25961,Julien Ponge,,NA,2015-06-11T07:53:29Z,2015-06-11T07:53:29Z,"I am always very cautious of operator overloading...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNDE4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjQ2OQ==,golo-lang,111036469,278,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-06-11T08:07:37Z,2015-06-11T08:07:37Z,"@yloiseau Indeed the implemntation is not perfect at all :smile: 
@jponge what are your concerns?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjQ2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjU3MA==,golo-lang,111036570,278,NA,jponge,25961,Julien Ponge,,NA,2015-06-11T08:08:15Z,2015-06-11T08:08:15Z,"> @jponge what are your concerns?

I’m always worried with operators overloading.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjU3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTEyNDQ2OA==,golo-lang,111124468,278,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-06-11T13:02:09Z,2015-06-11T13:02:09Z,"A synthesis of talks with @yloiseau and @jponge 
The aim of operator overloading is just to map a symbol (`+`) to a function (`plus`), and let the possibility to the dev to overload this functions.
Operators are nothing more than syntaxic sugar.

# Use cases

## Algbric types

_Pros:_ It's the more natural use case

``` golo
augment Complex {
  function plus = |this, other| -> Complex(this: real() + other: real(), this: imaginary() + other: imaginary())
}
```

_Cons:_ Commutativity is tricky and could make Golo looks like a living javascript hell

```
""1"" + 2 == ""12""
1 + ""2"" == 3
```

## Collections

Pros: how cool is that

```
let data = list[""a""] * 3 + ""b""
#[""a"", ""a"", ""a"", ""b""]
```

Cons: Commutativity `1 + [1,2] VS. [1,2] + 1` + the set of usefull is quite limited (`+`, `-`, maybe `*`).

## Other

What sould produce the following simppet?
`DynamicObject():name(""Duke"") + DynamicObject:name(""Scarlette Johanson"")`
How it would behave in a DSL

# Implementation

# Operator candidates

What could be overloaded or not
- `+`, `-`, `*`, `/`, `%`
- `is`, `isnt`
- `and`, `or`, `not`
- `<`, `<=`, `==`, `!=`, `>`, `>=`
- `:`, `?:`, `()`
- `[]`

# Macros or not macros

Macros would permit the user to define its own operators which will be translate into standard Golo code during the pre-compile stage.
`""1"" &+ 2` the operator is flagged by `&` (more or less readable?).
This approach permits to keep the Golo language ""clean"" and also offer the feature. The dev will choose if it prefers to use standard functoin call or custom operators.

Personal thought
For me, even if macros flag the operators, it's the more permissive and safe way to propose operator overloading in Golo.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTEyNDQ2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/278,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0Mzk0MA==,golo-lang,462043940,278,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2019-02-09T13:19:17Z,2019-02-09T13:19:17Z,Not active,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0Mzk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,golo-lang,87115367,279,Replace iterative method search with MethodHandle lookups,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2015-06-10T21:35:31Z,2019-02-09T13:19:45Z,"Currently most of the method resolutions are based on the following snippet

``` java
// From AugmentationMethodFinder
for (Method method : theClass.getMethods()) {
        if (isCandidate(method)) {
          return toMethodHandle(method);
        }
}
```

Is it possible to replace the iterations by [MethodHandles.Lookup](https://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandles.Lookup.html) + `findX`?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAyMzk1Mg==,golo-lang,111023952,279,NA,jponge,25961,Julien Ponge,,NA,2015-06-11T07:22:56Z,2015-06-11T07:22:56Z,"That would make our lives simpler, but unfortunately the lookup methods require exact types.

Suppose your target is `(List)String`, then calling it with an `ArrayList` will not help since a lookup on `ArrayList` won’t resolve properly.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAyMzk1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNDgzMQ==,golo-lang,111034831,279,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-06-11T07:55:59Z,2015-06-11T07:55:59Z,"After some time tweaking the runtime, I'm wondering if it worth it to split Golo function resolution and 3rd parties (Java or JVM-based) language resolution ?

Golo functions are _easy_ to resolve (static method + `Object` args) this could speed pure golo calls (I know _premature optimization is evil_).
3rd party resolution will rely on the classic iterative mechanism.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNDgzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNTU3NQ==,golo-lang,111035575,279,NA,jponge,25961,Julien Ponge,,NA,2015-06-11T08:01:40Z,2015-06-11T08:01:40Z,"You could perhaps first try a lookup resolution, and then fallback to the current mechanism.

Perf is on the cost of calling targets, not so much about resolving them.

There could be a small gain, but is it worth it? :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNTU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjE4Ng==,golo-lang,111036186,279,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-06-11T08:06:17Z,2015-06-11T08:06:17Z,"You're the perfs Master ;)
Nice to have answers to the discussion we had with @yloiseau yesterday around :beers: 

You should join us, every time we met we had 1000 ideas !
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjE4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjQyNA==,golo-lang,111036424,279,NA,jponge,25961,Julien Ponge,,NA,2015-06-11T08:07:18Z,2015-06-11T08:07:18Z,"Find me a job next to you so that we can have beers :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjQyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjY4Ng==,golo-lang,111036686,279,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-06-11T08:09:12Z,2015-06-11T08:09:12Z,"If you were not so picky... :smiling_imp:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExMTAzNjY4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/279,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0Mzk3MA==,golo-lang,462043970,279,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2019-02-09T13:19:45Z,2019-02-09T13:19:45Z,Not active,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjA0Mzk3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,golo-lang,89933679,284,Lambda and closure optimisation,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2015-06-21T16:53:51Z,2015-11-28T15:18:20Z,"Currently, code like this:

``` golo
function main = |args| {
  let inc1 = |x| -> x + 1
  let inc2 = |v| -> v + 1

  let add = |x, y| -> x + y
  let addcurry = |x| -> |y| -> x + y

  let foo = |x| -> ""Foo: "" + x
  let bar = |x| -> ""Bar: "" + x
  let applyFoo = |x| -> foo(x)
  let applyBar = |x| -> bar(x)
}
```

expends to something similar to:

``` golo
function main = |args| {
  let inc1 = ^__$$_closure_0
  let inc2 = ^__$$_closure_1
  let add = ^__$$_closure_2
  let addcurry = ^__$$_closure_3
  let foo = ^__$$_closure_5
  let bar = ^__$$_closure_6
  let applyFoo = ^__$$_closure_7: insertArguments(0, foo)
  let applyBar = ^__$$_closure_8: insertArguments(0, bar)
  return null
}

local function __$$_closure_0 = |x| {
  return x + 1
}

local function __$$_closure_1 = |v| {
  return v + 1
}

local function __$$_closure_2 = |x, y| {
  return x + y
}

local function __$$_closure_3 = |x| {
  return ^__$$_closure_4: insertArguments(0, x)
}

local function __$$_closure_4 = |x, y| {
  return x + y
}

local function __$$_closure_5 = |x| {
  return ""Foo: "" + x
}

local function __$$_closure_6 = |x| {
  return ""Bar: "" + x
}

local function __$$_closure_7 = |foo, x| {
  return foo(x)
}

local function __$$_closure_8 = |bar, x| {
  return bar(x)
}
```

May be it would be desirable to instead expand to:

``` golo
function main = |args| {
  let inc1 = ^__$$_closure_0
  let inc2 = ^__$$_closure_0
  let add = ^__$$_closure_1
  let addcurry = ^__$$_closure_2
  let foo = ^__$$_closure_3
  let bar = ^__$$_closure_4
  let applyFoo = ^__$$_closure_5: insertArguments(0, foo)
  let applyBar = ^__$$_closure_5: insertArguments(0, bar)
  return null
}

local function __$$_closure_0 = |x| {
  return x + 1
}

local function __$$_closure_1 = |x, y| {
  return x + y
}

local function __$$_closure_2 = |x| {
  return ^__$$_closure_1: insertArguments(0, x)
}

local function __$$_closure_3 = |x| {
  return ""Foo: "" + x
}

local function __$$_closure_4 = |x| {
  return ""Bar: "" + x
}

local function __$$_closure_5 = |foo, x| {
  return foo(x)
}
```

that is, reuse identical closures and lambda if possible. This is probably doable by comparing IR representations of closure in a given module. This could reduce the bytecode size, and (maybe) add a slight improvement in lookup time. Some points are probably not trivials (e.g. arguments and variables with same role but differents names).

Does it worth the pain (or the fun :smile:)?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/284/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDA2NTMxMA==,golo-lang,114065310,284,NA,jponge,25961,Julien Ponge,,NA,2015-06-22T10:57:25Z,2015-06-22T10:57:25Z,"Sounds like a cool thing to investigate!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDA2NTMxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQyNjY2OQ==,golo-lang,114426669,284,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-06-23T09:56:00Z,2015-06-23T09:56:00Z,"We can also let the developer create an explicit function to make this optimisation by hand, since we value explicitness :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQyNjY2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQzMTU1Mw==,golo-lang,114431553,284,NA,jponge,25961,Julien Ponge,,NA,2015-06-23T10:17:44Z,2015-06-23T10:17:44Z,"> We can also let the developer create an explicit function to make this optimisation by hand, since we value explicitness 

True :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQzMTU1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQ0NDY1OA==,golo-lang,114444658,284,NA,artpej,693299,Sylvain Desgrais,,NA,2015-06-23T10:57:46Z,2015-06-23T10:57:46Z,"Hi mates,
I think that the JVM/JIT already do this kind of optimizations at native code generation level. I don't know if it worth the pain just for reduce the bytcode size and the callsite installation time.
However code blocs canonicalisation (symbols?) is a fun idea :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQ0NDY1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/284,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQ0NjAxMw==,golo-lang,114446013,284,NA,jponge,25961,Julien Ponge,,NA,2015-06-23T11:07:41Z,2015-06-23T11:07:41Z,"In terms of perf you have more chances of avoiding profile pollution with many methods :-)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDExNDQ0NjAxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/285,https://api.github.com/repos/eclipse-archived/golo-lang/issues/285,golo-lang,90934169,285,Boxing issue on List::remove,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-06-25T11:23:42Z,2015-06-25T15:25:30Z,"This issue is related to #268, since it is a consequence of the overloading of Java methods on `int` vs. `Object` plus autoboxing.

Given `lst` a list of integers

``` golo
let lst = list[5, 2, 0]
```

and 

``` java
List<Integer> lst = new ArrayList<Integer>(Arrays.asList(5, 2, 0));
```

In golo,

``` golo
lst: remove(5)
```

remove the first element.

On the other hand, in java

``` java
lst.remove(5);
```

raises an `IndexOutOfBound` exception. To remove the first element by value, we must:

``` java
lst.remove(Integer.valueOf(5));
```

It's not an issue per se, but it should be documented.

Besides, while we can remove an element by index in Java:

``` java
lst.remove(0);
```

remove the `2` from the list (intented behaviour), in Golo:

``` golo
lst: remove(0)
```

remove the second element of the list (calling `List::remove(Object)`). Their is currently no way that I know to remove a list element by index in Golo (using `lst: remove(0: intValue())` does not work).

Possible solution:
- create a utility java method in `Predefined`

``` java
public static Object removeByIndex(List<?> lst, Integer idx) {
  return lst.remove(idx.intValue());
}
```
- augment lists in golo with:

``` golo
augment java.util.List {
  function removeIdx = |this, idx| -> removeByIndex(this, idx)
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/285/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/316,https://api.github.com/repos/eclipse-archived/golo-lang/issues/316,golo-lang,119301203,316,Continuous documentation deployment,jponge,25961,Julien Ponge,,OPEN,2015-11-28T15:24:53Z,2015-11-28T15:24:53Z,"It would be great to find a way to publish the documentation from Hudson builds.

This would require either committing to eclipse/golo-lang, or pushing to the Eclipse Git repo that provides content for eclipse.org/golo. Perhaps the Eclipse.org website could be used for that purpose.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/316/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/317,https://api.github.com/repos/eclipse-archived/golo-lang/issues/317,golo-lang,119301266,317,"A space after ""-"" operator changes the result ",jponge,25961,Julien Ponge,,OPEN,2015-11-28T15:26:35Z,2016-01-18T15:23:21Z,"(from https://bugs.eclipse.org/bugs/show_bug.cgi?id=478334)

An operation terminating with `<minus><Integer>` with no spaces between `<minus>` seems to be ignored at the compilation and therefor change the result.

Sample:

``` golo
module golo.Bug

function main = |args| {

    var someTuple = [1, 2, 3]
    var lastIndex = 0

    lastIndex = someTuple: size() - 1
    println(""true  last index : "" + lastIndex)

    lastIndex = someTuple: size() -1
    println(""buged last index : "" + lastIndex)

    var i = 1 - 1 #+ 1
    var j = 1 -1 #+ 1

    println(i + ""   ?=   "" + j)
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/317/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/317,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTM2Nzc3NQ==,golo-lang,169367775,317,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-06T15:58:49Z,2016-01-06T15:58:49Z,"Indeed, when no space is present, it's parsed as the `-1` constant.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTM2Nzc3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/317,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjU1ODUxMA==,golo-lang,172558510,317,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-18T15:23:21Z,2016-01-18T15:23:21Z,"On an other hand, this fails:

``` golo
let a = 42
let b = -a
```

with

```
[error] Encountered unexpected  <ADDITIVE_OPERATOR> `-`  
```

and `+` is not allowed as a unary (contrary to several other languages, including Java)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjU1ODUxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/318,https://api.github.com/repos/eclipse-archived/golo-lang/issues/318,golo-lang,119301318,318,ANSI codes support,jponge,25961,Julien Ponge,,CLOSED,2015-11-28T15:28:12Z,2016-01-06T09:09:42Z,"Imported from https://bugs.eclipse.org/bugs/show_bug.cgi?id=482373, discussion on #314
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/318/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/319,https://api.github.com/repos/eclipse-archived/golo-lang/issues/319,golo-lang,119301355,319,`fun` allows references of local functions from the outside,jponge,25961,Julien Ponge,,CLOSED,2015-11-28T15:28:54Z,2017-07-18T15:02:50Z,"Spotted by @yloiseau  in https://github.com/eclipse/golo-lang/pull/312#issuecomment-157657194
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/319/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/319,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMDcwOQ==,golo-lang,160310709,319,NA,jponge,25961,Julien Ponge,,NA,2015-11-28T15:29:28Z,2015-11-28T15:29:28Z,"Given:

``` golo
    module Other

    local function bar = |x| -> x
```

and:

``` golo
    module Test

    local function foo = |x| -> x

    function main = |args| {
      let f = fun(""foo"", Test.module)
      println(f(42))

      let b = fun(""bar"", Other.module)
      println(b(42))
    }
```

then the following works when it should not:

```
    $ golo golo --files other.golo test.golo 
    42
    42
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MDMxMDcwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/320,https://api.github.com/repos/eclipse-archived/golo-lang/issues/320,golo-lang,120803946,320,augmentations limited to imported scope,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-12-07T15:55:47Z,2015-12-16T10:57:47Z,"When an augmentation is defined, it is only visible if the module using it has imported the module defining it. This limits the ability to create generic functions.

For instance:

``` golo
module MyData

struct MyStruct = { val }
augment MyStruct {
  function size = |this| -> this: val()
}
```

``` golo
module MyLib

function printSize = |o| { 
  println(""The size of "" + o + "" is "" + o: size() + ""!"") 
}
```

``` golo
module Main

import MyData
import MyLib

augment java.lang.String {
  function size = |this| -> this: length()
}

function main = |args| {

  # Ok, it's a native java method
  printSize(list[1, 2, 3])

  # Ok, DynamicObject
  printSize(DynamicObject(): define(""size"", |this| -> 42))

  # Fails since MyLib don't know the augmentation
  try {
    printSize(""hello"")
  } catch (e) {
    println(""ERR: "" + e)
  }

  # Fails since MyLib don't know the augmentation
  try {
    printSize(MyStruct(42))
  } catch (e) {
    println(""ERR: "" + e)
  }
}
```

``` bash
$ golo golo --files data.golo lib.golo main.golo 
The size of [1, 2, 3] is 3!
The size of gololang.DynamicObject@4cb2c100 is 42!
ERR: java.lang.NoSuchMethodError: class java.lang.String::size
ERR: java.lang.NoSuchMethodError: class MyData.types.MyStruct::size
```

This issue is connected to #235 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/320/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/320,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU2NzEwMQ==,golo-lang,162567101,320,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-07T16:00:48Z,2015-12-07T16:00:48Z,"see https://github.com/eclipse/golo-lang/issues/235#issuecomment-160312211
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjU2NzEwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/320,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjgwOTU5MQ==,golo-lang,162809591,320,NA,jponge,25961,Julien Ponge,,NA,2015-12-08T08:12:01Z,2015-12-08T08:12:01Z,"Being call-stack dependent for fallbacks seems like an interesting option to explore.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MjgwOTU5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/321,https://api.github.com/repos/eclipse-archived/golo-lang/issues/321,golo-lang,121508138,321,Configuration file for the command line,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2015-12-10T15:15:00Z,2018-12-06T12:14:46Z,"Wouldn't it be nice to have a simple configuration file to configure default behavior of the command line? 
For instance, it could be a JSON file (to avoid introducing new dependencies), located in a standard (system dependent) place, e.g. `~/.golorc`, where default values for the command line options of the `golo` command could be overridden.

Rough sample file:

``` json
{
    ""compile"":  {
        ""output"": ""build""},
    ""doc"": {
        ""format"": ""markdown"",
        ""output"": ""build/doc""},
    ""golo"": {
        ""classpath"": [""~/opt/mylib.jar"", ""/usr/share/java/useful.jar""]},
    ""new"": {
        ""type"": ""gradle""}
}
```

A project specific file could also be defined, which would override the defaults and the values defined in `~/.golorc` (e.g. to define default `--files` and `--module` values).

For instance, in `MyProject/.golorc`:

``` json
{
    ""golo"": {
        ""classpath"": [""libs/additional.jar""],
        ""files"": [""src/foo.golo"", ""src/bar.golo"", ""src/main.golo""],
        ""module"": ""MyProject""}
}
```

(relative files resolved with the base directory of the `golorc` they pertains, or relative to the directory the command is run, to be defined)

thus running a simple `golo golo` in `MyProject` would be equivalent to run

``` bash
golo golo --classpath ~/opt/mylib.jar:/usr/share/java/useful.jar:./libs/additional.jar --files src/foo.golo src/bar.golo src/main.golo --module MyProject
```

and `golo doc` would result in

``` bash
golo doc --format markdown --output ./build/doc
```

A additional command line may be added to specify an alternate configuration file.

The purpose is not to replace a full featured build management (mvn, gradle), but to make long command lines shorter.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/321/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/321,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY4NTAyMg==,golo-lang,163685022,321,NA,jponge,25961,Julien Ponge,,NA,2015-12-10T16:51:01Z,2015-12-10T16:51:01Z,"Sounds like a worthy idea to explore.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY4NTAyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/321,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NDg1MTg3NA==,golo-lang,444851874,321,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-12-06T12:14:45Z,2018-12-06T12:14:45Z,Maybe a property file would be more convenient than JSON (it's Java ecosystem after all).,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NDg1MTg3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/322,https://api.github.com/repos/eclipse-archived/golo-lang/issues/322,golo-lang,121522909,322,Relative import,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-12-10T16:18:15Z,2017-04-07T12:43:34Z,"We could add a relative import feature.
For instance

``` golo
module foo.bar.baz.MyModule

import .OtherModule
```

instead of 

``` golo
module foo.bar.baz.MyModule

import foo.bar.baz.OtherModule
```

See [PEP0328](https://www.python.org/dev/peps/pep-0328/) for a similar feature in Python
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/322/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/322,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY4NTE5NQ==,golo-lang,163685195,322,NA,jponge,25961,Julien Ponge,,NA,2015-12-10T16:51:37Z,2015-12-10T16:51:37Z,"How would that work out and be useful to Golo code?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY4NTE5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/322,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY5NTQzMg==,golo-lang,163695432,322,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-10T17:26:40Z,2015-12-10T17:26:40Z,"that would work by simply appending the package of the current module to imported names if they start with a `.`

The main goal is to not repeat the FQN of the package when importing “local” modules.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzY5NTQzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/322,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzQ1MQ==,golo-lang,163747451,322,NA,jponge,25961,Julien Ponge,,NA,2015-12-10T20:58:44Z,2015-12-10T20:58:44Z,"Now that makes sense :smiley: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzQ1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/323,https://api.github.com/repos/eclipse-archived/golo-lang/issues/323,golo-lang,121538743,323,Duplicated struct not identified at compile time,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-12-10T17:32:05Z,2016-01-07T17:35:32Z,"When a module contains two identically named structures, as in

``` golo
module Test

struct Toto = { x }

struct Toto = { x, y }

function main = |args| {
  let t2 = Toto(1, 2)
}
```

the code compile without complaining, but fail at runtime, with `java.lang.ClassFormatError: Duplicate method name&signature` when `golo run` and with  `java.lang.LinkageError: loader (instance of GoloClassLoader): attempted duplicate class definition` when `golo golo`.

_Intended behavior_: should fail at _compile time_ with explicit error, e.g.

```
[err] Duplicated `struct` definition  for ""Toto"" at line 5, column 1
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/323,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzcwMDE0MQ==,golo-lang,163700141,323,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-10T17:46:38Z,2015-12-10T17:46:38Z,"Same thing for duplicated `union` and `function`, that fail at runtime but compile without error
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2MzcwMDE0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/323,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzMxOQ==,golo-lang,163747319,323,NA,jponge,25961,Julien Ponge,,NA,2015-12-10T20:58:11Z,2015-12-10T20:58:11Z,":+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzMxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/323,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY4OTM1OQ==,golo-lang,169689359,323,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T15:09:47Z,2016-01-07T15:09:47Z,"The `function` case was fixed in #330 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY4OTM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/324,https://api.github.com/repos/eclipse-archived/golo-lang/issues/324,golo-lang,121544200,324,New check command line command,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2015-12-10T18:02:40Z,2016-04-20T07:44:51Z,"Add a new `golo check` command, similar to `golo compile`, that parse input files and run the compile time IR verifications without generating the `.class` files. Useful for instance to integrate with editor plugins such as Vim syntastic.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/324/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/324,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzEwMQ==,golo-lang,163747101,324,NA,jponge,25961,Julien Ponge,,NA,2015-12-10T20:57:20Z,2015-12-10T20:57:20Z,"Great idea :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2Mzc0NzEwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,golo-lang,121843841,326,"Ambiguous functions declaration, overloading and shadowing",yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2015-12-12T09:17:49Z,2017-10-19T11:33:33Z,"Synthesis of comments on #312 #313 
Linked to #320
Probably linked to #275 

We have an issue regarding the resolution of overloaded functions, more
specifically when using variable arity ones (varargs)
## A little history

When using the literal notation for function references
(`^module::function`) or the `Predefined::fun` function without
specifying the function arity (`fun(""function"", module.class)` or
`fun(""function"", module.class, -1)`), for which the literal notation is
just syntactic sugar, if the referenced function was overloaded, that is
the function has multiple definitions with different arities, the return
function reference used to be undefined. The first found was return, but
with no guaranty on with this first one would be. 

For instance, with code like 

```
function foo = |x| -> ...

function foo = |x, y| -> ...

let f = fun(""foo"", currentModule.class)
```

`f` could be either of the two functions.

A correction was applied to raise
a `AmbiguousFunctionReferenceException` in this case, to avoid guessing.
This force the developer to be explicit on the required arity by using
`fun(""foo"", currentModule.class, 1)` or `fun(""foo"", currentModule.class,
2)`, instead of silently using one or the other.

The problem is not present when calling the function directly as in
`foo(1)` or `foo(1, 2)`, since in this case, the number of arguments is
known. This resolution takes place in
`runtime.FunctionCallSupport::findStaticMethodOrField`.

As a side note, their is some logic duplication between
`runtime.FunctionCallSupport::findStaticMethodOrField` and
`Predefined::fun` (and probably also in the method call resolution).
## Current problem

However, the direct call resolution use the number of _arguments_ used
on the call site, and try to match them with the number of _parameters_
of the candidate function.

This raise an issue when the function is overloaded with a variable
arity that shadow the fixed one. For instance, given the functions:

```
function foo = |x| -> ...

function foo = |x, y| -> ...

function foo = |xs...| -> ...
```
- when using `fun`, the third one shadows the first one, and thus
  `fun(""foo"", mod.class, 1)` throws an exception;
- when doing a direct call, the third one shadows the two others,
  depending on the number of arguments given: `foo(1)` can call the
  first or the third, and `fun(1, 2)` can call the second or the third.
## Some tests

given

``` golo
module Test

function foo = -> ""0""
function foo = |x| -> ""1""
function foo = |x, y| -> ""2""
function foo = |x...| -> ""1v""
function foo = |x, y...| -> ""2v""

function test = |msg, fn| {
    try {                  
    println(msg + fn())
  } catch (e) {
    println(msg + ""failed with "" + e: getClass(): getName())
  }

}

function main = |args| {

  println(""# run"")


  # can be 0 or 1v
  test(""direct 0: "", -> foo())

  # can be 1 or 1v or 2v
  test(""direct 1: "", -> foo(1))

  # can be 2 or 1v or 2v
  test(""direct 2: "", -> foo(1, 2))

  # can be 1v or 2v
  test(""direct 3: "", -> foo(1, 2, 3))

  # ok, always 0
  test(""ref 0: "", -> fun(""foo"", Test.class, 0)())

  # can be 1 or 1v
  test(""ref -1: "", -> fun(""foo"", Test.class, -1)(1))

  # can be 1 or 1v
  test(""ref 1: "", -> fun(""foo"", Test.class, 1)(1))

  # can be 2 or 2v
  test(""ref 2: "", -> fun(""foo"", Test.class, 2)(1, 2))
}
```

``` bash
#!/bin/bash
for i in `seq $1` ; do
    golo golo --files test.golo
done | sort | uniq -c
```

This gave me:

```
$ ./test.sh 1000
    379 direct 0: 0
    621 direct 0: 1v
    741 direct 1: 1
    151 direct 1: 1v
    108 direct 1: 2v
     93 direct 2: 1v
    799 direct 2: 2
    108 direct 2: 2v
    784 direct 3: 1v
    216 direct 3: 2v
   1000 ref 0: 0
   1000 ref -1: failed with AmbiguousFunctionReferenceException
   1000 ref 1: failed with AmbiguousFunctionReferenceException
   1000 ref 2: failed with AmbiguousFunctionReferenceException
   1000 # run
```

This is not just a corner case!
## Solutions

Note that the two issues, though related, are not exactly the same, and
thus a different solution can be adopted for direct call and function
reference.
### Explicit specification

Add a parameter to `fun` to specify if we want variable or fixed arity.
This would work when getting a function reference, but how do we resolve
direct calls?
### Multiple references proxy

Also only in the case of function references (e.g. `fun` with no arity),
we could return a proxy containing all the ambiguous references instead
of throwing a runtime exception. The resolution can then be done on the
call site, in a manner similar to direct calls.

This does not solve the issue of ambiguous direct calls.
### Implicit choice

Define a priority between functions, for instance when multiple choices
among fixed and variable arity, always use the fixed one. 

Optionally also define a priority when referencing with `fun` without
arity instead of raising a runtime exception.

I’m not found of this solution. Their will surely be cases where the
wrong function is used, so we need a way to be more explicit.
### Runtime exception

As for the `fun` function, throw an `AmbiguousFunctionCallException` in
`FunctionCallSupport` if the function is not fully defined. This does
not really solve the problem, but at least it does not pass unnoticed.
### Compile time exception

Refuse to guess, and throw a compilation exception if the developer has
defined ambiguous functions, where a variable arity one can shadow
a fixed one, forcing the developer to rethink its API.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/326/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDEyNzg5OA==,golo-lang,164127898,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-12T09:19:34Z,2015-12-12T09:19:34Z,"ping @Artpej are you dealing with this ? If so, I had started a branch (fix/ambiguous-function ) that you can use if you like.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDEyNzg5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDI2MDkxMQ==,golo-lang,164260911,326,NA,artpej,693299,Sylvain Desgrais,,NA,2015-12-13T13:50:08Z,2015-12-13T13:50:08Z,"Thanks @yloiseau for this great summary :smiley: . 
I think this one is really a big one and there's many cases we have to take care about. Every solutions
can be great, that's depend on the case.

### Compile time exception
- two functions with the same **name** and the same **arity**  in the same **module** should throw a compilation exception
- two functions with the same **name** and the same **arity**  in the same **augmentation** should throw a compilation exception
- two augmentations (for the same class) / structs / unions  inside the same **module** should throw a compilation exception

### Implicit choice
- function could be resolved in this order
  - current module (according name and arity)
  - imported (according name, types for java module, arity with imports list order)
  - current module (according name and arity for varargs)
  - imported (according name and is varargs with imports list order)
  - docorated (fixed arity that match)
  - docorated (variable arity)
  - predifined functions
- methods could be resolved in this order (mainly the same than functions inside an augmentation) plus: 
  - named augmentations according the `with` order (named augmentations resolution order : current module, imports order)
  - current module augment
  - imported augments according the import list order
  - predefined methods (struct, unions, arrays, ...)
  - java methods (for java objects)

### Multiple references proxy
- usefull for function references (with unknown arity), order can be choosed at call time

### Explicit specification
- the `\` notation can be usefull to fix the arity of a function reference

### Compile time exception
- I think we should avoid this case if it is possible 

I should missed many cases and it is just an idea of the concept. Anyways we could maybe introduce a kind of simple rules engine to determine which funtion / method call at runtime : 

> callsite informations -> candidates (methods + metadatas) ->  rules engine -> decision

WDYT?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDI2MDkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDM5NDM2NA==,golo-lang,164394364,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T09:54:52Z,2015-12-14T09:54:52Z,"@Artpej I fully agree with you.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDM5NDM2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQwNTUxMQ==,golo-lang,164405511,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T10:40:06Z,2015-12-14T10:40:06Z,"@Artpej I don't get your 3rd point about augmentations raising compilation exception. Do you mean that

``` golo
augment Foo {
   function bar = |this| -> ...
}
augment Foo {
   function plop = |this| -> ...
}
```

should raise an exception? If so, I disagree. If your point is to fail if the 2nd `augment` is a `bar` function, then I'm ok.

I started to refactor augmentation resolution, but with a different order. Mine is:
target > scope > kind > order

where:
- _target_: the augmented class. _specific > generic_, that is if `Foo` and `Object` are augmented with a function with the same signature, the one on `Foo` must always be choosen, wherever it's defined.
- _scope_: the more local definition must be choosen, _local > imported > call stack_ (call stack to be added, in progess)
- _kind_: how the method was added: _normal > named_ this allow to add a named augmentation (mixin-like) and redefine directly some of the methods. For instance:

``` golo
augmentation Mixin = {
    function foo = |this| -> ""default foo""
    function sayFoo = |this| { println(""Hello "" + this: foo() }
}

augment Foo with Mixin
augment Foo {
    function foo = |this| -> ""redefined foo""
}

Foo(): sayFoo() # must print ""Hello redefined foo""
```
- _order_: every other thing being equal, the first one is used.

Currently, the “real” method are always used before augmentations, that is we can't override a native java method with an augmentation. According to @jponge it could lead to issues. We have to think hard not to create unpredictable behavior.

I think a debug option (command line option or environment variable) could be defined to trace in the runtime which method/augmentation/function was used (resolved), to help understant the behavior of the code if such a case arise.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQwNTUxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQzMDA5OQ==,golo-lang,164430099,326,NA,artpej,693299,Sylvain Desgrais,,NA,2015-12-14T12:57:58Z,2015-12-14T12:57:58Z,"``` golo
augment Foo {
   function bar = |this| -> ...
}

# long code listing ...

augment Foo {
   function plop = |this| -> ...
}
```

That's right, i had in mind to throw an exception in this case because the previous seem's to me  confusing: it can be difficult to find where the `plop` method is defined at posteriori. Not a technical thing, just a constraint in order to improve readability. This is just my current opinion, I had not deeply think about it :wink:.

Tow others things:
- It seem's to me there nothing that garenty the method order inside a module (eg class)
- should we care about java inheritance:

``` golo
augment java.util.List {
   function plop = |this| -> ...
}

augment java.util.ArrayList {
   function plop = |this| -> ...
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQzMDA5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQzNjMzOQ==,golo-lang,164436339,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T13:28:39Z,2015-12-14T13:28:39Z,"@yloiseau yes, augmentations must not override existing class methods. Also agreed on the proposed resolution order.

@Artpej in your last example on `List` and `ArrayList`:

``` golo
let a = java.util.ArrayList()
let b = java.util.LinkedList()
```

then:

`a: plop()` should resolve the `ArrayList` augmentation, while `b: plop()` should resolve the one on `List`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQzNjMzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0MDYyMg==,golo-lang,164440622,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T13:38:27Z,2015-12-14T13:38:27Z,"Regarding compilation exceptions then we should do what's most _reasonable_ for a dynamically-typed language.

Given:

``` golo
augment java.lang.String {
  function toString = |this| -> ""Ah Ah Ah""
}
```

then obviously we are not raising an exception in the current implementation, and at runtime there is no way `toString` from the augmentation gets selected. It seems _fine_ to me, although if we loaded class definitions in the compiler to do further checkings we would be wise to raise a warning or even an error. 

I suppose what @Artpej had in mind is cases like:

``` golo
augmentation A = {
  function plop = |this| -> 1
}

augmentation B = {
  function plop = |this| -> 2
}

augment java.lang.String with A, B
```

where there is ambiguity in resolving which `foo` from `A` or `B` shall be called. One option would be to raise a compilation error, but again you need to load definitions.

Perhaps what we really want is just precise runtime semantics where we say that the above code would compile, but calling `""yo"": foo()` would resolve to the `foo` from `A` because of the augmentation application ordering.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0MDYyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTA5NQ==,golo-lang,164445095,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:01:28Z,2015-12-14T14:01:28Z,"@jponge That is the case if I recall correctly
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTA5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTUyMg==,golo-lang,164445522,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:03:40Z,2015-12-14T14:03:40Z,"quoting section [9.4. Named augmentations](http://golo-lang.org/documentation/next/index.html#_named_augmentations)

> When applying several named augmentations, they are used in the application order. 
> For instance, if `AugmentA` and `AugmentB` define both the method `meth`, and we
> `augment java.lang.String with AugmentA, AugmentB`, then calling `"""": meth()` will call
> AugmentA::meth.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTUyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTY5Nw==,golo-lang,164445697,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T14:04:32Z,2015-12-14T14:04:32Z,"@yloiseau indeed :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NTY5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NjQ3OA==,golo-lang,164446478,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:07:48Z,2015-12-14T14:07:48Z,"@Artpej Not sure about the multiple augmentation thing. It depends how you want to organize your code. For instance:

``` golo
# define the foo behavior on several objects.
augment Foo {
    function foo = ...
    function sayFoo = ...
}
augment Bar {
   function foo = ...
   function sayFoo = ...
}
...

# define the bar behavior on several objects.
augment Foo {
   function bar = ...
   function sayBar = ...
}
augment Bar = {
    function bar = ...
    function sayBar = ...
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0NjQ3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0ODQzMg==,golo-lang,164448432,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:17:05Z,2015-12-14T14:17:05Z,"One use case I had in mind with the resolution order for augmentations was:

``` golo
module Augmentation

augmentation Fooable = {
    function foo = |this| -> ""foo "" + this: bar()
    function isFooable = |this| -> true
}
augment java.lang.Object {
    function isFooable = |this| -> false
}
```

``` golo
module Data

struct Foo = { bar }
augment Foo with Augmentation.Fooable
```

``` golo
module Lib

function sayFoo = |f| -> case {
    when f: isFooable() { println(""Foo: "" + f: foo() }
    otherwise { println(""not fooable"") }
}
```

``` golo
module Main

import Data
import Lib
import Augmentation

augment java.lang.String {
    function bar = |this| -> this
}
augment java.lang.String with Fooable

augment java.util.List with Fooable
augment java.util.List {
    function foo = |this| -> ""ListFoo""
}

function main = |args| {
    sayFoo(Object())  # not fooable
    sayFoo(Foo(42))  # Foo: foo 42
    sayFoo(list[42])    # Foo: ListFoo
    sayFoo(""bar"")       # Foo: foo bar
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0ODQzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0ODg5Ng==,golo-lang,164448896,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:18:14Z,2015-12-14T14:18:14Z,"This is not working by far
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ0ODg5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MDQzNQ==,golo-lang,164450435,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T14:25:29Z,2015-12-14T14:25:29Z,"In this case it's perhaps better to wrap around union types than augmentations.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MDQzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MTMwNA==,golo-lang,164451304,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:29:31Z,2015-12-14T14:29:31Z,"@jponge indeed, but this allow to make any existing java object `Fooable`... Kind of overriding `oftype` for augmentations.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MTMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MTY0NA==,golo-lang,164451644,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:30:52Z,2015-12-14T14:30:52Z,"or emulation of higher kinded types :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1MTY0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1Mjc4NA==,golo-lang,164452784,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-14T14:36:14Z,2015-12-14T14:36:14Z,"I think we'll need to fix this by small steps, since like @Artpej said it's a big one, linked to several other issues
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1Mjc4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1NTc2Nw==,golo-lang,164455767,326,NA,jponge,25961,Julien Ponge,,NA,2015-12-14T14:48:58Z,2015-12-14T14:48:58Z,"> or emulation of higher kinded types

I could see it coming :-p
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NDQ1NTc2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQxMzM5MA==,golo-lang,168413390,326,NA,jponge,25961,Julien Ponge,,NA,2016-01-02T18:13:13Z,2016-01-02T18:13:13Z,"Fixed?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQxMzM5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQxNTY1NQ==,golo-lang,168415655,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-02T18:45:10Z,2016-01-02T18:45:10Z,"Some cases are fixed by previous PRs, but I'm not sure we cover all corner cases.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2ODQxNTY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI3MzI0MA==,golo-lang,169273240,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-06T09:15:33Z,2016-01-06T09:15:33Z,"So where are we? To summarize (feel free to edit this comment to add cases and details):
- Declaring golo functions and augmentations:
  - [x] two functions with the same name and arity in the same module throw a compilation exception #330 
  - [x] two functions with the same name and arity in the same augmentation throw a compilation exception #330 
  - [ ] warning when an augmentation function is shadowed by a regular method, an thus is never used?
-  Calling functions and methods: mimic the java resolution order, i.e. more specific first, fixed arity before varargs:
    - [x] well defined and deterministic resolution order for augmentations: #334 
    - [x] fixed arity before varargs in regular methods resolution: #334, #333 
    - [x] overloaded regular instance methods: #339 
    - [ ] well defined and deterministic resolution order for regular methods: #455 
    - [ ] well defined and deterministic resolution order for functions (waiting `FunctionCallSupport` refactoring started by @yloiseau)
        - [ ] overloaded regular static methods (functions): #341 
        - [ ] fixed arity before varargs in regular static methods (functions)
        - [ ] import priorities for functions: fully qualified > simple name, local > imported, the first imported one wins (see also #340)
- Referencing functions (`fun` and `^`):
  - [x] add a parameter to `fun` to specify if we want a fixed arity or a varargs function. Ambiguous semantic here: does the arity parameter of `fun` specify the real arity of the method/function (i.e. number or parameters of the function) or does it represent the intended number of arguments for the method/function (i.e. the number of arguments we will call the function with). This is the same for fixed arity, but not for varargs (fixed in #366: the arity parameter is the real function arity)
  - [x] extended literal notation for references #312 
  - [ ] use a “multiple reference proxy” that will be resolved when called if the reference specification is ambiguous, instead of throwing a `AmbiguousFunctionReferenceException` (@Artpej ?)
- Debugging:
  - [ ] add a debugging parameter (command line option, property configuration, environment variable) that allow to trace which function/method/augmentation is used
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI3MzI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI3NDIzMQ==,golo-lang,169274231,326,NA,jponge,25961,Julien Ponge,,NA,2016-01-06T09:20:47Z,2016-01-06T09:20:47Z,"Yep :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI3NDIzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI5MzY1OA==,golo-lang,169293658,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-06T10:37:37Z,2016-01-06T10:37:37Z,"While we are at it, another idea than can fall in this part... What about autocurry? :smile:
For instance, given

``` golo
function foo = |a| -> a + 1
function foo = |a, b, c| -> a + b + c
```

`foo(1)` will return 2, as currently, but `foo(1, 2)`, instead of throwing `WrongMethodTypeException`, would return a partialized version of `foo\3`, such that `foo(1, 2)(3)` returns `6`.

This automatic approach would change the behavior of _all_ functions (including Java native static methods), and could also be added in method support (being regular ones or augmentations)

On an other hand, this is quite easy to implement in a `curry` HOF/decorator, and thus make it an explicit behavior.

What do you think ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTI5MzY1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTQ2MTA2Mg==,golo-lang,169461062,326,NA,jponge,25961,Julien Ponge,,NA,2016-01-06T21:06:44Z,2016-01-06T21:06:44Z,"Autocurry is an intriguing feature :smile:

On the minus side returning a partially-applied function reference if you make an error and forget some arguments is a likely to cause hard to track errors, since the syntax is that of a regular call.

On the plus side: it would look fine with a free variable / placeholder parameter, like `_` in Scala, which could lead to code like:

``` golo
let f = |a, b, c| -> a + b + c

let g = f(_, 0, _)
println(g(1, 3))
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTQ2MTA2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTQ3NjMyOQ==,golo-lang,169476329,326,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-06T22:01:16Z,2016-01-06T22:01:16Z,"Hum… interesting. So this approach could even take place at compile time, (e.g. in `SugarExpansionVisitor`) by replacing 

``` golo
let g = f(?, 0, ?)
```

by

``` golo
let g = ^f: bindAt(1, 0)
```

or something similar (yes, I found `?` more appealing than `_`, partly since I often use `_` to represent a ignored parameter for instance).

This would moreover allow to easily partialize on any argument, while with autocurry you always partialize parameters in order. On the other hand, autocurry mixed with named arguments would allow to simply do 

``` golo
let g = f(b=0)
```

which reminds me the @danielpetisme idea on fluent partializing using named parameters (see https://github.com/eclipse/golo-lang/pull/250#issuecomment-77352718)

Maybe we should keep discussions on this topic for another issue :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTQ3NjMyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTUzNzMyNg==,golo-lang,169537326,326,NA,franckverrot,108369,Franck Verrot,franck@verrot.fr,NA,2016-01-07T03:15:57Z,2016-01-07T03:15:57Z,"+1 for autocurrying!

—
Sent from Mailbox

On Wed, Jan 6, 2016 at 2:01 PM, Yannick Loiseau notifications@github.com
wrote:

> Hum… interesting. So this approach could even take place at compile time, (e.g. in `SugarExpansionVisitor`) by replacing 
> 
> ``` golo
> let g = f(?, 0, ?)
> ```
> 
> by
> 
> ``` golo
> let g = ^f: bindAt(1, 0)
> ```
> 
> or something similar (yes, I found `?` more appealing than `_`, partly since I often use `_` to represent a ignored parameter for instance).
> This would moreover allow to easily partialize on any argument, while with autocurry you always partialize parameters in order. On the other hand, autocurry mixed with named arguments would allow to simply do 
> 
> ``` golo
> let g = f(b=0)
> ```
> 
> which reminds me the @danielpetisme idea on fluent partializing using named parameters (see https://github.com/eclipse/golo-lang/pull/250#issuecomment-77352718)
> 
> ## Maybe we should keep discussions on this topic for another issue :smile:
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/eclipse/golo-lang/issues/326#issuecomment-169476329
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTUzNzMyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/326,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTU5NjQxNQ==,golo-lang,169596415,326,NA,jponge,25961,Julien Ponge,,NA,2016-01-07T08:32:39Z,2016-01-07T08:32:39Z,"It would make sense when done with, say, `?` :+1:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTU5NjQxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,golo-lang,123504016,331,Method selection issue on Oracle JDK 1.8.0_72-ea,jponge,25961,Julien Ponge,,CLOSED,2015-12-22T15:43:08Z,2015-12-22T20:27:13Z,"Using this JDK the `master` branch with #330 from @Artpej fails on a single test: `org.eclipse.golo.compiler.CompileAndRunTest.test_method_invocations`

```
java.lang.AssertionError: 
Expected: is ""fixed""
     but: was ""variable""
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)
    at org.eclipse.golo.compiler.CompileAndRunTest.test_method_invocations(CompileAndRunTest.java:676)
(...)
```

The test case is based around a `String` augmentation and 2 overloaded targets:

``` golo
augment java.lang.String {
  function test = |this, a...| -> ""variable""
  function test = |this, a| -> ""fixed""
}

function test_order_fixed = -> """":test(1)

function test_order_var = -> """":test(1,2)
```

With this particular early access JDK:

```
$ java -version
java version ""1.8.0_72-ea""
Java(TM) SE Runtime Environment (build 1.8.0_72-ea-b05)
Java HotSpot(TM) 64-Bit Server VM (build 25.72-b05, mixed mode)
```

then calling `test_order_fixed` selects the variable-arity `test` augmentation rather than the fixed arguments one.

What is also surprising is that `RegularMethodFinder::getCandidates()` properly favours fixed argument targets over variable argument ones:

``` java
private List<Method> getCandidates() {
    List<Method> candidates = new LinkedList<>();
    HashSet<Method> methods = new HashSet<>();
    Collections.addAll(methods, receiverClass.getMethods());
    Collections.addAll(methods, receiverClass.getDeclaredMethods());
    for (Method method : methods) {
      if (isCandidateMethod(method) && !method.isVarArgs()) {
        candidates.add(method);
      } else if (isValidPrivateStructAccess(method) && !method.isVarArgs()) {
        candidates.add(method);
      }
    }
    for (Method method : methods) {
      if (isCandidateMethod(method) && method.isVarArgs()) {
        candidates.add(method);
      } else if (isValidPrivateStructAccess(method) && method.isVarArgs()) {
        candidates.add(method);
      }
    }
    return candidates;
  }
```

It is also worth noting that both Travis-CI and the Eclipse Hudson instance haven't spotted the issue, they are running a `u60` JDK 8 at best.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/331/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY1Nzc0MQ==,golo-lang,166657741,331,NA,jponge,25961,Julien Ponge,,NA,2015-12-22T16:01:29Z,2015-12-22T16:01:29Z,"Testing on older JDKs still on my machine.

:red_circle: 

```
$ java -version
java version ""1.8.0_66-ea""
Java(TM) SE Runtime Environment (build 1.8.0_66-ea-b02)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b02, mixed mode)
```

:red_circle: 

```
$ java -version
java version ""1.8.0_60""
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)
```

:red_circle: 

```
$ java -version
java version ""1.8.0_40""
Java(TM) SE Runtime Environment (build 1.8.0_40-b25)
Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)
```

They all fail, which is very strange,

I went through the debugger this afternoon, but I could not find out why this test failed.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY1Nzc0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY3MDE1MQ==,golo-lang,166670151,331,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2015-12-22T16:45:10Z,2015-12-22T16:45:10Z,":white_check_mark: “Works on my machine©™” with the fresh new master

```
$ git log | head -n 1
commit d85bb24ff735f719deb53fb987433773a48bc7f2

$ uname -a
Linux marvin 4.3.0-1-amd64 #1 SMP Debian 4.3.3-2 (2015-12-17) x86_64 GNU/Linux

$ java -version
openjdk version ""1.8.0_72-internal""
OpenJDK Runtime Environment (build 1.8.0_72-internal-b05)
OpenJDK 64-Bit Server VM (build 25.72-b05, mixed mode)

$ ./gradlew --daemon clean test
[...]
:test

BUILD SUCCESSFUL
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY3MDE1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY3OTc5OA==,golo-lang,166679798,331,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2015-12-22T17:25:11Z,2015-12-22T17:25:11Z,":red_circle:  ""Broke on my machine""

```
$ java version ""1.8.0_45""
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjY3OTc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/331,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjcxNzEwMw==,golo-lang,166717103,331,NA,artpej,693299,Sylvain Desgrais,,NA,2015-12-22T20:04:45Z,2015-12-22T20:04:45Z,"fixed! see #333 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NjcxNzEwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,golo-lang,123981868,335,Named parameters generate error exception when used with returned function,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2015-12-27T14:45:10Z,2016-01-08T11:13:32Z,"Named parameters generate error exception when used with returned function:

With this sample:

``` golo
function yo = |message| {
  return |before, after| {
    println(before + "":"" + message + "":"" + after)
  }
}

function main = |args| {
  yo(""bob"")(""Hello"", ""!"") #Hello:bob:!
  yo(""sam"")(before=""Hello"", after=""!"")
}
```

`yo(""sam"")(before=""Hello"", after=""!"")` throw an IllegalAccessException:

```
Exception in thread ""main"" java.lang.IllegalAccessException: no such method: named_params.main(String[])void/invokeStatic
        at java.lang.invoke.MemberName.makeAccessException(MemberName.java:872)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:993)
        at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1379)
        at java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:776)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:54)
        at org.eclipse.golo.cli.Main.main(Main.java:64)
Caused by: java.lang.VerifyError: Operand stack underflow
Exception Details:
  Location:
    named_params.main([Ljava/lang/String;)V @30: invokedynamic
  Reason:
    Attempt to pop empty stack.
  Current Frame:
    bci: @30
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { 'gololang/FunctionReference' }
  Bytecode:
    0x0000000: 1231 ba00 3900 00c0 0027 123b 123d ba00
    0x0000010: 4500 0057 1247 ba00 3900 00c0 0027 ba00
    0x0000020: 4500 0057 01b1

        at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
        at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:965)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:990)
        ... 5 more
```

Strangely, if I reverse the 2 lines:

``` golo
function main = |args| {
  yo(""sam"")(before=""Hello"", after=""!"")
  yo(""bob"")(""Hello"", ""!"") #Hello:bob:!
}
```

I get a different exception:

```
Exception in thread ""main"" java.lang.NegativeArraySizeException
        at org.objectweb.asm.Frame.a(Unknown Source)
        at org.objectweb.asm.MethodWriter.visitMaxs(Unknown Source)
        at org.eclipse.golo.compiler.JavaBytecodeGenerationGoloIrVisitor.visitFunction(JavaBytecodeGenerationGoloIrVisitor.java:333)
        at org.eclipse.golo.compiler.ir.GoloFunction.accept(GoloFunction.java:333)
        at org.eclipse.golo.compiler.ir.GoloModule.walk(GoloModule.java:187)
        at org.eclipse.golo.compiler.JavaBytecodeGenerationGoloIrVisitor.visitModule(JavaBytecodeGenerationGoloIrVisitor.java:128)
        at org.eclipse.golo.compiler.ir.GoloModule.accept(GoloModule.java:163)
        at org.eclipse.golo.compiler.JavaBytecodeGenerationGoloIrVisitor.generateBytecode(JavaBytecodeGenerationGoloIrVisitor.java:82)
        at org.eclipse.golo.compiler.GoloCompiler.compile(GoloCompiler.java:102)
        at org.eclipse.golo.compiler.GoloClassLoader.load(GoloClassLoader.java:53)
        at org.eclipse.golo.cli.command.GoloGoloCommand.loadGoloFile(GoloGoloCommand.java:75)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:45)
        at org.eclipse.golo.cli.Main.main(Main.java:64)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzUyODY3Mw==,golo-lang,167528673,335,NA,jponge,25961,Julien Ponge,,NA,2015-12-28T09:48:09Z,2015-12-28T09:48:09Z,"Are you still having the issue?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzUyODY3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU2NDk3Mg==,golo-lang,167564972,335,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2015-12-28T13:03:02Z,2015-12-28T13:03:02Z,"yes
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2NzU2NDk3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY2ODU2Nw==,golo-lang,169668567,335,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T13:49:05Z,2016-01-07T13:49:05Z,"This seams to appear only when using anonymous call. Indeed:

``` golo
let y = yo(""sam"")
y(before=""Hello"", after=""!"")
```

is OK, as well as

``` golo
yo(""sam""): invoke(before=""Hello"", after=""!"")
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY2ODU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY3MTIwNA==,golo-lang,169671204,335,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T13:57:28Z,2016-01-07T13:57:28Z,"On the other hand:

``` golo
function say = |message, before, after| {
  println(before + "":"" + message + "":"" + after)
}

function main = |args| {
  ^say: bindAt(""message"", ""sam"")(before=""Hello"", after=""!"")
}
```

throws the same exception, only if using named arguments.
The issue should thus be located at the conjunction of anonymous call and named arguments :smile:
and probably concerns bytecode generation (we mess up the stack)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTY3MTIwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTgyMjE0MQ==,golo-lang,169822141,335,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T22:10:08Z,2016-01-07T22:10:08Z,"It's actually when named arguments are used on references:

``` golo
module Test
function add = |left, right| -> left + right
function main = |args| {
  ^add(right=""a"", left=""b"")
}
```

```
$ golo golo --files test.golo 
Exception in thread ""main"" java.lang.IllegalAccessException: no such method: TestA.main(String[])void/invokeStatic
    at java.lang.invoke.MemberName.makeAccessException(MemberName.java:869)
    at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:990)
    at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1382)
    at java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:777)
    at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
    at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:54)
    at org.eclipse.golo.cli.Main.main(Main.java:64)
Caused by: java.lang.VerifyError: Operand stack underflow
Exception Details:
  Location:
    TestA.main([Ljava/lang/String;)V @19: invokedynamic
  Reason:
    Attempt to pop empty stack.
  Current Frame:
    bci: @19
    flags: { }
    locals: { '[Ljava/lang/String;' }
    stack: { 'gololang/FunctionReference' }
  Bytecode:
    0x0000000: 1228 ba00 3100 0002 b800 37ba 0042 0000
    0x0000010: c000 44ba 004d 0000 5701 b1            

    at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
    at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:962)
    at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:987)
    ... 5 more
```

Arguments are not pushed to the stack:

``` java
  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=1, args_size=1
         0: ldc           #40                 // String add
         2: invokedynamic #49,  0             // InvokeDynamic #1:Test:()Ljava/lang/Class;
         7: iconst_m1
         8: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        11: invokedynamic #66,  0             // InvokeDynamic #2:""gololang#Predefined#fun"":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        16: checkcast     #68                 // class gololang/FunctionReference
        19: invokedynamic #77,  0             // InvokeDynamic #3:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        24: pop
        25: aconst_null
        26: return
```

while not using names (i.e. `^add(""a"", ""b"")`) generates:

``` java
  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=1, args_size=1
         0: ldc           #40                 // String add
         2: invokedynamic #49,  0             // InvokeDynamic #1:Test:()Ljava/lang/Class;
         7: iconst_m1
         8: invokestatic  #55                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        11: invokedynamic #66,  0             // InvokeDynamic #2:""gololang#Predefined#fun"":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        16: checkcast     #68                 // class gololang/FunctionReference
        19: ldc           #70                 // String a
        21: ldc           #72                 // String b
        23: invokedynamic #81,  0             // InvokeDynamic #3:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        28: pop
        29: aconst_null
        30: return

```

the two `ldc` are missing.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTgyMjE0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/335,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTgzNzU2MQ==,golo-lang,169837561,335,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T23:15:39Z,2016-01-07T23:15:39Z,"Got it :tada: (see  #346)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTgzNzU2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/340,https://api.github.com/repos/eclipse-archived/golo-lang/issues/340,golo-lang,124785414,340,Strange behaviour with resolution of imports,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2016-01-04T16:03:25Z,2018-03-23T16:33:10Z,"I'm playing with Golo and Vert.x:

``` golo
import io.vertx.ext.web.handler.BodyHandler
import io.vertx.ext.web.handler.StaticHandler

function main = |args| {
  let staticHandler = StaticHandler.create()
  println(staticHandler: getClass(): getCanonicalName())
  # io.vertx.ext.web.handler.impl.BodyHandlerImpl
}
```

`staticHandler` has not the appropriate type (`BodyHandler`instead of `StaticHandler` )
if  I revert order of imports it's OK or if I write this : `let staticHandler = io.vertx.ext.web.handler.StaticHandler.create()`

workaround by @yloiseau : use only `import io.vertx.ext.web.handler` (it works fine)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/340/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/340,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDk3MDUxMA==,golo-lang,374970510,340,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-03-21T15:06:14Z,2018-03-21T15:06:14Z,See https://github.com/yloiseau/golo-tests/tree/master/BUGS/340-imports,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDk3MDUxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/341,https://api.github.com/repos/eclipse-archived/golo-lang/issues/341,golo-lang,124929708,341,Support Java overloaded static methods,jponge,25961,Julien Ponge,,OPEN,2016-01-05T09:44:48Z,2016-01-05T16:43:42Z,"#339 brings support for overloaded instance methods.

It would be useful to do the same for overloaded static methods, which appear in some builder / facade APIs.

A refactoring of `FunctionCallSupport` like what was done with `MethodInvocationSupport` and resolvers would certainly help.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/341/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/341,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTA1NjY3NA==,golo-lang,169056674,341,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-05T16:43:42Z,2016-01-05T16:43:42Z,"The `FunctionCallSupport` refactoring is in the pipe… :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTA1NjY3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/342,https://api.github.com/repos/eclipse-archived/golo-lang/issues/342,golo-lang,125175184,342,orIfNull is eager,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-01-06T13:20:47Z,2016-01-06T21:09:03Z,"The `orIfNull` operator is currently eager, that is the right argument is evaluated even if the left one is not null. For instance

``` golo
function plop = {
  println(""da plop"")
  return 42
}

function main = |args| {
  let a = 69 orIfNull plop()
}
```

will print `da plop`.

It would be more useful if `orIfNull` were lazy, like boolean operators.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,golo-lang,125367584,344,Autocurry and partialization,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2016-01-07T10:33:43Z,2017-08-31T08:37:07Z,"# On curry and partialization

reflections on the idea suggested in https://github.com/eclipse/golo-lang/issues/326#issuecomment-169293658
## What we have
### Manual partialization

``` golo
function add = |a, b, c| -> a + b + c

add(""a"", ""b"", ""c"") == ""abc""
add(c=""a"", a=""b"", b=""c"") == ""bca""

let addA = ^add: bindTo(""a"")
addA(""b"", ""c"") == ""abc""

let addB = ^add: bindAt(1, ""b"")
addB(""a"", ""c"") == ""abc""

let addC = ^add: bindAt(""c"", ""c"")
addC(""a"", ""b"") == ""abc""

let addBC = ^add: insertArguments(1, ""b"", ""c"")
addBC(""a"") == ""abc""

let l = list[""a"", ""b"", ""c"", ""d""]: map(|x| -> ^add: bindTo(x))
l: get(2)(""d"", ""e"") == ""cde""

let f = ^add: insertArguments(0, 2, 20)
          : andThen(^add: insertArguments(0, ""The answer"", "" is ""))
f(20) == ""The answer is 42""

```

or fluent variant:

``` golo
augment gololang.FunctionReference {
  function fallback = |this, name, args| -> this: bindAt(name, args: get(0))
}

function add = |a, b, c| -> a + b + c

let addA = ^add: a(""a"")
let addB = ^add: b(""b"")
let addC = ^add: c(""c"")
let addBC = ^add: b(""b""): c(""c"")
```
- _pros_:
  - already working
  - readable
  - can partialize several parameters at the same time
  - can partialize any parameter
  - mix well with named arguments
  - natural: the original function is a regular one, no surprise
  - explicit: dev. can choose how to call/partialize the function
  - can be used on existing functions
- _cons_:
  - more verbose than curried functions (for simple, in order, cases)
  - must partialize by hand the function reference
  - can't be easily used in HOF and composition
### Manual curried definition

``` golo
function add = |a| -> |b| -> |c| -> a + b + c

add(""a"")(""b"")(""c"") == ""abc""

let addA = add(""a"")
let addB = |a| -> |c| -> add(a)(""b"")(c)
let addC = |a| -> |b| -> add(a)(b)(""c"")
let addBC = |a| -> add(a)(""b"")(""c"")

let l = list[""a"", ""b"", ""c"", ""d""]: map(^add)
l: get(2)(""d"")(""e"") 

let f = add(2)(20): andThen(add(""The answer"")("" is ""))
```
- _pros_:
  - already working
  - simple, no overhead
  - partializing is easy
  - explicit: dev. can choose how to define the function
  - easy to use in HOF and composition
  - predefined: function must be defined that way, can't use on existing functions
- _cons_:
  - predefined: dev. can't choose how to call/partialize the function
  - call is cumbersome
  - no named arguments (since always only one)
  - can't no more use `insertArguments` and `bind*`
  - can only partialize parameters in order. Here, one can't fix only `b`
## What can be done without changing the language
### Curring decorator

With this (simplified) decorator:

``` golo
function curry = |func| -> match {
  when func:type():parameterCount() < 2 then func
  otherwise ^_curried_: bindTo(func): asVarargsCollector(objectArrayType!())
}

local function _curried_ = |func, args| -> match {
  when args: size() == func:type():parameterCount() then func: invoke(args)
  otherwise curry(func: insertArguments(0, args))
}
```

we have:

``` golo
@curry
function add = |a, b, c| -> a + b + c

add(""a"", ""b"", ""c"") == ""abc""

let addA = add(""a"")
let addAB = add(""a"", ""b"")
let addB = curry(|a, c| -> add(a, ""b"", c))

let list[""a"", ""b"", ""c"", ""d""]: map(^add)
l: get(2)(""d"", ""e"")

let f = add(2, 20): andThen(add(""The answer"", "" is ""))
```
- _pros_:
  - already working (I have a branch with more elaborated decorator)
  - simple
  - partializing is super easy
  - explicit: dev. can choose how to define the function by using the decorator or not
  - easy to use in HOF and composition
  - can be applied to existing functions
- _cons_:
  - can hide calling errors (return a partial version instead of failing)
  - no named arguments (since its transformed into a varargs)
  - can't no more use `insertArguments` and `bind*`
  - can only partialize parameters in order
### Macro

When (if) macro will work, it should be possible to define a macro transforming

``` golo
function add = |a, b, c| -> a + b + c
```

into

``` golo
function add = |a, b, c| -> a + b + c
function add = |a, b| -> |c| -> a + b + c
function add = |a| -> |b, c| -> a + b + c
```

and thus:

``` golo
add(""a"", ""b"", ""c"") == ""abc""
add(c=""a"", a=""b"", b=""c"") == ""bca""

let addA = add(""a"")
let addAB = add(""a"", ""b"")
let addB = |a, c| -> add(a, ""b"", c))
# or
let addB = ^add\2: bindAt(1, ""b"")
let addC = ^add\3: bindAt(""c"", c"")

let list[""a"", ""b"", ""c"", ""d""]: map(^add)
l: get(2)(""d"", ""e"")

let f = add(2, 20): andThen(add(""The answer"", "" is ""))
```
- _pros_:
  - works with named arguments
  - in order partialization is easy
  - can partialize any parameter
  - explicit in the definition
  - natural call
  - easy to use in composition and HOF
- _cons_:
  - not working (yet)
  - can't be applied to existing functions (but another more verbose macro could do the work)
  - references become cumbersome since overloaded
  - when more than 2 parameters, how to partialize?
    `|a| -> |b, c| -> a + b + c` vs. `|a| -> |b| -> |c| -> a + b + c`
    (can't be both)
## What can be changed

These solutions don't exclude the previous ones.
### Autocurry at resolution time

When looking up the function at runtime, if only a function with more parameter than the call site is found, a partialized version can be returned instead of failing.

``` golo
function add = |a, b, c| -> a + b + c

add(""a"", ""b"", ""c"") == ""abc""
add(c=""a"", a=""b"", b=""c"") == ""bca""

let addA = add(""a"")
let addAB = add(""a"", ""b"")
# or
let addAB = ^add: insertArguments(0, ""a"", ""b"")

let addB = |a, c| -> add(a, ""b"", c))
# or
let addB = ^add: bindAt(1, ""b"")
# or, if made named arguments aware
let addB = add(b=""b"")

let list[""a"", ""b"", ""c"", ""d""]: map(^add)
l: get(2)(""d"", ""e"")

let f = add(2, 20): andThen(add(""The answer"", "" is ""))
```
- _pros_: 
  - automatic, no overhead
  - works with named arguments
  - can `insertArguments` and `bind`
  - works on all functions (even Java static methods) for free
  - call looks natural (no `(1)(2)(3)`)
  - easy use in HOF and composition
- _cons_:
  - doesn't work (but can be ""easily"" implemented)
  - can hide errors
  - implicit: can't choose which function is curried
  - maybe unpredictable: what about varargs function? I need to think about it

For the implicit aspect, we can imagine a way to activate the feature modulewise, for instance a special comment or a dummy import that configure the runtime. For instance

``` golo
#-*- with: autocurry -*-#
```

adding a meta flag in the module, inspected by the runtime.
### Partialization with special placeholders

Adding a special call syntax, with a placeholder symbol, that returns a partialized version of the function.
This can be done at runtime, or as a syntactic sugar expanded to normal partialization at compiletime.

``` golo
function add = |a, b, c| -> a + b + c

add(""a"", ""b"", ""c"") == ""abc""
add(c=""a"", a=""b"", b=""c"") == ""bca""

let addA = add(""a"", ?, ?)
let addAB = add(""a"", ""b"", ?)
# or
let addAB = ^add: insertArguments(0, ""a"", ""b"")

let addB = add(?, ""b"", ?))
# or
let addB = ^add: bindAt(1, ""b"")

let addBC = add(?, ""b"", ""c"")

let list[""a"", ""b"", ""c"", ""d""]: map(|x| -> add(x, ?, ?))
l: get(2)(""d"", ""e"")

let f = add(2, 20, ?): andThen(add(""The answer"", "" is "", ?))
```

_pros and cons_: same as manual partialization, since it can be seen just as syntactic sugar. Plus:
- _pros_:
  - less verbose than manual partialization
  - more convenient for composition
- _cons_:
  - a little more verbose than autocurry
  - less convenient for HOF
- _issues_:
  - how to deal with named arguments? needs more thinking
  - how to deal with varargs? needs more thinking
## Conclusion

We can already do a lot of things. The proposed changes (autocurry or special call syntax) would only allow a less verbose use, more specifically in composition and HOF.

I'm not fixed yet. The special syntax is clear and more explicit, but the autocurry is easier to use when applying in HOF.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/344/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTg0MDAwMQ==,golo-lang,169840001,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-07T23:30:10Z,2016-01-07T23:30:10Z,"ping @jponge @franckverrot @danielpetisme 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTg0MDAwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTg1MDk3MQ==,golo-lang,169850971,344,NA,franckverrot,108369,Franck Verrot,franck@verrot.fr,NA,2016-01-08T00:35:10Z,2016-01-08T00:35:10Z,"Great detailed explanations here! :heart_eyes: 

I'm not so fond of the special placeholders (being `?` or `_`) if I'd need to change (add or remove a special placeholder) all over the place when my initial method signature changes.
Autocurrying at resolution time looks great. :+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTg1MDk3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTk1MTgxMA==,golo-lang,169951810,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-08T10:00:36Z,2016-01-08T10:00:36Z,"@franckverrot  even with autocurry, if your signature changes, say you add a final parameter, you'll need to change the calls anyway, or you'll end up with partialized functions everywhere :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTk1MTgxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTk3MjYxMQ==,golo-lang,169972611,344,NA,jponge,25961,Julien Ponge,,NA,2016-01-08T11:31:27Z,2016-01-08T11:31:27Z,"For me the biggest issue of auto-currying is that it hides errors, since function calls either evaluate if the right number of parameters are present, or else it returns a partially-applied function if less arguments are given. That's a blocker for me :wink: 

I'm very fond of the _placeholder_ option. It is explicit and in line with what other languages do.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE2OTk3MjYxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDE3NTk2Ng==,golo-lang,170175966,344,NA,franckverrot,108369,Franck Verrot,franck@verrot.fr,NA,2016-01-09T01:27:11Z,2016-01-09T01:27:11Z,"@yloiseau partial functions everywhere is just fine. I :heart: Haskell for that.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDE3NTk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNDczOA==,golo-lang,170214738,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-09T09:25:12Z,2016-01-09T09:25:12Z,"@franckverrot  I agree. I'm also more inclined  to the autocurry solution. 

But I was answering your remark that you need to add placeholders if signature changes. The fact is that even with autocurry you have to change the code if the signature change, but at the final call side, not the partializing one. For instance given:

``` golo
# String × String × String → String
function foo = |a, b, c| -> ""<"" + a + b + c + "">""
```

say you partialize `foo`, whatever the way:
- manual:

``` golo
# fix a and b
# String → String
let f = ^foo: bindTo(""a""): bindTo(""b"")

# fix a
# String × String → String
let g = ^foo: bindTo(""h"") 
```
- placeholder:

``` golo
# fix a and b
# String → String
let f = foo(""a"", ""b"", ?)

# fix a
# String × String → String
let g = foo(""h"", ?, ?) 
```
- curry (auto at runtime, decorator, manual definition...):

``` golo
# fix a and b
# String → String
let f = foo(""a"", ""b"")

# fix a
# String × String → String
let g = foo(""h"") 
```

NOTE: with placeholders, it's easier to partialize on other parameters. Compare

``` golo
let h = foo(?, ""b"", ?)
```

and

``` golo
let h = |a, c| -> foo(""b"")
```

(and since it's a binding and not a new function, we guaranty parameter names stay the same)
 :smile:

Anyway, we can now do things such as:

``` golo
println(list[""x"", ""y""]: map(f): reduce(""z"", g)  
# <h<hz<abx>><aby>>
```

Imagine that now, you change `foo` signature, say you add a parameter for the suffix:

``` golo
# String × String × String × String → String
function foo = |a, b, c, suff| -> ""<"" + a + b + c + suff
```

The placeholder form no longer works, since `foo(""a"", ""b"", ?)` would raise an exception that we don't have a 3 param function named ""foo"". 

Without changing the code, the curry version would indeed partialize fine, but:

``` golo
# fix a and b
# String × String → String
let f = foo(""a"", ""b"")

# fix a
# String × String × String → String
let g = foo(""h"") 
```

The map works thanks to curry, and we thus have a list of `String → String` functions:

``` golo
list[""x"", ""y""]: map(f)
# list[f1, f2] = list[|v| -> ""<abx"" + v, |v| -> ""<aby"" + v]
```

Reducing it with `: reduce(""z"", g)`, we have `g(g(""z"", f1), f2)`, that is

``` golo
g(g(""z"", |v| -> ""<abx"" + v), |v| -> ""<aby"" + v)
```

This would fail at compile time in Caml, thanks to the strong type system, since we would have 
`g : String → String → String → String` and we would have needed
`g : String → (String → String → String) → String`. Same in Haskell, as functions does not implement `Show`.

Actually, `g` and the mapped list can be seen as 

``` golo
let g =  |b, c| -> |suff| -> ""<h"" + b + c + suff
let l = list[|v| -> ""<abx"" + v, |v| -> ""<aby"" + v]
```

so `l: reduce(""z"", g)` would work in Golo (with autocurry)! 

``` golo
l: reduce(""z"", g)
g(g(""z"", |v| -> ""<abx"" + v), |v| -> ""<aby"" + v)
g((|b, c| -> |suff| -> ""<h"" + b + c + suff)(""z"", |v| -> ""<abx"" + v), |v| -> ""<aby"" + v)
g(|suff| -> ""<hz"" + (|v| -> ""<abx"" + v): toString(), |v| -> ""<aby"" + v)
|suff| -> ""<hz"" + (|suff| -> ""<hz"" + (|v| -> ""<abx"" + v): toString()): toString() + (|v| -> ""<aby"" + v): toString())
```

The functions in the lists are converted into `String`s, and joined, and we get a function taking the suffix, the added parameter that was not partialized.
Indeed (actuall working code):

``` golo
let g =  |b, c| -> |suff| -> ""<h"" + b + c + suff
let l = list[|v| -> ""<abx"" + v, |v| -> ""<aby"" + v]

println(l: reduce(""z"", g): invoke(""k""))
```

gives

```
<hFunctionReference{handle=MethodHandle(Object)Object, parameterNames=[suff]}FunctionReference{handle=MethodHandle(Object)Object, parameterNames=[v]}k
```

This is what @jponge had in mind. No fail, just the wrong behavior.

If we want the same behavior as before, We have to change the partialization. The placeholder form is now:

``` golo
# fix a, b and suffix
# String → String
let f = foo(""a"", ""b"", ?, "">"")

# fix a and suffix
# String × String → String
let g = foo(""h"", ?, ?, "">"") 
```

and the curry one:

``` golo
# fix a, b and suffix, can't be done directly with autocurry
# String → String
let f = |x| -> foo(""a"", ""b"", x, "">"")

# fix a and suffix, can't be done directly with autocurry
# String × String → String
let g = |b, c| -> foo(""h"", b, c, "">"") 
```

If we added a parameter for prefix, this would have been more readable for the autocurry, leading to:

``` golo
let f = foo(""<"", ""a"", ""b"", ?)
let g = foo(""<"", ""h"", ?, ?) 
```

vs.

``` golo
let f = foo(""<"", ""a"", ""b"")
let g = foo(""<"", ""h"")
```

An other solution is to change the way the functions are called to partialize the new parameter when called, e.g.

``` golo
list[""x"", ""y""]: map(f: bindAt(""suff"", "">"")): reduce(""z"", g: bindAt(""suff"", "">"")))
```

So, to conclude on your previous remark, with both methods you need to change your code if the function signature change, either by adding a placeholder or changing the calls, or by adding a partializing argument.

Actually, the more I think about it, the more I like the placeholder approach, even if I find the autocurry more natural and elegant. The only drawback of placeholders is that the previous mapping case can't be done:

``` golo
let foo = |a, b| -> a + b

list[""x"", ""y""]: map(foo)
```

fails with placeholders, but gives a list of unary functions with curry. To do it without curry, we have to use a lambda:

``` golo
let foo = |a, b| -> a + b

list[""x"", ""y""]: map(|a| -> foo(a, ?))
# or
list[""x"", ""y""]: map(|a| -> foo: bindTo(a))
```

However, this case can be covered by the decorator:

``` golo
list[""x"", ""y""]: map(curry(foo))
```

I'm really not fixed…
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNDczOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNDgzNg==,golo-lang,170214836,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-09T09:27:05Z,2016-01-09T09:27:05Z,"Moreover, the placeholder approach could be compile time syntactic sugar…

Note that the solutions are not mutually exclusives :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNDgzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNTIzNA==,golo-lang,170215234,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-09T09:37:08Z,2016-01-09T09:37:08Z,"Hum... no it could not be compile time syntactic sugar :disappointed:
We must do the same lookup as for functions, and thus `foo(""a"", ?)` can't be replaced  by 
`^foo: bindTo(""a"")` since the '^' does not lookup in imported modules (we must fully qualify... see #249 ), while call does. If #249 is fixed (probably by the upcoming function resolution refactoring of #326 ), then the placeholders could be replaced by binding at runtime (not sure). 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNTIzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNzg4Nw==,golo-lang,170217887,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-09T09:45:58Z,2016-01-09T09:45:58Z,"Regarding methods, it would be nice if, given an object with a `:foo(x, y)` method

``` golo
let f = o: foo(?, ""a"")
```

would be equivalent to 

``` golo
let f = |x| -> o: foo(x, ""a"")
```

and even

``` golo
let f = ?: foo(""z"", ""a"")
let g = ?:foo(?, ""w"")
```

equivalent to

``` golo
let f = |o| -> o: foo(""z"", ""a"")
let g = |o, x| -> o: foo(x, ""w"")
```

In this case, we have a syntax problem since ""?:"" will collide with the elvis operator...  :cry: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MDIxNzg4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTk3Mzg4NQ==,golo-lang,171973885,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-15T14:25:23Z,2016-01-15T14:25:23Z,"As a POC, I just hacked a macro that implements the placeholder approach, but with a `$` since it must be a valid Golo identifier (it could have been `_`) 

Actually, it's more an implementation of the similar Scala `_` feature to create lambdas.

Let's name it `f` for now, just to show some example:

``` golo
f(($1 + $4) * ($2 + $3))
```

is expanded into

``` golo
|$1, $2, $3, $4| -> ($1 + $4) * ($2 + $3)
```

All variable beginning with `$` are used as lambda parameter, in the name order (hence `$1`, `$2`...) not in appearance order. I choose this notation for the obvious link to shell parameters, but anything identifiable (i.e. with a specific prefix or suffix) and sortable can be used. Here I fixed a `$`-prefix (defined in the macro), and number, but I might use `$a`, `$b`... as long as lexicographical order is parameter order.

The tag `$` has a special meaning only in the scope of the macro (no change to the language).

nice!

We can repeat parameters, and use captured values as well:

``` golo
let z = 2
let bar = f(($1 * z) + $1)
```

is expanded into

``` golo
let z = 2
let bar = |$1| -> ($1 * z) + $1
```

cool!

We can obviously map then:

``` golo
list[1, 2, 3, 4]: map(f($ + 1))
```

(note that with only 1 parameter, `$` can be used alone, since no sorting is involved)

And now for the partializing aspect:

``` golo
let baz = f(  addAll($2, ""b"", ""c"", $1)  )
let hello = f(  $1: say(""Hello"", $2)  )
```

will expand to:

``` golo
let baz = |$1, $2| -> addAll($2, ""b"", ""c"", $1)
let hello = |$1, $2| -> $1: say(""Hello"", $2)
```

Note that it works on objects too, and we can swap parameters! :tada:

It would be interesting to polish it and integrate it into the future macro std lib.

If so, I need some opinions on:
- the parameters tagging: 
  - I like `$` as  a prefix
  - could also be `_` (like Scala)
  - could be any valid identifier character as prefix or suffix, thus any unicode except special characters. Ideas?
- the macro name: should be short to ease the use. I considered 
  - `f` (for _function_) as is the previous examples
  - `l` for _lambda_
  - `p` for _partialize_
  - `$` to reflect the arguments, but it could be harder to read: see `$($1+$2)` or `$($-1)` or even `$($)` for the identity function :smile:
  - `_`
  - any unicode character: how cool (but hard to write) is 
    `let foo = →($1 + $2)` or `let bar = λ(foo($2, $1))` :smile:
  - obviously, it can be a longer and clearer name, but the advantage of its use over writing the anonymous function directly is linked to the size. Better write `|x| -> x` than `mySuperFunctionDefiningMacro($)`

Any thoughts @jponge @franckverrot ? /cc @Artpej @danielpetisme 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MTk3Mzg4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjM0NzI4MQ==,golo-lang,172347281,344,NA,jponge,25961,Julien Ponge,,NA,2016-01-17T16:32:13Z,2016-01-17T16:32:13Z,"Doing it as a macro has some advantages, since macros are here for that and it saves the compiler from dealing with another case.

Somehow I still find it easier to read something macro-less for partial functions, like:

``` golo
let adder = |x, y, z| -> x + y + z
let plus1and2 = adder(_, 1, 2)
```

Now if you go with macros and getting back to your questions:
1. `$` is ok if we can do `$1`, `$2`, `$abc`, `$_name`, etc. Still, note that `$` is a valid prefix in current Golo.
2. On the macro name:
   - how about `partial`?
   - 1 letter is perhaps too short
   - unicode is a no-go :smiling_imp: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjM0NzI4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/344,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjUyNjUxNw==,golo-lang,172526517,344,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-01-18T13:24:49Z,2016-01-18T13:24:49Z,"In the current macro POC, the placeholder argument can be anything that starts with `$`, as long as they sort in the intended order. For instance `f($a + $c - $b)` is expanded as `|$a, $b, $c| -> $a + $c - $b`. 

The macro approach does not introduce a new keyword or special symbol. I used `$` exactly because it's a valid prefix (and for the shell analogy), and it still is.

The unicode name was for kidding (although I like `lst: map(λ($ + 1))`) :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MjUyNjUxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/348,https://api.github.com/repos/eclipse-archived/golo-lang/issues/348,golo-lang,125886724,348,Integrate highlight.js,jponge,25961,Julien Ponge,,CLOSED,2016-01-11T07:19:25Z,2016-02-26T08:28:33Z,"Per Eclipse CQ 10195, we can include _highlight.js_ code within the source code and distributions.

This JS library performs syntax highlighting and supports Golo, although not in the distribution commonly found in CDNs like the one use by default by Asciidoctor.

We should thus tweak the Asciidoctor generation to take advantage of _highlight.js_ to render Golo code in the documentation.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/348/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/348,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4OTE2MDM5MQ==,golo-lang,189160391,348,NA,jponge,25961,Julien Ponge,,NA,2016-02-26T08:28:32Z,2016-02-26T08:28:32Z,"Fixed by #353
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4OTE2MDM5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/351,https://api.github.com/repos/eclipse-archived/golo-lang/issues/351,golo-lang,127545032,351,Compile with `javac -parameters`,jponge,25961,Julien Ponge,,CLOSED,2016-01-19T21:40:08Z,2017-06-27T14:30:11Z,"This `java` flag is useful for having parameter name metadata. This is what Golo uses for resolving named arguments.

This is not the case by default, so we should play a role model in supporting the feature for the source code of Golo.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/351/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/351,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MzAxMTgzMg==,golo-lang,173011832,351,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-01-19T22:42:41Z,2016-01-19T22:42:41Z,"This one is easy to fix...

IMHO, parameters names are useful in the APIs. if the language provide named argument the names are key and if not they still help the developer to understand what the function/method does.

In Golo, most of what the developer sees is already developed in Golo itself and natively mimic natively the `-parameters` flag. 
What I'm trying to say is, adding the `-parameters` option is fancy, we'll be (i think) the very first JVM-language to do it, but the real-benefits is very limited.

:+1:  to do it, just to be on the hype ;)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE3MzAxMTgzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/351,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTM3NjMzNg==,golo-lang,311376336,351,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-27T14:30:11Z,2017-06-27T14:30:11Z,"Fixed by #352 as much as possible. The JDK itself is not compiled with `-parameters`, but nothing we can do about.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTM3NjMzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/358,https://api.github.com/repos/eclipse-archived/golo-lang/issues/358,golo-lang,132100842,358,different behavior with mapping of  `either` and mapping of `map` when mapping is a closure,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2016-02-08T10:14:50Z,2017-07-10T06:31:54Z,"When I pass a closure to an `Option`, I get different behavior with mapping of  `either` and mapping of `map`. Perhaps i miss something?

``` golo
try {
  raise(""Huston?"")
} catch(exception) {
  Option(|ex|-> println(ex)): either(|cbk| {
    cbk(exception)
  },{
    # nothing
  })
}


try {
  raise(""Huston?"")
} catch(exception) {
  # here I get a ""java.lang.IllegalArgumentException: not a direct method handle""
  Option(|ex|-> println(ex)): map(|cbk| {
    cbk(exception)
  })
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/358/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/358,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MTMyNTk4OQ==,golo-lang,181325989,358,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-02-08T11:29:25Z,2016-02-08T11:29:25Z,"Known bug. `map` is a native java method, while `either` is an augmentation. The issue raise since you pass a ""real closure"" (i.e. with a closed value) to a native method expecting a java `Function` instance. The implicit conversion fails. See #277
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MTMyNTk4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/358,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDAxNzI5Mg==,golo-lang,314017292,358,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-10T06:31:20Z,2017-07-10T06:31:20Z,"As a side note, what you need here is an applicative functor... see the `apply` augmentation on `Optional` :smile:","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDAxNzI5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/358,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDAxNzM4MA==,golo-lang,314017380,358,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-10T06:31:54Z,2017-07-10T06:31:54Z,(closed as duplicate of #277),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNDAxNzM4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/363,https://api.github.com/repos/eclipse-archived/golo-lang/issues/363,golo-lang,134212467,363,Guarded call operator,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2016-02-17T08:18:01Z,2016-03-18T08:56:42Z,"In order to deal with `null` we have the ""Elvis"" `?:` to invoke a method. To ease the use of curried functions, we could add a ""Carly"" operator with the same behavior on direct calls. So instead of chaining using `ref?:invoke(...)?:invoke(...)` we could do `ref?(...)?(...)`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/363/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/363,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTA5MDc1Nw==,golo-lang,185090757,363,NA,jponge,25961,Julien Ponge,,NA,2016-02-17T08:19:44Z,2016-02-17T08:19:44Z,":+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTA5MDc1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/363,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTE1NjUwNQ==,golo-lang,185156505,363,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-02-17T11:07:03Z,2016-02-17T11:07:03Z,"(called ""Carly"", since ""call me maybe"" :smile:)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTE1NjUwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/363,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTE1NzM3NQ==,golo-lang,185157375,363,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-02-17T11:11:26Z,2016-02-17T11:11:26Z,"I love this one !
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NTE1NzM3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,golo-lang,135699556,367,Update golo project skeletons,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,CLOSED,2016-02-23T10:37:31Z,2016-03-18T08:56:12Z,"The `golo new` command generates a Gradle or Maven project based on a skeleton. These skels are out of date:
- use the old `org.golo-lang` groupId
- use maven central as default repository for plugins instead of jcenter
- use out-of date golo language and plugin versions (before the move to Eclipse)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/367/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY3NzY1MA==,golo-lang,187677650,367,NA,jponge,25961,Julien Ponge,,NA,2016-02-23T12:17:56Z,2016-02-23T12:17:56Z,":+1: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY3NzY1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY3NzgyOQ==,golo-lang,187677829,367,NA,jponge,25961,Julien Ponge,,NA,2016-02-23T12:18:37Z,2016-02-23T12:18:37Z,"Note: Maven Central is still fine, the artifacts are available there.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY3NzgyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY5MDI1Nw==,golo-lang,187690257,367,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-02-23T13:04:13Z,2016-02-23T13:04:13Z,":+1:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY5MDI1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY5MDY2Mw==,golo-lang,187690663,367,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-02-23T13:06:30Z,2016-02-23T13:06:30Z,"see also https://github.com/golo-lang/gradle-golo-plugin/issues/6
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4NzY5MDY2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4OTE2MDU2Ng==,golo-lang,189160566,367,NA,jponge,25961,Julien Ponge,,NA,2016-02-26T08:29:06Z,2016-02-26T08:29:06Z,"@danielpetisme are you willing to fix it for milestone 2?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE4OTE2MDU2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDE0MDU2NA==,golo-lang,190140564,367,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-02-29T10:17:05Z,2016-02-29T10:17:05Z,"Not sure to have time, I can't commit on a date.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDE0MDU2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDE0MzE2OA==,golo-lang,190143168,367,NA,jponge,25961,Julien Ponge,,NA,2016-02-29T10:24:07Z,2016-02-29T10:24:07Z,"Hum... I just checked and it seems all current:
- https://github.com/eclipse/golo-lang/blob/master/src/main/resources/new-project/maven/pom.xml#L38
- https://github.com/eclipse/golo-lang/blob/master/src/main/resources/new-project/gradle/build.gradle
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MDE0MzE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/367,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTc2NjMxNQ==,golo-lang,191766315,367,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2016-03-03T13:48:24Z,2016-03-03T13:48:24Z,"I checked with the latest release.
The groupIds are ok but there is a `${project.version}` not filtered
https://github.com/eclipse/golo-lang/blob/master/src/main/resources/new-project/maven/pom.xml#L14
This is what I have when I create a Golo Maven project

```
  <groupId>org.company</groupId>
  <artifactId>Golo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <golo.version>${project.version}</golo.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.golo</groupId>
      <artifactId>golo</artifactId>
      <version>${golo.version}</version>
    </dependency>
  </dependencies>
```

Same variable not filtered in the dependencies sections of the generated `build.gradle`

```
apply plugin: 'golo'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.golo-lang:gradle-golo-plugin:0.4'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    golo 'org.eclipse.golo:golo:${project.version}'
}

golo {
    mainModule = 'foo'
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTc2NjMxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,golo-lang,137974842,369,golo version don't show the right version,rlespinasse,1280212,Romain Lespinasse,,CLOSED,2016-03-02T19:54:39Z,2016-03-22T09:32:57Z,"Hello,

After installing golo 3.1.0 milestone 2, when you run `golo version`, the result is `3.1.0-SNAPSHOT` instead of `3.1.0-milestone2` like previous version.
<img width=""731"" alt=""capture d ecran 2016-03-02 a 20 49 27"" src=""https://cloud.githubusercontent.com/assets/1280212/13473276/f561bcca-e0b8-11e5-9d46-72c5a020327a.png"">
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/369/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTY0ODg3Ng==,golo-lang,191648876,369,NA,jponge,25961,Julien Ponge,,NA,2016-03-03T08:21:48Z,2016-03-03T08:21:48Z,"My mistake, Gradle was too clever and reused resources. 

I shall have done a `clean` over a previous compilation :wink: 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5MTY0ODg3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTQ4NzA2Nw==,golo-lang,199487067,369,NA,rlespinasse,1280212,Romain Lespinasse,,NA,2016-03-21T21:07:51Z,2016-03-21T21:07:51Z,"This issue is still here with the release 3.1.0
<img width=""511"" alt=""issue369-golo310"" src=""https://cloud.githubusercontent.com/assets/1280212/13934240/57de42ae-efb1-11e5-98d3-bd58324b668a.png"">
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTQ4NzA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTY3OTk4Mg==,golo-lang,199679982,369,NA,jponge,25961,Julien Ponge,,NA,2016-03-22T07:32:51Z,2016-03-22T07:32:51Z,"Should have done a clean... 

> Le 21 mars 2016 à 22:07, Romain Lespinasse notifications@github.com a écrit :
> 
> This issue is still here with the release 3.1.0
> 
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly or view it on GitHub
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTY3OTk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/369,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTY5NjU2Mg==,golo-lang,199696562,369,NA,jponge,25961,Julien Ponge,,NA,2016-03-22T08:23:36Z,2016-03-22T08:23:36Z,"Closing again because it's a human error.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDE5OTY5NjU2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,golo-lang,143920757,371,Empty versus None,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2016-03-28T07:52:22Z,2016-03-28T09:54:30Z,"I wondered if an overriding of `either` was missing [in `Result.java`](https://github.com/eclipse/golo-lang/blob/master/src/main/java/gololang/error/Result.java#L491) or perhaps it lacks something in `isEmpty()` test.

I do something like this:

```
import gololang.Errors

augment java.util.List {
  function rfilter = |this, pred| {
    let r = this: filter(pred)
    if r: size(): equals(0) {
      return Empty()
    }
    return Result(r)
  }
}

function main = |args| {
  let humans = list[
    ""John Doe"",
    ""Jane Doe"",
    ""Bob Morane""
  ]

  humans: rfilter(|item|->item: equals(""Bob"")): either(mapping=|value| {
    println(""Something: "" + value)
  }, default={
    println(""Nothing"")
  })
}
```

I hope to get `Nothing` but instead I get `Something: null`
If I replace `return Empty()` by `return None()` it's ok

If I augment `gololang.error.Result`:

```
augment gololang.error.Result {
  function r_either = |this, mapping, default| -> match {
    when this: isEmpty() then default()
    otherwise mapping(this: get())
  }
}
```

and use `r_either`, it's ok

```
  humans: rfilter(|item|->item: equals(""Bob"")): r_either(mapping=|value| {
    println(""Something: "" + value)
  }, default={
    println(""Nothing"")
  })

```

What did I miss?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/371/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMwODYwNQ==,golo-lang,202308605,371,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-28T08:52:20Z,2016-03-28T08:52:20Z,"Just use the 3 parameters version of `either`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMwODYwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxMDkzNA==,golo-lang,202310934,371,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-03-28T09:00:22Z,2016-03-28T09:00:22Z,"Arff, my bad (not wake up)

```
  humans: rfilter(|item|->item: equals(""Bob"")): either(mapping=|value| {
    println(""Something: "" + value)
  }, recover=|err| {
    println(""Error:"" + err)
  }, default={
    println(""Nothing"")
  })
```

:+1: 
Thank you @yloiseau 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxMDkzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxMTkyMw==,golo-lang,202311923,371,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-28T09:03:17Z,2016-03-28T09:03:17Z,"Btw to be pedantic, `either` is not meant to be used for side effects :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxMTkyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxNjg2Ng==,golo-lang,202316866,371,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-03-28T09:13:11Z,2016-03-28T09:13:11Z,"What do you propose? Using Optional? I want to ""do something"" if empty, but without using `if` 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxNjg2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxOTM3OA==,golo-lang,202319378,371,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-28T09:26:29Z,2016-03-28T09:26:29Z,"Why don't you want to use `if` (or better here `case`)?

Same remark for optional: these structures are mainly designed for (purely) functional use. The `either` function allows to convert the result or option into a value that will be homogeneously processed, basically avoiding the match on the kind of result.
In your simple previous example, this will lead to

``` golo
println(humans: rfilter(|item|->item: equals(""Bob"")): either(
    |value| -> ""Something: "" + value,
    |err| -> ""Error:"" + err,
    -> ""Nothing""))
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMxOTM3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMyMTg0Nw==,golo-lang,202321847,371,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-28T09:36:24Z,2016-03-28T09:36:24Z,"The main idea is to clearly separate pure data processing and side effects. In the same way, I'm not fond of `forEach` on lists, I prefer plain `for elt in lst` when side effects are involved, and `map` or `reduce` otherwise.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMyMTg0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/371,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMyNTcwNQ==,golo-lang,202325705,371,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-03-28T09:54:30Z,2016-03-28T09:54:30Z,"ok, I'm going ""to sleep on this"" and resume my ""discover functional programming"" with Golo, JavaScript ...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjMyNTcwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,golo-lang,144237033,374,Native BigDecimal and BigInteger support,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-03-29T11:40:20Z,2016-04-04T14:09:18Z,"Make support of other Java `Number` subclasses (namely `BigInteger` and `BigDecimal`) native. This would imply:
- a literal value notation, e.g. `3.1415927_B` for `BigDecimal`;
- adapt arithmetic operators to use the Java method: `1.5_B + 0.5_B` would be converted into `BigDecimal.valueOf(1.5).add(BigDecimal.valueOf(0.5)`, with an _implicit_ conversion into `BigInteger` or `BigDecimal` when operators are used on mixed types;
- _implicit_ conversion when comparing numbers: indeed, `BigDecimal` (resp. `BigInteger`) implements `Comparable<BigDecimal>`, and thus can't be compared to other numbers. For instance, currently:

``` golo
BigInteger.ONE() > BigInteger.ZERO()   # true
BigInteger.ONE() > BigDecimal.ZERO()   # does NOT work
BigInteger.ONE() > 0                   # does NOT work
```

Maybe:
- a way to define global default `MathContext` to be used;
- use `BigDecimal` as default non-integer type (as Groovy do), with a `_D` suffix to force `Double`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/374/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjg1MjQyNw==,golo-lang,202852427,374,NA,jponge,25961,Julien Ponge,,NA,2016-03-29T11:58:48Z,2016-03-29T11:58:48Z,"1. I am in favour of supporting `BigDecimal` through literals and the set of operators that we have.
2. I am against making them the default on integer expressions, since that would break current assumptions _and_ `BigDecimal` arithmetics is slower.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjg1MjQyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjg1NDEyOA==,golo-lang,202854128,374,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-29T12:00:48Z,2016-03-29T12:00:48Z,"@jponge I agree on your 2nd point
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMjg1NDEyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzc5NjExMA==,golo-lang,203796110,374,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-31T07:28:01Z,2016-03-31T07:28:01Z,"What would you suggest for the literal notation? I started with `_B` suffix on floating number for `BigDecimal` (`_D` would do it, but can means `Double`). For `BigInteger`, I propose `_b`, but I'd rather keep everything upper case, `_I` but depending on the font it can be ambiguous, or `_B` also, the use of `BigDecimal` or `BigInteger` depending on the preceding number (e.g. `1_B` → `BigInteger` and `1.0_B` → `BigDecimal`).
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzc5NjExMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzc5NjIzMA==,golo-lang,203796230,374,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-31T07:28:47Z,2016-03-31T07:28:47Z,"This last proposition is my favorite
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzc5NjIzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzgwMzIyMA==,golo-lang,203803220,374,NA,jponge,25961,Julien Ponge,,NA,2016-03-31T07:50:00Z,2016-03-31T07:50:00Z,"`_B` is good!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzgwMzIyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzk2NzA4OQ==,golo-lang,203967089,374,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-03-31T14:34:21Z,2016-03-31T14:34:21Z,"On which branch should I PR this ? master or 3.1 ?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzk2NzA4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/374,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzk3NTE1MQ==,golo-lang,203975151,374,NA,jponge,25961,Julien Ponge,,NA,2016-03-31T14:57:05Z,2016-03-31T14:57:05Z,"Since it's a feature it shall be on `master`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIwMzk3NTE1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,golo-lang,150559440,380,Bug in variable scope,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-04-23T14:22:44Z,2017-03-28T08:24:28Z,"When re-defining a constant variable in an inner scope, we have an compilation error.
Example: given

``` golo
module ReferenceScopeTest

function main = |args| {
  let a = 42
  if true {
    let a = 21
    println(a)
  }
  println(a)
}
```

we have:

```
[error] Assigning `a` at {line=6, column=5} but it is a constant reference
```

while the expected behavior is

```
21
42
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/380/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzkwOTExMQ==,golo-lang,213909111,380,NA,artpej,693299,Sylvain Desgrais,,NA,2016-04-24T07:48:47Z,2016-04-24T07:48:47Z,"The compiler message is a bit confusing but the current behavior seems to me legal.

``` java
public class Test {

  public static void main(String[] args){
    int a = 42;
    if(true) {
      int a = 21;
      System.out.println(a);
    }
    System.out.println(a);
  }

}
```

for this, the java compiler says: 

```
Test.java:6: error: variable a is already defined in method main(String[])
```

Maybe it is possible to add the behavior you describe but i'm not sure it's good thing for the readability.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzkwOTExMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzk1NTc4Nw==,golo-lang,213955787,380,NA,jponge,25961,Julien Ponge,,NA,2016-04-24T13:26:19Z,2016-04-24T13:26:19Z,"When Yannick showed me this bug last Friday I thought it was indeed a scoping issue, but on second thought and with Sylvain’s example from Java I am now on the side that this is not a bug.

But at least the compiler error could be more precise and explain that shadowing a constant is not a good thing to do.

On 24 April 2016 at 09:48:54, sylvain Desgrais (notifications@github.com) wrote:

> The compiler message is a bit confusing but the current behaviour seems to me legal.
> 
> ``` java
> public class Test {
> 
> public static void main(String[] args){
> int a = 42;
> if(true) {
> int a = 21;
> System.out.println(a);
> }
> System.out.println(a);
> }
> 
> }
> ```
> 
> for this, the java compiler says:
> 
> ```
> Test.java:6: error: variable a is already defined in method main(String[])
> ```
> 
> Maybe it is possible to add the behaviour you describe but i'm not sure it's good thing  
> for the readability.
> 
> ---
> 
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub:
> https://github.com/eclipse/golo-lang/issues/380#issuecomment-213909111
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzk1NTc4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzk5NzIxNQ==,golo-lang,213997215,380,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-04-24T16:31:50Z,2016-04-24T16:31:50Z,"While in ES6 (spidermonkey):

``` javascript
function test() {
    let a = 42;
    if (true) {
        let a = 21;
        print(a);
    }
    print(a);
}

test();
```

gives

```
21
42
```

:smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMzk5NzIxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNDE3MzExMQ==,golo-lang,214173111,380,NA,jponge,25961,Julien Ponge,,NA,2016-04-25T07:07:44Z,2016-04-25T07:07:44Z,"I must confess that I’m undecided on which is right or not…

On 24 April 2016 at 18:31:54, Yannick Loiseau (notifications@github.com) wrote:

> While in ES6 (spidermonkey):
> 
> ``` javascript
> function test() {
> let a = 42;
> if (true) {
> let a = 21;
> print(a);
> }
> print(a);
> }
> 
> test();
> ```
> 
> gives
> 
> ```
> 21
> 42
> ```
> 
> :smile:
> 
> ---
> 
> You are receiving this because you commented.
> Reply to this email directly or view it on GitHub:
> https://github.com/eclipse/golo-lang/issues/380#issuecomment-213997215
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNDE3MzExMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNDE4Nzk1Mw==,golo-lang,214187953,380,NA,artpej,693299,Sylvain Desgrais,,NA,2016-04-25T07:45:52Z,2016-04-25T07:45:52Z,"Arggg, I'm not sure, now...

``` java
public class Test {

  public static void main(String[] args){
    if(true) {
      final int a = 21;
      System.out.println(a);
    }
    final int a = 42;
    System.out.println(a);
  }
}
```

works as expected...

A java code block seems not to be exactlty what i had in mind...

what about the parent scope in this case?

``` golo
module ReferenceScopeTest

function main = |args| {
  let a = 21
  if true {
    let a = a::parent * 2
    println(a)
  }
  println(a)
}
```

will print:

```
42
21
```

of course the syntax is open, i just think aloud :wink:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIxNDE4Nzk1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDA1Nw==,golo-lang,287770057,380,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T14:10:19Z,2017-03-20T14:10:19Z,"BTW

```golo
module Test

function main = |args| {
  if true {
    let a = 21
    println(21)
  }
  let a = 42
  println(a)
}
```
also works... 

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDA1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/380,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDc3Ng==,golo-lang,287770776,380,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T14:12:53Z,2017-03-20T14:12:53Z,"If one the the variable is a `var`, the message is more explicit:
```
[error] Declaring a duplicate reference `a` at {line=6, column=5}
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDc3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/383,https://api.github.com/repos/eclipse-archived/golo-lang/issues/383,golo-lang,157162826,383,Improved golo doc,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2016-05-27T09:09:54Z,2016-12-14T13:39:40Z,"I think we could improve `golo doc` in several ways, by looking at what is done in Haskell and Rust (see for instance https://doc.rust-lang.org/std/option/ and https://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Maybe.html)

For instance:
- [x] Haskell and Rust link the functions documentations to a html version of the source code;
- [ ] the snippets in the Rust documentation can be run directly in an online interpreter (try to hover the samples);
- [ ] the snippets in the Rust documentation are used as tests in the compile step (similar to Python doctest https://docs.python.org/3/library/doctest.html).

What do you think?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/383/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/383,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjEwNTA0OA==,golo-lang,222105048,383,NA,jponge,25961,Julien Ponge,,NA,2016-05-27T09:42:59Z,2016-05-27T09:42:59Z,"I concur on all 3 ideas!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjEwNTA0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,golo-lang,158544618,385,Heterogeneous anonymous invocation,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-06-05T08:44:24Z,2016-09-13T06:44:48Z,"We currently have two ways to represent an anonymous function invocation in the IR: as a list of anonymous invocations in the `ir.AbstractInvocation` class, or as a `ir.BinaryOperation` with a `OperatorType.ANON_CALL` type.

These two alternatives are defined in the grammar in:
- the `FunctionInvocation` and `MethodInvocation` definitions, where the `(args)` can be followed by 0 or more `AnonymousFunctionInvocation`
- the `InvocationExpression` where a `Atom` (which includes `Reference` and `FunctionInvocation`) can be followed by 0 or more `MethodInvocation` or `AnonymousFunctionInvocation`

For instance, given

``` golo
function foo = |a| -> |b| -> println(a + b)

struct Foo = {x}
augment Foo {
  function foo = |this| -> |b| -> println(this: x() + b)
}
```

the somewhat semantically equivalent expressions yield two different IR:

``` golo
  foo(""a"")(""b"")
  f: foo()(""b"")

  (foo(""a""))(""b"")
  (f: foo())(""b"")
```

The first two calls give (with `golo diagnose`):

```
Function call: foo, ...
  Constant = a
  Function call: anonymous, anonymous? -> true
    Constant = b

Binary operator: :
  Reference lookup: f
  Method invocation: foo, null safe? -> false
    Function call: anonymous, anonymous? -> true
      Constant = b
```

while the latter give:

```
Binary operator: 
  Function call: foo, ...
    Constant = a
  Function call: anonymous, anonymous? -> true
    Constant = b

Binary operator: 
  Binary operator: :
    Reference lookup: f
    Method invocation: foo, null safe? -> false
  Function call: anonymous, anonymous? -> true
    Constant = b
```

with the associated bytecode, respectively:

``` java
ldc           #53     // String a
invokedynamic #64,  0 // InvokeDynamic #1:foo:(Ljava/lang/Object;)Ljava/lang/Object;
checkcast     #44     // class gololang/FunctionReference
ldc           #66     // String b
invokedynamic #74,  0 // InvokeDynamic #2:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;)Ljava/lang/Object;
pop
```

``` java
aload_1
invokedynamic #79,  0 // InvokeDynamic #3:foo:(Ljava/lang/Object;)Ljava/lang/Object;
checkcast     #44     // class gololang/FunctionReference
ldc           #66     // String b
invokedynamic #74,  0 // InvokeDynamic #2:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;)Ljava/lang/Object;
pop
```

``` java
ldc           #53     // String a
invokedynamic #64,  0 // InvokeDynamic #1:foo:(Ljava/lang/Object;)Ljava/lang/Object;
checkcast     #44     // class gololang/FunctionReference
ldc           #66     // String b
invokedynamic #74,  0 // InvokeDynamic #2:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;)Ljava/lang/Object;
pop
```

``` java
aload_1
invokedynamic #79,  0 // InvokeDynamic #3:foo:(Ljava/lang/Object;)Ljava/lang/Object;
checkcast     #44     // class gololang/FunctionReference
ldc           #66     // String b
invokedynamic #74,  0 // InvokeDynamic #2:anonymous:(Lgololang/FunctionReference;Ljava/lang/Object;)Ljava/lang/Object;
pop
```

with the bootstrap:

``` java
1: #59 invokestatic FunctionCallSupport.bootstrap
2: #70 invokestatic ClosureCallSupport.bootstrap
3: #78 invokestatic MethodInvocationSupport.bootstrap
```

Although the bytecode generated in both cases is the same and the difference is transparent to the end user, this leads to a more complex IR that could be simplified.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/385/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzg5MTkxNA==,golo-lang,223891914,385,NA,jponge,25961,Julien Ponge,,NA,2016-06-06T07:59:06Z,2016-06-06T07:59:06Z,"Good point, how would you like to refactor it?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzg5MTkxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzkwNTcyNQ==,golo-lang,223905725,385,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-06-06T09:08:05Z,2016-06-06T09:08:05Z,"I think that making everything an operator is the way to go, since:
- while doing tests I found some weired call/invocation sequences that don't parse
- the IR would be more consistent and simple (though complex sequences will be deeply nested)
- it would make implementing #363 more natural
- your ""MixIt idea"" would be easier to implement
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzkwNTcyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzkwNjMwOQ==,golo-lang,223906309,385,NA,jponge,25961,Julien Ponge,,NA,2016-06-06T09:10:51Z,2016-06-06T09:10:51Z,"Sounds good!
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzkwNjMwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDAwMjA3Mw==,golo-lang,224002073,385,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-06-06T15:53:23Z,2016-06-06T15:53:23Z,"I'm also thinking about converting during parsing anonymous calls into `invoke` invocations. For instance, expressions such as 

``` golo
f()(42)

foo: bar()(42)

^ref(42)
```

would result in an IR equivalent to

``` golo
f(): invoke(42)

foo: bar(): invoke(42)

^ref: invoke(42)
```

thus allowing any object with an `invoke` method to be called as a function.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDAwMjA3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDMwNTE5Ng==,golo-lang,224305196,385,NA,jponge,25961,Julien Ponge,,NA,2016-06-07T14:50:20Z,2016-06-07T14:50:20Z,"Would it preserve some call-site inline caching?

Just delegating to `invoke` ain't do that.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDMwNTE5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/385,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDMxNjg3OA==,golo-lang,224316878,385,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-06-07T15:26:36Z,2016-06-07T15:26:36Z,"Indeed, I didn't thought about inline caching...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDMxNjg3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/387,https://api.github.com/repos/eclipse-archived/golo-lang/issues/387,golo-lang,165966925,387,State in augmentations,jponge,25961,Julien Ponge,,OPEN,2016-07-17T08:30:47Z,2016-07-17T08:30:47Z,"Augmentations add methods to types.

In some cases it could be interesting to also add state, perhaps like in:

``` golo
augment Foo {
  var name = ""Mr Bean""
}
```

Note: this is hard to implement efficiently in the runtime.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/387/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/388,https://api.github.com/repos/eclipse-archived/golo-lang/issues/388,golo-lang,165967024,388,Tail call recursion support,jponge,25961,Julien Ponge,,OPEN,2016-07-17T08:33:54Z,2017-12-07T12:31:11Z,"Tail call recursion is a classic compilation optimisation.

Since Golo encourages functional idioms when they make sense, it would be great to provide support for this optimisation.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/388/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/388,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzE5NDIyMw==,golo-lang,233194223,388,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-17T17:46:33Z,2016-07-17T17:46:33Z,"I'be been thinking about this one for a while.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzE5NDIyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/388,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzE5NTQwNw==,golo-lang,233195407,388,NA,jponge,25961,Julien Ponge,,NA,2016-07-17T18:10:41Z,2016-07-17T18:10:41Z,"Sweet dreams. 

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzE5NTQwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,golo-lang,167202520,389,Named parameters don't work with java methods ?,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2016-07-23T20:41:44Z,2016-07-25T07:19:35Z,"``` golo
  Error(""Hooups""): either(
    mapping=|value|-> println(""value: "" + value),
    recover=|error|-> println(""error: "" + error)
  )
```

prints `error: java.lang.RuntimeException: Hooups`

``` golo
  Error(""Hooups""): either(
    recover=|error|-> println(""error: "" + error),
    mapping=|value|-> println(""value: "" + value)
  )
```

prints `value: java.lang.RuntimeException: Hooups`

other example:

``` golo
  textToFile(text=""yo!"", file=""toto.txt"")
  textToFile(file=""tutu.txt"", text=""yo!"")
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/389/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDc2NDExMA==,golo-lang,234764110,389,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-24T08:10:19Z,2016-07-24T08:10:19Z,"not yet, see #351 and #352 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDc2NDExMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MDI0Mw==,golo-lang,234860243,389,NA,jponge,25961,Julien Ponge,,NA,2016-07-25T07:11:34Z,2016-07-25T07:11:34Z,"It can work with Java libraries compiled with the `-parameters` flag, but for some reason that we need to properly investigate (see @yloiseau links) it doesn't play nicely with the Golo code base.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MDI0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MjE0NA==,golo-lang,234862144,389,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-07-25T07:18:51Z,2016-07-25T07:18:51Z,"@yloiseau oh yes I remember, sorry for the 🔔  
@jponge I try doing ""Golo only"" so I will not have this kind of problem anymore :stuck_out_tongue_winking_eye:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MjE0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/389,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MjQzNw==,golo-lang,234862437,389,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-07-25T07:19:35Z,2016-07-25T07:19:35Z,"So, I close the issue
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MjQzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,golo-lang,167223769,390,User defined exceptions,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2016-07-24T08:43:35Z,2020-09-04T16:16:15Z,"Exceptions are used in Golo, either in the “classical” way (`throw` and `try...catch`) or in the more functional `Result`, which represents errors as exceptions. 
User defined exceptions are useful to convey more specific semantic on the kind of error, to encapsulate additional data on the error cause and to define specific behavior polymorphically. 
However, there is currently no easy way to define user exceptions directly in Golo, since subtyping is needed.

I suggest an alternate form of `GoloStruct` extending `RuntimeException`. This would not yet give subtyping, and thus we would not have an exception hierarchy. However, users could defined type with the same ease of use as the golo `struct`, but whose instances could be used as exceptions.

Syntactically, this could be defined as:

``` golo
module Plop
exception MyException = {message, cause, a, b}
```

The `message` and `cause` attribute may be implicit or not, but I think explicit is better, with a compile-time error if the exception does not specify these fields.

This would generate a class like:

``` java
package Plop.types;

class MyException extends RuntimeException implements Iterable<Tuple>, Comparable<MyException> {
    private Object a;
    private Object b;
    MyException(String message) { super(message); }
    MyException(String message, Throwable cause) { super(message, cause); }
    MyException(String, message, Throwable cause, Object a, Object b) {
        super(message, cause);
        this.a = a;
        this.b = b;
    }

    // Generated methods similar to the ones in structs
    // values, equals, hashCode, get, set, iterator, compareTo, frozenCopy, copy, destruct, isFrozen
}
```

used as:

``` golo
return Result.error(MyException())
throw MyException(""my error message"", theCause, 42, ""plop"")
```

An other option is to let the user specify the exception superclass (default to `RuntimeException`), allowing the definition of an exception hierarchy, for instance:

``` golo
exception MyException(IllegalArgumentException) = {message, cause}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/390/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MDgxMg==,golo-lang,234860812,390,NA,jponge,25961,Julien Ponge,,NA,2016-07-25T07:14:03Z,2016-07-25T07:14:03Z,"I'm very interested in implementing this feature.

What @yloiseau described is more or less what I had in mind: doing something similar to how structs are being defined.

The subtyping thing is intriguing. I'm not sure we want to enter that area, since that would require compile-time classpath resolution.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDg2MDgxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDkwODEzOA==,golo-lang,234908138,390,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-25T09:42:23Z,2016-07-25T09:42:23Z,"The subtyping was just an idea, I didn't though about the compile time resolution. Without subtyping, catching exception will be more cumbersome, but it's indeed a difficult point.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDkwODEzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDkxMjI4NQ==,golo-lang,234912285,390,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-25T10:00:52Z,2016-07-25T10:00:52Z,"maybe we could allow the subtyping case provided that the super class is fully qualified, as for augmentations; for instance:

``` golo
exception MyException(java.lang.IllegalArgumentException) = {message, cause}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNDkxMjI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTcxMzU3NQ==,golo-lang,259713575,390,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-11-10T15:06:48Z,2016-11-10T15:06:48Z,"@jponge did you had time to experiment with this feature?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTcxMzU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/390,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTcxODA2MQ==,golo-lang,259718061,390,NA,jponge,25961,Julien Ponge,,NA,2016-11-10T15:23:47Z,2016-11-10T15:23:47Z,"I've made some progress, but I haven't had time to get back to it
recently...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1OTcxODA2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/391,https://api.github.com/repos/eclipse-archived/golo-lang/issues/391,golo-lang,168106075,391,Destructuring assignment cause JVM crash when declared inside a closure,artpej,693299,Sylvain Desgrais,,CLOSED,2016-07-28T14:14:18Z,2016-08-22T20:33:19Z,"``` golo
#!/usr/bin/env golosh
module test

function test = {
  return {
    let a, b = [1,2] # paf!
    return a
  }
}

function main = |args| {
  let x = test()()
  println(x)
}
```

The code above seem's not generate correct bytecode:

```
Exception in thread ""main"" java.lang.IllegalAccessException: no such method: test.main(String[])void/invokeStatic
        at java.lang.invoke.MemberName.makeAccessException(MemberName.java:869)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1005)
        at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1382)
        at java.lang.invoke.MethodHandles$Lookup.findStatic(MethodHandles.java:777)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.ShebangCommand.execute(ShebangCommand.java:46)
        at org.eclipse.golo.cli.Main.main(Main.java:66)
Caused by: java.lang.VerifyError: Bad local variable type
Exception Details:
  Location:
    test.__$$_sugar_closure_0()Ljava/lang/Object; @42: aload_0
  Reason:
    Type top (current frame, locals[0]) is not assignable to reference type
  Current Frame:
    bci: @42
    flags: { }
    locals: { top, top, 'java/lang/Object', 'java/lang/Object', 'java/lang/Object' }
    stack: { }
  Bytecode:
    0x0000000: 04b8 0043 05b8 0043 ba00 4700 00ba 004e
    0x0000010: 0000 4d2c 03b8 0043 ba00 5100 004e 2c04
    0x0000020: b800 43ba 0051 0000 3a04 2ab0          

        at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
        at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:977)
        at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:1002)
        ... 5 more
```

this one works as expected: 

``` golo
#!/usr/bin/env golosh
module test

function test = {
  let a, b = [1,2]
  return {
    return a
  }
}

function main = |args| {
  let x = test()()
  println(x) # prints 1
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/391/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/391,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNTkxNTc4Nw==,golo-lang,235915787,391,NA,jponge,25961,Julien Ponge,,NA,2016-07-28T14:42:32Z,2016-07-28T14:42:32Z,"Good catch
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNTkxNTc4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/392,https://api.github.com/repos/eclipse-archived/golo-lang/issues/392,golo-lang,168503834,392,How to test null and then do something? The correct way?,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2016-07-31T06:05:53Z,2016-07-31T16:11:23Z,"hey 👋 @yloiseau 

I have to test if a value is null, if not I **do/run** something, otherwise **do/run** something else, but what is the best way to do this?
- [ ] `if then else`

``` golo
if response: data() isnt null {
  log(
    ""login: {0} email: {1}"",
    response: data(): get(""login""),
    response: data(): get(""email"")
  )
} else {
  log(""{0} {1}"", response: code(), response: message())
}
```
- [ ] `match`

``` golo
match {
  when response: data() isnt null then {
    log(
      ""login: {0} email: {1}"",
      response: data(): get(""login""),
      response: data(): get(""email"")
    )
  }()
  otherwise {log(""{0} {1}"", response: code(), response: message())}()
}
```
- [ ] `Option`

``` golo
Option(response: data()): either(|data| {
  log(
    ""login: {0} email: {1}"",
    data: get(""login""),
    data: get(""email"")
  )
}, {
  log(""{0} {1}"", response: code(), response: message())
})
```
- [ ] `case`

``` golo
case {
  when response: data() isnt null {
    log(
      ""login: {0} email: {1}"",
      response: data(): get(""login""),
      response: data(): get(""email"")
    )
  }
  otherwise {
    log(""{0} {1}"", response: code(), response: message())
  }
}
```
- [ ] https://github.com/eclipse/golo-lang/blob/master/src/main/golo/functions.golo#L1019

``` golo
cond(
  |response| -> response: data() isnt null,
  |responseIfTrue| {
    log(
      ""login: {0} email: {1}"",
      responseIfTrue: data(): get(""login""),
      responseIfTrue: data(): get(""email"")
    )
  },
  |responseIfFalse| {
    log(""{0} {1}"", responseIfFalse: code(), responseIfFalse: message())
  }
) (response)
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/392/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/392,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzMzA5MQ==,golo-lang,236433091,392,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-31T14:31:31Z,2016-07-31T14:31:31Z,"It's a matter of style and personal preference. However, there are some elements to take into account. From my point of view, it mainly depends on what you want to do, if it's a statement (or side-effect procedure), or an expression (or side-effect free pure function).

Just to be clear, when I say function, I mean a side-effect free, pure computation that returns a value, and thus the call is an expression (something that has a value, ideally with [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency)); by procedure, I mean an operation that _always_ returns nothing, and has a side-effect (like IO, or changing a state), and thus the call is a statement (has no value, but changes the global state). See also [CQS](https://en.wikipedia.org/wiki/Command%E2%80%93query_separation) for the same idea.

I tend to use conditional statement when the alternatives are statements, and more functional structures when the alternatives are expressions.

For instance I'd do:

``` golo
if condition {
    println(""plop"")
} else {
    println(""foo"")
}
```

or 

``` golo
var message = """"
if condition {
    message = ""plop""
} else {
    message = ""foo""
}
println(message)
```

but 

``` golo
let message = match {
    when condition then ""plop""
    otherwise ""foo""
}
println(message)
```

or even

``` golo
println(match {
    when condition then ""plop""
    otherwise ""foo""
})
```

Note the influence of style :smile:

Since `match` is an _expression_, I would _not_ recommend to use it with a procedure (like `log`).

Since it's here a binary choice (either `null` or not), I would not use a `case`.

`Option` is interesting if you have a function returning such a value, to chain (pure) function applications without checking for nullity. It's the equivalent of elvis (`?:`) for method applications. The `either` method should be used with pure functions to provide a final value (as `ofIfNull`). For instance

``` golo
let message = functionThatReturnsAnOption()
                : andThen(aPureFunction)
                : andThen(anOtherPureFunction)
                : either(
                  extractAndTransformTheFinalValue,
                  computeTheDefaultValue)
println(message)
```

I would _not_ create an `Option` directly from a nullable value just to call `either` on it, even less if the operations are procedures.

`cond` is a combinator, and its main purpose is thus to create functions. In your case:

``` golo
let logValue = cond(`isnt(null), 
  |v| { ... }
  |v| { ... })

logValue(functionReturningNullOrValue())
logValue(anotherFunction()).
```

However, `cond` is also meant to be used with/create pure functions

``` golo
listOfResults: map(cond(`isnt(null), |v| -> v: foo(), |v| -> ""default value""))
```

Don't forget the last option you didn't mention: elvis `?:` and `orIfNull` (although it would be a little cumbersome to use in your use case).

Finally, algebraic data type and polymorphism can also be used to leverage this problem:

``` golo
union Data = {
    User = { login, email }
    Error = { code, message }
}

augment Data$User = {
    function logInfo = |this| -> ""login: %s email: %s"": format(
        this: login(),
        this: email())
}

augment Data$Error = {
    function logInfo = |this| -> ""%s %s"": format(
        this: code(),
        this: message())
}

...
response = UserData(""fperfect"", ""ford.perfect@h2g2.org"")
# or
response = Error(42, ""Unknown user"")
# You never have `null` values
...

log(response: logInfo())
```

or if you don't want to augment your data with logging concerns

``` golo
function logInfo = |v| -> match {
  when v: isUser() then ""login: %s email: %s"": format(
        this: login(),
        this: email())
  when v: isError() then ""%s %s"": format(
        this: code(),
        this: message())
  otherwise raise(""Unknown data type"")
}

...

log(logInfo(response))
```

As a side note, it's often recommended to not use negative conditional, and thus prefer `if result is null` over `if result isnt null`.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzMzA5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/392,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNDQwOQ==,golo-lang,236434409,392,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-07-31T14:56:00Z,2016-07-31T14:56:00Z,"@yloiseau crystal clear
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNDQwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/392,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzODgzNA==,golo-lang,236438834,392,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-31T16:11:12Z,2016-07-31T16:11:12Z,"That being said, it's also a matter of style and personal preferences, and even if I have rational arguments, someone else could argue the other way around :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzODgzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,golo-lang,168505198,393,Documentation and Samples improvement(s),k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2016-07-31T06:55:25Z,2016-07-31T20:50:14Z,"> WIP
- [ ] Add documentation of https://github.com/eclipse/golo-lang/blob/master/src/main/golo/functions.golo
- [ ] Complement part about **Functional Errors** https://github.com/eclipse/golo-lang/blob/master/doc/misc.adoc#functional-errors-gololangerrors
  - [ ] add more usefull samples for each type
- [ ] Complement part about **Asynchronous programming helpers**  https://github.com/eclipse/golo-lang/blob/master/doc/misc.adoc#asynchronous-programming-helpers-gololangasync
  - [ ] add something about promises
  - [ ] ""human readable"" samples 
- [ ] Complement part about **DynamicVariable** https://github.com/eclipse/golo-lang/blob/master/doc/misc.adoc#scala-like-dynamic-variable-gololangdynamicvariable
  - [ ] find a use case for ""ordinary mortal""
- [ ] ...

⚠️ To my mind Golo documentation shouldn't look like the documentation of Haskell or Scala :stuck_out_tongue_closed_eyes:

❓ I think that **Functional Errors** and **Asynchronous programming helpers**  deserve their own section (instead being part of ""misc modules"")

WDYT? 
@jponge @Artpej @yloiseau and the others
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/393/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzMzMyMg==,golo-lang,236433322,393,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-31T14:36:02Z,2016-07-31T14:36:02Z,"I don't get your first point... (see http://golo-lang.org/documentation/next/golodoc/gololang/Functions.html)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzMzMyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNDE4MA==,golo-lang,236434180,393,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-07-31T14:50:59Z,2016-07-31T14:50:59Z,"@yloiseau yes, but not in the ""guide"": http://golo-lang.org/documentation/next/index.html
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNDE4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNTU3OQ==,golo-lang,236435579,393,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-07-31T15:16:20Z,2016-07-31T15:16:20Z,"I'm not sure that it's relevant to dedicate a guide (sub)section for each and every standard module. I view the guide as a documentation on the language itself, along with the paradigms and spirit, not an extensive documentation. The module documentation is the place to document them (thanks captain obvious!)
As an analogy, languages with batteries included (like python or java) don't document every standard module/package, but more the spirit and techniques, and references the API doc. The python documentation is better integrated however, and I indeed think we could work on integrating the guide, golodoc and javadoc in a more homogeneous site/documentation).
As for the `Function` module you mention, it's just a collection of useful function that does not require a explanation in itself, provided the golodoc is well written :wink: , contrary to the error management and asynchronous programing, which are difficult topics in themselves (and actually probably deserve their own section, I agree).

However:
1. several modules documentations can surely be improved
2. we can add sections to the guide, or improve existing ones, on specific topics or paradigms, in the same vain as your #392 and #394  question, but it's more the subject of a «Real World Golo» or «Golo Cookbook» book :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQzNTU3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/393,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQ1NTc3Ng==,golo-lang,236455776,393,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-07-31T20:50:13Z,2016-07-31T20:50:13Z,"@eclipse/eclipse-golo 👋 I'm testing the notifications to the team. Where to create the Golo Cookbook?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNjQ1NTc3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/394,https://api.github.com/repos/eclipse-archived/golo-lang/issues/394,golo-lang,168506761,394,"How to chain ""non blocking"" promises?",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2016-07-31T07:50:10Z,2016-07-31T07:50:10Z,"### Use case

I have to non blocking promises: (https://github.com/eclipse/golo-lang/blob/master/src/main/golo/async.golo#L75)
- `findGitHubUser`
- `getRepositoriesOfGitHubUser`

I search if user exists and then (only if exists) I fetch his repositories (it's just an example to explain my question): 

``` golo
function findGitHubUser = |user| {
  return promise(): initializeWithinThread(|resolve, reject| {
    try {
      let res = getHttpData(path+""/""+user)
      resolve(res)
    } catch (err) {
      reject(err)
    }
  })
}
function getRepositoriesOfGitHubUser = |user| {
  return promise(): initializeWithinThread(|resolve, reject| {
    try {
      let res = getHttpData(path+""/""+user+""/repos"")
      resolve(res)
    } catch (err) {
      reject(err)
    }
  })
}

findGitHubUser(""k33g""): onSet(|response| {
  getRepositoriesOfGitHubUser(response: data(): get(""login"")): onSet(...): onFail(...) 
  # ...
}): onFail(|error| {
  # foo
})

```

I would like to write something more ""linear"" but keeping the ""non blocking"" feature

``` golo
findGitHubUser(""k33g"")
  : onSet(doSomething)
  : onFail(doSomethingElse)
  : andThen(|response| -> getRepositoriesOfGitHubUser(response: data(): get(""login"")))
  : onSet(doSomething)
  : onFail(doSomethingElse)
```

... And I don't succeed (perhaps It's not a good idea) :disappointed_relieved: (I tried something with `map` but it was weird :dizzy_face:, perhaps I have to investigate with `all`)

Or, finally, does it make sense to use **all** ""blocking"" http requests inside a ""non blocking"" promise? :scream: ... To be simpler ❓ 

``` golo
function getRepositoriesOfExistingGitHubUser = |user| {
  return promise(): initializeWithinThread(|resolve, reject| {
    try {
      let res1 = getHttpData(path+""/""+user)
      let res2 = getHttpData(path+""/""+res1: data(): get(""login"")+""/repos"")
      resolve(res2)
    } catch (err) {
      reject(err)
    }
  })
}

findGitHubUser(""k33g""): onSet(|response| {
  getRepositoriesOfGitHubUser(response: data(): get(""login"")): onSet(...): onFail(...) 
  # ...
}): onFail(|error| {
  # foo
})
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/394/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/398,https://api.github.com/repos/eclipse-archived/golo-lang/issues/398,golo-lang,170637546,398,"Getting union type attribute returns ""true""",artpej,693299,Sylvain Desgrais,,CLOSED,2016-08-11T12:48:08Z,2016-08-22T20:33:53Z,"When an union type attribute has the same name that his owner (except uppercase for the first char), then getting this attribute is not possible (always returns true):

``` golo
union U = {
  Abc = { abc }
}

function main = |args| {
  let x = U.Abc(""a"")
  println(x: abc()) # will print ""true"" ?!
  # because: x: abc() == x: isAbc()
}
```

In this case `x: abc()` behave like `x: isAbc()`. I didn't found anything in the documentation about this  behaviour.

:smile_cat:  So, bug or feature?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/398/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/398,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzOTI1MTc4Mg==,golo-lang,239251782,398,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-08-11T18:39:10Z,2016-08-11T18:39:10Z,"Definitely a bug. This is a consequence of the automatic conversion of `getFoo` or `isFoo` into `foo`. I think the fix should take place in this part of the method lookup.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDIzOTI1MTc4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,golo-lang,172310864,400,How to build and use a jar library with Golo for Java?,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2016-08-21T08:25:49Z,2017-05-12T12:00:59Z,"If I compile golo code with this:

```
golo compile --output hello.jar samples/*.golo
```

Can I use the jar file from java? How can I call module function from Java code?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/400/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NjQ3Nw==,golo-lang,241246477,400,NA,artpej,693299,Sylvain Desgrais,,NA,2016-08-21T09:01:23Z,2016-08-21T09:01:23Z,"Hi @k33g ,

first, you have to add Golo runtime dependencies in your classpath:

``` sh
$ ls lib/
asm-5.1.jar  
golo-3.2.0-SNAPSHOT.jar  
jcommander-1.55.jar  
json-simple-1.1.1.jar  
txtmark-0.13.jar
```

then you can run any Golo sample like this:

``` sh
# Fibonacci for example
$ java -cp hello.jar:lib/* samples.Fibonacci
>>> 102334155 (took 1610ms)
>>> 102334155 (took 1545ms)
>>> 102334155 (took 1546ms)
>>> 102334155 (took 1542ms)
^C
```

Golo functions are just Java static methods. 

So let's call Golo from Java:

``` java
import samples.Fibonacci;

public class FromJava {

  public static void main(String[] args){
   System.out.println(Fibonacci.fib(42));
  }

}
```

``` sh
$ javac -cp lib/golo-3.2.0-SNAPSHOT.jar:hello.jar FromJava.java
$ java -cp hello.jar:lib/*:. FromJava
267914296
$
```

Many things can be done from Java (structs, dynamic objects, ...) but there's some things you can't do from java, for exemple augmentations are  only resolved from Golo code :

``` java
import samples.Augmentations;
import java.util.*;

public class FromJava {

  public static void main(String[] args){

    //List l = new LinkedList();
    //l.with(foo); // this is not possible from Java

    Augmentations.main(args); // but this works as expected

  }

}
```

``` sh
$ javac -cp lib/golo-3.2.0-SNAPSHOT.jar:hello.jar FromJava.java
$ java -cp hello.jar:lib/*:. FromJava
>>> foo
>>> bar
>>> baz
$
```

I hope it will help
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NjQ3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzI4Ng==,golo-lang,241247286,400,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-08-21T09:21:51Z,2016-08-21T09:21:51Z,"@Artpej thx a lot (I failed because of naming conventions), now thanks to you it's perfect 👍 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzI4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzM4Nw==,golo-lang,241247387,400,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-08-21T09:24:37Z,2016-08-21T09:24:37Z,"@jponge perhaps this is something to add to the documentation or @yloiseau to  «Real World Golo» before closing this issue
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzM4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzgzNQ==,golo-lang,241247835,400,NA,artpej,693299,Sylvain Desgrais,,NA,2016-08-21T09:36:20Z,2016-08-21T09:36:20Z,"I had in mind to implement the [JSR 223](https://www.jcp.org/en/jsr/detail?id=223) support for Golo. This could ease the Java integration but it's not as simple as I expected. 

Any thoughts about this?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzgzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/400,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODcyMg==,golo-lang,241538722,400,NA,jponge,25961,Julien Ponge,,NA,2016-08-22T20:26:00Z,2016-08-22T20:26:00Z,"@Artpej That'd be lovely
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODcyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,golo-lang,172311026,401,Building golo project: how to add dependencies?,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2016-08-21T08:30:44Z,2016-08-23T11:54:39Z,"Baby question:
How can I add missing dependencies to build maven or gradle golo project?

Currently `gradle build` command failed with this:

```
Execution failed for task ':compileGolo'.
> Could not resolve all dependencies for configuration ':golo'.
   > Could not find org.eclipse.golo:golo:3.2.0-SNAPSHOT.
     Searched in the following locations:
         https://repo1.maven.org/maven2/org/eclipse/golo/golo/3.2.0-SNAPSHOT/maven-metadata.xml
         https://repo1.maven.org/maven2/org/eclipse/golo/golo/3.2.0-SNAPSHOT/golo-3.2.0-SNAPSHOT.pom
         https://repo1.maven.org/maven2/org/eclipse/golo/golo/3.2.0-SNAPSHOT/golo-3.2.0-SNAPSHOT.jar
```

_remark: It's not written in documentation, but I think we need at least version 3 of Gradle_
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/401/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzA3Mw==,golo-lang,241247073,401,NA,artpej,693299,Sylvain Desgrais,,NA,2016-08-21T09:17:11Z,2016-08-21T09:17:11Z,"Snapshot versions aren't uploaded to Bintray (and Maven Central too) but the '3.2.0-M3' is avaiable.

If you really want to get golo snapshot artifacts you can add the Eclipse maven repository in your build:

``` gradle
repositories {
    mavenCentral()
    maven {
       url ""https://repo.eclipse.org/content/repositories/snapshots/""
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzA3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzUzOQ==,golo-lang,241247539,401,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-08-21T09:28:19Z,2016-08-21T09:28:19Z,"@Artpej I must to bookmark this issue (I always forgot it)

@jponge perhaps this is something to add to the documentation or @yloiseau to «Real World Golo» before closing this issue
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzUzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzczNQ==,golo-lang,241247735,401,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-08-21T09:33:27Z,2016-08-21T09:33:27Z,"But I got a new error about jcommander dependency

```
> Could not resolve all dependencies for configuration ':golo'.
   > Could not find com.beust:jcommander:1.55.
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzczNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzkwMw==,golo-lang,241247903,401,NA,artpej,693299,Sylvain Desgrais,,NA,2016-08-21T09:38:06Z,2016-08-21T09:38:06Z,"maybe try to add `jcenter` too:

``` gradle
repositories {
    jcenter()
    mavenCentral()
    maven {
       url ""https://repo.eclipse.org/content/repositories/snapshots/""
    }
}
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0NzkwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0ODAxMA==,golo-lang,241248010,401,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-08-21T09:41:15Z,2016-08-21T09:41:15Z,":( `java.lang.ClassNotFoundException: fr.insalyon.citi.golo.compiler.GoloCompiler`

with SNAPSHOT and M3
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTI0ODAxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODIxNg==,golo-lang,241538216,401,NA,jponge,25961,Julien Ponge,,NA,2016-08-22T20:24:19Z,2016-08-22T20:24:19Z,"For the record @Artpej is right.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODIxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/401,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODU3Mw==,golo-lang,241538573,401,NA,jponge,25961,Julien Ponge,,NA,2016-08-22T20:25:30Z,2016-08-22T20:25:30Z,"@k33g in the docs we could indeed have a note on our repos and how to reach them from Maven or Gradle. Fancy a PR? 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MTUzODU3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/403,https://api.github.com/repos/eclipse-archived/golo-lang/issues/403,golo-lang,176570038,403,Closure as last argument special syntax,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2016-09-13T07:30:17Z,2016-09-18T10:45:06Z,"aka ""the @jponge 's MixIT idea"".

Adds syntactic sugar such that when calling a function with a closure as its last argument, the closure can be specified outside the parenthesis, à la ruby or groovy block syntax.

For instance, with `foo` defined as:

``` golo
function foo = |a, f| {
  println(a)
  f()
}
```

call it as:

``` golo
foo(42) { println(""bar"") }
```

instead of:

``` golo
  foo(42, {println(""bar"")})
```

This allows very nice constructs with anonymous closures without argument, but is not limited to this case, for instance:

``` golo
let f = |a, b, g| -> g(a + b)
let r = f(1, 2) |n| -> n + 1
```

This should also work with single parameter functions:

``` golo
function twice = |f| -> |x| -> f(f(x))
let foo = twice |x| -> x*2
```

and with methods

``` golo
[1, 2, 3]: map |x| -> x + 1
```

A further improvement could be to extends not only to closure but to any last argument:

``` golo
function foo = |a, b| -> a + b

foo(21) 21
```

which would allow to remove the parenthesis for curried functions:

``` golo
function foo = |a| -> |b| -> a + b

foo 21 21
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/403/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/403,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0NjY5MjUyOA==,golo-lang,246692528,403,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-09-13T14:06:48Z,2016-09-13T14:06:48Z,"This feature will also allow to have homogeneous macros calls (see #347)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0NjY5MjUyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/403,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0NjcxNzQ3OA==,golo-lang,246717478,403,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-09-13T15:20:21Z,2016-09-13T15:20:21Z,"Some tests show that it is actually more difficult to adapt the grammar. Indeed, construct such as

``` golo
if foo(42) {
  doPlop()
}
```

will be interpreted as 

``` golo
if foo(42, {doPlop()})
```

that is an `if` without block. I need to investigate further.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0NjcxNzQ3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/403,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0Nzg0MDQzOA==,golo-lang,247840438,403,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-09-18T10:45:06Z,2016-09-18T10:45:06Z,"I think the way to go is to not change the grammar, which should indeed be possible but at the cost of a more complex one, but to post-process the AST or IR. However, I fear that even this approach will be subject to a lot of special cases we will need to deal with.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0Nzg0MDQzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,golo-lang,179175868,405,Method resolution fails with other Java Frameworks (sometimes) ,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2016-09-26T09:10:54Z,2017-02-13T13:03:46Z,"golo version: 3.2.0

This is 2 times that I have theses problems: (perhaps these are not linked :confused:)
- `java.lang.NoSuchMethodError` -> can't find the method
- `java.lang.ClassCastException` -> can't find the method with the good signature
## With Jedis

https://github.com/xetorthio/jedis

my golo code is simple (and has already worked in former versions):

``` golo
module play_with_jedis

import redis.client.jedis.Jedis

function main = |args| {
  let rdb = Jedis(""localhost"", 6379)
}
```

I get this error:

```
Exception in thread ""main"" java.lang.NoSuchMethodError: Jedis(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    at org.eclipse.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:149)
    at play_with_jedis_2.main(try.golo:8)
    at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:40)
    at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:55)
    at org.eclipse.golo.cli.Main.main(Main.java:62)
```
## With Vert.x

my golo code is simple (and has already worked in former versions):

``` golo
module webapp

import io.vertx.core.Vertx
import io.vertx.core.http.HttpServer
import io.vertx.ext.web.Router
import io.vertx.ext.web.handler

let vertx = Vertx.vertx()

function createHttpServer = {
  return vertx: createHttpServer()
}

function getRouter = {
  let router = Router.router(vertx)
  router: route(): handler(BodyHandler.create())
  return router
}

function startHttpServer = |server, router, port, staticPath| {
  router: route(staticPath): handler(StaticHandler.create())
  server: requestHandler(|httpRequest| -> router: accept(httpRequest)): listen(port)
  println(""HttpServer is listening on "" + port)
  return server
}

function main = |args| {
  let server = createHttpServer()
  let router = getRouter()

  router: get(""/hello""): handler(|context| {

    let response = context: response()
    response: putHeader(""content-type"", ""application/json"")
    response: end(JSON.stringify(
      DynamicObject(): message(""Hello :earth_africa: at JDD 2016"")
    ))
  })

  startHttpServer(
    server=server,
    router=router,
    port=9090,
    staticPath=""/*""
  )
}
```

I get this error:

```
java.lang.ClassCastException: java.lang.String cannot be cast to io.vertx.core.buffer.Buffer
    at io.vertx.core.http.impl.HttpServerResponseImpl.end(HttpServerResponseImpl.java:52)
    at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
    at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:280)
    at webapp.__$$_sugar_closure_2(golox.golo:47)
    at java.lang.invoke.MethodHandleProxies$1.invoke(MethodHandleProxies.java:187)
    at com.sun.proxy.$Proxy4.handle(Unknown Source)
    at io.vertx.ext.web.impl.RouteImpl.handleContext(RouteImpl.java:221)
    at io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:78)
    at io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:93)
    at io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler.doEnd(BodyHandlerImpl.java:155)
    at io.vertx.ext.web.handler.impl.BodyHandlerImpl$BHandler.end(BodyHandlerImpl.java:141)
    at io.vertx.ext.web.handler.impl.BodyHandlerImpl.lambda$handle$34(BodyHandlerImpl.java:61)
    at io.vertx.core.http.impl.HttpServerRequestImpl.handleEnd(HttpServerRequestImpl.java:406)
    at io.vertx.core.http.impl.ServerConnection.handleEnd(ServerConnection.java:286)
    at io.vertx.core.http.impl.ServerConnection.processMessage(ServerConnection.java:404)
    at io.vertx.core.http.impl.ServerConnection.handleMessage(ServerConnection.java:134)
    at io.vertx.core.http.impl.HttpServerImpl$ServerHandler.doMessageReceived(HttpServerImpl.java:514)
    at io.vertx.core.http.impl.HttpServerImpl$ServerHandler.doMessageReceived(HttpServerImpl.java:420)
    at io.vertx.core.http.impl.VertxHttpHandler.lambda$channelRead$18(VertxHttpHandler.java:80)
    at io.vertx.core.impl.ContextImpl.lambda$wrapTask$16(ContextImpl.java:333)
    at io.vertx.core.impl.ContextImpl.executeFromIO(ContextImpl.java:225)
    at io.vertx.core.http.impl.VertxHttpHandler.channelRead(VertxHttpHandler.java:80)
    at io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:124)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
    at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:276)
    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:263)
    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:318)
    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:304)
    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:112)
    at java.lang.Thread.run(Thread.java:745)
```

the `end()` method on `HttpServerResponse` is overloaded:
- `end()`
- `end(String)`
- `end(Buffer)`

I want to call `end` with a `String`, but ""something"" want to call it with `Buffer`

❤️ 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/405/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUyMTEzNw==,golo-lang,249521137,405,NA,artpej,693299,Sylvain Desgrais,,NA,2016-09-26T09:23:25Z,2016-09-26T09:23:25Z,"I think this should solve the first one: `Jedis(""localhost"", intValue(6379))`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUyMTEzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUyMjM4OA==,golo-lang,249522388,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-09-26T09:29:29Z,2016-09-26T09:29:29Z,"@Artpej same issue with `intValue`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUyMjM4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUzMTU1NQ==,golo-lang,249531555,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-09-26T10:12:55Z,2016-09-26T10:12:55Z,"For each case, I had made the tests in a VM with Ubuntu and on my laptop with OSX
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTUzMTU1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU0NjkwNg==,golo-lang,249546906,405,NA,artpej,693299,Sylvain Desgrais,,NA,2016-09-26T11:38:26Z,2016-09-26T11:38:26Z,"@k33g my bad, Ii didn't see that Jedis also have this constructor: `Jedis(final URI uri, final int timeout)`

Unfortunately this one seems to be related to  #326 for both cases and I don't have any workaround for instance... 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU0NjkwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU0ODc5Nw==,golo-lang,249548797,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-09-26T11:49:34Z,2016-09-26T11:49:34Z,"@Artpej  at least I'm not mad :stuck_out_tongue_winking_eye:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU0ODc5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU2NzM5Nw==,golo-lang,249567397,405,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-09-26T13:20:55Z,2016-09-26T13:20:55Z,"Did you try  `import redis.client.jedis` ? 
Since the `Jedis` class in in the `redis.client.jedis`, you should not need to import the class, only the package. You should import the class only if you want to use static method defined in it without prefixing.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU2NzM5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU3MjE3MQ==,golo-lang,249572171,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2016-09-26T13:40:20Z,2016-09-26T13:40:20Z,"@yloiseau same issue even with `let rdb = redis.client.jedis.Jedis(""localhost"", 6379)`
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU3MjE3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTYwNzkyMg==,golo-lang,249607922,405,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-09-26T15:40:18Z,2016-09-26T15:40:18Z,"So I think @Artpej has the right answer
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTYwNzkyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTMzODQ1NQ==,golo-lang,279338455,405,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-02-13T09:45:16Z,2017-02-13T09:45:16Z,"This is probably because it's `redis.clients.jedis` and not `redis.client.jedis` :smile:
However, It could be really valuable to print a warning if we import a package or class that is not found in the classpath, instead of simply saying that a call failed because the method is not found!","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTMzODQ1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM0OTQzNA==,golo-lang,279349434,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-02-13T10:33:13Z,2017-02-13T10:33:13Z,"@yloiseau ouch 🙇  🤒  sorry
I'm going to test Vertx","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM0OTQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM0OTk0Mg==,golo-lang,279349942,405,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-02-13T10:35:29Z,2017-02-13T10:35:29Z,Never mind... At least that raised an issue on the clarity of the error messages :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM0OTk0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM1MDg2Nw==,golo-lang,279350867,405,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-02-13T10:39:30Z,2017-02-13T10:39:30Z,"And my tests are ok with Vert-x cc @Artpej 
👏 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM1MDg2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/405,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM4NjkyNg==,golo-lang,279386926,405,NA,jponge,25961,Julien Ponge,,NA,2017-02-13T13:03:45Z,2017-02-13T13:03:45Z,"Great idea :-)

On Mon, Feb 13, 2017 at 11:33 AM, Philippe Charrière <
notifications@github.com> wrote:

> @yloiseau <https://github.com/yloiseau> ouch 🙇 🤒 sorry
> I'm going to test Vertx
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/golo-lang/issues/405#issuecomment-279349434>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABlaQ3TpbQF52-JsikkW5SLr0V5hi7Aks5rcDFpgaJpZM4KGS8p>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3OTM4NjkyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/407,https://api.github.com/repos/eclipse-archived/golo-lang/issues/407,golo-lang,182236652,407,Compiler hangs when declaring variable without assigning a value,vvdleun,22765050,Vincent van der Leun,,CLOSED,2016-10-11T11:10:39Z,2016-10-12T07:46:40Z,"When declaring a variable, but not assigning a value at the same time, the compiler seems to hang.

The following script hangs when compiling:

```
module Test

function main = |args| {
       var t
}
```

I have seen this behavior in Golo v3.2.0-M4 and I believe this happens in 3.1.0 as well.

Please let me know if I can be of any further help.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/407/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/407,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MjkzNjA0OQ==,golo-lang,252936049,407,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-10-11T14:37:25Z,2016-10-11T14:37:25Z,"Ok, my bad, I introduced the regression in https://github.com/eclipse/golo-lang/commit/2f1dc71787506edd45fa1d1242684cfbbb03b940 when adding destructuring (thanks `git bisect`)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MjkzNjA0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,golo-lang,190347310,419,Default values for struct members,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-11-18T15:31:43Z,2020-10-16T04:40:36Z,"It would be nice to be able to specify default values for `struct` members, more specifically when one of this member should be a container.

### Proposed syntax

```golo
struct Foo = {
    a,  # required value
    b=42, # default value
    c=list[]
}
```

### Implementation idea

Currently, a `struct` declaration generate two construction functions in the module:
```golo
function Foo = -> ...
function Foo = |a, b| -> ...
```

in the presence of default value, we could generate another one:
```golo
function Foo = |a| -> Foo(a, 42, list[])
```

this is just a compile time desugarization, which *should* be quite simple.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/419/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTU4NDE2Nw==,golo-lang,261584167,419,NA,jponge,25961,Julien Ponge,,NA,2016-11-18T17:02:08Z,2016-11-18T17:02:08Z,"Would be a great addition.

How about union types?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTU4NDE2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTcxNzc3Mw==,golo-lang,261717773,419,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-11-19T14:43:19Z,2016-11-19T14:43:19Z,"`union` constructors are not of the same kind, to keep the namespace. For instance, given

``` golo
module MyModule
union Foo = {
  Bar = {plic, ploc}
  Baz
}

union GoodPlace = {
  Restaurant
  Bar = {name}
}
```

we can't generate the `Bar` function. The constructor is a static function in the `Foo` and `GoodPlace` classes, to be used as:

``` golo
let meeting = GoodPlace.Bar(""Still Irish Bar"")
```

As a side note, this requires the import of `MyModule.types` to use the `union`s of `MyModule` like that (whereas it's not require for `struct`s) or to use FQN:

``` golo
let plop = MyModule.types.Foo.Bar(""answer"", 42)
```

Moreover, since `union` types are designed to be immutable, I'm not sure if a default value is relevant. Obviously, we could put a mutable object in the union value, so the immutability can't be fully guarantied. 

However, it _should_ not be that hard to add the feature for `union`, and I'm sure some could find a interesting use case, so why not :smile:
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTcxNzc3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTg3NzI4NA==,golo-lang,261877284,419,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-11-21T08:45:09Z,2016-11-21T08:45:09Z,"Experimenting with this. When we have

```golo
module Bar
struct Foo = { x, y }
```

2 constructor are generated (resp. Immutable)

```golo
function Foo = -> Bar.types.Foo()
function Foo = |x, y| -> Bar.types.Foo(x, y)
```

With defaults, we generate 

```golo
struct Foo = { x, y=42}
function Foo = -> Bar.types.Foo(null, 42)
function Foo = |x| -> Bar.types.Foo(x, 42)
function Foo = |x, y| -> Bar.types.Foo(x, y)
```

So far so good. However, I'd like to allow what I call ""dependant default"":

```golo
struct Foo = {x, y=2*x}
```

that would generates

```golo
function Foo = |x| -> Bar.types.Foo(x, 2*x)
```

Nice! But we can no longer generate default constructor:

```golo
function Foo = -> Bar.types.Foo(null, 2*x)
```

since compilation would fail.

Possible solutions:

A. Don't generate default constructor. The developer would then have a difficult to understand `NoSuchMethod` at runtime
B. Generate a default constructor raising a more explicit exception
C. Make that the default constructor always call `Bar.types.Foo()` even when the default is not dependant to be consistent, but that realy lower the value of the feature
D. Don't allow dependant default; can be tricky.

I would go for B. What do you think?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTg3NzI4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/419,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MjE4ODQwNg==,golo-lang,262188406,419,NA,jponge,25961,Julien Ponge,,NA,2016-11-22T09:22:24Z,2016-11-22T09:22:24Z,`B` seems like a fair choice.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MjE4ODQwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/421,https://api.github.com/repos/eclipse-archived/golo-lang/issues/421,golo-lang,194021768,421,Mapping function for struct and union fields,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-12-07T11:12:25Z,2017-03-20T13:45:52Z,"## Idea

Similar to the default values in #419, it would be nice to be able to define a mapping function for fields.
For instance (syntax not defined):
```golo
module Mod
struct User = { 
  name with |x| -> x: toString(): toLowerCase(),
  email with ^Utils::checkEmail,
  age = 0
}
```
(where `Utils::checkEmail` returns its argument or throws an exception)
would generate the following constructors:
```golo
function User = -> Mod.types.User(null, null, 0)

function User = |name, email| -> Mod.types.User(
  (|x| -> x: toString(): toLowerCase())(name), 
  ^Utils::checkEmail(email), 
  0)

function User = |name, email, age| -> Mod.types.User(
  (|x| -> x: toString(): toLowerCase())(name), 
  ^Utils::checkEmail(email), 
  age)
```

Some optimisation could be done:
```golo
local function __$$_User_name = |x| -> x: toString(): toLowerCase()

function User = -> Mod.types.User(null, null, 0)

function User = |name, email| -> Mod.types.User(
  __$$_User_name(name), 
  ^Utils::checkEmail(email), 
  0)

function User = |name, email, age| -> Mod.types.User(
  __$$_User_name(name), 
  ^Utils::checkEmail(email), 
  age)
```

## Questions

* Should the mapping function be applied to `null` in the default constructor?

  I'd say *no*, since in that case, it would be harder to use existing validation function without throwing a `NullPointerException` (we must compose the checking with `gololang.Function::orIfNull`. On the other hand, if one want to force the non null value, the `java.util.Objects::requireNonNull` function can be used as mapping (or composed with the checking function). It really depends on what we want to be easier (or explicit) : allowing `null` values or not.

* How to mix default value and mapping?
  - Mixing syntaxes:
    ```golo
    struct User = { 
      name = ""John Doe"" with |x| -> x: toString(): toLowerCase(),
      email with ^Utils::checkEmail,
      age = 0
    }
    
    function User = -> Mod.types.User(""John Doe"", null, 0)
    
    function User = |email| -> Mod.types.User(
      ""John Doe"", 
      ^Utils::checkEmail(email), 
      0)

    function User = |name, email, age| -> Mod.types.User(
      __$$_User_name(name), 
      ^Utils::checkEmail(email), 
      age)
    ```
    Here again, should the mapping be applied to the default value?

  - don't mix and deal with `null` values in the mapping function (if *yes* to the first question)
    ```golo
    struct User = { 
      name with |x| -> x?: toString()?: toLowerCase() orIfNull ""John Doe"",
      email with ^Utils::checkEmail,
      age = 0
    }

    local function __$$_User_name = |x| -> x?: toString()?: toLowerCase() orIfNull ""John Doe""

    function User = -> Mod.types.User(__$$_User_name(null), ^Utils::checkEmail(null), 0)

    function User = |name, email, age| -> Mod.types.User(
      __$$_User_name(name), 
      ^Utils::checkEmail(email), 
      age)

    ```
    In this case, the simple ""default value"" feature is no more needed since its just a mapping with  `gololang.Functions::orIfNull`:
    ```golo
    struct User = { 
      name with |x| -> x?: toString()?: toLowerCase() orIfNull ""John Doe"",
      email with ^Utils::checkEmail,
      age with gololang.Functions::`orIfNull(0)
    }
    ```

  Even if the second option is more elegant (from the underlying implementation pov), I rather the first syntax.


Any comments?
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/421/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/421,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NTQzNTA2OA==,golo-lang,265435068,421,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-12-07T12:28:25Z,2016-12-07T12:28:25Z,"I just thought about an other syntax, that would solve some of the above issues.

Since default values will allow what I call “dependant value”, as in
```golo
struct Foo = {a, b=42, c=foo(a)}
```
that generates
```golo
function Foo = |a| -> Mod.types.Foo(a, 42, foo(a))
```
it should be possible to expand to “self dependant values”, as in
```golo
struct Foo = { a=mapValue(a), b=42, c=foo(a) }
```
that would generate
```golo
function Foo = |a| -> Mod.types.Foo(mapValue(a), 42, foo(a))
```
or
```golo
function Foo = |a| -> Mod.types.Foo(mapValue(a), 42, foo(mapValue(a)))
```
to determinate.

I have to investigate if it's possible.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NTQzNTA2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/421,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2MzA0Nw==,golo-lang,287763047,421,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T13:45:47Z,2017-03-20T13:45:47Z,"I close this one. I think it's too ambiguous and cumbersome, and since explicit is better than implicit, one can create an explicit constructor function in the module to have this behavior. In last resort, macros will probably allows to alleviate the overhead.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2MzA0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,golo-lang,195016640,425,Cyclic references in struct and union `toString`,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2016-12-12T16:18:14Z,2017-03-20T13:41:42Z,"When printing a struct or union having a cyclic reference, we enter an infinite recursion.
For instance, try

```golo
module Test

struct Foo = {s}

function main = |args| {
  let a = Foo()
  let b = Foo(a)
  a: s(b)
  println(a)
}
```

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/425/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU0Nzc1Ng==,golo-lang,266547756,425,NA,jponge,25961,Julien Ponge,,NA,2016-12-12T20:46:49Z,2016-12-12T20:46:49Z,That can be achieved with other languages as well 😉 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU0Nzc1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU1Njc0Mg==,golo-lang,266556742,425,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-12-12T21:22:41Z,2016-12-12T21:22:41Z,You mean it's a wont-fix?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU1Njc0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU1ODc5NQ==,golo-lang,266558795,425,NA,jponge,25961,Julien Ponge,,NA,2016-12-12T21:30:48Z,2016-12-12T21:30:48Z,"Not necessarily, just that it happens with other languages.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjU1ODc5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjY3NzUwOA==,golo-lang,266677508,425,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2016-12-13T08:33:41Z,2016-12-13T08:33:41Z,"On the other hand, fixing this would mean to keep a set of already visited children to avoid loops, which would be heavy weight to such a simple thing as `toString`. Maybe we should just add a warning in the doc.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NjY3NzUwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/425,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Njc0NjU1MA==,golo-lang,266746550,425,NA,jponge,25961,Julien Ponge,,NA,2016-12-13T14:05:55Z,2016-12-13T14:05:55Z,"Indeed, a doc warning is reasonable.

The same example in Scala:

```scala
case class Foo(var v: Any)

val a = Foo(1)
val b = Foo(a)
a.v = b

println(a)
```

(blows the stack)

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Njc0NjU1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/432,https://api.github.com/repos/eclipse-archived/golo-lang/issues/432,golo-lang,201025202,432,Bug when decorating an overloaded function,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-01-16T13:55:42Z,2017-01-16T14:01:05Z,"This is probably linked to #326 in some way...

given `test.golo` as:
```golo
module golo.bugs.test.OverloadedDecoration

function idDeco = |f| -> f

@idDeco
function foo = |a| -> ""foo: "" + a

@idDeco
function foo = |a, b| -> ""foo2: "" + a + b

function main = |args| {
  println(foo(42))
  println(foo(4, 2))
}
```

then:
```
$ golo golo --files test.golo 
Exception in thread ""main"" java.lang.invoke.WrongMethodTypeException: cannot convert MethodHandle(Object,Object)Object to (Object)Object
	at java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:775)
	at java.lang.invoke.MethodHandle.asType(MethodHandle.java:761)
	at java.lang.invoke.Invokers.checkGenericType(Invokers.java:321)
	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
	at org.eclipse.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:196)
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/432/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/432,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mjg2NzcxOQ==,golo-lang,272867719,432,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-01-16T13:56:03Z,2017-01-16T13:56:03Z,cc @Artpej ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mjg2NzcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/433,https://api.github.com/repos/eclipse-archived/golo-lang/issues/433,golo-lang,201228905,433,Error when closing variables,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-01-17T10:08:56Z,2017-01-19T18:42:40Z,"This in not really a bug, since the code exhibits the right behavior, but the resulting IR is buggy.

Given the code:
```golo
module golo.bugs.test.ClosedVariables

function plop = |a, b| -> |t| -> |a, b| -> a + b

function main = |args| {
  require(plop(""a"", ""b"")(""foo"")(18, 24) == 42, ""error"")
}
```

`42` is the expected result, since here the function ignores its arguments and returns a lambda (not strictly a closure) that ignores its argument `t` and returns a lambda without free variables (bounded to parameters) and thus nothing to close onto the outer scope. However, the compiler is fooled by the fact that both the outer and inner functions have the same parameter names, and makes the intermediate function a closure closed on (outer) `a` and `b`:
```
$ golo diagnose test.golo
[...]
#   Function plop = |a, b|
#     Block
#        - LocalReference{kind=CONSTANT, name='a', index=0}
#        - LocalReference{kind=CONSTANT, name='b', index=1}
#       Return
#         Closure reference: __$$_sugar_closure_0, regular arguments at index 2
#           - capture: a
#           - capture: b
[...]
#   Function __$$_sugar_closure_0 = |a, b, t| (synthetic, 2 synthetic parameters)
#     Block
#        - LocalReference{kind=CONSTANT, name='t', index=2}
#        - LocalReference{kind=CONSTANT, name='a', index=0}
#        - LocalReference{kind=CONSTANT, name='b', index=1}
#       Return
#         Closure reference: __$$_sugar_closure_1, regular arguments at index 0
```
`__$$_sugar_closure_0` (the intermediate function) does not need to be capture `a` and `b` since they are not used.

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/433/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/433,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mzg2MTIxMw==,golo-lang,273861213,433,NA,artpej,693299,Sylvain Desgrais,,NA,2017-01-19T18:42:40Z,2017-01-19T18:42:40Z,Good catch! another shadowing issue... :cry: ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Mzg2MTIxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/437,https://api.github.com/repos/eclipse-archived/golo-lang/issues/437,golo-lang,205076265,437,`-` versus `.` when generating `pom.xml`,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2017-02-03T05:36:24Z,2017-05-12T12:04:07Z,"When Golo generate a maven project, if the name of the project is `hey-how-are-you-doing` the module name in `main.golo` becomes `hey.how.are.you.doing` but it does not change in the `pom.xml` in the 2 `<mainClass>hey-how-are-you-doing</mainClass>` sections, then we get an error when executing the application. cc @jponge ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/437/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/437,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzE2OTg1Mw==,golo-lang,277169853,437,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-02-03T05:47:24Z,2017-02-03T05:47:24Z,and with `artifactId` too,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzE2OTg1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/437,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzI3NjY1OA==,golo-lang,277276658,437,NA,jponge,25961,Julien Ponge,,NA,2017-02-03T15:28:30Z,2017-02-03T15:28:30Z,Fancy a PR?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzI3NjY1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/437,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2MTc4MQ==,golo-lang,287761781,437,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T13:41:02Z,2017-03-20T13:41:02Z,"Same issue with gradle projects. BTW, I propose a small change in this behavior:
- when the project name does not contain dots, replace word boundaries with capitalization to create the main module: 
```
$ golo new --type gradle ""my super project""
$ tree ""my super project""
my super project/
├── build.gradle
└── src
    └── main
        └── golo
            └── main.golo
$ head -n 1 ""my super project/src/main/golo/main.golo"" 
module MySuperProject
```

- when the project name contains dots, use it as is to create the module name, but create the main file in sub-folders that mimic the module/package hierarchy:
```
$ golo new --type gradle my.super.Module
$ tree my.super.Module
my.super.Module
├── build.gradle
└── src
    └── main
        └── golo
            └── my
                └── super
                    └── Module.golo
$ head -n 1 my.super.Module/src/main/golo/my/super/Module.golo 
module my.super.Module
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2MTc4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/439,https://api.github.com/repos/eclipse-archived/golo-lang/issues/439,golo-lang,207167895,439,Warning on unavailable import ,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2017-02-13T09:55:24Z,2017-02-15T14:50:51Z,"Imports are resolved at run-time by trying to load the class and searching through its declared methods. When a class or method is not found, we continue with the next one, ignoring exceptions in order to try the next resolution method.

However, it can lead to difficult to catch bugs, for instance in the presence of a typo in the imported module/package name (see #405), since the raise exception is a `NoSuchMethodError`, which can indeed be raised by a lot of different mistakes (e.g. bad arity or argument types in the call, typo in the function name, etc.).

I propose to print a warning (disabled by default: `golo.warnings.unavailable-class=false`) when a module imports an unavailable module to help the diagnostic of such errors.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/439/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/442,https://api.github.com/repos/eclipse-archived/golo-lang/issues/442,golo-lang,209694160,442,Error with JitPack,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2017-02-23T08:24:52Z,2017-02-25T21:24:29Z,"Hello,
I try to use https://jitpack.io tho share libraries between several Golo project, but I get an error when building:

```
[WARNING] Error injecting: org.eclipse.golo.maven.GolocMojo
java.lang.TypeNotPresentException: Type org.eclipse.golo.maven.GolocMojo not present
```

Details here
https://jitpack.io/com/github/wey-yu/poks-core/104da9760b/build.log","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/442/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/442,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQyNDkyOQ==,golo-lang,282424929,442,NA,rlespinasse,1280212,Romain Lespinasse,,NA,2017-02-24T22:38:13Z,2017-02-24T22:38:13Z,"You are in java 7 on your machine but golo is compile with java 8.

See in your log the `Caused by` part
```
Caused by: java.lang.UnsupportedClassVersionError: org/eclipse/golo/maven/GolocMojo : Unsupported major.minor version 52.0
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQyNDkyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/442,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQ5MTUzMw==,golo-lang,282491533,442,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-02-25T15:37:29Z,2017-02-25T15:37:29Z,@rlespinasse 👍 I've updated my `pom.xml` it's better https://github.com/wey-yu/poks-core-libs/blob/master/pom.xml#L67,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQ5MTUzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/442,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQ5MTYzNg==,golo-lang,282491636,442,NA,rlespinasse,1280212,Romain Lespinasse,,NA,2017-02-25T15:39:07Z,2017-02-25T15:39:07Z,😁,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjQ5MTYzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,golo-lang,212164183,445,Make struct and union serializable,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-03-06T15:53:18Z,2017-04-04T14:39:29Z,It would be nice if golo `struct` and `union` types could be serializable.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/445/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjIyODkyNQ==,golo-lang,286228925,445,NA,jponge,25961,Julien Ponge,,NA,2017-03-13T20:12:53Z,2017-03-13T20:12:53Z,Not too hard either 😄 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjIyODkyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjY4MjcyNg==,golo-lang,286682726,445,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-15T09:12:35Z,2017-03-15T09:12:35Z,hence the “newcomer” label :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjY4MjcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4ODM2Nzg4NA==,golo-lang,288367884,445,NA,imshashwataggarwal,20486396,Shashwat Aggarwal,,NA,2017-03-22T11:14:11Z,2017-03-22T11:14:11Z,"Hi @yloiseau , Could you guide me how to get going on the issue.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4ODM2Nzg4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/445,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTUyMDg2Mw==,golo-lang,291520863,445,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-04-04T14:39:29Z,2017-04-04T14:39:29Z,"Hi @imshashwataggarwal. If you're not familiar with Java serialization process, you can check [Discover the secrets of the Java Serialization API](http://www.oracle.com/technetwork/articles/java/javaserial-1536170.html). 
Basically, the struct generated classes must implement `Serializable`. A `serialVersionUID` should be generated, e.g. from the hash of `GoloStruct` and the struct members.
Another aspect is the `transient` fields. Maybe a convention based name (like for private ones, e.g. prefixing a transient field with `__`) would be enough.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTUyMDg2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,golo-lang,215254661,447,Runtime only JAR,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-03-19T10:25:17Z,2017-03-28T11:35:48Z,"I don't know how easy it would be, but creating a JAR with only the runtime dependencies would allows to create a more lightweight “uberjar/fatjar” of a golo application. AFAICT, the only required external dependency is json-simple. All `org.eclipse.golo` but `runtime` could probably also be removed.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/447/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzYwNzA0Nw==,golo-lang,287607047,447,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-19T10:26:16Z,2017-03-19T10:26:16Z,I'm sure IoT folks like @k33g would be pleased :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzYwNzA0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc1NDc1Nw==,golo-lang,287754757,447,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T13:12:47Z,2017-03-20T13:12:47Z,"Maybe two artefacts: the current full version `golo-VERSION.jar`, and `golo-runtime-VERSION.jar` containing only the classes needed at runtime (AFAICT `org.eclipse.golo.runtime.*` and `gololang.*`).
I suppose some tweaks  to the `build.gradle` would be enough, but I lacks expertise here; maybe @jponge can confirm?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc1NDc1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2NDczMg==,golo-lang,287764732,447,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T13:51:44Z,2017-03-20T13:51:44Z,linked to #400 (cc @Artpej),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc2NDczMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDE3Ng==,golo-lang,287770176,447,NA,artpej,693299,Sylvain Desgrais,,NA,2017-03-20T14:10:48Z,2017-03-20T14:10:48Z,"Quickly, the embedded template engine requires the compile part... Maybe there are other things we can't do with the runtime only dépendance. Wdyt? ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3MDE3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3NDk5Nw==,golo-lang,287774997,447,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-20T14:26:34Z,2017-03-20T14:26:34Z,"Arrgg, yes, the `EvaluationEnvironment` depends on the `GoloClassLoader`...
Ok, so `org.eclipse.golo.runtime.*`, `org.eclipse.golo.compiler.*` and `gololang.*` then :smile:
In any way, we don't need the `org.eclipse.golo.cli.*`, and thus no `jcommander` nor `txtmark` (required for golodoc)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Nzc3NDk5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4OTY5OTUyNQ==,golo-lang,289699525,447,NA,jponge,25961,Julien Ponge,,NA,2017-03-28T08:27:48Z,2017-03-28T08:27:48Z,"Well in ""IoT"" settings where you have the freedom to run a JVM for Golo the Jar size that we have isn't much of an issue.

Not all classes are being loaded from a Jar as classloading is lazy.

If we really want to look into this then perhaps we could start with a complete package dependency analysis?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4OTY5OTUyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/447,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4OTc0MjMxMQ==,golo-lang,289742311,447,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-03-28T11:35:48Z,2017-03-28T11:35:48Z,"Indeed... I opened this issue while trying to create a naive gradle task to create  a uberjar:
```gradle
task uberjar(type: Jar, dependsOn: [':compileJava',':compileGolo']) {
    manifest {
        attributes 'Main-Class': golo.mainModule
    }
    baseName = project.name + '-standalone'
    from files(sourceSets.main.output.classesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
}
```

It works, but also includes in the jar txtmark, jcommander, asm and junit! Admittedly, I managed to filter them, but I thought it would be better to have a golo distribution not depending on them, which would allows to create a dedicated task in the gradle plugin.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI4OTc0MjMxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/449,https://api.github.com/repos/eclipse-archived/golo-lang/issues/449,golo-lang,217053771,449,Errors when multiplying string with 0,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2017-03-26T13:55:19Z,2017-03-28T08:24:12Z,"When multiplying a string with 0, the string is returned, while an empty string is expected.
For instance `2 * ""a""` is `""aa""` but `0 * ""a""` is `""a""`.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/449/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/453,https://api.github.com/repos/eclipse-archived/golo-lang/issues/453,golo-lang,219178115,453,struct frozen copy optimization,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-04-04T08:40:15Z,2017-04-04T08:40:15Z,"When making a frozen copy of a frozen struct, a real shalow copy (new instance) is created, then frozen. Since the instance is already frozen, and thus immutable, the instance itself could be directly returned.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/453/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/455,https://api.github.com/repos/eclipse-archived/golo-lang/issues/455,golo-lang,219827580,455,Overloaded instance method dispatch issues,jponge,25961,Julien Ponge,,OPEN,2017-04-06T08:49:41Z,2017-10-19T09:31:23Z,"We've observed when using Golo with simple Vert.x examples that the overloaded instance method dispatch mechanism does not always revalidate call sites to the right target. This is not deterministic, so we should build a reproducer with Vert.x and see what happens.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/455/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/455,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjE0MzcwOA==,golo-lang,292143708,455,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-04-06T11:20:36Z,2017-04-06T11:20:36Z,Linked to #339 and probably #326 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjE0MzcwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/455,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzg1MzIxMQ==,golo-lang,337853211,455,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-10-19T09:31:23Z,2017-10-19T09:31:23Z,see https://github.com/yloiseau/golo-tests/tree/master/BUGS/326-call-resolution/overloaded/simple,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzg1MzIxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/459,https://api.github.com/repos/eclipse-archived/golo-lang/issues/459,golo-lang,221484622,459,Support the Language Server Protocol,jponge,25961,Julien Ponge,,OPEN,2017-04-13T07:48:21Z,2017-04-13T20:29:30Z,"The _Language Server Protocol_ is an open protocol for integrating with advanced text editors and integrated development environments (VS Code, Eclipse Che, etc).

* [Language server protocol repository](https://github.com/Microsoft/language-server-protocol)
* [Full protocol description](https://github.com/Microsoft/language-server-protocol/blob/master/protocol.md)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/459/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/459,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzkwNDg0MQ==,golo-lang,293904841,459,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-04-13T14:04:32Z,2017-04-13T14:04:32Z,"Do you mean in the main program? Or do you consider a separate executable? Moreover, whereas some features could be relatively easy (errors, definition locations, ...) a lot of features seems quite complex if not impossible without a partial interpreter (e.g. code completion, or even hover documentation) since we must resolve the variable type. 

However, it would be really nice, and such an interpreter would make a REPL trivial :smile:","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzkwNDg0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/459,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDAxMzIzNw==,golo-lang,294013237,459,NA,jponge,25961,Julien Ponge,,NA,2017-04-13T20:29:30Z,2017-04-13T20:29:30Z,"I think either from a subcommand or a separate project would be fine at
this stage.

BTW you don't need to provide support for the full spec, you can have just
basic stuff for syntax highlighting + error reporting and then gradually
see what you can contribute.


On Thu, Apr 13, 2017 at 4:04 PM, Yannick Loiseau <notifications@github.com>
wrote:

> Do you mean in the main program? Or do you consider a separate executable?
> Moreover, whereas some features could be relatively easy (errors,
> definition locations, ...) a lot of features seems quite complex if not
> impossible without a partial interpreter (e.g. code completion, or even
> hover documentation) since we must resolve the variable type.
>
> However, it would be really nice, and such an interpreter would make a
> REPL trivial 😄
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/golo-lang/issues/459#issuecomment-293904841>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABlaXleF7rzksxfGgUr-kvHO0KjqGB6ks5rvitwgaJpZM4M8XYz>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDAxMzIzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/460,https://api.github.com/repos/eclipse-archived/golo-lang/issues/460,golo-lang,221552698,460,Update gololang.JSON to deal with unions,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-04-13T12:46:36Z,2017-04-13T12:46:36Z,"The module `gololang.JSON` leverage `json-simple` to ease the conversion of native golo objects to and from JSON. However, `union`objects are not covered.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/460/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,golo-lang,225384589,465,Golo-lang wiki,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2017-05-01T04:47:19Z,2017-09-25T20:26:20Z,Can we use the repository wiki to add some tutorials or recipes?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/465/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODM3NDE2OA==,golo-lang,298374168,465,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-01T16:59:48Z,2017-05-01T16:59:48Z,Why not... you can also contribute to the [golo book](https://github.com/golo-lang/golo-book) :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODM3NDE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODUyNzMxMg==,golo-lang,298527312,465,NA,jponge,25961,Julien Ponge,,NA,2017-05-02T07:32:12Z,2017-05-02T07:32:12Z,I agree with Yannick :-),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODUyNzMxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODU2MDkzNw==,golo-lang,298560937,465,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-05-02T08:48:30Z,2017-05-02T08:48:30Z,"@yloiseau @jponge ok, but put a reference to it in the README file of the golo-lang project and on the web site (otherwise no one will see)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODU2MDkzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODU2NzI4Nw==,golo-lang,298567287,465,NA,jponge,25961,Julien Ponge,,NA,2017-05-02T09:05:25Z,2017-05-02T09:05:25Z,"Fancy a PR?

On Tue, May 2, 2017 at 10:48 AM Philippe Charrière <notifications@github.com>
wrote:

> @yloiseau <https://github.com/yloiseau> @jponge
> <https://github.com/jponge> ok, but put a reference to it in the README
> file of the golo-lang project and on the web site (otherwise no one will
> see)
>
> —
> You are receiving this because you were mentioned.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/golo-lang/issues/465#issuecomment-298560937>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABlaUYSSc7Pfb8hHfqvr26uJnrSvk-8ks5r1u3egaJpZM4NM0xz>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODU2NzI4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/465,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODg4NDE0Mw==,golo-lang,298884143,465,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-03T11:20:13Z,2017-05-03T11:20:13Z,"Otherwise, you can create the wiki and I will integrate in the book later...","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDI5ODg4NDE0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/469,https://api.github.com/repos/eclipse-archived/golo-lang/issues/469,golo-lang,226211306,469,Generalize Fluent Methods,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-05-04T08:38:10Z,2017-08-31T08:36:31Z,"Currently, setters, e.g. `void setFoo(Object v)`, can be called as builder properties, as if the method `ThisObject foo(Object v)` were defined, thus allowing a fluent chaining of setter methods (behavior defined [here](https://github.com/eclipse/golo-lang/blob/master/src/main/java/org/eclipse/golo/runtime/PropertyMethodFinder.java#L64)).

I think it could be useful to extends this behavior to any method returning `void`.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/469/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/469,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDEyMTY5MQ==,golo-lang,300121691,469,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2017-05-09T10:13:49Z,2017-05-09T10:13:49Z,"With a [fallback behavior](http://golo-lang.org/documentation/next/index.html#_defining_a_fallback_behavior) this feature could be explicit.

We could define a `Fluent` behavior with an augmentationon on the `java.lang.Object`. The user would be responsible to import the feature if he wants to use it. If the user defines its own fluent method it will use instead of the fallback behavior.

Thougts?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDEyMTY5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/469,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDQwODU0MQ==,golo-lang,300408541,469,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-10T08:12:02Z,2017-05-10T08:12:02Z,"@danielpetisme What I propose is just to wrap methods returning `void` to return the object itself. Fallback is of no use here, since the method exists, and thus doesn't trigger the behavior.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDQwODU0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,golo-lang,227701067,471,Priority in fluent properties,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2017-05-10T14:33:37Z,2017-08-31T08:50:42Z,"We introduced fluent properties, that allows to call `setValue(v)` as just `value(v)` and `getValue()` or `isValue()` as `value()`. 
However, if a `value()` method exists, the property is called instead.

For instance, given:
```java
public class A {

  public String getValue() {
    return ""getter"";
  }

  public Integer value() {
    return 42;
  }
}
```
and
```golo
module Test

function main = |args| {
  println(A(): value())
}
```

`javac A.java && golo golo --files test.golo` will print `getter`, while `42` is expected
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/471/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDUxNTk0MA==,golo-lang,300515940,471,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2017-05-10T15:18:02Z,2017-05-10T15:18:02Z,"Not sure it's a bug ....
The current [method resolution](findTarget) looks in order for:
* first a property. Given a property `name`, the [property finder](https://github.com/eclipse/golo-lang/blob/092cbdcce4d580bf1c096972c611ff23290595f1/src/main/java/org/eclipse/golo/runtime/PropertyMethodFinder.java#L51) looks for (in order) :
  * `getName`
  * `isName`
  * `setName`
* then for a method. Given a property `name`, it looks for a method named `name` + number of arguments required.
* finally look for a method in the class augmentation

So basically it's the normal behavior so now 2 options, either we say it's not a bug and we document the Method finding algo. or we modify the algo. 

For me current behavior sounds wise because the classic Java methods (the explicit ones) are used in the first place.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDUxNTk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDU2ODg5Mg==,golo-lang,300568892,471,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-10T18:16:08Z,2017-05-10T18:16:08Z,"I think it qualifies as a bug, since in my example, there is no way to call the `value()` method.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDU2ODg5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcwMjA2NQ==,golo-lang,300702065,471,NA,danielpetisme,593564,Daniel PETISME,daniel.petisme@gmail.com,NA,2017-05-11T07:07:26Z,2017-05-11T07:07:26Z,"What would be the correct order? Method, property then augmentation ?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcwMjA2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcwOTM3MQ==,golo-lang,300709371,471,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-11T07:43:33Z,2017-05-11T07:43:33Z,"I think so. IMO we should involve the ""magic"" only when ""normal"" method fails. Don't know if others agree @Artpej @jponge","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcwOTM3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/471,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcxMDE3Ng==,golo-lang,300710176,471,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-05-11T07:47:28Z,2017-05-11T07:47:28Z,"I'd say it can be considered bad design to have both a ""bean"" interface *and* a fluent one (as in my example) but it could be useful (e.g. for framework compatibility). Anyway, we should not make such objects unusable.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMDcxMDE3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/473,https://api.github.com/repos/eclipse-archived/golo-lang/issues/473,golo-lang,228267258,473,Generate more project files with `golo new`,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-05-12T11:43:14Z,2017-08-26T22:30:14Z,"The `golo new` command could generate more files to help initialize a new golo project matching the common practices. For instances:
- [ ] `CHANGELOG.md` file stub
- [ ] `LICENCE` file (and add the values in the gradle/maven build files): I'd suggest to use EPL by default
- [ ] `doc/main.adoc` (or markdown), updating the gradle file with the asciidoctor plugin e.g.
- [ ] `src/test/golo/main.golo` stub (when a default test framework will be ready)

and probably more. I'm not sure it's relevant. Open to discussion.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/473/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/473,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTE2NTQwMA==,golo-lang,325165400,473,NA,utybo,5175705,Matthieu S.,,NA,2017-08-26T22:30:14Z,2017-08-26T22:30:14Z,"I strongly disagree with having the EPL as the default. I think there should not be any default, but that you should rather ask the user for a licence, and/or redirect to a site like https://choosealicense.com/ or just not create any LICENCE file at all and simply reming the user through in the ""golo new"" that they should choose a licence for their project and create a LICENCE file.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTE2NTQwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/474,https://api.github.com/repos/eclipse-archived/golo-lang/issues/474,golo-lang,228766741,474,Calling (java) varargs function/method with an array,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-05-15T16:12:31Z,2017-05-15T16:12:31Z,"When a java class defines a method (static or not) using varargs, we can't call it from golo with an array, unless the type is `Object`.

For instance, given 
```java
class T {
  public static void varargsObject(Object... args) {}
  public static void varargsString(String... args) {}
}
```

in golo, we have:
```golo
T.varargsObject(""a"", ""b"") # ok
T.varargsString(""a"", ""b"") # ok
T.varargsObject(array[""a"", ""b""]) # ok
T.varargsString(array[""a"", ""b""]) # FAIL 
# NoSuchMethodError: T.varargsString(Ljava/lang/Object;)Ljava/lang/Object;
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/474/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/476,https://api.github.com/repos/eclipse-archived/golo-lang/issues/476,golo-lang,230010500,476,Bad string escape in diagnose command,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-05-19T15:31:16Z,2017-12-11T04:41:41Z,"When printing the representation of the IR tree in `org.eclipse.golo.compiler.ir.IrTreeDumper`, constant strings are not properly escaped. Try for instance `golo diagnose src/main/golo/ansicodes.golo`","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/476/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/476,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDYyMTAzNQ==,golo-lang,350621035,476,NA,mohamadLy,9387199,Mohamadou Ly,lymouhamad@gmail.com,NA,2017-12-11T04:41:41Z,2017-12-11T04:41:41Z,"I can take this, if it's alright with.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDYyMTAzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/477,https://api.github.com/repos/eclipse-archived/golo-lang/issues/477,golo-lang,230187040,477,Infinite loop when using variables with keyword name,vvdleun,22765050,Vincent van der Leun,,OPEN,2017-05-21T00:02:09Z,2017-05-22T16:44:15Z,"In a throw-away script, I was using ""in"" as an absolutely terribly chosen variable name for an InputStream. This seems to cause an infinite loop when compiling the script in at least both 3.2.0-M5 and M6. 

Simplest example would be something like:

```
module crash

function main = |args| {
    let in = ""oh noes""
}
```
I think this is true for all reserved keywords (I tried several others, like ""for"" and ""return"")","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/477/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/477,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzE1NTMxOQ==,golo-lang,303155319,477,NA,jponge,25961,Julien Ponge,,NA,2017-05-22T16:44:15Z,2017-05-22T16:44:15Z,"Thanks, it's likely a parser recovery issue.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzE1NTMxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/479,https://api.github.com/repos/eclipse-archived/golo-lang/issues/479,golo-lang,236743425,479,arrayTypeOf(byte.class) yields a ClassNotFoundException,utybo,5175705,Matthieu S.,,CLOSED,2017-06-18T20:25:55Z,2017-06-22T08:21:36Z,"Everything is in the title. `arrayTypeOf(byte.class)` yields a `ClassNotFoundException` when one would expect it to return the Java equivalent of `byte[].class`

```
Exception in thread ""main"" java.lang.ClassNotFoundException: [Lbyte;
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at gololang.Predefined.arrayTypeOf(Predefined.java:613)
	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
	at org.eclipse.golo.runtime.FunctionCallSupport.fallback(FunctionCallSupport.java:195)
	at MyModule.main(main.golo:7)
	at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:53)
	at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:59)
	at org.eclipse.golo.cli.Main.main(Main.java:69)
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/479/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/479,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM2OTM1OQ==,golo-lang,309369359,479,NA,artpej,693299,Sylvain Desgrais,,NA,2017-06-19T08:11:17Z,2017-06-19T08:11:17Z,"Good catch! A fix will coming soon...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM2OTM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/479,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM5NTE2Mg==,golo-lang,309395162,479,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-19T10:01:30Z,2017-06-19T10:01:30Z,Same bug with any primitive type…,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM5NTE2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/481,https://api.github.com/repos/eclipse-archived/golo-lang/issues/481,golo-lang,237505497,481,"""`continue` or `break` statement outside a loop"" when it's actually in a loop",utybo,5175705,Matthieu S.,,CLOSED,2017-06-21T11:43:48Z,2017-06-21T11:48:33Z,"The following does not compile, even though the `break` statement is in a loop

```
while(true) {
    print(""=> "")
    let reply = readln()
    match {
      when reply == ""1"" then {
        doStuff()
        break
      }
      otherwise {
        println(""Incorrect value : "" + reply)
      }
    }
  }
```

""`continue` or `break` statement outside a loop""","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/481/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/481,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMDA1NDA5OQ==,golo-lang,310054099,481,NA,utybo,5175705,Matthieu S.,,NA,2017-06-21T11:48:33Z,2017-06-21T11:48:33Z,"Nevermind, I didn't notice I was using a ""match"" instead of a ""case"" statement","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMDA1NDA5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/483,https://api.github.com/repos/eclipse-archived/golo-lang/issues/483,golo-lang,238279383,483,"Dynamic listing/scanning/discovery of ""annotated"" modules or functions?",utybo,5175705,Matthieu S.,,OPEN,2017-06-24T00:08:39Z,2017-06-28T13:48:12Z,"One thing that could be very useful is to dynamically list a group of modules or functions.

In Java, there are multiple libraries that can give you a list of classes or methods or ""things"" that are annotated with a specific Annotation. This allows you to make very flexible systems like plugin systems without having to hard-code where the classes you want are (see below for a more detailed example). I believe this would be a very worthy addition to Golo, as, afaik, you have no way of dynamically doing this at runtime, and all you can do is hard-coding a list of classes, without any ""dynamic discovery"" system.

I am not sure of how this could be done though -- I'm not even sure *if* it could be done.

So far in Java all I've seen for detecting annotated classes is : 
* Scanning through everything and detecting the annotations *at runtime* (in the spirit of [Reflections](https://github.com/ronmamo/reflections))
* Use the Annotation Processing Tool (APT) *at compile time* to build a list of annotated classes (or classes that implement a specific interface or extend a specific class) in the spirit of [ClassIndex](https://github.com/atteo/classindex), where this list is stored in a service file in META-INF. Unfortunately, APT is a feature of the Java compiler, and not a standalone tool, so it cannot be reused.

A real world example of this would be a program that gives you a list of tools, where each tool has its own module or class. In Java, you can say ""all the classes that represent 'tools' have to be annotated with this annotation"" and that would be fine when using the libraries -- you would then be able to freely add more tools by adding more annotated classes without the need to touch anything else, which also enables dynamically loading tools from other JARs. In Golo, you have to hardcode the list of all the tool modules, and you won't be able to dynamically load them from other ""Golo-JAR""s.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/483/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/483,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU4MDI5Ng==,golo-lang,311580296,483,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-28T07:30:29Z,2017-06-28T07:30:29Z,"Thanks to the Java/Golo integration, you can use standard java reflection features, and third parties libraries should also work. `Predefined.fun` may be enough in some cases. Some of the (undocumented) features in `o.e.golo.runtime` package could also be useful. 

Annotations introspection on java classes is thus possible. Golo functions and types can not yet be annotated, but the upcoming macros will allow it.

However, for your plug-in use case, keep in mind that since golo is fully dynamic, you can load golo files at runtime. So provided some naming conventions to mitigate the lack of interfaces and annotations, the use case should be easy to implement.

By the way, once the macro feature will be in, I plane to add a facade package to ease meta-programming, both compile time (utils for macro and IR manipulation) and runtime (reflection and dynamic loading and invocation)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU4MDI5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/483,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTE2Mg==,golo-lang,311665162,483,NA,utybo,5175705,Matthieu S.,,NA,2017-06-28T13:48:12Z,2017-06-28T13:48:12Z,Thanks! I will keep an eye out for the macro feature then :),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTE2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/486,https://api.github.com/repos/eclipse-archived/golo-lang/issues/486,golo-lang,238930009,486,A constructor is stuck with the first type it's called with. (ClassCastException),utybo,5175705,Matthieu S.,,OPEN,2017-06-27T17:46:13Z,2017-06-28T13:49:34Z,"This title probably isn't clear enough, so here is the code that is problematic

```
function myFunction = {
  label(""My label is awesome!"")
  label(someIcon) # note : someIcon oftype javax.swing.Icon == true
}

function label = |textOrIcon| {
  return javax.swing.JLabel(textOrIcon)
}
```

The second use of label yields a ClassCastException : `java.lang.ClassCastException: Cannot cast javax.swing.Icon to java.lang.String`

If reversed (i.e we use `label(someIcon)` first), this also yields a ClassCastException, except that it's the other way around : `java.lang.ClassCastException: Cannot cast java.lang.String to javax.swing.Icon`

This shouldn't happen : the JLabel class has two constructors : JLabel(String) and JLabel(Icon). One would except Golo to be able to dynamically call either of the two depending on the object we give.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/486/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/486,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU1OTY3MA==,golo-lang,311559670,486,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-28T05:24:18Z,2017-06-28T05:24:18Z,Probably a duplicate of #341 (see https://github.com/eclipse/golo-lang/projects/2),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU1OTY3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/486,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTU5MA==,golo-lang,311665590,486,NA,utybo,5175705,Matthieu S.,,NA,2017-06-28T13:49:34Z,2017-06-28T13:49:34Z,Alright -- It probably is now that I think about it -- I wasn't sure so I preferred to open an issue with a concrete example.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTU5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/487,https://api.github.com/repos/eclipse-archived/golo-lang/issues/487,golo-lang,239008967,487,Comments inside data structures,utybo,5175705,Matthieu S.,,OPEN,2017-06-27T23:10:14Z,2017-06-28T13:50:36Z,"This is a feature request to add the possibility to put comments in data structure, like so : 

```
var example = [
  # This is a tuple of things
  [
     # Needs more stuff
  ],
  # Some other things
  [
    # ...still empty
  ]
]
```

I believe this could be a great addition, allowing to document and clarify data structures in Golo.

(atm this fails with `Encountered unexpected <COMMENT>`)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/487/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/487,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU1ODY5MQ==,golo-lang,311558691,487,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-06-28T05:16:15Z,2017-06-28T05:16:15Z,This one is actually a WIP (see https://github.com/yloiseau/golo-lang/tree/improve/comment-in-collection),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTU1ODY5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/487,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTg3MQ==,golo-lang,311665871,487,NA,utybo,5175705,Matthieu S.,,NA,2017-06-28T13:50:36Z,2017-06-28T13:50:36Z,"Woops, didn't see it. You guys should probably have some WIP feature list somewhere -- unless there is one and I somehow missed it.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTY2NTg3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,golo-lang,240814719,491,Issues when using closures or adapters for functional interfaces or SAM having default methods or method defined in Object,utybo,5175705,Matthieu S.,,OPEN,2017-07-06T00:50:31Z,2017-07-06T13:17:02Z,"The Java interface java.util.Comparator has, for some reason, the equals method as an abstract method. Even though it is implemented by java.lang.Object for every object, this seems to confuse Golo which spits out a `There is no implementation or override for: public abstract boolean java.util.Comparator.equals(java.lang.Object)` when trying to create an adapter. This also makes Golo confused when only using a closure instead of an adapter (i.e using a closure as a functional interface) where a Comparator is expected.

Error stack : 

```
Exception in thread ""AWT-EventQueue-0"" org.eclipse.golo.runtime.adapters.AdapterDefinitionProblem: There is no implementation or override for: public abstract boolean java.util.Comparator.equals(java.lang.Object)
	at org.eclipse.golo.runtime.adapters.AdapterDefinition.checkMethodsToBeImplemented(AdapterDefinition.java:181)
	at org.eclipse.golo.runtime.adapters.AdapterDefinition.validate(AdapterDefinition.java:91)
	at gololang.AdapterFabric.maker(AdapterFabric.java:158)
	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
	at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:282)
	at gololang.Adapters$gololang$Adapters$types$adapter.maker(adapters.golo:106)
	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
	at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:282)
	at gololang.Adapters$gololang$Adapters$types$adapter.newInstance(adapters.golo:129)
	at java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)
	at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:282)
```

Code : 

```
Adapter(): interfaces([""java.util.Comparator""])
    : implements(""compare"", |this,e1,e2| {
      # Implementation here
    }): newInstance()
```
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/491/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzMzMjUxNA==,golo-lang,313332514,491,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T08:35:09Z,2017-07-06T08:35:09Z,"```golo
require(
  1 == java.util.Collections.min(
    list[5, 1, 2, 3],
    asInterfaceInstance(
      java.util.Comparator.class,
      |a, b| -> Integer.compare(a, b))),
  ""err"")
```

works as expected...
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzMzMjUxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzMzNjk1Ng==,golo-lang,313336956,491,NA,utybo,5175705,Matthieu S.,,NA,2017-07-06T08:54:53Z,2017-07-06T08:54:53Z,"Huh, I forgot about that method... I expected it to work by just putting a closure but it seems Comparator doesn't count as a functional interface. Adapters still yield an error though I wonder if it's relevant since there is this asInterfaceInstance function 

Sorry for my ignorance >_<","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzMzNjk1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM0NjY1OA==,golo-lang,313346658,491,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T09:34:15Z,2017-07-06T09:34:15Z,"It should be automatically converted, but we have a bug in identifying SAM since 1.8, since now interfaces can have default methods. The `asInterfaceInstance` is a way to force the conversion explicitly.

Although in this particular case, the adapter is not necessary, I think the found behavior should be investigated, since it can be the sign of an underlying bug. ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM0NjY1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM0ODkyMA==,golo-lang,313348920,491,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T09:43:33Z,2017-07-06T09:43:33Z,"Moreover, `Comparator` *is* a functional interface, so it should work. Indeed, 
```golo
require(
  1 == java.util.Collections.min(
    list[5, 1, 2, 3],
    asFunctionalInterface(
      java.util.Comparator.class,
      |a, b| -> Integer.compare(a, b))),
  ""err"")
```
fails (since it only creates an adapter under the hood), as well as 
```golo
require(
  1 == java.util.Collections.min(
    list[5, 1, 2, 3],
    |a, b| -> Integer.compare(a, b)),
  ""err"")
```
failing to wrap the closure in a FI using a `LambdaMetafactory`","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM0ODkyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5MjI1OQ==,golo-lang,313392259,491,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T13:13:52Z,2017-07-06T13:13:52Z,I actually have 2 old branches try to fix this aspect (https://github.com/yloiseau/golo-lang/tree/improvement/java-function-integration and https://github.com/yloiseau/golo-lang/tree/wip/java-function-integration) if someone wants to have a look :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5MjI1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/491,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5MzAzMA==,golo-lang,313393030,491,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T13:17:02Z,2017-07-06T13:17:02Z,"Here are some minimal tests:
```java
@FunctionalInterface
public interface FI {
  int get();
}
@FunctionalInterface
public interface FiWithDefault {
  int get();

  default int apply() {
    return get() + 1;
  }
}

@FunctionalInterface
public interface FiWithEquals {
  int get();
  boolean equals(Object other);
}

public interface SAM {
  int get();
}
public interface SamWithDefault {
  int get();

  default int apply() {
    return get() + 1;
  }
}
public interface SamWithEquals {
  int get();
  boolean equals(Object other);
}

public final class Utils {

  public static int useSam(SAM f) {
    return f.get();
  }

  public static int useFi(FI f) {
    return f.get();
  }

  public static int useSamWithDefault(SamWithDefault f) {
    return f.get();
  }

  public static int useFiWithDefault(FiWithDefault f) {
    return f.get();
  }

  public static int useSamWithDefaultUseDefault(SamWithDefault f) {
    return f.apply();
  }

  public static int useFiWithDefaultUseDefault(FiWithDefault f) {
    return f.apply();
  }

  public static int useSamWithEquals(SamWithEquals f) {
    return f.get();
  }

  public static int useFiWithEquals(FiWithEquals f) {
    return f.get();
  }
}
```

`test.golo`:
```golo
module Test

import gololang.AnsiCodes
import gololang.Adapters

function title = |t| {
  println("""")
  bold()
  fg_magenta()
  println(t)
  reset()
}

function test = |d, e, f| {
  print(""▶ "")
  fg_blue()
  print(d)
  reset()
  print("": ["")
  try {
    let r = f()
    require(r == e, ""expected %s, got %s"": format(e, r))
    fg_green()
    print(""OK"")
    reset()
    println(""]"")
  } catch (e) {
    if (e oftype AssertionError.class) {
      fg_yellow()
      print(""FAILED"")
      reset()
      println(""]"")
      fg_cyan()
      println(""  "" + e: message())
      reset()
    } else {
      fg_red()
      print(""ERROR"")
      reset()
      println(""]"")
      fg_cyan()
      println(""  "" + e)
      reset()
    }
  }
}

function main = |args| {
  title(""Pure SAM and FI"")
  test(""sam with closure"", 42,
    -> Utils.useSam(-> 42))
  test(""fi with closure"", 42,
    -> Utils.useFi(-> 42))
  test(""sam asInterfaceInstance"", 42,
    -> Utils.useSam(asInterfaceInstance(SAM.class, -> 42)))
  test(""fi asFunctionalInterface"", 42,
    -> Utils.useFi(asFunctionalInterface(FI.class, -> 42)))

  title(""SAM and FI with default method (use abstract)"")
  # fails since SamWithDefault is not identified as a SAM due to the default
  # method (see o.e.g.runtime.TypeMatching.isSam)
  test(""sam with closure"", 42,
    -> Utils.useSamWithDefault(-> 42))
  test(""fi with closure"", 42,
    -> Utils.useFiWithDefault(-> 42))
  test(""sam asInterfaceInstance"", 42,
    -> Utils.useSamWithDefault(asInterfaceInstance(SamWithDefault.class, -> 42)))
  test(""fi asFunctionalInterface"", 42,
    -> Utils.useFiWithDefault(asFunctionalInterface(FiWithDefault.class, -> 42)))

  title(""SAM and FI with default method (use default)"")
  # fails since SamWithDefault is not identified as a SAM due to the default
  # method (see o.e.g.runtime.TypeMatching.isSam)
  test(""sam with closure"", 42,
    -> Utils.useSamWithDefaultUseDefault(-> 41))
  test(""fi with closure"", 42,
    -> Utils.useFiWithDefaultUseDefault(-> 41))

  # fails: the MethodHandleProxies does not define nor use the default interface method.
  test(""sam asInterfaceInstance"", 42,
    -> Utils.useSamWithDefaultUseDefault(asInterfaceInstance(SamWithDefault.class, -> 41)))

  # fails: the adapter does not define nor use the default interface method.
  test(""fi asFunctionalInterface"", 42,
    -> Utils.useFiWithDefaultUseDefault(asFunctionalInterface(FiWithDefault.class, -> 41)))
  test(""sam with adapter (manual delegate)"", 42,
    -> Utils.useSamWithDefault(Adapter(): interfaces([""SamWithDefault""])
        : implements(""get"", |this| -> 42)
        : implements(""apply"", |this| -> ^SamWithDefault::apply(this))
      : newInstance()))
  test(""fi with adapter (manual delegate)"", 42,
    -> Utils.useFiWithDefault(Adapter(): interfaces([""FiWithDefault""])
        : implements(""get"", |this| -> 42)
        : implements(""apply"", |this| -> ^FiWithDefault::apply(this))
      : newInstance()))


  title(""SAM and FI with equals"")
  # fails since SamWithEquals is not identified as a SAM due to the abstract
  # equals method, even if inherited from Object (see o.e.g.runtime.TypeMatching.isSam)
  test(""sam with closure"", 42,
    -> Utils.useSamWithEquals(-> 42))
  test(""fi with closure"", 42,
    -> Utils.useFiWithEquals(-> 42))
  test(""sam asInterfaceInstance"", 42,
    -> Utils.useSamWithEquals(asInterfaceInstance(SamWithEquals.class, -> 42)))

  # fails: the adapter does not define nor use the inherited equals method.
  test(""fi asFunctionalInterface"", 42,
    -> Utils.useFiWithEquals(asFunctionalInterface(FiWithEquals.class, -> 42)))

  # fails: the adapter does not accept the equals overriding. Why ?
  # probably a conflict with the one inherited from Object
  test(""sam with adapter (override)"", 42,
    -> Utils.useSamWithEquals(Adapter(): interfaces([""SamWithEquals""])
        : implements(""get"", |this| -> 42)
        : overrides(""equals"", |super, this, other| -> this == other)
      : newInstance()))

  # fails: the adapter does not accept the equals implementation. Why ?
  # probably a conflict with the one inherited from Object
  test(""sam with adapter (implements)"", 42,
    -> Utils.useSamWithEquals(Adapter(): interfaces([""SamWithEquals""])
        : implements(""get"", |this| -> 42)
        : implements(""equals"", |this, other| -> this == other)
      : newInstance()))
}
```

`Makefile`:
```makefile
CLASSES := $(addsuffix .class, $(basename $(wildcard *.java)))

.PHONY: test
test: $(CLASSES)
	@golo golo --classpath . --files test.golo

%.class: %.java
	@javac -d . $<

clean: 
	@rm -f *.class
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5MzAzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/492,https://api.github.com/repos/eclipse-archived/golo-lang/issues/492,golo-lang,240950585,492,"Cannot access protected methods using adapters' ""this""",utybo,5175705,Matthieu S.,,CLOSED,2017-07-06T13:07:32Z,2017-07-06T13:38:54Z,"See this example : 

```
Adapter()
  : extends(""javax.swing.SwingWorker"")
  : implements(""doInBackground"", |this| {
    this: publish(""Hello!"", ""Hi!"", ""HIIIII!"")
  })
  : overrides(""process"", |super, this, bits| {
    foreach bit in bits {
      println(bit)
    }
  }): newInstance(): execute()
```

The call to ""publish"" fails with a NoSuchMethodError. This is because the `publish` method is protected in SwingWorker, and the Adapter fails to provide access to it. This makes it impossible to use SwingWorkers in Golo using adapters, and probably breaks other use cases, such as the ClassLoader case as described in the footnote of the report at #271 

> Another issue append when I invoke `this: findLoadedClass(...)` or `this: defineClass(...)`. Both are not found in this context. It is because both methods are protected and not overrided, and according the documentation of getDeclaredMethods and getMethods there's no direct way to obtain the inherited protected method of a class.

There does not seem to be any way around this that does not involve the less-than-secure setAccessible using Reflection. (Reflection also fails at this using getDeclaredMethods by the way, and the `^` operator also fails. Overriding the `publish` method in the adapter does not solve this either.)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/492/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/492,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5NDQ5OA==,golo-lang,313394498,492,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-07-06T13:22:56Z,2017-07-06T13:22:56Z,closed as duplicate of #271 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzM5NDQ5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/493,https://api.github.com/repos/eclipse-archived/golo-lang/issues/493,golo-lang,241615382,493,Call java SAM and FI as regular functions,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-07-10T06:50:20Z,2017-08-31T08:36:09Z,"It would be nice to be able to call java functions (Single Abstract Method instances and `FunctionalInterface` instances) with the golo syntax; for instance:
```golo
let comp = java.util.Comparator.reverseOrder()
comp(""foo"", ""bar"") # instead of comp: compare(""foo"", ""bar"")
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/493/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,golo-lang,253364927,496,How to get the main golo file's location?,utybo,5175705,Matthieu S.,,OPEN,2017-08-28T15:23:39Z,2017-08-29T13:16:09Z,"How can I get where the golo file containing the ""main"" function is? In Java, you can find where the JAR file is using one of the solutions posted here : https://stackoverflow.com/questions/15359702/get-location-of-jar-file but none of them work in Golo using `golo golo ...`","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/496/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTM5OTk5MA==,golo-lang,325399990,496,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-08-28T16:15:44Z,2017-08-28T16:15:44Z,Do you have a use case?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTM5OTk5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQwMjQwOA==,golo-lang,325402408,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T16:24:48Z,2017-08-28T16:24:48Z,"The use case here would be if one wants to distribute a free-form golo project that includes some resources like text files or images that need to be loaded at runtime. An example of a layout would be this : 

```
myproject/
  main.golo
  resources/
    image.png
    data.json
```

There is no simple way to retrieve the full path of `myproject`. `currentDir()` isn't useful as the location of the main.golo file is not always the working directory (especially when using golosh when main.golo could be called from anywhere with an alias or as being in `env`)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQwMjQwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQwMzIyNg==,golo-lang,325403226,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T16:27:48Z,2017-08-28T16:27:48Z,"The only workaround I can think of is using a script to launch the golo file that retrieves the path and passes it as an argument to the golo program, though this is far from straightforward and requires reliance on third-party tools as well as an additional argument to the program, which requires modifications to the main method/function.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQwMzIyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQzNTUxMQ==,golo-lang,325435511,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T18:21:44Z,2017-08-28T18:21:44Z,"One way to fix this would be to use, in the GoloClassLoader, the version of defineClass that supports the a custom ProtectionDomain that can thus encapsulate a correct CodeSource object that includes location information to the source of the golo file. Doing this would require creating a new method in GoloClassLoader that supports a URL instead of an InputStream or that has a URL as an additional argument.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQzNTUxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ1MzkzNw==,golo-lang,325453937,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T19:27:08Z,2017-08-28T19:27:08Z,"I have implemented the mentioned fix in this commit : https://github.com/utybo/golo-lang/commit/49a9d89335a3b13007e3649d457b8146e4e91984

Should I open a pull request for this? @yloiseau ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ1MzkzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ1ODY4Ng==,golo-lang,325458686,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T19:45:33Z,2017-08-28T19:45:33Z,"I also added support for golosh in https://github.com/utybo/golo-lang/commit/cc7f15b7a73a651748b80937ced577e53c8d24e8

So now both `golo golo` and `golosh` have support for CodeSource, which fully fixes this issue.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ1ODY4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ4NTA5MQ==,golo-lang,325485091,496,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-08-28T21:18:52Z,2017-08-28T21:18:52Z,"For your resources use case, the classical approach is to create a jar and use the usual java methods to get the resources. 
Btw, what third party dependency are you refering to? The `golo` command is already a shell script. Gradle for instance can generate the required script that pass the script directory as argument (which in my opinion is way more flexible)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ4NTA5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ4OTk2Ng==,golo-lang,325489966,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-28T21:37:09Z,2017-08-28T21:37:09Z,"Well I guess I didn't express myself clearly for the third party stuff, which meant ""something outside of Golo"" in that case.

I still do not think having to use a script is handy for this, but yes gradle could do that. I still think having the option to grab the location from inside the code is much easier and doesn't require setting up an entire gradle build or jar just for this reason. However, feel free to reject the PR and this suggestion if you do not feel like it is a worthy addition.

EDIT : Woops, looks as if I failed some of the requirements for contributing to an Eclipse project on the PR, I'll fix that ASAP if you are ok with the PR.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTQ4OTk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTU2Mjk2Ng==,golo-lang,325562966,496,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-08-29T05:56:51Z,2017-08-29T05:56:51Z,"I still don't see the point of your use case. Except for single-file scripts, you should distribute a jar bundling your resources, and thus use `Class::getResource` to retrieve them. Otherwise, when the resources are ""external"" to the application (e.g. a web application assets), their path should be a parameter of the application imo, not hard-coded nor deployment dependent.

However, since compiled class can give access to this information, why not... ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTU2Mjk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/496,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTY2MDExNA==,golo-lang,325660114,496,NA,utybo,5175705,Matthieu S.,,NA,2017-08-29T13:16:09Z,2017-08-29T13:16:09Z,"Well, seeing that compiled classes and JARs give access to this data, I think it should be added to Golo for the sake of completeness.

(and yeah, my use case kind of sucks, I'll give you that, but I think giving the information inside Golo is as flexible as it gets... Oh well)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNTY2MDExNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/498,https://api.github.com/repos/eclipse-archived/golo-lang/issues/498,golo-lang,254252036,498,Re-export other modules functions,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-08-31T08:14:46Z,2017-08-31T13:38:47Z,"It would be nice for a module to be able to expose (export) some or all public functions defined in an other module.

For instance, given
```golo
module some.Module

function foo = |a, b| ...
function bar = |x| ...
```
a module can export some functions as (syntax to be defined)
```golo
module my.package.Utils

export some.Module::foo

...
```
so that a third one can do:
```golo
module an.other.One

import my.package.Utils

function main = |args| {
  foo(1, 2) # actually calls some.Module::foo
  bar(""plop"") # ! no such method...
}
```

It would ease the creation of facade module for instance.

I see two ways to do this:

- *compile time* (e.g. with a macro... which should be available soon) by injecting in the exporting module functions that delegate on the original ones. Advantage: no change to the language if macros are used, no change in the resolution process, easier to implement. A drawback is that the exported module must be available at compile time to do reflection (depending on the features we want, for instance exporting all functions or keeping named parameters), and thus the compilation order becomes relevant;

- *run time* by adding some export metadata to a module (in the same spirit as imports) and use this information when resolving a function call: also search functions in modules exported by the modules imported in the module containing the call... more change to the language/runtime, more difficult to implement, but more dynamic and compilation order remains irrelevant.

Ideas?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/498/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/499,https://api.github.com/repos/eclipse-archived/golo-lang/issues/499,golo-lang,257690446,499,Can't use a fully qualified function name as decorator,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2017-09-14T11:47:28Z,2017-09-14T11:47:45Z,"Given a decorator function
```golo
module my.utils.Decorators

function foo = |f| {
  println(""# inside the decorator"")
  return f
}
```

The following use works:
```golo
module Usage

import my.utils.Decorators

@foo
function answer = -> 42
```

while the following fails with a syntax error:
```golo
module Usage

@my.utils.Decorators.foo
function answer = -> 42
```

They should be equivalent.

This is a syntax issue, not an implementation one.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/499/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,golo-lang,265173539,502,"Golo version with pom.xml, what is the latest usable version?",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2017-10-13T05:26:15Z,2017-10-15T06:27:47Z,"👋 I build easily golo maven project (like http://k33g.github.io/2017/04/22/DEPLOY-GOLO-ON-CLEVER-CLOUD.html) but the most recent release at bintray seems to be `3.2.0-M6`

is it normal?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/502/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MDA5Ng==,golo-lang,336370096,502,NA,jponge,25961,Julien Ponge,,NA,2017-10-13T07:12:29Z,2017-10-13T07:12:29Z,"Right, there was an issue when deploying the Maven plugin, and the latest version of the plugin on Bintray is stuck to 3.2.0-M6.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MDA5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MzczMg==,golo-lang,336373732,502,NA,jponge,25961,Julien Ponge,,NA,2017-10-13T07:30:51Z,2017-10-13T07:30:51Z,"The compilation error we have is that the `HtmlProcessor` API was changed.

Previously the Maven plugin did the golodocs generation using:

```java
GolodocFileVisitor visitor = new GolodocFileVisitor();
Files.walkFileTree(root, visitor);
new HtmlProcessor().process(visitor.units, Paths.get(outputDirectory));
```

where `visitors.unit` is a `Map<String, ASTCompilationUnit>` while the `process` method now requires a `Map<String, ModuleDocumentation>`.

Any hint @yloiseau?","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MzczMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQyNzU3MA==,golo-lang,336427570,502,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-10-13T11:37:11Z,2017-10-13T11:37:11Z,"Ooops... I refactored the documentation generation process to use the IR instead of the AST a while ago, in #478. Since all tests were green, I didn't realized that the maven plugin uses the API to generate the doc. My bad :confounded:","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQyNzU3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQyOTE2Mg==,golo-lang,336429162,502,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-10-13T11:45:49Z,2017-10-13T11:45:49Z,But but but... the golo golo-maven-plugin is not tested ?! :smile:,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQyOTE2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/502,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQzMjczMA==,golo-lang,336432730,502,NA,jponge,25961,Julien Ponge,,NA,2017-10-13T12:01:04Z,2017-10-13T12:01:04Z,"No, and it is bad bad bad :-)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjQzMjczMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/504,https://api.github.com/repos/eclipse-archived/golo-lang/issues/504,golo-lang,266444904,504,Java 9 compatibility report,jponge,25961,Julien Ponge,,OPEN,2017-10-18T10:40:00Z,2017-10-19T11:10:26Z,"Trying to build and test Golo with the now-released Java 9, here is a compatibility report with issues and pointers.

Note that we are taking about compatibility on _the classpath_ (that is, like it used to be for Java 7 and 8), making Golo a modular code base according to the [JPMS](http://openjdk.java.net/projects/jigsaw/spec/) is another issue. A quick-win can be to provide a _reserved name_ and auto-modules, but until all Golo dependencies have migrated to JPMS and given the peculiar nature of a dynamic JVM language, this is clearly another issue.

## Compilation

We have a single warning:

```
src/main/java/org/eclipse/golo/runtime/adapters/JavaBytecodeAdapterGenerator.java:77: warning: [deprecation] isAccessible() in AccessibleObject has been deprecated
      if (!defineClass.isAccessible()) {
                      ^
1 warning
```

Reflective accesses are becoming more and more complicated.

Here, we are trying to inject bytecode into a classloader:

```java
public Class<?> generateIntoDefinitionClassloader(AdapterDefinition adapterDefinition) {
    try {
      byte[] bytecode = generate(adapterDefinition);
      ClassLoader classLoader = adapterDefinition.getClassLoader();
      Method defineClass = ClassLoader.class.getDeclaredMethod(""defineClass"", String.class, byte[].class, int.class, int.class);
      if (!defineClass.isAccessible()) {
        defineClass.setAccessible(true);
      }
      return (Class<?>) defineClass.invoke(classLoader, adapterDefinition.getName(), bytecode, 0, bytecode.length);
    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
```

The ""new way"" to inject classes with Java 9 is to have a lookup on an object, hoping to have sufficient permissions on that object, and calling http://download.java.net/java/jdk9/docs/api/java/lang/invoke/MethodHandles.Lookup.html#defineClass-byte:A-

## Warnings during tests execution

Executing our test suite yields illegal reflective accesses, again in `JavaBytecodeAdapterGenerator`:

```
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.golo.runtime.adapters.JavaBytecodeAdapterGenerator (file:/Users/jponge/Code/golo-lang/build/classes/java/main/) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
WARNING: Please consider reporting this to the maintainers of org.eclipse.golo.runtime.adapters.JavaBytecodeAdapterGenerator
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
```

Fixing the above compilation warning should hopefully be the cure.

## Failed test

Surprisingly there is only 1 test that fails: `org.eclipse.golo.compiler.CompileAndRunTest.test_method_closures`.

The stacktrace reveals an issue when calling a method on a proxy:

```
java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.golo.compiler.CompileAndRunTest.test_method_closures(CompileAndRunTest.java:928)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy1.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:119)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:844)
Caused by: java.lang.NoSuchMethodError: class com.sun.proxy.jdk.proxy2.$Proxy19::actionPerformed
	at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:270)
	at golotest.execution.Closures.as_explicit_interface(closures.golo:43)
	... 55 more
```

The exception is thrown in:

```golo
function as_explicit_interface = {
  let array = array[""boo""]
  let handler = |event| {
    array: set(0, event: getSource() + "" -> "" + event: getActionCommand())
  }
  let listener = asInterfaceInstance(ActionListener.class, handler)
  listener: actionPerformed(ActionEvent(""Plop"", 666, ""da plop""))
  return array: get(0)
}
```

on the `listener: actionPerformed(ActionEvent(""Plop"", 666, ""da plop""))` invocation.

`asInterfaceInstance` is defined in `Predefined` and is a straightforward delegate:

```java
public static Object asInterfaceInstance(Object interfaceClass, Object target) {
    require(interfaceClass instanceof Class, ""interfaceClass must be a Class"");
    require(target instanceof FunctionReference, ""target must be a FunctionReference"");
    return MethodHandleProxies.asInterfaceInstance((Class<?>) interfaceClass, ((FunctionReference) target).handle());
  }
```

I am puzzled on why the returned proxy object does not respond to the method...

I quickly tried implementing another single method interface using a Golo closure (Supplier<T>) but even here:

1. the proxy object is created,
2. calling the method does not work,
3. reflection does not work either.

## Running samples

Running samples in `samples/` gives other pointers to issues.

I tried a few of them...

### Coin sample

```
golo golo --files coin-change.golo 
Coins: [1, 2, 5, 10, 20]
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.golo.runtime.RegularMethodFinder (file:/usr/local/Cellar/golo/3.2.0/libexec/lib/golo-3.2.0.jar) to method java.util.LinkedList$ListItr.hasNext()
WARNING: Please consider reporting this to the maintainers of org.eclipse.golo.runtime.RegularMethodFinder
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
0: 1
1: 1
2: 2
10: 11
12: 15
6: 5
```

Again, reflection access problems.

### Decorators

Same issue:

```
golo golo --files decorators.golo 
42
42
number of params : 0
42
number of params : 1
42
number of params : 2
42
number of params : 3
42
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.golo.runtime.RegularMethodFinder (file:/usr/local/Cellar/golo/3.2.0/libexec/lib/golo-3.2.0.jar) to method java.util.LinkedList$ListItr.hasNext()
WARNING: Please consider reporting this to the maintainers of org.eclipse.golo.runtime.RegularMethodFinder
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
42
```

### Http server

It seems like the Sun-internal classes have changed. Perhaps we should get rid of this sample:

```
$ golo golo --files http-server.golo 
>>> http://localhost:8081/
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.eclipse.golo.runtime.RegularMethodFinder (file:/usr/local/Cellar/golo/3.2.0/libexec/lib/golo-3.2.0.jar) to method sun.net.httpserver.HttpExchangeImpl.getResponseHeaders()
WARNING: Please consider reporting this to the maintainers of org.eclipse.golo.runtime.RegularMethodFinder
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
Exception in thread ""HTTP-Dispatcher"" java.lang.NoSuchMethodError: class sun.net.httpserver.HttpExchangeImpl::sendResponseHeaders
	at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:270)
	at samples.WebServer.__$$_sugar_closure_0(http-server.golo:30)
	at java.base/java.lang.invoke.MethodHandleProxies$1.invoke(MethodHandleProxies.java:189)
	at jdk.proxy1/com.sun.proxy.jdk.proxy1.$Proxy5.handle(Unknown Source)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77)
	at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:80)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:685)
	at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:77)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:657)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:159)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:440)
	at jdk.httpserver/sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:405)
	at java.base/java.lang.Thread.run(Thread.java:844)
```

### Dynamic evaluation

Works!

```
golo golo --files dynamic-evaluation.golo 
>>> asModule()
a!
b!
>>> anonymousModule()
a.
b.
>>> asFunction
60
>>> def
60
>>> run
w00t
w00t
w00t
>>> run_map
1
2
```

### Async calls

Works, but gets stuck because an executor is still up and running:

```
golo golo --files async.golo 
Let's do some useless asynchronous operations...
>>> #fail -> java.util.concurrent.CancellationException
>>> (same thread) truth=42
>>> (another thread) truth=42
>>> #ok -> 666
>>> Fibs: [55, 6765, 832040, 102334155]
Bye!
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/504/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/508,https://api.github.com/repos/eclipse-archived/golo-lang/issues/508,golo-lang,275054685,508,"Future: get() with (long timeout, TimeUnit unit)",k33g,491848,Philippe Charrière,ph.charriere@gmail.com,OPEN,2017-11-18T05:18:31Z,2017-11-18T05:18:31Z,"Hello 🌍

- `gololang.concurrent.async.Future` has not a `get` method to handle a timeout
- so `gololang.concurrent.async.AssignedFuture` does not implement this method

What I'm doing instead:

```golo
  let concurrentTask = |task, timeout| {
    let executor = Executors.newSingleThreadExecutor()
    return trying({
      let future = executor: submit(asInterfaceInstance(java.util.concurrent.Callable.class, {
        return task()
      }))
      let res = future: get(timeout, MILLISECONDS())
      executor: shutdown()
      return res
    })
  }

  concurrentTask({
    sleep(2000_L)
    return ""Hello 🌍""
  }, 1000_L)
  : either(
    recover=|error| {
      println(""😡"")
    },
    mapping=|result| {
      println(result)
    }
  )
```

","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/508/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,golo-lang,275063572,509,NullPointerException with gololang.EvaluationEnvironment() when `\n` before the closure,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2017-11-18T08:26:22Z,2020-10-16T05:18:44Z,"### first

```golo
let source = """"""# hello
|param| -> 40 + param
""""""

function main = |args| {
  println(gololang.EvaluationEnvironment(): def(source)(2))
}
```

> it displays 42

### now ...

- I add a `\n`
- I add an other comment

```golo
let source = """"""# hello

# an other comment
|param| -> 40 + param
""""""

function main = |args| {
  println(gololang.EvaluationEnvironment(): def(source)(2))
}
```

I get an exception:

```
Exception in thread ""main"" java.lang.NullPointerException
        at org.eclipse.golo.runtime.ClosureCallSupport.fallback(ClosureCallSupport.java:84)
        at sandbox.main(sandbox.golo:11)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:57)
        at org.eclipse.golo.cli.Main.main(Main.java:69)
```

if I remove the blank line, I keep the exception

```golo
let source = """"""# hello
# an other comment
|param| -> 40 + param
""""""

function main = |args| {
  println(gololang.EvaluationEnvironment(): def(source)(2))
}
```

```
Exception in thread ""main"" java.lang.NullPointerException
        at org.eclipse.golo.runtime.ClosureCallSupport.fallback(ClosureCallSupport.java:84)
        at sandbox.main(sandbox.golo:10)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:57)
        at org.eclipse.golo.cli.Main.main(Main.java:69)
```


","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/509/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQyOTQwOA==,golo-lang,345429408,509,NA,artpej,693299,Sylvain Desgrais,,NA,2017-11-18T09:10:59Z,2017-11-18T09:10:59Z,"It seems to be a parser issue:

```golo
module test

function main = |args| {
  println(response(2))
}

function response = |param| {
  return #test
  # a comment
  40 + param
}
```
prints `null`

```golo
module test

function main = |args| {
  println(response(2))
}

function response = |param| {
  return #test
  40 + param
}
```
works as expected...

@k33g  I can have a look if you want...","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQyOTQwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMDYwNA==,golo-lang,345430604,509,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-11-18T09:35:37Z,2017-11-18T09:35:37Z,"Incredible, we managed to have a JS semicolon bug without having semicolon in the grammar! 😂","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMDYwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMDc1MA==,golo-lang,345430750,509,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-11-18T09:38:37Z,2017-11-18T09:38:37Z,"More seriously, I'm not sure of what should be the correct behavior here. I'd say that the ""correct"" code is a bug, since without parens/braces/... the comment should end the expression.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMDc1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTE5Mw==,golo-lang,345431193,509,NA,artpej,693299,Sylvain Desgrais,,NA,2017-11-18T09:48:49Z,2017-11-18T09:48:49Z,PR just landed : #510 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTE5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTc4NQ==,golo-lang,345431785,509,NA,artpej,693299,Sylvain Desgrais,,NA,2017-11-18T10:00:03Z,2017-11-18T10:00:03Z,"> the comment should end the expression

the more @yloiseau is older, the more picky he become :wink: 

Happy birthday mate! :tada: :cake: :clinking_glasses: ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTc4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTg2NA==,golo-lang,345431864,509,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2017-11-18T10:01:44Z,2017-11-18T10:01:44Z,🎂  @yloiseau ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQzMTg2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQ1Njk5Ng==,golo-lang,345456996,509,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2017-11-18T17:25:14Z,2017-11-18T17:25:14Z,Thanks guys,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTQ1Njk5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTg0NzY0Mg==,golo-lang,345847642,509,NA,jponge,25961,Julien Ponge,,NA,2017-11-20T22:07:08Z,2017-11-20T22:07:08Z,Oh happy birthday @yloiseau !!!,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTg0NzY0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/509,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTg0NzcxNQ==,golo-lang,345847715,509,NA,jponge,25961,Julien Ponge,,NA,2017-11-20T22:07:28Z,2017-11-20T22:07:28Z,"(rewind time 2 days ago)
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NTg0NzcxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/511,https://api.github.com/repos/eclipse-archived/golo-lang/issues/511,golo-lang,278255223,511,Upgrading to the EPLv2,jponge,25961,Julien Ponge,,CLOSED,2017-11-30T20:15:48Z,2018-01-05T14:35:11Z,"This issue is to reflect that Golo will switch to the newer Eclipse License: https://www.eclipse.org/org/documents/epl-2.0/faq.php

Committers can give feedback here 😃 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/511/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,golo-lang,288330702,513,this simple program does not work,NIJAVA,3595750,,,CLOSED,2018-01-13T13:52:40Z,2018-03-09T05:56:13Z,"```golo
module teste.WebServer

import java.lang
import java.net.InetSocketAddress
import com.sun.net.httpserver.HttpServer

function main = |args| {

  let server = HttpServer.create(InetSocketAddress(""localhost"", 8081), 0)
	let handler1 = |exchange| {
    let response = ""bem vindo""
    exchange: getResponseHeaders(): set(""Content-Type"", ""text/plain"")
		println(response: length())
    exchange: sendResponseHeaders(200, response: length())
    exchange: getResponseBody(): write(response: getBytes())
    exchange: close()
  }
  server: createContext(""/"", handler1)
	let handler2 = |exchange| {
	 let response = ""tchau""
    exchange: getResponseHeaders(): set(""Content-Type"", ""text/plain"")
    exchange: sendResponseHeaders(200, response: length())
    exchange: getResponseBody(): write(response: getBytes())
    exchange: close()
    server: stop(5)
  }
  server: createContext(""/shut"", handler2)
  
  server: start()
  println(""> http://localhost:8081/"")
}
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/513/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQzNzI2Nw==,golo-lang,357437267,513,NA,NIJAVA,3595750,,,NA,2018-01-13T13:56:07Z,2018-01-13T13:56:07Z,the same program in groovy works fine,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQzNzI2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQzNzgwOQ==,golo-lang,357437809,513,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-01-13T14:03:29Z,2018-01-13T14:03:29Z,"Could you at least provide some information on failure, like a stack trace, expected result vs. observed behavior and so on...","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQzNzgwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ0OTI2OQ==,golo-lang,357449269,513,NA,NIJAVA,3595750,,,NA,2018-01-13T16:53:21Z,2018-01-13T16:53:21Z,"9
Exception in thread ""Thread-2"" java.lang.NoSuchMethodError: class sun.net.httpserver.HttpExchangeImpl::sendResponseHeade
rs
        at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:271)
        at teste.WebServer.__$$_sugar_closure_0(httpgolo.golo:14)
        at java.lang.invoke.MethodHandleProxies$1.invoke(MethodHandleProxies.java:187)
        at com.sun.proxy.$Proxy5.handle(Unknown Source)
        at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79)
        at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83)
        at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82)
        at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:675)
        at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79)
        at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:647)
        at sun.net.httpserver.ServerImpl$DefaultExecutor.execute(ServerImpl.java:158)
        at sun.net.httpserver.ServerImpl$Dispatcher.handle(ServerImpl.java:431)
        at sun.net.httpserver.ServerImpl$Dispatcher.run(ServerImpl.java:396)
        at java.lang.Thread.run(Thread.java:748)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ0OTI2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ1ODU2MQ==,golo-lang,357458561,513,NA,artpej,693299,Sylvain Desgrais,,NA,2018-01-13T19:09:02Z,2018-01-13T19:09:02Z,"just change that:
```golo
exchange: sendResponseHeaders(200, response: length())
```
by this:
```golo
exchange: sendResponseHeaders(intValue(200), response: length())
```
in Golo unboxing is explicit : http://golo-lang.org/documentation/next/#_number_type_conversions","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ1ODU2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2MTQzNw==,golo-lang,357461437,513,NA,NIJAVA,3595750,,,NA,2018-01-13T19:55:22Z,2018-01-13T19:55:22Z,"hei Artpej, your  hint  do not work too:    same error reported.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2MTQzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2Mjk3MQ==,golo-lang,357462971,513,NA,artpej,693299,Sylvain Desgrais,,NA,2018-01-13T20:04:18Z,2018-01-13T20:04:18Z,"Add `longValue()` on `response: length()` too .

Sorry for not be more precise but it is not easy to type with a phone :wink:","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2Mjk3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NDgyOQ==,golo-lang,357464829,513,NA,NIJAVA,3595750,,,NA,2018-01-13T20:25:18Z,2018-01-13T20:25:18Z,"ok, thanks Artpeg,  now  it worked,  but then golo does not integrate wel with java,  groovy does  not need such explicit conversions.  
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NDgyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NTAwMA==,golo-lang,357465000,513,NA,NIJAVA,3595750,,,NA,2018-01-13T20:27:55Z,2018-01-13T20:27:55Z,"intValue(200)  was not necessary,  only longValue()  needed.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NTAwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NTI4OQ==,golo-lang,357465289,513,NA,NIJAVA,3595750,,,NA,2018-01-13T20:33:25Z,2018-01-13T20:33:25Z,golo  samples has a file  http-server.golo  that do not have those conversions.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ2NTI4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ5NzYwMw==,golo-lang,357497603,513,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-01-14T08:58:53Z,2018-01-14T08:58:53Z,"It's not an unboxing error, but an implicit upcast one. The method expects a `long` but an `int` (thus an `Integer`) is given. The code in the `samples` used to work, but it's indeed no more the case since the big method resolution refactoring.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzQ5NzYwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzUwNDE1NQ==,golo-lang,357504155,513,NA,NIJAVA,3595750,,,NA,2018-01-14T11:10:19Z,2018-01-14T11:10:19Z,"The module http-server in samples don't work too,  the necessity of  explicit method parammeters conversions means golo does not seamless integrate with java code as groovy does.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzUwNDE1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzUzODc2MA==,golo-lang,357538760,513,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-01-14T20:14:26Z,2018-01-14T20:14:26Z,"No, it means that we have a regression... ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzUzODc2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/513,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzU0MzEzNQ==,golo-lang,357543135,513,NA,NIJAVA,3595750,,,NA,2018-01-14T21:16:10Z,2018-01-14T21:16:10Z,"Then  it needs a  re-evolution,  golo is a beautiful  engineered little language.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NzU0MzEzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/520,https://api.github.com/repos/eclipse-archived/golo-lang/issues/520,golo-lang,305569850,520,Package visible java constructor or method not accessible,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2018-03-15T14:14:48Z,2018-03-15T14:23:34Z,"Given the Java class
```java
package net.yloiseau.tools;

public class A {
  private final int answer;

  A(int v) { this.answer = v; }

  public static A of(int v) { return new A(v); }

  public int answer() { return this.answer; }

  String meth() { return ""A.meth""; }

  static String fun() { return ""A.fun""; }
}
```
and the golo module 
```golo
module net.yloiseau.tools.Main

function createA = |v| -> net.yloiseau.tools.A(v)
function callFun = -> net.yloiseau.tools.A.fun()
function callMeth = -> net.yloiseau.tools.A.of(42): meth()
```

All functions should be OK, since the module and the java class are in the same package. Indeed, in
```golo
module Main

import net.yloiseau.tools

function main = |args| {
  println(Main.callFun())
  println(Main.createA(42): answer())
  println(Main.callMeth())
}
```
the first print that call a static function works just fine. However, both the function calling the constructor `createA` or the method `callMeth` fail with a `NoSuchMethodError`. Making the `A` constructor or `meth` method public works as expected.

Since the generated class representing the module, and thus the `createA` and `callMeth` methods are in the same package as the `A` class, the method should be found.

Sample files here: https://github.com/yloiseau/golo-tests/tree/master/BUGS/520-package-visibility","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/520/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/522,https://api.github.com/repos/eclipse-archived/golo-lang/issues/522,golo-lang,311771211,522,"Sample ""samples/workers.golo"" does not exit",vvdleun,22765050,Vincent van der Leun,,CLOSED,2018-04-05T21:12:58Z,2018-04-06T09:11:05Z,"Hello,

The sample in ""samples/workers.golo"" does not exit, it keeps running till Doomsday (well, luckily CTRL+C will do as well ;) ...).

The same goes for the example in the documentation, http://golo-lang.org/documentation/3.2.0/index.html#_a_complete_and_useless_example , which I believe is the same program.

I have experimented with simpler code experiments, and those had the same behavior, so FWIW I'm pretty sure the issue is within the gololang.concurrent.workers.WorkerEnvironment class.

Tested with Golo 3.2.0 on Windows 10.

Kind regards, Vincent","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/522/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/522,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTE5NDU1NQ==,golo-lang,379194555,522,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-04-06T09:07:41Z,2018-04-06T09:07:41Z,"This is due to #471 that was fixed in #489 :smile:

Due to the improper “magic” property method resolution order, the `isShutdown` method was call instead of `shutdown`…","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTE5NDU1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/522,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTE5NTQwMg==,golo-lang,379195402,522,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2018-04-06T09:11:05Z,2018-04-06T09:11:05Z,"I started a 3.2.1 branch, but did not back port all the fixes from the 3.3 branch… If anyone wants to backport major fixes from 3.3 into 3.2.1 maybe we could/should make a 3.2.1 release? ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM3OTE5NTQwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/524,https://api.github.com/repos/eclipse-archived/golo-lang/issues/524,golo-lang,312028297,524,Destructuring is unsound,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2018-04-06T15:54:00Z,2020-10-20T12:19:47Z,"I think destructuring as currently implemented is unsound, and could be improved.

Reminder: the current destructuring implementation is such that the following code:
```golo
let a, b = obj1
let c, d, e... = obj2
```
is converted into
```golo
let __$$_sugar_destruct_0 = obj1: destruct()
let a = __$$_sugar_destruct_0: get(0)
let b = __$$_sugar_destruct_0: get(1)

let __$$_sugar_destruct_1 = obj2: destruct()
let c = __$$_sugar_destruct_1: get(0)
let d = __$$_sugar_destruct_1: get(1)
let e = __$$_sugar_destruct_1: subTuple(2)
```

Any destructurable object must thus have a `destruct` method returning a *tuple* containing the value to *possibly* assign. 

For product types (`struct`s, tuples, etc.) this is fine. But for recursive types (e.g. lists), both current semantic and implementation can be improved. Indeed, given
```golo
let a, b, c... = list[1, 2, 3, 4, 5, 6]
```
we can expect that
```golo
a == 1
b == 2
c == list[3, 4, 5, 6]
```
but with the current implementation, we have `c == tuple[3, 4, 5, 6]`. With an iterator, `c` should be an iterator on remaining elements, and not a tuple. If the structure is a big or even infinite lazy container, the creation of the intermediate tuple is just the wrong approach. For instance, lazy lists destruct as `[head(), tail()]` to prevent this issue. Therefore one can't destruct a lazy list as
```golo
let first, second, rest... = myLazyList
```
which is very limiting. On the other hand, ranges create the full tuple, so in
```golo
let a, b, c... = range(10_000)
```
`c` contains a tuple of 9,998 elements!

The current destructuring protocol is very simple, but also limiting, since the destrutured object does not know how it will be destructured. The control should be given to the type itself, to adapt the returned representation according to how it is destructured, and maybe to check for exhaustive destructuration, like:
```golo
let a, b = [1, 2, 3]
```
should fail since we don't give the right number of target values (as Python does).

The solution I consider would be to desugarize
```golo
let a, b = obj1
let c, d, e... = obj2
```
into
```golo
let __$$_sugar_destruct_0 = obj1: destruct(2, false)
let a = __$$_sugar_destruct_0: get(0)
let b = __$$_sugar_destruct_0: get(1)

let __$$_sugar_destruct_1 = obj2: destruct(3, true)
let c = __$$_sugar_destruct_1: get(0)
let d = __$$_sugar_destruct_1: get(1)
let e = __$$_sugar_destruct_1: get(2)
```

where `destruct(number, varargs)` returns an *array* (to avoid the tuple creation cost) of the right size. Maybe even name it `__$$_destruct(number, vararg)` to make clear that it's an internal special method and avoid clashes with maybe existing java methods.

For instance, for an iterator we would have:
```golo
augment java.util.Iterator {
  function destruct = |this, number, varargs| {
    if number == 1 {
      return this
    }
    if not varargs {
      throw IllegalArgumentException(""Iterators must be destructured with varargs"")
    }
    let a = newTypedArray(Object.class, number)
    for (var i = 0, i < number - 1, i = i + 1) {
      a: set(i, this: next())
    }
    a: set(number - 1, this)
    return a
  }
}
```
and for a *finite* list:
```golo
augment java.util.List {
  function destruct = |this, number, varargs| {
    if number < this: size() and not varargs {
      throw IllegalArgumentException(""Too many values to destructure"")
    }
    if (number > this: size() and not varargs) or (number > this: size() + 1) {
      throw IllegalArgumentException(""Need more than "" + this: size() + "" values"")
    }
    let a = newTypedArray(Object.class, number)
    for (var i = 0, i < number - 1, i = i + 1) {
      a: set(i, this: get(i))
    }
    if varargs {
      if number == this: size() {
        a: set(number - 1, Collections.emptyList())
      } else {
        a: set(number - 1, this: subList(number - 1, this: size()))
      }
    } else {
      a: set(number - 1, this: get(number - 1)
    }
    return a
  }
}
```
such that
```golo
let a, b, c = list[1, 2, 3]    # a = 1, b = 2, c = 3
let a, b... = list[1, 2, 3]    # a = 1, b = list[2, 3]
let a, b, c... = list[1, 2, 3] # a = 1, b = 2, c = list[3]
let a, b = list[1, 2, 3]       # fails
let a, b, c, d = list[1, 2, 3] # fails
let a, b, c, d... = list[1, 2, 3]  # a = 1, b = 2, c = 3, d = list[]
```

We could introduce a ""void"" variable (e.g. `_`) to not be used into the destructuration. For instance:
```golo
let a, b, _... = list[1, 2, 3, 4, 5, 6, 7] # a = 1, b = 2, the sublist is not affected
```

This new protocol is way more powerful since it gives control to the value being destructured.
However, it's not yet clear how such a change would be breaking backward compatibility. Breakage can be due to:

- code calling the `destruct()` method directly to have a tuple representation of the object
- existing java classes or augmentation providing the `destruct()` method to custom types.

In the first case, we can keep the existing `destruct()` methods and provide an augmentation for future types to create the tuple representation from the `destruct(n, v)` method., together with deprecating the use of `destruct()` in such cases.

In the second case, we can provide an augmentation providing a default implementation for `destruct(n, v)` based on `destruct()`. Another solution is to make the kind of desugaring a compilation option (property, macro...) to make compiling old code possible without changing it (this is btw an interesting aspect I will try to develop elsewhere: macro configuring some compilation options locally).


","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/524/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/532,https://api.github.com/repos/eclipse-archived/golo-lang/issues/532,golo-lang,334682984,532,Arrays within Arrays not parsed properly when converting Json to Dynamic Object,gcameo,450487,farouk.alhassan,,OPEN,2018-06-21T22:41:55Z,2018-06-22T23:32:01Z,"Given this json

      {
        ""id"": ""customerContacts"",
        ""value"": [[""east"",""west""],[""north"",""south""]]
      }

The following code returns empty value for the value()

let dyno = JSON.toDynamicObjectFromJSONString( str )

dyno:value()

I looks like in parse method in the JSON module, an array within an array is not catered for.

The attached trimmed version fixes it but it doesn't cater for infinite nesting of arrays. Please review
[json.golo.zip](https://github.com/eclipse/golo-lang/files/2125583/json.golo.zip)","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/532/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/532,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTU4NTg0Ng==,golo-lang,399585846,532,NA,jponge,25961,Julien Ponge,,NA,2018-06-22T21:22:30Z,2018-06-22T21:22:30Z,Can you please open a pull-request rather than posting a zip archive?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTU4NTg0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/532,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTYwOTU5Mg==,golo-lang,399609592,532,NA,gcameo,450487,farouk.alhassan,,NA,2018-06-22T23:32:01Z,2018-06-22T23:32:01Z,Sure. Can do that. no probs,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTYwOTU5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/535,https://api.github.com/repos/eclipse-archived/golo-lang/issues/535,golo-lang,418453767,535,reading line from file and converting to tuple,efrat498,48330889,Efrat Shabtay,,CLOSED,2019-03-07T18:33:04Z,2020-04-20T22:44:47Z,,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/535/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/535,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDg1Nzc1OQ==,golo-lang,470857759,535,NA,jponge,25961,Julien Ponge,,NA,2019-03-08T09:09:13Z,2019-03-08T09:09:13Z,"You can use `IO.fileToText(""file"", ""UTF8"")` then do a standard Java `String::split` to get an array.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDg1Nzc1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/536,https://api.github.com/repos/eclipse-archived/golo-lang/issues/536,golo-lang,421041504,536,java.lang.NullPointerException,efrat498,48330889,Efrat Shabtay,,CLOSED,2019-03-14T14:12:24Z,2019-09-28T12:54:37Z,"hi
i'm trying to get the name of file from a directory (in this case my desktop) but it throws  ""Exception in thread ""main"" java.lang.NullPointerException"" but i have files in my desktop why it thinks the list in that index is null?
That is my code:
module mypage
import java.io.File
import java.lang.String
import java.util
function main = |args| {
    let file = File(""C:/Users/batsheva/Desktop"", ""UTF-8"")
    let listOfFiles = file: list()
    let nameF = listOfFiles(): get(1)
}
the first two lines are working","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/536/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/536,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzMxNDMyNw==,golo-lang,473314327,536,NA,jponge,25961,Julien Ponge,,NA,2019-03-15T14:46:42Z,2019-03-15T14:46:42Z,You should post the full stack trace.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzMxNDMyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/536,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE4NzQ1OA==,golo-lang,536187458,536,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2019-09-28T12:54:36Z,2019-09-28T12:54:36Z,"`listOfFiles` is not a function, thus should not be followed by `()`, but the raised exception imply that `file` is null. According to the [javadoc](https://docs.oracle.com/javase/8/docs/api/java/io/File.html#list--)

>  Returns null if this abstract pathname does not denote a directory

This is not a golo bug.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE4NzQ1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/539,https://api.github.com/repos/eclipse-archived/golo-lang/issues/539,golo-lang,499755218,539,Variable Fix Issue,soumyadip007,37873518,Soumyadip Chowdhury,soumyadip.note@gmail.com,OPEN,2019-09-28T10:36:54Z,2019-09-28T12:45:47Z,Getting Issue while closing the variables.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/539/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/539,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE4NjU3OA==,golo-lang,536186578,539,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2019-09-28T12:45:47Z,2019-09-28T12:45:47Z,Could you be more precise?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE4NjU3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/541,https://api.github.com/repos/eclipse-archived/golo-lang/issues/541,golo-lang,685225830,541,Document the release requirements and process,jponge,25961,Julien Ponge,,OPEN,2020-08-25T06:50:59Z,2021-10-19T21:48:56Z,"Document how to cut a release, upload artefacts to Maven Central, update the website, etc.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/541/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/542,https://api.github.com/repos/eclipse-archived/golo-lang/issues/542,golo-lang,685227023,542,Upgrade to Gradle 6,jponge,25961,Julien Ponge,,CLOSED,2020-08-25T06:53:05Z,2020-09-04T13:53:10Z,"Golo is using an old version of Gradle. The upgrade to Gradle 6 is not straightforward, but we may benefit from doing so. We may also benefit from moving to the Kotlin DSL over the error-prone Groovy one.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/542/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/543,https://api.github.com/repos/eclipse-archived/golo-lang/issues/543,golo-lang,685230044,543,Upgrade some dependencies,jponge,25961,Julien Ponge,,CLOSED,2020-08-25T06:58:46Z,2020-09-04T15:44:54Z,Seek and upgrade some of the project dependencies where it makes sense.,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/543/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/543,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM3Njk2MA==,golo-lang,682376960,543,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T07:34:43Z,2020-08-28T07:34:43Z,#545 has it,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM3Njk2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/543,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQzMzQyOA==,golo-lang,682433428,543,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2020-08-28T09:43:41Z,2020-08-28T09:43:41Z,so we close the PR and integrate upgrades in #545 ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQzMzQyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/543,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQzMzk3OA==,golo-lang,682433978,543,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2020-08-28T09:45:04Z,2020-08-28T09:45:04Z,oops wanted to close the PR,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQzMzk3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/546,https://api.github.com/repos/eclipse-archived/golo-lang/issues/546,golo-lang,687875691,546,Upload distributions to GitHub releases,jponge,25961,Julien Ponge,,OPEN,2020-08-28T07:37:32Z,2020-09-04T16:17:33Z,"- [x] Check if we can use CI to deploy the latest build as a distribution
- [x] Releases should be uploaded manually so we can craft a release with proper release notes, etc.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/546/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/546,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQxOTgwOA==,golo-lang,682419808,546,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T09:12:12Z,2020-08-28T09:12:12Z,"I've added workflow steps to upload a distribution as a workflow artifact on every build, then a nightly cleanup action to remove those older than 14 days.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQxOTgwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/546,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQyMDQ1OQ==,golo-lang,682420459,546,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T09:13:37Z,2020-08-28T09:13:37Z,"Note I need to contact Eclipse because I cannot set secrets for CI, etc.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjQyMDQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,golo-lang,687881583,547,"Create ""Ready to use"" built-in modules:",jponge,25961,Julien Ponge,,OPEN,2020-08-28T07:48:16Z,2021-04-18T11:20:06Z,"- http/https  (Java 11?)
- Actors
- ...","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/547/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4Mjg5Nw==,golo-lang,682382897,547,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T07:49:47Z,2020-08-28T07:49:47Z,"@k33g note that Golo will not be ready for Java 11, so no HTTP client.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4Mjg5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4NTQ0MQ==,golo-lang,682385441,547,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2020-08-28T07:55:54Z,2020-08-28T07:55:54Z,@jponge never ready for Java 11?,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4NTQ0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4OTU2Nw==,golo-lang,682389567,547,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T08:05:39Z,2020-08-28T08:05:39Z,"We don't pass all tests, we get illegal reflective access warnings, etc see #504 ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM4OTU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM5MDY4Mw==,golo-lang,682390683,547,NA,jponge,25961,Julien Ponge,,NA,2020-08-28T08:08:16Z,2020-08-28T08:08:16Z,"I mean, realistically most of the code works with the possible occasional warning on Java 11, but we have to stick with Java 8 until we can fix the breaking changes in Java 9+","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MjM5MDY4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/547,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDgyMTk3NTY3NA==,golo-lang,821975674,547,NA,gcameo,450487,farouk.alhassan,,NA,2021-04-18T11:20:06Z,2021-04-18T11:20:06Z,This is blocking Golo completely from being used in Java 16,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDgyMTk3NTY3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/548,https://api.github.com/repos/eclipse-archived/golo-lang/issues/548,golo-lang,687883387,548,Write tutorials,jponge,25961,Julien Ponge,,OPEN,2020-08-28T07:51:37Z,2021-10-19T22:24:51Z,"- [x] Building Golo
- [x] First steps (quick start) - modules, functions, variables, control flow ...
- [ ] Collections of data fields (Struct,  Dynamic Objects)
- [ ] Collections
- [ ] Functional errors
- [ ] Golo and Java
- ...","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/548/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/548,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch844dGGW,golo-lang,947151254,548,NA,kelcecil,373621,Kel Cecil,kelcecil@praisechaos.com,NA,2021-10-19T22:24:51Z,2021-10-19T22:24:51Z,Apologies for the accidental issue edit. I was browsing the issues on mobile and accidentally checked an item on the checklist when scrolling down the page. ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch844dGGW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/549,https://api.github.com/repos/eclipse-archived/golo-lang/issues/549,golo-lang,687883522,549,"Add new ""Functional helpers""",jponge,25961,Julien Ponge,,OPEN,2020-08-28T07:51:51Z,2020-11-18T05:43:03Z, like Validation (in a simple way: see https://github.com/scala-hamsters/hamsters/blob/3.1.0/docs/validation.md),"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/549/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/550,https://api.github.com/repos/eclipse-archived/golo-lang/issues/550,golo-lang,693318347,550,Build the Maven plugin from Gradle again,jponge,25961,Julien Ponge,,OPEN,2020-09-04T15:44:33Z,2021-10-19T21:48:56Z,,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/550/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/552,https://api.github.com/repos/eclipse-archived/golo-lang/issues/552,golo-lang,711156407,552,Nested documentation strings,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2020-09-29T14:16:49Z,2020-10-10T05:34:06Z,"It is not currently possible to use documentation strings in code samples in documentation strings...

for instance:
```golo
----
This is the documentation of the `foo` function

Usage example:

    ```
    ----
    This is a sample main function
    ----
    function main = {
        foo()
    }
    ```

In this example, we call `foo` in a `main` function
----
function foo = -> null
```

The golo parser makes an error on ""This"".","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/552/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/552,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMTMxNjk4OA==,golo-lang,701316988,552,NA,jponge,25961,Julien Ponge,,NA,2020-09-30T10:56:21Z,2020-09-30T10:56:21Z,"Inception 🤣 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMTMxNjk4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/557,https://api.github.com/repos/eclipse-archived/golo-lang/issues/557,golo-lang,718537806,557,Nested try block,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2020-10-10T05:31:29Z,2020-10-13T07:49:22Z,"When nesting `try` blocks, we can't `try...catch` in the `finally` clause. 
Given 
```golo
  try {
    println(""try"")
  } finally {
    try {
      println(""finally"")
    } catch(e) {
      println(""in catch"")
    }
  }
```
compilation is OK, but execution fails with
```
java.lang.VerifyError: Instruction type does not match stack map
```
that seems to indicate an error in the generated bytecode.

Other combination of nesting seems OK.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/557/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/563,https://api.github.com/repos/eclipse-archived/golo-lang/issues/563,golo-lang,727994225,563,jbang integration,jponge,25961,Julien Ponge,,OPEN,2020-10-23T07:45:57Z,2020-10-23T07:47:30Z,"Golo offers scripting / shebang support, and resolves other Golo modules and jar dependencies by scanning the filesystem.

Another (complementary) approach would be to offer [jbang](https://www.jbang.dev) integration so that we could specify dependencies in Golo files, like this non-prescriptive example:

```golo
# DEPS io.vertx:core:3.9.4
module hello

import io.vertx.core.Vertx

function main = |args| {
  let vertx = Vertx()
  vertx: setPeriodic(1000L, |tick| -> println(""tick""))
}
```

Wether this should be done by contributing to jbang or providing some helper (...jbang script? catalog?) on the Golo side remains to be investigated.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/563/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/563,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcxNTA5ODI4MQ==,golo-lang,715098281,563,NA,jponge,25961,Julien Ponge,,NA,2020-10-23T07:47:05Z,2020-10-23T07:47:05Z,/cc @maxandersen FYI,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcxNTA5ODI4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/568,https://api.github.com/repos/eclipse-archived/golo-lang/issues/568,golo-lang,735935457,568,return in try skip finally,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,CLOSED,2020-11-04T09:00:28Z,2020-11-19T11:59:32Z,"When using a `return` in a `try` clause, the `finally` clause in not executed.

For instance,
```golo
module Test

function test = {
  try {
    return 42
  } finally {
    print(""The answer is "")
  }
}

function main = |args| {
  println(test())
}
```
should print:
```
The answer is 42
```
but only prints
```
42
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/568/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/571,https://api.github.com/repos/eclipse-archived/golo-lang/issues/571,golo-lang,743067901,571,Not possible to implement a java.util.Comparator with AdapterFabric,vvdleun,22765050,Vincent van der Leun,,OPEN,2020-11-14T19:49:59Z,2020-11-17T12:28:21Z,"Hello,

This could be classified as simply ""works as designed"", but wanted to submit it nevertheless:

This code compiles in Golo 3.3.0....

```golo
module demo

function main = |args| {
	let conf = map[
		[""interfaces"", [""java.util.Comparator""]],
		[""implements"", map[
			[""compare"", |this, o1, o2| -> Integer.compare(o1: size(), o2: size())]
		]]
	]

	let foo = list[[1], [1, 2, 3], [1, 2]]
		
	Collections.sort(foo, AdapterFabric(): maker(conf): newInstance())
} 
```

...but when running, it throws the exception:

```
Exception in thread ""main"" org.eclipse.golo.runtime.adapters.AdapterDefinitionProblem: There is no implementation or override for: public abstract boolean java.util.Comparator.equals(j
ava.lang.Object)
        at org.eclipse.golo.runtime.adapters.AdapterDefinition.checkMethodsToBeImplemented(AdapterDefinition.java:181)
        at org.eclipse.golo.runtime.adapters.AdapterDefinition.validate(AdapterDefinition.java:91)
        at gololang.AdapterFabric.maker(AdapterFabric.java:158)
        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:710)
        at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:282)
        at demo.main(bug.golo:14)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:57)
        at org.eclipse.golo.cli.Main.main(Main.java:69)
```

When adding something like: `[""equals"", |this, o| -> false]` to the `conf` `implements` map however, it throws:

```
Exception in thread ""main"" java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
        at org.eclipse.golo.runtime.adapters.JavaBytecodeAdapterGenerator.generateIntoDefinitionClassloader(JavaBytecodeAdapterGenerator.java:82)
        at gololang.AdapterFabric.maker(AdapterFabric.java:159)
        at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:710)
        at org.eclipse.golo.runtime.MethodInvocationSupport.fallback(MethodInvocationSupport.java:282)
        at demo.main(bug.golo:13)
        at org.eclipse.golo.cli.command.spi.CliCommand.callRun(CliCommand.java:39)
        at org.eclipse.golo.cli.command.GoloGoloCommand.execute(GoloGoloCommand.java:57)
        at org.eclipse.golo.cli.Main.main(Main.java:69)
Caused by: java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.eclipse.golo.runtime.adapters.JavaBytecodeAdapterGenerator.generateIntoDefinitionClassloader(JavaBytecodeAdapterGenerator.java:80)
        ... 7 more
Caused by: java.lang.ClassFormatError: Duplicate method name ""equals"" with signature ""(Ljava.lang.Object;)Z"" in class file $Golo$Adapter$0
        at java.base/java.lang.ClassLoader.defineClass1(Native Method)
        at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1016)
        at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:877)
        ... 12 more
```

PS: Very nice to see development on Golo again!","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/571/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/571,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzI3MDk5NA==,golo-lang,727270994,571,NA,vvdleun,22765050,Vincent van der Leun,,NA,2020-11-14T21:59:50Z,2020-11-14T21:59:50Z,"A workaround seems to be:

```golo
let comparator = asInterfaceInstance(java.util.Comparator.class, |o1, o2| -> Integer.compare(o1: size(), o2: size()))
Collections.sort(foo, comparator)
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzI3MDk5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/571,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzYwOTQ0Mw==,golo-lang,727609443,571,NA,jponge,25961,Julien Ponge,,NA,2020-11-15T17:52:31Z,2020-11-15T17:52:31Z,Good catch!,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzYwOTQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/571,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzYyMTc3NQ==,golo-lang,727621775,571,NA,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,NA,2020-11-15T19:17:54Z,2020-11-15T19:17:54Z,"That is what I was about to suggest: SAM classes and functional interfaces does not need an AdaptaterFabric.
(Other bugs can raise however when using asInterfaceInstance IIRC)

Le 14 novembre 2020 23:00:03 GMT+01:00, Vincent van der Leun <notifications@github.com> a écrit :
>A workaround seems to be:
>
>```
>let foo = asInterfaceInstance(java.util.Comparator.class, |o1, o2| ->
>Integer.compare(o1: size(), o2: size()))
>Collections.sort(subjects, comparator)
>```

-- 
Envoyé de mon téléphone Android avec K-9 Mail. Excusez la brièveté.
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNzYyMTc3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/572,https://api.github.com/repos/eclipse-archived/golo-lang/issues/572,golo-lang,745127783,572,Add the support of GitPod,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,CLOSED,2020-11-17T22:15:30Z,2020-11-19T15:54:46Z,"### Problem to solve 

Simplify the setup of a Golo development environment

|  | user story |
| ------ | ------ |
| who | as a developer / contributor |
| what | I want to be able to start quickly with the appropriate softwares and dependencies (1)|
| why | so I can start contributing easily with the relevant requirements |

> (1) we need Java 8 to build Golo, it would be easy to provide a Java 8 based environment without installing anything

### Proposal

We can use GitPod. There is already a GitHub integration, it's more mature and stable than Codespaces (and less vendor lock in). Just add 2 files to the repository:

- ` .gitpod.Dockerfile` defining all the elements needed (it's a Dockerfile): openjdk-8-jdk, maven, mercurial, ...
- `.gitpod.yml` a config file

### Other requirements

- [ ] Register the Golo VS Code extension (syntax highlighting) to the [Open VSX Registry](https://open-vsx.org/) (Eclipse project https://github.com/eclipse/openvsx). It's optional, but convenient

cc @jponge @yloiseau 
","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/572/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/572,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTU2MDMzNg==,golo-lang,729560336,572,NA,jponge,25961,Julien Ponge,,NA,2020-11-18T09:43:38Z,2020-11-18T09:43:38Z,Great idea,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTU2MDMzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/574,https://api.github.com/repos/eclipse-archived/golo-lang/issues/574,golo-lang,749747194,574,Make `foreach` null-safe,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2020-11-24T14:20:57Z,2020-11-24T18:06:04Z,"The `foreach` statement is just syntactic sugar which is expanded into `for` with an iterator. Therefore, if the iterable is `null`, the code fails with a `NullPointerException`.

I think it would be nice to make the loop handle `null` as an empty container.

Code such as 
```golo
foreach elt in elements {
    workWith(elt)
}
```
would be expanded in
```golo
for (let it=elements?:iterator(), it isnt null and it: hasNext(), ) {
    let elt = it: next()
    workWith(elt)
}
```","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/574/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/574,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDczMzE0NjI2MQ==,golo-lang,733146261,574,NA,jponge,25961,Julien Ponge,,NA,2020-11-24T18:06:03Z,2020-11-24T18:06:03Z,Makes sense,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/MDEyOklzc3VlQ29tbWVudDczMzE0NjI2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/576,https://api.github.com/repos/eclipse-archived/golo-lang/issues/576,golo-lang,761086340,576,Create a proxy object for ambiguous method references,yloiseau,7151021,Yannick Loiseau,me@yloiseau.net,OPEN,2020-12-10T09:55:24Z,2020-12-10T09:55:24Z,"
We can't currently fully use the function reference literal notation or the `Predefined::fun` function on an overloaded function. This feature is only usable if the overloaded version don't have the same *number* of parameters, regardless of the type.
For instance, the given code:
```golo
let f = ^java.lang.Character::toLowerCase
```
raises a `org.eclipse.golo.runtime.AmbiguousFunctionReferenceException`, since two versions exists: with a `char` argument and with an `int` one.
This limits some functional style programming aspects (e.g. HOF, point-free, etc.)
The current workaround is to use a lambda `|c| -> java.lang.Character.toLowerCase(c)`, since in that case, the resolution is done  at call time using the actual arguments. A macro could be used to create such lambda directly, but it has several drawbacks:
- more verbose to use,
- introduce overhead if not needed, and thus shouldn't be applied systematically,
- fixes the arity (this could be fixed by using a polyadic lambda with a test on the actual number or arguments, but become ambiguous when the referenced function itself is polyadic).

The idea, as suggested by @artpej  in https://github.com/eclipse/golo-lang/issues/326#issuecomment-164260911,  is to use a proxy object for ambiguous method references, allowing to resolve at call time.
Such object can include an inline cache and be replaced at the call site by the real reference when known.
This would also allow more polymorphic behaviour, since with could dispatch on function with different arities.
It may be a step toward lisp-like multimethods :wink: 

See also #326, #341 ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/576/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/580,https://api.github.com/repos/eclipse-archived/golo-lang/issues/580,golo-lang,1034717094,580,confirm release artifact,chenrui333,1580956,Rui Chen,rui@chenrui.dev,CLOSED,2021-10-25T06:08:36Z,2022-01-23T02:25:26Z,"👋  it looks like the release artifact did not get updated in https://mirror.umd.edu/eclipse/golo/, thus I have switched to [use the github release artifact](https://github.com/Homebrew/homebrew-core/pull/87935). Just to raise an issue in here to confirm if that is desired. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/580/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/580,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch847D-sJ,golo-lang,990898953,580,NA,jponge,25961,Julien Ponge,,NA,2021-12-10T11:38:50Z,2021-12-10T11:38:50Z,Yes :-) ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch847D-sJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/580,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch848wsmM,golo-lang,1019398540,580,NA,chenrui333,1580956,Rui Chen,rui@chenrui.dev,NA,2022-01-23T02:25:26Z,2022-01-23T02:25:26Z,Thanks @jponge! ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch848wsmM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,golo-lang,1329204024,581,The end of the road?,jponge,25961,Julien Ponge,,CLOSED,2022-08-04T21:43:25Z,2022-09-16T05:10:37Z,"Ok folks, we haven't had much development over the past few years, even if we managed to assemble a release in Fall 2021 😉 

While we've all moved to other priorities in our personal and professional lives I think the main problem with the Golo code base is migrating past Java 8 (see #504). Lots of assumptions in how the Golo runtime and code generation work have been made in a pre-JPMS model where we could freely peak into classes, unlock reflective access, and more. As time flies by it's clear none of us has managed to go past the fundamental problems JPMS introduced in Java 9.

That's why I propose to close the chapter of Golo at the Eclipse Foundation, and unless people have a different opinion and/or want to step in I'll open a termination review early September 2022. In such a case I'd like the foundation to mark the repository as _archived_ so we don't loose all history. Or at least it'd be ok to transfer back the repo + issues to the `golo-lang` organisation so we could archive it ourselves.

On a more personal note I have to say that creating and nurturing this project has been a very fun chapter of my life. I'm proud of all of you who've contributed to Golo, and by contributing I don't just mean _code_. Seeing some of you give talks, write blogs or just have a little fun with what many saw as a _toy language_ has made me incredibly humble and proud 🙏 

/cc Top contributors @yloiseau @artpej @k33g ","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/581/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85H3y4p,golo-lang,1205808681,581,NA,rlespinasse,1280212,Romain Lespinasse,,NA,2022-08-04T21:56:08Z,2022-08-04T21:56:08Z,"Good for me, thanks for creating this road in the first place.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85H3y4p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85H4m-J,golo-lang,1206022025,581,NA,k33g,491848,Philippe Charrière,ph.charriere@gmail.com,NA,2022-08-05T04:13:26Z,2022-08-05T04:13:26Z,"I learned a lot thanks to Golo (better coding, discovering Java, participating in an OSS project, experimenting, ...). I was able to do my first conferences thanks to Golo (even internationally). Thanks for all that. Thank you, @jponge, for taking me on this adventure.","{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85H4m-J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85KaG22,golo-lang,1248357814,581,NA,jponge,25961,Julien Ponge,,NA,2022-09-15T16:47:15Z,2022-09-15T16:47:15Z,The Eclipse Golo project has been officially terminated: https://gitlab.eclipse.org/eclipsefdn/emo-team/emo/-/issues/354,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85KaG22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-archived/golo-lang/issues/581,https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85KcRat,golo-lang,1248925357,581,NA,platypusguy,920630,Andrew Binstock,,NA,2022-09-16T05:10:37Z,2022-09-16T05:10:37Z,Thanks for an elegant language! ,"{""url"": ""https://api.github.com/repos/eclipse-archived/golo-lang/issues/comments/IC_kwDOAH9Ch85KcRat/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
