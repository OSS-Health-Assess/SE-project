type,issue_url,comment_url,repo_name,id,issue_num,title,user_login,user_id,user_name,user_email,issue_state,created_at,updated_at,body,reactions
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/1,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/1,paho.mqtt.python,131388620,1,Python 3 issue: client.publish does not accept bytes payload as returned by struct.pack,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:49:04Z,2016-06-01T09:49:31Z,"migrated from Bugzilla [#486185](https://bugs.eclipse.org/bugs/show_bug.cgi?id=486185)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _All_
Assigned to: Roger Light

On 2016-01-20 11:12:07 -0500, Andreas Koehler wrote:

> The documentation suggests using struct.pack() to create payloads.
> 
> But invoking e.g. client.publish(""test"",struct.pack('>d',1.2345)) results in an error:
> 
>   File ""D:\Miniconda3\envs\python34\lib\site-packages\paho\mqtt\client.py"", line 871, in publish
>     raise TypeError('payload must be a string, bytearray, int, float or None.')
> 
> This is because client.publish only checks isinstance(payload, bytearray), but not isinstance(payload, bytes), which is what struct.pack returns on Python 3
> 
> Easy fix in client.py on line 864: for sys.version_info[0]==3 use isinstance(payload, bytes) instead of isinstance(payload, unicode)
> 
> Workaround: use bytearray(struct.pack(...)) to create payload.

On 2016-01-20 11:18:54 -0500, Andreas Koehler wrote:

> Regarding the fix - it's not only line 864... there are more type checks on the payload later on...
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/2,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/2,paho.mqtt.python,131388673,2,SSL wrapped socket is not set to non-blocking,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:49:17Z,2016-06-01T09:38:35Z,"migrated from Bugzilla [#465625](https://bugs.eclipse.org/bugs/show_bug.cgi?id=465625)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

Original attachment names and IDs:
- _[ssl-blocking-test.py](https://bugs.eclipse.org/bugs//attachment.cgi?id=259120)_ (ID 259120)

On 2015-04-27 16:13:31 -0400, Jeff Jasper wrote:

> When using SSL enabled Paho and publishing a large number (~ 1000) of messages in rapid succession I noticed a behavior where 50-100 messages would be sent and then a period of 1 minute would elapse before the remaining messages were sent. I tracked the delay down to the ssl.read(1) (line 1405) method in _packet_read. It appears that the socket may be getting disconnected causing the read to block for a minute before returning an empty byte.
> 
> I noticed that the ssl wrapped socket (generated in the reconnect method) is not explicitly set to non-blocking like it is for a non-SSL socket. After setting the ssl wrapped socket to non-blocking the delay when publishing a large burst of messages appears to be gone. I guess this isn't necessarily a bug, but rather a performance issue.

On 2015-05-23 17:21:11 -0400, Roger Light wrote:

> Hi Jeff,
> 
> Thanks for this, but I'm a bit confused. The socket gets set to be non-blocking around line 756, regardless of whether it is SSL or not. The ssl.wrap_socket() call is blocking, but everything afterwards should be non-blocking.

On 2016-01-12 05:21:16 -0500, Pierre Fersing wrote:

> Created attachment 259120
> script to test SSL blocking status
> 
> I confirm what Jeff seen, SSL is blocking... but only with Python 3 :(
> 
> Python 2 works well, but not Python 3 (tested 2.7.10 and 3.4.3)
> 
> With Python 2 calling setblocking(0) on either raw-socket or ssl-socket is enough.
> 
> With Python 3 calling setblocking(0) on raw-socket change nothing on ssl-socket. We need to call setblocking(0) on ssl-socket to make ssl socket non-blocking.
> 
> I've attached a basic script that I used to test the blocking status of ssl socket.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/3,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/3,paho.mqtt.python,131388727,3,Reconnect on an SSL socket can block forever,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:49:29Z,2017-04-22T13:36:45Z,"migrated from Bugzilla [#478959](https://bugs.eclipse.org/bugs/show_bug.cgi?id=478959)
status UNCONFIRMED severity _major_ in component _MQTT-Python_ for _1.2_
Reported in version _unspecified_ on platform _PC_
Assigned to: Roger Light

Original attachment names and IDs:
- _[paho-client-TLS-reconnect-timeout.patch](https://bugs.eclipse.org/bugs//attachment.cgi?id=257015)_ (ID 257015)

On 2015-10-03 13:25:52 -0400, Jeff Jasper wrote:

> Created attachment 257015
> Patch for the bug.
> 
> The ssl.wrap_socket call within the reconnect method can block forever if the broker (for whatever reason) does not respond during the handshake. I don't know what's causing the broker (RabbitMQ) to not respond but it occurs occasionally and happens more frequently under network conditions with high latencies.
> 
> I'm including a patch where I perform the TLS handshake after wrapping the socket and give the socket a 10 second timeout. After the handshake completes I set the socket to non-blocking. Feel free to change my hard coded 10 sec. block to something more configurable.
> 
> Also included in the patch is a broad exception catch to release the _current_out_packet_mutex to avoid potential deadlock (I've never experienced this but noticed it when I was troubleshooting the previous issue).

On 2016-01-04 19:04:49 -0500, Adam mills wrote:

> We are seeing this as well with Mosquitto as a broker.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/3,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3MzgxMA==,paho.mqtt.python,296373810,3,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:36:45Z,2017-04-22T13:36:45Z,PR #124 merged,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3MzgxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/4,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/4,paho.mqtt.python,131388776,4,client.connect() just calls connect_async(),jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:49:42Z,2016-05-23T21:54:34Z,"migrated from Bugzilla [#484733](https://bugs.eclipse.org/bugs/show_bug.cgi?id=484733)
status UNCONFIRMED severity _major_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

On 2015-12-20 12:06:18 -0500, Jake Callery wrote:

> Seems as thought client.connect() simply calls client.connect_async().  This goes against what the docs claim.  connect() should be a blocking call.  Since it seems to be not, trying to subscribe (like many of the examples out there show) right after a connect call will fail because the connection has not been established before the call to subscribe.
> 
> Docs:
> https://pypi.python.org/pypi/paho-mqtt#connect-reconnect-disconnect
> ""The connect() function connects the client to a broker. This is a blocking function. It takes the following arguments:""
> 
> Code:
> def connect(self, host, port=1883, keepalive=60, bind_address=""""):
>         """"""Connect to a remote broker.
> 
> ```
>     host is the hostname or IP address of the remote broker.
>     port is the network port of the server host to connect to. Defaults to
>     1883. Note that the default port for MQTT over SSL/TLS is 8883 so if you
>     are using tls_set() the port may need providing.
>     keepalive: Maximum period in seconds between communications with the
>     broker. If no other messages are being exchanged, this controls the
>     rate at which the client will send ping messages to the broker.
>     """"""
>     self.connect_async(host, port, keepalive, bind_address)
>     return self.reconnect()
> ```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/4,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwNzgyOA==,paho.mqtt.python,221107828,4,NA,ralight,79578,Roger Light,,NA,2016-05-23T21:54:34Z,2016-05-23T21:54:34Z,"This bug report is incorrect, `connect()` calls `reconnect()` as described in the report. This is the part that carries out the blocking connect.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwNzgyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/5,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/5,paho.mqtt.python,131388828,5,Websocket support for paho python,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:49:55Z,2016-06-01T08:48:25Z,"migrated from Bugzilla [#482282](https://bugs.eclipse.org/bugs/show_bug.cgi?id=482282)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _All_
Assigned to: Roger Light

Original attachment names and IDs:
- _[paho_python_websocket_support.diff](https://bugs.eclipse.org/bugs//attachment.cgi?id=257966)_ (ID 257966)

On 2015-11-16 08:02:45 -0500, Milan Toth wrote:

> Created attachment 257966
> weboscket support git patch
> 
> Websocket support patch for paho python
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/5,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMTIyNw==,paho.mqtt.python,222931227,5,NA,ralight,79578,Roger Light,,NA,2016-06-01T08:48:25Z,2016-06-01T08:48:25Z,"Fixed in 1.2.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMTIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/6,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/6,paho.mqtt.python,131388876,6,Unclear error message when bad authentication with paho.mqtt.publish,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:50:07Z,2016-06-01T09:17:04Z,"migrated from Bugzilla [#481229](https://bugs.eclipse.org/bugs/show_bug.cgi?id=481229)
status UNCONFIRMED severity _minor_ in component _MQTT-Python_ for _1.2_
Reported in version _unspecified_ on platform _PC_
Assigned to: Roger Light

On 2015-11-02 06:00:58 -0500, Pierre Fersing wrote:

> When using paho.mqtt.publish (single or multiple) with an MQTT broker requiring authentication and providing wrong (or no) credentials, the error is unclear:
> 
> > > > paho.mqtt.publish.single('topic', 'msg', hostname='localhost', auth={'username':""user"", 'password':""WRONG password""})
> > > > Traceback (most recent call last):
> > > >   File ""<stdin>"", line 1, in <module>
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/publish.py"", line 216, in single
> > > >     multiple([msg], hostname, port, client_id, keepalive, will, auth, tls, protocol)
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/publish.py"", line 170, in multiple
> > > >     client.loop_forever()
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1261, in loop_forever
> > > >     rc = self.loop(timeout, max_packets)
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 811, in loop
> > > >     rc = self.loop_read(max_packets)
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1073, in loop_read
> > > >     rc = self._packet_read()
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1475, in _packet_read
> > > >     rc = self._packet_handle()
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1949, in _packet_handle
> > > >     return self._handle_connack()
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2010, in _handle_connack
> > > >     self.on_connect(self, self._userdata, flags_dict, result)
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/publish.py"", line 53, in _on_connect
> > > >     _do_publish(c)
> > > >   File ""/home/pierref/.virtualenvs/paho/local/lib/python2.7/site-packages/paho/mqtt/publish.py"", line 27, in _do_publish
> > > >     m = c._userdata[0]
> > > > IndexError: list index out of range
> 
> From what I understand, this issue is in publish.py:_on_connect function:
> 
> def _on_connect(c, userdata, flags, rc):
>     """"""Internal callback""""""
>     _do_publish(c)   <-- here it try to publish ALWAYS, including when rc != 0
> 
> With bad credential, rc == 4 (""Connection refused - bad username or password"").
> It should probably be better to raise exception when rc != 0 (at least for wrong password/client id, since retrying won't change the outcome).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/7,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/7,paho.mqtt.python,131388943,7,callback is not called anymore after server received a HUP signal,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:50:20Z,2016-02-04T15:50:20Z,"migrated from Bugzilla [#478344](https://bugs.eclipse.org/bugs/show_bug.cgi?id=478344)
status CLOSED severity _normal_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

On 2015-09-24 15:22:25 -0400, Kees Bakker wrote:

> The callback is not called anymore after the MQTT server did get an HUP signal. (It gets the HUP signal as part of logrotate on Ubuntu)
> 
> Consider this little program to show the problem.
> 
> import sys
> import paho.mqtt.client as mqtt
> 
> def on_message(mosq, obj, msg):
>     print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))
>     sys.stdout.flush()
> 
> def main():
>     mqttc = mqtt.Client()
> 
> ```
> mqttc.on_message = on_message
> mqttc.connect(""localhost"")
> mqttc.subscribe(""TPHUNBBEE/device/#"", 0)
> 
> mqttc.loop_forever()
> ```
> 
> main()
> 
> It prints the message it is subscribed to. The actual script runs forever, as the loop_forever suggests. But everytime the MQTT server (I'm using mosquitto) gets a HUP signal the script stops getting callbacks. I have to kill it and restart.

On 2015-09-24 18:47:06 -0400, Roger Light wrote:

> The problem is because you are not a durable client (clean_session is set to True by default) and you only subscribe at the start of your program. If your client is ever disconnected, it will reconnect but not resubscribe.
> 
> Try putting the subscribe() call in your on_connect() callback.

On 2015-09-25 15:03:42 -0400, Kees Bakker wrote:

> Ah, I see. Sorry for the noise then. Indeed it works as you describe. It even is in the README.rst (which I probably never did).
> 
> Thanks for responding so quickly

On 2015-09-25 16:11:39 -0400, Roger Light wrote:

> No problem, I'm happy to help.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/8,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/8,paho.mqtt.python,131389003,8,catch all except blocks KeyboardInterrupt,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:50:32Z,2016-06-01T08:48:01Z,"migrated from Bugzilla [#477353](https://bugs.eclipse.org/bugs/show_bug.cgi?id=477353)
status UNCONFIRMED severity _minor_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

Original attachment names and IDs:
- _[diff](https://bugs.eclipse.org/bugs//attachment.cgi?id=256550)_ (ID 256550)

On 2015-09-14 07:19:05 -0400, matt venn wrote:

> Created attachment 256550
> diff
> 
> something like this:
> 
> try:
>     client.loop_forever()
> except KeyboardInterrupt as e:
>     print(""ending"")
> 
> doesn't work properly because there is a bare except clause in loop():
> 
> except:
>             return MQTT_ERR_UNKNOWN
> 
> the diff below fixes that by handling KeyboardError with a raise
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/8,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDM1Nzk5OQ==,paho.mqtt.python,180357999,8,NA,mattvenn,634220,Matt Venn,,NA,2016-02-05T13:30:46Z,2016-02-05T13:30:46Z,"fixed in my pull request
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE4MDM1Nzk5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/8,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMTEyNQ==,paho.mqtt.python,222931125,8,NA,ralight,79578,Roger Light,,NA,2016-06-01T08:48:01Z,2016-06-01T08:48:01Z,"Fixed in 1.2.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMTEyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/9,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/9,paho.mqtt.python,131389065,9,mqtt client flash without network,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:50:45Z,2017-01-05T10:42:40Z,"migrated from Bugzilla [#476694](https://bugs.eclipse.org/bugs/show_bug.cgi?id=476694)
status UNCONFIRMED severity _critical_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

On 2015-09-05 06:19:59 -0400, Paolo Patruno wrote:

> mqtt client stop for ever if only local interface is up in network configuration.
> 
> program stop inside sock1.connect((""127.0.0.1"", port)) in _socketpair_compat

On 2015-09-07 10:01:07 -0400, Paolo Patruno wrote:

> Solved with:
> sock1.settimeout(10)
> 
> ....
> sock2.settimeout(10)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/9,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYxNTM3Mw==,paho.mqtt.python,270615373,9,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-05T10:42:40Z,2017-01-05T10:42:40Z,I think this is already fixed. Current code include sock1.setblocking(0) which should avoid any hang.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYxNTM3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/10,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/10,paho.mqtt.python,131389133,10,client does not detect connection failure,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:50:58Z,2016-06-01T09:40:34Z,"migrated from Bugzilla [#475579](https://bugs.eclipse.org/bugs/show_bug.cgi?id=475579)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

On 2015-08-21 07:50:17 -0400, Gideon Farrell wrote:

> If Client has connected, and then connection is lost (for my tests I kill the MQTT broker):
> 
> a) the Client does not seem to detect that the connection has been terminated (or at least I see no way to be notified of such)
> b) nor does it report any sort of message send failure, so messages are permanently lost (I have confirmed that they are)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/10/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/10,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjk0MzEwNA==,paho.mqtt.python,222943104,10,NA,ralight,79578,Roger Light,,NA,2016-06-01T09:39:59Z,2016-06-01T09:39:59Z,"You are notified of failure in the on_disconnect callback.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjk0MzEwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/10,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjk0MzI1Mg==,paho.mqtt.python,222943252,10,NA,ralight,79578,Roger Light,,NA,2016-06-01T09:40:34Z,2016-06-01T09:40:34Z,"If you think this is still a bug, please provide more details.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjk0MzI1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,paho.mqtt.python,131389201,11,Paho does not support the SNI extension of TLS,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:51:10Z,2017-05-17T18:50:39Z,"migrated from Bugzilla [#471037](https://bugs.eclipse.org/bugs/show_bug.cgi?id=471037)
status UNCONFIRMED severity _enhancement_ in component _MQTT-Python_ for _1.2_
Reported in version _1.2_ on platform _All_
Assigned to: Roger Light

On 2015-06-25 14:04:34 -0400, Juan Carlos Jimenez wrote:

> The current implementation of Paho Python does not support the Server Name Indication extension of TLS.
> 
> This means that if a server has 2 VPS's trying to use TLS in the same port the connection will fail.
> 
> SNI support was added to the ssl module in the python version 2.7.9.
> 
> I have submitted a patch that will try to use SNI by default (pretty much every single SSL library out there supports it nowadays). If the ssl module does not support SNI, it will fall back to the non-SNI implementation.
> 
> You can find it here: https://git.eclipse.org/r/#/c/50658/
> 
> I'm currently using that patch and it is working fine for me.
> 
> Just opening the bug report for reference.

On 2015-06-25 17:50:34 -0400, Roger Light wrote:

> Thanks for the report and the gerrit push, I had spotted it I've just been quite busy recently. I'll try to have a look soon.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzI0ODg1NA==,paho.mqtt.python,277248854,11,NA,Lokesh-K-Haralakatta,18327888,Lokesh K Haralakatta,,NA,2017-02-03T13:40:52Z,2017-02-03T13:40:52Z,"Why can't we merge the changes from this commit - https://github.com/exosite/paho.mqtt.python/commit/9acc14285b2c06b14816d017912c25ec9ff1f0da to master repo? This commit has the changes to support to SNI for paho.mqtt.python. I used the code changes for one of our connectivity to IoT Platform for Client Side Certificate support, the changes worked fine. Can we have this changes merged ASAP?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzI0ODg1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzMwNDQ2Mg==,paho.mqtt.python,277304462,11,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-03T17:08:44Z,2017-02-03T17:08:44Z,SNI support is already added on develop branch by PR #92 but not yet released.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzMwNDQ2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODU4MTY1Ng==,paho.mqtt.python,278581656,11,NA,Lokesh-K-Haralakatta,18327888,Lokesh K Haralakatta,,NA,2017-02-09T08:49:52Z,2017-02-09T08:49:52Z,"Any idea, when can we have the SNI support released and available as part of paython pkg?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODU4MTY1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/11,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3Mzk2Ng==,paho.mqtt.python,296373966,11,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:39:30Z,2017-04-22T13:39:30Z,"Closing the issue, since fix is already committed.
Release with SNI support is expected by end of June","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3Mzk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,paho.mqtt.python,131389255,12,Calling message_callback_add within a callback causes deadlock,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:51:23Z,2016-06-01T22:01:36Z,"migrated from Bugzilla [#459012](https://bugs.eclipse.org/bugs/show_bug.cgi?id=459012)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.1_ on platform _Other_
Assigned to: Roger Light

On 2015-02-03 06:09:31 -0500, Ed Morris wrote:

> The following code locks up when a message is published to the topic 'bar'.
> # !/usr/bin/python
> 
> import paho.mqtt.client as paho
> 
> def on_foo_message(mqttc,request,msg):
>     print(""foo on_message"")
>     pass
> 
> def on_message(mqttc,request,msg):
>     print(""global on_message"")
>     mqttc.subscribe(""foo"", 0)
>     print(""Subscribed to foo"")
>     mqttc.message_callback_add(""foo/+"",on_foo_message)
>     print(""Added callback to foo"")
> 
> mqttc = paho.Client()
> broker = ""127.0.0.1""
> mqttport = 1883
> mqttc.on_message = on_message
> mqttc.connect(broker, mqttport, 60)
> mqttc.subscribe(""bar"", 0)
> mqttc.loop_forever()
> 
> I think it is because the call to self._callback_mutex.acquire() in message_callback_add never exits. This is because the mutex was already acquired in _handle_on_message and will not release until the on_message callback has finished - which cannot happen.

On 2015-06-10 22:38:22 -0400, YuLun Shih wrote:

> Same issue here, I think it's all about _callback_mutex
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMTc5MzQ0MA==,paho.mqtt.python,211793440,12,NA,AlexisBRENON,1846046,Alexis BRENON,alexis.brenon@adyoulike.com,NA,2016-04-19T08:29:13Z,2016-04-19T08:29:13Z,"Encounter this error too !
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMTc5MzQ0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzA4MTE4Mw==,paho.mqtt.python,223081183,12,NA,yoch,795960,yoch,,NA,2016-06-01T18:22:20Z,2016-06-01T18:22:20Z,"Maybe RLock must be used instead of Lock in client.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzA4MTE4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzEyMzA3Mg==,paho.mqtt.python,223123072,12,NA,drem-darios,2725035,Drēm Darios,drem.development@gmail.com,NA,2016-06-01T21:00:06Z,2016-06-01T21:00:06Z,"I ran into this problem too. I changed the Lock locally to RLock and it fixed the issue. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzEyMzA3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/12,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzEzODM0Mw==,paho.mqtt.python,223138343,12,NA,ralight,79578,Roger Light,,NA,2016-06-01T22:01:25Z,2016-06-01T22:01:25Z,"Thanks for the hints and confirmation that it works. I've pushed a change that fixes this.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzEzODM0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/13,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/13,paho.mqtt.python,131389344,13,Wildcard certificates (TLS) are not supported,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:51:35Z,2016-02-04T15:51:35Z,"migrated from Bugzilla [#440547](https://bugs.eclipse.org/bugs/show_bug.cgi?id=440547)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.0_ on platform _All_
Assigned to: Roger Light

On 2014-07-28 09:16:15 -0400, Juan Carlos Jimenez wrote:

> The library compares the field ""commonName"" with the URL provided. If you are using a wildcard certificate, the addresses won't match and the user gets a ""raise ssl.SSLError('Certificate subject does not match remote hostname.')""
> 
> The code can be found in the function _tls_match_hostname, in src/paho/mqtt/client.py :
> 
> ```
>     subject = cert.get('subject')
>     if subject:
>         for ((key, value),) in subject:
>             if key == 'commonName':
>                 if value.lower() == self._host.lower():
>                     return
> 
>     raise ssl.SSLError('Certificate subject does not match remote hostname.')
> ```

On 2014-07-28 09:28:28 -0400, Roger Light wrote:

> Agreed, this is the case. I've had some code contributed elsewhere to fix this, hopefully I can get that merged in.

On 2014-08-26 09:51:38 -0400, Calum Barnes wrote:

> Any progress on this issue? It is also preventing me from using TLS due my brokers cert. It works fine in Python3 where you are using the ssl lib to check the hostname. Any reason this cant happen in 27?

On 2014-09-12 17:57:29 -0400, Roger Light wrote:

> I've had no response from the person who submitted a pull request to mosquitto.py that I then asked them to submit here instead.
> 
> It makes things a bit awkward because I can't use their code, but anything I write now would almost certainly come out very very similar now that I've already seen it.
> 
> I'd be very happy to receive a new, clean patch to achieve this functionality.

On 2015-01-12 19:31:52 -0500, Roger Light wrote:

> This will be included in the 1.1 release.

On 2015-06-02 12:23:16 -0400, Muhammad Satrio wrote:

> anyone have solved this issue?

On 2015-06-02 12:26:22 -0400, Juan Carlos Jimenez wrote:

> Yes, Muhammad, wildcard certs are working fine in the latest version of paho.

On 2015-06-02 12:34:46 -0400, Muhammad Satrio wrote:

> yes, you right. i just need to update paho with the latest version.
> and it works
> thanks jimenez
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/13/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/14,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/14,paho.mqtt.python,131389418,14,Cannot close client event thread cleanly,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:51:48Z,2016-06-01T10:14:16Z,"migrated from Bugzilla [#467422](https://bugs.eclipse.org/bugs/show_bug.cgi?id=467422)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.2_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

Original attachment names and IDs:
- _[runtests.py](https://bugs.eclipse.org/bugs//attachment.cgi?id=253513)_ (ID 253513)

On 2015-05-15 12:54:35 -0400, Cefn Hoile wrote:

> Created attachment 253513
> Example code
> 
> I'm running a simple unit test within the Twisted.trial framework, intending to use their Deferred object for handling the asynchronous nature of these tests.
> 
> The file attached shows the reference code. Unfortunately the invocation of loop_stop causes an Error...
> 
> Traceback (most recent call last):
>   File ""runtests.py"", line 64, in tearDown
>     self.receiver.loop_stop()
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1320, in loop_stop
>     self._thread.join()
>   File ""/usr/lib/python2.7/threading.py"", line 940, in join
>     raise RuntimeError(""cannot join current thread"")
> exceptions.RuntimeError: cannot join current thread
> ## runtests.MqttTestCase.test_messaged
> 
> Ran 1 tests in 2.882s
> 
> FAILED (errors=1)

On 2015-05-18 08:28:27 -0400, Cefn Hoile wrote:

> Sorry not to be explicit about invocation. To invoke the test, I'm running...
> 
> ```
> trial runtests.py
> ```
> 
> ...with the attached Example code file. 
> 
> That maps to the Twisted trial utility which is contributed by the Ubuntu/Debian package python-twisted-core
> 
> $ apt-file search /usr/bin/trial
> python-twisted-core: /usr/bin/trial
> 
> The test case gets all the way through to receiver_messaged, and it's only the tidyup which seems to be a problem. 
> 
> Instead of disconnecting and stopping threads in tearDown, I can replace the method with 
> 
> def tearDown(self):
>   pass
> 
> Then the test suite hangs waiting for CTRL+C
> 
> After hitting CTRL+C the Test is then reported as successful, but of course if I can't automate the termination of Paho threads using loop_stop then I can't build any kind of test suite.

On 2015-05-20 05:22:05 -0400, Cefn Hoile wrote:

> I found the nature of the bug/feature and a workaround.
> 
> The issue is that the event which triggers termination of the 'receiver' thread (where receiver is a paho.mqtt.client.Client) is an event (on_message) arising from within the receiver's own loop.
> 
> This has got to be a really common scenario, honestly - that the receiver's lifecycle is terminated on a message receive for example.
> 
> As a result in my case receiver.loop_stop() is being called within the thread begun by receiver.loop_start(). Because there is a join() call in receiver.loop_stop to try and join with the original thread, the thread is therefore attempting to join with itself.
> 
> As a workaround I threw the call into another thread as below, but I don't really see why this would be necessary and I think the logic of loop_stop should handle this scenario.
> 
> Thread(target=self.receiver.loop_stop).start()
> 
> Recommend Client.loop_stop() has a change in its logic or a meaningful error indicating to the developer how to solve the problem. Being able to shut down a client on receipt of a message is a pretty fundamental feature which should not create surprising errors, and require extra Thread-spawning.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/14/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/15,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/15,paho.mqtt.python,131389472,15,Client.publish() fails if payload arg is <str> type and contains a byte not in range(128); python 2.7,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:52:00Z,2017-05-17T18:39:53Z,"migrated from Bugzilla [#462441](https://bugs.eclipse.org/bugs/show_bug.cgi?id=462441)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _unspecified_ on platform _Macintosh_
Assigned to: Roger Light

On 2015-03-18 05:01:50 -0400, Michael Laing wrote:

> Python 2.7 <str>s may contain 8-bit bytes.
> 
> If a <str> containing a byte outside of range(128) is passed as the payload arg to Client.publish(), an error like the following occurs:
> 
> UnicodeDecodeError: 'ascii' codec can't decode byte <foo> in position <bar>: ordinal not in range(128)
> 
> Probably the best solution is to guard the encode in this part of the method with a try clause.
> 
> The workaround is to always pass in the payload as <unicode> or <bytearray>, avoiding <str>, particularly if the payload is opaque in one's application.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/15/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/15,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyODM2MTk4MQ==,paho.mqtt.python,228361981,15,NA,karlp,127907,Karl Palsson,karlp@tweak.au,NA,2016-06-24T14:32:24Z,2016-06-24T14:32:24Z,"looks like some details in the workaround went missing in the import?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyODM2MTk4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/15,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDIzNQ==,paho.mqtt.python,296374235,15,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:44:03Z,2017-04-22T13:44:03Z,"I think this is fixed on develop branch. If not, feel free to reopen","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDIzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/16,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/16,paho.mqtt.python,131389545,16,Client.subscribe() fails for unicode topic,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:52:13Z,2016-11-30T09:37:12Z,"migrated from Bugzilla [#462379](https://bugs.eclipse.org/bugs/show_bug.cgi?id=462379)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _unspecified_ on platform _Macintosh_
Assigned to: Roger Light

On 2015-03-17 11:13:50 -0400, Michael Laing wrote:

> If the topic arg is unicode, subscribe() considers it invalid.
> 
> This is because tests in the method are for 'str' and not 'basestring'.
> 
> The documentation for the method should be correspondingly updated.
> 
> The workaround is to encode the topic arg as utf8 before sending to the method.

On 2015-03-17 19:35:42 -0400, Roger Light wrote:

> Is this on Python 2.x?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/16/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/16,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNTczMDkzOA==,paho.mqtt.python,235730938,16,NA,lperez31,20690945,,,NA,2016-07-27T21:44:20Z,2016-07-27T21:44:20Z,"Hi,
Still not possible to subscribe to unicode topic on Python 2.7 :
`client.subscribe(u'à',` qos=0)`
leads to:
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 24: ordinal not in range(128)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNTczMDkzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/16,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNjc5Ng==,paho.mqtt.python,263826796,16,NA,PierreF,359833,Pierre Fersing,,NA,2016-11-30T09:37:12Z,2016-11-30T09:37:12Z,"Hi,

Indeed, currently with Python 2, we can't subscribe or unsubscribe to non-ascii topic. Python 3 does already allow it.
It's fixed on the devel branch by #81, but before this get released, you will need to stick with ascii topic or use Python 3.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNjc5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/17,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/17,paho.mqtt.python,131389605,17,paho.mqtt.publish  multiple function will throw exception if target token list is empty,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:52:25Z,2016-05-26T22:33:03Z,"migrated from Bugzilla [#461574](https://bugs.eclipse.org/bugs/show_bug.cgi?id=461574)
status UNCONFIRMED severity _major_ in component _MQTT-Python_ for _1.1_
Reported in version _1.1_ on platform _PC_
Assigned to: Roger Light

On 2015-03-06 06:08:59 -0500, henry john wrote:

> def _do_publish(c):
>     """"""Internal function""""""
>     m = c._userdata[0]
>     c._userdata = c._userdata[1:]   # throw exception is userdata contains only one element.
>     if type(m) is dict:
>         topic = m['topic']
>         try:
>             payload = m['payload']
>         except KeyError:
>             payload = None
>         try:
>             qos = m['qos']
>         except KeyError:
>             qos = 0
>         try:
>             retain = m['retain']
>         except KeyError:
>             retain = False
>     elif type(m) is tuple:
>         (topic, payload, qos, retain) = m
>     else:
>         raise ValueError('message must be a dict or a tuple')
> 
> ```
> c.publish(topic, payload, qos, retain)
> ```
> 
> bug fix version:
> def _do_publish(c):
>     """"""Internal function""""""
>     if not c._userdata:
>         c.disconnect()
>         return
>     m = c._userdata.pop()
>     if type(m) is dict:
>         topic = m['topic']
>         try:
>             payload = m['payload']
>         except KeyError:
>             payload = None
>         try:
>             qos = m['qos']
>         except KeyError:
>             qos = 0
>         try:
>             retain = m['retain']
>         except KeyError:
>             retain = False
>     elif type(m) is tuple:
>         (topic, payload, qos, retain) = m
>     else:
>         raise ValueError('message must be a dict or a tuple')
> 
> ```
> c.publish(topic, payload, qos, retain)
> ```
> 
> advise:  To get more readability, the code should better write with the pep8  style guide.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/17/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/17,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxNDE2NA==,paho.mqtt.python,222014164,17,NA,ralight,79578,Roger Light,,NA,2016-05-26T22:33:03Z,2016-05-26T22:33:03Z,"This is now fixed.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxNDE2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/18,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/18,paho.mqtt.python,131389674,18,High CPU load while emptying the message cache after a reconnect.,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:52:38Z,2016-02-04T15:52:38Z,"migrated from Bugzilla [#452672](https://bugs.eclipse.org/bugs/show_bug.cgi?id=452672)
status RESOLVED severity _enhancement_ in component _MQTT-Python_ for _1.1_
Reported in version _1.1_ on platform _All_
Assigned to: Roger Light

On 2014-11-21 10:37:52 -0500, W Boerendans wrote:

> Python Paho MQTT Client V1.1
> # Description
> 
> The calculation of max_packets in loop_write(), line: 1093 is incorrect and results in huge amount of useless iterations. This will happen when a connection with the broker is restored after a while, and messages are cached using existing buffers from the library.
> The calculation of max_packets is based on the number of elements in self._out_messages and self._in_messages, which are not related with max_packets at this point.
> Also list self._out_packet will only consist one message each time.
> # Reproduction path
> 
> When the connection between the MQTT broker and the python paho client is disconnected, messages that needs to be published by calling the publish() method, will be cached in self._out_messages.
> 
> Situation: The number of messages to be published is, for example, one per five seconds. After 10 minutes, the connection is restored. The list self._out_messages contains now 120 messages.
> 
> After the connection with the broker is set-up, cached messages from self._out_messages will be published again by the library retry mechanism.
> The for loop in loop_write() will iterate from zero to the length of lists out_messages and in_messages. This is useless because self._out_packet will only contain one message at the time.
> After the package is sent, the method _packet_write() will try to get a new packet from self._out_packet (line: 1552), but self._out_packet is empty.
> Due to this issue, the for loop in loop_write() will iterate, in this case, 120x120 times for 120 messages. 
> For high performance systems, like PCs this is not really an issue, but for smaller ARM based single core systems it is and will lead to high cpu load.
> # Possible fixes/ideas
> - max_packets is always 1, remove the for loop.
> - To calculate max_packets, the length of self._out_packet should be used instead of self._out_messages and self._in_messages.
> - Refactor some code in loop_write, packet_write.

On 2015-02-01 11:04:17 -0500, Roger Light wrote:

> This should be fixed in the 1.1 release.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/18/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/19,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/19,paho.mqtt.python,131389741,19,Invoking will_set does not register LWT with RabbitMQ v3.3.0,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:52:51Z,2016-02-04T15:52:51Z,"migrated from Bugzilla [#444770](https://bugs.eclipse.org/bugs/show_bug.cgi?id=444770)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.0_ on platform _PC_
Assigned to: Roger Light

On 2014-09-22 14:02:59 -0400, Jeff Jasper wrote:

> This feature works in pre 1.0 and my guess is that the explicit encoding modification contributes to this. I have not tested it with any other broker.

On 2015-01-31 20:36:08 -0500, Roger Light wrote:

> I believe this is a bug in rabbitmq. There is a discussion about what I believe to be the same problem here: https://groups.google.com/forum/#!topic/rabbitmq-users/Co7HFORA1qc
> 
> I'm marking this bug as ""not eclipse"", because I think the bug is in rabbitmq. If you think this is still a bug with Paho Python, please reopen the bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/19/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/20,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/20,paho.mqtt.python,131389827,20,Python client timeout if behind a HTTP proxy,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:53:03Z,2016-02-04T15:53:04Z,"migrated from Bugzilla [#457256](https://bugs.eclipse.org/bugs/show_bug.cgi?id=457256)
status CLOSED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _v0.5_ on platform _PC_
Assigned to: Roger Light

On 2015-01-12 10:32:39 -0500, DD G wrote:

> Unable to use the Python client on a machine that sits behind a corporate HTTP proxy.  There doesn't seem to be a way to configure the proxy details.
> 
> I was able to make mosquitto_sub command line tool work using proxychains as a workaround.  However a similar approach failed with the Python script.
> ---
> # !/usr/bin/env python
> 
> import paho.mqtt.client as mqtt
> import time
> 
> client = mqtt.Client()
> client.connect(""test.mosquitto.org"", 1883, 60)
> temp = 1
> 
> client.loop_start()
> while True:
>         temp = temp + 1
>         client.publish(""house/temp/xxxx123"", temp, retain=True)
>         time.sleep(10)
> 
> client.loop_forever()
> ---
> 
> when invoked without proxychains:
> 
> > python test.py 
> 
> python broker-sys.py 
> Traceback (most recent call last):
>   File ""tests.py"", line 31, in <module>
>     client.connect(""test.mosquitto.org"", 1883, 60)
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 600, in connect
>     return self.reconnect()
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 722, in reconnect
>     self._sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
>   File ""/usr/lib/python2.7/socket.py"", line 571, in create_connection
>     raise err
> socket.error: [Errno 101] Network is unreachable
> 
> with proxychains (proxy IP changed to 99.99.99.99):
> 
> > proxychains python test.py 
> > ProxyChains-3.1 (http://proxychains.sf.net)
> > |S-chain|-<>-99.99.99.99:8080-<><>-127.0.0.1:54202-<--denied
> > Traceback (most recent call last):
> >   File ""test.py"", line 26, in <module>
> >     client = mqtt.Client()
> >   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 410, in **init**
> >     self._sockpairR, self._sockpairW = _socketpair_compat()
> >   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 262, in _socketpair_compat
> >     sock1.connect((""localhost"", port))
> >   File ""/usr/lib/python2.7/socket.py"", line 224, in meth
> >     return getattr(self._sock,name)(*args)
> > socket.error: [Errno 111] Connection refused
> 
> For reference mosquitto_pub with proxychains:
> 
> > proxychains mosquitto_pub -d -h test.mosquitto.org -t ""house/temp/xxxx123"" -m 100
> > ProxyChains-3.1 (http://proxychains.sf.net)
> > |S-chain|-<>-99.99.99.99:8080-<><>-85.119.83.194:1883-<><>-OK
> > Received CONNACK
> > Sending PUBLISH (d0, q0, r0, m1, 'house/temp/xxxx123', ... (3 bytes))

On 2015-01-12 10:34:25 -0500, DD G wrote:

> Using python 2.7 and paho-mqtt was installed using:
> 
> sudo pip install paho-mqtt

On 2015-01-12 19:51:03 -0500, Roger Light wrote:

> Can proxychains be configured to not proxy the connections to 127.0.0.1?

On 2015-01-13 04:59:03 -0500, DD G wrote:

> It appears that this might be possible by applying a patch to proxychains:
> 
> http://serverfault.com/questions/481408/proxychains-is-redirecting-packets-destined-to-local-machine-to-the-proxy-server
> 
> but it doesn't seem to work in the package that is in the Ubuntu 14.04 repo.
> 
> I put the appropriate line in the proxychains.conf:
> 
> localnet 127.0.0.0/255.0.0.0
> 
> and the python still has the same error
> 
> proxychains python test.py 
> ProxyChains-3.1 (http://proxychains.sf.net)
> |S-chain|-<>-99.99.99.99:8080-<><>-127.0.0.1:35760-<--denied
> Traceback (most recent call last):
>   File ""test.py"", line 26, in <module>
>     client = mqtt.Client()
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 410, in **init**
>     self._sockpairR, self._sockpairW = _socketpair_compat()
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 262, in _socketpair_compat
>     sock1.connect((""localhost"", port))
>   File ""/usr/lib/python2.7/socket.py"", line 224, in meth
>     return getattr(self._sock,name)(*args)
> socket.error: [Errno 111] Connection refused

On 2015-01-16 04:34:12 -0500, Roger Light wrote:

> I'm afraid the conclusion I've had to come to here is that the problem is that proxychains doesn't support disabling proxying of connections to localhost. You will have to find a proxy solution that allows you to decide which connections are proxied and which aren't. I'm surprised this isn't already a feature to be honest.
> 
> I'm closing this bug as ""not eclipse"" because I don't believe this is a bug in the Paho Python client.

On 2015-01-16 07:00:24 -0500, DD G wrote:

> I agree with you that the proxychains aspect of this tkt is not a Paho Python client issue.
> 
> However I was only using that as a workaround for the underlying issue, namely that you cannot use the Paho Python client is you are behind a HTTP proxy.
> 
> So can we add that as a feature request please?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/20/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/21,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/21,paho.mqtt.python,131389908,21,Fail to connect using client.connect,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:53:16Z,2016-02-04T15:53:17Z,"migrated from Bugzilla [#446062](https://bugs.eclipse.org/bugs/show_bug.cgi?id=446062)
status CLOSED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _v0.5_ on platform _PC_
Assigned to: Roger Light

On 2014-10-06 10:59:00 -0400, Micha Shepher wrote:

> Running on ubuntu 14.04 with the python bindings I notice the following:
> After 
> 
> client = mqtt.client()
> print client.connect('localhost', 1883, 60)
> 
> This appears to work (MQTT_ERR_SUCCESS). However, syslog complains:
> 
> Oct  6 16:48:15 sr01000458 mosquitto[15820]: New connection from 192.168.17.80.
> Oct  6 16:48:15 sr01000458 mosquitto[15820]: Invalid protocol ""MQTT"" in CONNECT from 192.168.17.80.
> Oct  6 16:48:15 sr01000458 mosquitto[15820]: Socket read error on client (null), disconnecting.
> 
> The same code (taken from the examples) works fine connecting to iot.eclipse.org, mosquitto.org, m2m.eclipse.org and all other remote brokers.
> 
> Also, the local broker runs fine with the command line clients mosquitto_sub and mosquitto_pub.

On 2014-11-04 10:03:56 -0500, Roger Light wrote:

> This is down to the Python client attempting to connect with the MQTT v3.1.1 protocol by default. If the broker rejects the connection, it should then attempt to connect with MQTT v3.1 instead. Some brokers (including old versions of mosquitto) don't reject the connection ""properly"" so it is not really possible to detect this scenario correctly.
> 
> The reason that iot.eclipse.org and test.mosquitto.org work is because they support MQTT v3.1.1. Presumably the versions of mosquitto_pub and _sub that you have match the version of mosquitto you have, so they don't try to use MQTT v3.1.1.
> 
> For you, the problem can be solved by upgrading your version of mosquitto. I'm not entirely sure what the best long term solution is though.

On 2015-01-12 19:43:12 -0500, Roger Light wrote:

> I'm marking this bug as a duplicate of 451735 because the solution is the same, even though what you've reported is slightly different. This should hopefully make it easier to track.
> 
> **\* This bug has been marked as a duplicate of bug 451735 ***
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/21/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/22,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/22,paho.mqtt.python,131389950,22,"Cannot connect with python client (1.0 and 1.1): ""[Errno 54] Connection reset by peer""",jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:53:29Z,2016-02-04T15:53:29Z,"migrated from Bugzilla [#451735](https://bugs.eclipse.org/bugs/show_bug.cgi?id=451735)
status RESOLVED severity _major_ in component _MQTT-Python_ for _1.1_
Reported in version _1.1_ on platform _Macintosh_
Assigned to: Roger Light

On 2014-11-16 10:10:35 -0500, Marcel M wrote:

> This error is generated in mqttc.loop_forever().
> 
> The server address is correct (verified with other clients).
> I tried the default version from pipit and 1.0 and 1.1 from git. The retry_first_connection parameter in v1.1 looked promising but didn't help.
> Using python 2.7.8.
> 
> This is the program, adapted from an example:
> 
> import paho.mqtt.client as mqtt
> 
> def on_connect(mqttc, obj, flags, rc):
>     print(""rc: ""+str(rc))
> 
> def on_message(mqttc, obj, msg):
>     print(msg.topic+"" ""+str(msg.qos)+"" ""+str(msg.payload))
> 
> def on_publish(mqttc, obj, mid):
>     print(""mid: ""+str(mid))
> 
> def on_subscribe(mqttc, obj, mid, granted_qos):
>     print(""Subscribed: ""+str(mid)+"" ""+str(granted_qos))
> 
> def on_log(mqttc, obj, level, string):
>     print(string)
> # If you want to use a specific client id, use
> # mqttc = mqtt.Client(""client-id"")
> # but note that the client id must be unique on the broker. Leaving the client
> # id parameter empty will generate a random id for you.
> 
> mqttc = mqtt.Client()
> mqttc.on_message = on_message
> mqttc.on_connect = on_connect
> mqttc.on_publish = on_publish
> mqttc.on_subscribe = on_subscribe
> # Uncomment to enable debug messages
> 
> mqttc.on_log = on_log
> mqttc.connect(""192.168.2.201"", 1883, 60)
> # mqttc.subscribe(""$SYS/#"", 0)
> 
> mqttc.subscribe(""outTopic"", 0)
> 
> mqttc.loop_forever(retry_first_connection=True)  # # for version 1.1
> # mqttc.loop_forever()  # for version 1.0

On 2014-11-16 10:18:39 -0500, Marcel M wrote:

> Found a solution/workaround: adding the protocol to the client instantiation makes it work. 
> 
> mqttc = mqtt.Client(protocol=mqtt.MQTTv31)
> 
> (note that mqtt.MQTTv311 gives the error, mqtt.MQTTv31 does not).
> 
> Maybe not a bug but confusing for the user. None of the other clients I tried (MQTT lens, mosquitto-sub) required me to specify the protocol.
> 
> It would be helpful to stress the importance of this 'optional' param in the docs.

On 2015-01-12 19:39:19 -0500, Roger Light wrote:

> I have reverted the default behaviour to use v3.1 when connecting. The essential problem is that server implementations that don't support v3.1.1 often don't return the correct CONNACK code when an invalid protocol version is sent to them, so the automatic protocol fallback doesn't work.

On 2015-01-12 19:43:12 -0500, Roger Light wrote:

> **\* Bug 446062 has been marked as a duplicate of this bug. ***
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/22/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/23,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/23,paho.mqtt.python,131390002,23,loop_stop can run before _thread_main,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:53:42Z,2016-02-04T15:53:42Z,"migrated from Bugzilla [#448428](https://bugs.eclipse.org/bugs/show_bug.cgi?id=448428)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _v0.5_ on platform _PC_
Assigned to: Roger Light

On 2014-10-22 17:09:07 -0400, Kees Bakker wrote:

> Hi,
> 
> Consider this little example
> 
>   import paho.mqtt.client as mqtt
> 
>   mqttc = mqtt.Client()
>   mqttc.username_pw_set('user', 'password')
>   mqttc.connect('ftp.mydomain.com')
>   mqttc.loop_start()
> 
>   mqttc.publish(""SODAQ/rainstation/16c28153/rain1"", '0', retain=True)
> 
>   mqttc.loop_stop()
> 
> On some Linux systems (not all) it hangs.
> 
> With simple debugging (adding print statements) I found out that in that case Client.loop_stop runs before(!) Client._thread_main.
> 
> And when that happens _thread_terminate is first made True, and then False again before the while loop in loop_forever gets a chance to terminate.
> 
> A workaround is to insert a sleep between loop_start and loop_stop

On 2014-10-22 17:45:41 -0400, Roger Light wrote:

> Thanks, that's interesting.
> 
> I'm not disputing the central point of your report, but would just like to point out that what you're doing isn't really the best way of using the API. I'd use loop_forever(), then call disconnect() in the on_publish() callback.
> 
> Or just use paho.mqtt.publish.single().
> 
> I'll see what the best approach for fixing this is though.

On 2014-10-22 18:36:20 -0400, Roger Light wrote:

> I haven't managed to reproduce it yet myself. Does this do the trick?
> 
> diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
> index b662aeb..46d0833 100755
> --- a/src/paho/mqtt/client.py
> +++ b/src/paho/mqtt/client.py
> @@ -1282,6 +1282,7 @@ class Client(object):
>          if self._thread is not None:
>              return MQTT_ERR_INVAL
> - ```
>      self._thread_terminate = False
>    self._thread = threading.Thread(target=self._thread_main)
>    self._thread.daemon = True
>    self._thread.start()
>   ```
>   
>   @@ -2247,8 +2248,6 @@ class Client(object):
>        self._callback_mutex.release()
>   
>    def _thread_main(self):
> -        run = True
> -        self._thread_terminate = False
>        self._state_mutex.acquire()
>        if self._state == mqtt_cs_connect_async:
>            self._state_mutex.release()

On 2014-10-23 03:43:44 -0400, Kees Bakker wrote:

> (In reply to Roger Light from comment # 1)
> 
> > Thanks, that's interesting.
> > 
> > I'm not disputing the central point of your report, but would just like to
> > point out that what you're doing isn't really the best way of using the API.
> > I'd use loop_forever(), then call disconnect() in the on_publish() callback.
> > 
> > Or just use paho.mqtt.publish.single().
> > 
> > I'll see what the best approach for fixing this is though.
> 
> He, I'm not at all surprised that you say this :-) This is what happens when someone new starts using the software.
> 
> I was just trying to figure out what to do. For me, the reason not to use publish.single() was that I have about 10-15 topics that I want to publish to. It seems a waste to repeately open the connection, send a message, and close. I could (should?) use publish.multiple().
> 
> But then again, you would never have known about this problem, now would you?

On 2014-10-23 04:17:33 -0400, Kees Bakker wrote:

> (In reply to Roger Light from comment # 2)
> 
> > I haven't managed to reproduce it yet myself. Does this do the trick?
> > 
> > diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
> > index b662aeb..46d0833 100755
> > --- a/src/paho/mqtt/client.py
> > +++ b/src/paho/mqtt/client.py
> > @@ -1282,6 +1282,7 @@ class Client(object):
> >          if self._thread is not None:
> >              return MQTT_ERR_INVAL
> > - ```
> >      self._thread_terminate = False
> >    self._thread = threading.Thread(target=self._thread_main)
> >    self._thread.daemon = True
> >    self._thread.start()
> >   ```
> >   
> >   @@ -2247,8 +2248,6 @@ class Client(object):
> >        self._callback_mutex.release()
> >   
> >    def _thread_main(self):
> > -        run = True
> > -        self._thread_terminate = False
> >        self._state_mutex.acquire()
> >        if self._state == mqtt_cs_connect_async:
> >            self._state_mutex.release()
> 
> Yes, that does the trick. Thanks.
> 
> What are your plans with PyPi? How is that handled? At the moment it still has 1.0

On 2014-11-01 14:12:51 -0400, Roger Light wrote:

> I've committed the change now.
> 
> To be honest I'm a bit confused about pypi - I thought I'd pushed the 1.0.x releases but they certainly aren't there. I'll make sure it's sorted once I release 1.0.3.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/23/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/24,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/24,paho.mqtt.python,131390049,24,Reconnect fails when inflight messages == max_inflight_messages,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:53:55Z,2016-02-04T15:53:55Z,"migrated from Bugzilla [#443935](https://bugs.eclipse.org/bugs/show_bug.cgi?id=443935)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _future_ on platform _PC_
Assigned to: Roger Light

On 2014-09-12 08:15:44 -0400, Hiram van Paassen wrote:

> When there is a connection failure which last long enough to fill the out_messages list and sets self._inflight_messages == self._max_inflight_messages the MQTT library stops sending out messages when connected again.
> 
> Possible solution:
> reset self._inflight_messages to 0 in ""_messages_reconnect_reset_out()"" in case self._inflight_messages => self._max_inflight_messages
> 
> Reproduction path:
> Make a client which publishes every 5 seconds
> Set max_inflight to 1 (default also works but takes longer)
> Severe the connection to the broker (In our case pull the wan cable from the accesspoint the client is connected to)
> Wait untill inflight_messages is higher than max_inflight
> Restore connection
> 
> Observe the MQTT library accepts new publishes but does not actually send publish MQTT packets. Neither for new nor for old publishes
> 
> While the connection is severed the MQTT library only gives MQTT_ERR_NO_CONN as long as self._inflight_messages < self._max_inflight_messages

On 2014-09-12 08:20:01 -0400, Hiram van Paassen wrote:

> Additional information:
> This is using qos = 2
> 
> This happens because  self._inflight_messages is only decreased after PUBREL or PUBACKCOMP and those are not send for PUBLISHes that are never received by the broker

On 2014-09-12 08:31:00 -0400, Hiram van Paassen wrote:

> diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
> index a28c81f..8a8c456 100755
> --- a/src/paho/mqtt/client.py
> +++ b/src/paho/mqtt/client.py
> @@ -1822,6 +1822,7 @@ class Client(object):
>                      pass
>              else:
>                  m.state = mqtt_ms_invalid
> - ```
>              self._inflight_messages = 0
>    self._out_message_mutex.release()
>   ```
>   
>    def _messages_reconnect_reset_in(self):

On 2014-09-12 16:27:02 -0400, Roger Light wrote:

> Thanks for this, I've pushed a change that I think fixes the bug.

On 2014-09-15 08:15:25 -0400, Hiram van Paassen wrote:

> Seems that you missed a change:
> 
> You also need to add:
> 
> diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
> index a817f78..b46dc1e 100755
> --- a/src/paho/mqtt/client.py
> +++ b/src/paho/mqtt/client.py
> @@ -2138,9 +2138,9 @@ class Client(object):
>                  if m.qos > 0 and m.state == mqtt_ms_queued:
>                      self._inflight_messages = self._inflight_messages + 1
>                      if m.qos == 1:
> -                        m.state = mqtt_ms_wait_puback
> -                        m.state = mqtt_ms_wait_for_puback
>                    elif m.qos == 2:
> -                        m.state = mqtt_ms_wait_pubrec
> -                        m.state = mqtt_ms_wait_for_pubrec
>                    rc = self._send_publish(m.mid, m.topic, m.payload, m.qos, m.retain, m.dup)
>                    if rc != 0:
>                        return rc

On 2014-09-15 10:42:10 -0400, Roger Light wrote:

> Yep, you're right. Thanks. That's pushed as well now.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/25,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/25,paho.mqtt.python,131390126,25,Lost connection results in unrecoverable state (both SSL and non SSL),jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:54:08Z,2016-02-04T15:54:08Z,"migrated from Bugzilla [#443881](https://bugs.eclipse.org/bugs/show_bug.cgi?id=443881)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.0_ on platform _PC_
Assigned to: Roger Light

On 2014-09-11 17:44:12 -0400, Jeff Jasper wrote:

> I am using the client (checked out from 5605f91) in a fashion where I invoke loop_start. The network environment is an environment where the internet connection is unstable and occasionally the connection will drop long enough to trigger the disconnect callback. Messages continue to be published to the client during this period. Shortly after the internet connection is re-established a ValueError with the message ""file descriptor cannot be a negative integer (-1)"" is encountered in the loop method:
> socklist = select.select(rlist, wlist, [], timeout) (line 787)
> The rlist and wlist argument fd fields are both disconnected with values of -1.
> 
> Currently the previous statement is invoked with the catch being a TypeError. Since it's uncaught the client never reconnects and publishes subsequent messages. If I add the proper catch the client will reconnect and then go back into a functional state.
> 
> Let me know if anymore detail is needed and try and provide what I can.

On 2014-09-12 17:54:25 -0400, Roger Light wrote:

> Thanks for the report.
> 
> It feels like returning MQTT_ERR_CONN_LOST or MQTT_ERR_NO_CONN is the correct choice after the catch, but this might trigger another reconnection attempt - it's not entirely clear to me from your description whether this is required.
> 
> Are you returning an error or success after the catch? Tell me that and then it's a pretty easy fix.

On 2014-09-13 12:56:01 -0400, Jeff Jasper wrote:

> Since the socket appears to be disconnected a reconnect is required so I continue to have the method return MQTT_ERR_CONN_LOST. For now I've modified the code as follows:
> 
> ```
>     try:
>         socklist = select.select(rlist, wlist, [], timeout)
>     except Exception as ex:
>         template = ""An exception of type {0} occured. Arguments:\n{1!r}""
>         message = template.format(type(ex).__name__, ex.args)
>         logging.debug(message)
>         # Socket isn't correct type, in likelihood connection is lost
>         return MQTT_ERR_CONN_LOST
> ```

On 2014-09-13 16:24:46 -0400, Roger Light wrote:

> Thanks, I've pushed a commit to fix this.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/25/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/26,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/26,paho.mqtt.python,131390190,26,Failing to set MQTTv311/MQTTv31 protocol on Client object,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:54:21Z,2016-02-04T15:54:21Z,"migrated from Bugzilla [#440169](https://bugs.eclipse.org/bugs/show_bug.cgi?id=440169)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.0_ on platform _PC_
Assigned to: Roger Light

On 2014-07-22 17:59:47 -0400, Andy Piper wrote:

> client = mqtt.Client(client_id="""", clean_session=True, userdata=None, protocol=MQTTv311)
> client.connect(""localhost"", 1883, 60)
> 
> Results in:
>   File ""subscribe.py"", line 16, in <module>
>     client = mqtt.Client(client_id="""", clean_session=True, userdata=None, protocol=MQTTv31)
> NameError: name 'MQTTv311' is not defined
> 
> The same applies with both MQTTv31 and MQTTv311.
> Setting protocol to the numeric value of 4 does work.

On 2014-07-30 10:10:10 -0400, Roger Light wrote:

> I replied to this by email, didn't realise it hadn't got through.
> 
> Andy, this looks like a namespace problem - neither MQTTv31 nor
> MQTTv311 are global Python variables. Try mqtt.MQTTv31 or
> mqtt.MQTTv311 instead. I guess this probably needs a documentation
> addition somewhere.

On 2014-07-30 14:50:04 -0400, Andy Piper wrote:

> Sounds like patching the doc / pydoc would resolve this, yes. Thanks!

On 2014-09-12 17:41:09 -0400, Roger Light wrote:

> I've added some details to the in-code documentation, so this is now fixed.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/26/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/27,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/27,paho.mqtt.python,131390273,27,"if hosts file not set up correctly, Client constructor will fail",jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:54:33Z,2016-02-04T15:54:34Z,"migrated from Bugzilla [#439277](https://bugs.eclipse.org/bugs/show_bug.cgi?id=439277)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _1.0_ on platform _PC_
Assigned to: Roger Light

On 2014-07-09 14:31:38 -0400, Justin Scherer wrote:

> In the Client constructor, there is a call to the following function:
>      _socketpair_compat()
> 
> In the preceding function, there is a call to socket.bind that passes the following tuple in:
>      (""localhost"", 0)
> 
> Now, everyone should have a hosts file in their etc that gives the following to localhost:
>       localhost 127.0.0.1
> 
> But, there are embedded systems and forms of Linux that do not do this. I would suggest the following improvement to the codebase to make this a more hardy build:
> 
> check to see if localhost is defined in the hosts file, if errno -2 gets thrown, then just pass in ""127.0.0.1"". If anyone would like to check this, you can get rid of your hosts file in /etc and try to run the code from the file. 
> 
> I can also make this correction if anyone feels that it needs to be done. I would be happy to.

On 2014-09-12 17:31:49 -0400, Roger Light wrote:

> This is now fixed in the repository, thanks very much for the report.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/27/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/28,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/28,paho.mqtt.python,131390367,28,Ssl lost connection results in non functional connection,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:54:46Z,2016-05-26T22:28:14Z,"migrated from Bugzilla [#436463](https://bugs.eclipse.org/bugs/show_bug.cgi?id=436463)
status UNCONFIRMED severity _normal_ in component _MQTT-Python_ for _0.9_
Reported in version _0.9_ on platform _PC_
Assigned to: Roger Light

On 2014-06-03 10:39:43 -0400, Hiram van Paassen wrote:

> We use a script to subscribe a power supply to mqtt over ssl. We notice that sometimes the network connection is not stable and the script looses its connection.  It should try to reconnect because we use loop_start() (same behavior with loop_forever()) but it fails to make a proper connection.
> 
> I noticed that in a previous version the ssl.read(1) call in loop_read() would sometimes ""read"" 0 bytes when this happens
> 
> Unfortunately I have not been able to find the real source or to create better logging but here is some logging from our script to show what happens:
> 
> The source of published messages is guaranteed to publish every 5 seconds even after the network failure
> 
> $ ./start_script.py
> Checking watchdogs
> Connection Accepted.
> subscribed
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> Got published message
> Checking watchdogs
> [Errno 104] Connection reset by peer
> Checking watchdogs
> Checking watchdogs
> Connection Accepted.
> Connection Accepted.
> Checking watchdogs
> Connection Accepted.
> Checking watchdogs
> Connection Accepted.
> Connection Accepted.
> Checking watchdogs
> Connection Accepted.
> Checking watchdogs
> Connection Accepted.
> Checking watchdogs
> Checking watchdogs
> Connection Accepted.
> 
> relevant code:
> 
> def on_message(mosq, userdata, mqtt_message):
>     print ""Got published message""
> 
> def on_connect(mosq, userdata, rc):
>     print mosquitto.connack_string(rc)
>     # subscribe to commands
>     mqtt.subscribe(COMMAND_TOPIC, 2)
> 
> def on_subscribe(mosq, userdata, mid, granted_qos):
>     print ""subscribed""
> 
> mqtt = mosquitto.Client(clean_session=True)
> mqtt.tls_set(CERT_DIR)
> mqtt.username_pw_set(""user"", ""password"")
> # set message callback
> 
> mqtt.on_message = on_message
> mqtt.on_connect = on_connect
> mqtt.on_subscribe = on_subscribe
> # keepalive of 50 seconds
> # because loadbalancer loses connection after 60 seconds of inactivity
> 
> mqtt.connect(MQTT_HOSTNAME, 8883, 50)
> 
> mqtt.loop_start()
> 
> I would expect to see the script reconnect and to start receiving published messages again. This regardless of clean_session=True btw.

On 2014-06-17 04:12:04 -0400, Roger Light wrote:

> I wonder if the fix used for bug # 436615 fixes this for you as well. Would you be able to try the latest code from the repository please?

On 2014-09-12 17:22:12 -0400, Roger Light wrote:

> Could this be related to the other bugs you've filed? It feels like it could be.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/28/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/28,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMzIyOA==,paho.mqtt.python,222013228,28,NA,ralight,79578,Roger Light,,NA,2016-05-26T22:28:14Z,2016-05-26T22:28:14Z,"Closing as likely to have been fixed with another bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMzIyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/29,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/29,paho.mqtt.python,131390441,29,Publish module - function single() ignores parameter 'protocol',jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:54:59Z,2016-02-04T15:54:59Z,"migrated from Bugzilla [#438484](https://bugs.eclipse.org/bugs/show_bug.cgi?id=438484)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _v0.5_ on platform _Other_
Assigned to: Roger Light

On 2014-06-29 06:37:34 -0400, Franis Sirkovic wrote:

> Finction single() in publish module does not pass parameter protocol to function multiple(). So, multiple() uses default version of the protocol MQTTV311. So, it is impossible to use brokers that support just older versions (RabbitMQ - MQTTv31).

On 2014-09-12 17:14:12 -0400, Roger Light wrote:

> This is fixed in the repository, thanks for the report.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/29/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/30,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/30,paho.mqtt.python,131390513,30,Possible SSL data leak on publish,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:55:11Z,2016-02-04T15:55:12Z,"migrated from Bugzilla [#443964](https://bugs.eclipse.org/bugs/show_bug.cgi?id=443964)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.1_
Reported in version _future_ on platform _PC_
Assigned to: Roger Light

On 2014-09-12 11:15:47 -0400, Hiram van Paassen wrote:

> It is possible when using SSL to send data unencrypted
> 
> self._sock is created before self._ssl. A publish which is sent in between is sent unencrypted and messes up the ssl handshake. Depending on the exact place in the handshake this can trick the client in sending some more unencrypted publishes before giving up
> 
> Possible solution:
> assign self._sock only after self._ssl is assigned. Store the reference untill then in a temporary variable (in reconnect() )

On 2014-09-12 17:11:33 -0400, Roger Light wrote:

> Thanks, this is a very good find.
> 
> I've pushed a commit that should fix it.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/31,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/31,paho.mqtt.python,131390589,31,MQTT 3.1.1 support for Python client,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:55:24Z,2016-02-04T15:55:25Z,"migrated from Bugzilla [#434143](https://bugs.eclipse.org/bugs/show_bug.cgi?id=434143)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _1.0_
Reported in version _1.0_ on platform _PC_
Assigned to: Roger Light

On 2014-05-05 15:45:36 -0400, Roger Light wrote:

> 1. By default a client library will try to connect with MQTT 3.1.1, and if this fails, try again with MQTT 3.1.  This will allow existing applications to work with new servers, unchanged.
> 2. A new connect option which allows the application to specify 3.1.1 or 3.1 only.

On 2014-05-05 15:46:58 -0400, Roger Light wrote:

> Blocks 433833.

On 2014-05-12 17:40:23 -0400, Roger Light wrote:

> This behaviour is now implemented in the 1.0 branch.
> 
> http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/log/?h=1.0
> 
> The choice of protocol is set when creating the client not when connecting.

On 2014-05-31 04:52:18 -0400, Roger Light wrote:

> Reopening because ""session present"" not currently supported in on_connect callback.

On 2014-06-12 05:36:31 -0400, Ian Craggs wrote:

> Roger,
> 
> 1) are you able to add the session present flag update for a 1.0 release on the 25th June?
> 
> 2) is that support also in Mosquitto?  I've added it to the test MQTT server in org.eclipse.paho.testing.  I was thinking of running a copy of the test server on iot.eclipse.org because we can configure that to behave erroneously if we want to, for the purposes of testing the clients.

On 2014-06-20 18:00:22 -0400, Roger Light wrote:

> Resolved in this commit: http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/commit/?id=SHA: 713955bd6123059044d928526d01d3aa4f8b16ca
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/31/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/32,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/32,paho.mqtt.python,131390663,32,ssl certificates are not parsed correctly,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:55:37Z,2016-02-04T15:55:38Z,"migrated from Bugzilla [#436379](https://bugs.eclipse.org/bugs/show_bug.cgi?id=436379)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _0.9_
Reported in version _0.9_ on platform _PC_
Assigned to: Roger Light

On 2014-06-02 11:30:33 -0400, Hiram van Paassen wrote:

> Here is a patch to allow the GoDaddy root cert (as is included by firefox etc) to be used with the paho python client using ssl
> 
> https://git.eclipse.org/r/#/c/24855/

On 2014-06-03 12:15:05 -0400, Roger Light wrote:

> I agree, this looks like a copy-paste error.
> 
> I don't believe that this is anything to do with CA certificates though, the check that you have modified is purely for host certificates that have the subjectAltName field.
> 
> If you update the commit message I'll be very happy to accept the change. It's the first submission I've had over gerrit though, so I need to check that I do everything correctly for IP etc., which might delay me slightly.

On 2014-06-04 02:24:00 -0400, Hiram van Paassen wrote:

> Changed commit and rebased to latest version.

On 2014-06-04 02:26:01 -0400, Hiram van Paassen wrote:

> If there are some hassles regarding IP etc. Feel free to apply your own fix to the same effect ;-)

On 2014-06-04 17:17:47 -0400, Roger Light wrote:

> Does the email you used in the commit match the one that you signed the Eclipse CLA with?

On 2014-06-06 07:16:06 -0400, Hiram van Paassen wrote:

> Not sure i think the one from the commit message. I cannot find with which email I signed. But both email addresses are linked to my account and gerrit accepts my pushes saying I have signed a CLA

On 2014-06-06 23:29:04 -0400, Roger Light wrote:

> Ok great, that should be fine then.
> 
> There's only one other thing, and that is to include
> 
> Bug: 436379
> 
> in the commit message footer. I should've spotted that before, sorry. Like I said, you're a bit of a guinea pig for me here :)

On 2014-06-07 11:52:04 -0400, Hiram van Paassen wrote:

> Sure, done

On 2014-06-07 16:05:09 -0400, Roger Light wrote:

> I've approved and merged your patch, thanks for your patience!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/32/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/33,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/33,paho.mqtt.python,131390739,33,Disconnect hangs on loop_forever() not returning in paho.mqtt.publish.multiple,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:55:50Z,2016-02-04T15:55:50Z,"migrated from Bugzilla [#436615](https://bugs.eclipse.org/bugs/show_bug.cgi?id=436615)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _0.9_
Reported in version _0.9_ on platform _PC_
Assigned to: Roger Light

Original attachment names and IDs:
- _[src-paho-mqtt-client-py.diff](https://bugs.eclipse.org/bugs//attachment.cgi?id=243949)_ (ID 243949)

On 2014-06-04 13:33:49 -0400, Ruben van Staveren wrote:

> Created attachment 243949
> Patch against 0.9.1. partly duplicates 436379
> 
> Using this simple program keeps the client waiting forever as _packet_write cannot escape the loop when write_length is zero. 
> 
> Attached is a diff that more or less duplicates the clearing out of self._current_out_packet. Not sure if the mutexes are required when write_length is zero.
> 
> Note that since this diff is against 0.9.1 it also includes a fix mentioned in 436379 
> # ! /usr/bin/env python
> 
> import paho.mqtt.publish as publish
> import ssl
> 
> try:
>     publish.multiple(
>         [
>             {'topic':""topic/test"", 'payload':""test123""},
>             {'topic':""topic/test"", 'payload':""test456""},
>             {'topic':""topic/test"", 'payload':""test789""},
>         ],
>         hostname=""server.example.com"",
>         port=8883,
>         will={'topic':""topic/status"", 'payload':""Unexpected EOF""},
>         tls={
>             'ca_certs': ""ca.crt"", 
>             'certfile': ""client.crt"", 
>             'keyfile': ""client.key"",
>             'tls_version': ssl.PROTOCOL_TLSv1
>         })
> except ssl.SSLError as e:
>     print e

On 2014-06-04 17:00:36 -0400, Roger Light wrote:

> Thanks for the report, I've pushed a fix for it.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/33/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/34,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/34,paho.mqtt.python,131390825,34,Unable to determine version number at runtime,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:56:03Z,2016-02-04T15:56:03Z,"migrated from Bugzilla [#435112](https://bugs.eclipse.org/bugs/show_bug.cgi?id=435112)
status RESOLVED severity _enhancement_ in component _MQTT-Python_ for _0.9_
Reported in version _unspecified_ on platform _All_
Assigned to: Roger Light

On 2014-05-17 03:43:48 -0400, Christian Clauss wrote:

> Enhancement request: add .**VERSION** attribute to the Paho MQTT-Python module to enable detecting software version number at runtime.
> ---
> 
> $ python
> 
> > > > > import paho
> > > > > paho.**VERSION**
> > > > > Traceback (most recent call last):
> > > > >   File ""<stdin>"", line 1, in <module>
> > > > > AttributeError: 'module' object has no attribute '**VERSION**'

On 2014-05-29 16:20:19 -0400, Roger Light wrote:

> Thanks for the report. After a bit of thought, I've added the version information to paho.mqtt.**version**. I think this is more appropriate than paho.**version**. 
> 
> http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/commit/?id=SHA: 525e684882d9294743922108d8b6918bb7278019
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/34/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/35,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/35,paho.mqtt.python,131390914,35,"topic_matches_sub(""test/6/#"", ""test/3"")",jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:56:16Z,2016-05-26T22:27:35Z,"migrated from Bugzilla [#433687](https://bugs.eclipse.org/bugs/show_bug.cgi?id=433687)
status VERIFIED severity _normal_ in component _MQTT-Python_ for _---_
Reported in version _v0.5_ on platform _PC_
Assigned to: Roger Light

On 2014-04-28 13:48:54 -0400, Tobias Assarsson wrote:

> running:
> # !/usr/bin/python2
> 
> import paho.mqtt.client as client
> client.topic_matches_sub(""test/6/#"", ""test/3"")
> True
> 
> debugging the client.topic_matches_sub with prints after the 
> ""if sub[spos] == topic[tpos]""
> and one in the else-case where result turns False:
> 
> t == t 
> e == e
> s == s
> t == t
> / == /
> 
> last test is missing (6 != 3).

On 2014-04-28 16:23:59 -0400, Roger Light wrote:

> Thanks very much for the report, well spotted!
> 
> I've pushed a commit which fixes the bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/35/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/36,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/36,paho.mqtt.python,131390993,36,Paho/Python Readme file update,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:56:28Z,2016-02-04T15:56:28Z,"migrated from Bugzilla [#431228](https://bugs.eclipse.org/bugs/show_bug.cgi?id=431228)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _---_
Reported in version _v0.5_ on platform _All_
Assigned to: Roger Light

Original attachment names and IDs:
- _[README.md](https://bugs.eclipse.org/bugs//attachment.cgi?id=241267)_ (ID 241267)

On 2014-03-26 08:15:35 -0400, Oscar Franco wrote:

> Created attachment 241267
> Updated readme file with basic information on the use of the library
> 
> Hello, my name is Oscar Franco.
> 
> I work for CodeRoad, we are a software company teamed up with several IoT partners, one of our partners Xively has asked us to go through the documentation of several libraries as some of them doesn't seem to be complete and/or accurate, my responsability is to update the paho-mqtt library documentation.
> 
> Although the current python library has a complete documentation inside the code via pydocs, the Readme file is far more easy to see while browsing for libraries to use the MQTT protocol, with this motiv I have a attached a updated version of the ""Readme.md"" file for the committers of the project to review and update.
> 
> Many thanks!

On 2014-04-16 16:45:22 -0400, Roger Light wrote:

> Thanks for this, I'm not entirely sure how to deal with the contribution properly.
> 
> This is mostly because it needs some modifications - a quick example is that MQTT should not be expanded any more. I can make the modifications I want but it complicates the contribution.

On 2014-04-17 08:27:06 -0400, Oscar Franco wrote:

> It's okay if you have to make some modifications to the file, you may proceed as you wish.
> 
> (In reply to Roger Light from comment # 1)
> 
> > Thanks for this, I'm not entirely sure how to deal with the contribution
> > properly.
> > 
> > This is mostly because it needs some modifications - a quick example is that
> > MQTT should not be expanded any more. I can make the modifications I want
> > but it complicates the contribution.

On 2014-04-22 13:18:51 -0400, Roger Light wrote:

> I've just pushed a commit that documents the whole of the client and publish modules.
> 
> http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/commit/?id=SHA: 8c01e63eb7555bba188f7aedefc67d5c931c25f1
> 
> I've not included any information on MQTT itself because the document is already quite long.
> 
> I would consider the bug resolved and have marked it as such, but if you disagree please reopen the bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/36/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/37,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/37,paho.mqtt.python,131391051,37,Example mqtt applications is not working,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:56:41Z,2016-02-04T15:56:41Z,"migrated from Bugzilla [#431698](https://bugs.eclipse.org/bugs/show_bug.cgi?id=431698)
status RESOLVED severity _normal_ in component _MQTT-Python_ for _---_
Reported in version _unspecified_ on platform _PC_
Assigned to: Roger Light

On 2014-04-01 07:32:09 -0400, Niclas Karlsson wrote:

> Hi,
> 
> I tried to run the sub.py and pub.py example applications but got the following error:
> Traceback (most recent call last):
>   File ""C:\GIT\mqtttools\org.eclipse.paho.mqtt.python\examples\sub.py"", line 54, in <module>
>     mqttc = mqtt.Client()
>   File ""C:\GIT\mqtttools\org.eclipse.paho.mqtt.python\src\paho\mqtt\client.py"", line 404, in **init**
>     self._sockpairR, self._sockpairW = _socketpair_compat()
>   File ""C:\GIT\mqtttools\org.eclipse.paho.mqtt.python\src\paho\mqtt\client.py"", line 262, in _socketpair_compat
>     sock1.connect((""localhost"", port))
>   File ""C:\Python27\lib\socket.py"", line 224, in meth
>     return getattr(self._sock,name)(*args)
> error: [Errno 10035] A non-blocking socket operation could not be completed immediately
> 
> I ran the latest code, SHA: 48b19a2272867854f097058dda4f55d05d93e28d

On 2014-04-16 16:02:18 -0400, Roger Light wrote:

> **\* Bug 432949 has been marked as a duplicate of this bug. ***

On 2014-04-16 16:12:36 -0400, Roger Light wrote:

> Thanks for the report, I believe this is now fixed in the latest version of the code which you can get from the repository. I would be grateful if you could verify that it works for you as well.

On 2014-04-17 07:35:33 -0400, David Parker wrote:

> FWIW, I haven't tried the pub/sub samples, but the latest version of client.py from the repository does fix the same problem I was having on Windows 7 (duplicate bug 432949).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/37/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/38,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/38,paho.mqtt.python,131391118,38,Exception:  Resource temporarily unavailable,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:56:54Z,2016-02-04T15:56:54Z,"migrated from Bugzilla [#430850](https://bugs.eclipse.org/bugs/show_bug.cgi?id=430850)
status RESOLVED severity _major_ in component _MQTT-Python_ for _---_
Reported in version _v0.5_ on platform _PC_
Assigned to: Roger Light

On 2014-03-20 23:47:14 -0400, Roy Barkas wrote:

> I'm running the paho python client connecting to a Hivemq server.
> All messages are sent with QOS=0.
> Typical message size is 100 bytes.
> Traffic is approx 130 messages per second.
> 
> Everything works fine for a while and then the following exception occurs.  Once this exception has occurred, no further messages are seen on the topic and
> on_publish() is not activated.
> 
> The client.publish() returns 0 in every case.
> 
> My best guess (and that's all it is) is that the socket buffer get's full, does something, and then the client doesn't recover from the problem.
> 
> I've worked around this by coding a deadman timer that is reset by each activation of the on_publish method.
> 
> But it would be a lot better to identify and fix the root cause.
> 
> Anything I can do on my end to fix it?
> ## Exception that is seen:
> 
> Traceback (most recent call last):
>   File ""/usr/lib/python2.7/threading.py"", line 808, in __bootstrap_inner
>     self.run()
>   File ""/usr/lib/python2.7/threading.py"", line 761, in run
>     self.__target(_self.__args, *_self.__kwargs)
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2091, in _thread_main
>     self.loop_forever()
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1188, in loop_forever
>     rc = self.loop(timeout, max_packets)
>   File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 790, in loop
>     self._sockpairR.recv(1)
> error: [Errno 11] Resource temporarily unavailable

On 2014-03-21 01:59:27 -0400, Roy Barkas wrote:

> The client in question is accessed from a number of places in a multi-threaded module.
> 
> As a temporary measure I've set up a separate client within the module for the high-traffic section.  Will report on results.

On 2014-03-21 04:53:02 -0400, Roger Light wrote:

> Thanks for the report. I think this was already fixed in this commit:
> 
> http://git.eclipse.org/c/paho/org.eclipse.paho.mqtt.python.git/commit/?id=SHA: 2f410697c9e0b4c122226f20af65ef6863acf81c
> 
> Could you try updating your client? That version should already be on pypi.

On 2014-04-16 16:10:01 -0400, Roger Light wrote:

> I believe this is already fixed in a later version of the code than you were using. If you still have a problem please reopen the bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/38/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/39,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/39,paho.mqtt.python,131391194,39,Errno 10035 on Client() instantiation,jpwsutton,1068763,James Sutton,,CLOSED,2016-02-04T15:57:06Z,2016-02-04T15:57:07Z,"migrated from Bugzilla [#432949](https://bugs.eclipse.org/bugs/show_bug.cgi?id=432949)
status CLOSED severity _normal_ in component _MQTT-Python_ for _---_
Reported in version _unspecified_ on platform _PC_
Assigned to: Roger Light

On 2014-04-16 13:11:09 -0400, David Parker wrote:

> C:\Console-2.00b148-Beta_32bit\Console2>python
> Python 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)] on win32
> Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
> 
> > > > import paho.mqtt.client
> > > > cli = paho.mqtt.client.Client()
> > > > Traceback (most recent call last):
> > > >   File ""<stdin>"", line 1, in <module>
> > > >   File ""C:\PYTHON27\lib\site-packages\paho\mqtt\client.py"", line 400, in **init**
> > > >     self._sockpairR, self._sockpairW = _socketpair_compat()
> > > >   File ""C:\PYTHON27\lib\site-packages\paho\mqtt\client.py"", line 258, in _socketpair_compat
> > > >     sock1.connect((""localhost"", port))
> > > >   File ""C:\PYTHON27\lib\socket.py"", line 224, in meth
> > > >     return getattr(self._sock,name)(*args)
> > > > socket.error: [Errno 10035] A non-blocking socket operation could not be completed immediately
> 
> To get this working on my system I simply hacked client.py as follows:
> _socketpair_compat(
>     ...
>     try:
>         sock1.connect((""localhost"", port))
>     except socket.error as err:
>         (msg) = err
>         if msg.errno != errno.EINPROGRESS and err.errno != EAGAIN:
>             raise
> 
> I have no idea if it was the right thing to do nor what the wider implications of the change I made are, but file under ""works for me, for now"" :)
> 
> I only see this problem on my Windows 7 system, various flavours of linux are fine without this fix/hack.

On 2014-04-16 16:02:18 -0400, Roger Light wrote:

> Thanks for the report, this is actually a duplicate bug although the description is quite similar.
> 
> **\* This bug has been marked as a duplicate of bug 431698 ***
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/39/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/42,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/42,paho.mqtt.python,141968915,42,keepalive value of 0 causes client to enter into indefinite loop,akashgoswami,1212881,,,CLOSED,2016-03-18T20:22:50Z,2016-05-31T15:52:14Z,"In one of the test cases, keepalive option was passed to 0 
This caused MQTT client to enter into a never ending loop and it keept on creating connection with broker and destroying them. Client was stuck at following location:

```
client.py"", line 1281, in loop_forever
    time.sleep(1)

```

The behavior was same with **client.connect()** functions as well as **publish** functions.

Ideally keepalive of 0 should either cause an invalid argument return or should internally revert to a default value. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/42/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/42,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE5ODU3NzA2Ng==,paho.mqtt.python,198577066,42,NA,ralight,79578,Roger Light,,NA,2016-03-18T23:11:19Z,2016-03-18T23:11:19Z,"Thanks, you're quite right. keepalive=0 is a perfectly valid setting, this code now just accepts it properly.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE5ODU3NzA2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/42,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE5ODU3ODIwNg==,paho.mqtt.python,198578206,42,NA,akashgoswami,1212881,,,NA,2016-03-18T23:13:31Z,2016-03-18T23:13:31Z,"Awesome! Thanks for super fast response and fix.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDE5ODU3ODIwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/48,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/48,paho.mqtt.python,145508068,48,python client messages per second?,anirudh-chhangani,2513446,Anirudh Chhangani,contact@anirudhchhangani.com,CLOSED,2016-04-03T14:49:12Z,2016-06-10T06:49:20Z,"Has anyone done any benchmark for the python client, how many MPS are you guys able to achieve?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/48/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/48,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMDM2MQ==,paho.mqtt.python,222930361,48,NA,ralight,79578,Roger Light,,NA,2016-06-01T08:44:46Z,2016-06-01T08:44:46Z,"It seems as though nobody has - it might be better asking this on the mailing list.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkzMDM2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/48,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTEwNjM2MQ==,paho.mqtt.python,225106361,48,NA,yoch,795960,yoch,,NA,2016-06-10T06:48:26Z,2016-06-10T06:48:26Z,"This is very dependent on things like messages size, network latency and broker speed (and CPU, of course).

Here a very basic benchmark : 

``` python
import paho.mqtt.client as mqtt
from time import time, sleep
import random


BROKER = ""localhost""
NB_MESSAGES = 100000
PAYLOAD_LEN = 128
TOPIC = 'a/b/c/d'

rcpt_counter = 0


def on_disconnect(client, userdata, rc):
    elapsed = time() - T0
    print('sending', NB_MESSAGES / elapsed, 'messages per sec')

def on_message(client, userdata, msg):
    global T1, rcpt_counter
    rcpt_counter += 1
    if rcpt_counter % 1000 == 0:
        T2 = time()
        print('  receiveing', 1000 / (T2 - T1), 'messages per sec')
        T1 = T2

p = mqtt.Client()
p.on_disconnect = on_disconnect
p.connect(BROKER)
p.loop_start()

c = mqtt.Client()
c.connect(BROKER)
c.on_message = on_message
c.subscribe(TOPIC)
c.loop_start()

#prepare some random data
data = [''.join(chr(random.getrandbits(8)) for _ in range(PAYLOAD_LEN))
        for _ in range(NB_MESSAGES)]

T0 = T1 = time()

for i in range(NB_MESSAGES):
    p.publish(TOPIC, data[i])

p.disconnect()

sleep(20)
c.disconnect()
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTEwNjM2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,paho.mqtt.python,149702320,53,Callbacks definition and inheritance,AlexisBRENON,1846046,Alexis BRENON,alexis.brenon@adyoulike.com,CLOSED,2016-04-20T08:47:19Z,2016-05-31T15:52:01Z,"Hi guys,

I'm using the Python implementation of MQTT through the paho-mqtt package. The documentation says that you can inherit from the Client class to create your own MQTT_client. Nevertheless, inheriting from the client doesn't allow you to define some on_\* functions directly in the class because they are overridden by the **init** call of the base class...

So, there is any particular reason the define Client.on_\* to None in the **init** instead of using classical member functions like this :

``` python
class Client(object):
    def __init__(self, ...):
        ...
        # Nothing about self.on_*

    def on_*(self, ...):
        pass
```

An implementation like this would not break the actual behavior (you can redefine the functions, using mqttc.on_connect = my_new_connect_function), and it would be easier to inherit, defining overriding on_\* functions in the sub-class.

If this seems a good idea, I propose myself to do the patch.

Kind regards,
Alexis BRENON 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzMzU1NA==,paho.mqtt.python,212333554,53,NA,AlexisBRENON,1846046,Alexis BRENON,alexis.brenon@adyoulike.com,NA,2016-04-20T08:48:09Z,2016-04-20T08:48:09Z,"@ralight answers:

> Hi Alexis,
> 
> That sounds like a good idea. I confess that inheritance isn't
> something I really use so it may have been possible in the past and
> I've broken it.
> 
> I'd be happy to accept a patch for this, please base it on the fixes
> branch, add an entry to the changelog and make sure you have signed
> the Eclipse CLA.
> 
> Thanks,
> 
> Roger
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzMzU1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzMzg3MA==,paho.mqtt.python,212333870,53,NA,AlexisBRENON,1846046,Alexis BRENON,alexis.brenon@adyoulike.com,NA,2016-04-20T08:49:24Z,2016-04-20T08:49:24Z,"@swails answers:

> Hi,
> 
> To be fair, the current class structure doesn't prevent inheritance -- just like the base class, you need to explicitly attach any callbacks as an attribute to the class.  Anything that's not the on_<action> callback is implemented directly as a method attribute, and can be overridden just fine in a subclass.
> 
> But this is definitely a strange pattern in my experience with Python.  Most instance attributes are assigned when the class definition is defined and is an unbound instance attribute on the class (rather than something that is bound at instance initialization).  A more natural API (to me, of course!) would be to either leave the on_\* callbacks not implemented and rely on subclassing to implement it -or- have a function where you can register the callbacks.  The former would be a substantial break in the API.  The latter could be implemented in a fully backwards-compatible way by making the on_<action> callbacks descriptors (via the property decorator)... but that's really the same thing that we already have from a functional perspective... it would just allow overriding to work in subclasses.
> 
> If it is decided that the callback registry approach is the one most liked, it will _allow_ subclasses to override that behavior, but in such cases I would consider that approach to be a bit of an anti-pattern (why would a subclass swap out a flexible register service with a hard-coded function?  It changes the whole interface of the object...).
> 
> As an aside, one of the reasons to avoid doing fancy stuff like that in the initializer in my experience is that I don't think it plays nicely with serialization -- you'll need to do a bit of work to get pickling/unpickling to work correctly for these types, I think.
> 
> All the best,
> Jason
> 
> Jason Swails
> Project Software Engineer
> Ext. 1680
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzMzg3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzNzY5Mg==,paho.mqtt.python,212337692,53,NA,AlexisBRENON,1846046,Alexis BRENON,alexis.brenon@adyoulike.com,NA,2016-04-20T08:58:10Z,2016-04-20T08:58:10Z,"Hi @swails.

Of course, the current structure doesn't prevent inheritance. Nevertheless, I think that explicitly attach callbacks is not a very straightforward method. Moreover, this implies that your callbacks are not named on_{connect,message,...} in which case they will be overridden by the initialization of the Client class.

I agree with your first proposal, but to prevent API break, you can define on_\* callbacks as just empty functions in the base Client() class, for example :

``` python
class Client:
    ...

    def on_connect(self, client, userdata, flag, rc):
            """"""Called when the broker responds to our connection request.
            This function may be overridden by sub-classes.

            client:     the client instance for this callback
            userdata:   the private user data as set in Client() or userdata_set()
            flags:      response flags sent by the broker
            rc:         the connection result
            """"""
            pass

    ...
```

The second proposal seems more complicated, and as I understand it you will have to do a lot of self.register_callback('calback_name', self.callback_name_function) in your subclass initialization.

I started to implement the first proposal. I will open an Issue and PR on Github to follow the discussion.

Kind regards,
Alexis 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxMjMzNzY5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/53,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTkwMjc2MQ==,paho.mqtt.python,221902761,53,NA,ralight,79578,Roger Light,,NA,2016-05-26T15:20:15Z,2016-05-26T15:20:15Z,"This is fixed in the develop branch.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTkwMjc2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/55,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/55,paho.mqtt.python,149851602,55,on_connect() argument call,ayang629,7469386,,,CLOSED,2016-04-20T18:39:20Z,2016-05-31T15:51:51Z,"When launching a client, the following error shows up (sometimes):

Traceback (most recent call last):
  File ""simple_client.py"", line 29, in <module>
    client.run()
  File ""simple_client.py"", line 13, in run
    self.client.loop()
  File ""/Library/Python/2.7/site-packages/paho/mqtt/client.py"", line 811, in loop
    rc = self.loop_read(max_packets)
  File ""/Library/Python/2.7/site-packages/paho/mqtt/client.py"", line 1073, in loop_read
    rc = self._packet_read()
  File ""/Library/Python/2.7/site-packages/paho/mqtt/client.py"", line 1475, in _packet_read
    rc = self._packet_handle()
  File ""/Library/Python/2.7/site-packages/paho/mqtt/client.py"", line 1949, in _packet_handle
    return self._handle_connack()
  File ""/Library/Python/2.7/site-packages/paho/mqtt/client.py"", line 2010, in _handle_connack
    self.on_connect(self, self._userdata, flags_dict, result)
TypeError: on_connect() takes exactly 4 arguments (5 given)

Looking into the source code and the following chunk (line 2005 in /src/paho/mqtt/client.py):

 if argcount == 3:
                self.on_connect(self, self._userdata, result)
            else:
                flags_dict = dict()
                flags_dict['session present'] = flags & 0x01
                self.on_connect(self, self._userdata, flags_dict, result)

Making a self. call inside of a python class adds an additional argument to the function call, effectively making it 4 arguments, not 3. Another suggestion is that the else command should probably be an elif considering any other number of arguments that are not 4 or 5 should produce an error.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/55/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/55,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjczMjU0Nw==,paho.mqtt.python,222732547,55,NA,ralight,79578,Roger Light,,NA,2016-05-31T15:51:51Z,2016-05-31T15:51:51Z,"This should only happen if your callback hasn't got the correct number of arguments. I agree that having an extra argument in the class method isn't ideal, but that's the situation right now. There are other bugs discussing this as well. I'm closing this now because I don't believe it is a bug in the Paho Python client.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjczMjU0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/56,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/56,paho.mqtt.python,154227843,56,Does changing the system datetime affect or stop Paho MQTT Client in asynchronous mode?,ken-vernaillen,6178160,Ken Vernaillen,,CLOSED,2016-05-11T12:09:32Z,2016-05-31T15:49:24Z,"I am using the Paho MQTT Client in asynchronous mode on a raspberry pi. The program sometimes stops sending MQTT messages and it happens not very often. When looking in the syslog I noticed that when this happens there is also a bug that the system datetime flashed back one day or a few minutes. Can this affect or stop Paho MQTT Client in asynchronous mode? 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/56,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxODQ1Njg3NA==,paho.mqtt.python,218456874,56,NA,ralight,79578,Roger Light,,NA,2016-05-11T13:21:11Z,2016-05-11T13:21:11Z,"Yes this would affect client regardless of how it is operating.

Using time.monotonic() would solve the problem, but it is only available on Python 3.3 and up. The patch [time.txt](https://github.com/eclipse/paho.mqtt.python/files/259346/time.txt) attempts to handle that situation. I've only tested it briefly, if you could provide feedback it would be very helpful.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIxODQ1Njg3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/56,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTkwMjkyNQ==,paho.mqtt.python,221902925,56,NA,ralight,79578,Roger Light,,NA,2016-05-26T15:20:42Z,2016-05-26T15:20:42Z,"This should now be fixed.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTkwMjkyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/57,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/57,paho.mqtt.python,156362502,57,connect() and connect_async() is not having a proper difference as mentioned in the docs.,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,CLOSED,2016-05-23T20:43:27Z,2016-05-31T15:49:41Z,"From the docs, there are 3 methods to connect:
1.  connect()
2.  connect_async()
3.  connect_srv()

It says the 

> Identical to `connect()`, but non-blocking. The connection will not complete until one of the `loop*()` functions is called.

But actually, `connect()` calls `connect_async()` first and then calls `reconnect()`. Thus saying `connect()` and `connect_async` working differently is not that proper. Moreover, `connect()` being blocking and `connect_async()` being non-blocking is not correct as both of them end up doing the same thing (just that with `connect_async()`, few things have to be taken care of).

Its been referred already in #4 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/57/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/57,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwODUxMg==,paho.mqtt.python,221108512,57,NA,ralight,79578,Roger Light,,NA,2016-05-23T21:57:28Z,2016-05-23T21:57:28Z,"#4 is a completely different (and invalid) bug report.

The documentation in the code (which is always the best place to look) correctly say that you should only use this with `loop_start()`. The description in README.rst was incorrect, thanks for the report. That's now fixed although I referenced the wrong bug.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwODUxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,paho.mqtt.python,156366020,58,"connect_async() doesn't work with all the loop*() functions as mentioned in docs, it can only work with some. For me it didn't work with any.",anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,CLOSED,2016-05-23T21:01:36Z,2016-06-02T03:01:18Z,"As mentioned in the docs:

> Identical to `connect()`, but non-blocking. The connection will not complete until one of the `loop*()` functions is called.

But it cannot work with simple `loop()`, because, calling `connect_async()` doesn't actually create the connection, rather it just initiates some private variables.

Unlike `connect()`, which calls `connect_async()` to initialise those private variable followed by `reconnect()` which actually creates the socket connection, thus by simply calling `connect_async()` it doesn't create the connection since its not calling `reconnect()` directly in its method.

Moreover, if you are calling just `connect_async()`, you can only call some selected `loop*()` functions, specifically those which in return go ahead and calls `reconnect()`, hence, those are `loop_forever()`  and  `loop_start()`.

Also, given these conditions, I did try `connect_async()` with both `loop_forever()` and `loop_start()` but both seemed to got stuck and not reply with any messages (even after subscribing to $SYS/# topics).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwOTc1NA==,paho.mqtt.python,221109754,58,NA,ralight,79578,Roger Light,,NA,2016-05-23T22:03:00Z,2016-05-23T22:03:00Z,"This works for me. I've attached my working example.

[sub.txt](https://github.com/eclipse/paho.mqtt.python/files/278356/sub.txt)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTEwOTc1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE1NzMxNw==,paho.mqtt.python,221157317,58,NA,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,NA,2016-05-24T03:28:33Z,2016-05-24T03:28:33Z,"Okay, so I did try a lot of variations. I am submitting the variations, please tell me what am I missing, some of them work, some don't, and for the ones which work, the responses are not universal.

Please check them and tell me the catch for each one of them.

**Note:** the variations are done on one of the codes from the examples, sub-multiple-callback.py

[variation_1.txt](https://github.com/eclipse/paho.mqtt.python/files/278519/variation_1.txt)
Calling `connect()` with `loop()` for **1 time**. Doesn't work. Even when loop has been given `timeout=10.0` seconds. Also, I have tried without setting `timeout` in `loop()` but still doesn't work(whose reason is still obvious).

[variation_2.txt](https://github.com/eclipse/paho.mqtt.python/files/278525/variation_2.txt)
Calling `connect()` with `loop()` for **10 times** in while construct. Seems to work.

[variation_3.txt](https://github.com/eclipse/paho.mqtt.python/files/278528/variation_3.txt)
Calling `connect()` with `loop()` infinitely in **while True construct**. Seems to work. ( More like calling loop_forever())

[variation_4.txt](https://github.com/eclipse/paho.mqtt.python/files/278529/variation_4.txt)
Calling `connect()` with `loop_forever().` Seems to work.

[variation_5.txt](https://github.com/eclipse/paho.mqtt.python/files/278533/variation_5.txt)
Calling `connect()` with `loop_start()`. Seems to work.

[variation_async_1.txt](https://github.com/eclipse/paho.mqtt.python/files/278538/variation_async_1.txt)
Calling **`connect_async()`** with `**loop_forever()**` (Since only loop_forever() and loop_start() seems eligible to be called, rest do not call `reconnect()`, so will not form an actual connection to broker). Doesn't work. Remains blocked and stuck and occasionally sends the ping requests to keep connection open.
Now, if the argument is I should be calling `loop_start()` and not `loop_forever()`, I have few things to say about this:
1. I have done a variation with **loop_start()**, added it as variation_async_2.txt, follow that for its status.
2. Now if the argument is to call loop_start() and not loop_forever(), please tell me why, because from what I see, loop_start() calls reconnect() (if connect_async() is used, and in this case its true), and then loop_forever(), all of that in a separate thread in daemon mode, and if suppose we call loop_forever directly instead, it calls reconnect first (if connect_async() is use, and in this case its true), and calls loop infinitely. The only difference between calling loop_forever() and loop_start() in case of connect_async() is that one is using a separate thread, the other doesn't. So what's the catch in here?

Now lets see the last variation with loop_start()

[variation_async_2.txt](https://github.com/eclipse/paho.mqtt.python/files/278551/variation_async_2.txt)
Calling `connect_async()` using `loop_start()` with `while True loop` calling `time.sleep(1)` in the main thread so that it doesn't end the program which ends the connection and no work can be done by the extra thread. Doesn't work.

Also, please tell me cases when I would be be using `connect_async` over `connect` since both of then end up calling the same functions, with the former having less number of options as far as `loop*()` functions are concerned.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE1NzMxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE1OTM3NQ==,paho.mqtt.python,221159375,58,NA,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,NA,2016-05-24T03:47:50Z,2016-05-24T03:47:50Z,"@ralight  Also Note that I have tried it both with `localhost` and `iot.eclipse.org`, also, its when I am saying it doesn't work for some of the variations, what I mean is sometimes even if the connection is created successfully but there is not messages being produced even after subscriptions, whereas for others which seem to work, I can see the message outputs from the subscribed topics. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE1OTM3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE5NDkxMw==,paho.mqtt.python,221194913,58,NA,ralight,79578,Roger Light,,NA,2016-05-24T08:02:18Z,2016-05-24T08:02:18Z,"Thanks for those, I'll take a look at them when I get chance.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTE5NDkxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTM1MzI5MA==,paho.mqtt.python,221353290,58,NA,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,NA,2016-05-24T17:59:29Z,2016-05-24T17:59:29Z,"Thanks. Please have a look at them and revert with your take on those as soon as possible. :)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMTM1MzI5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMjA2NA==,paho.mqtt.python,222012064,58,NA,ralight,79578,Roger Light,,NA,2016-05-26T22:22:28Z,2016-05-26T22:22:28Z,"Right, so variations 1-5 are working as expected.

The problem with the others is that you aren't checking the return code of `subscribe()` for failure.

The rules for when to use `loop_start()`, `loop_forever()` or `loop()` are:
- Use `loop_forever()` if your code only does things in callbacks and is best suited to a blocking call.
- Use `loop_start()` if your code does other things as part of its processing, e.g. dealing with a gui, reading data from a sensor and it shouldn't block on the client library code.
- Never use `loop()` unless you want to handle reconnecting and error handling yourself and you have an especially good reason for not using one of the previous options. Then make sure you are _really_ sure.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMjA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMjMyNw==,paho.mqtt.python,222012327,58,NA,ralight,79578,Roger Light,,NA,2016-05-26T22:23:53Z,2016-05-26T22:23:53Z,"It's generally a more robust method to call `subscribe()` from the `on_connect()` callback anyway, otherwise you lose subscriptions on a reconnection.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAxMjMyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAyODYzNw==,paho.mqtt.python,222028637,58,NA,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,NA,2016-05-27T00:08:19Z,2016-05-27T00:08:19Z,"Thanks @ralight for looking at them. Yes, calling `subscribe()` from `on_connect()` is surely the better way to do things as we get the confirmation of the connection.

Also, few things that can be added to the docs to make it clearer to users without having doing a lot of research. Like the `on_connect()` method is not triggered if you just call `connect()`, it will be triggered if you run one of the `loop*()` functions and not otherwise, I think. **Please shed a light on this too.**

Also, what about if I want to user some other **`ioloop`**, like if I want to use **Tornado's ioloop**, which does all the work for me, what I am doing is adding a handler for the **mqtt client socket**, which I am accessing via `socket()` method, and in case of **Read** event, I am calling `loop_read()` and in case of **Write** event, I am calling `loop_write()`. Please tell me, whether this will suffice or do I have to take care of any edge cases, or any other special case?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjAyODYzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/58,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzE4MzQxMw==,paho.mqtt.python,223183413,58,NA,anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,NA,2016-06-02T03:01:18Z,2016-06-02T03:01:18Z,"**UPDATE:** 

Along with `loop_read()` and `loop_write()`, `loop_misc()` is to be called regularly, may be once every **10** seconds or more or less but less than `keepalive` value.

Can be done using **tornado's** `ioloop.IOLoop.PeriodicCallback`. 

Successful but not a very convenient flow.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzE4MzQxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/61,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/61,paho.mqtt.python,157316863,61,"subscribe() checking for isinstance(topic, str) may be not be sufficient.",anirbanroydas,2502514,Anirban Roy Das,anirban.nick@gmail.com,CLOSED,2016-05-28T02:50:07Z,2016-06-01T08:38:29Z,"Suppose somebody sends a `json` encoded topic to be subscribed, in that case, if in **python 2.7**, the `isinstance()` function returns **false**, since the json encoded topic gets converted into `unicode`. 

So checking for both `str` and `unicode` will be a better and safer way. Even when the topic is sent in the `tuple` or `list` format, in both the cases, the **individual topic strings** may be `unicode`.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/61/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/61,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkyODg4Mg==,paho.mqtt.python,222928882,61,NA,ralight,79578,Roger Light,,NA,2016-06-01T08:38:29Z,2016-06-01T08:38:29Z,"Duplicate of #16 - thanks for the nudge though.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMjkyODg4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,paho.mqtt.python,158033054,67,topic_matches_sub() incorrectly filter some subscriptions,yoch,795960,yoch,,CLOSED,2016-06-02T00:01:06Z,2017-05-17T18:40:23Z,"`('sport/#', 'sport/')` -> `False` instead of `True`

Also, some invalid filters are accepted.

`('sport+', 'sport')` -> `True` which is incorrect. etc

Here my proposal, which is simpler than the previous code, can detect invalid subscriptions, and runs faster (by about 30%) :

``` python
def topic_matches_sub(sub, topic):
    ""return None if the subscription is invalid (maybe raise an exception ?)""

    if not sub or not topic:
        # invalid (all topic names and topic filters MUST be at least one character long)
        return None

    if topic[0] == '$' and sub[0] != '$':
        return False

    sub_l, topic_l = sub.split('/'), topic.split('/')
    sub_sz, topic_sz = len(sub_l), len(topic_l)

    for i, level in enumerate(sub_l):

        if level == '#':
            if i + 1 < sub_sz:
                return None # invalid ('#' not at end)
            return True

        elif level == '+':
            if i >= topic_sz:
                return False

        else:
            if '#' in level or '+' in level:
                return None # invalid ('#' / '+' in level part)
            if i >= topic_sz or level != topic_l[i]:
                return False

    return sub_sz == topic_sz
```

On the other hand, it doesn't detect all inconsistencies in topic format.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI1MjI1MQ==,paho.mqtt.python,223252251,67,NA,ralight,79578,Roger Light,,NA,2016-06-02T10:19:08Z,2016-06-02T10:19:08Z,"> On the other hand, it doesn't detect all inconsistencies in topic format.

Could you explain the inconsistencies you are referring to?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI1MjI1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI1OTcxNw==,paho.mqtt.python,223259717,67,NA,ralight,79578,Roger Light,,NA,2016-06-02T10:57:49Z,2016-06-02T10:57:49Z,"Ah, you mean it detects invalid subscriptions but not invalid topics?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI1OTcxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI3ODIwMg==,paho.mqtt.python,223278202,67,NA,yoch,795960,yoch,,NA,2016-06-02T12:35:22Z,2016-06-02T12:35:22Z,"I mean these MQTT constraints :
- The wildcard characters [...] MUST NOT be used within a Topic Name [MQTT-4.7.1-1].
- Topic Names and Topic Filters MUST NOT include the null character (Unicode U+0000) [MQTT-4.7.3-2]

It would be nice to have dedicated functions to validate inputs, but it's not the job for `topic_matches_sub()`.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzI3ODIwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzQxMTg4OQ==,paho.mqtt.python,223411889,67,NA,ralight,79578,Roger Light,,NA,2016-06-02T20:27:50Z,2016-06-02T20:27:50Z,"Agreed on both counts. I'll merge this after 1.2 is released.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyMzQxMTg4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzAyNTMxNg==,paho.mqtt.python,227025316,67,NA,yoch,795960,yoch,,NA,2016-06-19T22:51:46Z,2016-06-19T22:51:46Z,"Here a check for subscriptions filters :

``` python
    def _filter_wildcard_len_check(sub):
        if (len(sub) == 0 or len(sub) > 65535
            or any('+' in p or '#' in p for p in sub.split('/') if len(p) > 1)
            or '#/' in sub):
            return MQTT_ERR_INVAL
        else:
            return MQTT_ERR_SUCCESS
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzAyNTMxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/67,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDY0Mw==,paho.mqtt.python,296374643,67,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:51:07Z,2017-04-22T13:51:07Z,I'm closing this issue as fixes are merged in develop branch.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDY0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,paho.mqtt.python,159103919,72,Add External Event Loop Example,zpfvo,13163514,,,CLOSED,2016-06-08T08:11:32Z,2024-04-19T19:49:40Z,"Hi,
i'd like to use this library together with the twisted reactor. Since i'm new to both paho.mqtt and twisted  its hard for me to figure this one out. It would be nice to have an example of the external event loop usage (mustn't be twisted).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDgzNDQzNg==,paho.mqtt.python,224834436,72,NA,ralight,79578,Roger Light,,NA,2016-06-09T08:42:01Z,2016-06-09T08:42:01Z,"That sounds like a reasonable request, is there anybody out there that has an example they could share?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDgzNDQzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDg2MDYzNw==,paho.mqtt.python,224860637,72,NA,zpfvo,13163514,,,NA,2016-06-09T10:46:02Z,2016-06-09T10:46:02Z,"I got it running, but i don't think its very nice. I don't use Deferreds and I don't use select on the socket.
(not a complete example)

``` python
from twisted.internet import reactor, task 

def is_connected(mqttc):
    if mqttc.socket() is None:
        logging.error(""Connection to mqtt broker lost. Stopping"")
        reactor.stop()

def want_write(mqttc):
    if mqttc.want_write():
        mqttc.loop_write()

# MQTT STUFF
mqttc = mqtt.Client(transport=""websockets"")
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.connect(""localhost"", 1883, 60)
mqttc.subscribe(""events/#"", 0)
mqttc.message_callback_add('events/comp', on_component_event_message)

# mqtt event loop functions
task.LoopingCall(mqttc.loop_read).start(0.1)
task.LoopingCall(want_write, mqttc).start(0.1)
task.LoopingCall(mqttc.loop_misc).start(5)
task.LoopingCall(is_connected, mqttc).start(1)

reactor.run()
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDg2MDYzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzE5NjE1Mw==,paho.mqtt.python,263196153,72,NA,oxbambooxo,4627506,Ben,oxbambooxo@gmail.com,NA,2016-11-28T06:52:23Z,2016-11-28T06:52:23Z,"i'am adaptive it for gevent
(not a complete example)
```python
import paho.mqtt.client as mqtt
import gevent

def handle_write(mqttc):
    mqttc._sockpairR.recv(1)
    status = mqttc.loop_write()
    if status != mqtt.MQTT_ERR_SUCCESS:
        print('error', mqtt.error_string(status))
        mqttc._state = mqtt.mqtt_cs_disconnecting

def handle_read(mqttc):
    status = mqttc.loop_read()
    if status != mqtt.MQTT_ERR_SUCCESS:
        print('error', mqtt.error_string(status))
        mqttc._state = mqtt.mqtt_cs_disconnecting

def loop_forever(mqttc, idle=3):
    while mqttc._state != mqtt.mqtt_cs_disconnecting:
        status = mqttc.loop_misc()
        if status == mqtt.MQTT_ERR_SUCCESS:
            gevent.sleep(idle)
        else:
            print('error', mqtt.error_string(status))
            mqttc._state = mqtt.mqtt_cs_disconnecting
            break

# MQTT STUFF(modify it for your case)
mqttc = mqtt.Client(transport=""websockets"")
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe
mqttc.connect(""localhost"", 1883, 60)
mqttc.subscribe(""events/#"", 0)
mqttc.message_callback_add('events/comp', on_component_event_message)
# ...

# mqtt event loop functions
loop = gevent.get_hub().loop
watcher_r = loop.io(mqttc.socket().fileno(), gevent.core.READ)
watcher_r.start(handle_read, mqttc)
watcher_w = loop.io(mqttc._sockpairR.fileno(), gevent.core.READ)
watcher_w.start(handle_write, mqttc)

# loop forever
# or gevent.spawn(loop_forever, mqttc)
loop_forever(mqttc)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzE5NjE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDk3MzM1NA==,paho.mqtt.python,334973354,72,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-07T23:54:17Z,2017-10-07T23:54:17Z,"Both examples are flawed, according to https://dev.eclipse.org/mhonarc/lists/paho-dev/msg03998.html

The first one will is a busy loop with a sleep. It wastes CPU time if there's nothing to do, and if there is, introduces an artificial 0.1 sec delay.
The second one uses the internal socketpair workaround. And I bet if you publish a huge message, you'll get stuck.

From the looks of it, I think the ""external event loop"" support is only meant for select. Here's an example:
```
#!/usr/bin/env python3

import paho.mqtt.client as mqtt
import socket
from select import select
from time import time

topic = 'paho-mqtt-python/issue72'

def on_connect(client, userdata, flags, rc):
    client.subscribe(topic)

def on_message(client, userdata, msg):
    print(""Got message with len {}"".format(len(msg.payload)))

client = mqtt.Client(client_id='paho-mqtt-python/issue72')
client.on_connect = on_connect
client.on_message = on_message

client.connect('test.mosquitto.org', 1883, 60)
client.socket().setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 2048)

c = 0

while True:
    sock = client.socket()
    if not sock:
        break;

    print(""{:.03f} Selecting"".format(time()))
    r, w, e = select(
        [sock],
        [sock] if client.want_write() else [],
        [],
        10
    )

    idle = True

    if sock in r:
        print(""{:.03f}           Reading"".format(time()))
        client.loop_read()
        idle = False

    if sock in w:
        print(""{:.03f}                   Writing"".format(time()))
        client.loop_write()
        idle = False

    if idle:
        if c == 3:
            break
        print("""")
        print(""{:.03f}                           Publishing"".format(time()))
        client.publish(topic, b'Hello' * 40000)
        c += 1

    client.loop_misc()

client.disconnect()
```

To support other high level event loops (twisted, gevent, asyncio, ...) https://dev.eclipse.org/mhonarc/lists/paho-dev/msg03999.html suggests to introduce another callback. I came to the same conclusion.
And there should also be a callback when a socket was created. And the disconnect callback should always be called right before the socket will be closed, not afterwards. 
And then socket.create_connection is used, which is a blocking call.
I'll try to improve the code when I find some time.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDk3MzM1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NjQzNQ==,paho.mqtt.python,410446435,72,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-04T12:34:47Z,2018-08-04T12:34:47Z,"I think this is fixed in develop branch with the example/loop_asyncio.py. If not, feel free to reopen this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NjQzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MjM4OTg0OQ==,paho.mqtt.python,562389849,72,NA,bkanuka,2676579,Bennett Kanuka,bkanuka@gmail.com,NA,2019-12-06T01:17:13Z,2019-12-06T01:17:13Z,FYI: I've created a [gist](https://gist.github.com/bkanuka/d12fe5096be6278a680105481a9bd237) that shows how to use [trio](https://github.com/python-trio/trio) as the external event loop instead of built-in or asyncio. I will open a PR to merge this into the examples.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MjM4OTg0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTgxMzk1MA==,paho.mqtt.python,609813950,72,NA,frederikaalund,545423,Frederik Aalund,frederikaalund@gmail.com,NA,2020-04-06T14:01:32Z,2020-04-06T14:01:32Z,I've created [asyncio-mqtt](https://github.com/sbtinstruments/asyncio-mqtt) based on the mechanism described here. asyncio-mqtt attempts to wrap paho-mqtt in an idiomatic asyncio-based interface.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTgxMzk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMTI0NTQ4Nw==,paho.mqtt.python,811245487,72,NA,jogehl,25370601,,,NA,2021-03-31T16:48:34Z,2021-03-31T16:48:34Z,I use a external loop on windows with select. The problem is that after executing client.loop_read() the socket closed and returns a -1 as file descriptor. This behaviour can be only seen on some linux distributions.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMTI0NTQ4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/72,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57Ntv2,paho.mqtt.python,2067192822,72,NA,chintal,226507,Chintalagiri Shashank,shashank.chintalagiri@gmail.com,NA,2024-04-19T19:49:22Z,2024-04-19T19:49:22Z,"I've had to get paho.mqtt to coexist (not necessarily fully integrate) with an existing twisted reactor. I found that none of the examples really showed what I wanted to do. I've put together a small example of how to wrap paho,mqtt as a twisted service, available in this [gist](https://gist.github.com/chintal/707144fe46c858f0428e26ebd308b56e). 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57Ntv2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/73,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/73,paho.mqtt.python,159152340,73,allow Client Identifier to be a nullstring,yoch,795960,yoch,,CLOSED,2016-06-08T12:33:45Z,2016-06-14T21:14:32Z,"Why using no client_id [isn't authorized](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L499) ? It's sometime useful, and this is allowed by MQTT specifications : 

> A Server MAY allow a Client to supply a ClientId that has a length of zero bytes, however if it does so the Server MUST treat this as a special case and assign a unique ClientId to that Client. It MUST then process the CONNECT packet as if the Client had provided that unique ClientId [MQTT-3.1.3-6].
> 
> If the Client supplies a zero-byte ClientId, the Client MUST also set CleanSession to 1 [MQTT-3.1.3-7].

---

Also, current implementation of random ClientId is not very safe, because it can lead to subtle bugs. For instance, this script causes `mqtt.Client` chooses the same ClientId for clients, introducing competition between them to take over if we run several clients : 

``` python
import random
import paho.mqtt.client as mqtt


def on_connect(client, userdata, flags, rc):
    print(client._client_id, ""Connected with result code "", rc)

def on_disconnect(client, userdata, rc):
    print(client._client_id, ""Disconnected with result code "", rc)


# suppose, for some reason, we make
random.seed(0)

# and just later start the client
client = mqtt.Client()
client.on_connect = on_connect
client.on_disconnect = on_disconnect

client.connect(""iot.eclipse.org"")
client.loop_forever()
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/73/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/73,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDgzNDYyMw==,paho.mqtt.python,224834623,73,NA,ralight,79578,Roger Light,,NA,2016-06-09T08:42:53Z,2016-06-09T08:42:53Z,"It's largely historical, MQTT 3.1 didn't allow zero length client ids.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNDgzNDYyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/73,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAxODM4Mw==,paho.mqtt.python,226018383,73,NA,ralight,79578,Roger Light,,NA,2016-06-14T21:14:32Z,2016-06-14T21:14:32Z,"I'm treating this as a bug for zero length client ids, which is now fixed. Your pull request should then fix the randomness (please use separate bug reports for separate issues to make it easier to deal with).

Thanks for your work.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAxODM4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,paho.mqtt.python,159153712,75,client sometimes crash because the topic can't be decoded in utf8,yoch,795960,yoch,,CLOSED,2016-06-08T12:40:56Z,2018-06-05T14:04:44Z,"Sometimes I got this exception (and the client hangs) : 

```
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""C:\Users\yoch\AppData\Local\Programs\Python\Python35-32\lib\threading.py"", line 914, in _bootstrap_inner
    self.run()
  File ""C:\Users\yoch\AppData\Local\Programs\Python\Python35-32\lib\threading.py"", line 862, in run
    self._target(*self._args, **self._kwargs)
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 2567, in _thread_main
    self.loop_forever()
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 1367, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 891, in loop
    rc = self.loop_read(max_packets)
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 1169, in loop_read
    rc = self._packet_read()
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 1754, in _packet_read
    rc = self._packet_handle()
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 2227, in _packet_handle
    return self._handle_publish()
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 2385, in _handle_publish
    message.topic = message.topic.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf4 in position 20: invalid continuation byte
```

To reproduce this bug, you can simply connect a client to `""iot.eclipse.org""` and subscribe to `""#""`, usually after a short time the crash occurs.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAwMDg3NQ==,paho.mqtt.python,226000875,75,NA,ralight,79578,Roger Light,,NA,2016-06-14T20:09:54Z,2016-06-14T20:09:54Z,"Thanks, I've pushed a fix for this - the exception will now be raised when the user accesses message.topic in the on_message callback.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAwMDg3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAxMTk2OA==,paho.mqtt.python,226011968,75,NA,yoch,795960,yoch,,NA,2016-06-14T20:50:22Z,2016-06-14T20:50:22Z,"According with the specification, the client should rather close the connection (the broker is buggy). But I don't know what is the best choice in practice.

> If a Server or Client receives a Control Packet containing ill-formed UTF-8 it MUST close the Network Connection [MQTT-1.5.3-1].
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNjAxMTk2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNjc0NTcxMQ==,paho.mqtt.python,306745711,75,NA,andrewbernard,4009723,Andrew Bernard,,NA,2017-06-07T09:44:57Z,2017-06-07T09:44:57Z,"This defect is still present with Python 3.5.2 and latest install from pip as at 7 June 2017. The example given crashes reliably after a few lines of output:

    client.connect(""iot.eclipse.org"", 1883, 60)

Error:

    File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py"", line 373, in topic
        return self._topic.decode('utf-8')
    UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7 in position 31: invalid continuation byte


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNjc0NTcxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDY2MTA4NA==,paho.mqtt.python,330661084,75,NA,brainstorm,175587,Roman Valls Guimera,,NA,2017-09-19T20:18:32Z,2017-09-19T20:18:32Z,"I can confirm that the example from the [""getting started"" section in the readme](https://pypi.python.org/pypi/paho-mqtt/1.1#usage-and-api) breaks as well for me, running python 3.5.2 from Anaconda:

```
(...)
$SYS/broker/connection/owner-PC.bridgeConnection/state b'1'
$SYS/broker/connection/Nozomi-PC.bridgeConnection/state b'0'
$SYS/broker/connection/TANTO.bridgeConnection/state b'1'
$SYS/broker/connection/Serv.bridgeConnection/state b'1'
$SYS/broker/connection/PDVBER02.bridgeConnection/state b'1'
Traceback (most recent call last):
  File ""pcgr_mqtt.py"", line 27, in <module>
    client.loop_forever()
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 1470, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 995, in loop
    rc = self.loop_read(max_packets)
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 1273, in loop_read
    rc = self._packet_read()
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 1838, in _packet_read
    rc = self._packet_handle()
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 2285, in _packet_handle
    return self._handle_publish()
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 2456, in _handle_publish
    self._handle_on_message(message)
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 2603, in _handle_on_message
    self.on_message(self, self._userdata, message)
  File ""pcgr_mqtt.py"", line 15, in on_message
    print(msg.topic+"" ""+str(msg.payload))
  File ""/Users/romanvg/.miniconda/lib/python3.5/site-packages/paho/mqtt/client.py"", line 357, in topic
    return self._topic.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe7 in position 31: invalid continuation byte
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDY2MTA4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1ODE1Mw==,paho.mqtt.python,331158153,75,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-21T13:35:43Z,2017-09-21T13:35:43Z,"This issue is tracked under #173.

As reminder paho-mqtt 1.3.0 added the ability for the client to handle non-utf-8 topic. Within the on_message you may add a try/except to catch this UnicodeDecodeError.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1ODE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/75,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NDcyMTYxOQ==,paho.mqtt.python,394721619,75,NA,ronaulipardede,13958609,,,NA,2018-06-05T14:04:44Z,2018-06-05T14:04:44Z,"Traceback (most recent call last):
  File ""/home/pi/mqtt_try2.py"", line 30, in <module>
    client.connect(Broker, 1883, 60)
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 895, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/usr/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
error: [Errno 111] Connection refused

How about to fix this error? Thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NDcyMTYxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/78,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/78,paho.mqtt.python,159874334,78,python 2: client doesn't able to publish binary data,yoch,795960,yoch,,CLOSED,2016-06-13T05:12:27Z,2017-05-17T18:40:04Z,"This snippet of code cause a crash on **python 2** : 

``` python
import paho.mqtt.client as mqtt

p = mqtt.Client()
p.connect(""iot.eclipse.org"")
p.loop_start()

data = str(bytearray(range(256)))   # binary data
p.publish('a/b/c', data)
```

```
Traceback (most recent call last):
  File ""C:/Users/yoch/Desktop/paho.mqtt/src/test-binary.py"", line 8, in <module>
    p.publish('a/b/c', data)
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 974, in publish
    rc = self._send_publish(local_mid, topic, local_payload, qos, retain, False, info)
  File ""C:/Users/yoch/Desktop/paho.mqtt/src\paho\mqtt\client.py"", line 1979, in _send_publish
    upayload = payload.encode('utf-8')
UnicodeDecodeError: 'ascii' codec can't decode byte 0x80 in position 128: ordinal not in range(128)
```

The reason is that the client try incorrectly to encode data to utf8, while it'sbinary data.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/78/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/78,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyOTM1ODQzMw==,paho.mqtt.python,229358433,78,NA,yoch,795960,yoch,,NA,2016-06-29T13:39:40Z,2016-06-29T13:39:40Z,"Duplicate of issue #15, and properly fixed by PR #81.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyOTM1ODQzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/78,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDMyMg==,paho.mqtt.python,296374322,78,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:45:27Z,2017-04-22T13:45:27Z,"Indeed, it's fixed on develop branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDMyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/79,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/79,paho.mqtt.python,159930126,79,using unicode for some fields may corrupt CONNECT packet,yoch,795960,yoch,,CLOSED,2016-06-13T11:37:02Z,2016-06-13T22:57:28Z,"If we use unicode values for password or client_id, the resulting CONNECT packet is corrupted (has improper length). This is because the length is calculated before encoding these fields in utf-8.

By instance : 

``` python
import paho.mqtt.client as mqtt

broker = 'iot.eclipse.org'

p = mqtt.Client()
p.username_pw_set('user', u'kéké')
p.connect(broker)
```

issue this corrupted packet (msg len = 47 instead of 49) : 

```
10 2f 00 04 4d 51 54 54 04 c2 00 3c 00 17 70 61  ./..MQTT...<..pa
68 6f 2f 32 39 31 43 33 38 31 37 41 31 36 44 33  ho/291C3817A16D3
46 38 41 45 34 00 04 75 73 65 72 00 06 6b c3 a9  F8AE4..user..k..
6b  c3 a9                                        k..
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/79/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/79,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTczMzIwMg==,paho.mqtt.python,225733202,79,NA,ralight,79578,Roger Light,,NA,2016-06-13T22:57:17Z,2016-06-13T22:57:17Z,"Thanks, this is now fixed.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTczMzIwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/80,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/80,paho.mqtt.python,159952045,80,unable to set empty user / password,yoch,795960,yoch,,CLOSED,2016-06-13T13:37:36Z,2016-06-13T22:01:24Z,"For instance, this code : 

``` python
import paho.mqtt.client as mqtt

broker = 'iot.eclipse.org'

p = mqtt.Client('paho/test')
p.username_pw_set('yoch', '')
p.connect(broker)
```

issue following packet (password-flag=0) : 

```
10 1b 00 04 4d 51 54 54 04 82 00 3c 00 09 70 61  ....MQTT...<..pa
68 6f 2f 74 65 73 74 00 04 79 6f 63 68           ho/test..yoch
```

instead of : 

```
10 1d 00 04 4d 51 54 54 04 c2 00 3c 00 09 70 61  ....MQTT...<..pa
68 6f 2f 74 65 73 74 00 04 79 6f 63 68 00 00     ho/test..yoch..
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/80/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/80,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTcyMjA2Nw==,paho.mqtt.python,225722067,80,NA,ralight,79578,Roger Light,,NA,2016-06-13T22:01:23Z,2016-06-13T22:01:23Z,"Thanks, I've fixed this now.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNTcyMjA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82,paho.mqtt.python,161248143,82,Protocol version is not failing back to 3.1,bkupidura,4814684,zynzel,bartosz.kupidura@gmail.com,CLOSED,2016-06-20T17:20:02Z,2016-06-20T21:14:04Z,"Software:
Ubuntu 14.04 on rassberry PI 2
paho-mqtt 1.2
mosquitto 0.15-2ubuntu1
mosquitto-clients 0.15-2ubuntu1
libmosquitto0 0.15-2ubuntu1

Mosquitto on Ubuntu 14.04 supports only MQTT 3.1, failback is handled by paho/mqtt/client.py:_handle_connack but currently this is not executed as _sock.recv(1) from _packet_read returns 0 length string.

if self._in_packet['command'] == 0:
[..]
  if len(command) == 0:
    return 1

After adding a few additional self._easy_log:
2016-06-20 13:30:51,056 - INFO - mqtt - _packet_read
2016-06-20 13:30:51,057 - INFO - mqtt - self._in_packet['command'] == 0
2016-06-20 13:30:51,058 - INFO - mqtt - self._in_packet['command'] try
2016-06-20 13:30:51,058 - INFO - mqtt - self._in_packet['command'] else
2016-06-20 13:30:51,059 - INFO - mqtt - self._in_packet['command'] len(command): 0

Broker logs:
1466422205: New connection from 127.0.0.1.
1466422205: Invalid protocol ""MQTT"" in CONNECT from 127.0.0.1.
1466422205: Socket read error on client (null), disconnecting.

To reproduce issue you can use publish.single:

import paho.mqtt.publish as publish

publish.single('test/test', payload='test', retain=False, qos=0, hostname='localhost')

Moved from: https://bugs.eclipse.org/bugs/show_bug.cgi?id=496386
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI2MDI2Mw==,paho.mqtt.python,227260263,82,NA,ralight,79578,Roger Light,,NA,2016-06-20T20:31:47Z,2016-06-20T20:31:47Z,"I'm afraid the only useful way to be able to fail back to mqtt v3.1 is for the broker to return CONNACK with rc=1 (connection refused, protocol version). Mosquitto 0.15 doesn't do this. If the client attempted to reconnect with mqtt v3.1 when there was a read failure that wouldn't be very useful behaviour for most people.

I'm afraid my response here is that you should upgrade to a more recent version of mosquitto. 0.15 is more than 4 years old now.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI2MDI2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI2OTg4Nw==,paho.mqtt.python,227269887,82,NA,bkupidura,4814684,zynzel,bartosz.kupidura@gmail.com,NA,2016-06-20T21:07:43Z,2016-06-20T21:07:43Z,"As Ubuntu 16.04 is available, this is probably best approach.

Workaround for people with old mosquitto server:

client = paho.Client(protocol=paho.MQTTv31)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI2OTg4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/82,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI3MTM5OA==,paho.mqtt.python,227271398,82,NA,ralight,79578,Roger Light,,NA,2016-06-20T21:13:52Z,2016-06-20T21:13:52Z,"Yes both of those are reasonable responses, but either way you'll get better support by using the repositories provided by the project.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzI3MTM5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,paho.mqtt.python,161588400,85,ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed ,tosone,5346506,Tosone,i@tosone.cn,CLOSED,2016-06-22T03:50:30Z,2019-08-05T15:57:50Z,"### Environment
- Ubuntu 16.04
- openssl OpenSSL 1.0.2g-fips

```
    client_id = self.appKey + "":"" + self.appSecret
    client = mqtt.Client(client_id = client_id, clean_session = True,  protocol = ""MQTTv311"")
    getHash.username(self.appKey, self.appSecret, self.deviceId, self.deviceSecret)
    client.tls_set(""key.pem"", certfile = ""certificate.pem"", keyfile = ""privatekey.pem"", tls_version = ssl.PROTOCOL_TLSv1_1)
    client.on_connect = self.on_connect
    client.on_message = self.on_message
    client.tls_insecure_set(True)
    client.username_pw_set(getHash.username(self.appKey, self.appSecret, self.deviceId, self.deviceSecret))
    client.connect(res.get(""host""),  port = int(res.get(""port"")), keepalive = 120)
    client.loop_forever()
```

will got:

```
  File ""get.py"", line 3, in <module>
    a.printf()
  File ""/home/tosone/Desktop/test/aliyunIot/aliyun/aliyun.py"", line 17, in printf
    self.connect(response)
  File ""/home/tosone/Desktop/test/aliyunIot/aliyun/aliyun.py"", line 28, in connect
    client.connect(res.get(""host""),  port = int(res.get(""port"")), keepalive = 120)
  File ""/home/tosone/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 686, in connect
    return self.reconnect()
  File ""/home/tosone/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 821, in reconnect
    ciphers=self._tls_ciphers)
  File ""/usr/lib/python2.7/ssl.py"", line 929, in wrap_socket
    ciphers=ciphers)
  File ""/usr/lib/python2.7/ssl.py"", line 597, in __init__
    self.do_handshake()
  File ""/usr/lib/python2.7/ssl.py"", line 826, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)

```

Youcan find my source code here: https://github.com/tosone/aliyun-mqtt
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY0MTAzMg==,paho.mqtt.python,227641032,85,NA,tosone,5346506,Tosone,i@tosone.cn,NA,2016-06-22T04:37:26Z,2016-06-22T04:37:26Z,"```
const mqtt = require('mqtt');
const connect = Promise.coroutine(function*(appKey, appSecret, deviceId, deviceSecret) {
  const authResult = yield auth(appKey, appSecret, deviceId, deviceSecret);
  const pubkey = authResult.pubkey;
  const host = authResult.host;
  const port = authResult.port;
  console.log(pubkey.toString());
  return mqtt.connect(`tls://${host}:${port[0]}`, {
    clientId: appKey + ':' + deviceId,
    username: createUsername(appKey, appSecret, deviceId, deviceSecret),
    rejectUnauthorized: false,
    cert: pubkey,
    keepalive: 120
  });
});
```

in NodeJs it is very well.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY0MTAzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY3ODY4OQ==,paho.mqtt.python,227678689,85,NA,ralight,79578,Roger Light,,NA,2016-06-22T08:35:53Z,2016-06-22T08:35:53Z,"CERTIFICATE_VERIFY_FAILED usually means that the server is providing a certificate that is not signed by a CA certificate your client trusts (i.e. you've given the client the ""wrong"" CA root certificate), or that the server does not provide a complete chain of certificates from the root to the server certificate.

```
client.tls_set(""key.pem"", certfile = ""certificate.pem"", keyfile = ""privatekey.pem"", tls_version = ssl.PROTOCOL_TLSv1_1)
```

It seems a bit suspicious that the CA certificates you wish to trust are in a file called `key.pem`.

```
client.tls_insecure_set(True)
```

This is ok for the moment, but don't forget to set this to false when you have it working.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY3ODY4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY4MjMzNg==,paho.mqtt.python,227682336,85,NA,tosone,5346506,Tosone,i@tosone.cn,NA,2016-06-22T08:52:14Z,2016-06-22T08:52:14Z,"Ummm, `client.tls_insecure_set(True)` True or False is same.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY4MjMzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY5NDQ2MA==,paho.mqtt.python,227694460,85,NA,ralight,79578,Roger Light,,NA,2016-06-22T09:42:38Z,2016-06-22T09:42:38Z,"Yes, I'm just reminding you that this isn't an option you should rely on in production.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIyNzY5NDQ2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDYxMjAyMA==,paho.mqtt.python,250612020,85,NA,jamesmyatt,1047337,James Myatt,,NA,2016-09-29T22:36:56Z,2016-09-29T22:36:56Z,"Remember that `client.tls_insecure_set(True)` only stops it checking the hostname, but doesn't stop it from attempting to verify the server certificate. You need to change the `cert_reqs` setting to `ssl.CERT_NONE` to do that, I think.

Again, you wouldn't want to do that in production though.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDYxMjAyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDc4Mw==,paho.mqtt.python,296374783,85,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:53:41Z,2017-04-22T13:53:41Z,Issue seems solved. Feel free to reopen if issue persist. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDc4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTQwNzA3NQ==,paho.mqtt.python,399407075,85,NA,markusand,12972543,Marc Vilella,mvilella.and@gmail.com,NA,2018-06-22T11:07:47Z,2018-06-22T11:07:47Z,"I'm having the same problem, with different error code though
```ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:600)```

In Python I have:
```python
TLS_CA = ""./certs/mqtt.crt""
TLS_v = ssl.PROTOCOL_TLSv1_2
client.tls_set(ca_certs=TLS_CA, tls_version=TLS_v)
```

Adding `cert_reqs=ssl.CERT_NONE` the connection is established properly, but the intention of using certificates is precisely not having to avoid them, so it's not a real option

I'm in a Raspberry Pi, using server self-signed certificate created with OpenSSL.
I have added certifcate to root certificates following [this](https://raspberrypi.stackexchange.com/questions/76419/entrusted-certificates-installation) just in case, but nothing changes.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTQwNzA3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/85,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI5MzQ2Nw==,paho.mqtt.python,518293467,85,NA,opexxx,106825,Alexander Knorr,,NA,2019-08-05T15:57:50Z,2019-08-05T15:57:50Z,pip install --upgrade certifi,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI5MzQ2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,paho.mqtt.python,164253602,89,WebSockets continuation frames are not supported,marcinkowskip,20334655,Piotr Marcinkowski,,CLOSED,2016-07-07T08:16:37Z,2021-10-21T09:30:59Z,"Hey,

It looks like WebSockets continuation frames are not supported in your client.
If client receives 0x00 opcode in WebSocket frame it will raise socket error (11).

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2869

```
            if opcode == WebsocketWrapper.OPCODE_BINARY:
                return result
            else:
                raise socket.error(errno.EAGAIN, 0)
```

Thanks,
Piotr M
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTc5NTcxMw==,paho.mqtt.python,249795713,89,NA,PierreF,359833,Pierre Fersing,,NA,2016-09-27T08:09:20Z,2016-09-27T08:09:20Z,"This issue may be fixed by PR #114 . I was not able to reproduce this issue, but I don't know WebSocket enough to know how to create continuation frames. I used large payload (up to 100 Mb), and it worked with the PR
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTc5NTcxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTgwOTk1MA==,paho.mqtt.python,249809950,89,NA,marcinkowskip,20334655,Piotr Marcinkowski,,NA,2016-09-27T09:11:38Z,2016-09-27T09:11:38Z,"This PR will not fix it. The lines I have mentioned remain untouched. I know it is hard to reproduce the problem because MQTT server/broker would have to support continuation frames. I got this problem on my own simple broker implementation but I switched to binary frames fragmentation to fit both python and JavaScript client implementations (I cannot share the code).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTgwOTk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MTE4NjM3NA==,paho.mqtt.python,561186374,89,NA,AndMu,1674086,Andrius Mudinas,keistokas@gmail.com,NA,2019-12-03T14:15:55Z,2019-12-03T14:15:55Z,"I can confirm that this is still an issue. 
I have an issue with .NET server-based broker and python script hosted in Jupyter. 
For some reason, same python code hosted outside of Jupyter does work fine.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MTE4NjM3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzE2OTM5Mg==,paho.mqtt.python,693169392,89,NA,bh4r4th,20146174,Bharath Yadavally,bharath.yadavally@gmail.com,NA,2020-09-16T04:57:10Z,2020-09-16T04:57:10Z,"I noticed same behaviour. 

I built a client which shares 20kB+ files a year ago. This is working fine until now to be noticed the client is not accepting large files over websockets (wss).

**Any help is much appreciated.**

Broker: `Rabbitmq 3.8.3 Erlang 22.3`
Client: `Paho-Mqtt: 1.5.0`, `Paho-mqtt:1.4.0` and also tried specific commit a year ago with `sha: 43ce4369300a7e4ff56fb83fbb90b6511c873803`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzE2OTM5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/89,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4002iB,paho.mqtt.python,886270081,89,NA,ralight,79578,Roger Light,,NA,2021-07-25T22:59:59Z,2021-07-25T22:59:59Z,"I've just pushed some code to the `1.6.x` branch that fixes this for me in the crude testing that I've done. I need to do more testing on a source that produces continuation frames ""properly"", any suggestions of how to reproduce that would be appreciated.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4002iB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,paho.mqtt.python,164664767,94,`make test` runs all tests with the same Python environment,jamesmyatt,1047337,James Myatt,,CLOSED,2016-07-09T12:20:15Z,2017-05-17T18:38:41Z,"From the results in https://travis-ci.org/eclipse/paho.mqtt.python/builds/143454116 for pull request https://github.com/eclipse/paho.mqtt.python/pull/93, it's clear that the Python 3 tests should fail. However, running `make test` without changing the python environment for each results in all passes.

```
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ python3 --version
Python 3.4.3
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ python --version
Python 2.7.6
vagrant@vagrant-ubuntu-trusty-64:/vagrant$ make test
make -C test python
make[1]: Entering directory `/vagrant/test'
make -C lib python
make[2]: Entering directory `/vagrant/test/lib'
./01-con-discon-success.py python/01-con-discon-success.test
./01-con-discon-success-mqtt311.py python/01-con-discon-success-mqtt311.test
./01-will-set.py python/01-will-set.test
./01-unpwd-set.py python/01-unpwd-set.test
./01-will-unpwd-set.py python/01-will-unpwd-set.test
./01-zero-length-clientid.py python/01-zero-length-clientid.test
./01-no-clean-session.py python/01-no-clean-session.test
./01-keepalive-pingreq.py python/01-keepalive-pingreq.test
./02-subscribe-qos0.py python/02-subscribe-qos0.test
./02-subscribe-qos1.py python/02-subscribe-qos1.test
./02-subscribe-qos2.py python/02-subscribe-qos2.test
./02-unsubscribe.py python/02-unsubscribe.test
./03-publish-qos0.py python/03-publish-qos0.test
./03-publish-qos0-no-payload.py python/03-publish-qos0-no-payload.test
./03-publish-c2b-qos1-timeout.py python/03-publish-c2b-qos1-timeout.test
./03-publish-c2b-qos1-disconnect.py python/03-publish-c2b-qos1-disconnect.test
./03-publish-c2b-qos2-timeout.py python/03-publish-c2b-qos2-timeout.test
./03-publish-c2b-qos2-disconnect.py python/03-publish-c2b-qos2-disconnect.test
./03-publish-b2c-qos1.py python/03-publish-b2c-qos1.test
./03-publish-b2c-qos2.py python/03-publish-b2c-qos2.test
./04-retain-qos0.py python/04-retain-qos0.test
./08-ssl-connect-no-auth.py python/08-ssl-connect-no-auth.test
./08-ssl-connect-cert-auth.py python/08-ssl-connect-cert-auth.test
./08-ssl-bad-cacert.py python/08-ssl-bad-cacert.test
./09-util-topic-matching.py python/09-util-topic-matching.test
make[2]: Leaving directory `/vagrant/test/lib'
make[1]: Leaving directory `/vagrant/test'
make -C test python3
make[1]: Entering directory `/vagrant/test'
make -C lib python3
make[2]: Entering directory `/vagrant/test/lib'
./01-con-discon-success.py python3/01-con-discon-success.test
./01-con-discon-success-mqtt311.py python3/01-con-discon-success-mqtt311.test
./01-will-set.py python3/01-will-set.test
./01-unpwd-set.py python3/01-unpwd-set.test
./01-will-unpwd-set.py python3/01-will-unpwd-set.test
./01-zero-length-clientid.py python3/01-zero-length-clientid.test
./01-no-clean-session.py python3/01-no-clean-session.test
./01-keepalive-pingreq.py python3/01-keepalive-pingreq.test
./02-subscribe-qos0.py python3/02-subscribe-qos0.test
./02-subscribe-qos1.py python3/02-subscribe-qos1.test
./02-subscribe-qos2.py python3/02-subscribe-qos2.test
./02-unsubscribe.py python3/02-unsubscribe.test
./03-publish-qos0.py python3/03-publish-qos0.test
./03-publish-qos0-no-payload.py python3/03-publish-qos0-no-payload.test
./03-publish-c2b-qos1-timeout.py python3/03-publish-c2b-qos1-timeout.test
./03-publish-c2b-qos1-disconnect.py python3/03-publish-c2b-qos1-disconnect.test
./03-publish-c2b-qos2-timeout.py python3/03-publish-c2b-qos2-timeout.test
./03-publish-c2b-qos2-disconnect.py python3/03-publish-c2b-qos2-disconnect.test
./03-publish-b2c-qos1.py python3/03-publish-b2c-qos1.test
./03-publish-b2c-qos2.py python3/03-publish-b2c-qos2.test
./04-retain-qos0.py python3/04-retain-qos0.test
./08-ssl-connect-no-auth.py python3/08-ssl-connect-no-auth.test
./08-ssl-connect-cert-auth.py python3/08-ssl-connect-cert-auth.test
./08-ssl-bad-cacert.py python3/08-ssl-bad-cacert.test
./09-util-topic-matching.py python3/09-util-topic-matching.test
make[2]: Leaving directory `/vagrant/test/lib'
make[1]: Leaving directory `/vagrant/test'
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTUzNTMyMg==,paho.mqtt.python,231535322,94,NA,ralight,79578,Roger Light,,NA,2016-07-09T13:50:48Z,2016-07-09T13:50:48Z,"The tests make the assumption that `python` is actually `python2`, so it's no surprise that changing it to be `python3` breaks things.

I guess this needs setting explicitly.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTUzNTMyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTUzODk2NQ==,paho.mqtt.python,231538965,94,NA,jamesmyatt,1047337,James Myatt,,NA,2016-07-09T15:09:25Z,2016-07-09T15:09:25Z,"Personally, I find it very hard to use the tests in their current form, especially on Windows. I would much prefer `unittest` or `pytest` tests that can be run using the regular Python test runners, including integration with Python IDEs. It would also integrate better with tools such as virtualenv and coverage and services like Travis.

However, this would be a significant change to the current set-up. Is there any interest in doing this? I would be willing to help.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTUzODk2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTU1MjI0MA==,paho.mqtt.python,231552240,94,NA,ralight,79578,Roger Light,,NA,2016-07-09T19:43:55Z,2016-07-09T19:43:55Z,"Yes, I'd be pleased to see anything that improves testing. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTU1MjI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/94,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTcwMDMyNA==,paho.mqtt.python,231700324,94,NA,jamesmyatt,1047337,James Myatt,,NA,2016-07-11T10:39:03Z,2016-07-11T10:39:03Z,"I've included in PR https://github.com/eclipse/paho.mqtt.python/pull/93 some changes that mean that `make test` runs the tests once in the current environment, which also eliminates the duplication between the Python 2 and 3 tests, then relies on Travis to run the tests in all of the environments. I think this is a good first step. I'll look at maybe improving the testing approach and the tests themselves later.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMTcwMDMyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/100,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/100,paho.mqtt.python,166545573,100,are you planning to use epoll instead select?,saintthor,3753880,,saintthor@gmail.com,CLOSED,2016-07-20T10:07:27Z,2016-09-07T20:21:46Z,"and, is there example to run this with tornado?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/100/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/100,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzk0NjY1NQ==,paho.mqtt.python,233946655,100,NA,ralight,79578,Roger Light,,NA,2016-07-20T13:21:07Z,2016-07-20T13:21:07Z,"No, there's no real need here because we're only looking at two sockets.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzMzk0NjY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/102,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/102,paho.mqtt.python,167192350,102,SSL connnection with AWS ELB,brechmos,887675,,craig+github@brechmos.org,CLOSED,2016-07-23T16:44:02Z,2017-04-22T13:55:11Z,"I have an EMQTT daemon running on a couple AWS/EC2s behind a load balancer. I have the ports pointing at the load balancer and can telnet <loadbalancer> 1883 just fine. I created a certificate for the AWS loadbalancer and assigned it to port 8883, which seemed to be fine.

I then tried using the python paho mqtt code (https://pypi.python.org/pypi/paho-mqtt/1.1) to send a message through the load balancer.

I downloaded the certifiate using ""aws acm get-certificate --certificate-arn <arn>"" and put the CertificateChain section into aws_ca.pem and Certificate into aws_cert.pem.

```
tls = {'ca_certs':""aws_ca.pem"", 'certfile': 'aws_cert.pem', 'tls_version': ssl.PROTOCOL_TLSv1, 'ciphers': None}

publish.single(topic=""topic_1"", payload=json.dumps({'test': 'test'}), qos=2,
hostname=""<loadbalancer>"", port=8883, keepalive=60, tls=tls)
```

but it fails with ssl errors.

```
ciphers=self._tls_ciphers)
File ""/usr/lib/python2.7/ssl.py"", line 933, in wrap_socket
ciphers=ciphers)
File ""/usr/lib/python2.7/ssl.py"", line 544, in __init__
self._context.load_cert_chain(certfile, keyfile)
ssl.SSLError: SSL PEM lib (_ssl.c:2603)
```

I suspect I might have the tls part incorrect and I have to admit the certs / ssl confuses me still.

I would appreciate any ideas on how to make this type of secure connection through the load balancer.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/102/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/102,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDc1ODA3OQ==,paho.mqtt.python,254758079,102,NA,PierreF,359833,Pierre Fersing,,NA,2016-10-19T09:12:31Z,2016-10-19T09:12:31Z,"I think your problem is that certfile could not be defined without keyfile. certfile/keyfile is the _client_ certificate and its associated key.

In TLS/SSL, your server always have a certificate. This certificate is validated by the client using ca_certs. But you could also have another certificate, a client certificate used by the server to authenticate the client. In this case (and only in this cause) you should provide both certfile and keyfile.

If your client are authenticated using a username/password, you should just remove certfile option and it should work.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDc1ODA3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/102,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDg2NA==,paho.mqtt.python,296374864,102,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:55:11Z,2017-04-22T13:55:11Z,Issue seems solved. Feel free to reopen if issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDg2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,paho.mqtt.python,168833597,103,client.py > error: unpack requires a string argument of length 2,kenvernaillenvub,16806925,,,CLOSED,2016-08-02T09:00:33Z,2018-07-10T12:53:51Z,"When running MQTT V3.1 in python on Raspbian Jessie Lite, 
I get the following error. Please help :confused: 

Exception in thread Thread-1:
Traceback (most recent call last):
 File ""/usr/lib/python2.7/threading.py"", line 810, in __bootstrap_inner
   self.run()
 File ""/usr/lib/python2.7/threading.py"", line 763, in run
   self.__target(_self.__args, *_self.__kwargs)
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2580, in _thread_main
   self.loop_forever(retry_first_connection=True)
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1378, in loop_forever
   rc = self.loop(timeout, max_packets)
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 897, in loop
   rc = self.loop_read(max_packets)
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1177, in loop_read
   rc = self._packet_read()
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1766, in _packet_read
   rc = self._packet_handle()
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2235, in _packet_handle
   return self._handle_pubackcomp(""PUBACK"")
 File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2542, in _handle_pubackcomp
   mid = struct.unpack(""!H"", self._in_packet['packet'])
error: unpack requires a string argument of length 2
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNzE1MTY1OQ==,paho.mqtt.python,237151659,103,NA,yoch,795960,yoch,,NA,2016-08-03T06:14:46Z,2016-08-03T06:14:46Z,"This is a bit strange, because `self._in_packet['packet']` [should have](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2539) a length of 2 for PUBACK, as defined by the protocol.

More information on the problem would be helpful (which broker you use, relevant part of appication code, maybe a tcp dump, etc).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNzE1MTY1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNzI0OTM1OQ==,paho.mqtt.python,237249359,103,NA,kenvernaillenvub,16806925,,,NA,2016-08-03T14:16:24Z,2016-08-03T14:16:24Z,"seems like the error was thrown because I tried to connect to the server on a port for websockets.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzNzI0OTM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjU0MTc3OA==,paho.mqtt.python,332541778,103,NA,JockDaRock,8311848,Jock Reed,jock.da.rock@gmail.com,NA,2017-09-27T14:34:53Z,2017-09-27T14:34:53Z,"I am having this same issue...

```
{ ""light-on"": true }
{ ""light-on"": true }
{ ""light-on"": true }
{ ""light-on"": true }
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/local/lib/python3.6/threading.py"", line 916, in _bootstrap_inner
    self.run()
  File ""/usr/local/lib/python3.6/threading.py"", line 864, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2606, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1470, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 995, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1273, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1838, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2281, in _packet_handle
    return self._handle_pubackcomp(""PUBACK"")
  File ""/usr/local/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2570, in _handle_pubackcomp
    mid, = struct.unpack(""!H"", self._in_packet['packet'])
struct.error: unpack requires a bytes object of length 2
```

I am running this client on a Docker container.  Linux OS is Alpine on Python 3.6.2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjU0MTc3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjY0MjA3MQ==,paho.mqtt.python,332642071,103,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-27T20:15:44Z,2017-09-27T20:15:44Z,"Pretty sure it's more or less the same issue: you are not talking to an MQTT broker... or at least a mismatch  with the transport (plain vs websocket vs tls).

Now have such traceback is not the best, there is a check that for the length which return MQTT_ERR_PROTOCOL if it's not 2 bytes, but this check is disabled by a _strict_protocol flag to false.
I think this flag should be changed to True (maybe dropping the IF and always doing the check).
At very least in this case either the check should always be performed OR taking explicitly only 2 bytes should be done. Not doing so guarantee to raise an exception since struct.unpack always require the exact size.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMjY0MjA3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQxODkxMQ==,paho.mqtt.python,334418911,103,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-05T10:00:32Z,2017-10-05T10:00:32Z,"Committed a change to be more strict on the protocol. Now instead of raise this exception, the client will disconnect since the broker is using the wrong protocol.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQxODkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/103,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMzgxMTI1NQ==,paho.mqtt.python,403811255,103,NA,Hamelina,22468218,,,NA,2018-07-10T12:53:51Z,2018-07-10T12:53:51Z,"Hi there, I am having the same issue as @JockDaRock , I am running a programm in a docker container. The programm normaly receives message from a mqtt broker and when the message arrives, a value is stored in redis (also running on a Docker container). Any idea to solve the problem ? 
Thanks in advance","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMzgxMTI1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/106,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/106,paho.mqtt.python,171056572,106,on_message callback is called even if topic_matches_sub returns false,captainwasabi,8583375,,,CLOSED,2016-08-14T12:34:54Z,2016-08-14T16:10:51Z,"for instance: subscribed to ""#"" and message is published to ""$data""

I tested this calling topic_matches_sub(""#"",""$data"") and it returned false correctly.  However the messages are still passed to the callback.

I think this is due to this section of code in client.py (starting at line 2562)

```
def _handle_on_message(self, message):
        self._callback_mutex.acquire()
        matched = False
        for t in self.on_message_filtered:
            if topic_matches_sub(t[0], message.topic):
                self._in_callback = True
                t[1](self, self._userdata, message)
                self._in_callback = False
                matched = True

        if matched == False and self.on_message:
            self._in_callback = True
            self.on_message(self, self._userdata, message) #<------- why?
            self._in_callback = False

        self._callback_mutex.release()

```

if matched == False why is the on_message callback being called? I believe that whole if block should be removed.

Edit: hmm, actually no. that if block needs to test against the subscribed channels if it's unfiltered.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/106/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/106,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzOTY4MTMxNQ==,paho.mqtt.python,239681315,106,NA,captainwasabi,8583375,,,NA,2016-08-14T16:02:03Z,2016-08-14T16:02:03Z,"Oh wait, this should be handled by the broker.  (as should filtered messages, but it's a nice extension here anyway. Replacing client.on_message =  on_message with client.message_callback_add(""#"",on_message) in my code solved the problem, but I'm gonna report it as a bug to mosca.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDIzOTY4MTMxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,paho.mqtt.python,172986101,107,Max mqtt payload size,MarcoFierimonte,12981741,Marco,,CLOSED,2016-08-24T15:35:16Z,2020-03-05T11:09:57Z,"Hello,

Is there any limit on the message size that a Client Mqtt Paho can receive? Furthermore can this payload size depends from Operating System or programming language (java, python, etc..) ?

Thanks.
Marco
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjIxODE1MQ==,paho.mqtt.python,242218151,107,NA,miketran78727,11527566,Mike Tran,,NA,2016-08-24T21:44:13Z,2016-08-24T21:44:13Z,"@MarcoFierimonte MQTT allows applications to send Control Packets of size up to 268,435,455 (256 MB) http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836 

However, the limit can be imposed by the broker for practical purposes.  For example, IBM MessageSight has a concept of Endpoint (port) which allows the administrator to set maximum message size. https://www.ibm.com/support/knowledgecenter/SSCGGQ_1.2.0/com.ibm.ism.doc/Administering/ad00360_.html
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjIxODE1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjIyNjY5Nw==,paho.mqtt.python,242226697,107,NA,ralight,79578,Roger Light,,NA,2016-08-24T22:20:50Z,2016-08-24T22:20:50Z,"As Mike says, this is more likely to be enforced at the server side than the client side.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjIyNjY5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjMwODQ2NQ==,paho.mqtt.python,242308465,107,NA,MarcoFierimonte,12981741,Marco,,NA,2016-08-25T07:54:47Z,2016-08-25T07:54:47Z,"@miketran78727 & @ralight thanks for your replies. I read MQTT specs but I checked different behaviour of Paho Clients on SO like: Raspbian, Windows and CentOS. On Rasbian the client Paho (Python) can't receive more than 2 KB of message payload. Instead on CentOS the maximum size is 4 KB.  It makes sense? 
In my project I implemented a MQTT broker using a library called Netty and different Paho clients communicate with it. It works well with Java Paho clients but not with Python clients, they give me the error ""ERRNO 11"" if payload size is big (around 2-4 KB).

Thanks.
Marco
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjMwODQ2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjM0NTcxMQ==,paho.mqtt.python,242345711,107,NA,ralight,79578,Roger Light,,NA,2016-08-25T10:40:24Z,2016-08-25T10:40:24Z,"I've tested this code on raspbian and it receives a 200kB message just fine. Could you test at your end?

```
import paho.mqtt.client as mqtt

def on_message(mqttc, obj, msg):
    print(msg.topic+"" ""+str(len(msg.payload)))

mqttc = mqtt.Client()
mqttc.on_message = on_message
mqttc.connect(""test.mosquitto.org"", 1883, 60)
mqttc.subscribe(""size"", 0)
mqttc.loop_forever()
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjM0NTcxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjQwODI1OQ==,paho.mqtt.python,242408259,107,NA,MarcoFierimonte,12981741,Marco,,NA,2016-08-25T14:31:02Z,2016-08-25T14:31:02Z,"If you tested it and works the problem could be my Java Netty Broker. I am trying to find the bug. Thank you for your help @ralight  :)

Marco
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjQwODI1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjcwNDQzNw==,paho.mqtt.python,242704437,107,NA,MarcoFierimonte,12981741,Marco,,NA,2016-08-26T11:10:32Z,2016-08-26T11:10:32Z,"I missed a important part @ralight . I am using the websocket protocol to communicate. Maybe this is the problem, 2KB is the client paho on websocket limit? :) 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0MjcwNDQzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0Mjk3OTgxNg==,paho.mqtt.python,242979816,107,NA,yoch,795960,yoch,,NA,2016-08-28T15:08:41Z,2016-08-28T15:08:41Z,"maybe related to #89 ?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0Mjk3OTgxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU5MzI1MA==,paho.mqtt.python,249593250,107,NA,PierreF,359833,Pierre Fersing,,NA,2016-09-26T14:52:16Z,2016-09-26T14:52:16Z,"Their is some issue with large WebSockets message. I generate client disconnection with message larger than ~20kb on localhost.
I think is due to [_buffrered_read](https://github.com/eclipse/paho.mqtt.python/blob/33b7c95df3df330ab2ffb7b325e94164db1159fd/src/paho/mqtt/client.py#L2760) that seems to assume that socket.recv(wanted_size) returns data of size wanted_size, which is not always true.

I'll try to come with a PR that fix this issue
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTU5MzI1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjQ0NTM4Nw==,paho.mqtt.python,292445387,107,NA,mvsnbharath,25760674,Venkata Subba Narasa Bhatath Meadam (MVSN),mvsnbharath2@gmail.com,NA,2017-04-07T05:33:52Z,2017-04-07T05:33:52Z,Is there any minimum requirement as well regarding the size of a MQTT message payload?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjQ0NTM4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDkyOQ==,paho.mqtt.python,296374929,107,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:56:24Z,2017-04-22T13:56:24Z,This issue is fixed in develop branch.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NDkyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMjg0NTQ4NA==,paho.mqtt.python,422845484,107,NA,rOY369,36043838,Dishant Arora,,NA,2018-09-19T15:23:35Z,2018-09-19T15:23:35Z,"I have been working on running some benchmark tests for mosquitto broker and paho mqtt client in the terms of maximum payload size , message throughput and number of client connections. With smaller payload size upto 200KB , every message is published and successfuly received at the subscriber side  but with size more than this ,some strange behavior is observed. On average some intial 50-100 messages are received , then the subscriber stops receiving messages . The device on which the client side is running hangs up and needs to be restarted. The broker side is also not receiving these messages but doesnt hang up . 
Test environments : 
1. 2 client objects  (publish,subscribe) are running in one device. 
2. Mosquitto Broker with default conf in another device of same local network .
3. Raspbian 
4. Qos 0 for both pub/sub 
5. MQTT over tcp
What can be the reason behind this behavior ? Is it the large payload size ? Why the client side device just hangs up instead of just throwing an error ? 
Please can anyone help ? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMjg0NTQ4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzc5NzYyMQ==,paho.mqtt.python,423797621,107,NA,huntc,694893,Christopher Hunt,huntchr@gmail.com,NA,2018-09-23T07:31:05Z,2018-09-23T07:31:05Z,"> https://github.com/eclipse/paho.mqtt.python/issues/107#issuecomment-422845484

Because MQTT `Publish` messages and friends must encode the ""remaining length"" in the fixed header, the message must be held in memory during construction so that this value can be determined i.e. it isn't possible to stream a payload. Therefore, MQTT clients on resource constrained devices (which should be all computers!) should enforce a maximum payload size so that memory isn't blown. I don't know if this explains what you're seeing, but it may help.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzc5NzYyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/107,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NTE3MjkzMw==,paho.mqtt.python,595172933,107,NA,sujith1038,8612201,,,NA,2020-03-05T11:09:57Z,2020-03-05T11:09:57Z,"How to read the message continuously with out data loss, 
i tried using both loop_start() and also loop_forever() , but i still have some data loss,.


currently i have a scenario where per second 10 messages are being published, but when i receive i could receive only 4 sometimes 5 , any inputs on how to overcome this challenge.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NTE3MjkzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/108,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/108,paho.mqtt.python,173715631,108,Connection Error using threads,Bierseppi,16672964,Max,,CLOSED,2016-08-29T07:47:12Z,2017-04-22T13:59:30Z,"IT WAS AN FATAL Programming Error
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/108/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/108,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NTE0Mg==,paho.mqtt.python,296375142,108,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:59:30Z,2017-04-22T13:59:30Z,"Can't reproduce. If the issue persist, please provide more information before reopening. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NTE0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111,paho.mqtt.python,179203626,111,Client.subscribe() fails for unicode topic in tuple/list,by2coffee,5196776,Manish,,CLOSED,2016-09-26T11:28:53Z,2017-05-17T18:35:29Z,"Using v1.2 on Python 2.x

As an extension of #16, subscribe should accept unicode topic names when part of tuple and list of tuples too

`subscribe(""my/topic"", 2)` and `subscribe(u""my/topic"", 2)` works
But, 
`subscribe((u""my/topic"", 1))` and `subscribe([(u""my/topic"", 0), (u""another/topic"", 2)])` raises `ValueError('Invalid topic.')`
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNjQ4MQ==,paho.mqtt.python,263826481,111,NA,PierreF,359833,Pierre Fersing,,NA,2016-11-30T09:35:48Z,2016-11-30T09:35:48Z,"Hi,

Indeed, currently with Python 2, the code don't handle unicode very well.
It's fixed on the devel branch by #81, but before this get released, you will need to avoid unicode and only use ascii topic or use Python 3.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNjQ4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NTcxNjg4MA==,paho.mqtt.python,265716880,111,NA,by2coffee,5196776,Manish,,NA,2016-12-08T11:18:27Z,2016-12-08T11:18:27Z,"It seemed like an incomplete fix to #16 was causing this. 

Currently I am converting all my topics to ascii. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NTcxNjg4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/111,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NDU3OA==,paho.mqtt.python,296584578,111,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T08:57:27Z,2017-04-24T08:57:27Z,Closing since this is fixed in develop branch.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NDU3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/112,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/112,paho.mqtt.python,179326644,112,docs: note that exceptions can occur in loop functions,karlp,127907,Karl Palsson,karlp@tweak.au,OPEN,2016-09-26T20:17:51Z,2021-08-15T22:32:28Z,"It's probably worth noting that _loop methods can have exceptions, and try and mention maybe one or two of the common ones.  Not everything is caught and given a return code, and it's a trap for young players when they find their application dies some days later when their code from the examples hits an exception.  Replacing the example text would perhaps make it too bulky, but at least mentioning it would help
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/112/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/112,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTcwMTI4NQ==,paho.mqtt.python,249701285,112,NA,ralight,79578,Roger Light,,NA,2016-09-26T21:21:35Z,2016-09-26T21:21:35Z,"Yes... something needs to be done.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI0OTcwMTI4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/113,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/113,paho.mqtt.python,179326994,113,loop_forever should really loop_forever,karlp,127907,Karl Palsson,karlp@tweak.au,OPEN,2016-09-26T20:19:25Z,2023-12-23T21:38:12Z,"Or, document that it could throw exceptions.    If it's meant to handle reconnections, perhaps it should have a try: except block inside the loop_forever call?  Arguably that's too invasive, and doesn't allow any escape hatch, but for a method documented as ""handles everything, blocks forever"" it still has chances of exceptions that are not obvious at first view.

Heavily related to #112 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/113/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,paho.mqtt.python,179442792,115,Propose to remove SSL support for Python versions that don't have SSLContext,jamesmyatt,1047337,James Myatt,,CLOSED,2016-09-27T09:34:34Z,2017-05-17T18:35:29Z,"SSLContext was introduced in Python 2.7.9 and Python 3.2 and is the most flexible and robust way to establish an SSL connection. We already don't support SSL in Python 2.6 and we don't support Python 3.0 or 3.1 at all, so this would only affect clients running on Python 2.7.x with x < 9. I don't know how common this is, but I suspect it's increasingly unlikely.

The purpose of this change is to simplify the creation of SSL connections and to rely more on the standard library code. This should make it easier to make future enhancements and eliminated code branches that are not exercised in the unit tests.

https://github.com/eclipse/paho.mqtt.python/pull/92 adds support for SSLContext, but does not remove support for versions that do not have SSLContext. However, since Python 3.4+, with SSLContext, there is support to automatically perform the hostname check that is currently implemented separately in the Paho client. Addressing this with full backwards-compatibility adds yet another branch to the `reconnect` logic, which I'd like to trade against removing another branch elsewhere.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDQyNjg1Ng==,paho.mqtt.python,250426856,115,NA,jamesmyatt,1047337,James Myatt,,NA,2016-09-29T10:17:02Z,2016-09-29T10:17:02Z,"The main problem with taking this forwards appears to be that some Linux distributions have Python 2.7 versions that are <2.7.9. For example, Ubuntu 14.04 LTS uses Python 2.7.6. Is this a real problem?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDQyNjg1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDU4MzM4Ng==,paho.mqtt.python,250583386,115,NA,ralight,79578,Roger Light,,NA,2016-09-29T20:35:13Z,2016-09-29T20:35:13Z,"It does make me more reluctant. 14.04 also has Python 3.4 so I suppose it wouldn't be completely dropping support for 14.04.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDU4MzM4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDU4NDE0Mw==,paho.mqtt.python,250584143,115,NA,jamesmyatt,1047337,James Myatt,,NA,2016-09-29T20:38:16Z,2016-09-29T20:38:16Z,"@ralight , that's pretty much exactly what I thought.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1MDU4NDE0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/115,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NTc0NQ==,paho.mqtt.python,296585745,115,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:01:08Z,2017-04-24T09:01:08Z,This has been agreed for develop branch. Related to #163.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NTc0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/117,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/117,paho.mqtt.python,182750497,117,Unable to publish a message to Emqttd,DataEngg,9280169,Kunal Gupta,,CLOSED,2016-10-13T10:18:24Z,2017-04-24T09:06:49Z,"I am publishing a message to a topic in MQTT via paho MQTT python client.
When I send a message via Django server by hitting an api of message it get stuck in paho.publish method of python client in publishing a message.

However Api get stuck for a long time and it does not get return with an error either it gets time out or connection get lost.

Around 150K  user are simultaneously connected to MQTT while publishing message.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/117/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/117,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDcyODkxMQ==,paho.mqtt.python,254728911,117,NA,PierreF,359833,Pierre Fersing,,NA,2016-10-19T07:03:12Z,2016-10-19T07:03:12Z,"Hi,

Could you provide more information so we could try reproduce this issue ? The version of paho-mqtt and eMQTT could be useful.
Also if possible the call to paho to publish the message.

Thanks
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NDcyODkxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/117,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NzQ0MA==,paho.mqtt.python,296587440,117,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:06:49Z,2017-04-24T09:06:49Z,Can't reproduce. Feel free to provide more information before reopening if the issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4NzQ0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/121,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/121,paho.mqtt.python,184481979,121,WebSockets buffered read does not read the whole frame,marcinkowskip,20334655,Piotr Marcinkowski,,CLOSED,2016-10-21T13:17:14Z,2017-05-17T18:34:09Z,"I did not check the socket settings but it seems that reading from socket does not returns all bytes required by WebSockets frame.

Could you change `if` to `while` int the followed code:

``` python
class WebsocketWrapper:

    ...

    def _buffered_read(self, length):

        # try to recv and strore needed bytes
        if self._readbuffer_head + length > len(self._readbuffer):

            if self._ssl:
```

to get:

``` python
class WebsocketWrapper:

    ...

    def _buffered_read(self, length):

        # try to recv and strore needed bytes
        while self._readbuffer_head + length > len(self._readbuffer):

            if self._ssl:
```

I have tested the change in my environment and it seems to work.

Thanks,
PM
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/121/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/121,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NTM3NjAzNw==,paho.mqtt.python,255376037,121,NA,PierreF,359833,Pierre Fersing,,NA,2016-10-21T13:26:10Z,2016-10-21T13:26:10Z,"That seems to be #114. While you proposed fix could work, i has one drawback: _buffered_read is now blocking and will wait for all data to arrive.

I'm not sure about all implication... maybe there is none (what we are blocking it the loop processing packet for the same server, no ?). Maybe there is some (at least I think to keepalive processing).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NTM3NjAzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/121,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4ODYxOQ==,paho.mqtt.python,296588619,121,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:10:33Z,2017-04-24T09:10:33Z,PR #114 fix this issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4ODYxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/122,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/122,paho.mqtt.python,185310511,122,main process hangs! when it publishes message to server,liujian883,3276165,JLiu,liujian88369@gmail.com,CLOSED,2016-10-26T06:50:14Z,2017-04-24T09:12:52Z,"Hi,
In my main process, I create two timers with [threading.Timer] module. and I create a global MQTT client object,
then call client.loop_forever() .
when I publish a message to server in callback function of the two timers with the global MQTT client object created above,the process will hang on the publish function.meantime,the process can not be killed with Ctrl+C.
if I publish the message in the timers with creating a new MQTT client object not the global one every time, everything will be ok.
i don`t know how this happen. 
anyone help me ! Thanks!!!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/122/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/122,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjI4MDA3NQ==,paho.mqtt.python,256280075,122,NA,PierreF,359833,Pierre Fersing,,NA,2016-10-26T08:17:42Z,2016-10-26T08:17:42Z,"Hi,

The Cltr+C that don't kill the process usually means that some thread didn't not finished. In your case it's probably the Timer thread... if they hang they will never finish.

I can't reproduce your issue, so could you provide more informations about condition that produce this hang ?
Are messages using QoS 0 ? Do you had any processing that could cause this hang in paho callback (on_publish, on_message, ...) ? Also could you provide version of paho and Python that you are using ?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1NjI4MDA3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/122,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4OTM0Nw==,paho.mqtt.python,296589347,122,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:12:52Z,2017-04-24T09:12:52Z,Can't reproduce. Please provide more information before reopening if the issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4OTM0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,paho.mqtt.python,185886288,123,Forced to do Certificate authorization for server if using SSL/TLS,asadislam94,15671367,Asad Islam,,CLOSED,2016-10-28T10:07:56Z,2022-09-14T08:01:09Z,"If you want to use SSL/TLS this library forces you to do certificate authorization. I was trying to connect to Azure MQTT and set up tls using the following command:

client.tls_set(""/home/home/cert/Baltimore.pem"", certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)

Here Baltimore..pem is the certificate for authorization. 
But if I change cert_reqs to ssl.CERT_NONE it still checks for certificate and gives me an error that ""Certificate subject does not match remote hostname.""

And also I am forced to provide a certificate file even if I don't want a certificate authorization. If I set it to 'None', it will give me an error that 'ca_certs must not be none'
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Njg4NDgwNA==,paho.mqtt.python,256884804,123,NA,jamesmyatt,1047337,James Myatt,,NA,2016-10-28T10:10:03Z,2016-10-28T10:10:03Z,"Can you try with the implementation in this pull request: https://github.com/eclipse/paho.mqtt.python/pull/92
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI1Njg4NDgwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTU4MjE4OA==,paho.mqtt.python,285582188,123,NA,KohliDev,5468034,Vaibhav Kohli,vaibhavkhl@yahoo.co.in,NA,2017-03-10T05:30:25Z,2017-03-10T05:30:25Z,"I also want to have the same functionality where I can connect to server with ssl.CERT_NONE, but this doesn`t seem to work it forces me to provide certificates. Any workaround for this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTU4MjE4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4MzE4MQ==,paho.mqtt.python,285683181,123,NA,jamesmyatt,1047337,James Myatt,,NA,2017-03-10T14:32:36Z,2017-03-10T14:32:36Z,Try using the `develop` branch,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4MzE4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4Mzk4MA==,paho.mqtt.python,285683980,123,NA,KohliDev,5468034,Vaibhav Kohli,vaibhavkhl@yahoo.co.in,NA,2017-03-10T14:35:38Z,2017-03-10T14:35:38Z,"Thanks @Nzbuu
 By the way I was able to achieve this functionality in Python with help of following code:

```
#!/usr/bin/env python

import paho.mqtt.client as mqtt
import ssl

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.publish(""paho/temperature"", ""temperature"")

client = mqtt.Client()
client.on_connect = on_connect
client.tls_set(""/Users/vkohli/Desktop/mqtt_cert/cert.pem"",
               None,
               None, cert_reqs=ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)
# disables peer verification
client.tls_insecure_set(True)
client.connect(""ip-address"", 8883, 60)

client.loop_forever()
```

I need to provide a random cacert.pem but the above configuration works and I`m able to connect to the server with SSL encryption without checking its certificate.
Why is it a forced requirement to provide cacert.pem?

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L626

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4Mzk4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4OTk5NA==,paho.mqtt.python,285689994,123,NA,jamesmyatt,1047337,James Myatt,,NA,2017-03-10T14:59:05Z,2017-03-10T14:59:05Z,"@KohliDev , if you use the `develop` branch, then you can use whatever `SSLContext` object you want. Then you're only subject to the rules in the `ssl` library.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY4OTk5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY5MTczNw==,paho.mqtt.python,285691737,123,NA,KohliDev,5468034,Vaibhav Kohli,vaibhavkhl@yahoo.co.in,NA,2017-03-10T15:05:36Z,2017-03-10T15:05:36Z,"Still it enforces to provide ca_cert, even if I don't want to check server certificate or need to use client certs:

https://github.com/eclipse/paho.mqtt.python/blob/develop/src/paho/mqtt/client.py#L639

Websocket library which I was using previously never enforced to provide ca_cert.pem , it should be allowed to be None.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY5MTczNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY5NDEwNw==,paho.mqtt.python,285694107,123,NA,jamesmyatt,1047337,James Myatt,,NA,2017-03-10T15:14:21Z,2017-03-10T15:14:21Z,Try the `tls_set_context` method,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTY5NDEwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTkzNTY5Nw==,paho.mqtt.python,285935697,123,NA,PierreF,359833,Pierre Fersing,,NA,2017-03-12T10:29:35Z,2017-03-12T10:29:35Z,"In addition, in devel branch since PR #146, ca_cert is no longer needed if you Python version provide a default system CA (e.g. Python 2.7.9+ or 3.4+)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTkzNTY5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTkzODA5Ng==,paho.mqtt.python,285938096,123,NA,KohliDev,5468034,Vaibhav Kohli,vaibhavkhl@yahoo.co.in,NA,2017-03-12T11:21:34Z,2017-03-12T11:21:34Z,"Thank for pointing this out, any plans to make it part of master branch and release on PyPi.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTkzODA5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTk3NzkyMg==,paho.mqtt.python,285977922,123,NA,Florimond,372102,Florimond Husquinet,florimond@husquinet.net,NA,2017-03-12T21:24:40Z,2017-03-12T21:24:40Z,"Same here. I developped the Emitter Python SDK a couple of months ago (https://github.com/emitter-io/python), and I had to modify the mqtt library and provide this modified version in my package.

My modified version's connect function has one more parameter, ""secure"", like this : 


> def connect(self, host, port=1883, keepalive=60, bind_address="""", secure=False):
>     self.connect_async(host, port, keepalive, bind_address)
>     return self.reconnect(secure)


Then, reconnect, is like this :

> def reconnect(self, secure=False):
> (...)
>     if secure:
>         if HAVE_SSL is False:
>             raise ValueError('This platform has no SSL/TLS.')
>         self._ssl = ssl.wrap_socket(sock)

And this part has been commented :

> """"""
> certfile=self._tls_certfile,
> keyfile=self._tls_keyfile,
> ca_certs=self._tls_ca_certs,
> cert_reqs=self._tls_cert_reqs,
> ssl_version=self._tls_version,
> ciphers=self._tls_ciphers
> if self._tls_insecure is False:
>     if sys.version_info[0] < 3 or (sys.version_info[0] == 3 and sys.version_info[1] < 2):
>          self._tls_match_hostname()
>     else:
>         ssl.match_hostname(self._ssl.getpeercert(), self._host)
> """"""


**Please, change that behavior soon in the master branch :)**","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTk3NzkyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MDQ4Ng==,paho.mqtt.python,296590486,123,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:17:34Z,2017-04-24T09:17:34Z,I believe this issue is fixed. Feel free to reopen if the issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MDQ4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyMDQ3Nw==,paho.mqtt.python,335020477,123,NA,cimba007,3453121,,,NA,2017-10-08T16:55:38Z,2017-10-08T16:55:38Z,"Is this issue really fixed?

With the latest develop-branch
```
#!/usr/bin/env python

import paho.mqtt.client as mqtt
import ssl

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.publish(""paho/temperature"", ""temperature"")

client = mqtt.Client()
client.on_connect = on_connect

client.tls_set(None,
               None,
               None, cert_reqs=ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)
# disables peer verification
client.tls_insecure_set(True)


client.connect(""raspi"", 1884, 60)

client.loop_forever()
```

```
pi@raspio:~/mqtt $ python test2.py
Traceback (most recent call last):
  File ""test2.py"", line 15, in <module>
    None, cert_reqs=ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 709, in tls_set
    self.tls_insecure_set(False)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 735, in tls_insecure_set
    self._ssl_context.check_hostname = not value
ValueError: check_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIRED

```


```
#!/usr/bin/env python

import paho.mqtt.client as mqtt
import ssl

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.publish(""paho/temperature"", ""temperature"")

client = mqtt.Client()
client.on_connect = on_connect

ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False  # Without this line, I does not work
client.tls_set_context(ssl_ctx)
client.tls_insecure_set(True)

client.connect(""raspi"", 1884, 60)

client.loop_forever()
```

```
pi@raspio:~/mqtt $ python test2.py
Traceback (most recent call last):
  File ""test2.py"", line 18, in <module>
    client.connect(""raspi"", 1884, 60)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 760, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 919, in reconnect
    sock.do_handshake()
  File ""/usr/lib/python2.7/ssl.py"", line 840, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyMDQ3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyNTUxMQ==,paho.mqtt.python,335025511,123,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-08T17:54:04Z,2017-10-08T17:54:04Z,"Hi,

there is indeed an issue with:
```
>>> mqtt.Client().tls_set(cert_reqs=ssl.CERT_NONE)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/pierref/dev/src/github.com/eclipse/paho.mqtt.python/src/paho/mqtt/client.py"", line 708, in tls_set
    self.tls_insecure_set(False)
  File ""/home/pierref/dev/src/github.com/eclipse/paho.mqtt.python/src/paho/mqtt/client.py"", line 734, in tls_insecure_set
    self._ssl_context.check_hostname = not value
ValueError: check_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIRED
```

This should works. I reopen the issue to fix this.

In the meantime a workaround is to build manually the SSL context with correct option, like:
```
client = mqtt.Client()
client.on_connect = on_connect

ssl_ctx = ssl.create_default_context()
ssl_ctx.check_hostname = False
ssl_ctx.verify_mode = ssl.CERT_NONE
client.tls_set_context(ssl_ctx)
client.tls_insecure_set(True)  # This is probably redundant with ssl_ctx.check_hostname = False

client.connect(""raspi"", 1884, 60)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyNTUxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyNzg1NQ==,paho.mqtt.python,335027855,123,NA,cimba007,3453121,,,NA,2017-10-08T18:29:44Z,2017-10-08T18:29:44Z,"Thanks, your proposed workaround is working for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTAyNzg1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTA5NTE4NQ==,paho.mqtt.python,335095185,123,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-09T08:34:38Z,2017-10-09T08:34:38Z,Committed a fix for this issue: now using cert_reqs=ssl.CERT_NONE make sure that check_hostname is False.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNTA5NTE4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KSjZa,paho.mqtt.python,1246377562,123,NA,niezhe,39609896,jenny,,NA,2022-09-14T07:47:50Z,2022-09-14T07:47:50Z,通过使用正确的选项手动构建 SSL 上下文方式解决了问题，main分支什么时候能更新呢？,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KSjZa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/123,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KSmiN,paho.mqtt.python,1246390413,123,NA,Florimond,372102,Florimond Husquinet,florimond@husquinet.net,NA,2022-09-14T08:00:24Z,2022-09-14T08:00:24Z,"@niezhe 

The de facto standard language in computer science is English. It's not my mother tongue either, but you don't see me posting comments in French. Please, translate your comment so we can all benefit from your insights.

Thank you for your understanding.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KSmiN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,paho.mqtt.python,189846620,125,Error when try send a file (image),javiisanchez,18263310,Javier Sánchez,jsanchez1b1@gmail.com,CLOSED,2016-11-16T21:12:52Z,2018-02-22T07:36:13Z,"Hi, I'm using paho.mqtt.python in python 2.7 and when I try to send a file (image), I see the next error:

Traceback (most recent call last):
  File ""/home/pi/Desktop/Device1/Scripts/mqtt_publish.py"", line 39, in <module>
    mqttc.publish(MQTT_TOPIC,byteArr,0,True)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 980, in publish
    rc = self._send_publish(local_mid, topic, local_payload, qos, retain, False, info)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1988, in _send_publish
    upayload = payload.encode('utf-8')
UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0: ordinal not in range(128)

The publish script is the next:
```
# Import package
import paho.mqtt.client as mqtt

# Define Variables
MQTT_HOST = ""192.168.1.39"" #iot.eclipse.org
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""
#MQTT_MSG = 25

def on_connect(mqttc, userdata, flags, rc):
        #Subscribe to a Topic
    mqttc.subscribe(MQTT_TOPIC, 0)
    print(""Connection returned result: ""+connack_string(rc))
        
    # Define on_publish event function
def on_publish(mqttc, userdata, mid):
    print ""Message Published...""
    print(""mid: "" +str(mid))
    mqttc.disconect()
    
    # Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCESS"", clean_session=False)

    # Register publish callback function
mqttc.on_publish = on_publish
mqttc.on_connect = on_connect
    # Connect with MQTT Broker
    # probar mqttc.username_pw_set(username, password)
mqttc.connect(MQTT_HOST, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL)		

    # Publish message to MQTT Broker
f= open(""/home/pi/Desktop/images/image.jpg"")
filecontent = f.read()
byteArr = bytes(filecontent)

mqttc.publish(MQTT_TOPIC,byteArr,0,True)
```

and subscribe:
```
import paho.mqtt.client as mqtt

# Define Variables
MQTT_BROKER = ""192.168.1.39""
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""


# Define on_connect event Handler
def on_connect(mosq, obj, rc):
    print(""Connected with result code ""+str(rc))
    #Subscribe to a the Topic
    mqttc.subscribe(MQTT_TOPIC, 0)

# Define on_subscribe event Handler
def on_subscribe(mosq, obj, mid, granted_qos):
    print ""Subscribed to MQTT Topic""

# Define on_message event Handler
def on_message(mosq, obj, message):
    print(""Received message '"" + str(message.payload) + ""' on topic '""
        + message.topic + ""' with QoS "" + str(message.qos))
    #if (type(message.payload) == 'byteArray'):
    f = open('/home/pi/Desktop/image.jpg','w')
    f.write(message.payload)
    f.close()
    print 'image received'
            
# Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCSS"", clean_session=False)

# Register Event Handlers
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe

# Connect with MQTT Broker
mqttc.connect(MQTT_BROKER, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL )
```

When I try read or write the file out of the broker, it do correctly. 

Can you help me please?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTE5MDI0Mw==,paho.mqtt.python,261190243,125,NA,PierreF,359833,Pierre Fersing,,NA,2016-11-17T08:55:06Z,2016-11-17T08:55:06Z,"Hi,

IIRC, on Python 2 with current stable version of paho, you need to pass your binary data in a bytearray. If you don't paho will try to (re-)encode it in UTF-8.

So in your example, instead of

```
byteArr = bytes(filecontent)
```

try

```
byteArr = bytearray(filecontent)
```

Newer version of paho should fix this (it's fixed by #81 merger on master but not yet released)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTE5MDI0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTM3NjI2MQ==,paho.mqtt.python,261376261,125,NA,javiisanchez,18263310,Javier Sánchez,jsanchez1b1@gmail.com,NA,2016-11-17T21:32:32Z,2016-11-17T21:32:32Z,"If I change it, I see the following error:

```
Traceback (most recent call last):
  File ""/home/pi/Desktop/Device1/Scripts/mqtt_publish.py"", line 42, in <module>
    mqttc.loop_forever()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1378, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 897, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1177, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1766, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2245, in _packet_handle
    return self._handle_connack()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2306, in _handle_connack
    self.on_connect(self, self._userdata, flags_dict, result)
  File ""/home/pi/Desktop/Device1/Scripts/mqtt_publish.py"", line 15, in on_connect
    print(""Connection returned result: ""+connack_string(rc))
NameError: global name 'connack_string' is not defined
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTM3NjI2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTM4NDA4OA==,paho.mqtt.python,261384088,125,NA,ralight,79578,Roger Light,,NA,2016-11-17T22:02:57Z,2016-11-17T22:02:57Z,"Try `mqtt.connack_string(rc)` instead - that's how you've imported the module: `import paho.mqtt.client as mqtt`
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTM4NDA4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTc3MTk1Nw==,paho.mqtt.python,261771957,125,NA,javiisanchez,18263310,Javier Sánchez,jsanchez1b1@gmail.com,NA,2016-11-20T11:13:06Z,2016-11-20T11:13:06Z,"Yes, I underand, and this solution is correct!

Thanks to all and thanks for your time!!!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MTc3MTk1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/125,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzU5MjM5NQ==,paho.mqtt.python,367592395,125,NA,Tanmayagarwal14,36722261,Tanmay Agarwal,,NA,2018-02-22T07:36:13Z,2018-02-22T07:36:13Z,"Hi I am new to mqtt. I used your code for sending the text file. I was able to publish the file but not able to receive it through another script. I checked that the file is getting published using console utility. Any help will be Great. thanks in advance

This my code for subscription:-

import paho.mqtt.client as mqtt

MQTT_BROKER = ""iot.eclipse.org""
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""


# Define on_connect event Handler
def on_connect(mqttc, userdata, rc):
    print(""Connected with result code ""+str(rc))
    mqttc.subscribe(MQTT_TOPIC, 0)

# Define on_subscribe event Handler
def on_subscribe(mqttc, userdata, mid, granted_qos):
    print ""Subscribed to MQTT Topic""

# Define on_message event Handler
def on_message(mqttc, userdata, message):
    print(""Received message '"" + str(message.payload) + ""' on topic '"" + message.topic + ""' with QoS "" + str(message.qos))
    if (type(message.payload) == 'byteArray'):
        f = open('/home/chettiar/Desktop/mqtt/filesend/qwer/aa.txt','w')
        f.write(message.payload)
        f.close()
        print 'image received'
            
# Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCSS"", clean_session=False)

mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe

mqttc.connect(MQTT_BROKER, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL )
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzU5MjM5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/126,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/126,paho.mqtt.python,190981717,126,UnboundLocalError when websocket connection is closed immediately,michaelboulton,3809868,,,CLOSED,2016-11-22T12:04:04Z,2017-04-24T09:19:48Z,"When a websocket connection is closed immediately I get this error:

```
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in run 
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2557, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1382, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 901, in loop
    rc = self.loop_read(max_packets)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1181, in loop_read
    rc = self._packet_read()
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1678, in _packet_read
    command = self._ssl.read(1)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2906, in read
    return self._recv_impl(length)
  File ""/home/michael/.virtualenvs/dev/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2850, in _recv_impl
    frame = self._create_frame(WebsocketWrapper.OPCODE_CONNCLOSE, payload, 0)
UnboundLocalError: local variable 'payload' referenced before assignment
```

It's trivially fixed by adding `payload = """"` to the top of `WebsocketWrapper._recv_impl` - I can make a pull request but it's only a 1 line change!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/126/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/126,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTAyNQ==,paho.mqtt.python,296591025,126,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:19:48Z,2017-04-24T09:19:48Z,Issue fixed by pr #130.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTAyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/127,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/127,paho.mqtt.python,191958084,127,how to set the topic will be consume only once?,lioncui,7993683,Lion.Cui,lioncui@163.com,CLOSED,2016-11-28T09:37:31Z,2017-04-24T09:20:21Z,"some web app services, there subscribe the same topic,
when the client publish message, i hope  the topic will be consume only once.
how do it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/127/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/127,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzI0NjA0Nw==,paho.mqtt.python,263246047,127,NA,PierreF,359833,Pierre Fersing,,NA,2016-11-28T11:16:53Z,2016-11-28T11:16:53Z,"Hi,

if i understand correctly, you have two web applications subscribed to the same topic and when a client publish a message you want that this message to be received only by one web application instead of both ?

This is a message queue pattern. And MQTT is a pub-sub protocol, so you can't do this with just MQTT.
Possible solution depending on your requirements include:

* Using different topic per web application
* De-duplicating message on the web application side
* Forwarding all MQTT message to an message queue and have your web applications binding on the message queue.
* Probably other :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzI0NjA0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/127,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzQ0ODIwNg==,paho.mqtt.python,263448206,127,NA,lioncui,7993683,Lion.Cui,lioncui@163.com,NA,2016-11-29T01:22:34Z,2016-11-29T01:22:34Z,@PierreF Thank you very much.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzQ0ODIwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128,paho.mqtt.python,192375489,128,Client.unsubscribe() fails for any unicode topics on python 2,jnill-lutron,19861418,John Nill,,CLOSED,2016-11-29T19:25:48Z,2017-05-17T18:32:40Z,"Using v1.2 on Python 2.7

Seemingly an extension of #111.

I can subscribe a single unicode topic successfully, however when attempting to unsubscribe from that topic, i receive ValueError(""No topic specified, or incorrect topic type."").","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNDU5MA==,paho.mqtt.python,263824590,128,NA,PierreF,359833,Pierre Fersing,,NA,2016-11-30T09:27:12Z,2016-11-30T09:27:12Z,"Hi,

Indeed, currently with Python 2, we can't subscribe or unsubscribe to non-ascii topic. Python 3 does already allow it.
It's fixed on the devel branch by #81, but before this get released, you will need to stick with ascii topic or use Python 3.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2MzgyNDU5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Mzg3OTM4NQ==,paho.mqtt.python,263879385,128,NA,jnill-lutron,19861418,John Nill,,NA,2016-11-30T13:57:45Z,2016-11-30T13:57:45Z,Thanks @PierreF!  Any ideas on the next release date?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2Mzg3OTM4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/128,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTQ4Mw==,paho.mqtt.python,296591483,128,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:21:45Z,2017-04-24T09:21:45Z,"I'm closing the issue, since it's fixed in develop branch.
The release date is expected by end of June.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTQ4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,paho.mqtt.python,192828293,129,IPv6,hermanil,23533679,,,CLOSED,2016-12-01T12:04:23Z,2017-04-24T10:02:48Z,"I cant make it work with IPv6. Is it supported or am I mistaken about the format ? Tested with both python 2 and 3

mqttc.connect(""2001:db8::1"", 1883)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE3NTI1Ng==,paho.mqtt.python,264175256,129,NA,PierreF,359833,Pierre Fersing,,NA,2016-12-01T13:39:52Z,2016-12-01T13:39:52Z,"Hi,

could you provide more information about the error you got ?

From a quick look, I don't see any issue with IPv6 and I can connect to ""::1"" (localhost in IPv6)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE3NTI1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE4Nzg2Ng==,paho.mqtt.python,264187866,129,NA,hermanil,23533679,,,NA,2016-12-01T14:34:00Z,2016-12-01T14:34:00Z,"Thank you for helping PierreF. In short, I created a Mosquitto relay on a Raspberry PI and were able to publish and subscribe successfully to topics using that relays IPv6 address. I also tested it using the MQTT dash Android app. When creating python programs using the paho.mqtt.client library, publishing or subscribing to topics does not work (no error messages) when addressing the realy with IPv6 in this format - mqttc.connect(""2001:db8::1"", 1883) - but it works when I address it with IPv4 with this format - mqttc.connect(""192.168.0.1"", 1883). If you mean it should work, I can recreate the problem and do some packet tracing.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE4Nzg2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE5MTU1NA==,paho.mqtt.python,264191554,129,NA,PierreF,359833,Pierre Fersing,,NA,2016-12-01T14:47:58Z,2016-12-01T14:47:58Z,"Yes, it should work. the host (""2001:db8::1"" in your example, ""::1"" in my test) is passed as-is to socket.create_connection which support IPv6.

You may also get more message to added a callback to on_log:
```
def on_log(client, userdata, level, buf):
    print(buf)

mqttc.on_log = on_log
[...]
mqttc.connect(...)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDE5MTU1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDY3NDk1OA==,paho.mqtt.python,264674958,129,NA,hermanil,23533679,,,NA,2016-12-04T00:17:07Z,2016-12-04T00:17:07Z,"I have discovered that the client() function needs to specify the MQTT version for it to work toward the IPv6 relay. So IPv6 works fine after this change - as you said. For anyone who come across the same problem, try this: 

.Client(""xxxxxxxxx"", protocol=mqtt.MQTTv31)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2NDY3NDk1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMxNjQ0NA==,paho.mqtt.python,287316444,129,NA,cemakpolat,5896075,Cemakpolat ,akpolatcem@gmail.com,NA,2017-03-17T10:14:02Z,2017-03-17T10:14:02Z,"Hi, 
I tried the  "".Client(""xxxxxxxxx"", protocol=mqtt.MQTTv31)""  in may code, however, I encoutered ""socket.error: [Errno 22] Invalid argument"". It works with ""::1"" but not other IPv6 addresses.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMxNjQ0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMyOTExOQ==,paho.mqtt.python,287329119,129,NA,hermanil,23533679,,,NA,2017-03-17T11:17:51Z,2017-03-17T11:17:51Z,"Could it be a networking issue ? Here is an example based on my working code:

def on_connect(mqttc, userdata, rc):
 mqttc.subscribe(""mytopic1"")
 mqttc.subscribe(""mytopic2"")
 mqttc.subscribe(""mytopic3"")
def on_message(mqttc, userdata, msg):
 if msg.topic == ""mytopic1"":
  if msg.payload == ""1"":
    -and so on  
mqttc = mqtt.Client(""myclientid"", protocol=mqtt.MQTTv31)
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.connect(""2001:db8:bad:beef::1"", 1883)
mqttc.loop_start()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzMyOTExOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM0OTIyNw==,paho.mqtt.python,287349227,129,NA,cemakpolat,5896075,Cemakpolat ,akpolatcem@gmail.com,NA,2017-03-17T13:09:00Z,2017-03-17T13:09:00Z,"Here is the console  output:
Source code:

```
#!/usr/bin/env python
import time
import socket
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
   print(""Connected with result conde""+ str(rc))

client =  mqtt.Client(""mycleintid"",protocol=mqtt.MQTTv31)
client.on_connect = on_connect
client.connect(""fe80::6a97:17da:8b84:5948"", 1883)

client.loop_start()

while True:
    time.sleep(3)
    client.publish(""test/temperature"",""test"")
```


```
raceback (most recent call last):
  File ""publisher.py"", line 14, in <module>
    client.connect(""fe80::6a97:17da:8b84:5948"", 1883)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 686, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 808, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/usr/lib/python2.7/socket.py"", line 571, in create_connection
    raise err
socket.error: [Errno 22] Invalid argument
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM0OTIyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM1NjMwNA==,paho.mqtt.python,287356304,129,NA,hermanil,23533679,,,NA,2017-03-17T13:41:00Z,2017-03-17T13:41:00Z,I think the problem is that you use a link-local address. The host cannot determine which interface is the target since all interfaces use the fe80:::/64 prefix. You can probably add a % and an interface index at the end - like fe80::6a97:17da:8b84:5948%2 - or easier - use a global scoped address for the broker.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM1NjMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM1OTA0OQ==,paho.mqtt.python,287359049,129,NA,hermanil,23533679,,,NA,2017-03-17T13:52:19Z,2017-03-17T13:52:19Z,If it is Linux the correct format for the link-local scoped address for the broker is probably something like fe80::ca7:fcb7:3cb3:c3a5%enp14s0 where enp14s0 is the interface id,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM1OTA0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM3MTAxOA==,paho.mqtt.python,287371018,129,NA,cemakpolat,5896075,Cemakpolat ,akpolatcem@gmail.com,NA,2017-03-17T14:36:32Z,2017-03-17T14:36:32Z,"Thanks hermanil, it works like a charm, It seems that I need to spend a bit time to understand the concept of ipv6 :). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM3MTAxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM3MTc2Mg==,paho.mqtt.python,287371762,129,NA,hermanil,23533679,,,NA,2017-03-17T14:39:14Z,2017-03-17T14:39:14Z,"Great. Just be aware if you move the client away from the same network as the broker, you need to target global unicast address to reach the broker","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM3MTc2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM4ODEyNQ==,paho.mqtt.python,287388125,129,NA,cemakpolat,5896075,Cemakpolat ,akpolatcem@gmail.com,NA,2017-03-17T15:35:45Z,2017-03-17T15:35:45Z,"It might be beginner question for Ipv6, how can I find the ""global unicast address"", should I define myself. I have seen many ipv6 unicast addresses in the forums, they are totally custom.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzM4ODEyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzQ3ODcwNA==,paho.mqtt.python,287478704,129,NA,hermanil,23533679,,,NA,2017-03-17T21:42:39Z,2017-03-17T21:42:39Z,"ipv6 interfaces can have multiple addresses from multiple scopes. If you only have a link local address - starts with fe80: - you probably dont have a ipv6 routed network. The link local address is self assigned. For now,  developing in this environment is probably ok but when deployed in a production network, use an address from the GUA scope 2000::/3. You can assign it statically if you want. Addresses can also be auto assigned from a prefix advertisement or assigned by DHCP. It is a bit much to cover in this thread.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzQ3ODcwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTg3Nw==,paho.mqtt.python,296591877,129,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:23:27Z,2017-04-24T09:23:27Z,I believe this issue is fixed. Feel free to reopen if the issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MTg3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/129,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjYwMjgyMg==,paho.mqtt.python,296602822,129,NA,cemakpolat,5896075,Cemakpolat ,akpolatcem@gmail.com,NA,2017-04-24T10:02:48Z,2017-04-24T10:02:48Z,"yes, it is fixed, I forgot to comment 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjYwMjgyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131,paho.mqtt.python,196900358,131,Library doesn't pay attention to the _ssl.pending() bytes ,olgierdh,1899893,Olgierd Humeńczuk,,CLOSED,2016-12-21T10:42:10Z,2017-01-05T10:15:48Z,"Hi,

My name is Olgierd Humeńczuk and I work for Xively@LogMeIn. We’ve encountered some problems while using your Paho Python implementation. The problem occurs when receiving retained messages after connecting to a broker using an SSL socket. It seems that after receiving data on the wire the SSL library keeps part of the data within its internal buffer and Paho Python does not check if this buffer is not empty. This results in a situation when the first message is received and parsed properly but the next message is kept within this SSL internal buffer. After adding the self._ssl.pending() > 0 condition to the paho’s loop function everything works as expecte.  Without this change the Paho Python client won’t receive all of the messages properly.

Do you know anything about that issue ? Perhaps we are not using your library properly?

This is how we’re using the client:

we set up paho by creating an instance and calling tls_set (in order to use SSL sockets)
we create a separate thread for executing the Paho client
we are calling loop( timeout=1.0 ) periodically from the worker thread to keep processing without blocking the thread

Our code of xiPy library and the described fix is available on github at https://github.com/xively/xiPy/pull/5/files

Best Regards
Olgierd Humeńczuk","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODUyOTE2OA==,paho.mqtt.python,268529168,131,NA,PierreF,359833,Pierre Fersing,,NA,2016-12-21T13:59:37Z,2016-12-21T13:59:37Z,"Hi,

thanks for the report. There is indeed a bug in current implementation. We expected select.select() to return the SSL socket if some data are ready to be read... but it's not always true as said the [Python doc](https://docs.python.org/3/library/ssl.html#notes-on-non-blocking-sockets):
> a SSL socket may still have data available for reading without select() being aware of it.

The documentation suggest doing a SSLSocket.recv() (SSLSocket.read() should work the same), but I don't see how to do this with current architecture.

Your solution seems the best one.

Could you submit a PR with your changes ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODUyOTE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODUzNDE5Mg==,paho.mqtt.python,268534192,131,NA,olgierdh,1899893,Olgierd Humeńczuk,,NA,2016-12-21T14:22:48Z,2016-12-21T14:22:48Z,"Sure, I will create one. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2ODUzNDE5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/131,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYxMDA0NQ==,paho.mqtt.python,270610045,131,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-05T10:15:48Z,2017-01-05T10:15:48Z,PR #132 merged,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYxMDA0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,paho.mqtt.python,198326365,133,Problem with SNI support,ppatierno,5842311,Paolo Patierno,,CLOSED,2017-01-02T12:00:55Z,2017-04-24T09:24:10Z,"I'm trying to use the SSLContext support from the ""develop"" branch for SNI support.

What I see is that the ""host"" specified in the connect() method is also used as server_hostname during socket wrapping : 

self._ssl_context.wrap_socket(sock, server_hostname=self._host)

it means that it's impossible with this implementation opening a socket versus an hostname (i.e. ""localhost"") but providing a different SNI (i.e. ""myservice"") during TLS handshake.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTk2NzY0Ng==,paho.mqtt.python,269967646,133,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-02T12:42:07Z,2017-01-02T12:42:07Z,"Hi,

I fear that adding another ""host"" argument to connection and/or TLS setup might confuse user.
I've quickly looked to some API (Python urllib, Python requests, paho.c and paho-java) and none seem to provide a way to specify the ""SNI hostname"".

Before supporting this feature, is it really needed to be supported by the paho library ? In your example why don't you connect to ""myservice"", probably adding ""myservice"" to your /etc/hosts ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTk2NzY0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTk2ODUwOQ==,paho.mqtt.python,269968509,133,NA,ppatierno,5842311,Paolo Patierno,,NA,2017-01-02T12:50:33Z,2017-01-02T12:50:33Z,"Hi,
some other implementations related to a different protocol (see Qpid Proton for AMQP) provide the virtual_host parameter.
The current Paho implementation is useless because the SNI has exactly the objective to connect a server who can provide different certificates. It means that client connect to server_host_name via TCP but then specify the ""virtual"" host via SNI so that the TLS handshake can go forward using the specific certificate for that ""virtual"" host.
It's exactly what happens with HTTPS virtual hosting.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI2OTk2ODUwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYwNjM2NA==,paho.mqtt.python,270606364,133,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-05T09:57:45Z,2017-01-05T09:57:45Z,"I don't see where in production it could be useful, since in production you should have a DNS name matching your certificate name. It seems to be useful only during development if your don't have a correct DNS name.

Having different handling during development and production should be avoided, and this one could be avoided by added the DNS name in your /etc/hosts.

Why can't you update your /etc/hosts in your case ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDYwNjM2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDcwNjEwMg==,paho.mqtt.python,270706102,133,NA,ppatierno,5842311,Paolo Patierno,,NA,2017-01-05T17:36:59Z,2017-01-05T17:36:59Z,@PierreF you are absolutely right ... it's only a problem on developing side ;),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDcwNjEwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/133,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MjA0MQ==,paho.mqtt.python,296592041,133,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:24:10Z,2017-04-24T09:24:10Z,I believe this issue is fixed. Feel free to reopen if the issue persist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MjA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137,paho.mqtt.python,198691594,137,Multiprocessing and version 1.2,michaelboulton,3809868,,,OPEN,2017-01-04T11:57:07Z,2023-12-23T21:41:15Z,"I've noticed that in version 1.2 each mqtt message now has a thread lock associated with it, which means that it's impossible to add a message to a multiprocessing queue. The project I'm using this for has to use multiprocessing, so I've changed this in my own fork so that there just isn't a lock because I'm never accessing messages in a way that would cause a data race.

It would be better if there was some way to specify whether to use threading locks or multiprocessing locks for messages.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzEzMzg3OA==,paho.mqtt.python,473133878,137,NA,akirav,25396848,Akira Vernon,,NA,2019-03-15T02:17:53Z,2019-03-15T02:17:53Z,"Aye so what do you mean by ""changed this in my own fork""?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzEzMzg3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE0NTQ2Mw==,paho.mqtt.python,473145463,137,NA,cdrafael,25072379,Charles Rafael,cdrafael@hawaii.edu,NA,2019-03-15T03:26:36Z,2019-03-15T03:26:36Z,^,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE0NTQ2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/137,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE0NTU0OA==,paho.mqtt.python,473145548,137,NA,cdrafael,25072379,Charles Rafael,cdrafael@hawaii.edu,NA,2019-03-15T03:27:05Z,2019-03-15T03:27:05Z,NEED URGENT NOW ASAP. PLEASE,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzE0NTU0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140,paho.mqtt.python,198720557,140,master vs. develop confusion,swails,779022,Jason Swails,,CLOSED,2017-01-04T14:32:31Z,2017-08-17T03:00:47Z,"It seems recently that there is some confusion for newcomers as to the role of master and develop.  I think experience shows that for people coming to the repository on GitHub, the main branch they should be interested in is `develop` rather than `master`.

This assumes that GH visitors are primarily interested in development and the latest bleeding edge (this is not always the case, but most PRs that are opened by first-time contributors tend to be filed against master, after which they are told to resubmit against develop or fixes).

What do you (repository administrators) think about changing the Default branch to `develop` instead of `master`?  I think this would help alleviate a lot of this confusion and prevent first-time contributors from wasting time preparing a PR that is already done.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDM5NTgwMQ==,paho.mqtt.python,270395801,140,NA,jamesmyatt,1047337,James Myatt,,NA,2017-01-04T15:19:53Z,2017-01-04T15:19:53Z,"I'm not convinced of the value of maintaining each of the following branches separately, given the maintenance overhead involved.

* `master`: Stable release branch
* `fixes`: Bug fixes against stable release branch
* `develop`: New features against stable release branch

In particular:

*  There are no commits to the master branch except for releases. Could individual bug fixes be merged into `master` directly and merge the `master` and `fixes` branches? The formal releases are already tracked via tags.

* The `develop` and `fixes` branches are diverging since the changes `fixes` are not also applied in `develop`. There are also bug fixes made in `develop` only. Would it be simpler to remove the distinction between fixes and new features and merge the `develop` and `fixes` branches? How often is there a formal release with bug fixes only?


Alternatively, maybe a ""TL;DR"" in `CONTRIBUTING.md` would be the simplest solution.
https://help.github.com/articles/helping-people-contribute-to-your-project/
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3MDM5NTgwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTk2NDAyNQ==,paho.mqtt.python,285964025,140,NA,PierreF,359833,Pierre Fersing,,NA,2017-03-12T18:31:28Z,2017-03-12T18:31:28Z,"The most problematic point is that develop don't have fixes committed in branch fixes, making develop branch no usable as-is.
I think a simple solution would be to always cherry-pick fixes in both branch (when the fix apply to both branches). It add a little overhead on maintainer but it's doable.

If that seems reasonable, I will merge the fixes branch in develop branch and make sure to cherry-pick all PR after that merge. @ralight, any thought ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NTk2NDAyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/140,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjEwNzQ4Nw==,paho.mqtt.python,286107487,140,NA,jamesmyatt,1047337,James Myatt,,NA,2017-03-13T13:32:08Z,2017-03-13T13:32:08Z,"Can we start by removing the `fixes` branch? In classical git flow, each hot-fix is merged into both `master` and `develop` and releases are tracked as tags. So the `master` branch in that model would look just like the `fixes` branch in this one.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjEwNzQ4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/141,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/141,paho.mqtt.python,198997160,141,Release branches should be deleted,jamesmyatt,1047337,James Myatt,,CLOSED,2017-01-05T16:26:18Z,2018-08-04T12:52:56Z,"Normally, the release branches are deleted to keep the repo tidy: https://github.com/eclipse/paho.mqtt.python/branches/stale","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/141/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/141,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NzUxNw==,paho.mqtt.python,410447517,141,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-04T12:52:56Z,2018-08-04T12:52:56Z,All stale branch delete.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NzUxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/142,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/142,paho.mqtt.python,200155486,142,Return codes vs. exceptions,michaelboulton,3809868,,,OPEN,2017-01-11T17:24:03Z,2024-01-07T03:43:00Z,"I've noticed in a few parts of the code (especially functions that handle sockets) return codes and exceptions are both used, which means when using the library you often need to have both an exception handler and some extra code which checks what was returned from the function.

I think a lot of people will happily argue about what is 'pythonic' until the cows come home, but it would be nice if there was some kind of MQTTError class which wrapped all the return codes. I realise this might be quite a big change though!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/142/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/142,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MDIxMzEwOQ==,paho.mqtt.python,290213109,142,NA,shamlikt,2134692,shamlik,,NA,2017-03-29T20:19:07Z,2017-03-29T20:19:07Z,"I support above comment. It will be easy to handle exception rather than return code,","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MDIxMzEwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/143,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/143,paho.mqtt.python,203519567,143,publish pops from empty list?,mageea,11169203,Adam,,CLOSED,2017-01-26T23:26:01Z,2017-01-30T14:02:29Z,"Hi - I recently encountered the below stack trace when publishing a few thousands messages. After approximately 1,000 messages (give or take), it seems like there is a call to _on_connect which subsequently calls publish, and it pops off an empty list. I'm not sure what causes this, otherwise I would simply suggest checking the length before calling pop().

>   File ""/usr/lib/python3.4/site-packages/paho/mqtt/publish.py"", line 228, in single
    multiple([msg], hostname, port, client_id, keepalive, will, auth, tls, protocol, transport)
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/publish.py"", line 180, in multiple
    client.loop_forever()
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 1378, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 897, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 1177, in loop_read
    rc = self._packet_read()
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 1766, in _packet_read
    rc = self._packet_handle()
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 2245, in _packet_handle
    return self._handle_connack()
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/client.py"", line 2306, in _handle_connack
    self.on_connect(self, self._userdata, flags_dict, result)
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/publish.py"", line 59, in _on_connect
    _do_publish(c)
  File ""/usr/lib/python3.4/site-packages/paho/mqtt/publish.py"", line 33, in _do_publish
    m = c._userdata.pop()
IndexError: pop from empty list
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/143/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/143,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NTk1MDMyMA==,paho.mqtt.python,275950320,143,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-29T22:09:13Z,2017-01-29T22:09:13Z,I think this bug is fixed by #119. But it's not yet released...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NTk1MDMyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/143,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjA2OTU4NA==,paho.mqtt.python,276069584,143,NA,mageea,11169203,Adam,,NA,2017-01-30T14:02:29Z,2017-01-30T14:02:29Z,"Thanks - after looking at that change, I agree your fix solves this one. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjA2OTU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/144,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/144,paho.mqtt.python,203649228,144,Suggestion: pedantic string encoding management,cladmi,241401,Gaëtan Harter,,OPEN,2017-01-27T14:31:27Z,2024-01-08T11:15:24Z,"In the same way as python3 removed automatic conversion from string to bytes, I would like to have a way to prevent ``publish/will_set`` from auto converting payloads.
My problem started with paho encoding python2 bytes to utf-8 event if it should not (I saw the PR to fix it), and I then tried to find if encoding was well managed in my application.

Now  in my client I just sub-classed 'publish' to assert payload is not an unicode string, (and convert bytes to bytearray for the bug).
I tried taking care of encoding since the beginning but this made me see many places where auto-conversion allowed bad string handling in my code.

Also, in practice, paho is able to automatically encode to utf-8 but cannot, of course, decode automatically so the magic is not symmetric.

Ideas on how to implement it:

* Add a an attribute client to choose this mode or not.
* Add a an option to 'publish/last_will' that sets encoding to 'utf-8' by default (could be backward compatible) and add a ``decoded_payload(encoding='utf-8')`` method to ``iMQTTMessage``.
* Remove auto-conversion and break everyone's application.

I would even make the auto-conversion raise a warning when it is not respected.
Crashing would be problematic as it can happen dynamically on a really well hidden case.
But this is a maintainer choice with other problems in mind.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/144/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/144,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjA3NDI2Mw==,paho.mqtt.python,276074263,144,NA,jamesmyatt,1047337,James Myatt,,NA,2017-01-30T14:22:45Z,2017-01-30T14:22:45Z,"I'm inclined to agree that paho should not take it upon itself to convert payloads, if possible. When it is absolutely necessary, it should be configurable as far as possible and should raise a warning when it is not configured.

Note that it is part of the MQTT spec for all of the following to be UTF-8 strings: Protocol Name, ClientId, Will topic, User name, Topic name, Topic filter. But I don't see any requirement for any other field to be UTF-8. Furthermore, if any of these fields contain ill-formed UTF-8, then the server or client MUST close the network connection.

Also: https://github.com/mqtt/mqtt.github.io/wiki/clarify_utf8_strings","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjA3NDI2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,paho.mqtt.python,203848752,145,"Python 3  payload must be a string, bytearray, int, float or None",AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,CLOSED,2017-01-29T03:51:31Z,2017-01-30T22:13:15Z,"Hi guys the following code was working in one of my classes and now fails with the error in the title:

```
def publishToDeviceChannel(self, channel, data):
		if self._configs['locationID'] == None:
			print(""locationID is required!"")
			return False
		elif self._configs['zoneID'] == None:
			print(""zoneID is required!"")
			return False
		elif self._configs['deviceId'] == None:
			print(""deviceId is required!"")
			return False
		else:
			deviceChannel = '%s/Devices/%s/%s/%s' % (self._configs['locationID'], self._configs['zoneID'], self._configs['deviceId'], channel)
			self.mqttClient.publish(deviceChannel,json.dumps(data))
			print(""Published to Device ""+channel+"" Channel"")
```

Were the function call is as follows:

```
publishToDeviceChannel(
""Sensors"",
{
""Sensor"":""CCTV"",
""SensorID"":1,
""SensorValue"":""NOT RECOGNISED""
}
)
```

I have checked and I have version 1.2, this has confused me, as have never had issues before with this function. Any ideas guys ? Thanks in advance.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjAwOTc1NQ==,paho.mqtt.python,276009755,145,NA,PierreF,359833,Pierre Fersing,,NA,2017-01-30T09:02:32Z,2017-01-30T09:02:32Z,"Hi,

I don't see way you get this error. The full traceback may help. The error ""payload must be a string, bytearray, int, float or None"" should not occur when payload is of type ""str"", which is the type of json.dumps in Python 2 and Python 3.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjAwOTc1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjAxMzQ2NA==,paho.mqtt.python,276013464,145,NA,jamesmyatt,1047337,James Myatt,,NA,2017-01-30T09:20:39Z,2017-01-30T09:20:39Z,"I think you need to check ""is None"" rather than ""== None"", but that may not have a bearing on the error you've observed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjAxMzQ2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjE5MDY1Mw==,paho.mqtt.python,276190653,145,NA,AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,NA,2017-01-30T21:07:13Z,2017-01-30T21:07:13Z,"@PierreF Hi, thanks for the reply I know, it doesnt make sense, the stranger thing is that using this code with exactly the same data:
	
```
	def publishToDeviceWarnings(self, data):
		if self._configs['locationID'] == None:
			print(""locationID is required!"")
			return False
		elif self._configs['zoneID'] == None:
			print(""zoneID is required!"")
			return False
		elif self._configs['deviceId'] == None:
			print(""deviceId is required!"")
			return False
		else:
			deviceSensorsTopic = '%s/Devices/%s/%s/Warnings' % (self._configs['locationID'], self._configs['zoneID'], self._configs['deviceId'])
			self.mqttClient.publish(deviceSensorsTopic,json.dumps(data))
			print(""Published to Device Warnings ""+deviceSensorsTopic)
```

Works as expected, the only difference between this code and the issue code above is that the channel is not send as a parameter, so literally, the existence of the channel parameter is what is causing the issue. 

@Nzbuu hi, no that does affect it and works fine.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjE5MDY1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/145,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjIwNzc5OA==,paho.mqtt.python,276207798,145,NA,AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,NA,2017-01-30T22:09:33Z,2017-01-30T22:09:33Z,"This had been going on for weeks, I just modified the function to print out the types of the variables passed to the function and noticed I was no longer getting any error, I removed the prints and tested again and the issue has gone, very strange I have not actually changed anything to fix it, thanks for the replies guys.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NjIwNzc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147,paho.mqtt.python,204629604,147,Improve documentation for external event loop,ezramorris,17853493,Ezra Morris,,CLOSED,2017-02-01T16:17:57Z,2023-12-23T21:47:38Z,"Related: https://github.com/eclipse/paho.mqtt.python/issues/72

I think the documentation could do with some clarification/small additions for external event loop usage.

Whilst incoming MQTT data is quite self-explanatory (set the event loop to watch for read availability on the socket(), and then run loop_read()), the writing of data is less clear:
- Is there any need to watch the socket() for write availability, and call loop_write() as a result? (I'm guessing not, but the docstring for loop_write() seems to suggest otherwise.)
- What's the correct way to wait on new outgoing data? The two examples contributed in the above issue ([1](https://github.com/eclipse/paho.mqtt.python/issues/72#issuecomment-224860637) and [2](https://github.com/eclipse/paho.mqtt.python/issues/72#issuecomment-263196153)) take different approaches: the first just polls want_write() to determine whether to call loop_write(), and the second watches the internal _sockpairR socket. The second option seems to be more suited to external event loops*.

I would be willing to draft some documentation, with an example using [asyncio](https://docs.python.org/3.4/library/asyncio.html), if these points could be clarified.

*On a side note, if this is the preferred option for waiting for new outgoing packets, should there be a public interface for this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjYxMTExNg==,paho.mqtt.python,286611116,147,NA,downwith,6325898,Nathan L. Conrad,,NA,2017-03-15T01:12:58Z,2017-03-15T01:12:58Z,There's more than one non-public member in the second example.  _state was being used too.  I was thinking that using asyncio to manage this and other sockets would be piece of cake as well.  Now I'm second guessing myself. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjYxMTExNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDk2ODI0MQ==,paho.mqtt.python,334968241,147,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-07T21:53:46Z,2017-10-07T21:53:46Z,"In my opinion, the existing documentation on external event loops is sufficient. That is, if you know in general how the select system call work. In a nutshell: You can ask the operating system if there is anything to read from a file descriptor or if there's enough buffer space for writing something to a file descriptor. And select will block until the answer is ""yes"" to at least one of the questions (or a timeout is hit).

> Is there any need to watch the socket() for write availability, and call loop_write() as a result? (I'm guessing not, but the docstring for loop_write() seems to suggest otherwise.)

Yes, there is. There are 4 possible situations here: You want to write something, or you don't. There's space for writing or there isn't.

  * There's space and you want to write: You should call loop_write.
  * There's space and you don't want to write: loop_write will consume CPU time for nothing. Don't call it. And if there's nothing to do at all, you should be blocking or select until something interesting happens.
  * There's no space but you want to write: Don't call loop_write. Wait (i.e. block on select) until there's space or you'll waste CPU time.
  * There's no space and you don't want to write: Same.

> What's the correct way to wait on new outgoing data?

The correct approach is to first determine if you want to write. If so, ask select if you can write. If so, do write.

> The two examples contributed in the above issue (1 and 2) take different approaches: the first just polls want_write() to determine whether to call loop_write(), and the second watches the internal _sockpairR socket. The second option seems to be more suited to external event loops*.

Both examples are bad, see https://dev.eclipse.org/mhonarc/lists/paho-dev/msg03998.html

> I would be willing to draft some documentation, with an example using asyncio, if these points could be clarified.

> I was thinking that using asyncio to manage this and other sockets would be piece of cake as well. Now I'm second guessing myself.

I believe it's not possible to use asyncio here, without changing paho.mqtt first. See https://dev.eclipse.org/mhonarc/lists/paho-dev/msg03999.html for an idea to fix this. See also https://github.com/mossblaser/aiomqtt ""Unfortunately the author was unable to work out how to integrate paho-mqtt's event loop into asyncio"". The author is not to blame :-) 

I'll try to write a correct example using https://docs.python.org/3/library/select.html#select.select for #72. This should suffice as documentation. And I'll try to implement changes so asyncio and other event loops can actually be used, and provide an example for this too.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDk2ODI0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/147,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXSZd,paho.mqtt.python,1868375645,147,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T21:47:38Z,2023-12-23T21:47:38Z,Closing this because #235 improved the situation (and this issue is now pretty stale!). If you believe this is still a problem please feel free to open a new issue with updated examples etc.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXSZd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/148,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/148,paho.mqtt.python,204886553,148,Troubles using set_tls_insecure(True),durera,4400618,David Parker,,CLOSED,2017-02-02T14:19:41Z,2017-02-24T15:22:27Z,"code snippet:
```
self.client = paho.Client(self.clientId, clean_session=False)
<snip>
try:
  <snip>
  self.logger.info(""Setting TLS INSECURE"")
  self.client.tls_insecure_set(True)
  self.client.connect(self.address, port=self.port, keepalive=self.keepAlive)
  self.client.loop_start()
  <snip>
except socket.error as serr:
    self.client.loop_stop()
    self.logAndRaiseException(ConnectionException(""<yadda yadda yadda> - %s"" % (str(serr))))
```

result:
```
INFO     Setting TLS INSECURE
CRITICAL <yadda yadda yadda> - [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)
```

Trying to get this working in a development environment where we know the certificates aren't going to match up and understand the risk associated with disabling verify (e.g. in requests library we are setting `verify=False`).  Yet can't seem to get the mqtt library to do similar as get the above socket error on connect, is there some other setting I need to also use?

Have tried with both paho-mqtt 1.1 and 1.2, hitting the same issue (on python 2.7.13).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/148/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/148,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Njk4ODEyOA==,paho.mqtt.python,276988128,148,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-02T15:26:31Z,2017-02-02T15:26:31Z,"Hi,

your code snippet is incomplete, it does not show the tls_set() option that is the important part in your problem. I assume that you use something like tls_set(ca_certs=""/etc/ssl/certs/ca-certificate"").
The error is that the certificate could not be validated using the given CA on tls_set(). This verification occur because you called tls_set() with cert_reqs=ssl.CERT_REQUIRED (or keeps the default value for it).
tls_set_insecure(True) will only disable the verification that the hostname of the connection (self.address) match the certificate CN.

To fix your issue, you have 2 possibilities:
* either you can provide the CA (or the self-signed certificate) to the client, and use it in tls_set(ca_certs).
* or you can disable all certificate checks with cert_reqs=ssl.CERT_NONE in tls_set()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3Njk4ODEyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/148,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzAxMTQ0Mw==,paho.mqtt.python,277011443,148,NA,durera,4400618,David Parker,,NA,2017-02-02T16:44:01Z,2017-02-02T16:44:01Z,"I'm an idiot, so obvious.  Thank you @PierreF ... I'm blaming a long day and an even longer week ;)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3NzAxMTQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/149,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/149,paho.mqtt.python,205886339,149,Web site Getting Started example code TabError: https://eclipse.org/paho/clients/python/,ozgurturkiye,8600407,Özgür,,CLOSED,2017-02-07T13:26:03Z,2017-04-24T10:44:18Z,"Web site Getting Started code Error `Tab error`

  File ""example.py"", line 8
    client.subscribe(""$SYS/#"")
                             ^
TabError: inconsistent use of tabs and spaces in indentation

Site: On web site: https://eclipse.org/paho/clients/python/   Getting Started code has `TabError`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/149/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/149,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjYxNTcxOQ==,paho.mqtt.python,296615719,149,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T10:44:18Z,2017-04-24T10:44:18Z,Thanks for your report. Fix pushed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjYxNTcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/150,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/150,paho.mqtt.python,206518770,150,connect_srv not working for secure mqtt,je-al,9970052,,,CLOSED,2017-02-09T14:25:22Z,2017-05-17T18:29:12Z,"(I've not thoroughly tested this)
I'm trying to use `connect_srv` with `secure-mqtt.*` records, and from looking at the code in the current master, it seems there's no way to enable the code to actually query for them.

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L705

currently checks for `self._ssl` to be assigned, but that only ever happens on `reconnect` which is called from the `connect` bellow.

I've empirically solved this by changing the line to:
```
            if self._tls_ca_certs is not None:
```
instead.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/150/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/150,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODY1ODAyNg==,paho.mqtt.python,278658026,150,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-09T14:32:59Z,2017-02-09T14:32:59Z,"Hi,

Good catch! Indeed it's a bug present in released and in fixes branch.

Due to a rewrite of SSL in develop branch, this bug is fixed in this branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODY1ODAyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/150,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODY4MTE2Nw==,paho.mqtt.python,278681167,150,NA,je-al,9970052,,,NA,2017-02-09T15:47:26Z,2017-02-09T15:47:26Z,:+1: ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI3ODY4MTE2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151,paho.mqtt.python,207538673,151,Using TLS v1.2 and client.loop() doesn't receive all MQTT packets,icedwards,25180042,,,CLOSED,2017-02-14T14:58:16Z,2017-04-24T09:37:18Z,"I am connecting to a server which puts multiple MQTT packets in a single TCP packet. I'm using client.loop() to receive messages published to my subscription, and this works just fine if I use a connection which is not secure.

As soon as I attempt to use a secure connection, if the server sends multiple MQTT packets in a single TCP packet, the loop sees the 1st of these MQTT packets only and ignores the rest.

As a workaround, if I set max_packets to something other than 1 (and modify client.py to pass the value through) then the code does work correctly, i.e. it correctly unpacks the MQTT packets and presents them to my on_message callback.

A bit of additional information on this, I'm using TLS v1.2 and have tried running under python 2.7.13 and python 3 with the same result.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MDcxNzIzNw==,paho.mqtt.python,280717237,151,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-17T17:41:54Z,2017-02-17T17:41:54Z,"This strange behavior remind me issue #131. This could be the cause of your problem. If it's the case, it's already fixed in branch fixes by PR #132, but not yet released.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MDcxNzIzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MTE1MDMxMA==,paho.mqtt.python,281150310,151,NA,icedwards,25180042,,,NA,2017-02-20T18:25:32Z,2017-02-20T18:25:32Z,"Certainly sounds like the same problem. Indeed, the messages in question were retained messages that matched my wildcard topic filter (although, I don't think this is a requirement, just that multiple messages are sent in a single TCP packet).

Any idea when PR #132 will be released?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MTE1MDMxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/151,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5NTEyNw==,paho.mqtt.python,296595127,151,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T09:35:30Z,2017-04-24T09:35:30Z,"~~This issue is fixed on develop branch.~~
~~The release is expected by end of June.~~
Edit:
This issue is fixed and released since v1.2.1","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5NTEyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152,paho.mqtt.python,208666728,152,Interrupting with sys.exit(),diegopx,3267546,Diego Guerrero,,CLOSED,2017-02-18T19:52:51Z,2021-07-25T21:04:20Z,"loop() should re-raise the SystemExit exception (as it re-raises the KeyboardInterrupt). Otherwise sys.exit() doesn't work if called inside the loop function, e.g. from a signal handler.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzE5NTc5MQ==,paho.mqtt.python,287195791,152,NA,jcgsville,5414418,Chandler Gonzales,,NA,2017-03-16T21:25:25Z,2017-03-16T21:25:25Z,"I'm experiencing something similar, and I don't know another way to fix it","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NzE5NTc5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMjg0NjcwMw==,paho.mqtt.python,312846703,152,NA,zapaan,9280795,Francky,fybo@protonmail.com,NA,2017-07-04T10:44:39Z,2017-07-04T10:44:39Z,"Same here, I think it should only catch`Exception` to let system-exiting exceptions do their job (exit the system). The obvious workaround is to raise a `KeyboardInterrupt` directly in your code ...

Also, it could accept an argument to let unknown exceptions be raised, or change the return value so we can know what's happening","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMjg0NjcwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/152,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400zcX,paho.mqtt.python,886257431,152,NA,ralight,79578,Roger Light,,NA,2021-07-25T21:04:19Z,2021-07-25T21:04:19Z,This was fixed in v1.5.0. Thanks for the report and comments.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400zcX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,paho.mqtt.python,209678532,153,Trying to pass .ts and .ks certificates for a mqtt connection,Sandyroy95,22029813,,,CLOSED,2017-02-23T06:48:10Z,2017-04-11T15:09:44Z,"I am trying to connect to an mqtt broker through a paho.mqtt client in Python. When i tried to implement my testcase in a Eclipse paho mqtt utility tool, i found out that i need to pass the .ts(trust store) and .ks (key store) certificate along with the pass phrase to create a connection. The broker doesnt seem to take client side .pem certificate and the corresponding private key. 
Can anyone please tell me how do i achieve the same in my python code. tls_set doesnt seem to take .ts and .ks certificates. I am a beginner so not exactly aware of how to do that.I am attaching my code for reference:

import paho.mqtt.client as mqtt
import time
import os
import ssl

payload=""""""{
        ""measureIds"": [1],
        ""timestamp"": 1487225222000,
        ""values"": [""2763""]
}""""""

def on_connect(client,userdata,flags,rc):
	print(""Connection ack recieved wirh code %d."" %(rc))

def on_message(client1, userdata, message):
	print(""message received"" ,str(message.payload.decode(""utf-8"")))

client1=mqtt.Client(""somevalue"",protocol=ssl)
client1.tls_set(""/path/client.pem"",certfile=""/path/client.pem"",keyfile=""/path/privkey.pem"")
client1.on_connect=on_connect
client1.om_message=on_message
time.sleep(1)
client1.connect(""hostname"",8883,60)
client1.loop_start()
client1.publish(""measures/somevalue"",str(payload))
time.sleep(5)
client1.disconnect()
client1.loop_stop()

Thanks.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA0ODM4OQ==,paho.mqtt.python,282048389,153,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-23T16:44:29Z,2017-02-23T16:44:29Z,"TrustStore and KeyStore are specific to Java world, so no Python can't use them directly.

You need to convert them to PEM file... which by looking are you Python code seems to be done.

On you code, don't create Client with protocol=ssl. Protocol should only be paho.mqtt.client.MQTTv31 or paho.mqtt.client.MQTTv311. That being said, I'm not sure it's the cause of your error.

If file are in the correct PEM format, then the errors may be the first argument to tls_set, which is ca_certs. You give ""client.pem"" to this argument, which may be wrong. ca_certs must contains certificate(s) needed to validated the *server* certificate.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA0ODM4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA5NzE3Nw==,paho.mqtt.python,282097177,153,NA,Sandyroy95,22029813,,,NA,2017-02-23T19:37:10Z,2017-02-23T19:37:10Z,"@PierreF Sure i'll try to implement that. Btw, the reson why i mentioned the protocol as ssl is  because in the eclipse paho mqtt utility tool, the server url is passed as:  'ssl://hostname:8883. 
Is there a specific way to declare that in my python script?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA5NzE3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjEwNDU5NQ==,paho.mqtt.python,282104595,153,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-23T20:03:40Z,2017-02-23T20:03:40Z,Calling tls_set will enable TLS/SSL.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjEwNDU5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjYzMjgyNw==,paho.mqtt.python,282632827,153,NA,Sandyroy95,22029813,,,NA,2017-02-27T05:40:31Z,2017-02-27T05:40:31Z,"Thanks @PierreF .However, i am still having some trouble with the CA_CERT. Where do i get it from? I have a client side certificate(client.pem and client.p12), plainkey and the private key with me!!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjYzMjgyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjY1OTg1NA==,paho.mqtt.python,282659854,153,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-27T08:44:13Z,2017-02-27T08:44:13Z,"If you are running the server side, you also have a server side certificate and private key. This certificate could be the ca_cert.
If the server side is using ""real"" certificate (e.g. not self-signed), you could use your system ca-certificate (/etc/pki/tls/certs/ca-bundle.crt under CentOS/Fedora, /etc/ssl/certs/ca-certificates.crt under Debian/Ubuntu) I don't know for other systems.
If none of the above are true, the server operator should provide the certificate, you could in last change extract the certificate directly from the server. Note that this reduce the protection normally offered by a TLS/SSL connection, since you will ask the server itself to prove its own identity.
To extract it, the following should work:
```
openssl s_client -showcerts -servername www.example.com -connect www.example.com:443 </dev/null
```
The certificate(s) will be shown on the console. Copy/paste them to a file and you should be good.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjY1OTg1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjY2MzgwNg==,paho.mqtt.python,282663806,153,NA,Sandyroy95,22029813,,,NA,2017-02-27T09:03:30Z,2017-02-27T09:03:30Z,Cool.Thanks again @PierreF ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjY2MzgwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI1NzMyMw==,paho.mqtt.python,293257323,153,NA,opsagenceoneo,5023041,Batteria,,NA,2017-04-11T13:14:52Z,2017-04-11T13:14:52Z,"hi 

i want read secure MQTT message using apache bahir library. and i don't know how to intergate de pem  certificate and private file

can you help me please","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI1NzMyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI3Njk1OA==,paho.mqtt.python,293276958,153,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-11T14:15:31Z,2017-04-11T14:15:31Z,"As said above, if you are only using broker certificate for your SSL/TLS communication and still using username/password for authentication, then you just have to call tls_set with the CA certificates. The CA certificates will be used to validate the broker certificate:
```
client.tls_set(""/etc/pki/tls/certs/ca-bundle.crt"")  # Redhat/CentOS/Fedora
client.tls_set(""/etc/ssl/certs/ca-certificates.crt"")  # Debian/Ubuntu
```

If you are also using client certificate to authenticate client, then you need to provide the client certificate and client private key to tls_set call as [documented](https://github.com/eclipse/paho.mqtt.python#tls_set).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI3Njk1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5MDIyMQ==,paho.mqtt.python,293290221,153,NA,opsagenceoneo,5023041,Batteria,,NA,2017-04-11T14:56:46Z,2017-04-11T14:56:46Z,"Firstly i want thank you

 i want to recieve message from aws IOT  using sqlContext.readStream in databricks: 

as example of  using code :
val lines = sqlContext.readStream
    .format(""org.apache.bahir.sql.streaming.mqtt.MQTTStreamSourceProvider"")
    .option(""topic"", ""$aws/things/agence/shadow/update/accepted"")
    .option(""QoS"", 0)
    .option(""clientId"", ""sparkTest1989201524565"")
    .option(""cleanSession"", ""true"")
    .option(""com.ibm.ssl.protocol"",""SSL_TLS"")
 .option(""com.ibm.ssl.trustStore"",sqlContext.read.format(""text"").load(""/FileStore/tables/ttdc16zc1491916221234/testkeystore.p12"").toString())
    .load(""ssl://XXXXX.iot.eu-west-1.amazonaws.com:8883"").as[(String, Timestamp)]

val words = lines.map(_._1).flatMap(_.split("" ""))
val wordCounts = words.groupBy(""value"").count()
val query = wordCounts.writeStream
  .outputMode(""complete"")
  .format(""console"")
  .start()
query.awaitTermination()
 as response i get bad_certificate.
thanks a lot for your help","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5MDIyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5MTcxNw==,paho.mqtt.python,293291717,153,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-11T15:01:12Z,2017-04-11T15:01:12Z,"I think you are in the wrong project. This project is the Python client for MQTT.
But you code looks like Java client for MQTT.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5MTcxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/153,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5NDQ1Ng==,paho.mqtt.python,293294456,153,NA,opsagenceoneo,5023041,Batteria,,NA,2017-04-11T15:09:44Z,2017-04-11T15:09:44Z,"Yes
 can you please helping me using python with the otpion to include ssl certificate?

i need your help if it's possible of course","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzI5NDQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,paho.mqtt.python,209771268,154,Best way to handle IPv4,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,CLOSED,2017-02-23T14:11:18Z,2017-03-01T14:46:47Z,"What is the best way to handle a router that doesn't support IPv6? I recently discovered that I could not get the socket to create a connection on my home router while it was working at my office. I was able to get other mqtt connections to work from a node.js library and the MQTT.fx mac app but never from paho.mqtt.python. After using nettop to monitor my traffic I discovered that paho was trying to force mqtt connections on IPv6 while the others were using IPv4. Then I found out that my ATT router doesn't support IPv6. 

As a temporary solution, I'm resolving the hostname as IPv4 in client.py before trying to create the connection like so: `host = socket.gethostbyname(self._host)`. 

Is there a better way to handle this though? I'd obviously like to leave the source code alone if possible. Any thoughts with this? 

Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA1MDU5Ng==,paho.mqtt.python,282050596,154,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-23T16:51:57Z,2017-02-23T16:51:57Z,"To be sure I correctly understand the issue:

* You are connecting to something like client.connect(""home.mydomain.com"")
* home.mydomain.com do resolve to an IPv6 (and an IPv4)
* Your current network don't allow IPv4

It that the case, at first I would think there is an issue with your current network. As it let paho.mqtt.python/Python/your system think IPv6 works but it don't.
Usually, on a non-working IPv6 network, since your don't have an IPv6 on your machine connection to IPv6 socket are not tried (or fail very fast).

So if my initial understanding of the issue is correct, could you confirm that you have (or not) an IPv6 associated with your laptop while at your office ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjA1MDU5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjEyODc5OA==,paho.mqtt.python,282128798,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-02-23T21:36:06Z,2017-02-23T21:36:06Z,"So to give context, I'm connecting to an AWS iOT endpoint.

I will be at the office tomorrow and can check.

What is weird is that both the MQTT.fx app and AWS iOT node.js SDK both connect as expected. When I use nettop to monitor connections I see that they both try it over IPv4 right away. This SDK is the only one I've seen so far that only tries it over IPv6.

I'm not super well versed in networking so please let me know if I need to clarify any of this more.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjEyODc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMyNDgwNw==,paho.mqtt.python,282324807,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-02-24T15:48:55Z,2017-02-24T15:48:55Z,Observing the connection with nettop at my office now. It never tries to connect with IPv6. It starts and stays with IPv4. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMyNDgwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMzMTk0MA==,paho.mqtt.python,282331940,154,NA,PierreF,359833,Pierre Fersing,,NA,2017-02-24T16:14:31Z,2017-02-24T16:14:31Z,"With MQTT.fx and/or AWS iOT node.js SDK ?

I don't know for them, but paho-mqtt Python will use IPv6 and/or IPv4 depending on what is available. 
Normally it should not try IPv6 if not available or fallback very quickly to IPv4.

What is done (by the Python library) is:
* retrieve address use getaddrinfo: this method should return both IPv6 and IPv4 address
* try each address
** if connection fail try the next one
** if connection success, use that connection

If your network don't have IPv6, creating the socket should fail immediately (your OS will refuse to try connect to this IPv6 because you can't reach this IPv6 address, since your don't have IPv6 network).

Example in my situation:
```
>>> socket.getaddrinfo('www.google.fr', 443, 0, socket.SOCK_STREAM)                  
[(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('74.125.206.94', 443)), (<AddressFamily.AF_INET6: 10>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2a00:1450:400c:c04::5e', 443, 0, 0))]
# Note: the IPv4 is the first. Somewhere getaddrinfo know that IPv4 is preferred

# If i try anyway
>>> sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM, 6)
>>> sock.connect('2a00:1450:400c:c04::5e')
OSError: [Errno 101] Network is unreachable
# Error occur immediately 
```

This happen because the IPv6 2a00:1450:400c:c04::5e could not be reachable from my system which does not have any IPv6:
```
ifconfig eth0
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.2  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::1234:ab0:1234:5678  prefixlen 64  scopeid 0x20<link>   # link IPv6 does not count
```

Under linux you can check the route used to reach an IP with:
```
$ ip route get 2a00:1450:400c:c04::5e
unreachable 2a00:1450:400c:c04::5e [...]
```

If your system think this address is reachable but it's not, there is some issue with your system/network. In this case your should probably try to fix this problem.

If you are using Python 2.7+ or 3.2+ you may try to specify bind_address='0.0.0.0' to connect(). It may work (it seems to work on Linux) but I'm don't know how standard it is and may break on other system.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMzMTk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMzNDI0MA==,paho.mqtt.python,282334240,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-02-24T16:22:46Z,2017-02-24T16:22:46Z,"I gave the MQTT.fx and node.js SDK as examples to show that I am able to connect to the same endpoint on my network using other MQTT libraries and apps.  It may very well be some sort of issue with my network but other libraries and apps are able to connect on it just fine. 

For me the IPv6 immediate failure that you described never happens. It just hangs seemingly forever.

I am using a basic ATT U-Verse modem router combo. I have a neighbor with the exact same setup that I will try with tomorrow. I'll be curios to see if it is just local to me or if it happens for everyone that uses the same kind of router and service provider.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjMzNDI0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjkyMDQxNA==,paho.mqtt.python,282920414,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-02-28T02:12:33Z,2017-02-28T02:12:33Z,Tested at my neighbors house who is also using ATT as their internet provider and was not able to connect. It hung trying to connect with IPv6 just like it does with mine. MQTT.fx and the node.js library worked just fine. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MjkyMDQxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA1ODU2OA==,paho.mqtt.python,283058568,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-02-28T14:48:09Z,2017-02-28T14:48:09Z,Looking at the nettop connections on my mac it looks like MQTT.fx and every other mqtt app or sdk I use never tries to connect on IPv6. They all default to IPv4.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA1ODU2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA3NDc0Ng==,paho.mqtt.python,283074746,154,NA,ralight,79578,Roger Light,,NA,2017-02-28T15:42:47Z,2017-02-28T15:42:47Z,"Would you be able to reproduce the test that @PierreF did? I mean:

    import socket
    socket.getaddrinfo('your endpoint', port, 0, socket.SOCK_STREAM

then report the (anonymised if you wish!) result so we can see what type of addresses get returned?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA3NDc0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA4MzUzOA==,paho.mqtt.python,283083538,154,NA,ralight,79578,Roger Light,,NA,2017-02-28T16:09:55Z,2017-02-28T16:09:55Z,You could also try connecting to test.mosquitto.org - that supports both IPv4 and IPv6 and I've connected to it many times with the Python client from an IPv4 only network.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzA4MzUzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzIxNTA3Mw==,paho.mqtt.python,283215073,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-03-01T01:21:01Z,2017-03-01T01:21:01Z,"Here is my setup and output

```
>>> import socket
>>> socket.getaddrinfo('a3pzb0u64rd1gp.iot.us-east-1.amazonaws.com', 8888, 0, socket.SOCK_STREAM)
[(<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::36a4:27bd', 8888, 0, 0)), (<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::22c2:50dc', 8888, 0, 0)), (<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::3402:59a', 8888, 0, 0)), (<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::6b15:1e06', 8888, 0, 0)), (<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::3400:770a', 8888, 0, 0)), (<AddressFamily.AF_INET6: 30>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('2406:da00:ff00::3657:ad13', 8888, 0, 0)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('52.0.119.10', 8888)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('54.164.39.189', 8888)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('52.2.5.154', 8888)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('107.21.30.6', 8888)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('34.194.80.220', 8888)), (<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('54.87.173.19', 8888))]
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzIxNTA3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzI3ODA4MA==,paho.mqtt.python,283278080,154,NA,PierreF,359833,Pierre Fersing,,NA,2017-03-01T08:37:05Z,2017-03-01T08:37:05Z,"I still think this is an system bugs or misconfiguration.
On my systems (Ubuntu, Fedora and Windows 10), IPv4 are always returned before IPv6. Manual page state that application should use order returned by getaddrinfo, so it's logical that Python try IPv6. The fact that other library works may only indicate that they don't follow this recommendation.

A workaround for this systems bugs, you could be to try to force the bind_address when calling connect() to '0.0.0.0' which is invalid for IPv6 (at least on Ubuntu... not sure about the portability of such hack).

If you want to investigate on the root cause, I'm pretty sure it's a network misconfiguration. getaddrinfo should return IPv6 addresses before IPv4 only if they are usable. That means that your system think the given IPv6 address (2406:da00:...) is reachable. This should only be true if your system has an IPv6 with a configured IPv6 gateway... which should NOT occur if your current network does not have IPv6.
Checking which addresses (IPv4 and IPv6) are present on your system and the routing could help you to find the cause.
Maybe your router is mis-configured to provide an IPv6 on your LAN network but don't have internet IPv6 connection ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzI3ODA4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzMwMjc4MA==,paho.mqtt.python,283302780,154,NA,ralight,79578,Roger Light,,NA,2017-03-01T10:26:22Z,2017-03-01T10:26:22Z,"I got this, which puts the IPv4 addresses first and fails quickly even if I try to connect to an IPv6 address.

```
>>> import socket
>>> socket.getaddrinfo('a3pzb0u64rd1gp.iot.us-east-1.amazonaws.com', 8888, 0, socket.SOCK_STREAM)
[(2, 1, 6, '', ('34.194.80.220', 8888)), (2, 1, 6, '', ('107.21.30.6', 8888)), (2, 1, 6, '', ('54.87.173.19', 8888)), (2, 1, 6, '', ('54.164.39.189', 8888)), (2, 1, 6, '', ('52.2.5.154', 8888)), (2, 1, 6, '', ('52.0.119.10', 8888)), (10, 1, 6, '', ('2406:da00:ff00::3657:ad13', 8888, 0, 0)), (10, 1, 6, '', ('2406:da00:ff00::3402:59a', 8888, 0, 0)), (10, 1, 6, '', ('2406:da00:ff00::3400:770a', 8888, 0, 0)), (10, 1, 6, '', ('2406:da00:ff00::22c2:50dc', 8888, 0, 0)), (10, 1, 6, '', ('2406:da00:ff00::36a4:27bd', 8888, 0, 0)), (10, 1, 6, '', ('2406:da00:ff00::6b15:1e06', 8888, 0, 0))]

```

I agree with @PierreF, it seems like there may be a misconfiguration somewhere. Does your computer have an IPv6 IP address associated with it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzMwMjc4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/154,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzM1OTM1NA==,paho.mqtt.python,283359354,154,NA,richmondwatkins,4558102,Richmond Watkins,richmondwatkins@mac.com,NA,2017-03-01T14:46:47Z,2017-03-01T14:46:47Z,"Ok so I had to switch the ""Configure IPv6"" setting on my mac to ""Link-local only"".

Then on my raspberry pi (which I was also having the issue on) I had to add the following to `/etc/sysctl.conf`

```
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.eth0.disable_ipv6 = 1
```

To be honest I don't fully understand why all this made a difference and I don't know if changing the pi settings will cause issues down the road. I need to do some reading up on IPv6 and networking in general.

Thanks you both for you help! ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzM1OTM1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,paho.mqtt.python,210416561,155,loop_forever() Error exit! ,xk1yan,13391270,,,CLOSED,2017-02-27T08:24:18Z,2021-09-05T07:55:38Z,"  self.client.loop_forever()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1378, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 897, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1177, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1766, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2239, in _packet_handle
    return self._handle_publish()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2389, in _handle_publish
    (slen, packet) = struct.unpack(pack_format, self._in_packet['packet'])
struct.error: bad char in struct format","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTQ4NTE0MA==,paho.mqtt.python,309485140,155,NA,pelmeshk0,7285810,Max,,NA,2017-06-19T15:59:18Z,2017-06-19T15:59:18Z,"Hello, I came across the same problem. Are there any ideas about cause/sollution to this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTQ4NTE0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTcyNjM3Mg==,paho.mqtt.python,309726372,155,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-20T11:35:43Z,2017-06-20T11:35:43Z,"By looking at the code, the only thing that could produce such error is when _in_packet['packet']) has a size < 2.
In this case, the pack_format would be ""!H-1"" or ""!H-2"".

But I don't see how this could be possible... at least with a valid MQTT server. From my understanding the only solution to have a len(packet) < 2 at this point, would be to receive an publish packet, where the remaining length field is less than 2 bytes. But since MQTT require that topic name is present and encoded as <length><value>, where <length> is a 2-bytes integer, remaining length of the publish packet must be at least 2.

Could you provide more information about your setup ? Which broker are you using ? Are your publish ""special"" (like very short topic name, no payload, long topic name or payload) ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTcyNjM3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTgwNzI1MA==,paho.mqtt.python,309807250,155,NA,pelmeshk0,7285810,Max,,NA,2017-06-20T16:04:49Z,2017-06-20T16:04:49Z,"Hello, I tried http://test.mosquitto.org/ test server and everything seems to work ok. It is indeed a problem on the server side. I'll try to see what's wrong there and hopefully give a feedback if anything is found. Thank you for showing me the right direction!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTgwNzI1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzc4OTUzMg==,paho.mqtt.python,313789532,155,NA,swails,779022,Jason Swails,,NA,2017-07-07T20:49:23Z,2017-07-07T20:49:23Z,This can probably be closed?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzc4OTUzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjI5OTE4NA==,paho.mqtt.python,342299184,155,NA,axd1967,3529789,alex,,NA,2017-11-06T21:50:14Z,2017-11-06T21:50:14Z,"RabbitMQ + MQTT with a normal topic _sometimes_ triggers this error in `loop_forever()`.
sometimes a simple publish (qos 0) results in TWO on_message() (paho) 
on_log then returns Error: Unrecognised command 0 

```
(venv) ubuntu@dev:~/python/server$ PYTHONPATH=.. python -m cli
log:Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k60) client_id=my_server_id
log:Sending SUBSCRIBE (d0) [('demo_topic', 0)]
res=0 mid=1
log:Sending PUBLISH (d0, q0, r0, m2), 'demo_topic', ... (21 bytes)
 log:Received CONNACK (0, 0)
conn OK
pub: data=None, mid=2
log:Error: Unrecognised command 0
disconn: data=None, r=2
Traceback (most recent call last):
  File ""/usr/lib/python2.7/runpy.py"", line 174, in _run_module_as_main
    ""__main__"", fname, loader, pkg_name)
  File ""/usr/lib/python2.7/runpy.py"", line 72, in _run_code
    exec code in run_globals
  File ""/home/ubuntu/python/server/cli.py"", line 77, in <module>
    main()
  File ""/home/ubuntu/python/server/cli.py"", line 66, in main
    run(args, srv)
  File ""/home/ubuntu/python/server/cli.py"", line 73, in run
    srv.loop_forever()
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1481, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1804, in _packet_read
    byte = self._sock.recv(1)
AttributeError: 'NoneType' object has no attribute 'recv'
(venv) ubuntu@dev:~/python/server$ 

```

another: notice the thread error
```
log:Received PUBLISH (d0, q0, r0, m0), 'demo_topic', ...  (18 bytes)
TOPIC: demo_topic:'ffadfasgfsfsdfadad'
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2650, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1481, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1849, in _packet_read
    rc = self._packet_handle()
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2305, in _packet_handle
    return self._handle_publish()
  File ""/home/ubuntu/python/server/venv/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2464, in _handle_publish
    (slen, packet) = struct.unpack(pack_format, self._in_packet['packet'])
error: bad char in struct format

log:Sending PINGREQ
```

(after which _apparently_ no more subscriptions reach the subscriber, but I think the loop continues and might eventually receive new messages).

ubuntu 16.04

update: the README https://github.com/eclipse/paho.mqtt.python#connect-reconnect-disconnect explains to perform the subscription in the on_connect handler. this might be the solution, as the issue does not seem to  reappear.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjI5OTE4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODQzODc0Nw==,paho.mqtt.python,558438747,155,NA,ayoub-root,29442800,Ayoub benayache,a.benayache@univ-batna2.dz,NA,2019-11-26T03:08:22Z,2019-11-26T03:08:22Z,"    (mid, packet) = struct.unpack(pack_format, self._in_packet['packet'])","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1ODQzODc0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/155,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42bN62,paho.mqtt.python,913104566,155,NA,mxmaxime,10252674,Maxime moreau,contact@maxime-moreau.fr,NA,2021-09-05T07:55:28Z,2021-09-05T07:55:28Z,"Hi,
Sometimes I have this error, shouldn't we add a check on `_in_packet['packet'])` length before destructing it? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42bN62/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/156,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/156,paho.mqtt.python,211304107,156,Question regarding unclosed socket in a test case using python mqtt,gourish2k,25934694,,,CLOSED,2017-03-02T06:44:43Z,2017-03-03T05:04:45Z,"I am checking a unit test method using python unittest for which uses InfluxDB python module for making connection to the InfluxDB database and inserting data.

I have used the following code

    from influxdb import InfluxDBClient
    import unittest

    class addvalues:
       def __init__ (self):
          self.host='localhost'
          self.port=8086
          self.user = 'root'
          self.password = 'root'
          self.dbname = 'example'

       def initialize(self):
          self._client = InfluxDBClient(self.host,  8086, self.user,
             self.password, self.dbname)
          self._client.create_database(self.dbname)

       def add(self, data):    
          self._client.write_points(data)

    class Test1(unittest.TestCase):

       def test_connect_and_popolate(self):
          tdat = [
                {
                   ""measurement"": ""testmeasure"",
                   ""tags"": {
                       ""tag1"": ""R002"",
                       ""tag2"": ""R001""
                   },
                   ""fields"": {
                       ""value"": 1.23
                   }
               }
          ]

          connector = addvalues()
          connector.initialize()
          connector.add(tdat)

    if __name__ == '__main__':
        unittest.main() 

For which I get the following warning 

      ResourceWarning: unclosed <socket.socket fd=284, family=AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM, proto=0, laddr=('::1', 50930, 0, 0), raddr=('::1', 8086, 0, 0)>
      testMethod()
      .
      ----------------------------------------------------------------------
      Ran 1 test in 0.884s

      OK

I can remove the warning message by giving

    unittest.main(warnings='ignore')

instead of

    unittest.main()

However what is the reason for the warning, and how can I remove it without giving unittest.main(warnings='ignore'), or is any update required in the mqtt python module","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/156/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/156,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzY2OTYwMQ==,paho.mqtt.python,283669601,156,NA,PierreF,359833,Pierre Fersing,,NA,2017-03-02T14:36:06Z,2017-03-02T14:36:06Z,"I'm not sure to understand, how this is related to MQTT ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4MzY2OTYwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/156,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzg2NjUxMg==,paho.mqtt.python,283866512,156,NA,gourish2k,25934694,,,NA,2017-03-03T05:04:44Z,2017-03-03T05:04:44Z,"I am sorry mistakenly posting python influxdb question in mqtt which is not relevant here , I shall remove this issue post.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4Mzg2NjUxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,paho.mqtt.python,212393957,158,socket out of memory on subscribe,pvizeli,15338540,Pascal Vizeli,pascal.vizeli@syshack.ch,CLOSED,2017-03-07T10:42:22Z,2017-06-16T21:55:59Z,"Hi

We use this library inside HomeAssistant. Since we run faster (with help of asyncio), we see some ""Out of memory"" like https://github.com/home-assistant/home-assistant/issues/6247 or https://github.com/home-assistant/home-assistant/issues/6292

I try to fix it with a lock and sleep but look like that can come back some time. So I'm not sure if we make a misstake in handling of paho.

Our paho wrapper: https://github.com/home-assistant/home-assistant/blob/dev/homeassistant/components/mqtt/__init__.py

On our startup phase we connect to brocker. After that we allow all platforms that based on mqtt to use subscribe (that can be a lot) it is also possible that some platform allready publish things to brocker in same time. Is all things setup for HomeAssistant, we start the paho loop.

Is that handling correct or need to run the Loop bevor that to prevent the socket out of memory?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjMzMjkyNQ==,paho.mqtt.python,286332925,158,NA,harlowja,970458,Joshua Harlow,,NA,2017-03-14T06:21:52Z,2017-03-14T06:21:52Z,"I've also seen this, though I don't quite understand how this happens.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI4NjMzMjkyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MDM1OQ==,paho.mqtt.python,292980359,158,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T15:13:12Z,2017-04-10T15:13:12Z,"paho-mqtt will queue message in memory if you send them faster than the network allow.

AFAIK, the only solution to limit the size of this queue is to track yourself the size of the pending queue:
* each time you call publish() increment a counter
* each time on_publish callback is called, decrement that counter

The value of the counter will be the number of message that are waiting in the queue. Keep that small enough to avoid eating all memory.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MDM1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3NzMwMQ==,paho.mqtt.python,308577301,158,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T22:34:24Z,2017-06-14T22:34:24Z,"I'm subscribing to one topic, not publishing anything, and still getting an ""Out of memory error"" on every third call to loop().","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3NzMwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/158,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTE0MzUyNg==,paho.mqtt.python,309143526,158,NA,pvizeli,15338540,Pascal Vizeli,pascal.vizeli@syshack.ch,NA,2017-06-16T21:55:59Z,2017-06-16T21:55:59Z,We start the loop now before we process subscribtion and we solve it,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTE0MzUyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/162,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/162,paho.mqtt.python,214436651,162,can i set path of broker?,eduard739,25431473,,,CLOSED,2017-03-15T15:55:02Z,2017-04-12T08:21:10Z,"i want to set also the path of the broker(<host>/<path>), how can i do this?
examples: 
/iot.eclipse.org:80/ws
ec2-54-234--122.compute-1.amazonaws.com/eyJraWQiO...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/162/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/162,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MDk5OQ==,paho.mqtt.python,292980999,162,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T15:15:13Z,2017-04-10T15:15:13Z,"You want to change the URL path when connecting to a broker over Websocket ?

Currently the ""/mqtt"" path is hardcoded, but it could indeed be a good feature to add.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MDk5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/162,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzUwNzcxOA==,paho.mqtt.python,293507718,162,NA,eduard739,25431473,,,NA,2017-04-12T08:21:10Z,2017-04-12T08:21:10Z,"yea. I found it in the WS wrapper class and changed it, thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzUwNzcxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,paho.mqtt.python,214544926,163,Proposal: Drop support for Python 3.2,jamesmyatt,1047337,James Myatt,,CLOSED,2017-03-15T22:26:05Z,2017-05-17T18:24:26Z,"Python 3.2 is not supported by the standard Python packaging tools, such as pip, setuptools and virtualenv since Jan 2016. Can we drop support too?

The argument in [pypa-dev mailing list](https://groups.google.com/forum/#!msg/pypa-dev/Ef0PF2ZGAv0/hrO4BHkOBQAJ) was that there is minimal Python 3.2 usage in April 2015.

Perhaps more importantly, Python 3.2 was officially end-of-life in February 2016 (See https://www.python.org/dev/peps/pep-0392/)

See:

* https://pypi.python.org/pypi/pip
* https://pypi.python.org/pypi/setuptools
* https://pypi.python.org/pypi/virtualenv","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4MzkzOA==,paho.mqtt.python,292783938,163,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-09T12:50:19Z,2017-04-09T12:50:19Z,"One drawback is that Debian 7 (wheezy, currently oldstable) use Python 3.2 and is supported (by the LTS support) up to May 2018.
Is there any feature that fail to work on Python 3.2 ? You referenced this issue only from test and fixed them for Python 3.2.

I would say that if it don't require too much effort, we should try to keep support for Python 3.2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4MzkzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4NTAzMg==,paho.mqtt.python,292785032,163,NA,swails,779022,Jason Swails,,NA,2017-04-09T13:12:09Z,2017-04-09T13:12:09Z,"Arguments against 3.2 support:

1. Security fixes ended over a year ago at least: https://www.python.org/dev/peps/pep-0392/
2. http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html

The first is a bit more worrying for MQTT, in my opinion, as it is inherently a protocol for communicating information to/from anywhere. The second is about 2.6 specifically, but the arguments still apply to 3.2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4NTAzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4NTMyOA==,paho.mqtt.python,292785328,163,NA,swails,779022,Jason Swails,,NA,2017-04-09T13:17:13Z,2017-04-09T13:17:13Z,"If paho incidentally works in Python 3.2, that's fine(ish). But I think explicitly supporting a EOLed platform with known and publicly documented security vulnerabilities doesn't make sense. And I don't think it's worth even a nominal effort to keep supporting it. Just my opinion. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc4NTMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc5MTE2MQ==,paho.mqtt.python,292791161,163,NA,jamesmyatt,1047337,James Myatt,,NA,2017-04-09T15:01:00Z,2017-04-09T15:01:00Z,"**TL:DR;** I think that my preference is to say that the develop branch is preparing for Paho 2.x since it may have breaking changes, and that Paho 2.x will only releases of Python that are not going to be EOL on the target release date.

Paho 1.2.x will always run on Python 3.2, just as pip 7.1.2 does. The question is whether it's worth the extra effort to keep Paho 2.x running on Python 3.2 (or Python 2.6, which has been EOL since October 2013, or Python 3.3, for that matter, which goes EOL in September 2017, which is quite soon). If the Python project is not releasing bug fixes for these releases, then I don't think that any community project should be going out of its way to support them.

Each of these EOL releases presents extra work in making things backwards compatible and means that new language and library features can't be used. It took qutie a bit of extra work to make the new testing things that I've been working on work in Python 3.2, mostly because I wanted to know how to do it and I really want to be using a proper unit testing framework, but this will only get worse when the other tools and libraries drop support for Python 2.6 and 3.3 as well.

I would also say that it's Debian's decision to LTS Python 3.2 in wheezy, and that this project should not feel obliged to follow. The developers of pip, which is core to the Python ecosystem, did not feel the need to continue to support it, and they probably have more commerical support.

Unless we aim to drop support for these EOL platforms, then we are just making it harder for volunteers to contribute.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjc5MTE2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjgxMDQ4MQ==,paho.mqtt.python,292810481,163,NA,ralight,79578,Roger Light,,NA,2017-04-09T20:25:36Z,2017-04-09T20:25:36Z,"I'm inclined to say that for a breaking version of Paho it's a reasonable thing to drop support where we want. I'd vote to drop support for 3.2 and 3.3.

Paho Python doesn't have any packages in Debian Wheezy, we aren't tied to it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjgxMDQ4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjg3OTA1OA==,paho.mqtt.python,292879058,163,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T08:10:05Z,2017-04-10T08:10:05Z,"Ok, let's go with fixes branch that keep current supported version and develop branch that include breaking change and no longer support 2.6, 3.2 and 3.3.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjg3OTA1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjg4MTYzMA==,paho.mqtt.python,292881630,163,NA,jamesmyatt,1047337,James Myatt,,NA,2017-04-10T08:22:24Z,2017-04-10T08:22:24Z,Great. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjg4MTYzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/163,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3MzUyNg==,paho.mqtt.python,292973526,163,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T14:51:45Z,2017-04-10T14:51:45Z,"Push commit (d32be16) to remove support for Python 2.6, 3.2 and 3.4 on develop.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3MzUyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/167,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/167,paho.mqtt.python,216829331,167,CONTRIBUTING.md differences,michaelboulton,3809868,,,CLOSED,2017-03-24T15:57:01Z,2017-04-10T17:47:16Z,"CONTRIBUTING.md is different in master and develop. Seeing as the one in master is newer I'm guessing it's the correct one, but it's a bit confusing that the guidelines for contributing are different in different branches.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/167/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/167,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzAyNTcxMQ==,paho.mqtt.python,293025711,167,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T17:47:15Z,2017-04-10T17:47:15Z,Fixed by #176 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzAyNTcxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,paho.mqtt.python,217586545,170,Client destructor/ disconnect() does not close sockets,flatballer,23031769,Thomas Margraf,,CLOSED,2017-03-28T14:50:17Z,2018-09-03T07:03:20Z,"The garbage collection of Client objects produces warnings such as:
sys:1: ResourceWarning: unclosed <socket.socket fd=31, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('127.0.0.1', 35498)>

this warning can be avoided by closing the sockets in Client's __del__() method:
def __del__(self):
    self._sockpairR.close()
    self._sockpairW.close()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODkwMDQyOQ==,paho.mqtt.python,358900429,170,NA,pat1,3214854,Paolo Patruno,,NA,2018-01-19T08:36:43Z,2018-01-19T08:36:43Z,For me is solved adding reinitialise() after disconnect().,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1ODkwMDQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTcxOTc3MA==,paho.mqtt.python,359719770,170,NA,riccardoch,3284977,Riccardo Chiarini,,NA,2018-01-23T08:45:57Z,2018-01-23T08:45:57Z,"It's really strange the absence of a **close** method.
If you need to close completely the connection you can do:

    def close(client):
        if client._ssl:
            client._ssl.close()
            client._ssl = None
            client._sock = None
        elif client._sock:
            client._sock.close()
            client._sock = None
        if client._sockpairR:
            client._sockpairR.close()
        if client._sockpairW:
            client._sockpairW.close()
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTcxOTc3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTcyNDUxOQ==,paho.mqtt.python,359724519,170,NA,PierreF,359833,Pierre Fersing,,NA,2018-01-23T09:03:07Z,2018-01-23T09:03:07Z,"I've a bit forgotten this issue. While I agree that paho should close its objects and not rely on garbage collector, is it currently an real issue or just a warning for you ? (this question is to help prioritizing issues)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTcyNDUxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTc0NTY5Mg==,paho.mqtt.python,359745692,170,NA,pat1,3214854,Paolo Patruno,,NA,2018-01-23T10:22:27Z,2018-01-23T10:22:27Z,"The garbage collector (inserting socket close in __del__ ) do not work for me; is possible there is some reference that forbid  this.
For me is a bug and I have an application that crash after some time of work.
Solved using code in reinitialise() as reported by @riccardoch .","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1OTc0NTY5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjYzNjA4NA==,paho.mqtt.python,366636084,170,NA,keomabrun,11633612,Keo,,NA,2018-02-19T09:42:37Z,2018-02-19T09:42:37Z,"It is a real issue for me. I have an app where the MQTT client connects and disconnects at lot. Every time it creates two sockets that are never closed. After reaching my system limit of number of socket per process, my app crashes with a `Too many open files` error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NjYzNjA4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzMyOQ==,paho.mqtt.python,417917329,170,NA,pietrodn,5058646,Pietro De Nicolao,,NA,2018-09-02T09:38:51Z,2018-09-02T09:38:51Z,"This issue is fixed by PR #325, which has been merged in the `develop` branch.
I think it can be closed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzMyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/170,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODAxOTk4MQ==,paho.mqtt.python,418019981,170,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-03T07:03:20Z,2018-09-03T07:03:20Z,PR #325 released in version 1.4.0,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODAxOTk4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/171,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/171,paho.mqtt.python,218925962,171,Documentation out of date,ralight,79578,Roger Light,,CLOSED,2017-04-03T13:02:39Z,2017-04-10T14:54:20Z,It still mentions the eclipse bugzilla. Also need to check what versions of python we support and update the pypi trove identifiers.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/171/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/171,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NDMxOQ==,paho.mqtt.python,292974319,171,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T14:54:19Z,2017-04-10T14:54:19Z,"Pushed commit in master, fixes and develop to update issues tracker.
Fixed #163 (drop support of older Python in develop) and #166 updated PyPI trove for fixes branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NDMxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,paho.mqtt.python,219016083,172,paho-mqtt 1.2.1 breaks publishing to AWS IoT service,rvandegrift,976207,Ross Vandegrift,,CLOSED,2017-04-03T18:09:01Z,2017-06-02T14:44:16Z,"With paho-mqtt 1.2, I use something like this to publish messages on the AWS IoT service:
```python
paho.mqtt.publish.single(
    topic='my/topic',
    client_id='my_client_id',
    payload='{""my"": ""payload""}',
    hostname='data.iot.us-east-1.amazonaws.com',
    port=8883,
    tls={
        'tls_version': ssl.PROTOCOL_TLSv1_2,
        'ca_certs': 'ca.pem',
        'certfile': 'cert.pem',
        'keyfile': 'private.pem',
        'cert_reqs': ssl.CERT_REQUIRED,
    }
)
```

Using 1.2.1 with the same credentials & policy, the messages never appear on the IoT service.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTQ1MDE3OA==,paho.mqtt.python,291450178,172,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-04T09:48:23Z,2017-04-04T09:48:23Z,"I've an idea of the bug. It was introduced by #119.

The first message is published before connecting to MQTT, which is not an issue with QoS=1 or 2 (message is queued). But with QoS = 0, the first message is discarded.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTQ1MDE3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTUzMDU1NA==,paho.mqtt.python,291530554,172,NA,rvandegrift,976207,Ross Vandegrift,,NA,2017-04-04T15:09:21Z,2017-04-04T15:09:21Z,"Makes sense, and I can confirm using qos=1 works (AWS IoT doesn't support qos=2).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MTUzMDU1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzAyNjY4OQ==,paho.mqtt.python,293026689,172,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T17:50:47Z,2017-04-10T17:50:47Z,"I've committed a fix on fixes branch and added test for that issue.

@ralight should we do another 1.2.2 release for that regression ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzAyNjY4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzA4OTUyMQ==,paho.mqtt.python,293089521,172,NA,ralight,79578,Roger Light,,NA,2017-04-10T21:50:26Z,2017-04-10T21:50:26Z,Definitely.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzA4OTUyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzE3NTgzMw==,paho.mqtt.python,293175833,172,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-11T07:33:41Z,2017-04-11T07:33:41Z,@ralight just pushed and tagged the release on github. I let you push it on PyPI ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzE3NTgzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzIwMzc1NQ==,paho.mqtt.python,293203755,172,NA,ralight,79578,Roger Light,,NA,2017-04-11T09:32:03Z,2017-04-11T09:32:03Z,"Great work, I've pushed the updated version to pypi.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MzIwMzc1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTcxMzM2MQ==,paho.mqtt.python,305713361,172,NA,olgeorge,2348911,Georgii Oleinikov,,NA,2017-06-02T07:37:12Z,2017-06-02T07:37:12Z,"@rvandegrift How does AWS IoT support QoS 1? From their documentation:
""The message broker does not support persistent sessions (clean session set to 0). All sessions are assumed to be clean sessions and messages are not stored across sessions. If an MQTT client sends a message with the clean session attribute set to false, the client will be disconnected.""
http://docs.aws.amazon.com/iot/latest/developerguide/protocols.html

How is QoS 1 possible without not-clean sessions? When a device connects with a clean session it won't get any messages that were sent while it was offline, thus QoS 1 is violated.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTcxMzM2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTgwNTcxNg==,paho.mqtt.python,305805716,172,NA,rvandegrift,976207,Ross Vandegrift,,NA,2017-06-02T14:32:48Z,2017-06-02T14:32:48Z,"@olgeorge here's my (limited!) understanding: qos and session persistence are mostly orthogonal.  qos=1 requires the client to acknowledge publishes.  A persistent session queues messages with qos > 0.  So the result would be publish acknowledgments, but no way to ensure delivery of messages published while the client was offline.

I haven't dug into the AWS behavior too closely, but qos=1 works with paho-mqtt and I've never seen a message delivered without the client being online.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTgwNTcxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/172,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTgwODgyNg==,paho.mqtt.python,305808826,172,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-02T14:44:15Z,2017-06-02T14:44:15Z,"I'll add that even if AWS does not ""support"" QoS = 1, this issue was about a paho-mqtt bug. The following occurred with or without AWS as broker:

* When client send message using publish helper with QoS = 0, the first message was lost.
* But when client send message using publish helpder with QoS > 0, message were not lost.

In this case, using QoS = 1 was a workaround for this bug. And this workaround is no longer needed since version 1.2.2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNTgwODgyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,paho.mqtt.python,219647620,173,UnicodeDecodeError: 'utf-8' codec can't decode byte 0x92 in position 0: invalid start byte,mi3z,16067692,,,OPEN,2017-04-05T16:49:22Z,2023-12-07T20:40:54Z,"Hello :)

i'm facing the following problem: After connecting to iot.eclipse.org (198.41.30.241:1883) with Paho-mqtt, subscribe to all topics (""#"")  and printing them, the program crashes with the following error:

`File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 377, in topic
    return self._topic.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x92 in position 0: invalid start byte`

The problem:
So of course, i know MQTT requires utf-8 but in case it's not, there should be a error handling on all utf-8 decodings. 

Best Regards
mi3z



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NDYxNA==,paho.mqtt.python,292974614,173,NA,jamesmyatt,1047337,James Myatt,,NA,2017-04-10T14:55:17Z,2017-04-10T14:55:17Z,"According to the spec (http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html: [MQTT-1.5.3-1]) _""If a Server or Client receives a Control Packet containing ill-formed UTF-8 it MUST close the Network Connection.""_","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NDYxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3ODcwNg==,paho.mqtt.python,292978706,173,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T15:08:04Z,2017-04-10T15:08:04Z,"This error should be in your control. I mean that it occur because you try to access msg.topic in a on_message callback. Something like:
```
    def on_message(client, msg):
        msg.topic  <--- this cause the error.
```

You can therefor handle this error with a try/except around the access to msg.topic.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3ODcwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MjQyMg==,paho.mqtt.python,292982422,173,NA,mi3z,16067692,,,NA,2017-04-10T15:19:49Z,2017-04-10T15:19:49Z,"That's right. But instead of closing the connection the paho library is crashing because of an unhandled exception triggered from "".decode"" and returns an exception.

I could handle this error with a try/except, but then I have in consequence to encapsulate all paho calls with try/except, since I can't trust the library not breaking my application.

I agree it confirms the specs. But I would suggest a better exception handling through the library. IMHO I think it should not even call the on_message() method if the packet is not valid.

Best Regards
mi3z","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk4MjQyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjQ4MzI5MQ==,paho.mqtt.python,322483291,173,NA,Humphreybas,2579891,,,NA,2017-08-15T14:27:57Z,2017-08-15T14:27:57Z,"I agree with mi3z.
I just started a project with MQTT, I saw the [getting started code](https://github.com/eclipse/paho.mqtt.python#getting-started) and it looked nice. But when I ran that exact code, I also got this UTF-8 decode error. Which is interesting for the 'getting started code' haha, a good first impression.  Don't get me wrong, I have no clue how hard it was to write this module (thanks everyone), just trying to give some honest feedback. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjQ4MzI5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1ODE3Mw==,paho.mqtt.python,331158173,173,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-21T13:35:47Z,2017-09-21T13:35:47Z,"I agree that getting started should be update to avoid this error.

About the strict respect to the specification (e.g. disconnecting) that would mean that client will connect, got an non-UTF-8 topic, disconnect... then reconnect, and so on. (this is true, because it case of getting started, it come from retained topic and/or periodic $SYS topic. But it could also occur as soon as you are using QoS > 0 and clean_session=False).
For this reason I'm prefer that library client had the choice on what to do with non-utf-8 topic.

Maybe a flag should be set before connection or another callback (on_bad_message ?) should be added.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1ODE3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMzgwOTQxNQ==,paho.mqtt.python,403809415,173,NA,nicola-lunghi,25422924,Nicola Lunghi,,NA,2018-07-10T12:47:16Z,2018-07-10T12:47:16Z,"Still isn't fixed today

if you run the subscribe_callback.py example

Traceback (most recent call last):
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/examples/subscribe_callback.py"", line 24, in <module>
    subscribe.callback(print_msg, ""#"", hostname=""iot.eclipse.org"")
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/subscribe.py"", line 165, in callback
    client.loop_forever()
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 1481, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 1849, in _packet_read
    rc = self._packet_handle()
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 2305, in _packet_handle
    return self._handle_publish()
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 2500, in _handle_publish
    self._handle_on_message(message)
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 2647, in _handle_on_message
    self.on_message(self, self._userdata, message)
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/subscribe.py"", line 40, in _on_message_callback
    userdata['callback'](client, userdata['userdata'], message)
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/examples/subscribe_callback.py"", line 22, in print_msg
    print(""%s : %s"" % (message.topic, message.payload))
  File ""/home/nlunghiadm/tmp/python/paho.mqtt.python/src/paho/mqtt/client.py"", line 360, in topic
    return self._topic.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa1 in position 0: invalid start byte

Process finished with exit code 1","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMzgwOTQxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/173,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_o6Jt,paho.mqtt.python,1067688557,173,NA,ksprs,42833071,,,NA,2022-03-15T08:15:24Z,2022-03-15T08:15:24Z,"I am using v1.6.1 and am getting similar crash else were

```
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python3.7/threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.7/threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1164, in _loop
    rc = self.loop_read()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1556, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 2439, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 3033, in _packet_handle
    return self._handle_publish()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 3305, in _handle_publish
    props, props_len = message.properties.unpack(packet)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/properties.py"", line 429, in unpack
    buffer, attr_type, propslenleft)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/properties.py"", line 402, in readProperty
    value1, valuelen1 = readUTF(buffer, propslen - valuelen)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/properties.py"", line 70, in readUTF
    buf = buffer[2:2+length].decode(""utf-8"")
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xee in position 1: invalid continuation byte
```

What seams to fix the problem is changes in this file paho/mqtt/properties.py
```
 70 
 71     try:
 72         buf = buffer[2:2+length].decode(""utf-8"")
 73     except:
 74         raise MalformatPacket(""Cannot decode topic to utf-8"")
 75 
```

Can somebody include these changes in the main code?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_o6Jt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,paho.mqtt.python,220362702,174,"Disconnect RC 1 after successful connection and receiving messages, disconnect is on client only, no disconnect in broker log",AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,CLOSED,2017-04-08T00:42:47Z,2020-07-09T21:33:47Z,"HI guys I have a weird issue I have never experienced before, I have one device sending messages to the broker every few seconds, and one other device which is subscribed to the channel that is being posted to, the client publishing is fine it continues without issues, but after receiving a few messages the client receiving the messages stops, in the disconnect callback it returns RC 1, there is no error on the broker. Below are some relevant logs:

RECEIVING CLIENT:

```
Subscribed to Tass Recognition Channel
Published to Application Status 1/Applications/17/Status
rc: 0
Published: 2

Received AI Recognition
P: ['1'] C: [85.046126205502915]
Published to Device Tass Activity Recognition Channel
1 85.0461262055

Received AI Recognition
P: ['1'] C: [80.201291467026834]
Published to Device Tass Activity Recognition Channel
1 80.201291467

Received AI Recognition
P: ['1'] C: [75.330911968949849]
Published to Device Tass Activity Recognition Channel
1 75.3309119689
Published: 3

Received AI Recognition
P: ['unknown'] C: [62.734058260642122]
Published to Device Tass Activity Intruder Channel
Intruder
Published: 4

Received AI Recognition
P: ['1'] C: [82.137546780508359]
Published to Device Tass Activity Recognition Channel
1 82.1375467805
Published: 5

Received AI Recognition
P: ['1'] C: [69.429354084749136]
Published to Device Tass Activity Recognition Channel
1 69.4293540847

RC 1
Unexpected disconnection. Reconnecting...
RECONNECTED HERE (on_connect)

Published to Application Status 1/Applications/17/Status
rc: 0
Published: 9
```
And then nothing happens it no longer receives any more information at all, I do still see PINGREQ and PINGRESP in the broker logs.

BROKER LOGS

```
1491588001: New connection from ##.##.##.### on port 8883.
1491588001: New client connected from ##.##.##.### as TassServer (c1, k10, ##########').
1491588001: Sending CONNACK to TassServer (0, 0)
1491588002: Received SUBSCRIBE from TassServer
1491588002:     +/Devices/+/+/TassRecognition (QoS 0)
1491588002: TassServer 0 +/Devices/+/+/TassRecognition
1491588002: Sending SUBACK to TassServer
1491588002: Received PUBLISH from TassServer (d0, q0, r0, m0, '1/Applications/17/Status', ... (6 bytes))
1491588002: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Applications/17/Status', ... (6 bytes))
1491588002: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57440 bytes))
1491588002: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57440 bytes))
1491588002: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57440 bytes))
1491588004: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57311 bytes))
1491588004: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57311 bytes))
1491588004: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57311 bytes))
1491588006: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57002 bytes))
1491588006: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57002 bytes))
1491588006: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57002 bytes))
1491588007: Received PINGREQ from IoTCore
1491588007: Sending PINGRESP to IoTCore
1491588009: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (56983 bytes))
1491588009: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (56983 bytes))
1491588009: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (56983 bytes))
1491588010: Received PINGREQ from IoTStatus
1491588010: Sending PINGRESP to IoTStatus
1491588011: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57138 bytes))
1491588011: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57138 bytes))
1491588011: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57138 bytes))
1491588011: Received PINGREQ from TASS
1491588011: Sending PINGRESP to TASS
1491588013: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57364 bytes))
1491588013: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57364 bytes))
1491588013: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57364 bytes))
1491588014: Received PUBLISH from TassServer (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57440 bytes))
1491588014: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57440 bytes))
1491588015: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57634 bytes))
1491588015: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57634 bytes))
1491588015: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57634 bytes))
1491588018: Received PINGREQ from IoTCore
1491588018: Sending PINGRESP to IoTCore
1491588018: Received PUBLISH from TassServer (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57311 bytes))
1491588018: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57311 bytes))
1491588018: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57298 bytes))
1491588018: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57298 bytes))
1491588018: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57298 bytes))
1491588020: Received PINGREQ from IoTStatus
1491588020: Sending PINGRESP to IoTStatus
1491588020: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57354 bytes))
1491588020: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57354 bytes))
1491588020: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57354 bytes))
1491588021: Received PINGREQ from TASS
1491588021: Sending PINGRESP to TASS
1491588021: Received PUBLISH from TassServer (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57002 bytes))
1491588021: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/ActivityRecognition/1', ... (57002 bytes))
1491588021: Received PINGREQ from TassServer
1491588021: Sending PINGRESP to TassServer
1491588023: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57567 bytes))
1491588023: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57567 bytes))
1491588023: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (57567 bytes))
```

After this I only see PINGREQ and PINGRESP in the logs for TassServer, the data is still successfully being received from the publishing device on the broker, but is no longer forwarded to TassServer, despite there being no log of disconnect on the broker for TassServer.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY4NDY5OA==,paho.mqtt.python,292684698,174,NA,AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,NA,2017-04-08T01:14:14Z,2017-04-08T01:14:14Z,"Update, I moved the subscription into the on_connect callback now when it disconnects it does reconnect and subscribe again correctly, but I am still getting the disconnect every few messages with RC 1, I do however now see the disconnect in the broker, but something is clearly not right, I cannot work out what is going on, it seems very strange that a successfully connected client would then disconnect with invalid protocol.


```
1491613645: Sending PUBLISH to TassServer (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (67007 bytes))
1491613647: Client TassServer has exceeded timeout, disconnecting.
1491613647: Socket error on client TassServer, disconnecting.
1491613647: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Applications/17/Status', ... (7 bytes))
1491613648: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66494 bytes))
1491613648: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66494 bytes))
1491613650: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (65154 bytes))
1491613650: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (65154 bytes))
1491613652: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66317 bytes))
1491613652: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66317 bytes))
1491613653: Received PINGREQ from IoTStatus
1491613653: Sending PINGRESP to IoTStatus
1491613654: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66105 bytes))
1491613654: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66105 bytes))
1491613654: Received PINGREQ from TASS
1491613654: Sending PINGRESP to TASS
1491613655: Received PINGREQ from IoTCore
1491613655: Sending PINGRESP to IoTCore
1491613656: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66295 bytes))
1491613656: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66295 bytes))
1491613656: New connection from ##.##.##.### on port 8883.
1491613658: Socket error on client <unknown>, disconnecting.
1491613658: New connection from ##.##.##.### on port 8883.
1491613659: Received PUBLISH from TASS (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66726 bytes))
1491613659: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Devices/1/23/TassRecognition', ... (66726 bytes))
1491613659: New client connected from ##.##.##.### as TassServer (c1, k10, u'##########').
1491613659: Sending CONNACK to TassServer (0, 0)
1491613659: Received PUBLISH from TassServer (d0, q0, r0, m0, '1/Applications/17/Status', ... (6 bytes))
1491613659: Sending PUBLISH to IoTCore (d0, q0, r0, m0, '1/Applications/17/Status', ... (6 bytes))
1491613659: Received SUBSCRIBE from TassServer
1491613659:     +/Devices/+/+/TassRecognition (QoS 0)
1491613659: TassServer 0 +/Devices/+/+/TassRecognition
1491613659: Sending SUBACK to TassServer
```

And so on continually.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5MjY4NDY5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NzMwOA==,paho.mqtt.python,292977308,174,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-10T15:03:41Z,2017-04-10T15:03:41Z,"Mosquitto send the message ""Client %s has exceeded timeout"" only when it has not received message from the client during the keepalive (actually 3/2 * keepalive).

So it seems that your client does not sent pingreq quickly enough. I see two possible cause:
* processing of your message take too much time. The on_message callback should not block for more than the keepalive.
* the keepalive in the client and the broker is not the same.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3NzMwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3ODc0OA==,paho.mqtt.python,292978748,174,NA,AdamMiltonBarker,6291410,AdamMiltonBarker,adam@adammiltonbarker.com,NA,2017-04-10T15:08:13Z,2017-04-10T15:08:13Z,"That could be it, in the on message it passes the frame through a Neural Network to detect a face. I have actually built a different way now anyway, was just wondering what it was that was causing it. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mjk3ODc0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQyMTEwMg==,paho.mqtt.python,334421102,174,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-05T10:09:07Z,2017-10-05T10:09:07Z,"This issue seems solved (it was that on_message callback took too much time). If it's not the case, feel free to reopen.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQyMTEwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTcwNDUzMQ==,paho.mqtt.python,425704531,174,NA,oclld,22362864,Ling Chen,hello.chen.ling@gmail.com,NA,2018-09-30T08:34:56Z,2018-09-30T08:34:56Z,"hi,AdamMiltonBarker, how do you solve this problem? i probablly get the same problem. when i just simply subscribe from the broker,  the client disconnects automatically with the rc = 1 after the first successful connection.  however, the most weird thing is that it works fine sometimes.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTcwNDUzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MDA2NTQzNg==,paho.mqtt.python,440065436,174,NA,manuelgodoy,7860772,Manuel Godoy,,NA,2018-11-19T22:30:13Z,2018-11-19T22:30:13Z,"I am seeing a return code of 1 even when my device is idle, which means that no on_message callback is being processed. So, the device should be sending a pingreq to the broker every 60 seconds by default. 

Also, the keepalive in my broker is set by the client: https://cloud.google.com/iot/docs/how-tos/mqtt-bridge#keep-alive 

@PierreF could you provide some help on this issue? Thanks,","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0MDA2NTQzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/174,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjM2MjIwOQ==,paho.mqtt.python,656362209,174,NA,vielleicht,10278279,,,NA,2020-07-09T21:33:46Z,2020-07-09T21:33:46Z,"This sometimes happens, when one programm is running twice an connects from the same IP with the same client ID. The broker than closes the ""old connection"" wich is still held by the process running in the background.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjM2MjIwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/177,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/177,paho.mqtt.python,220628674,177,Possible deadlock when publishing message within on_publish,PierreF,359833,Pierre Fersing,,CLOSED,2017-04-10T12:28:19Z,2017-05-17T18:23:29Z,"I can create deadlock when I do publish message within the on_publish callback.

The traceback of thread is:
```
Thread <Thread(Thread-3, started daemon 140380603414272)>

[...]
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 2571, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1402, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 925, in loop
    rc = self.loop_read(max_packets)
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1205, in loop_read
    rc = self._packet_read()
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1769, in _packet_read
    rc = self._packet_handle()
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 2237, in _packet_handle
    return self._handle_connack()
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 2351, in _handle_connack
    self.loop_write()  # Process outgoing messages that have just been queued up
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1230, in loop_write
    rc = self._packet_write()
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1816, in _packet_write
    self.on_publish(self, self._userdata, packet['mid'])
  File ""issue.py"", line 24, in on_publish
    client.publish('topic', b'msg', qos=1)
  File ""paho.mqtt.python/src/paho/mqtt/client.py"", line 1021, in publish
    self._out_message_mutex.acquire()
```

Traceback is from develop (commit 5b0869f), but stable (1.2.1 is also affected).

The deadlock is due to:
* _handle_connack that call loop_write while holding the _out_message_mutex
* loop_write will call on_publish callback
* User on_publish do a publish with QoS != 0, which will try to acquire _out_message_mutex already acquired.



The following gist is used to reproduce issue: https://gist.github.com/PierreF/67ccbcb1ff734cf069d31009779d5f06

It does:

* Before connection, 2 QoS = 0 message are emitted
* For the first message, in on_publish callback a message with QoS=1 is emitted
* As soon as connected, another QoS = 0 message is emitted
* In the on_publish callback for that message, try to emit a QoS = 1 message","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/177/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/177,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NTA1Ng==,paho.mqtt.python,296375056,177,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-22T13:58:26Z,2017-04-22T13:58:26Z,Fixed by #168 and usage of RLock for _out_message_mutex,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjM3NTA1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/178,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/178,paho.mqtt.python,220672615,178,Client ID should be rejected if not UTF-8 encoded string,jamesmyatt,1047337,James Myatt,,OPEN,2017-04-10T14:59:30Z,2023-12-07T02:42:24Z,"Spec says: [MQTT-3.1.3-4] Client Id must be UTF-8 encoded string.

In `Client.__init__`, any non-string input is accepted without checks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/178/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,paho.mqtt.python,221368684,180,publish.single() fails on TLS,pcanterino,11569243,Patrick Canterino,,CLOSED,2017-04-12T19:38:42Z,2017-04-18T13:09:35Z,"I tried to publish a single message using publish.single(). It works as expected if there is no TLS encryption:

```
import paho.mqtt.publish as p
p.single(""test"", payload=""Hello!"")
```

If i try to send the message using TLS encryption, it doesn't work:

`p.single(""test"", payload=""Hello!"", port=8883, tls={'ca_certs': '/path/to/ca'})`

I get the following stacktrace:

```
  File ""<stdin>"", line 1, in <module>
  File ""/usr/local/lib/python3.5/dist-packages/paho_mqtt-1.2.2-py3.5.egg/paho/mqtt/publish.py"", line 224, in single
    multiple([msg], hostname, port, client_id, keepalive, will, auth, tls, protocol, transport)
  File ""/usr/local/lib/python3.5/dist-packages/paho_mqtt-1.2.2-py3.5.egg/paho/mqtt/publish.py"", line 175, in multiple
    client.connect(hostname, port, keepalive)
  File ""/usr/local/lib/python3.5/dist-packages/paho_mqtt-1.2.2-py3.5.egg/paho/mqtt/client.py"", line 700, in connect
    return self.reconnect()
  File ""/usr/local/lib/python3.5/dist-packages/paho_mqtt-1.2.2-py3.5.egg/paho/mqtt/client.py"", line 835, in reconnect
    ciphers=self._tls_ciphers)
  File ""/usr/lib/python3.5/ssl.py"", line 1069, in wrap_socket
    ciphers=ciphers)
  File ""/usr/lib/python3.5/ssl.py"", line 686, in __init__
    self._context = SSLContext(ssl_version)
  File ""/usr/lib/python3.5/ssl.py"", line 361, in __new__
    self = _SSLContext.__new__(cls, protocol)
TypeError: an integer is required (got type NoneType)
```

It's not a problem of this machine, because it works if I setup the MQTT connection manually using the object oriented interface.

I can't tell if it's a bug or if it's me doing something wrong.

EDIT: Fixed formatting","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDI0MTk3Mw==,paho.mqtt.python,294241973,180,NA,pcanterino,11569243,Patrick Canterino,,NA,2017-04-14T21:39:57Z,2017-04-14T21:39:57Z,"I recently tested subscribe.simple() using TLS: Works without a problem.

```
import paho.mqtt.subscribe as s
msg = s.simple(""test"", port=8883, tls = {'ca_certs': '/path/to/ca'})
print(msg.payload)
```

-> `b'Hello!'`
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDI0MTk3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczNDk3Nw==,paho.mqtt.python,294734977,180,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-18T08:52:11Z,2017-04-18T08:52:11Z,"It worked using a released version of paho-mqtt ? or using the develop branch ?

I can still reproduce the bug in fixes branch (or latest paho 1.2.2). It's due to the way publish.multiple fallback and no tls_version is provided: [it fallback to None](https://github.com/eclipse/paho.mqtt.python/blob/a419f438cb4c60b57351b687d55eff1299cb434b/src/paho/mqtt/publish.py#L167).
And this fallback is keep as-is with the tls_set function.

On develop, this is fixed by PR #92 that changed the way tls_set was called.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczNDk3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgwMzA5Ng==,paho.mqtt.python,294803096,180,NA,pcanterino,11569243,Patrick Canterino,,NA,2017-04-18T11:49:09Z,2017-04-18T11:49:09Z,"I tested it on release 1.2.2. publish.single() does not work but subscribe.simple() works. I wanted to point out that it is not a problem with the TLS library on my machine.

So if this is fixed on develop, i will close this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgwMzA5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/180,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNjU0OA==,paho.mqtt.python,294836548,180,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-18T13:09:35Z,2017-04-18T13:09:35Z,"Ok, didn't see the subscribe vs publish difference :)

I've committed also a fix on fixes branch (commit d38c5f8).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNjU0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,paho.mqtt.python,221617877,181,Package fail to install on python3 with non-UTF8 local,PierreF,359833,Pierre Fersing,,CLOSED,2017-04-13T16:34:57Z,2017-04-20T20:57:24Z,"```
$ LANG=C python3 setup.py --help
Traceback (most recent call last):
  File ""setup.py"", line 11, in <module>
    readme = readme_file.read()
  File ""/usr/lib/python3.5/encodings/ascii.py"", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 12: ordinal not in range(128)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mzk2MzkyMA==,paho.mqtt.python,293963920,181,NA,jamesmyatt,1047337,James Myatt,,NA,2017-04-13T17:12:25Z,2017-04-13T17:12:25Z,Is this master or develop?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5Mzk2MzkyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNzUzOQ==,paho.mqtt.python,294837539,181,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-18T13:12:16Z,2017-04-18T13:12:16Z,"It's on all branch: master, fixes and develop (bug added in develop, backported to fixes :))
I've pushed a fix (0a27a82)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNzUzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTU2NjY1Mg==,paho.mqtt.python,295566652,181,NA,miketran78727,11527566,Mike Tran,,NA,2017-04-20T03:33:01Z,2017-04-20T03:33:01Z,@PierreF Please consider a service release soon.  We can't install Python client because of this issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTU2NjY1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTYzNDU3Mg==,paho.mqtt.python,295634572,181,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-20T08:35:49Z,2017-04-20T08:35:49Z,@ralight I've pushed a v1.2.3 with a fix for this issue and 3 others. Could you push it on PyPI ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTYzNDU3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/181,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTkwOTY5MQ==,paho.mqtt.python,295909691,181,NA,ralight,79578,Roger Light,,NA,2017-04-20T20:57:24Z,2017-04-20T20:57:24Z,Done!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NTkwOTY5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182,paho.mqtt.python,221843740,182,Websockets + TLS broken?,positron96,2095278,Paul Melnikov,,CLOSED,2017-04-14T16:37:40Z,2017-04-18T13:11:02Z,"Hello. I'm trying to use websockets with TLS with following code (trying to connect to http://test.mosquitto.org/):
```
#!/usr/bin/python3


import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

    client.subscribe(""$SYS/broker/uptime"")
    
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))


if __name__ == '__main__':
    
    client = mqtt.Client(""prevedmedved"", transport=""websockets"")
    client.on_connect = on_connect
    client.on_message = on_message
    client.tls_set(""mosquitto.org.crt"")
    client.connect(""test.mosquitto.org"", 8081)
    client.loop_forever()
```

Running it with Python3 gives error: 
```
Traceback (most recent call last):
  File ""/home/ubuntu/workspace/mqtt-logger/test.py"", line 22, in <module>
    client.loop_forever()
  File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 1407, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 898, in loop
    pending_bytes = self._ssl.pending()
AttributeError: 'WebsocketWrapper' object has no attribute 'pending'

```

Is it the supposed behavior? What am I doing wrong?

paho-mqtt is 1.2.2 (from pip3 install)
python is 3.4.3
OS is Ubuntu 14.04.3 LTS
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczNjMxNg==,paho.mqtt.python,294736316,182,NA,michaelboulton,3809868,,,NA,2017-04-18T08:57:01Z,2017-04-18T08:57:01Z,"I think this is because the websocket wrapper doesn't have a `pending` method - as you mentioned, I think #132 did break it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczNjMxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczOTU2Nw==,paho.mqtt.python,294739567,182,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-18T09:10:52Z,2017-04-18T09:10:52Z,"It's indeed a bug.

This is fixed on develop branch due to #84 (and the merge of fixes branch into develop branch).
But on develop branch, I'm pretty sure that bug #131 exist with Websocket over TLS.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDczOTU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/182,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNzA2NQ==,paho.mqtt.python,294837065,182,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-18T13:11:02Z,2017-04-18T13:11:02Z,"Committed a fix on fixes branch (commit bc7e7f2).
This should also fix issue #131 for Websocket over TLS","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDgzNzA2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,paho.mqtt.python,222039551,183,limit of 1024 connections,whyameye,1716966,John Harrison,,CLOSED,2017-04-16T23:18:37Z,2023-12-07T20:29:42Z,"Use of `select` in `client.py` line 908 forces a limitation of 1024 connections, at least on Linux machines. Furthermore, when the limit is reached it is not reported because it is intercepted by line 912 (`ValueError`).

See http://stackoverflow.com/questions/14250751/how-to-increase-filedescriptors-range-in-python-select/14250961#14250961 for more information on the connection limit of `select`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDM5NjMyOA==,paho.mqtt.python,294396328,183,NA,swails,779022,Jason Swails,,NA,2017-04-17T03:07:50Z,2017-04-17T03:07:50Z,"This is true of a lot more than just Python.  For instance, if you run a `mosquitto` broker on a Linux host that has the default fd limit (set to 1024), you won't be able to sustain more than 1024 client connections.

`poll` is troubling since it claims in the Python documentation *not* to be cross-platform and isn't available on all operating systems.  I see no such warning for `select.select()`.  Perhaps I'm mistaken, but I've gotten the impression that the understanding of the open file descriptor limit in the context of MQTT was fairly well-understood.

Is there a reason you can't just up the fd limit on your Linux box?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDM5NjMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDM5ODYxMg==,paho.mqtt.python,294398612,183,NA,whyameye,1716966,John Harrison,,NA,2017-04-17T03:33:25Z,2017-04-17T03:33:25Z,If by fd limit you mean the limit reported by ulimit -n that does not solve the problem in this case.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDM5ODYxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUxMzcxNA==,paho.mqtt.python,294513714,183,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-17T15:50:35Z,2017-04-17T15:50:35Z,"Yes, there is indeed an issue with select.select() that only accept FD whose number below 1024 (at least on linux).
Since this is a client library, you're usually connecting only to one server. To better prioritize issue could you describe the use case that cause to reach more than 1024 connection on an MQTT client ?

For a possible fix, a look to [selectors](https://docs.python.org/3/library/selectors.html) module could be an easy solution to use the best method between select/epoll/kqueue... ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUxMzcxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUxOTc5Mg==,paho.mqtt.python,294519792,183,NA,whyameye,1716966,John Harrison,,NA,2017-04-17T16:20:02Z,2017-04-17T16:20:02Z,"For me the issue isn't how many servers you connect to but how many connections you can make to the same server. My use case is a bench mark or a stress test. At the least, if an error were reported it would be helpful.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUxOTc5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUyMjM2NQ==,paho.mqtt.python,294522365,183,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-17T16:32:01Z,2017-04-17T16:32:01Z,"Ok understood.
As workaround you should keep ulimit -n to 1024, which will generate an error. Using multiple process could allow to go further than... about 340 connection (because a pipe - so 2 FD - is created with each connection).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NDUyMjM2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/183,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCLOA,paho.mqtt.python,1846064000,183,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:29:33Z,2023-12-07T20:29:33Z,I'm going to close this as a duplicate of #238 (I realise that this issue was raised earlier but #238 has significantly more content and more recent activity so seems best to focus on that going forward). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCLOA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/185,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/185,paho.mqtt.python,222262845,185,Current PAHO MQTT client does not support SSL context ,cah-sachin,4475487,Sachin Burange,,CLOSED,2017-04-17T23:52:46Z,2017-07-07T15:24:11Z,"Hello,

For our project need we need to add ALPN support to existing paho client. This is not enabled in 1.1 version as complete SSL context variable is missing from client.py ( self._ssl_context )

My questions is, when you guys will be releasing paho mqtt with this support ? I see this support on development branch.

-Sachin
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/185/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/185,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk2NTc1NA==,paho.mqtt.python,311965754,185,NA,swails,779022,Jason Swails,,NA,2017-06-29T13:27:01Z,2017-06-29T13:27:01Z,"I believe this has since been released in 1.3.0 (if not 1.2.3).

Can you check this and close the issue if it's resolved?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk2NTc1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/185,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzcxMjk5OA==,paho.mqtt.python,313712998,185,NA,PierreF,359833,Pierre Fersing,,NA,2017-07-07T15:24:11Z,2017-07-07T15:24:11Z,SNI support was added in the 1.3 release,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMzcxMjk5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/186,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/186,paho.mqtt.python,222341518,186,print_topic in _handle_publish in develop branch,michaelboulton,3809868,,,CLOSED,2017-04-18T08:36:20Z,2017-05-17T18:20:23Z,"Just a minor thing - in the current develop branch the 'print_topic' variable in _handle_publish is assigned to but never used: 

https://github.com/eclipse/paho.mqtt.python/blob/fdb46b4e40c4c1a8d661ccb9a59b1975e6512db8/src/paho/mqtt/client.py#L2436-L2441

It used to print it out in the log message, but now it just prints the message topic.

master: https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2456

develop: https://github.com/eclipse/paho.mqtt.python/blob/fdb46b4e40c4c1a8d661ccb9a59b1975e6512db8/src/paho/mqtt/client.py#L2455","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/186/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/186,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4MjAyMg==,paho.mqtt.python,296582022,186,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T08:49:50Z,2017-04-24T08:49:50Z,Commit 6d9ce3a make use of print_topic to (re)fix #75 in develop.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU4MjAyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,paho.mqtt.python,222425752,188,Incomplete handling of some socket errors,jamesmyatt,1047337,James Myatt,,CLOSED,2017-04-18T13:57:24Z,2024-01-08T00:09:35Z,"There are a couple of places where the error number associated with a `socket.error` is checked against `(errno.EINPROGRESS, errno.EWOULDBLOCK, EAGAIN)` and all other exceptions are re-raised. However, when the error number is in this list, there is no action, which is probably wrong.

For example:

* https://github.com/eclipse/paho.mqtt.python/blob/develop/src/paho/mqtt/client.py#L859
* https://github.com/eclipse/paho.mqtt.python/blob/develop/src/paho/mqtt/client.py#L258
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NzAwOA==,paho.mqtt.python,309287008,188,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-18T16:13:49Z,2017-06-18T16:13:49Z,"The one in reconnect seems fine for me.
If only means that reconnect in fact didn't reconnected, and self._sock stay None, which only cause later call to loop() to re-try connection.

The one in _socketpair_compat could be problematic. I agree that if such error occur, I think later code will fail (probably hang). That being said, I not sure those error could occur since it's using localhost, which should not fail.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NzAwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzg3NjM4OQ==,paho.mqtt.python,523876389,188,NA,engineeringentropy,26847354,EngineeringEntropy,,NA,2019-08-22T12:05:54Z,2019-08-22T12:05:54Z,"Looks like this is still an issue in 1.4.0:
ERROR:__main__:Unknown exception while waiting for conclusion of application: local variable 'sock' referenced before assignment
Traceback (most recent call last):
  File ""databaser.py"", line 81, in <module>
    databaser = MqttDatabaser(caFile=args.ca, keyFile=args.key, certFile=args.cert, queue=dataQueue)
  File ""/mnt/c/Users/.../mqtt/databasermqtt.py"", line 53, in __init__
    mqtt.connect(""XXXX"", 8883, 10)
  File ""/mnt/c/Users/..../venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 839, in connect
    return self.reconnect()
  File ""/mnt/c/Users/..../venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 974, in reconnect
    sock,
UnboundLocalError: local variable 'sock' referenced before assignment.

The above was obtained by dropping a VPN connection before running the application. 
sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0)) throws EAGAIN, which then falls through to 
sock = self._ssl_context.wrap_socket(
                    sock,
a few lines later.

I'm not sure what the correct behaviour should be.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzg3NjM4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDExODM2Mw==,paho.mqtt.python,524118363,188,NA,engineeringentropy,26847354,EngineeringEntropy,,NA,2019-08-22T23:40:47Z,2019-08-22T23:40:47Z,"For anyone else getting this error with certificates where the server either disappears or isn't found:
The exception handler at client.py:963 can be changed to reraise the socket.error (remove the if-clause), and then let the background loop catch the error and run with it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNDExODM2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/188,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEiFi,paho.mqtt.python,1880236386,188,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:09:35Z,2024-01-08T00:09:35Z,"Support for `socket.error` was [dropped in 2021](https://github.com/eclipse/paho.mqtt.python/commit/4910b785a49b989e150eb11e87f7ca5aad38992a) so I'm going to close this issue. It's likely that there are other related issues with exception handling (and a few open issues) but I don't think this specific issue is still of relevance. 

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEiFi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/192,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/192,paho.mqtt.python,223754508,192,Client doesn't disconnect properly when CONNACK indicates failure,jamesmyatt,1047337,James Myatt,,CLOSED,2017-04-24T09:22:01Z,2017-05-17T18:20:09Z,"In https://github.com/eclipse/paho.mqtt.python/commit/e0c1a16a1e14392a070f731504285993e169a492, added `client.disconnect()` to callback. But I think this should happen automatically when the CONNACK rc indicates failure.

What do you think?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/192/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/192,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MjE3MQ==,paho.mqtt.python,296592171,192,NA,jamesmyatt,1047337,James Myatt,,NA,2017-04-24T09:24:44Z,2017-04-24T09:24:44Z,Possibly related to: https://github.com/eclipse/paho.mqtt.python/issues/170,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjU5MjE3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/192,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjY0MDExMw==,paho.mqtt.python,296640113,192,NA,PierreF,359833,Pierre Fersing,,NA,2017-04-24T12:03:48Z,2017-04-24T12:03:48Z,"Yes and no :)
Client should reconnect itself if we don't call disconnect(), that why I've added it.
That being said, it may be better to not explicitly disconnect and be sure it disconnect by itself. Committed this change.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDI5NjY0MDExMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/194,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/194,paho.mqtt.python,228294563,194,Incorrect handling of duplicate PUBLISH messages for qos 2,kelvinens,9021540,Kelvin Nogueira,,CLOSED,2017-05-12T13:37:53Z,2017-06-18T16:06:08Z,"If the client receives two or more PUBLISH messages with the same mid, it appends the message many times to the `_in_messages` list, **even on qos 2**.

This causes many calls to `_handle_on_message` with the same mid when receiving PUBREL.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/194/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/194,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NjU3NA==,paho.mqtt.python,309286574,194,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-18T16:06:08Z,2017-06-18T16:06:08Z,PR #199 fix this issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NjU3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,paho.mqtt.python,229872093,196,disconnect() and messages with qos > 0,FabianInostroza,8893928,,,CLOSED,2017-05-19T05:05:20Z,2017-06-20T03:42:57Z,What happens/should happen to messages with qos > 0 that haven't been delivered by the client if I call disconnect?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzA3MzgxMw==,paho.mqtt.python,303073813,196,NA,PierreF,359833,Pierre Fersing,,NA,2017-05-22T11:28:52Z,2017-05-22T11:28:52Z,"Hi,

If what you want to achieve is something like:
```
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.publish(..., qos=0)
        client.publish(..., qos=0)
        client.disconnect()
```

then this should works. Obviously, since it's QoS == 0, a network error may cause the message to be lost, but if network is flawless, messages will be delivered.

What code do is to queue message (QoS == 0 and disconnect message) in the same output buffer which is a FIFO. So if you publish message before calling disconnect, the QoS==0 message will be published before sending the disconnect. In addition loop_forever (or loop_start) will not exit before the output buffer is empty (or any error, like a network error, occur).

But be careful, if you try to publish QoS == 0 message *before* the connection is established, the message is dropped. You must not call publish with qos=0 before the connection. That's why in my example code I've done the publish in the on_connect callback.

Finally if all you want is just connect, send few messages and disconnect, look at [publish helper](https://github.com/eclipse/paho.mqtt.python#id2), which basically do what I suggest.

Hope it answer your question. If not feel free to reopen.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzA3MzgxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzYxMTQ3NQ==,paho.mqtt.python,303611475,196,NA,FabianInostroza,8893928,,,NA,2017-05-24T04:00:40Z,2017-05-24T04:00:40Z,"Thanks, you answered the case when QoS = 0 and I suppose that what you said is also valid for QoS > 0.

What I'm trying to do is to save some energy, I have a device with a 3G modem.
I tried increasing the keepalive interval and just leaving pppd disable the internet connection after some time without activity but this resulted in big delay in the data transmission because the connection with the broker was not marked invalid promptly after a new publish (and pppd session).
I wanted to try a new approach, close the connection with the broker when I know that I will not publish messages for while but I also worried about messages being lost.
I'm using the client with the loop_start() call and QoS = 1.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzYxMTQ3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzY0ODU0MQ==,paho.mqtt.python,303648541,196,NA,PierreF,359833,Pierre Fersing,,NA,2017-05-24T08:00:55Z,2017-05-24T08:00:55Z,"QoS > 0 are sightly different, because they may not be sent immediately, because they respect max_inflight message count.
Because of this they may be queued in a different queue, and then the disconnect could be sent before the QoS > 0 message queue is purged.

The best solution I see is to count the number of message submitted (just before calling publish()) and and number of message published (using callback on_publish). When the two number match, is mean all submitted message are published and then you can disconnect.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzY0ODU0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM0NjcxMA==,paho.mqtt.python,309346710,196,NA,FabianInostroza,8893928,,,NA,2017-06-19T06:05:30Z,2017-06-19T06:05:30Z,"Thanks, do you think there is it necessary to use a lock on the counter?
Why not implement a method on the client that returns the number of pending messages?, the client should already know this","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTM0NjcxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTQ3NTgyMw==,paho.mqtt.python,309475823,196,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-19T15:28:58Z,2017-06-19T15:28:58Z,"It depends where each access to the counter are done. I think you will only have 3 access:
* Read the counter (most likely for logging or checking if the value is 0)
* Increasing the counter (before call to publish)
* Decreasing the counter (in on_publish callback)

The Paho library is mono-threaded. Therefor all processing (including call to user callback) are done in the same thread. If all your access are done in callback, no longer is required.
If only read of the counter is done outside the callback, you may be okay without lock (it means that when you read a value, it may already have changed).

But if you increase the counter outside the callback, the lock should be mandatory.

If you are unsure, use a lock, the cost is rather small (230 ns on my laptop, Python 3.5)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTQ3NTgyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/196,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTYzNjUwNQ==,paho.mqtt.python,309636505,196,NA,FabianInostroza,8893928,,,NA,2017-06-20T03:42:57Z,2017-06-20T03:42:57Z,"So in my case it's mandatory to use a lock, because there is no callback function for when a message is being queued by a call to publish().

I encountered some problems while implementing this logic. Calling disconnect() terminates the thread used by the library (the documentation doesn't say it), so after calling reconnect() or connect_async() nothing happens. 
To be able to reconnect it was necessary to call disconnect() followed by loop_stop() (to set self._thread to None) and to reconnect, a call to reconnect() or connect_async() and then loop_start() was necessary.

After a closer look at the library code I think that keeping track of the published messages (with QoS > 0) is not necessary.

Many thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTYzNjUwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197,paho.mqtt.python,230389226,197,an ugly way that using the “__code__.co_argcount” to confirm the count of parameters,daleeg,12060716,,,CLOSED,2017-05-22T13:05:08Z,2017-05-28T18:26:46Z,"**code：**
```
     if self.on_connect:
            self._in_callback = True

            if sys.version_info[0] < 3:
                argcount = self.on_connect.func_code.co_argcount
            else:
                argcount = self.on_connect.__code__.co_argcount

            if argcount == 3:
                self.on_connect(self, self._userdata, result)
            else:
                flags_dict = dict()
                flags_dict['session present'] = flags & 0x01
                self.on_connect(self, self._userdata, flags_dict, result)
            self._in_callback = False`
```
This code is to confirm which ""on_connect "" to execute， but the value of the ""co_argcount"" is sometimes incorrect that will cause the process panic.

**code:**

```
def trace_func():
    def _deco(func):
        @wraps(func)
        def __deco(*args, **kwargs):
            start = time.clock()
            ret = func(*args, **kwargs)
            end = time.clock()
            return ret
        return __deco
    return _deco

@trace_func
def on_connect(client, userdata, rc):
    pass

```
the value of ""on_connect.\_\_code\_\_.co_argcount ""  is 0, not 3


_** sorry for my ugly English**_


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzA5NjI2NA==,paho.mqtt.python,303096264,197,NA,daleeg,12060716,,,NA,2017-05-22T13:14:08Z,2017-05-22T13:14:08Z,"```
try:
    self.on_connect(self, self._userdata, result)
except TypeError:

    flags_dict = dict()
    flags_dict['session present'] = flags & 0x01

    try:
         self.on_connect(self, self._userdata, flags_dict, result)
    except TypeError:
          pass
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzA5NjI2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzIyNDkyNw==,paho.mqtt.python,303224927,197,NA,ralight,79578,Roger Light,,NA,2017-05-22T21:27:59Z,2017-05-22T21:27:59Z,Removing the old callback forms is a good candidate for a breaking change release...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwMzIyNDkyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/197,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDUzMTU3Mw==,paho.mqtt.python,304531573,197,NA,PierreF,359833,Pierre Fersing,,NA,2017-05-28T18:26:46Z,2017-05-28T18:26:46Z,"Dropped support for on_connect with 3 arguments. on_connect  is now always called with client, userdata, flags and rc.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDUzMTU3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/198,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/198,paho.mqtt.python,231257092,198,will_set does not accept a bytes payload,downwith,6325898,Nathan L. Conrad,,CLOSED,2017-05-25T06:57:46Z,2017-05-28T18:35:58Z,Same as closed issue #1 but for the will_set method (instead of publish).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/198/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/198,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDUzMjA2Nw==,paho.mqtt.python,304532067,198,NA,PierreF,359833,Pierre Fersing,,NA,2017-05-28T18:35:58Z,2017-05-28T18:35:58Z,"Thank for reporting this issue.

This is fixed in develop branch, which is expected to be release in the next month.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNDUzMjA2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200,paho.mqtt.python,235145024,200,on_message call back is not getting called while on_connect is getting called.,varsha33,16276947,,,CLOSED,2017-06-12T07:26:24Z,2017-06-13T02:56:34Z,"

# This is the Publisher
import paho.mqtt.client as mqtt
client = mqtt.Client()
client.connect(""localhost"",1883,60)
client.publish(""topic/test"",""hi"",0,True);


# This is the subscriber
import paho.mqtt.client as mqtt
def on_connect(client,userdata,flags,rc): 
	print(""Connected with result code""+"" ""+str(rc))
	client.subscribe(""topic/test"")
def on_message(client,userdata,message):
	print(msg.topic+"" ""str(msg.payload))
client = mqtt.Client()
client.on_message = on_message
client.on_connect = on_connect
client.connect(""localhost"",1883)
client.loop_forever()

My hivemq broker message log gives this when its been published
2017-06-12 07:05:37,727 INFO  - Client paho/765579CDED21EA00DC connected
My hivemq broker message log gives this when its been subscribed 
2017-06-12 07:05:37,774 INFO  - Subscribe from client paho/765579CDED21EA00DC received: topic/test QoS: 0

But I get only the following message on my terminal
Connected with result code 0 
It fails to print (msg.topic+"" ""str(msg.payload)). Please help me resolve this issue","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzcyNjk3Nw==,paho.mqtt.python,307726977,200,NA,ralight,79578,Roger Light,,NA,2017-06-12T08:44:28Z,2017-06-12T08:44:28Z,"Your hivemq log doesn't show any messages being received, so are you sure that any have been sent?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzcyNjk3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzgzNTkxNA==,paho.mqtt.python,307835914,200,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-12T16:04:34Z,2017-06-12T16:04:34Z,"If your published code is complete, it's missing few points:
* You never start the client, with loop_forever, loop_start or a manually managed loop
* Even if you start the loop, with QoS=0 you need to ensure the client is connected before publishing the message. For example using on_connect callback. Failing to do so will result in message being discarded.

If your use-case is to connect, send one message and disconnect, look at publish helper that handle all those details for you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzgzNTkxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/200,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzk5MjI1Mg==,paho.mqtt.python,307992252,200,NA,varsha33,16276947,,,NA,2017-06-13T02:56:34Z,2017-06-13T02:56:34Z,@PierreF . That solved the issue. I changed my publisher code and it worked. Thank you ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwNzk5MjI1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/201,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/201,paho.mqtt.python,235218047,201,Transaction Handling When Receiving QoS2 Messages,samba2,1508184,Maik Toepfer,,CLOSED,2017-06-12T12:35:40Z,2023-12-23T22:42:02Z,"We use MQTT to broadcast live status events. Since we need those events to be submitted exactly once we use QoS2. While implementing client logic we were wondering what would happen if the client application crashes. Since the message was delivered, the message is lost. Next time the (now hopefully fixed) client subscribes the next message will be sent (if persisted). The old message was lost in the client crash.

[Here is a sequence diagram of the client message getting lost]( https://www.planttext.com/plantuml/img/TL51ReCm4BplAqRqckRGOmvL0a9gLD8GGi-LGnomQcoqDbNvVGr1LQGsFgqyCxipksld1Vk-rKJ6UWdx9Hb9jatVoWKsUOw7JDMDZtKlAUcPfV43LDjfsOPIU6ND4jiBejs0HAlm5w5YuHhfu1k9LZedQWdbeAtpIo9fpXX7ZPLNeLkqEvGbOhQVaYC8XxZOlwO5dUptRLj2U5qmgohL2UDdtHL5fauiU9ZqL_j_-PkkqwgQF2EpjQecTWWvUGhZY4JlhUdRasIwki3ZyzmFA-JlSROzlk1WZqyq_mPyPavuaIPtb4MQtT4a-rr-0urRNw4IMYjJ8xBcOrvYX4jlgj4-ZPnVwfG5JSWYcIql_Zi6qJg437V-0G00)

Using the retained message is no option is our use case: other clients connecting to the same topic are expecting to see the events coming in live. If there are currently no events than it is fine and wanted to just sit there waiting for the next event to occur.

What we like to do is something like this:
After the client received the PUBLISH, it sends back a PUBREC and then starts processing the message with a yet non existing callback function. I called it *on_publish_received*. This callback contains the application logic. If it fails (Exception) the MQTT client does *not* respond to the PUBREL package received in the meantime. This would lead to an incomplete QoS2 transaction effectifly marking the message as ""not transmitted successfully"" on the broker. 
The next time we connect back with the fixed logic, the broker presents the old message again (persisted session).

[Here is the sequence diagram for the intended flow.](https://www.planttext.com/plantuml/img/TLB1Rjim3BthAmZtckMmOmz3co30WhbhccQt0GMjC3OHMN8bEcd-lhJi1W666GOicNoFJ-_f8Gb6wLjdZ0z244uKOLckLxztCtZSRE2kvBgHXUl9hBsGt-iBt7QEMlA2mi7FuR7h7Dky0HTgjY1uf0ITGqjGaPo9F1mu9W63If381lr8H9zQJca0TiXn3cPzWEBf0jQnyXTW8wQ6qWoaKQOOZgfF8Ykv1EZwod5gSgsbbB0cm1hPW_B5OOOdAtCpQ1wEPtGbB1UTyBBRmIBJ5O095jldNwkjgS97dhuSfnlGfrE3s7A7NYRSM8MIguZnal6ZPV_stpfJ3ixaRZKsQz9nnc0lmVTjHT6CAk3RZuaFxc7pPr6kNt_2ItZzRgQ_MfywStsxMjvKXj3kmQ9px6lmT8OY-BV9gRT89qjyedsHMogqHpCWhi0i4XeLIJ66EBkruokC_-ZShigRobNX5De-Q6OQmf3Be00SwcqOOL_XpU2llmPvPkVqxi1xJptjuH2YGfFQfkSova4NUcq_0G00)

Question: Is there a trick to do this or something similar witth Python Paho?

Thanks,

MAik
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/201/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/201,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NjU0OQ==,paho.mqtt.python,309286549,201,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-18T16:05:40Z,2017-06-18T16:05:40Z,"Hi,

I'm not aware of any way to achieve this kind of ""transaction"" using Python Paho. It would indeed probably require change in the Paho code to add an additional callback like the one you proposed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwOTI4NjU0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/201,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUI8,paho.mqtt.python,1868382780,201,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:42:01Z,2023-12-23T22:42:01Z,I'm going to close this because of it's age and the fact that the links no longer function. The long term fix would probably require adding persistent session storage (which is recorded as a [known limitation](https://github.com/eclipse/paho.mqtt.python#known-limitations)). Note that the hypothetical solution has an issue; if the broker has received the `PUBREC` then it will only resend a `PUBREL` upon reconnection (not the original publish).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUI8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,paho.mqtt.python,236019783,202,"Never connects for some reason, but no errors. __handle_connack is never called",jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,CLOSED,2017-06-14T21:49:54Z,2017-06-14T23:43:54Z,Can you advise on how to determine why __handle_connack is never called?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU2OTIzNQ==,paho.mqtt.python,308569235,202,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T21:53:00Z,2017-06-14T21:53:00Z,"If it helps any, it seems that in _packet_read, this code:
command = self._ssl.read(1)
is always returning just a null byte string. So it keeps looping and trying to reconnect, and keeps getting null byte strings.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU2OTIzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3MzI4Mg==,paho.mqtt.python,308573282,202,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T22:13:18Z,2017-06-14T22:13:18Z,"Ok, I determined that I had my policy wrong when connecting to AWS IOT. Now that I fixed that, I am getting a connack, but it still keeps reconnecting over and over again almost every second. That doesn't seem correct. I'm using loop_forever.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3MzI4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3Njg1Mg==,paho.mqtt.python,308576852,202,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T22:32:04Z,2017-06-14T22:32:04Z,"It seems that in my loop_forever(), every few calls to loop() return MQTT_ERR_NOMEM.
Why would this happen? I don't believe I should be that low on system memory.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3Njg1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3OTM5Mg==,paho.mqtt.python,308579392,202,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T22:46:15Z,2017-06-14T22:46:15Z,So it seems this is being returned because every third packet again reads 0 bytes from the SSL connection. It used to happen on the first packet...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU3OTM5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/202,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU4ODgxNA==,paho.mqtt.python,308588814,202,NA,jacksonofalltrades,284967,Dave Jackson,dave@jacksonofalltrades.net,NA,2017-06-14T23:43:54Z,2017-06-14T23:43:54Z,Nevermind...more policy nonsense.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMwODU4ODgxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/203,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/203,paho.mqtt.python,238154190,203,help please ! ,YousseMes,28385566,,mesbah.youssef01@gmail.com,CLOSED,2017-06-23T14:12:17Z,2017-07-07T15:22:37Z,"I am a beginner for mqtt !
And the examples that you have done help me to learn programming with pytthon 
so now i can make some pub&sub but i have a problème
 if i receive data from some publisher  i want make publish automatically 
for example if a receive ""on"" from topic1 send ""off"" to topic2 
please thear's no example for that hope you can help me thank you .
  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/203/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/203,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk2MTYyNw==,paho.mqtt.python,311961627,203,NA,swails,779022,Jason Swails,,NA,2017-06-29T13:11:41Z,2017-06-29T13:11:41Z,"This test script does precisely that using the ``test.mosquitto.org`` mosquitto broker:

```python
from paho.mqtt.client import Client

# Create the client. Don't forget to do anything else you need to do, like
# set TLS parameters for a secured connection, etc.
client = Client()

# Define the callback you want to use
def topic_callback(client, userdata, message):
    """""" The callback that will be called automatically whenever posted to the target topic

    Parameters
    ----------
    client : Client
        The MQTT Client object that received the message
    userdata : object
        An arbitrary object passed back to you
    message : MQTTMessage
        The message sent through MQTT
    """"""
    if message.payload.decode('utf-8') == 'on':
        client.publish('topic2', payload='off')

# Add the callback to topic1
client.message_callback_add('topic1', topic_callback)

# Connect to whatever broker you want to use and loop connect
client.connect('test.mosquitto.org', port=1883)

client.subscribe('topic1')

client.loop_forever()
```

Note that this is only to demonstrate how to use the API here, *not* a recommended way to design a program.  I'd highly recommend consulting the API documentation in the top-level README file and try playing around with it a bit.

Good luck!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk2MTYyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/203,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk3MzM1Mg==,paho.mqtt.python,311973352,203,NA,YousseMes,28385566,,mesbah.youssef01@gmail.com,NA,2017-06-29T13:53:41Z,2017-06-29T13:53:41Z,Thank you soooo much 🥇  ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTk3MzM1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,paho.mqtt.python,238379389,204,Support for Ubuntu 14.04 users cut off,NickWaterton,11572327,Nick Waterton,,CLOSED,2017-06-25T13:01:38Z,2021-07-22T22:11:34Z,"The recent breaking change to not support versions of python lower than 2.7.9 has left all Ubuntu 14.04 users in the cold.

We are at python 2.7.6, and trying to upgrade would break all our dependencies. I have to stay with V1.2.3 in order to continue to use this library.

I am using TLS V1.1, and I understand that python 2.7.9 is required for TLS V1.2, but I don't understand why V1.3 is not backward compatible with the thousands of Ubuntu 14.04 users out there.

I should be able to use TLS 1.1, but now I can't. Backwards compatibility with existing users should be a priority.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMDk4ODI3MQ==,paho.mqtt.python,310988271,204,NA,PierreF,359833,Pierre Fersing,,NA,2017-06-26T07:53:33Z,2017-06-26T07:53:33Z,"Hi,

support for new features like SNI or more powerful SSL context changed the code that handle TLS setup. New code rely on SSL context. Supporting both old and new method create a more complicated code and make it harder to maintain.

That's why we dropped support for older Python version.

That being said, Ubuntu 14.04 user has the option to go with Python 3.4 which is supported. If your application can't yet run on Python 3, backports.ssl package may be a solution.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMDk4ODI3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTA0NTU3OQ==,paho.mqtt.python,311045579,204,NA,NickWaterton,11572327,Nick Waterton,,NA,2017-06-26T12:31:21Z,2017-06-26T12:31:21Z,"So you believe that instead of a ""harder to maintain"" source code library, everyone else should simply:

- Change their operating system
- Change their programming language
- Rewrite their whole program to accommodate your changes.

Whereas I think that you should maintain backwards compatibility.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTA0NTU3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTI5MzQyOQ==,paho.mqtt.python,311293429,204,NA,ralight,79578,Roger Light,,NA,2017-06-27T08:43:14Z,2017-06-27T08:43:14Z,"Hi Nick,

You can still get the previous version. To install that specific version with pip, do:

    pip install paho-mqtt==1.2.3","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTI5MzQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTMyNDk2Ng==,paho.mqtt.python,311324966,204,NA,swails,779022,Jason Swails,,NA,2017-06-27T10:59:30Z,2017-06-27T10:59:30Z,"@NickWaterton - There are many things you can do to use the `paho-mqtt` library on Ubuntu 14.04:

1. As @ralight suggested, use `pip install paho-mqtt==1.2.3` to get a version compatible with your system-level Python
1. Use `virtualenv` to install a Python 2.7.9+
1. Install Python 3.4 using `apt-get` (as suggested by @PierreF)
1. Install the latest version of Python 2.7 from a commercially-backed distribution like miniconda (this is very easy)

There are more than enough (very easy) workarounds that do not require you to change your OS. 
 I also suggest reading [this post](http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html) by a core Python developer that works for Red Hat that makes a strong case for not going out of your way to support older versions of Python.  The basic gist of it is that developers that donate their time should not feel obligated to divert effort to provide gratis support for legacy platforms.  The more appropriate place to take this complaint is to Ubuntu and make the case that it is worth their resources to devote a developer to the paho project to maintain compatibility with their 14.04 LTS release.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTMyNDk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTMzODgzNg==,paho.mqtt.python,311338836,204,NA,NickWaterton,11572327,Nick Waterton,,NA,2017-06-27T12:09:01Z,2017-06-27T12:09:01Z,"Or you could remain backwards compatible.

I understand all the workarounds to the problem you have caused. That doesn't help the users of my programs out there, who are contacting me, saying that there is a problem with my program - which traces back to the breaking changes you have introduced.

Imagine if every library developer out there took the same attitude and the chaos that would ensue. If you make major breaking changes (not in beta state, but after many years or deployment), most developers release a major version upgrade (ie V1,x to 2.x).

I donate my time providing useful programs also, but this ""legacy platforms should upgrade"" attitude (where ""legacy"" means a year or two old - and Ubuntu 14.04 is two years old) means a lot of work for us library users out there, if you don't handle your release versioning well.

I now have to go back to my users (of my free program) and try to explain this mess, and the ""very easy"" workarounds. As this is an IoT interface, many of them are new to the field, and don't understand what is ""very easy"" for us to figure out.

Just wanted you to be aware of the fallout from this decision, and it isn't going well out there. Just in case you thought no-one noticed. We did. And we are not happy.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTMzODgzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTM4NTE2OA==,paho.mqtt.python,311385168,204,NA,swails,779022,Jason Swails,,NA,2017-06-27T14:57:49Z,2017-06-27T14:57:49Z,"Here are more options:

1. Bundle paho-mqtt 1.2.3 in your package distribution and remove it from the set of requirements for your package.  Better yet, put it in a new namespace (e.g., `contrib`) and make the 2 or 3 changes to import statements to support that placement.  I've done this in my own projects before.
1. Submit a PR to this project to restore Python 2.7.6 compatibility (without eliminating features that people have contributed), then add an appropriate entry in the Travis build matrix to test this platform. [This is precisely what I did when I had a vested interest in preserving backwards compatibility in the face of a breaking change last year](https://github.com/eclipse/paho.mqtt.python/pull/54)
1. Chime in [when the discussion about dropping support for old versions of Python is going on](https://github.com/eclipse/paho.mqtt.python/issues/115) -- that issue was open for 7 months and was opened 9 months before 1.3.0 was released.
1. Specify in your package that paho-mqtt 1.2.3 is required -- I'm certain there's a way to do this in a way that will make `pip` install the appropriate paho version.

> Or you could remain backwards compatible.

paho *is* backwards compatible.  Backwards compatibility means API compatibility with older versions of that package -- *not* that the base runtime requirements never change.

> Imagine if every library developer out there took the same attitude

Not hard to imagine -- most do.  Examples: numpy and friends, pip, coverage, [django](https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django), ... the list goes on.

> If you make major breaking changes (not in beta state, but after many years or deployment), most developers release a major version upgrade (ie V1,x to 2.x).

This *is* planned.  Many projects change base Python requirements without breaking backwards compatibility in the API and release as minor version changes.  Look at django 1.8 to 1.9 (support for Python 3.2 and 3.3 are dropped), and that's a large, prominent project with a wide user base.  I'm pretty sure numpy did the same kind of thing somewhere in the 1.X line.

> Ubuntu 14.04 is two years old

More than 3 years old.

I've found the process of contributing here open, respectful, and transparent (I'm in no way affiliated with Eclipse or Paho -- I'm a user of the library that has contributed some back).  As someone that maintains projects for free as well, I believe your frustrations and accusations are misplaced.  You can't expect every upstream project developers to embrace the same priorities you do and saddle themselves with extra (boring and irritating) work in their free time to cater to users that never provide input in the public forums of the projects.  If you want your priorities to become paho's priorities, be a proactive contributor.

Barring that, the onus is on you to insulate yourself from any upstream changes that may break your code that is forced to conform to a stricter set of runtime requirements than those upstream projects have committed to.  That's precisely why the `package==<version>` capability is supported in the pip requirements file.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTM4NTE2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQzOTMzNw==,paho.mqtt.python,311439337,204,NA,jamesmyatt,1047337,James Myatt,,NA,2017-06-27T18:08:03Z,2017-06-27T18:08:03Z,"As the others have said, your version of Python is fully supported by paho v1.2.3. If you want to use TLS in a more recent version of paho, then you need to use a more recent version of Python.

I would ask Ubuntu why they won't add a newer and more secure version of Python 2.7 to the 14.04 LTS package index. Python 2.6.9 was actually released a month _before_ the first release of Ubuntu 14.04, and there have been a further 5 Ubuntu 14.04 releases since then. There are very good reasons (mainly security) why the core Python development team broke existing conventions to backport the ssl library updates to Python 2.7. See https://www.python.org/dev/peps/pep-0466/.

As the person that implemented the updates that require the new ssl library, I can tell you that it was going to be a **major** headache to maintain support for Python 2.7.8 and earlier while allowing users the required access to the newer, more featured and more secure ssl library, which is why there was a discussion on this first. Furthermore, the number of edge-cases that would have been created would have been a serious security risk.

In the end, I echo what @swails has said; I too am not affiliated with Eclipse or Paho, but I have found my contributions, including these SSL updates, to be gratefully and constructively received. If this is so important to you, then I have no doubt that if you raise a pull request that restores support for SSL in earlier versions of Python without compromising the security and functionality for newer versions, then it will be equally constructively received.

However, if instead you attempt to badger a group of volunteers to change a decision that means much more work for them and has already been agreed multilaterally when your use case is already supported by a previous release, then you're likely to get a short answer.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQzOTMzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ4MjkxOQ==,paho.mqtt.python,311482919,204,NA,ralight,79578,Roger Light,,NA,2017-06-27T20:56:06Z,2017-06-27T20:56:06Z,"Nick, I'm sure we all feel your frustration. If I'd have been more involved I might have pushed towards a 2.x release, but I've made a conscious decision to let the active people get on with it.

I hope you've got some constructive feedback on how you might work with this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ4MjkxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ5OTQ4OA==,paho.mqtt.python,311499488,204,NA,NickWaterton,11572327,Nick Waterton,,NA,2017-06-27T22:04:12Z,2017-06-27T22:04:12Z,"I understand that no-one like criticism of their ""baby"", and I do contribute to other projects (I just can't contribute to everything...).

I'll note the incompatibility for my code. It's not really a big deal, I'm just passing on a word of caution.

My point is if you supply a library (even if it's free), then you have customers. It should be a red flag if your latest release makes work for these customers (as, if they have to do some work, they may decide to do something entirely different instead). This is how you start to lose an otherwise loyal installed base. Without the installed base, and the customers, you have a dead project.

So don't look at this as a rant against your no doubt excellent work on the latest paho-mqtt python version, but more of a warning of the potential consequences of this kind of incremental release (which I'm saying is not really an incremental release).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxMTQ5OTQ4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM4Mzg0Mg==,paho.mqtt.python,372383842,204,NA,jamesmyatt,1047337,James Myatt,,NA,2018-03-12T16:58:47Z,2018-03-12T16:58:47Z,Here's the view of a CPython core developer: https://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26.html,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM4Mzg0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ3OTExMw==,paho.mqtt.python,413479113,204,NA,jbwdevries,17177339,,,NA,2018-08-16T09:12:41Z,2018-08-16T09:12:41Z,"Consider supporting https://pypi.org/project/backports.ssl , it should be only a matter of changing the ssl import when ssl.SSLContext is not available","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ3OTExMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNTUzNDcyNw==,paho.mqtt.python,535534727,204,NA,CarlFK,23225,Carl Karsten,,NA,2019-09-26T14:39:23Z,2019-09-26T14:39:23Z,"14.04 is EOL (kinda): 
Ubuntu 14.04.6 LTS | Trusty Tahr | Changes | March 7, 2019 | April 2019 | April 2022
https://wiki.ubuntu.com/Releases

I propose closing this.   it's obviously a wont-fix which I'm ok with.

it sounds like there may have been (still is?) a packaging bug and/or maybe version number could be better so that packagers take care so  ""normal system updates"" don't install a new version that isn't compatible. 




","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNTUzNDcyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/204,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xCHR,paho.mqtt.python,885268945,204,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:11:34Z,2021-07-22T22:11:34Z,"As Carl suggests, this is now no longer worth keeping open. Ubuntu 14.04 is only supported for security updates through paid commercial offerings, and Python 2 reached end of life over 18 months ago (support for Python 2 remains untouched in the Paho code).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xCHR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,paho.mqtt.python,242594079,208,Issues with reconnecting after upgrading to 1.3.0,oh5fsz,12632089,,,CLOSED,2017-07-13T06:02:35Z,2017-09-29T09:36:27Z,"After upgrading the library to 1.3.0 we started to get issues with the library's reconnection feature. Frequently during reconnection the library raises the following exception:

> 13.07.17 07:32:40 (+0300) [Errno 32] Broken pipe
13.07.17 07:32:40 (+0300) Exception in thread Thread-3:
13.07.17 07:32:40 (+0300) Traceback (most recent call last):
13.07.17 07:32:40 (+0300)   File ""/usr/lib/python3.4/threading.py"", line 920, in _bootstrap_inner
13.07.17 07:32:40 (+0300)     self.run()
13.07.17 07:32:40 (+0300)   File ""/usr/lib/python3.4/threading.py"", line 868, in run
13.07.17 07:32:40 (+0300)     self._target(*self._args, **self._kwargs)
13.07.17 07:32:40 (+0300)   File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 2606, in _thread_main
13.07.17 07:32:40 (+0300)     self.loop_forever(retry_first_connection=True)
13.07.17 07:32:40 (+0300)   File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 1470, in loop_forever
13.07.17 07:32:40 (+0300)     rc = self.loop(timeout, max_packets)
13.07.17 07:32:40 (+0300)   File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 995, in loop
13.07.17 07:32:40 (+0300)     rc = self.loop_read(max_packets)
13.07.17 07:32:40 (+0300)   File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 1273, in loop_read
13.07.17 07:32:40 (+0300)     rc = self._packet_read()
13.07.17 07:32:40 (+0300)   File ""/usr/local/lib/python3.4/dist-packages/paho/mqtt/client.py"", line 1773, in _packet_read
13.07.17 07:32:40 (+0300)     command = self._sock.recv(1)
13.07.17 07:32:40 (+0300) AttributeError: 'NoneType' object has no attribute 'recv'

We currently don't have any custom on_disconnect() -function and the loop_start() is ran from a thread and the connection uses SSL.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM3OTc1NQ==,paho.mqtt.python,315379755,208,NA,PierreF,359833,Pierre Fersing,,NA,2017-07-14T14:51:24Z,2017-07-14T14:51:24Z,"I can't reproduce this issue.

By looking at the code and your error:
* self._sock is None when error occur
* self._sock is NOT none at the beginning of loop_read
* I only see self._sock being set to None during handling_connack & if there is a protocol downgrade. And it's during reconnect which re-set self._sock to a valid socket. (this hold true if no user callback close the connection).

Some additional information may help:
* You said it's the reconnect feature that cause this issue, what may you think so ?
* In your callback (on_message, on_connect, on_...) are you calling anything that may close the socket (reconnect, reinitialise, disconnect) ?
* From another thread, are you calling anything that may close the socket ? or any loop_* method ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM3OTc1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTY3MzMwOQ==,paho.mqtt.python,315673309,208,NA,oh5fsz,12632089,,,NA,2017-07-17T05:58:20Z,2017-07-17T05:58:20Z,"The error doesn't appear on devices that have a stable connection. It seems to occur only on clients that are connected with an unstable connection like 3G or WLAN.

We removed all custom reconnection logic while upgrading to 1.3.0 since the plan was to test the improved reconnection handling introduced in 1.3.0. There's no custom on_disconnect-function and no reconnect is called from the on_message-function.

The MQTT object/thread is passed to other threads but they only use a function that calls publish. No loop methods or anything that should set the socket to None.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTY3MzMwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI1Njc5OA==,paho.mqtt.python,324256798,208,NA,PierreF,359833,Pierre Fersing,,NA,2017-08-23T08:18:44Z,2017-08-23T08:18:44Z,"Got the same issue with the usage of publish.multiple() (thus no user callback may interfere).
I don't have much more information on how to reproduce. I can said that:

* publish.multiple was called with multiple messages, but when error occurred all message were sent (the list passed as argument was empty, e.g. publish.multiple had .pop() all messages)
* It is possible that the number of messages was large (in number, not in size)
* It is using SSL
* It is using a ""slow"" connection (from Asia to Europe, so latency is high)

The stack trace was:
```
AttributeError: 'NoneType' object has no attribute 'recv'
  File ""celery/app/trace.py"", line 374, in trace_task
    R = retval = fun(*args, **kwargs)
  File ""celery/app/trace.py"", line 629, in __protected_call__
    return self.run(*args, **kwargs)
  File ""bleemeo_probe/tasks.py"", line 860, in mqtt_send
    tls=tls_config,
  File ""paho/mqtt/publish.py"", line 153, in multiple
    client.loop_forever()
  File ""paho/mqtt/client.py"", line 1470, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""paho/mqtt/client.py"", line 995, in loop
    rc = self.loop_read(max_packets)
  File ""paho/mqtt/client.py"", line 1273, in loop_read
    rc = self._packet_read()
  File ""paho/mqtt/client.py"", line 1773, in _packet_read
    command = self._sock.recv(1)
```

Interesting value of variables (at the time of error):
* In the function loop, socklist is [ [<ssl.SSLSocket [closed] fd=-1...>], [], []]
* In the function loop_read, max_packets is 22 and _ (the loop iteration variable) is 2


So on the second iteration of loop_read, the socket is closed (maybe closed during first loop).

~~So loop_read seems to be called with a closed socket and loop_read fail at the second loop.~~

Edit: I've got the value of the variables by sentry, which show variables from each frame of the stacktrace, but it capture them when error occur. So for mutable variable (like ssl.SSLSocket object) inside socklist of loop function could be modified by loop_start. So we can not be sure that the socket was closed in loop function just after the select().","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI1Njc5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI3OTc5MA==,paho.mqtt.python,324279790,208,NA,kipe,1581122,Kimmo Huoman,,NA,2017-08-23T09:50:26Z,2017-08-23T09:50:26Z,"Hey, coworker of @oh5fsz here.

At least the circumstances you were able to reproduce the bug are very similar to ours. All the four points match to the typical situation, when we experienced this. We also haven't figured out a proper way to reproduce this, all I can say that with versions below 1.3.0 this doesn't seem to happen for one reason or another.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDI3OTc5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDQwMTA2MA==,paho.mqtt.python,324401060,208,NA,PierreF,359833,Pierre Fersing,,NA,2017-08-23T17:09:22Z,2017-08-23T17:09:22Z,"Found how to reproduce this issue. The following script fail:
```
import paho.mqtt.client

def _on_connect(client, userdata, flags, rc):
    if rc == 0:
        for msg in userdata:
            client.publish(*msg)


def _on_publish(client, userdata, mid):
    client.disconnect()


def main():
    msgs = []
    for _ in range(21):
        msgs.append((
            'topic',
            b'payload',
            1,  # QoS == 1
            False,  # don't retain
        ))

    client = paho.mqtt.client.Client(userdata=msgs)
    client.on_publish = _on_publish
    client.on_connect = _on_connect
    client.connect('127.0.0.1', 1884, 60)
    client.loop_forever()


if __name__ == '__main__':
    main()
```

What happens:

* it publish more than 20 message (client._max_inflight_messages)
* it disconnect when the first message get its puback.
* in [_do_on_publish](https://github.com/eclipse/paho.mqtt.python/blob/f53da37ce6305f4be081106c46942112465f52be/src/paho/mqtt/client.py#L2549), because the message was a QoS > 0 we call _update_inflight
* _update_inflight will find a message to be sent (because we queued 21 messages, more than client._max_inflight_messages). This will do a call to _send_publish -> _packet_queue -> loop_write!
* loop_write will (in my case) sent the disconnect and therefor close the socket :(
* Now remember than all our calls started from loop_read() than received one puback. It expect 20 puback and will there try to read the next one... from the closed socket.

At the ends, this was caused by disconnect() being called while some messages are still waiting.

@kipe or @oh5fsz : in your case, you don't call disconnect() right ? That still could be explained by nearly the same cause. Just that loop_write() close the socket because of an network error (timeout, connection broken...) instead of user initiated disconnect().
So this bug should happen when:
* More than 20 message with QoS > 0 are queued
* Network cause some error (timeout, ...)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDQwMTA2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDUzOTI2MQ==,paho.mqtt.python,324539261,208,NA,kipe,1581122,Kimmo Huoman,,NA,2017-08-24T05:46:47Z,2017-08-24T05:46:47Z,"@PierreF No, we don't call disconnect. There may very well be a lot of messages in QoS 2 -level, as we're sending data ~every 5 seconds. Also the network connections are often quite poor, so this seems like a probable cause.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNDUzOTI2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTY1NDE1MA==,paho.mqtt.python,329654150,208,NA,fabiocapsouza,15973165,,fabiocapsouza@gmail.com,NA,2017-09-15T01:42:16Z,2017-09-15T01:42:16Z,I just encountered the same issue here. The device is connected to an intermittent WiFi connection and sending only QoS 1 and 2 messages. It happened after the connection was lost for some minutes and meanwhile the program kept trying to send messages. After this error the process couldn't send or receive any messages.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyOTY1NDE1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/208,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzA4MDQ0MQ==,paho.mqtt.python,333080441,208,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-29T09:36:27Z,2017-09-29T09:36:27Z,Committed on fixes branch a test to avoid this crash.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzA4MDQ0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209,paho.mqtt.python,242716916,209,Client constructor does not create a random client identifier when not using MQTTv31 protocol,marschal,3356280,,,CLOSED,2017-07-13T14:18:39Z,2017-10-05T14:27:57Z,"This issue reffers to the Client constructor where the client id should be generated. After update from paho-mqtt 1.2 to 1.3 i run in tho the issue that leaving the clilent_id parameter empty did not generated an unique client id for me.

I'm not into the different protocol versions of mqtt, but the reffered if statement should simply return an empty client_id hence this won't be unique in an M2M scenario.

[/src/paho/mqtt/client.py](https://github.com/eclipse/paho.mqtt.python/blob/f53da37ce6305f4be081106c46942112465f52be/src/paho/mqtt/client.py#L504-L508)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM4MjIwOA==,paho.mqtt.python,315382208,209,NA,PierreF,359833,Pierre Fersing,,NA,2017-07-14T15:00:57Z,2017-07-14T15:00:57Z,"This may not be an issue, as with MQTT 3.1.1 an empty client_id mean that broker may generate an random client id for you.
I'm assuming that you broker does not do that (specification say MAY, broker don't have to do that). Out of curiosity (and to better prioritize the issue) with which broker you have this issue ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM4MjIwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTcwMDk0Ng==,paho.mqtt.python,315700946,209,NA,marschal,3356280,,,NA,2017-07-17T09:00:12Z,2017-07-17T09:00:12Z,This issue is popped up with the java moquette mqtt broker,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTcwMDk0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/209,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQ4MTk3MA==,paho.mqtt.python,334481970,209,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-05T14:27:57Z,2017-10-05T14:27:57Z,"Committed a fix for this issue:
* paho will still try an empty client_id by default with MQTT 3.1.1.
* but if the connect fail with rejected identifier (and client_id is empty), an random one is generated.

With this fix, broker that support empty client id will use it, and for other broker a random one will be generated on client side.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDQ4MTk3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/210,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/210,paho.mqtt.python,242960228,210,Improve documentation,PierreF,359833,Pierre Fersing,,CLOSED,2017-07-14T10:36:31Z,2017-09-29T15:15:54Z,"There is multiple issue with people not used paho-mqtt as expected and losing message especially the fact the publish is asynchronous: the return of publish() does not guaranteed that message is effectively  published.

This occurred twice last month on the mailing list.

The documentation should insists that publish is asynchronous (you need to wait for on_publish callback). Also publish(qos=0) on not yet connected session lost the message (here also, connect() is asynchronous, you need to wait for on_connect). Probably reinforce suggestion to using publish helper.

Adding a example of publish loop in the getting started may also be useful to show recommended publishing loop.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/210/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/210,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM1MjY5Mw==,paho.mqtt.python,315352693,210,NA,ralight,79578,Roger Light,,NA,2017-07-14T12:55:22Z,2017-07-14T12:55:22Z,"I expect that

    msginfo = client.publish(...)
    msginfo.wait_for_publish()

could do with more prominence in the documentation/examples as well. The publish helper is great, but is only suited for a fairly limited set of programs.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxNTM1MjY5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/210,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzE1NDg3MA==,paho.mqtt.python,333154870,210,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-29T15:15:54Z,2017-09-29T15:15:54Z,"Updated documentation to:
* explicitly remain that calling disconnect() will not wait for queued message to be sent
* Document MQTTMessageInfo and wait_for_publish()

This is committed on fixes, not yet on master.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzE1NDg3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,paho.mqtt.python,243998609,211,Documentation is out of date on Eclipse.org,samjetski,8306720,Samuel Jaeschke,,CLOSED,2017-07-19T10:45:33Z,2017-10-05T15:58:47Z,"The documentation is here: https://eclipse.org/paho/clients/python/docs/

It doesn't appear to have been updated recently, and is out of sync with this repo.

For example, it still shows the v1.2 `on_connect()` callback signature: https://eclipse.org/paho/clients/python/docs/#callbacks

It is also still full of links to the old Git repo (git.eclipse.org).

Is there a way to have this automatically updated in future?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTYyMDY2Mg==,paho.mqtt.python,319620662,211,NA,PierreF,359833,Pierre Fersing,,NA,2017-08-02T09:32:29Z,2017-08-02T09:32:29Z,"@ralight is there any particular reason to have a copy of the documentation on eclipse.org ? Isn't github page enough ?
I would opt with removing the documentation page on eclipse.org and only use github page.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTYyMDY2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTcyNDAxOQ==,paho.mqtt.python,319724019,211,NA,ralight,79578,Roger Light,,NA,2017-08-02T16:22:11Z,2017-08-02T16:22:11Z,@PierreF I think that is something that you'd have to ask the project leads about :),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTcyNDAxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTcyNDEyOA==,paho.mqtt.python,319724128,211,NA,ralight,79578,Roger Light,,NA,2017-08-02T16:22:37Z,2017-08-02T16:22:37Z,It is possible to at least semi automate it.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTcyNDEyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/211,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDUxMDc5Mw==,paho.mqtt.python,334510793,211,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-05T15:58:47Z,2017-10-05T15:58:47Z,Documentation updated manually (rst2html and copy/paste),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNDUxMDc5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/212,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/212,paho.mqtt.python,244904665,212,on_message only gets called if no message callback has been defined,stlehmann,4641542,Stefan Lehmann,stlm@posteo.de,CLOSED,2017-07-23T11:34:40Z,2017-09-29T15:18:03Z,"For the on_message callback the documentation says: ""This callback will be called for every message received.""

That is not true. If a topic-specific callback has been defined via `message_callback_add()` the `on_message` callback will not be called anymore. This is clearly not the behavior described in the documentation.

I suggest fixing this by changing the _handle_on_message method as follows:

    def _handle_on_message(self, message):
        matched = False
        with self._callback_mutex:
            try:
                topic = message.topic
            except UnicodeDecodeError:
                topic = None

            if topic is not None:
                for callback in self._on_message_filtered.iter_match(message.topic):
                    with self._in_callback:
                        callback(self, self._userdata, message)
                    matched = True

            if self.on_message:   # <<< remove matched == False
                with self._in_callback:
                    self.on_message(self, self._userdata, message)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/212/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/212,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NjQ1Mg==,paho.mqtt.python,319666452,212,NA,PierreF,359833,Pierre Fersing,,NA,2017-08-02T13:06:53Z,2017-08-02T13:06:53Z,"This behavior was documented on message_callback_add:
> only messages that do not match a subscription specific filter will be passed to the ``on_message`` callback

So indeed documentation is wrong for the on_message callback, but only if message_callback_add is used (so user had a change to see the contradiction, test the behavior and adapt to real behavior).

For those reason I prefer to keep current behavior and clarify documentation on this subject. 
  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMxOTY2NjQ1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/212,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzE1NTQxNg==,paho.mqtt.python,333155416,212,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-29T15:18:03Z,2017-09-29T15:18:03Z,"Clarify documentation, which now state in both on_message() and message_callback_add() that the on_message callback is only used if no other callback processed the message.

Also added tests to check this behavior. 

Committed on fixes branch, not yet on master.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzE1NTQxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/213,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/213,paho.mqtt.python,245671631,213,Support for MQTT v5.0 specifications in Paho library,amitmangalvedkar,5586992,Amit M Mangalvedkar,amitmangalvedkar@in.ibm.com,CLOSED,2017-07-26T10:09:23Z,2021-07-22T01:20:13Z,Is there any plan to support MQTT v5.0 in the immediate future? ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/213/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/213,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ueVW,paho.mqtt.python,884598102,213,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:20:13Z,2021-07-22T01:20:13Z,Going through old issues... MQTT v5 support was added in v1.5.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ueVW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217,paho.mqtt.python,248637135,217,mqtt Connection timed out,daxiabiluo,30133535,,,CLOSED,2017-08-08T08:23:52Z,2018-02-26T09:19:44Z,"Traceback (most recent call last):
  File ""/opt/mqtttext.py"", line 161, in <module>
    mqttc.run()
  File ""/opt/mqtttext.py"", line 76, in run
    self.connect(dedata['MQTT'][""IP""], dedata['MQTT'][""PORT""], 60)
  File ""/python-arm/lib/python2.7/site-packages/paho/mqtt/client.py"", line 760, in connect
    return self.reconnect()
  File ""/python-arm/lib/python2.7/site-packages/paho/mqtt/client.py"", line 887, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/python-arm/lib/python2.7/socket.py"", line 571, in create_connection
    raise err
socket.error: [Errno 110] Connection timed out

Sometimes the above error occurs when the program is started, but sometimes it works normally.What's the problem with this?
This seems to be the first time MQTT connection failed. I use loop_start (). Can I try to reconnect after the first time?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjgzOTc5Mw==,paho.mqtt.python,322839793,217,NA,PierreF,359833,Pierre Fersing,,NA,2017-08-16T17:16:38Z,2017-08-16T17:16:38Z,"Calling connect() will open the TCP connection. And if the TCP connection fail you get an exception allowing you to known that configuration may be wrong (user entered a bad address and/or port ?)

In your case, if you want to retry the connection, the most straightforward method is to use connect_async() instead of connect() and let loop_start() do the (re)connection. loop_start() will catch such exception and retry to (re)connect later.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyMjgzOTc5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjUzNzkzMw==,paho.mqtt.python,326537933,217,NA,daxiabiluo,30133535,,,NA,2017-09-01T09:42:08Z,2017-09-01T09:42:08Z,"Thanks to answer, can be solved by this method","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjUzNzkzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/217,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODQzNzA0Nw==,paho.mqtt.python,368437047,217,NA,hsnhrn,33485530,,,NA,2018-02-26T09:19:44Z,2018-02-26T09:19:44Z,"Hi Pierre,

I am having the same problem for a publisher. Can you please help me in this too? thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2ODQzNzA0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/223,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/223,paho.mqtt.python,254411495,223,[Feature request] Local persistence,gfort-hoo,22796185,,,OPEN,2017-08-31T17:31:41Z,2023-12-07T20:30:13Z,"Hi,

I find myself in a situation where I need a local persistence of the MQTT messages when my devices loose the internet connection and reboot. It works perfectly when the device just loses the connection and reconnects later on, but in the case of a hard reboot I loose every unsent messages, which is not good for my use cases. I would like to see this kind of feature in the native library and avoid developing it myself (which i'll probably have to do at some point)

If that's already possible somehow, i'd be glad to know how :)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/223/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/223,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzM1OTY4OA==,paho.mqtt.python,367359688,223,NA,martenjacobs,1148805,Marten Jacobs,,NA,2018-02-21T15:17:40Z,2018-02-21T15:17:40Z,"I need this as well. It seems to be available in the Java version of Paho, but not Python.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2NzM1OTY4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/223,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODkyMDg3MQ==,paho.mqtt.python,538920871,223,NA,surashiva,10557080,Shivaram Subramanian,,NA,2019-10-07T09:39:42Z,2019-10-07T09:39:42Z,I need this as well. Any idea when client persistence will be implemented on the python library? Its available in the Java version but unfortunately i can't use it. If not is there any pointers of how one could do it in the application side?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODkyMDg3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/224,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/224,paho.mqtt.python,254609318,224,Connect to the websocket broker with custom suffix in URL,stepanmracek,2713971,,,CLOSED,2017-09-01T11:09:23Z,2017-09-04T15:03:00Z,"Hi all,
I have a MQTT broker that is reachable at ws://myserver:80/MQTT.Broker. How can I connect to it using Paho?

The following code
```python
client = mqtt.Client(transport='websockets')
client.connect('myserver', 80, 60)
```
returns handshake error:
```
  File ""/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2737, in _do_handshake
    raise ValueError(""WebSocket handshake error"")
```

On line 2675 in WebsocketWrapper._do_handshake() is code where HTTP header is created:

```python
        header = b""GET /mqtt HTTP/1.1\r\n"" +\
                 b""Upgrade: websocket\r\n"" +\
                 b""Connection: Upgrade\r\n"" +\
                 b""Host: "" + str(self._host).encode('utf-8') + b"":"" + str(self._port).encode('utf-8') + b""\r\n"" +\
                 b""Origin: http://"" + str(self._host).encode('utf-8') + b"":"" + str(self._port).encode('utf-8') + b""\r\n"" +\
                 b""Sec-WebSocket-Key: "" + sec_websocket_key + b""\r\n"" +\
                 b""Sec-WebSocket-Version: 13\r\n"" +\
                 b""Sec-WebSocket-Protocol: mqtt\r\n\r\n""
```

It tries to connect directly to myserver/mqtt. Could you please make this configurable, such that `connect()` function accepts custom path to MQTT broker? e.g.
```python
client.connect('myserver', 80, 60, suffix='/MQTT.Broker')
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/224/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/224,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjU2ODEyOQ==,paho.mqtt.python,326568129,224,NA,stepanmracek,2713971,,,NA,2017-09-01T12:31:21Z,2017-09-01T12:31:21Z,"I'm sorry, I didn't notice that I do not have the lastest version of Paho. In the current version, there is a ``ws_set_options(self, path=""/mqtt"", headers=None)`` method that does everything I need. So you can close this issue as it is no longer a problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjU2ODEyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/225,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/225,paho.mqtt.python,254611148,225,Memory only gets released on disconnect,eifinger,1481961,Kevin Stillhammer,,CLOSED,2017-09-01T11:18:26Z,2017-09-05T09:32:49Z,"I observed that the memory usage of my application increases with each call to ""client.publish()"" and never goes down again. The only way to release the memory is to call ""client.disconnect()"".

The behavior I would expect is that memory usage goes up and down as messages get removed from the pending/inflight queue. It seems the messages are still referenced somewhere.

I am running a script to test the performance of the IBM IoT Platform and am using their [sdk](https://github.com/ibm-watson-iot/iot-python) which uses this lib.
I set up a connection and publish messages with different QoS, different payload and each different amount of times published.
I closed down on the client.publish method by commenting out the line which calls it in the ibm lib which resulted in no change to the memory usage during the runtime of the program.

Can someone explain to me this behavior or if any of my assumptions are false?

EDIT: The code I'm using can be found here: https://github.com/eifinger/paho-memory-check/blob/master/paho-memory-check.py (Beware I am not a Python programmer ;-))","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/225/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/225,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjk5MDQ1MQ==,paho.mqtt.python,326990451,225,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-04T15:41:43Z,2017-09-04T15:41:43Z,"Your code may have an issue that will cause huge memory consumption: you don't wait for messages to be published before continuing. (I said may, because I looked quickly to ibmiotf).

When you print ""Finished sending messages"", I think that actually you only queued message to be sent. Therefor you give 1 seconds for all queued message to be sent before getting memory usage. With 100.000 messages it's unlikely that all messages are sent.

For your test to be more accurate, you will need to be sure all messages are sent and acknowledged by the MQTT server.
On the paho library that would means make sure that on_publish callback is called for each message that you publish (at least that the count match).
With the IBM sdk, it may be by looking at ""messages"" counter. This counter seem incremented each time on_publish is called ([link](https://github.com/ibm-watson-iot/iot-python/blob/master/src/ibmiotf/__init__.py#L185)).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNjk5MDQ1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/225,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzEyMzU4OQ==,paho.mqtt.python,327123589,225,NA,eifinger,1481961,Kevin Stillhammer,,NA,2017-09-05T09:32:49Z,2017-09-05T09:32:49Z,"Hi Pierre, thank you!
This was exactly what was causing the memory consumption, I implemented a check of the messages counter before going on.
Thanks again!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzEyMzU4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,paho.mqtt.python,255570865,226,Deadlock when using an external mutex before calling publish and inside on_publish,amrbekhit,7573225,Amr Bekhit,,CLOSED,2017-09-06T11:28:46Z,2023-12-07T20:45:48Z,"Hello all,

I have code that basically looks like the following:

```
publish_lock = threading.Lock()

def tx_thread:
	while True:
		time.sleep(SOME_DELAY)
		
		messages = get_messages_from_database()
		
		for msg in messages:
			with publish_lock:
				result, mqtt_id = mqtt_client.publish(msg.topic, msg.payload, msg.QOS)
				
				mark_message_as_transmitted(msg, mqtt_id)
				
				
				
def on_publish(client, userdata, mid):
	with publish_lock:
		remove_message_from_database(mid)
```
		
Explanation:

I have a mysql database where I store messages to be transmitted in a table. The tx_thread regularly polls the database and pulls out some of the messages, whereby it publishes them and then updates their entry in the database with the mqtt_id variable that the publish method returns. When the on_publish callback is called with that message's ID, I know that the message has been transmitted successfully and thus remove it from the database.

You'll notice that I'm using a Lock (publish_lock) to make sure that the publish and database update commands are atomic. If I don't do this, there is a possiblity that after I publish the message, but before I update the database, the on_publish callback gets called and tries to delete the message from the database but can't because the mqtt_id hasn't been assigned to the message yet. However, it seems that due to some other internal mutexes in the mqtt client library, I sometimes get the following deadlock condition:

* tx_thread: acquire publish_lock
* on_publish: callback get's called. Some internal mutex gets acquired.
* on_publish: callback attempts to acquire publish_lock but can't, because it is held by tx_thread. Waits.
* tx_thread: attempts to call publish. publish attempts to acquire the same internal mutex mentioned previously but can't because it is held by on_publish

Any thoughts as to how I can go around this problem? Is this potentially an issue in the library that needs to be addressed? The benefit of the on_publish callback is that it notifies you when a message has been successfully published, but in order to do that I need to record the mqtt_id somewhere *before* on_publish is called and this needs to be atomic. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQ5MzA5Mg==,paho.mqtt.python,327493092,226,NA,imZack,690703,YuLun Shih,shih@yulun.me,NA,2017-09-06T14:03:00Z,2017-09-06T14:03:00Z,"How about using Event instead of Lock

```
publish_event = threading.Event()
publish_event.set()

def tx_thread:
  while True:
    time.sleep(SOME_DELAY)

    messages = get_messages_from_database()

    for msg in messages:
      publish_event.wait()
      publish_event.clear()
      result, mqtt_id = mqtt_client.publish(msg.topic, msg.payload, msg.QOS)
      mark_message_as_transmitted(msg, mqtt_id)

def on_publish(client, userdata, mid):
  remove_message_from_database(mid)
  publish_event.set()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzQ5MzA5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzY5OTcxOQ==,paho.mqtt.python,327699719,226,NA,amrbekhit,7573225,Amr Bekhit,,NA,2017-09-07T06:26:16Z,2017-09-07T06:26:16Z,"@imZack Thanks for the suggestion - in the example you gave, every publish waits indefinitely until the on_publish callback is called, which may be very slow (or not at all) if the connection is poor.

What I ended up doing in the end was having the on_publish callback populate a separate list with the id's of the messages that were successfully sent. In tx_thread, I regularly check that list against the database and delete those messages that have been sent.

The reason why I'm wondering whether it's worth looking at the design is because it seems normal that after publish is called, you're going to want to assign that ID to the message, but also want to ensure that is done *before* on_publish is called. In the end, the solution I'm currently using works, but adds an extra layer of complexity in my opinion and the original method using a mutex seemed like the ""obvious"" solution to me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzY5OTcxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzcyMDk2Mw==,paho.mqtt.python,327720963,226,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-07T07:59:12Z,2017-09-07T07:59:12Z,"IIRC, with QoS = 0, your code will always deadlock, because on_publish callback it called immediately (e.g. in the call graph of publish() method).
Are you sending QoS = 0 message ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyNzcyMDk2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODA4MTk3Ng==,paho.mqtt.python,328081976,226,NA,amrbekhit,7573225,Amr Bekhit,,NA,2017-09-08T11:45:28Z,2017-09-08T11:45:28Z,"No I'm using QoS 2, which is probably why I only see the problem occasionally.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODA4MTk3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/226,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCRDW,paho.mqtt.python,1846087894,226,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:45:47Z,2023-12-07T20:45:47Z,I'm going to close this due to age/inactivity and the fact that issue #603 (which appears very similar) was fixed. Please feel free to reopen if you are still encountering the issue. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCRDW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/231,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/231,paho.mqtt.python,256770167,231,CA file in DER format? ,tbec,20916966,Tom Becnel,,CLOSED,2017-09-11T16:46:17Z,2017-09-12T07:26:33Z,"Can the CA file set in tls_set() be in .der format, or is it required to be a .pem or similar? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/231/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/231,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc2NDUwNQ==,paho.mqtt.python,328764505,231,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T07:26:33Z,2017-09-12T07:26:33Z,"tls_set pass its parameter to Python ssl standard library, which accept only PEM file. So yes, it is required to be a PEM file.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc2NDUwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,paho.mqtt.python,256856041,232,Using CBOR(Concise Binary Object Representation) MQTT compressed format for time series.,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,CLOSED,2017-09-11T22:02:52Z,2017-09-29T13:55:57Z,"I'm trying to use CBOR to send the data instead of sending JSON

```
    data_json = ""[#array of dicts]""
    data_json = json.loads(data_json)
    data_json = cbor2.dumps(data_json)
    #subscribing to a event
    client.subscribe(""""+str(user)+""/tasks/json"")
    # client.subscribe(""""+str(user)+""/messages/ts"")

    client.publish(""""+str(user)+""/messages/ts"", data_json, 0)

```
but this doesn't work no data is being sent

#! cbor2.dumps return bytes","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc2NTg3Ng==,paho.mqtt.python,328765876,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T07:31:54Z,2017-09-12T07:31:54Z,"Paho support sending binary payload, so even if cbor2 is binary, it should be supported.
Is your code working when sending json data ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc2NTg3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MDA4MA==,paho.mqtt.python,328780080,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T08:25:22Z,2017-09-12T08:25:22Z,"Yes it does, when I change the Topic to """"+str(user)+""/messages/json"" and do nothing to data_json string it works fine but I need to use CBOR instead  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MDA4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MzE5MA==,paho.mqtt.python,328783190,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T08:36:19Z,2017-09-12T08:36:19Z,"In this case the issue is not the payload being JSON or CBOR, but the topic on which you publish.

Did you updated topic on both published and subscriber ? (in your sample code, the correct subscribe is commented)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MzE5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MzcwOA==,paho.mqtt.python,328783708,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T08:38:13Z,2017-09-12T08:38:13Z,"Yes PierreF I tried both, both didn't work.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4MzcwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4NzkyNg==,paho.mqtt.python,328787926,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T08:54:10Z,2017-09-12T08:54:10Z,"I can't reproduce this issue. I'll need more information or a working code that exhibit this issue.

The following code do sent and receive CBOR data:
```
import paho.mqtt.client
import time
import cbor2

def on_message(client, userdata, message):
    print(""Got message: %r"" % message.payload)

data_json = [{""borker"": ""mosquitto""}, {""python version"": 3}]
data_json = cbor2.dumps(data_json)
client = paho.mqtt.client.Client()
client.connect(""localhost"", port=1884)
client.on_message = on_message
client.loop_start()
client.subscribe(""/tasks/json"")
time.sleep(1)  # wait for subscription to be acknowledged
client.publish(""/tasks/json"", data_json, 0)
```

Tested with both Python 2 and 3.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc4NzkyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc5MzY4OQ==,paho.mqtt.python,328793689,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T09:16:01Z,2017-09-12T09:16:01Z,"how does this even work when you publish on topic ""/tasks/json""
According to MQTT CBOR refs you should publish on MQTT topic: {IMEI or SN}/messages/ts (for Time Series)
https://doc.airvantage.net/av/reference/hardware/protocols/mqtt-ts/

here is the working code
https://codeshare.io/axgA3k","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODc5MzY4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwMDMzNA==,paho.mqtt.python,328800334,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T09:41:10Z,2017-09-12T09:41:10Z,"MQTT does not specify any topic on which publish any data. My example is limited to MQTT.
Your reference is MQTT to talk with AirVantage. It's the same as HTTP versus an API over HTTP.

I'm able to run you full code (against a local broker without authentication) by change one thing: do not disconnect in on_publish callback but instead on on_message callback. By disconnecting in on_publish callback, you close your connection immediately after publishing the message (e.g. before the broker had time to sent the message back to you).

Also be aware of the following possible issue with a non-local broker with authentication:
* the time.sleep(1) in the callback will not really help. paho is single-threaded, so you are blocking to processing thread anyway.
* You should only subscribe & publish in on_connect if rc==0. For example on_connect could be called with rc=CONNACK_REFUSED_BAD_USERNAME_PASSWORD.
* If you expect the message to come back to you, you should only inside the on_subscribe callback. The broker could deny your subscription

For your information, if your intention is just to connect, send some messages and disconnect, there is a publish helper that is easier to use.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwMDMzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwMzg3MA==,paho.mqtt.python,328803870,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T09:55:26Z,2017-09-12T09:55:26Z,"Yes PierreF I only want to connect and send msgs then disconnect.
When I followed what you say the connection didn't disconnect because I receive nothing so on_message is never called. And the data still not being sent on AirVantage.

Please keep in mind that the code works fine when I send JSON the only problem that happens is when I send bytes.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwMzg3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwNjIzOQ==,paho.mqtt.python,328806239,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T10:04:49Z,2017-09-12T10:04:49Z,"Are your on_subscribe callback called ? If not, it's AirVantage that deny your subscription.

Could you try against another broker ? test.mosquitto.org on port 1883 could be used for this. Remember to remove credentials as this broker does not need authentication.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwNjIzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwNzM3Ng==,paho.mqtt.python,328807376,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T10:09:47Z,2017-09-12T10:09:47Z,"No it's not called but why it works when I send json ?
on_subscribe doesn't get called but it sends data successfully ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgwNzM3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyMzQ1Ng==,paho.mqtt.python,328823456,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T11:23:38Z,2017-09-12T11:23:38Z,So Pierre no hope for me?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyMzQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNDQ1MQ==,paho.mqtt.python,328824451,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T11:28:21Z,2017-09-12T11:28:21Z,"on_subscribe runs if I don't disconnect in on_publish but it doesn't make any difference.
When I sending the JSON on_subscribe doesn't get called yet data is sent.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNDQ1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNTk4NA==,paho.mqtt.python,328825984,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T11:35:48Z,2017-09-12T11:35:48Z,">  When I sending the JSON on_subscribe doesn't get called yet data is sent.

This seems very strange. AFAIK MQTT *require* that message are ordered. That means you can NOT receive a message before the subscription acknowledgement. Which seems to indicate your broker does not follow the standard.

If ""data is sent"" mean AirVantage get the data, that looks like a bug in your provider that does not process CBOR but does for JSON.

For me this bug looks like your provider does not works as you expect and you should look with them how to solve your issue.

If you still believe this is a paho issue, please reproduce this bug against another broker (test.mosquitto.org for example).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNTk4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNzEzMg==,paho.mqtt.python,328827132,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T11:41:16Z,2017-09-12T11:41:16Z,how to test if the data is being sent or not to test.mosquitto.org ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODgyNzEzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODg3MDYyNg==,paho.mqtt.python,328870626,232,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-12T14:29:32Z,2017-09-12T14:29:32Z,"You will need to subscribe on the topic to see the message you just sent.

If using your code which subscribe and publish, receiving the message in your on_message callback means that message was sent (and broker re-sent it to you).

If you go with the publish helper, you can not subscribe with the same program. In this case, the easiest solution is to run another program using the subscriber helper. While the subscriber is running, launch the publisher, and see the message doing a round-trip.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODg3MDYyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/232,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODg3NTYwOA==,paho.mqtt.python,328875608,232,NA,aldokkani,25223111,Hossam Al-Dokkani,hossam.aldokkani@gmail.com,NA,2017-09-12T14:45:40Z,2017-09-12T14:45:40Z,"Really thank you Pierre, I got it all now thanks to you. I didn't solve the problem yet but now I see it better. 
I'll contact AirVantage. @","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMyODg3NTYwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233,paho.mqtt.python,259290458,233,stuck at call to message_callback_add,alborzs,4600900,,,CLOSED,2017-09-20T20:24:30Z,2023-12-23T21:53:50Z,"Run the below code and you will see that it gets stuck at message_callback_add.

```
import sys
import os
import time
import logging

from time import sleep

import paho.mqtt.client as mqtt

mqtt_server_ip      = ""10.42.0.1""
mqtt_server_port    = 1884

subscriptions_qos =[(""doorStatus/status"", 0),
                    (""doorStatus/eol"",0)]

def callback_door_status(client, userdata, message):
    logging.debug(""Received %s"", message.payload)

def on_log(client, userdata, level, buf):
    logging.debug(""%s"", buf)

def on_connect(client, userdata, flags, rc):
    logging.info(""Successfully connected to MQTT with result code %s"", str(rc))
    print(""before message_callback_add 1"")
    client.message_callback_add(""doorStatus"", callback_door_status)
    print(""after message_callback_add"")

    (result, _) = client.subscribe(subscriptions_qos)
    if (result == mqtt.MQTT_ERR_SUCCESS):
        logging.info(""Successfully subscribed to MQTT topics with result code %s"", str(result))

def on_message(client, userdata, msg):
    logging.debug(""Received: Topic: %s Body: %s"", msg.topic, msg.payload)

def main():
    logger = logging.getLogger('root')
    logging.basicConfig(format='[%(asctime)s %(levelname)s: %(funcName)20s] %(message)s', level=logging.DEBUG)

    client = mqtt.Client(""master"")
    client.on_log = on_log
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(mqtt_server_ip, mqtt_server_port, 60)

    client.loop_forever()

if __name__ == '__main__':
    main()
```

This is the output from the code:
```
[2017-09-20 07:06:40,562 DEBUG:               on_log] Received CONNACK (0, 0)
[2017-09-20 07:06:40,562 INFO:           on_connect] Successfully connected to MQTT with result code 0
before message_callback_add 1
```
As you can see from the output, the connection to the broker is established successfully, but right after the first call to message_callback_add the code gets stuck and nothing else happens. At this point the only thing I can do is to kill the process. I have no idea why the code is getting stuck, I have also looked at the documentation and still couldn't find anything.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDk3MDM3Ng==,paho.mqtt.python,330970376,233,NA,alborzs,4600900,,,NA,2017-09-20T20:25:49Z,2017-09-20T20:25:49Z,"It sounds like I ended up ""doing"" a subscription before it's connected, which is wrong,","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMDk3MDM3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1NDQ1Ng==,paho.mqtt.python,331154456,233,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-21T13:21:59Z,2017-09-21T13:21:59Z,"Hi,
the message_callback_add does not subscribe by itself. It only register a callback that is called if a received message match the associated topic.
Therefor the message_callback_add does not need to be called on each connect, and it's probably easier to call it once for all during client initialization (e.g. at the same time you setup the on_connect and on_message callback).
This will solve your issue.

That being said, there is a bug / undocumented issue in that message_callback_add (or updating/defining any callback) could not be done within a callback. Currently doing so will hang forever due to a deadlock, the code try to acquire the same lock twice.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMTE1NDQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/233,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXSlf,paho.mqtt.python,1868376415,233,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T21:53:50Z,2023-12-23T21:53:50Z,Closing as it looks like an answer was provided.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXSlf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/234,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/234,paho.mqtt.python,261609877,234,Messages don't get published right away flushed after on_messages returns,dirkjanfaber,3098947,Dirk-Jan Faber,,CLOSED,2017-09-29T11:16:54Z,2017-10-02T11:11:41Z,"From within my `on_message` callback, I am trying to publish 2 messages, with a 5 second delay in between them. The `on_log` callback shows that the messages get send out in time, but from a subscriber point of view this is not the case.  It seems that the messages get flushed only when the on_message callback returns. 

The code from the subscribers point of view (with timestamps):

```
2017-09-29 13:05:38.718 tasks/mqttpi x
2017-09-29 13:05:43.794 received A
2017-09-29 13:05:43.841 received B
```

And from the calling python script:

```
<paho.mqtt.client.Client object at 0x76a12910>
2017-09-29 13:05:32.515228 Received CONNACK (0, 0)
2017-09-29 13:05:32.536386 Received SUBACK
2017-09-29 13:05:38.750625 Received PUBLISH (d0, q0, r0, m0), 'tasks/mqttpi', ...  (1 bytes)
message received  x
message topic= tasks/mqttpi
message qos= 0
message retain flag= 0
2017-09-29 13:05:38.777709 Sending PUBLISH (d0, q0, r0, m2), 'b'received'', ... (1 bytes)
2017-09-29 13:05:43.798801 Sending PUBLISH (d0, q0, r0, m3), 'b'received'', ... (1 bytes)
^C
keyboard interrupt
```

The `on_log` callback clearly shows that the messages get send out 5 seconds apart (13:05.38 and 13:05.43), but they get received at 13:05.43. 

The script that I use to test is: 

```
#!/usr/bin/python3

import paho.mqtt.client as mqtt 
import time
import datetime
import os
import socket
import pprint

def on_log(client, userdata, level, buf):
    print(datetime.datetime.now(), buf)

def on_message(client, userdata, message):
    print(""message received "" ,str(message.payload.decode(""utf-8"")))
    print(""message topic="",message.topic)
    print(""message qos="",message.qos)
    print(""message retain flag="",message.retain)
    client.publish(""received"", ""A"")
    time.sleep(5)
    client.publish(""received"", ""B"")

broker_address=""localhost"" 
hostname = socket.gethostname()
client = mqtt.Client( hostname )
client.connect(broker_address)
client.on_log=on_log
pprint.pprint(client)

client.on_message=on_message
client.loop_start();
client.subscribe( ""tasks/"" + hostname ); 

try:
    while True:
        pass

except KeyboardInterrupt:
    print('\n\rkeyboard interrupt')

client.loop_stop();
```

If I replace the `client.publish` calls by `subprocess.call(""mosquitto_pub -h 10.240.242.153 -t 'received' -m 'A'"", shell=True)`, the messages do get out directly. Even though that works, that is just bypassing the paho.mqtt library and does not feel good. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/234/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/234,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzExNjcxMw==,paho.mqtt.python,333116713,234,NA,PierreF,359833,Pierre Fersing,,NA,2017-09-29T12:46:44Z,2017-09-29T12:46:44Z,"Hi,
your issue is that you are blocking the paho.mqtt library by doing a sleep inside the callback. The library is single threaded, doing such sleep will block all operation (including sending packet on the network).

If you really need to wait 5 seconds between two messages, you need to do that sleep outside the callback. Either spawning a thread from the callback or notifying another thread that is allowed to sleep.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzExNjcxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/234,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzUwNTAzOQ==,paho.mqtt.python,333505039,234,NA,dirkjanfaber,3098947,Dirk-Jan Faber,,NA,2017-10-02T11:11:41Z,2017-10-02T11:11:41Z,"I did not know that, thank you. I've rewritten the code to send messages out side of the callback using a global, which works as expected. Though I am not thrilled about using globals. 

One other thing I noticed, but which is obviously logical, is that the `client_id` needs to be unique. 

For reference, the complete working script is now:

```
#!/usr/bin/python3

import paho.mqtt.client as mqtt 
import time
import datetime
import os
import socket

def on_log(client, userdata, level, buf):
    print(datetime.datetime.now(), buf)

def on_message(client, userdata, message):
    global publish
    print(""message received "" ,str(message.payload.decode(""utf-8"")))
    print(""message topic="",message.topic)
    print(""message qos="",message.qos)
    print(""message retain flag="",message.retain)
    publish = 1

broker_address=""localhost"" 
hostname = socket.gethostname()
client = mqtt.Client( client_id = hostname + str(os.getpid()) )
client.connect(broker_address)
client.on_log=on_log

client.on_message=on_message
client.loop_start();
client.subscribe( ""tasks/"" + hostname ); 
publish = 0

try:
    while True:
        if publish == 1:
            print(""time to start testing"")
            client.publish(""received"", ""A"")
            time.sleep(5)
            client.publish(""received"", ""B"")
            publish = 0

except KeyboardInterrupt:
    print('\n\rkeyboard interrupt')

client.loop_stop();
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzMzUwNTAzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/236,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/236,paho.mqtt.python,264633275,236,Callbacks from multi-threaded publishes could get lost because message id generation is not locked.,anschweitzer,1356409,Andrew Schweitzer,anschweitzer@gmail.com,CLOSED,2017-10-11T15:30:18Z,2022-06-16T19:17:47Z,"As far as I can tell, message id generation is not locked: paho.mqtt.client.Client._mid_generate() does not have locking, and the three calls to the function, in Client.publish(), and via Client.subscribe() and Client.unsubscribe() do not lock the calls. 

I believe the absence of locking means calls to those functions in separate threads could return multiple identical message ids, only one of which would get a callback. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/236/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/236,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FBlTn,paho.mqtt.python,1158042855,236,NA,anschweitzer,1356409,Andrew Schweitzer,anschweitzer@gmail.com,NA,2022-06-16T19:17:47Z,2022-06-16T19:17:47Z,Locking implemented in Fixed by 271726e0,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FBlTn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,paho.mqtt.python,264818111,237,__dict__ function addition in paho client library,hmchaitra,31068040,,,CLOSED,2017-10-12T05:28:00Z,2021-07-22T22:13:16Z,"in paho client __dict__ fuction is not defined, if a nonzero clientid is given the the server has to assign a new clienttid for client. how to get this client id value from client.
if __dict__ function is defined we can get a class instance variable(clientid is also a  instance vaiable of class Client)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA1MzUxOQ==,paho.mqtt.python,336053519,237,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-12T08:08:25Z,2017-10-12T08:08:25Z,"Hi,
I don't understand your issue. If a non-zero client id is given... it's that client-id that must be used by both client and server.
Or you wanted to said ""if a ZERO [length] clientid is given, the server has to assign a new clientid"", and then want to retrieve this client id, then this is not possible. The server don't send the server-side generated clientid so paho never get it.
Finally if you want to get the client id in the case when you provided a zero length clientid and the paho library generated the client id (e.g. if using MQTT 3.1 - not 3.1.1 - or if broker don't support server-side generated clientid), then I would argue that you should not provide a zero length clientid.

If knowing the clientid is important to you, why don't you provide the clientid when creating client ? Could you provide a rational on why doing so is not adapted to your situation ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA1MzUxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA2MTgxNQ==,paho.mqtt.python,336061815,237,NA,hmchaitra,31068040,,,NA,2017-10-12T08:41:57Z,2017-10-12T08:41:57Z,"Hi,
I want to test a scenario wherin from client zero-byte clientid is provided and the server allocates a clientid for such special case,so i thaught when server assign  a clientid  the id gets updated at the paho client instance variable  will that happen or not??","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA2MTgxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA2OTY3Mg==,paho.mqtt.python,336069672,237,NA,PierreF,359833,Pierre Fersing,,NA,2017-10-12T09:12:35Z,2017-10-12T09:12:35Z,"No, if the server generate the clientid then it is not send to client.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA2OTY3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA3NTEwOA==,paho.mqtt.python,336075108,237,NA,hmchaitra,31068040,,,NA,2017-10-12T09:33:49Z,2017-10-12T09:33:49Z,"thank you for your time.
Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjA3NTEwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/237,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xCVC,paho.mqtt.python,885269826,237,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:13:16Z,2021-07-22T22:13:16Z,"I'm closing this because it is solved, but as a note MQTT v5 does allow clients to find out their server assigned client ids.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xCVC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,paho.mqtt.python,265064525,238,Unable to make 340 connections ,liquidharmonic,5757521,,,OPEN,2017-10-12T19:52:02Z,2023-12-07T03:00:17Z,"Hi Everyone,

I've been hitting my head against the wall because I can't make more than 340 connections to a local vernemq server and I have no idea why. I created a simple script to to try to make 350 connections but CONNACKs are not received after the first 340 connections are made. 
I have not received the connection limit on my local machine because if I run two instance a total of 680 (340 x 2) connections are established.

Is anyone aware of this bizarre limit ?

PS. My goal is to use this client with locustio for load testing. 

My setup
- python 3.6.0
- maximum number of file descriptors, 65536
- local vernemq allows anonymous connections
- vernemq has all other defaults enabled

_test_paho.py_
```
import paho.mqtt.client as mqtt
import threading

connect_count = 0
lock = threading.Lock()
def locust_on_connect(client, flags_dict, userdata, rc):
	global lock
	global connect_count
	print(f""client: {client} connected, rc: {rc}"")
	lock.acquire()
	connect_count += 1
	print(f""connect_count: {connect_count}"")
	lock.release()

def locust_on_subscribe(client, userdata, mid, granted_qos):
	print(f""client: {client} subscribed, mid: {mid}"")	

def log(client, userdata, level, buf):
	print(f""[paho-log][client: {client}] {buf}"")

for x in range(0, 350):
	client = mqtt.Client(transport=""websockets"")

	host = localhost #<local server>
	port = 8888 #<websocket port> 

	client.on_connect = locust_on_connect
	client.connect_async(host, port)
	client.loop_start()

	client.subscribe(""/topic"", 1)


input(""type enter to end"")
```

_last few lines of output_
```
connect_count: 339
connect_count: 340
```

Any help is greatly appreicated.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MDIwOQ==,paho.mqtt.python,336370209,238,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-13T07:13:04Z,2017-10-13T07:13:04Z,"I think duplicate of #183.

Each mqtt client means 3 open file descriptors: one to the mqtt server, and a pair of sockets connected to each other.
3 * 340 = 1020. And there you hit the 1024 limit of select.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjM3MDIwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjU2MDM1MQ==,paho.mqtt.python,336560351,238,NA,liquidharmonic,5757521,,,NA,2017-10-13T20:33:53Z,2017-10-13T20:33:53Z,"Thanks @joernheissler. You are right. It is due to python being compiled with FD_SETSIZE=1024. 
I've tried recompiling python 3.6.3 with `/usr/include/sys/_types/_fd_setsize.h` setting FD_SETSIZE=2048 with no luck.
Was anyone successful in increasing the FD_SETSIZE when building their own python?
Or has anyone forked a copy of paho-mqtt with `poll()` instead of `select()`?

I've been using the following script to test `select()`
```
from socket import *
from select import select
s = [socket(AF_INET, SOCK_DGRAM) for i in range(2048)]
select(s, [], [], 1)
```

My setup:
- macbook pro 2017, macOS siera 10.12.6","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjU2MDM1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjYyMjQ5MQ==,paho.mqtt.python,336622491,238,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-14T09:18:27Z,2017-10-14T09:18:27Z,"I'm using asyncio. I didn't try with more than 1 connection, but I don't see why it shouldn't work.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjYyMjQ5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzMyMjYxMw==,paho.mqtt.python,337322613,238,NA,Cameron-Rowshanbin-ConnectedLab,32167851,Cameron Rowshanbin,,NA,2017-10-17T18:22:05Z,2017-10-17T18:22:05Z,"I've been looking at this issue as well, and it seems like if it is FD_SETSIZE that's limiting us, it's not obvious how. Using `lsof -a -p <pid>` while the script is running shows that we're able to open more than 1024 file descriptors.. the issue is that after 340 connections, the file descriptors to the mqtt server become closed. This is both with the default paho client as well as the one off your branch using asyncio. Definitely strange, not sure where to look next","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzMyMjYxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzM0MjkyOA==,paho.mqtt.python,337342928,238,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-17T19:25:50Z,2017-10-17T19:25:50Z,"> it seems like if it is FD_SETSIZE that's limiting us, it's not obvious how.

It's in the select manpage. select doesn't like larger FDs. I looked at the kernel code too, but there it wasn't obvious to me if it's purely a userspace limitation or kernel too.
""select() can monitor only file descriptors numbers that are less than FD_SETSIZE""

> after 340 connections, the file descriptors to the mqtt server become closed. This is both with the default paho client as well as the one off your branch using asyncio.

You're saying that with asyncio this still happens? I haven't tried yet, but I really doubt it. I would be really surprised if it were happening.

> not sure where to look next

strace should prove really helpful here.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzM0MjkyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzM4MTY1NQ==,paho.mqtt.python,337381655,238,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-17T21:43:59Z,2017-10-17T21:43:59Z,"So I wrote a program which opens 1500 useless file descriptors and then 1 mqtt connection, with asyncio. Works as expected.

Got code which won't work for you?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzM4MTY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzQwODAzMQ==,paho.mqtt.python,337408031,238,NA,Cameron-Rowshanbin-ConnectedLab,32167851,Cameron Rowshanbin,,NA,2017-10-17T23:28:47Z,2017-10-17T23:28:47Z,"Hi! Just got it working on our end, I think I had basically made a silly mistake and kept calling start_loop() in the client which ended up using select anyways. We're able to open over 340 connections (seems to hang at around 1000 connections, looking at why for that), and we're now just familiarizing ourselves enough with asyncio to fine-tune how we spin up our workers.

Our code now basically looks like your example [here](https://github.com/joernheissler/paho.mqtt.python/blob/improve-external-event-loops/examples/loop_asyncio.py), except we've put 'main' in a loop to spin up hundreds of workers. We're even directly using your AsyncioHelper class.

Thanks so much for your help!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzQwODAzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzczNDM5OQ==,paho.mqtt.python,347734399,238,NA,kellycampbell,625998,Kelly Campbell,,NA,2017-11-29T02:39:22Z,2017-11-29T02:39:22Z,"We ran into this while doing some performance testing too. I have a patch which substitutes eventfd instead of select. I haven't tested on anything except linux though.

https://github.com/kellycampbell/paho.mqtt.python/commit/f23831ee365278052a3a4bd07a6851207f25a2e3","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzczNDM5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Nzc3NzQzNA==,paho.mqtt.python,347777434,238,NA,joernheissler,865592,Jörn Heissler,,NA,2017-11-29T07:38:35Z,2017-11-29T07:38:35Z,I think eventfd is a linux-only feature.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0Nzc3NzQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDUwMzU4Ng==,paho.mqtt.python,470503586,238,NA,susfly,5871079,,,NA,2019-03-07T12:15:30Z,2019-03-07T12:15:30Z,hitting the same problem... any news?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDUwMzU4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDU1NDY4Nw==,paho.mqtt.python,470554687,238,NA,Scott-Wallace-ConnectedLab,32167848,Scott Wallace,,NA,2019-03-07T14:49:43Z,2019-03-07T14:49:43Z,"What worked for us was 2 things.
1. Changing file descriptors for the system, see: https://www.cyberciti.biz/faq/linux-increase-the-maximum-number-of-open-files/
2. Increasing the `FD_SETSIZE` in `/usr/include/sys/select.h, /usr/include/bits/typesizes.h, /usr/include/linux/posix_types.h` and then recompiling python (this is because the `select()` call that python uses while setting up the connections uses this hardcoded value).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDU1NDY4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDcyNzU4Mg==,paho.mqtt.python,470727582,238,NA,kellycampbell,625998,Kelly Campbell,,NA,2019-03-07T22:40:20Z,2019-03-07T22:40:20Z,"@susfly the solution I posted in the comment from Nov 28, 2017 is what worked for us.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDcyNzU4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDc4NDcyMw==,paho.mqtt.python,470784723,238,NA,susfly,5871079,,,NA,2019-03-08T02:50:25Z,2019-03-08T02:50:25Z,"We can use multiprocessing instead. Each process 340 connects. And it works well.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDc4NDcyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE1MTkzNQ==,paho.mqtt.python,656151935,238,NA,fjpa121197,43655840,,,NA,2020-07-09T14:12:28Z,2020-07-09T14:12:28Z,"Hi, can you show me an example of using multiprocessing and threading? Im trying to simulate a high number of devices sending data, im using paho-mqtt. However, I cannot manage to connect 1,000 devices (my goal is to go up to 10K devices). 

```
import paho.mqtt.client as mqtt
import time
import threading
import logging
import thingsboard_objects as Things
import random
import datetime
logging.basicConfig(level=logging.INFO)


init_time = time.time()


def Connect(client, broker, port, token, keepalive, run_forever=False):
    connflag = False
    delay = 5
    print(""connecting "",client)
    badcount = 0  # counter for bad connection attempts
    while not connflag:
        print(logging.info(""connecting to broker "" + str(broker)))
        # print(""connecting to broker ""+str(broker)+"":""+str(port))
        print(""Attempts "", str(badcount))
        time.sleep(2)
        try:
            client.username_pw_set(token)
            client.connect(broker, port, keepalive)
            connflag = True

        except:
            client.badconnection_flag = True
            logging.info(""connection failed "" + str(badcount))
            badcount += 1
            if badcount >= 3 and not run_forever:
                return -1
                raise SystemExit  # give up

    return 0


def wait_for(client, msgType, period=1, wait_time=20, running_loop=False):
    """"""Will wait for a particular event gives up after period*wait_time, Default=10
seconds.Returns True if succesful False if fails""""""
    # running loop is true when using loop_start or loop_forever
    client.running_loop = running_loop  #
    wcount = 0
    while True:
        logging.info(""waiting"" + msgType)
        if msgType == ""CONNACK"":
            if client.on_connect:
                if client.connected_flag:
                    return True
                if client.bad_connection_flag:  #
                    return False

        if msgType == ""SUBACK"":
            if client.on_subscribe:
                if client.suback_flag:
                    return True
        if msgType == ""MESSAGE"":
            if client.on_message:
                if client.message_received_flag:
                    return True
        if msgType == ""PUBACK"":
            if client.on_publish:
                if client.puback_flag:
                    return True

        if not client.running_loop:
            client.loop(.01)  # check for messages manually
        time.sleep(period)
        wcount += 1
        if wcount > wait_time:
            print(""return from wait loop taken too long"")
            return False
    return True


def client_loop(client, broker, port, token, keepalive=300, loop_function=None,
                loop_delay=10, run_forever=False):
    """"""runs a loop that will auto reconnect and subscribe to topics
    pass topics as a list of tuples. You can pass a function to be
    called at set intervals determined by the loop_delay
    """"""
    client.run_flag = True
    client.broker = broker
    print(""running loop "")
    client.reconnect_delay_set(min_delay=1, max_delay=12)

    while client.run_flag:  # loop forever

        if client.bad_connection_flag:
            break
        if not client.connected_flag:
            print(""Connecting to "" + broker)
            if Connect(client, broker, port, token, keepalive, run_forever) != -1:
                if not wait_for(client, ""CONNACK""):
                    client.run_flag = False  # break no connack
            else:  # connect fails
                client.run_flag = False  # break
                print(""quitting loop for  broker "", broker)

        client.loop(0.01)

        if client.connected_flag and loop_function:  # function to call
            loop_function(client, loop_delay)  # call function

    time.sleep(1)
    print(""disconnecting from"", broker)
    if client.connected_flag:
        client.disconnect()
        client.connected_flag = False


def on_log(client, userdata, level, buf):
    print(buf)


#def on_message(client, userdata, message):
#    time.sleep(1)
#    print(""message received"", str(message.payload.decode(""utf-8"")))


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag = True  # set flag
        for c in clients:
            if client == c[""client""]:
                if c[""sub_topic""] != """":
                    client.subscribe(c[""sub_topic""])

                    print(""connected OK"")
    else:
        print(""Bad connection Returned code="", rc)
        client.loop_stop()


def on_disconnect(client, userdata, rc):
    client.connected_flag = False  # set flag
    # print(""client disconnected ok"")


def on_publish(client, userdata, mid):
    print(""In on_pub callback mid= "", mid)


def pub(client, loop_delay):

    rmd_current = round(random.uniform(0.6, 50.0), 2)
    rmd_pressure = round(random.uniform(0.6, 50.0), 2)
    global init_time
    if time.time() - init_time >= 3600:
        rmd_mnc = round(random.uniform(5.0, 30.0), 2)
        rmd_sdc = round(random.random(), 2)
        rmd_mnp = round(random.uniform(5.0, 30.0), 2)
        rmd_sdp = round(random.random(), 2)

        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
        client.publish('v1/devices/me/telemetry',
                       '{""MnC"": ""%s"", ""SdC"": ""%s"", ""Str"": ""2554"",""Stp"": ""2554"", '
                       '""MnP"": ""%s"", ""SdP"": ""%s""}' % (rmd_mnc, rmd_sdc, rmd_mnp, rmd_sdp))

        init_time = time.time()
    else:
        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
    print(datetime.datetime.now())
    time.sleep(loop_delay)
    pass


def Create_connections():
    for i in range(n_clients):
        cname = ""client"" + str(i)
        t = int(time.time())
        client_id = cname + str(t)  # create unique client_id
        client = mqtt.Client(client_id)  # create new instance
        clients[i][""client""] = client
        clients[i][""client_id""] = client_id
        clients[i][""cname""] = cname
        broker = clients[i][""broker""]
        port = clients[i][""port""]
        token = clients[i][""token""]
        client.on_connect = on_connect
        client.on_disconnect = on_disconnect
        client.on_publish = on_publish
        #client.on_message = on_message
        t = threading.Thread(target=client_loop, args=(client, broker, port, token, 300, pub))
        threads.append(t)
        t.start()


if __name__ == '__main__':

    things_location = input(""What type of thingsboard installation are you working with (demo/local)? "")

    if things_location == ""local"":
        type_install = 'cseetprj03.essex.ac.uk:8080'
        broker = 'cseetprj03.essex.ac.uk'
    else:
        type_install = broker = 'demo.thingsboard.io'

    header = Things.get_credentials(things_location)
    my_devices = Things.get_devices_id(header, type_install)

    clients = []
    for device in my_devices:
        device_info = {""broker"": broker, ""port"": 1883, ""name"": device[""name""],
                       ""token"": Things.get_device_token(device[""id""][""id""], header, type_install)}
        clients.append(device_info)

    n_clients = len(clients)
    mqtt.Client.connected_flag = False  # create flag in class
    mqtt.Client.bad_connection_flag = False  # create flag in class

    threads = []
    print(""Creating Connections "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""Publishing "")
    Create_connections()

    print(""All clients connected "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""starting main loop"")
    try:
        while no_threads == 1001:
            time.sleep(10)
            no_threads = threading.active_count()
            print(""current threads ="", no_threads)
            for c in clients:
                if not c[""client""].connected_flag:
                    print(""broker "", c[""broker""], "" is disconnected"")

    except KeyboardInterrupt:
        print(""ending"")
        for c in clients:
            c[""client""].run_flag = False
    time.sleep(10)

```

That is my code. Is multiprocessing needed for this, or what can I change to be able to scale the sending of data up to 10K connections?

Thanks in advance","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE1MTkzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE4MTQxNw==,paho.mqtt.python,656181417,238,NA,fjpa121197,43655840,,,NA,2020-07-09T15:02:57Z,2020-07-09T15:02:57Z,"> We can use multiprocessing instead. Each process 340 connects. And it works well.

Hi, can you share your solution? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE4MTQxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzg5NDc2Nw==,paho.mqtt.python,657894767,238,NA,susfly,5871079,,,NA,2020-07-14T00:18:10Z,2020-07-14T00:18:10Z,"```
import multiprocessing
p = multiprocessing.Process(target=yourthreadscreateandstartfunc)

def yourthreadscreateandstartfunc:
    for loop
       create thread
       start thread

```

 each process should less than 340 threads


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1Nzg5NDc2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODEwMDQxMg==,paho.mqtt.python,658100412,238,NA,fjpa121197,43655840,,,NA,2020-07-14T10:21:56Z,2020-07-14T10:21:56Z,"> ```
> import multiprocessing
> p = multiprocessing.Process(target=yourthreadscreateandstartfunc)
> 
> def yourthreadscreateandstartfunc:
>     for loop
>        create thread
>        start thread
> ```
> 
> each process should less than 340 threads

Hi,

Sorry for asking again, but I can manage to start the second process with the second portion of my clients.
```
import multiprocessing
import paho.mqtt.client as mqtt
import time
import threading
import logging
import math
import thingsboard_objects as Things
import random
import datetime
import numpy as np
logging.basicConfig(level=logging.INFO)

init_time = time.time()

def Connect(client, broker, port, token, keepalive, run_forever=False):
    connflag = False
    delay = 5
    print(""connecting "",client)
    badcount = 0  # counter for bad connection attempts
    while not connflag:
        print(logging.info(""connecting to broker "" + str(broker)))
        # print(""connecting to broker ""+str(broker)+"":""+str(port))
        print(""Attempts "", str(badcount))
        time.sleep(2)
        try:
            client.username_pw_set(token)
            client.connect(broker, port, keepalive)
            connflag = True

        except:
            client.badconnection_flag = True
            logging.info(""connection failed "" + str(badcount))
            badcount += 1
            if badcount >= 3 and not run_forever:
                return -1
                raise SystemExit  # give up

    return 0


def wait_for(client, msgType, period=1, wait_time=15, running_loop=False):
    """"""Will wait for a particular event gives up after period*wait_time, Default=10
seconds.Returns True if succesful False if fails""""""
    # running loop is true when using loop_start or loop_forever
    client.running_loop = running_loop  #
    wcount = 0
    while True:
        logging.info(""waiting"" + msgType)
        if msgType == ""CONNACK"":
            if client.on_connect:
                if client.connected_flag:
                    return True
                if client.bad_connection_flag:  #
                    return False

        if msgType == ""SUBACK"":
            if client.on_subscribe:
                if client.suback_flag:
                    return True
        if msgType == ""MESSAGE"":
            if client.on_message:
                if client.message_received_flag:
                    return True
        if msgType == ""PUBACK"":
            if client.on_publish:
                if client.puback_flag:
                    return True

        if not client.running_loop:
            client.loop(.01)  # check for messages manually
        time.sleep(period)
        wcount += 1
        if wcount > wait_time:
            print(""return from wait loop taken too long"")
            return False
    return True


def client_loop(client, broker, port, token, keepalive=600, loop_function=None,
                loop_delay=10, run_forever=False):
    """"""runs a loop that will auto reconnect and subscribe to topics
    pass topics as a list of tuples. You can pass a function to be
    called at set intervals determined by the loop_delay
    """"""
    client.run_flag = True
    client.broker = broker
    print(""running loop "")
    client.reconnect_delay_set(min_delay=1, max_delay=12)

    while client.run_flag:  # loop forever

        if client.bad_connection_flag:
            break
        if not client.connected_flag:
            print(""Connecting to "" + broker)
            if Connect(client, broker, port, token, keepalive, run_forever) != -1:
                if not wait_for(client, ""CONNACK""):
                    client.run_flag = True  # break no connack
            else:  # connect fails
                client.run_flag = False  # break
                print(""quitting loop for  broker "", broker)

        client.loop(0.01)

        if client.connected_flag and loop_function:  # function to call
            loop_function(client, loop_delay)  # call function

    time.sleep(1)
    print(""disconnecting from"", broker)
    if client.connected_flag:
        client.disconnect()
        client.connected_flag = False


def on_log(client, userdata, level, buf):
    print(buf)


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag = True  # set flag
        for c in clients:
          print(""connected OK"")
    else:
        print(""Bad connection Returned code="", rc)
        client.loop_stop()


def on_disconnect(client, userdata, rc):
    client.connected_flag = False  # set flag
    # print(""client disconnected ok"")


def on_publish(client, userdata, mid):
    print(""In on_pub callback mid= "", mid)

def pub(client, loop_delay):

    rmd_current = round(random.uniform(0.6, 50.0), 2)
    rmd_pressure = round(random.uniform(0.6, 50.0), 2)
    global init_time
    if time.time() - init_time >= 3600:
        rmd_mnc = round(random.uniform(5.0, 30.0), 2)
        rmd_sdc = round(random.random(), 2)
        rmd_mnp = round(random.uniform(5.0, 30.0), 2)
        rmd_sdp = round(random.random(), 2)

        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
        client.publish('v1/devices/me/telemetry',
                       '{""MnC"": ""%s"", ""SdC"": ""%s"", ""Str"": ""2554"",""Stp"": ""2554"", '
                       '""MnP"": ""%s"", ""SdP"": ""%s""}' % (rmd_mnc, rmd_sdc, rmd_mnp, rmd_sdp))

        init_time = time.time()
    else:
        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
    print(datetime.datetime.now())
    time.sleep(loop_delay)

def Create_connections(n_clients, threads):
    for i in range(len(n_clients)):
        cname = ""client"" + n_clients[i][""name""]
        t = int(time.time())
        client_id = cname + str(t)  # create unique client_id
        client = mqtt.Client(client_id)  # create new instance
        clients[i][""client""] = client
        clients[i][""client_id""] = client_id
        clients[i][""cname""] = cname
        broker_p = clients[i][""broker""]
        port = clients[i][""port""]
        token = clients[i][""token""]
        client.on_connect = on_connect
        client.on_disconnect = on_disconnect
        client.on_publish = on_publish
        #client.on_message = on_message
        t = threading.Thread(target=client_loop, args=(client, broker_p, port, token, 600, pub))
        threads.append(t)
        t.start()

def main_loop(clients_loop):

    mqtt.Client.connected_flag = False  # create flag in class
    mqtt.Client.bad_connection_flag = False  # create flag in class

    threads = []
    print(""Creating Connections "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""Publishing "")
    Create_connections(clients_loop, threads)

    print(""All clients connected "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""starting main loop"")
    try:
        while True:
            time.sleep(10)
            no_threads = threading.active_count()
            print(""current threads ="", no_threads)
            for c in clients_loop:
                if not c[""client""].connected_flag:
                    print(""broker "", c[""broker""], "" is disconnected"" , c[""name""])
                    time.sleep(1)

    except KeyboardInterrupt:
        print(""ending"")
        for c in clients:
            c[""client""].run_flag = False
        
    time.sleep(10)

if __name__ == '__main__':

    # In case the user is using a demo version or local version of thingsboard
    things_location = input(""What type of thingsboard installation are you working with (demo/local)? "")

    if things_location == ""demo"":
        type_install = ""demo.thingsboard.io""
        header = Things.get_credentials(things_location)
    elif things_location == ""local"":
        computer = input(""Which computer? "")
        type_install = ""cseetprj%s.essex.ac.uk:8080"" % computer
        broker = ""cseetprj%s.essex.ac.uk"" % computer
        header = Things.get_credentials(""local"", type_install)
    else:
        print(""Error: Installation not supported"")

    my_devices = Things.get_devices_id(header, type_install)

    clients = []
    for device in my_devices:
        device_info = {""broker"": broker, ""port"": 1883, ""name"": device[""name""],
                       ""token"": Things.get_device_token(device[""id""][""id""], header, type_install)}
        clients.append(device_info)

    if len(clients) >= 200:
        print(""Splitting devices to multiprocess"")
        split_by = math.ceil(len(clients) / 250)
        split_clients = np.array_split(clients, split_by)

    jobs = []
    for idx, client_portion in enumerate(split_clients):
        print(""Starting process for portion %s"" % (idx + 1))
        p = multiprocessing.Process(target=main_loop, args = (client_portion,))
        jobs.append(p)
        p.start()
```

I cannot get past the create_connection part, all the clients connect but dont publish after it. I think is related to the order or possition of functions. But I dont why, any thoughts?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1ODEwMDQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MDQ3MjIxMQ==,paho.mqtt.python,660472211,238,NA,fjpa121197,43655840,,,NA,2020-07-18T11:55:52Z,2020-07-18T11:55:52Z,"> ```
> import multiprocessing
> p = multiprocessing.Process(target=yourthreadscreateandstartfunc)
> 
> def yourthreadscreateandstartfunc:
>     for loop
>        create thread
>        start thread
> ```
> 
> each process should less than 340 threads

Hi, how many connections were able to make for each process? And did you change any configuration in the machine that recieve the connections?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MDQ3MjIxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/238,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTU3MzY4Ng==,paho.mqtt.python,729573686,238,NA,yxlwfds,2525362,Pike,,NA,2020-11-18T10:06:29Z,2020-11-18T10:06:29Z,may be your server limit,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTU3MzY4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,paho.mqtt.python,265663986,239,payload of publish packet  is  UTF-8 encoded??,hmchaitra,31068040,,,CLOSED,2017-10-16T06:56:47Z,2017-12-10T18:28:27Z,"Hi,
i am sending a PUBLISH packet with payload ""abc\0"". the server is accepting this payload, if anyting  UTF-8 encoding NULL is sent the server MUST disconnect client.is payload not UTF-8 encoded??in specification its mentioned all strings are UTF-8 encoded.

if i send PUBLISH with topic ""abc\0"" it will disconnect client as UTF-8 cannot have null encodings.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgwMTE0MA==,paho.mqtt.python,336801140,239,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-16T07:20:57Z,2017-10-16T07:20:57Z,"Publish payload has no encoding, it's bytes. Not strings, not UTF-8. Bytes. Therefore ""\x00"" is acceptable.

""\x00"" is also valid UTF-8. Non-Valid UTF-8 would e.g. be '\xFF'.
But MQTT specifies in Section 1.5.3 that the null character is invalid.

I see no issue here.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgwMTE0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgwNTAxMA==,paho.mqtt.python,336805010,239,NA,hmchaitra,31068040,,,NA,2017-10-16T07:39:23Z,2017-10-16T07:39:23Z,"MQTT-1.5.3-2 this says no null encodings are allowed, then why do topic name with null encoding leads to rejection?? Text fields in the Control Packets described later are encoded as UTF-8 strings section 1.5.3 the payload is also a text field so it should be UTF-8 encoding???","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgwNTAxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgxMDY1Mw==,paho.mqtt.python,336810653,239,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-16T08:04:08Z,2017-10-16T08:04:08Z,"> MQTT-1.5.3-2 this says no null encodings are allowed, then why do topic name with null encoding leads to rejection??

Because ""MQTT-1.5.3-2 […] says no null encodings are allowed"".

> the payload is also a text field

The payload of PUBLISH is not a text field. See section 3.3.3","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgxMDY1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/239,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgyMDUwMA==,paho.mqtt.python,336820500,239,NA,hmchaitra,31068040,,,NA,2017-10-16T08:45:09Z,2017-10-16T08:45:09Z,thank you...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNjgyMDUwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,paho.mqtt.python,266524442,240,How to get access to MQTT Client attribute on callback functions that returns the current subscribed topics?,Pacheco95,12385467,Michael Pacheco,mdpgd95@gmail.com,CLOSED,2017-10-18T14:54:50Z,2023-12-23T22:57:23Z,"I'm trying to print log messages on callback functions and I need access to some attributes from Client instance.

Example:

```
def on_subscribe(mqttc, userdata, mid, granted_qos):
    print(""Client"", mqtt.clientID, ""sucessfuly subscribed on topics:"", mqtt.topics)
```

How can I get access to these attributes?

Thank you!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzYyMDYzOA==,paho.mqtt.python,337620638,240,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-18T15:00:03Z,2017-10-18T15:00:03Z,"When you invoke subscribe, you pass the topic and get a mid in return. Remember it.
The library won't remember your topics.

The client_id is what you pass on the constructor; this, the lib remembers as _client_id (have a look at the source code!). But it's a private attribute, so you should either add a property to the lib to retrieve it. Or remember it too.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzYyMDYzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzYyMzY4NQ==,paho.mqtt.python,337623685,240,NA,Pacheco95,12385467,Michael Pacheco,mdpgd95@gmail.com,NA,2017-10-18T15:09:12Z,2017-10-18T15:09:12Z,"I thought about using private client data to retrieve all this fields, but it looks a bad choice.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzNzYyMzY4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2Nzk2MA==,paho.mqtt.python,350567960,240,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-10T18:27:05Z,2017-12-10T18:27:05Z,"There is an issue with client ID. It is possible to not known the value at all. See #237.
About the topic itself, as @joernheissler said, the solution is the keep the mid value when calling subscribe() and matching it in on_subscribe callback. Paho don't keep the value of the topic name.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2Nzk2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/240,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUl0,paho.mqtt.python,1868384628,240,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:57:23Z,2023-12-23T22:57:23Z,Closing as it looks like an answer was provided (and the issue has been inactive for some time).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUl0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/241,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/241,paho.mqtt.python,267409023,241,Behaviour of the library in case same topic is subscribed with different QoS Level?,KohliDev,5468034,Vaibhav Kohli,vaibhavkhl@yahoo.co.in,CLOSED,2017-10-21T19:48:20Z,2023-12-07T21:42:20Z,"Would like to understand the behavior of the library if the same topic is subscribed with different QoS level? Will I be subscribed to the same topic (with different QoS Level & Callback) twice or once? If it once will it be the last subscription call and if it is twice then how does unsubscription works without QoS parameter?

```
Subscribe(foo, qos=1, myCallback)
Subscribe(foo, qos=0, myOtherCallback)
Unsubscribe(foo)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/241/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/241,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzODQyODU4OA==,paho.mqtt.python,338428588,241,NA,joernheissler,865592,Jörn Heissler,,NA,2017-10-21T20:01:36Z,2017-10-21T20:01:36Z,"Did you check the mqtt specs?
And what library are you using? I'm not aware of a ""Subscribe"" method.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDMzODQyODU4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/241,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uChet,paho.mqtt.python,1846155181,241,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:42:20Z,2023-12-07T21:42:20Z,"From section 3.8.4 of the spec:

>If a Server receives a SUBSCRIBE Packet containing a Topic Filter that is identical to an existing Subscription’s Topic Filter then it MUST completely replace that existing Subscription with a new Subscription. 

Closing this due to inactivity (and because I suspect the above answers the question).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uChet/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/242,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/242,paho.mqtt.python,270803592,242,Client.subscribe() does not validate success/failure of actual call,jeremylink,5658647,,,CLOSED,2017-11-02T20:52:37Z,2017-11-03T16:41:27Z,"If the subscribe call fails (not authorized or ACL rejection), the client does not detect this and always reports the subscription as being successful.

It looks like the only error/failure checking has to do with:
- verifies connectivity to the broker
- verifies the arguments passed to the function are valid","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/242/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/242,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTYzMDQzNA==,paho.mqtt.python,341630434,242,NA,joernheissler,865592,Jörn Heissler,,NA,2017-11-03T06:32:47Z,2017-11-03T06:32:47Z,Did you have a look at the on_subscribe callback? What do you get in granted_qos when the broker rejected your request?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTYzMDQzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/242,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTc1OTU2Nw==,paho.mqtt.python,341759567,242,NA,jeremylink,5658647,,,NA,2017-11-03T16:41:26Z,2017-11-03T16:41:26Z,"You're absolutely correct - the on_subscribe callback does return QoS of 128.

I was used to getting the QoS of 128 immediately with the Java client and didn't realize I was getting that in the on_callback.

Thanks for the response.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTc1OTU2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,paho.mqtt.python,270833043,243,Connect to client via WebSockets,vascodmendes,16965679,,,CLOSED,2017-11-02T22:52:40Z,2023-12-07T21:22:35Z,"Hi,
I am having problems connecting to a client via WebSockets.

I am able to do it via mosquitto_pub, however i cannot do it using the paho pyhon.
For instance, this command line code works fine, and the message is sent:
`mosquitto_pub -p 9001 -t TestTopic -m TestMessage`

However doing the same thing using paho python script i get an error:
`import paho.mqtt.publish as publish
publish.single(topic = ""TestTopic"",payload=""TestMessage"",port=9001,transport=""websockets"")`

The issued exception is:
```
Traceback (most recent call last):
  File ""MQTT_Example.py"", line 2, in <module>
    publish.single(topic = ""TestTopic"",payload=""TestMessage"",port=9001,transport=""websockets"")
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/publish.py"", line 216, in single
    protocol, transport)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/publish.py"", line 152, in multiple
    client.connect(hostname, port, keepalive)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 935, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2706, in __init__
    self._do_handshake(extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2748, in _do_handshake
    byte = self._socket.recv(1)
socket.error: [Errno 104] Connection reset by peer
```

In the Broker i get the following:
```
1509663006: New connection from ::1 on port 9001.
1509663006: Socket error on client <unknown>, disconnecting.

```
Have any idea of what it can be or how can i debug this problem?

Thank you,

Vasco Mendes","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk3NjU2Mg==,paho.mqtt.python,341976562,243,NA,PierreF,359833,Pierre Fersing,,NA,2017-11-05T14:20:09Z,2017-11-05T14:20:09Z,"Are you sure your server is a websocket one ? I don't think mosquitto_pub support WebSocket, which would means your server is using standard TCP.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTk3NjU2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjAxMDU2MA==,paho.mqtt.python,342010560,243,NA,vascodmendes,16965679,,,NA,2017-11-05T22:18:57Z,2017-11-05T22:18:57Z,"Hello,
I made some changes and now i am prety sure the broker is running websockets.

I was not sure before, but i made some tests and i can confirm that it is running on por 9001 webockets.
I know that because my javascript page is connecting using javascript.paho to connect to the broker via websockets, and it is working. I can publish and subscribe via paho.javascript to the mqtt broker.

However, when executing the code from my python script i get an error:

`Traceback (most recent call last):
  File ""simpleWebsockets.py"", line 31, in <module>
    client1.connect(broker,port)           #establish connection
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 935, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2706, in __init__
    self._do_handshake(extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2786, in _do_handshake
    raise WebsocketConnectionError(""WebSocket handshake error"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error
`

From the broker side, i get this error:

`1509919618: Socket error on client MQQTT_HomeClient, disconnecting.`
`1509919674: Socket error on client mosqsub|1252-pipplware, disconnecting.`

This is my python code:

```
import paho.mqtt.client as paho
import time
broker=""192.168.1.73"";
port = 9001
sub_topic='VMhouse/Hello'

def on_subscribe(client, userdata, mid, granted_qos):   #create function for callback
   print(""subscribed with qos"",granted_qos, ""\n"")
   pass
def on_message(client, userdata, message):
    print(""message received  ""  ,str(message.payload.decode(""utf-8"")))
def on_publish(client,userdata,mid):   #create function for callback
   print(""data published mid="",mid, ""\n"")
   pass
def on_disconnect(client, userdata, rc):
   print(""client disconnected ok"")

def on_connect(client, userdata, flags, rc):
   print(""Connection returned result: "")

client= paho.Client(""MQQTT_HomeClient"",transport='websockets')       #create client object
print(""created"")

client.on_subscribe = on_subscribe       #assign function to callback
client.on_publish = on_publish        #assign function to callback
client.on_message = on_message        #assign function to callback
client.on_disconnect = on_disconnect
client.on_connect = on_connect

client.connect(broker,port)           #establish connection

print(""-------------Connected--------"")

client.loop_start()

while 1:
        time.sleep(0.1)
```

Any idea?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjAxMDU2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjIyMDE1Mw==,paho.mqtt.python,342220153,243,NA,PierreF,359833,Pierre Fersing,,NA,2017-11-06T17:19:00Z,2017-11-06T17:19:00Z,"Is the TLS settings matching ?
Could you provide more details on the server (software version, configuration if possible).

Currently I can only reproduce this issue if i'm not talking to a plain-text websocket server.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MjIyMDE1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzIyNjkwOA==,paho.mqtt.python,377226908,243,NA,MoudhafferMG,17484494,Moudhaffer Azizi,,NA,2018-03-29T12:58:25Z,2018-03-29T12:58:25Z,"Hello !
I am having an issue with basic connection via websockets

`import paho.mqtt.client as paho`
`broker=""wss://iot.eclipse.org:443""`
`client = paho.Client(""client-001"")`
`client.connect(broker)`

This is the error message : 

Traceback (most recent call last):
  File ""temporary.py"", line 7, in <module>
    client.connect(broker)
  File ""C:\Users\MoudhafferMG\Anaconda3\lib\site-packages\paho\mqtt\client.py"",
line 768, in connect
    return self.reconnect()
  File ""C:\Users\MoudhafferMG\Anaconda3\lib\site-packages\paho\mqtt\client.py"",
line 895, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(se
lf._bind_address, 0))
  File ""C:\Users\MoudhafferMG\Anaconda3\lib\socket.py"", line 704, in create_conn
ection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
  File ""C:\Users\MoudhafferMG\Anaconda3\lib\socket.py"", line 745, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11001] getaddrinfo failed","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NzIyNjkwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzMzQyMQ==,paho.mqtt.python,381333421,243,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-14T14:35:43Z,2018-04-14T14:35:43Z,"@MoudhafferMG This is another isssue. Your problem is that connect expect an host, not an URL. You can't connect to MQTT over Websocket-tls like this. Please look at example like https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub-ws.py","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzMzQyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/243,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCb3z,paho.mqtt.python,1846132211,243,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:22:34Z,2023-12-07T21:22:34Z,I'm going to close this due to inactivity. If you are still experiencing the issue then please feel free to reopen (but please try to provide enough info for us to reproduce the issue). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCb3z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/244,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/244,paho.mqtt.python,270914124,244,logger issue,hmchaitra,31068040,,,CLOSED,2017-11-03T09:10:09Z,2017-11-03T09:29:33Z,"Hi,
as per the examples/logger.py script the same file i executed but i am unable to gets the logs???.
How to generate a log file from the enable_logger() function.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/244/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/244,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTY1MTgwMA==,paho.mqtt.python,341651800,244,NA,hmchaitra,31068040,,,NA,2017-11-03T09:12:00Z,2017-11-03T09:12:00Z,client_logger.py example given by nzbuu?? can you please help me out to generate a logs.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0MTY1MTgwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/245,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/245,paho.mqtt.python,271409268,245,Some clients keep reconnecting,knmr,8867038,,,CLOSED,2017-11-06T09:31:45Z,2017-12-11T10:13:14Z,"Im hosting an MQTT Broker in Microsoft Azure for a while. We are getting more and more clients. Recently some clients got stuck in a connection loop (while they were running fine before). After restarting them they run fine for a little and then go back to looping. Restarting the server does not change anything here. That's why I'm assuming it has something to do with the client. Another point worth noting is that the server reports the following events for the loop clients:

> client connected
closing client, reason: new connection request
closed
setting keepalive timeout
client connected


I added a piece of source and a wireshark capture of the reconnect issue.

`try:
	mqttc.connect(mqtt_url, 80, 60)
except:
	print(""connect exception"")

if __name__ == '__main__':
	_thread.start_new_thread(do_some_work, ())
	mqttc.loop_forever()`

![reconnect_flow](https://user-images.githubusercontent.com/8867038/32434173-9961f86e-c2dd-11e7-99f1-16927a846e7f.png)

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/245/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/245,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NjUzNA==,paho.mqtt.python,350566534,245,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-10T18:04:48Z,2017-12-10T18:04:48Z,"I'm not sure to understand what you means by reconnection loop.
Your wireshark capture seems to show ONE client reconnection. It this reconnection (with this delay of 90 seconds between connection/disconnect) happen in loop ?

Your wireshark capture & timing make me think to a keepalive issue. Since your client get disconnected after 90 seconds, which match a 60 seconds keepalive (usual default;  and MQTT protocol say that broker must disconnect client if it don't receive a packet within one and a half times the Keep Alive time period).

Your logs make me wonder if two clients are not using the same clientid (""closing client, reason: new connection request"").

Could you give more information about your setup: version of paho, broker used (mosquitto ?) and the keepalive value. Also are you fixing the clientid ? If yes, could you confirm not using the same clientid twice, as this will disconnect the other connection using the same clientid.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NjUzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/245,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDY3OTgyNA==,paho.mqtt.python,350679824,245,NA,knmr,8867038,,,NA,2017-12-11T10:13:07Z,2017-12-11T10:13:07Z,"I can give you that information, but we found the root of the issue. We had a memory leak on our client-side. That's why the connection attempt got cut off and retried the connection. We fixed the leak and added nightly reboot. Looping hasn't happened since.

We used random clientids prior to this issue. It's one of the reasons why we switched to fixed, We had problems identifying the clients.

Sorry for not updating this issue. It completely slipped my mind.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDY3OTgyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/246,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/246,paho.mqtt.python,271587602,246,The disconnect callback gets called twice if network connection fails,pezinek,4770925,Petr Zahradník,,CLOSED,2017-11-06T19:14:17Z,2023-12-07T21:43:48Z,"In paho-mqtt (1.3.1) the disconnect callback is called twice

how to reproduce:

```bash
 python << _PYTHON_CODE_
> import paho.mqtt.client as mqtt
> mqttc = mqtt.Client(protocol=mqtt.MQTTv311)
> mqttc.connect('mqtt.local')
> mqttc.loop_start()
> def f(*args):
>   print('on_disconnect: {0}'.format(args))
> 
> mqttc.on_disconnect=f
> print('Disconnect network cable now and wait')
> from time import sleep
> sleep(10000)
> _PYTHON_CODE_
Disconnect network cable now and wait
on_disconnect: (<paho.mqtt.client.Client object at 0x7f3315f4fdd8>, None, 1)
on_disconnect: (<paho.mqtt.client.Client object at 0x7f3315f4fdd8>, None, 1)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/246/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/246,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NTUzOA==,paho.mqtt.python,350565538,246,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-10T17:50:50Z,2017-12-10T17:50:50Z,"Is it an issue to get multiple on_disconnect called ?
Currently, on_disconnect is call on each reconnect retry, even if connection is not (fully) established.
For example if you server require authentication and you come without authentication, you get one on_disconnect per retry (without any on_connect).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NTUzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/246,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCh75,paho.mqtt.python,1846157049,246,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:43:48Z,2023-12-07T21:43:48Z,Closing this due to inactivity (and it appears the question was answered). Please reopen if you do not believe this is fixed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCh75/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/247,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/247,paho.mqtt.python,274229039,247,"Pub/Sub Samples with TLS, username, password etc. ",jonquark,1771856,Jon Levell,,CLOSED,2017-11-15T16:54:27Z,2017-12-10T16:47:31Z,"I'm thinking of writing (and contributing) samples that set up certs for TLS, support usernames/passwords, clientids (configured by parsing command line arguments to the sample).

Would such samples be welcome and if so, do you think I should extend client_sub.py or keep that as it is and add a client_sub_opts.py (which would take arguments for certs file, host, post, username)? 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/247/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/247,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDkyMzExMw==,paho.mqtt.python,344923113,247,NA,PierreF,359833,Pierre Fersing,,NA,2017-11-16T13:31:33Z,2017-11-16T13:31:33Z,"Yes, go ahead, we don't have yet example with TLS.

About creating a new client_sub_opts.py (maybe client_sub_tls ?) or updating client_sub.py, I would said it depend on complexity added.
I think it good to have a ""simple"" client_sub.py that is easy to understand. If adding option keep it simple enough it's probably better to keep number of example small and update client_sub.py","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NDkyMzExMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/247,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2MTQwMw==,paho.mqtt.python,350561403,247,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-10T16:47:31Z,2017-12-10T16:47:31Z,PR #252 merged,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2MTQwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,paho.mqtt.python,275498814,248,Websocket over TLS can't send message larger than 16384 bytes,calebhalvy,3345329,Caleb Halvorson,caleb.halvy@gmail.com,CLOSED,2017-11-20T21:05:58Z,2021-07-25T21:27:17Z,"I have tls set and am connecting using websockets to the broker, but can't send messages that are very large, i.e. > 16384(2^14) bytes. When I don't set connection as secure, the messages send. I get an errno 11 inside _buffered_read in client.py at 
` if len(data) < wanted_bytes:
        raise socket.error(errno.EAGAIN, 0)` ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzAwNjQ2Mg==,paho.mqtt.python,347006462,248,NA,PierreF,359833,Pierre Fersing,,NA,2017-11-26T12:50:24Z,2017-11-26T12:50:24Z,"I can't reproduce this issue. I'm able to send and receive message up to 1 Mb over TLS websocket.
Could you provide more information ? The full traceback will help.
More details on what you are doing may also help (I'm not sure to see why *sending* message cause an error on a *read* function), ideally a small example that exhibit this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzAwNjQ2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTIwNzQwNw==,paho.mqtt.python,361207407,248,NA,larshesel,679187,Lars Hesel Christensen,,NA,2018-01-29T10:45:55Z,2018-01-29T10:45:55Z,"Hi,

Not 100% sure this is related, but we had a similar issue (not using TLS though), but the problem was when the websocket payload encoding was between 32768  and 65535. This seems to be an issue here:

 https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2805-L2814

Particularly the `elif length < 32768` case as the spec states: `Note that in all cases, the minimal number of bytes MUST be used to encode the length` and as we can encode values up to 16 bits using the 7 bits (val 126) + 16 bit encoding we should use that instead of the 64 bit encoding to conform to the spec.

I'll create a PR for this case in a bit.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTIwNzQwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTM4NDYwMQ==,paho.mqtt.python,361384601,248,NA,PierreF,359833,Pierre Fersing,,NA,2018-01-29T21:00:12Z,2018-01-29T21:00:12Z,"Merged PR #267 which fix issue with some broken that follow Websocket standard :)
Some broker seems to accept that ""bad"" Websocket frame (Mosquitto seems to be in this case, I never had issue sending/receiving payload around 32k-65k.
@calebhalvy could you test with the latest fixes branch ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTM4NDYwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTQ5NzQ1Mw==,paho.mqtt.python,361497453,248,NA,larshesel,679187,Lars Hesel Christensen,,NA,2018-01-30T07:11:57Z,2018-01-30T07:11:57Z,"yeah, I could imagine most websocket server implementations would be lenient about this particular part of the spec. I experienced this problem using the websocket implementation in the Cowboy web-server which we use in VerneMQ. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTQ5NzQ1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/248,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4000F1,paho.mqtt.python,886260085,248,NA,ralight,79578,Roger Light,,NA,2021-07-25T21:27:17Z,2021-07-25T21:27:17Z,"I've not been able to reproduce the problem with the fix from #267, so I'm closing this. If it's still a problem, please reopen.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4000F1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,paho.mqtt.python,276468890,249,V1.3.1 crashing silently where 1.2 runs forever,MrBillium,14281367,,,CLOSED,2017-11-23T20:40:40Z,2023-12-07T21:20:30Z,"I have little hard data to report but here is what I do have:
After routine update of my libraries  my IOT device just quit working between 5 minutes and 6 hours after startup - at least 10 runs made. I  turned on debug logging everywhere but never saw any errors anywhere - app just quit working every time.
I then  tried python mtrace and did see that trace log always stopped at client.py line 1099.  I then rolled Paho back to V 1.2 ( no other changes) and everything is working reliably again.

I am running TLS with connect_async

Any ideas or pointers on how to instrument this to narrow  down?

Bill
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODkxNTEwMQ==,paho.mqtt.python,348915101,249,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-04T10:02:31Z,2017-12-04T10:02:31Z,"Hi,

thank for your patience. Could you provide a bit more information, esp. on how you publish message.
If you get stuck on line 1099 (with self._out_message_mutex), it seems you had a dead-lock where two thread are publishing a messages.
I'm interested on caller to publish(): do they run from one thread, multiple thread and/or from callbacks. And also if on your callback you are calling paho and/or taking a lock that might be hold by a publisher.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODkxNTEwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTAwNDUwMA==,paho.mqtt.python,349004500,249,NA,MrBillium,14281367,,,NA,2017-12-04T15:53:45Z,2017-12-04T15:53:45Z,"I agree this does smell like a dead-lock given that it always dies  but across a very wide range of time.
This code has been in the field for about a year and works well on 1.2

Lots going on in my code - here is an overview.

I have a ConnectionManager class that calls paho ( not inherited). As in self.pahoclient = MQC.Client()
I did it this way to have better support for srv records.
Once up, I have an ApScheduler job that fires every minute. I consider this  a callback on a new thread.
 In this job, if paho is Not connected then it runs  connectnext() which does the following:

with self.lock  
. Gets the next broker from my srv list - for both load balancing and to make we don't keep trying the first broker forever if it is refusing connections for some reason!
self. pahoclient.disconnect()
self.pahclient.reinitialize()
creates tlsclient
self.pahoclient.connect_async()
self.pahoclient.loop_start()

Note all of the above is wrapped  using 'with self.lock'

My main loop  calls publish  to data topic every x seconds. Simple publish call with  no lock
Logging system also publishes logs to a different topic upon generation using my custom MQTTLogHandler Again I assume that Python  logging is running its own thread. This code also does not lock.

I realize how hard it can be to diagnose such vague symptoms so please let me know if you have any ideas on how to instrument this better.

Thanks

Bill

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTAwNDUwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTcwNzQ5OQ==,paho.mqtt.python,349707499,249,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-06T17:07:44Z,2017-12-06T17:07:44Z,"Thanks for your detailed description.

Are you able to known if your are within your ApScheduler job when the dead-lock occur ? I'm thinking of some bad behavior when some function like disconnect()/reinitilize() and co are called concurrently with publish.
From your description, the dead-lock seems only ""internal"" of paho (e.g. does not involve an external lock). I'll try to find a way to reproduce this dead-lock.

It may help to reproduce this issue: you are stopping the loop somewhere ? If i understand well, your ApScheduler may call loop_start while the loop is already running (which will just return MQTT_ERR_INVAL and should works but that means - for reproducing the bug - that disconnect() and co may be called while the loop is busy). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTcwNzQ5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDQxMzk5MQ==,paho.mqtt.python,350413991,249,NA,MrBillium,14281367,,,NA,2017-12-09T01:41:03Z,2017-12-09T01:41:03Z,"I don’t know enough about ApScheduler to know if a repeating scheduled job is always running but it is what calls the connectnext.

 

There is a loop stop in there before restarting 

try:
    if self.pahoclient._state == 1:
        self.pahoclient.disconnect()
    self.pahoclient.loop_stop(force=True)
    self.pahoclient.reinitialise()
except:
    pass

 

 

Bill

 

 

From: Pierre Fersing [mailto:notifications@github.com] 
Sent: Wednesday, December 6, 2017 12:08 PM
To: eclipse/paho.mqtt.python <paho.mqtt.python@noreply.github.com>
Cc: MrBillium <bilmar19@gmail.com>; Author <author@noreply.github.com>
Subject: Re: [eclipse/paho.mqtt.python] V1.3.1 crashing silently where 1.2 runs forever (#249)

 

Thanks for your detailed description.

Are you able to known if your are within your ApScheduler job when the dead-lock occur ? I'm thinking of some bad behavior when some function like disconnect()/reinitilize() and co are called concurrently with publish.
From your description, the dead-lock seems only ""internal"" of paho (e.g. does not involve an external lock). I'll try to find a way to reproduce this dead-lock.

It may help to reproduce this issue: you are stopping the loop somewhere ? If i understand well, your ApScheduler may call loop_start while the loop is already running (which will just return MQTT_ERR_INVAL and should works but that means - for reproducing the bug - that disconnect() and co may be called while the loop is busy).

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub <https://github.com/eclipse/paho.mqtt.python/issues/249#issuecomment-349707499> , or mute the thread <https://github.com/notifications/unsubscribe-auth/ANnql83zEzt60aGCUaBXHFTWaWyFFfCfks5s9snhgaJpZM4QpKq7> .  <https://github.com/notifications/beacon/ANnql8elb8wkxsUNhoNB3PFxZJPnfK4Uks5s9snhgaJpZM4QpKq7.gif> 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDQxMzk5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU0NDMzNQ==,paho.mqtt.python,350544335,249,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-10T12:18:56Z,2017-12-10T12:18:56Z,"The _out_message_mutex is the first lock took by publish() method. As you said, call to publish don't hold locks (neither lock from your application, and since not called from paho callback, no lock from paho). Therefor it can't be the publish call that cause the deadlock. It's something else that deadlocked while holding the _out_message_mutex.

I would be interested if you can trace other call to paho and see if they deadlock. Especially your reconnect logic (mainly because it probably not well tested to disconnect()/reinitilize()/reconnect() often). Could you check if you disconnect/connectNext get stuck ?

Also to help narrowing which code path is used, are you sending QoS=2 packet ? Is this code receiving packet ? (and which QoS)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU0NDMzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NTc3Ng==,paho.mqtt.python,350565776,249,NA,MrBillium,14281367,,,NA,2017-12-10T17:53:49Z,2017-12-10T17:53:49Z,"Currently I am running QOS = 1.

The code does listen to a topic but this topic is for program updates only and is rarely used. I am confident that it was not used during the crashes.

 

I am still running into the same problem that despite all my instrumentation, in 1.3 the code just stops without logging anything

 

The connect/reconnect sequence  I built was a problem when I first tried to use it and it evolved through trial and error into the code below which has worked reliably in 1.2

 

# kill any existing client

try:
    if self.pahoclient._state == 1:
        self.pahoclient.disconnect()
    self.pahoclient.loop_stop(force=True)
    self.pahoclient.reinitialise()
except Exception as e:
    logger.error('Kill client error %s ', e)
 

 

 

# create new client from scratch

 

 

 

Bill

 

 

From: Pierre Fersing [mailto:notifications@github.com] 
Sent: Sunday, December 10, 2017 7:19 AM
To: eclipse/paho.mqtt.python <paho.mqtt.python@noreply.github.com>
Cc: MrBillium <bilmar19@gmail.com>; Author <author@noreply.github.com>
Subject: Re: [eclipse/paho.mqtt.python] V1.3.1 crashing silently where 1.2 runs forever (#249)

 

The _out_message_mutex is the first lock took by publish() method. As you said, call to publish don't hold locks (neither lock from your application, and since not called from paho callback, no lock from paho). Therefor it can't be the publish call that cause the deadlock. It's something else that deadlocked while holding the _out_message_mutex.

I would be interested if you can trace other call to paho and see if they deadlock. Especially your reconnect logic (mainly because it probably not well tested to disconnect()/reinitilize()/reconnect() often). Could you check if you disconnect/connectNext get stuck ?

Also to help narrowing which code path is used, are you sending QoS=2 packet ? Is this code receiving packet ? (and which QoS)

—
You are receiving this because you authored the thread.
Reply to this email directly,  <https://github.com/eclipse/paho.mqtt.python/issues/249#issuecomment-350544335> view it on GitHub, or  <https://github.com/notifications/unsubscribe-auth/ANnql7lMrrx4YKDAV3UxuiCfTb2QY4wpks5s-8wxgaJpZM4QpKq7> mute the thread.  <https://github.com/notifications/beacon/ANnqlzdOF3-Rg0LIX8oOZYkuvui8eW0vks5s-8wxgaJpZM4QpKq7.gif> 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MDU2NTc3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/249,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCbTO,paho.mqtt.python,1846129870,249,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:20:30Z,2023-12-07T21:20:30Z,I'm going to close this due to age/inactivity (the library has seen significant changes since this issue was raised; apologies no one was able to respond to your last comment). If you are still experiencing the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCbTO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,paho.mqtt.python,276777548,250,out of memory crash + disconnection in exit of context manager when using qos=2 (paho 1.3.1),axd1967,3529789,alex,,CLOSED,2017-11-25T21:01:15Z,2021-10-04T10:09:11Z,"for some dark reason, an out of memory error + disconnection occurs when publishing a qos=2 message.

I've created a small Vagrant VM that runs a RabbitMQ config and a client that attempts to send such a message:  https://github.com/axd1967/paho-bug

the bug seems to happen upon exit of a context manager in  publish() in paho/mqtt/client.py(1121):
https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L1121

(note: code simplified, I can successfully send qos=0 and qos=1 messages via RabbitMQ)

paho-mqtt (1.3.1) , Ubuntu 16","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzEwMTU1NA==,paho.mqtt.python,347101554,250,NA,axd1967,3529789,alex,,NA,2017-11-27T07:41:38Z,2017-11-27T07:41:38Z,"* hmmm... just noticed - could this be due to RabitMQ MQTT plugin not dealing with QoS=2?
see top of  https://www.rabbitmq.com/mqtt.html
* another possibility: https://github.com/eclipse/paho.mqtt.python/pull/168","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0NzEwMTU1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODUzMDM1OA==,paho.mqtt.python,348530358,250,NA,axd1967,3529789,alex,,NA,2017-12-01T15:51:55Z,2017-12-01T15:51:55Z,"Aha! qos=2 is a no-go for MQTT for specific reasons:

* https://groups.google.com/d/msg/rabbitmq-users/wwpFdPCRAD4/XMV5Ia2xCQAJ
* https://groups.google.com/forum/#!searchin/rabbitmq-users/mqtt$20qos$3D2|sort:date/rabbitmq-users/AVKOnNzX_7w/NEiYB6zICQAJ
* https://groups.google.com/d/msg/rabbitmq-users/ecLWQhHBg1g/N_ZIUwe6ojIJ
* https://groups.google.com/d/msg/rabbitmq-users/wwDNboPmNaU/1IIwvDBwe9cJ

I think that closes part of the issue (but the crash should not happen)

in fact, the MQTT plugin could maybe issue big fat warnings on any QoS=2 use encountered, rather than let users find out? (but it is indeed documented on the top of the MQTT plugin doc page).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODUzMDM1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODkxMzExMQ==,paho.mqtt.python,348913111,250,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-04T09:54:28Z,2017-12-04T09:54:28Z,"Thank for your patience and report detailed report.

RabbitMQ don't like QoS=2 package, but on my quick test (docker run rabbitmq, then rabbitmq-plugins enable rabbitmq_mqtt) I don't reproduce an out of memory. The client only get disconnected as soon as it publish the message and reconnect (in loop). Which is expected if the broker don't support them :)

I will try to test you Vagrant file in the next days.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODkxMzExMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODk0MjExMA==,paho.mqtt.python,348942110,250,NA,axd1967,3529789,alex,,NA,2017-12-04T11:58:55Z,2017-12-04T11:58:55Z,"indeed, that seems to be what is happening (disconnect + reconnect, but including an out-of-memory error)
(edit added: Ubuntu 16)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0ODk0MjExMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTcyMjI5Mw==,paho.mqtt.python,349722293,250,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-06T17:55:42Z,2017-12-06T17:55:42Z,"Are you saying you have out of memory because the disconnect error is ""Out of memory."" ?
There is no out-of-memory in this cause, just a wrong number for this error :)

This come from https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L1794 which use ""1"" instead of an MQTT_ERR_XXX.

So except for a wrong error message, there is no other issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM0OTcyMjI5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjEyNTIyNg==,paho.mqtt.python,352125226,250,NA,axd1967,3529789,alex,,NA,2017-12-15T22:13:38Z,2017-12-15T22:13:38Z,"did you try the Vagrant approach?

I crafted it specially, the README explains the steps to reproduce the issue. 

why does a disconnection happens? it looks like qos=2 is not correctly dealt with.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjEyNTIyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjEyNzA0Nw==,paho.mqtt.python,352127047,250,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-15T22:23:56Z,2017-12-15T22:23:56Z,"What I reproduce is RabbitMQ closing the connection (because it don't support QoS=2). On the client side I don't see any bad behavior (except the message / return code which is not the good one).

That why I asked if the ""Out of memory"" come only from the error_string(result). If that the case, the only issue on paho side is that a return 1 is used for a generic error, but MQTT_ERR_NOMEM also have the value 1. Paho should be updated to return a most useful error.

Paho can't do anything better with QoS=2 and RabbitMQ, the broker don't support it and you should either use only QoS < 2 or use another broker.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjEyNzA0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43oRda,paho.mqtt.python,933304154,250,NA,YoungPyDawan,55976936,,,NA,2021-10-04T09:23:04Z,2021-10-04T09:23:04Z,"At least issue from 
https://github.com/eclipse/paho.mqtt.python/issues/250#issuecomment-349722293
is fixed in 1.6 branch:
https://github.com/eclipse/paho.mqtt.python/blame/1.6.x/src/paho/mqtt/client.py#L2373

by commit https://github.com/eclipse/paho.mqtt.python/commit/332834e7ec293f1bfe385180b8691863af5a7738
so close?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43oRda/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/250,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43oZf4,paho.mqtt.python,933337080,250,NA,ralight,79578,Roger Light,,NA,2021-10-04T10:09:10Z,2021-10-04T10:09:10Z,"I think so, yes, thanks for flagging this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43oZf4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254,paho.mqtt.python,281579428,254,tls_set method accepts path instead of cert string,cah-sachin,4475487,Sachin Burange,,CLOSED,2017-12-12T23:58:34Z,2022-01-08T03:29:49Z,"tls_set function is expecting paths to the files not the contents of the file to be passed in. Is there any way through which we can add contents of the path using tls_set and still get MQTT connection ?

If  not is there any plan to do it ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTMyMDk1MA==,paho.mqtt.python,351320950,254,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-13T08:36:42Z,2017-12-13T08:36:42Z,"We are using Python standard ssl module under the hood. Which does not support passing content but only file path. So we can't support this feature.
You will have to write the content in a temporary file to achieve this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MTMyMDk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4003Ia,paho.mqtt.python,886272538,254,NA,ralight,79578,Roger Light,,NA,2021-07-25T23:15:21Z,2021-07-25T23:15:21Z,Closing because there's nothing we can really do here.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4003Ia/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/254,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48Ev0c,paho.mqtt.python,1007877404,254,NA,RFRIEDM-Trimble,50461358,RFRIEDM-Trimble,,NA,2022-01-08T03:29:48Z,2022-01-08T03:29:48Z,Is this the reason you can't supply paths with `~` as in `~/.aws/my_private_key.key`?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48Ev0c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,paho.mqtt.python,282520034,255,Publishing occasionally fails with struct unpack error,alberts-s,1869097,Alberts S,,CLOSED,2017-12-15T19:10:10Z,2018-06-18T16:57:27Z,"Hello,
I'm occasionally seeing an issue whilst publishing a message and was able to catch the exception in a debugger after a long time period.

The debugger output when the exception occurred can be seen below.
![2017-12-15-20 30 55](https://user-images.githubusercontent.com/1869097/34055838-9cfd7816-e1d9-11e7-8d5d-d30ece36453d.png)

I do not think this is a network related issue since it happens on publish before any packet is being sent out.
![2017-12-15-20 33 31](https://user-images.githubusercontent.com/1869097/34055867-afb4ab5a-e1d9-11e7-8cc5-dc6643cffa01.png)
![2017-12-15-20 38 45](https://user-images.githubusercontent.com/1869097/34055869-b60ef62c-e1d9-11e7-90f8-eaa3e36ac2e3.png)

Full data at the time of _handle_publish, client.py:2466 can be seen [here](https://gist.github.com/Alberts00/5bfa1ef5a10fa297ecc8f2285289dbc5).

Full traceback:
```

 Exception in thread Thread-6:
Traceback (most recent call last):
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/threading.py"", line 916, in _bootstrap_inner
    self.run()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/threading.py"", line 864, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2650, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1481, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1849, in _packet_read
    rc = self._packet_handle()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2305, in _packet_handle
    return self._handle_publish()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2466, in _handle_publish
    (topic, packet) = struct.unpack(pack_format, packet)
struct.error: bad char in struct format

Traceback (most recent call last):
  File ""/media/storage/wdir/pycharm/helpers/pydev/pydevd.py"", line 1668, in <module>
    main()
  File ""/media/storage/wdir/pycharm/helpers/pydev/pydevd.py"", line 1662, in main
    globals = debugger.run(setup['file'], None, None, is_module)
  File ""/media/storage/wdir/pycharm/helpers/pydev/pydevd.py"", line 1072, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File ""/media/storage/wdir/pycharm/helpers/pydev/_pydev_imps/_pydev_execfile.py"", line 18, in execfile
    exec(compile(contents+""\n"", file, 'exec'), glob, loc)
  File ""/media/storage/priv/projects/openhab_ss/consume.py"", line 92, in <module>
    read_serial(ser, client)
  File ""/media/storage/priv/projects/openhab_ss/consume.py"", line 84, in read_serial
    client.loop() # To make sure it reconnects if connection is dropped
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1849, in _packet_read
    rc = self._packet_handle()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2305, in _packet_handle
    return self._handle_publish()
  File ""/home/alberts00/.pyenv/versions/3.6.2/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2466, in _handle_publish
    (topic, packet) = struct.unpack(pack_format, packet)
struct.error: bad char in struct format
```

Hardware and software used:
Kernel: 3.19.0-73-generic #81~14.04.1-Ubuntu
Data: Input from serial directly passed onto paho-mqtt
Python version: 3.6 (via pyenv), however 3.5 (via Ubuntu repository) is also experiencing same issue.
Python package versions:
- coverage (4.4.2)
- paho-mqtt (1.3.1)
- pip (9.0.1)
- pyserial (3.4)
- setuptools (28.8.0)

I will be very thankful for any suggestions on what to debug further were provided.
Let me know if any additional information is required.

Thanks for taking your time looking through this issue, have a great day!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MzczNjM3MA==,paho.mqtt.python,353736370,255,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-23T16:49:05Z,2017-12-23T16:49:05Z,"Hi, thanks for the detailed error reporting.

Your traceback make me think you are calling loop() and loop_forever() from 2 thread and that probably the cause of your error, loop() is not thread-safe.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MzczNjM3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MDUxNDY2NQ==,paho.mqtt.python,360514665,255,NA,phretor,192820,Federico Maggi,,NA,2018-01-25T16:10:34Z,2018-01-25T16:10:34Z,@PierreF not safe even if each thread has its own `Client` object?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MDUxNDY2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4ODA2NDU0NQ==,paho.mqtt.python,388064545,255,NA,alberts-s,1869097,Alberts S,,NA,2018-05-10T14:09:08Z,2018-05-10T14:09:08Z,"Hey @PierreF,
Thanks for pointing that out, I've realised that was indeed the case.
I was running client.loop_start() inside on_connect() and running client.loop() after data has been fetched from serial port (inside Main thread).
Unfortunately I did not notice anywhere in the documentation that both of those functions are not thread safe (might be wise to document this).
If no action regarding the documentation issue will be taken care of I presume this issue can be closed. Thanks for taking your time looking into this!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4ODA2NDU0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/255,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODEyMzEzOQ==,paho.mqtt.python,398123139,255,NA,shmrymbd,3960823,kamodachi,,NA,2018-06-18T16:57:27Z,2018-06-18T16:57:27Z,"hi. i am also happen to have this issue. what is the work around?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5ODEyMzEzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/256,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/256,paho.mqtt.python,282644004,256,MQTT Broker connected or disconnected.,cah-sachin,4475487,Sachin Burange,,CLOSED,2017-12-16T19:12:15Z,2023-12-07T21:25:03Z,"Hello,

Is there any quick way/immediate way to know whether My MQTT broker is connected or not ? 


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/256/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/256,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjM2MzE5MA==,paho.mqtt.python,352363190,256,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-18T08:55:02Z,2017-12-18T08:55:02Z,"Hi,

currently paho library don't expose this directly. You use callbacks on_connect + on_disconnect to track connection status.
When doing so, don't forget that on_connect is called when broker reply to the connection requests and could refuse it, therefor connection is established only when on_connect is called with rc=0.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1MjM2MzE5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/256,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCcgW,paho.mqtt.python,1846134806,256,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:25:03Z,2023-12-07T21:25:03Z,`is_connected(self)` was added some time ago so I'll close this isssue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCcgW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257,paho.mqtt.python,285245944,257,Cannot connect through OpenVPN TUN connection,duk3luk3,611471,Lukas Erlacher,,CLOSED,2017-12-31T08:13:11Z,2017-12-31T11:56:17Z,"Hello,

I'm having a very weird problem.

**tl;dr**:

MQTT connection through OpenVPN:

* works fine using mosquitto,
<s>* `paho.mqtt.subscribe.callback` hangs on `socket.create_connection` if connecting through ip address
* but works if supplying a hostname instead of an IP address</s>
* `paho.mqtt.client.Client` always throws `ConnectionRefusedError` in `socket.connect`

The long version:

My MQTT server and client are both on OpenVPN clients (with client-to-client enabled). I can reach the server using mosquitto:

```
lukas@manarati-three:~ $ mosquitto_sub -h 192.168.254.1 -p 1885 -u mqttbroker --pw ... -t test                                                 
testm                                                                                                               
```

And using nc I can make sure the connection can be made:

```
lukas@manarati-three:~ $ nc -v 192.168.254.1 1885                                                                                                            
Connection to 192.168.254.1 1885 port [tcp/*] succeeded!                                                                                            
^C                                                                                                                                                       
```

I can replicate this connection using python:

```
lukas@manarati-three:~ $ python3                                                                                                                                                                                                      [94/3616]
Python 3.5.3 (default, Jan 19 2017, 14:11:04)                                                        
[GCC 6.3.0 20170124] on linux                                                                                   
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.                            
>>> import socket                                                                                           
>>> s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)                                       
>>> s.connect(('192.168.254.1', 1885))                                                                                                    
>>> s.close()                                                                                
>>> s = socket.create_connection(('192.168.254.1', 1885))                                                                                                                               
>>> s                                                                                                                                               
<socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('192.168.255.6', 47950), raddr=('192.168.254.1', 1885)>                      
>>> s = socket.create_connection(('192.168.254.1', 1885), source_address=('',0))                                             
>>> s                                                                                                                                   
<socket.socket fd=4, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('192.168.255.6', 49427), raddr=('192.168.254.1', 1885)>
>>>                                                                                                                                       
```

<s>But, with paho mqtt the connection hangs:

```
lukas@manarati-three:~ $ python3                                                                                                          
Python 3.5.3 (default, Jan 19 2017, 14:11:04)                                                
[GCC 6.3.0 20170124] on linux                                                                                                                                                           
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.                                                                              
>>> import paho.mqtt.client as mqtt                                                                                                                                          
>>> import paho.mqtt.subscribe as subscribe                                                                                  
>>> def on_message_print(client, userdata, message):                                                                                    
...     print(""%s %s"" % (message.topic, message.payload))                                                                                              
...                                                                                                                                       
>>> subscribe.callback(on_message_print, ""paho/test/callback"", hostname=""131.159.254.1"", port=1885)                                                 
                                                                                                                    
                                                                                                               
^CTraceback (most recent call last):                                                                                
  File ""<stdin>"", line 1, in <module>                                                    
  File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/subscribe.py"", line 180, in callback
    client.connect(hostname, port, keepalive)                                                                           
  File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py"", line 686, in connect       
    return self.reconnect()                                                                          
  File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py"", line 808, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/usr/lib/python3.5/socket.py"", line 703, in create_connection                                                                                  
    sock.connect(sa)                                                                                 
KeyboardInterrupt                                                    
>>>                                                                                                                                                    
```

I used pdb to verify the parameters are correct:

```
(Pdb) down                                                                                                           
> /usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py(808)reconnect()                                         
-> sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
(Pdb) locals                                                                                                                                                               
<built-in function locals>                                                                                                                                                 
(Pdb) locals()                                                                                                                                                   
{'self': <paho.mqtt.client.Client object at 0x7685f1b0>}                                                                                                     
(Pdb) self._bind_address                                                                                                                            
''                                                                                                                                                       
(Pdb) self._host                                                                 
'131.159.254.1'                                                                                                                                  
(Pdb) self._port                                                                                                                                 
1885
```
If I change my code to use a hostname instead of an IP to connect:

```
import paho.mqtt.subscribe as subscribe
def on_message_print(client, userdata, message):
    print(""%s %s"" % (message.topic, message.payload)) 

subscribe.callback(on_message_print, ""paho/test/callback"", hostname=""srvtestname"", auth={'username':'mqttbroker', 'password':'...'}, port=1885)
```

Then it works:

```
lukas@manarati-three:~ $ python3 -m pdb mqttest.py                                                                     
> /home/lukas/mqttest.py(1)<module>()
-> import paho.mqtt.subscribe as subscribe
(Pdb) r
paho/test/callback b'testm'
^C--Return--
> /home/lukas/mqttest.py(5)<module>()->None
-> subscribe.callback(on_message_print, ""paho/test/callback"", hostname=""srvtestname"", auth={'username':'mqttbroker', 'password':'...'}, port=1885)
(Pdb)
```
</s>

However, inside my application where I use `paho.mqtt.client.Client` I get (socket!) connection refused, no matter what I specify as address:
```
Dec 31 07:56:15 manarati-three python3[28275]: MQTTPublisher: Initializing MQTTPublisher with srvtestname:1885
Dec 31 07:56:15 manarati-three python3[28275]: MQTTPublisher: Connecting with broker...
Dec 31 07:56:16 manarati-three python3[28275]: SmartPoleServer: Exception `ConnectionRefusedError` was raised: [Errno 111] Connection refused. Exiting...
Dec 31 07:56:16 manarati-three python3[28275]: Traceback (most recent call last):
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/lib/python3.5/runpy.py"", line 193, in _run_module_as_main
Dec 31 07:56:16 manarati-three python3[28275]:     ""__main__"", mod_spec)
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/lib/python3.5/runpy.py"", line 85, in _run_code
Dec 31 07:56:16 manarati-three python3[28275]:     exec(code, run_globals)
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/opt/smart_pole_server/__main__.py"", line 47, in <module>
Dec 31 07:56:16 manarati-three python3[28275]:     main(settings)
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/opt/smart_pole_server/__main__.py"", line 19, in main
Dec 31 07:56:16 manarati-three python3[28275]:     smart_pole_server = SmartPoleServer(settings)
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/opt/smart_pole_server/smart_pole_server/smart_pole_server.py"", line 46, in __init__
Dec 31 07:56:16 manarati-three python3[28275]:     self._state_updater.connect()
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/opt/smart_pole_server/smart_pole_server/event_push_client/mqtt_event_push_client/mqtt_event_push_client.py"", line 28, in connect
Dec 31 07:56:16 manarati-three python3[28275]:     self._mqtt_pub_client.connect()
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/opt/smart_pole_server/smart_pole_server/event_push_client/mqtt_event_push_client/mqtt_client.py"", line 55, in connect
Dec 31 07:56:16 manarati-three python3[28275]:     super(MQTTPublisher, self).connect(self._broker, self._port, keepalive=15)
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py"", line 686, in connect
Dec 31 07:56:16 manarati-three python3[28275]:     return self.reconnect()
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py"", line 808, in reconnect
Dec 31 07:56:16 manarati-three python3[28275]:     sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/lib/python3.5/socket.py"", line 712, in create_connection
Dec 31 07:56:16 manarati-three python3[28275]:     raise err
Dec 31 07:56:16 manarati-three python3[28275]:   File ""/usr/lib/python3.5/socket.py"", line 703, in create_connection
Dec 31 07:56:16 manarati-three python3[28275]:     sock.connect(sa)
Dec 31 07:56:16 manarati-three python3[28275]: ConnectionRefusedError: [Errno 111] Connection refused
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5NzExNQ==,paho.mqtt.python,354597115,257,NA,PierreF,359833,Pierre Fersing,,NA,2017-12-31T10:44:10Z,2017-12-31T10:44:10Z,"Hi,

What happen if you try nc or mosquitto_sub on IP 131.159.254.1 ?
Or said otherwise, why are you sure IP 131.159.254.1 and 192.168.254.1 are equivalent ?

For the Client.connect, could you make sure self._broker is srvtestname and self._port is 1885 ? Also does srvtestname only resolve to one IP (e.g. no round robin, no IPv6) ?
Finally, to make sure paho library behave correctly, you could try a tcpdump so see which IP/port is used.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5NzExNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5OTI3OA==,paho.mqtt.python,354599278,257,NA,duk3luk3,611471,Lukas Erlacher,,NA,2017-12-31T11:39:54Z,2017-12-31T11:39:54Z,"Sorry, 131.159.254.1 was a typo. That makes everything a lot less weird. Thank you for spotting that.

I'll see if I can tcpdump and/or strace my application to figure out where it goes wrong.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5OTI3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/257,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5OTk1OA==,paho.mqtt.python,354599958,257,NA,duk3luk3,611471,Lukas Erlacher,,NA,2017-12-31T11:56:17Z,2017-12-31T11:56:17Z,"I debugged into the application with pdb and found that it's not using the correct port:

```
> /usr/local/lib/python3.5/dist-packages/paho/mqtt/client.py(808)reconnect()
-> sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
(Pdb) locals()
{'self': <smart_pole_server.event_push_client.mqtt_event_push_client.mqtt_client.MQTTPublisher object at 0x76022590>}
(Pdb) self._host
'192.168.254.1'
(Pdb) self._port
1883
```

This was due to bad subclassing, roughly as follows:

```python

def __init__(self, settings, client_id):
  self._port = settings['port']
  super(MyClient, self).__init__(client_id)
```

that led to the port getting reset to 1883. (We have to use port 1885 instead of 1883 for... reasons).

Sorry for using your time, and thank you for helping me debug this!

I hope you have a happy new year that you can spend doing something enjoyable (whether that is debugging python or not) 🎉 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM1NDU5OTk1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260,paho.mqtt.python,288144478,260,Broken pipe with new asyncio support,dragomirecky,1269664,Alan Dragomirecký,alan@dragomirecky.com,CLOSED,2018-01-12T14:57:08Z,2023-12-07T21:39:36Z,"Hi,
I am having problem with the latest (develop) version. I think there is an issue with the new support for external event loops added in #235. It works fine for some time, but then it starts raising „broken pipe“ at [this line](https://github.com/eclipse/paho.mqtt.python/blob/0b2b479f74e222c13d05bf9e6171545a1923cb4a/src/paho/mqtt/client.py#L2453).

I think it's because the socket pair `_sockpairW` and `_sockpairR` is being fed periodically at that line, but with external loop, `_sockpairR` is never being read from. After some time, this fills up buffer of the socket pair and starts throwing the exception.  

My current workaround is simple – I just extended [misc_loop](https://github.com/eclipse/paho.mqtt.python/blob/0b2b479f74e222c13d05bf9e6171545a1923cb4a/examples/loop_asyncio.py#L50) with periodic read from `_sockpairR`.  This seems to work.

What do you think is the right approach to fix this issue?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMjEwMTY5Ng==,paho.mqtt.python,512101696,260,NA,vadmium,1024659,Martin Panter,,NA,2019-07-17T04:55:01Z,2019-07-17T04:55:01Z,"I believe I ran into the same root cause, although the exceptions I saw were all TimeoutError. Here is an excerpt of the backtrace, on Linux using Python 3.6 and Paho v1.2:

```python traceback
  File ""usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 980, in publish
  File ""usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2022, in _send_publish
  File ""usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2218, in _packet_queue
TimeoutError: [Errno 110] Connection timed out
```

Our application has its own selector loop, which calls _loop_read_, __write_ and __misc_. The plain _loop_ method is not called, so __sockpairR_ is never read.

So far in my attempt to reproduce the problem, I have seen __sockpairR_'s receive buffer, and then __sockpairW_'s send buffer, fill up with one byte per _publish_ call, which I can monitor with the _netstat_ command. After the send buffer is full, the _send_ call raises EAGAIN, which the Paho library catches and ignores. My theory is that eventually the socket pair's TCP connection will time out, and _send_ will return ETIMEDOUT, which Python will raise as an exception.

I suppose my workaround will be similar to Dragomirecký's: periodically read and drop data from __sockpairR_, perhaps after my application calls _loop_misc_. This should also avoid wasting megabytes of socket buffers per MQTT connection.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxMjEwMTY5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kOY-q,paho.mqtt.python,1681493930,260,NA,vadmium,1024659,Martin Panter,,NA,2023-08-17T01:55:16Z,2023-08-17T01:55:16Z,"I bumped into Commit a6fc6c10194474965b104c249102b39b6d5b5645 (pointing to Issue #563), because it broke my workaround code. It looks like that change might fix the problems described here.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kOY-q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/260,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCguy,paho.mqtt.python,1846152114,260,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:39:36Z,2023-12-07T21:39:36Z,I'm going to close this due to inactivity (and significant changes to the library since this was raised). If you are still experiencing the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCguy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/261,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/261,paho.mqtt.python,288579066,261,Constant disconnect because of Connection refused - incorrect protocol version,mirquintilianus,35093957,,,CLOSED,2018-01-15T12:31:27Z,2018-01-27T07:44:15Z,"Hi there,

I am using your client library along with a python client config reader and a python module for controlling Broadlink MP1 device.

[https://github.com/mjg59/python-broadlink](url)
[https://github.com/eschava/broadlink-mqtt ](url)

These two, they seem to work OK since the Broadlink device is discovered. 
However, when the client finally tries to connect to the MQTT broker, it keeps getting disconnected, reportedly because of an incorrect protocol version.
The MQTT broker is an ActiveMQ Artemis built-in broker service, which is part of an Eclipse Kura emulator set up on a Debian 9 machine.
I have tested the broker with the mqtt-spy and it's up and running. 
I have been trying quite a few things over the weekend, but still no result whatsoever.
Below are the logs with as much info as I managed to get from the logger.
Already tried changing the protocol version between 3.1 and 3.1.1, and also tried setting back and forth the clean_session flag.
 
Any idea why I still keep getting this code 1: Connection refused - incorrect protocol version?
Thank you in advance, anything is welcome!

[2018-01-14 16:35:44,012] DEBUG Connected to MP1 Broadlink device at ('192.168.1.151', 80)
[2018-01-14 16:35:44,012] DEBUG Protocol version is 4
[2018-01-14 16:37:31,194] DEBUG Connected to MP1 Broadlink device at ('192.168.1.151', 80)
[2018-01-14 16:37:31,195] DEBUG Protocol version is 4
[2018-01-14 16:37:31,196] DEBUG Sending CONNECT (u1, p1, wr0, wq0, wf1, c0, k60) client_id=broadlink_test_client
[2018-01-14 16:37:31,198] DEBUG Calling from main right after mqttc.connect()
[2018-01-14 16:37:31,200] DEBUG OOOOPS! Broadlink disconnects
[2018-01-14 16:37:31,201] DEBUG CONNACK received by on_disconnect with code: 1
[2018-01-14 16:37:42,211] DEBUG Sending CONNECT (u1, p1, wr0, wq0, wf1, c0, k60) client_id=broadlink_test_client
[2018-01-14 16:37:42,213] DEBUG OOOOPS! Broadlink disconnects
[2018-01-14 16:37:42,213] DEBUG CONNACK received by on_disconnect with code: 1 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/261/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/261,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MDk2NzQ1NQ==,paho.mqtt.python,360967455,261,NA,mirquintilianus,35093957,,,NA,2018-01-27T07:44:15Z,2018-01-27T07:44:15Z,"Finally, I manage to solve the issue by setting user and pass for the broker access.
Other than this, it was nothing to do with the client code itself.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MDk2NzQ1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/262,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/262,paho.mqtt.python,289598174,262,Subscribe topic with not messages,berrywhite96,24818127,,,CLOSED,2018-01-18T11:38:28Z,2021-08-16T22:37:17Z,"Hey there,
I have currently the problem if I subscribe a topic where never been published a message before, the library stuck in a loop. Only if a message is published the loops ends. For Example:
```
import paho.mqtt.subscribe as subscribe

m = subscribe.simple(""emptytopic/nomessages"", hostname=""127.0.0.1"")
```
Possible in this situation to get an empty list?

Thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/262/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/262,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIzMTM1Mw==,paho.mqtt.python,370231353,262,NA,PierreF,359833,Pierre Fersing,,NA,2018-03-04T13:59:39Z,2018-03-04T13:59:39Z,"This helper is made to receive a message from a topic, it's therefor normal to ""hang"" until a publish is made on this topic.
For just subscribing you should use client's subscribe() method (and then use on_message callback to get message(s))","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIzMTM1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/263,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/263,paho.mqtt.python,290444045,263,[Feature request] helper functions for parsing topic names,vitamins,1906705,,,CLOSED,2018-01-22T12:12:04Z,2024-01-08T01:24:37Z,"Let's say i'm subscribed with client.subscribe('channel/#').
When i'm receiving a message in on_message, i need to strip of 'channel/' from the received msg.topic to retrieve the variable #.

For this simple example i am using this to strip off the beginning.
variable = msg.topic[(len('channel/'):]

This takes more work if there are more variables.

Let's make a helper function that retrieves variables from msg.topic.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/263/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/263,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTQ2NDA0NA==,paho.mqtt.python,879464044,263,NA,phi1010,772292,Phillip K.,,NA,2021-07-13T23:10:36Z,2021-07-13T23:10:36Z,"I just tinkered https://gist.github.com/phi1010/6f72bd3a188f67f61c5c0d0a8de33854 , this might help. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTQ2NDA0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/263,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEd6y,paho.mqtt.python,1880219314,263,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:38:22Z,2024-01-07T23:38:22Z,"I'm going to close this due to age/inactivity. Please do feel free to reopen but this is more likely to gain traction with a fuller proposal (currently it's not really clear how this would work).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEd6y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/264,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/264,paho.mqtt.python,290460660,264,Reconnect not working even when retry_first_connection=True,wiebeytec,6682400,,,CLOSED,2018-01-22T13:12:35Z,2023-12-07T21:37:56Z,"I was wondering, what is the idea behind [this except clause](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L896)?

I start paho with `loop_start()`, which implies [retry_first_connection=True](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L2649). However, if I block the server with iptables, using REJECT, I get a [raise here](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L895).

Why are only those three errors retried?

In other words: currently there seems to be a bug that `retry_first_connection` doesn't work.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/264/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/264,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyODk3Mw==,paho.mqtt.python,370228973,264,NA,PierreF,359833,Pierre Fersing,,NA,2018-03-04T13:21:04Z,2018-03-04T13:21:04Z,"This only apply when connect_async is used. I assume that you get the error when calling connect(), which try to immediately connect.

About the except clause... I think it not useful currently. We should add the timeout option to create_connection for it to be useful.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyODk3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/264,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCgPK,paho.mqtt.python,1846150090,264,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:37:55Z,2023-12-07T21:37:55Z,I'm going to close this due to inactivity (the code discussed has changed a lot since this issue was raised). If you are still experiencing the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCgPK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/265,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/265,paho.mqtt.python,292155047,265,Connection refused when logfile is not owned by mosquitto group,vitamins,1906705,,,CLOSED,2018-01-27T21:42:15Z,2018-03-04T13:03:29Z,"When the log file /var/log/mosquitto/mosquitto.log is removed or is not owned by the mosquitto user, mosquitto starts without raising any error, but refuses to accept any connections.
An error should be raised when trying to start mosquitto without log file.

Note that this bug has 6 points here.
https://iot.stackexchange.com/questions/636/mosquitto-on-raspberry-pi-refuses-connection-after-changing-log-settings/647#647","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/265/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/265,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTAyNjExMg==,paho.mqtt.python,361026112,265,NA,swails,779022,Jason Swails,,NA,2018-01-28T00:01:55Z,2018-01-28T00:01:55Z,"But this isn’t mosquitto...?

This is the python client library for mqtt. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2MTAyNjExMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/265,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyNzgzNw==,paho.mqtt.python,370227837,265,NA,PierreF,359833,Pierre Fersing,,NA,2018-03-04T13:03:29Z,2018-03-04T13:03:29Z,This look as a Mosquitto bug (https://github.com/eclipse/mosquitto). It this bug affect paho-mqtt (the Python client) feel free to reopen.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyNzgzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/268,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/268,paho.mqtt.python,292890255,268,When using transport=websockets on windows the connection drops on read,element-82,12117988,Paul Barrette,paulbarrette@gmail.com,CLOSED,2018-01-30T18:31:47Z,2024-01-07T23:28:25Z,"The [device cloud agent](https://github.com/Wind-River/device-cloud-python) uses paho for mqtt connectivity over websockets.  However when running on windows, the connections drop repeatedly.  The device cloud agent has logic to handle reconnection but the error  occurs when reading the socket in the paho module.  This blocks interaction with the agent from the cloud.   I have a patch that fixes this issue (for googlers), but I would like to get this in master.  This works ok on Linux as well:
```
From 1f11da9ee9274147d3ce697a3a924c332a7fb2d0 Mon Sep 17 00:00:00 2001
From: Paul Barrette <paulbarrette@gmail.com>
Date: Tue, 30 Jan 2018 12:09:14 -0500
Subject: [PATCH] Fix transport=websockets on windows.

MacOS and Linux both work well with transport=websockets.  However,
windows has a different low level socket implementation.  The
client.py fails to handle zero data packets and EAGAIN correctly in
some instances.  This commit addresses the windows issues that were
seen.

Signed-off-by: Paul Barrette <paulbarrette@gmail.com>
---
 src/paho/mqtt/client.py | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
index 91582ce..08e472f 100755
--- a/src/paho/mqtt/client.py
+++ b/src/paho/mqtt/client.py
@@ -1831,6 +1831,10 @@ class Client(object):
         while self._in_packet['to_process'] > 0:
             try:
                 data = self._sock.recv(self._in_packet['to_process'])
+                # on Windows a 0 data packet can be received.  Just
+                # continue if that happens.
+                if data == None:
+                    continue
             except socket.error as err:
                 if self._ssl and (err.errno == ssl.SSL_ERROR_WANT_READ or err.errno == ssl.SSL_ERROR_WANT_WRITE):
                     return MQTT_ERR_AGAIN
@@ -1840,9 +1844,10 @@ class Client(object):
                 return 1
             else:
                 if len(data) == 0:
-                    return 1
-                self._in_packet['to_process'] -= len(data)
-                self._in_packet['packet'] += data
+                   pass
+                else:
+                    self._in_packet['to_process'] -= len(data)
+                    self._in_packet['packet'] += data
 
         # All data for this packet is read.
         self._in_packet['pos'] = 0
@@ -2921,6 +2926,8 @@ class WebsocketWrapper(object):
             if err.errno == errno.ECONNABORTED:
                 self.connected = False
                 return b''
+            elif err.errno != errno.EAGAIN:
+                raise
             else:
                 # no more data
                 raise

```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/268/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/268,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEc48,paho.mqtt.python,1880215100,268,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:28:25Z,2024-01-07T23:28:25Z,It appears that this was addressed back in 2018 so I'm going to close the issue. If the problem does still exist then please reopen (and accept my apologies; attempting to sort through a lot of old issues!).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEc48/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/272,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/272,paho.mqtt.python,299190409,272,Make code blocks in the docs highlight syntax,Benjamin-Lee,13618205,Benjamin Lee,benjamindlee@me.com,CLOSED,2018-02-22T01:25:20Z,2018-03-04T12:46:43Z,"Currently, the readme's code blocks look like this:

```
Client(client_id="""", clean_session=True, userdata=None, protocol=MQTTv311, transport=""tcp"")
```

which can make it difficult to read. 

It would be better if they used Python syntax highlighting, like this:
```python
Client(client_id="""", clean_session=True, userdata=None, protocol=MQTTv311, transport=""tcp"")
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/272/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/272,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyNjU2NQ==,paho.mqtt.python,370226565,272,NA,PierreF,359833,Pierre Fersing,,NA,2018-03-04T12:46:43Z,2018-03-04T12:46:43Z,"Good idea, thanks. Pushed this on fixes branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyNjU2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273,paho.mqtt.python,299224180,273,Unable to send File ,Tanmayagarwal14,36722261,Tanmay Agarwal,,CLOSED,2018-02-22T05:12:10Z,2018-04-14T14:36:50Z,"Hi,
I am very new to the mqtt . I wanted to send a file using mqtt I used both f.read() and f.write() function but I am unable to send the File I am not understanding what is happening . Any sort of help will be Appreciated. Thanks in advance.
Publish Code:-

import paho.mqtt.client as mqtt

# Define Variables
MQTT_HOST = ""iot.eclipse.org"" #iot.eclipse.org
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""
#MQTT_MSG = 25

def on_connect(mqttc, userdata, flags, rc):
        #Subscribe to a Topic
    mqttc.subscribe(MQTT_TOPIC, 0)
    print(""Connection returned result: ""+connack_string(rc))
        
    # Define on_publish event function
def on_publish(mqttc, userdata, mid):
    print ""Message Published...""
    print(""mid: "" +str(mid))
    mqttc.disconnect()
    
    # Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCESS"", clean_session=False)

    # Register publish callback function
mqttc.on_publish = on_publish
mqttc.on_connect = on_connect
    # Connect with MQTT Broker
    # probar mqttc.username_pw_set(username, password)
mqttc.connect(MQTT_HOST, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL)		

    # Publish message to MQTT Broker
f= open(""/home/chettiar/Desktop/mqtt/filesend/aa.txt"")
filecontent = f.read()
byteArr = bytes(filecontent)

mqttc.publish(MQTT_TOPIC,byteArr,0,True)


Subscribing Code:-


import paho.mqtt.client as mqtt

# Define Variables
MQTT_BROKER = ""iot.eclipse.org""
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""


# Define on_connect event Handler
def on_connect(mosq, obj, rc):
    print(""Connected with result code ""+str(rc))
    #Subscribe to a the Topic
    mqttc.subscribe(MQTT_TOPIC, 0)

# Define on_subscribe event Handler
def on_subscribe(mosq, obj, mid, granted_qos):
    print ""Subscribed to MQTT Topic""

# Define on_message event Handler
def on_message(mosq, obj, message):
    print(""Received message '"" + str(message.payload) + ""' on topic '""
        + message.topic + ""' with QoS "" + str(message.qos))
    #if (type(message.payload) == 'byteArray'):
    f = open('/home/pi/Desktop/image.jpg','w')
    f.write(message.payload)
    f.close()
    print 'image received'
            
# Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCSS"", clean_session=False)

# Register Event Handlers
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe

# Connect with MQTT Broker
mqttc.connect(MQTT_BROKER, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL )


Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyMjMwMg==,paho.mqtt.python,370222302,273,NA,PierreF,359833,Pierre Fersing,,NA,2018-03-04T11:40:44Z,2018-03-04T11:40:44Z,"You code is quiet hard to read due to formatting issue. I'm assuming that your issue is that you receive no error nor the message is received ?
I see two potential issue:
* You don't start the loop (with loop_start or loop_forever)
* It seems your publisher terminate before waiting for message to be sent. publish() is asynchronous, when the function return the message may not yet be sent.

You may have a look to example (https://github.com/eclipse/paho.mqtt.python/tree/master/examples), especially client_sub and client_pub-wait that seems to match your current use case.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MDIyMjMwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDQ3ODgzNQ==,paho.mqtt.python,374478835,273,NA,Tanmayagarwal14,36722261,Tanmay Agarwal,,NA,2018-03-20T05:15:35Z,2018-03-20T05:15:35Z,"Hi thanks for reply.
I am able to publish the file as I was able to see it by subscribing the topic from the command line. 
But when I am running the subscribing part that time I am not able to read the file.
So I thing the problem is in receiving part.

I also include loop_start()

This is my code for publish:-

import paho.mqtt.client as mqtt

# Define Variables
MQTT_HOST = ""iot.eclipse.org"" #iot.eclipse.org
MQTT_PORT = 1883
MQTT_KEEPALIVE_INTERVAL = 45
MQTT_TOPIC = ""Device1""


def on_connect(mqttc, userdata, flags, rc):
        #Subscribe to a Topic
    mqttc.subscribe(MQTT_TOPIC, 0)
    print(""Connection returned result: ""+connack_string(rc))
        
    # Define on_publish event function
def on_publish(mqttc, userdata, mid):
    print ""Message Published...""
    print(""mid: "" +str(mid))
    mqttc.disconnect()
    
    # Initiate MQTT Client
mqttc = mqtt.Client(client_id=""LCESS"", clean_session=False)

    # Register publish callback function
mqttc.on_publish = on_publish
mqttc.on_connect = on_connect
mqttc.connect(MQTT_HOST, MQTT_PORT, MQTT_KEEPALIVE_INTERVAL)		
mqttc.loop_start()
# Publish message to MQTT Broker
f= open(""/home/chettiar/Desktop/mqtt/filesend/aa.txt"")
filecontent = f.read()
byteArr = bytes(filecontent)

file=mqttc.publish(MQTT_TOPIC,byteArr,0,True) 
file.wait_for_publish()   ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDQ3ODgzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/273,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDQ4OTQyOA==,paho.mqtt.python,374489428,273,NA,Tanmayagarwal14,36722261,Tanmay Agarwal,,NA,2018-03-20T06:24:47Z,2018-03-20T06:24:47Z,"Thanks. I solve the error now it working fine .
Thanks a lot.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3NDQ4OTQyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/274,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/274,paho.mqtt.python,299598579,274, publish.single and publish.multiple examples are not working ,hemantkamalakar,1947238,Hemant Kamalakar,hemant.kamalakar@gmail.com,CLOSED,2018-02-23T04:53:48Z,2018-02-23T10:11:42Z,"Hi,
Installed paho-mqtt using pip.
`pip install paho-mqtt`
Examples publish.single and publish.multiple are not working.

```import paho.mqtt.publish as publish
msgs = [{'topic':""paho/test/multiple"", 'payload':""multiple 1""},
    (""paho/test/multiple"", ""multiple 2"", 0, False)]
publish.multiple(msgs, hostname=""localhost"")
#publish.single(""paho/test/single"", ""payload"", hostname=""localhost"")
```
Error while publishing single message.

```Traceback (most recent call last):
  File ""test.py"", line 6, in <module>
    publish.single(""paho/test/single"", ""payload"", hostname=""localhost"")
AttributeError: 'module' object has no attribute 'single'
```
Error while publishing multiple messages.
```Traceback (most recent call last):
  File ""test.py"", line 5, in <module>
    publish.multiple(msgs, hostname=""localhost"")
AttributeError: 'module' object has no attribute 'multiple'
```

```
sudo pip show paho-mqtt
Name: paho-mqtt
Version: 1.3.1
Summary: None
Home-page: None
Author: None
Author-email: None
License: None
Location: /usr/local/lib/python2.7/dist-packages
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/274/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/274,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk0NDIxMw==,paho.mqtt.python,367944213,274,NA,PierreF,359833,Pierre Fersing,,NA,2018-02-23T08:35:40Z,2018-02-23T08:35:40Z,"Hi,

your installation is broken in some way. I've just trying your step and it works for me.
In addition, when I run pip show:
```
$ pip show paho-mqtt
Name: paho-mqtt
Version: 1.3.1
Summary: MQTT version 3.1.1 client class
Home-page: http://eclipse.org/paho
Author: Roger Light
Author-email: roger@atchoo.org
License: Eclipse Public License v1.0 / Eclipse Distribution License v1.0
Location: /home/pierref/.virtualenvs/tmp/lib/python2.7/site-packages
Requires: 
```

I've much more information like Summary, Home-page, Author, etc.

This make me think that your initial pip install failed. Did you have any error while installing ? I will try a guess, you had system crash closely after installation and all files are empty (/usr/local/lib/python2.7/dist-packages/paho/mqtt/publish.py is empty) ?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk0NDIxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/274,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk2NzAwMg==,paho.mqtt.python,367967002,274,NA,hemantkamalakar,1947238,Hemant Kamalakar,hemant.kamalakar@gmail.com,NA,2018-02-23T10:11:42Z,2018-02-23T10:11:42Z,"Thanks a lot.
Indeed my installation was broken. Uninstalled pip and installed it again and it is working fine now.
Thanks again.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM2Nzk2NzAwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/276,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/276,paho.mqtt.python,303390251,276,MQTT client fails to reconnect properly if connection is lost while heavily publishing on QoS 2,amrbekhit,7573225,Amr Bekhit,,CLOSED,2018-03-08T08:07:42Z,2019-01-17T08:07:17Z,"Hello,

I've got some code which is frequently publishing messages using QoS 2. I noticed that if the connection is lost during a transmission, the library will attempt to reconnect later on, but then immediately disconnect. This gets seen on the server side as follows (using mosquitto-1.4.15):
```
Mar 08 07:41:42 localhost mosquitto[10327]: New connection from xx.xx.xx.xx on port 1883.
Mar 08 07:41:42 localhost mosquitto[10327]: New client connected from xx.xx.xx.xx as cf98f1b4-293d-4514-ab6e-9731b1462ea5 (c1, k60, u'username').
Mar 08 07:41:42 localhost mosquitto[10327]: Sending CONNACK to cf98f1b4-293d-4514-ab6e-9731b1462ea5 (0, 0)
Mar 08 07:41:42 localhost mosquitto[10327]: Socket error on client cf98f1b4-293d-4514-ab6e-9731b1462ea5, disconnecting.
```
I can replicate the problem very regularly using the below script:

```
import paho.mqtt.client as mqtt
import logging
import threading
import random
import string
import time


class MQTTStressTest:
    USERNAME = ""username""
    PASSWORD = ""password""
    SERVER = ""mqttserver""

    def __init__(self):
        logging.getLogger().setLevel(logging.INFO)

        self.mqtt_client = mqtt.Client()
        self.mqtt_client.username_pw_set(self.USERNAME, self.PASSWORD)
        self.mqtt_client.on_connect = self.__mqtt_on_connect
        self.mqtt_client.on_disconnect = self.__mqtt_on_disconnect
        self.mqtt_client.on_message = self.__mqtt_on_message
        self.mqtt_client.on_publish = self.__mqtt_on_publish
        self.mqtt_client.parent = self

        self.is_connected = threading.Event()

    @staticmethod
    def __mqtt_on_publish(client, userdata, mid):
        logging.info(""Message {} published."".format(mid))

    @staticmethod
    def __mqtt_on_disconnect(client, userdata, rc):
        logging.warning(""============================MQTT disconnected."")

    @staticmethod
    def __mqtt_on_connect(client, userdata, flags, rc):
        self = client.parent
        if rc == mqtt.CONNACK_ACCEPTED:
            logging.info(""===========================MQTT connected."")
            self.is_connected.set()
        else:
            logging.error('MQTT connection failed: {}'.format(rc))

    @staticmethod
    def __mqtt_on_message(client, userdata, msg):
        self = client.parent
        logging.info(""Message received on topic {}: {}"".format(msg.topic, msg.payload.decode()))

    def main(self):
        self.mqtt_client.connect(self.SERVER)
        self.mqtt_client.loop_start()

        # Wait until we've connected
        self.is_connected.wait()

        # Now we can start to send lots of data
        while True:
            time.sleep(0.2)
            for i in range(20):
                try:
                    result, mid = self.mqtt_client.publish(""mqtt/stress"", self.random_string(200), 2)
                    if result == mqtt.MQTT_ERR_SUCCESS:
                        logging.info(""Message {} queued successfully."".format(mid))
                    else:
                        logging.error(""Failed to publish message. Error: {}"".format(result))
                except Exception as e:
                    logging.error(""EXCEPTION RAISED: {}"".format(e))

    def random_string(self, length):
        return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length))


if __name__ == '__main__':
    m = MQTTStressTest()
    m.main()
```


To replicate, carry out the following steps:

- Populate the constants at the top of the class with the MQTT broker details.
- Run the script. Open another MQTT client to observe the data being sent by the script.
- While the script is running, restart the mqtt broker. This simulates a broken connection.
- The script should now no longer be able to publish messages, despite continuously trying and failing to properly reconnect. The *publish* method continues to return success and allow messages to be added to the internal publish queue.

In order to successfully replicate the problem, I noticed that it is important to minimise the delay between stopping and starting the mqtt broker. In my case, running `systemctl restart mosquitto` was sufficient, but if I added a delay between starting and stopping the broker (e.g using `systemctl stop mosquitto.service && sleep 2 && systemctl start mosquitto.service`), the client would sometimes recover, but would then sporadically publish data rather than continously. It's obvious that the connection loss has permanently changed some state somewhere and the client doens't fully recover.

It is also important to use QoS 2 - I wasn't able to replicate the problem with QoS 0 or 1.

Tested using Python 3.5 and Paho.MQTT.Python 1.3.0 and 1.3.1.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/276/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,paho.mqtt.python,303746149,277,Unable to connect to AWS IoT gateway with presigned url,cetex,3268506,Oskar Stenman,,CLOSED,2018-03-09T07:13:50Z,2020-10-07T02:00:21Z,"Hi!

I'm trying to connect to AWS IoT Gateway with a presigned url but can't seem to get it working.

I use presigned URL's since the client has no authentication credentials to aws itself, so it asks our API and gets a presigned url back once an hour.

The presigned url's seems to work as expected (have tested on http://www.hivemq.com/demos/websocket-client/ and i can at least connect)

The url's look like this:
```
wss://g4j1j7awkxpu3u.iot.eu-west-1.amazonaws.com/mqtt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAJ4G6ST6PXIGUJGXQ%2F20180308%2Feu-west-1%2Fiotdevicegateway%2Faws4_request&X-Amz-Date=20180308T221105Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&X-Amz-Signature=9005ac10563d9867e9aab1c640658f6c288dadf42a3d70156b0e841dca3793d8&X-Amz-Security-Token=AgoGb3JpZ2luELr//////////wEaCWV1LXdlc3QtMSKAAncOIW1b0gtQ9o2Gdp2SOW6y8aqcuKEr6O9Q8XpTjPLv4UMLT5JRJX325K1cqMb5KD56xzDwpvkif48Tfgo5P%2BHHgTX304zyaagZD8tpjJBAdrYxrKPACqMrBSgUrh8vRHiM8Qvji7GENTxLTboT4ksaxpXKjgSUjuaIW3SGKmj6fTdL/1C3wCZwctq8lsil3jx93g7P3zEYirNJGxYLPC8cwF9v/5/Fg8JdPkwlLQCPQUTGfDWrg5GpqpDWKopL9A8iJiSdPaVRomiwcMlbARAp/Rbou%2Bz5JQaWX4Omw5UtNDlK0CV8NSSLINzIdJT1TEVKc7HaZhuzzSL/hmJsocUqowIIr///////////ARAAGgwxMzA0NzY2Nzk0MjkiDEqxaST0YhySwT0V8Sr3AeEP2loBVm0A8h3G2esC526%2BUddX%2B7nI1eQPA449q3D3jneH8AizMuL5f2S1TrRLE5hPW1aXRmgz5JFu3Yikm7ZpEpwarwCAwn9A0xuVGHQodHaU7WPcFcwsRwji88ppnvBcP23wR5yaWiScsMWkROycEI9GEXaqJWB5ORHqH1Oyy%2BSCqSagFGLjnKfswiNOTzkbTOgxJoe32DYLwwNhMR4kxfaBhVZXQtkrMfM1fBh%2ByLNapqN42ESJIk%2B9d9sp/QYp2V4S77f9x4LPB1PbilKVBXbKa4MZxxyDZV2Ytvbbevb9MfWaxbOt/I64BSCik9rcQEa738ww%2BemG1QU%3D
```

The code I use:
```
import uuid
import base64
from urllib.parse import urlparse
import paho.mqtt.client as mqtt

# here we call our api, authenticate and get a ws_url back.

urlparts = urlparse(ws_url)
print(""urlparse: {}"".format(urlparts))

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(""$SYS/#"")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

headers = {
        ""Host"": ""{0:s}:443"".format(urlparts.netloc), # I've tried to both include and exclude this
        ""Upgrade"": ""websocket"",
        ""Connection"": ""Upgrade"",
        ""Origin"": ""https://{0:s}:443"".format(urlparts.netloc), # I've tried to both include and exclude this
        ""Sec-WebSocket-Key"": base64.b64encode(uuid.uuid4().bytes),
        ""Sec-Websocket-Version"": ""13"",
        ""Sec-Websocket-Protocol"": ""mqtt""
}

client = mqtt.Client(transport='websockets')
client.enable_logger(logger)
client.on_connect = on_connect
client.on_message = on_message
client.ws_set_options(path=""{}?{}"".format(urlparts.path, urlparts.query), headers=headers)
client.connect(urlparts.netloc, 443)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
```

I've tried both with headers=headers and without and the error remains the same:
```
Traceback (most recent call last):
  File ""test-mqtt-client.py"", line 75, in <module>
    client.connect(urlparts.netloc, 443)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 935, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2706, in __init__
    self._do_handshake(extra_headers)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2786, in _do_handshake
    raise WebsocketConnectionError(""WebSocket handshake error"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error
```

If i add ""client.tls_set()"" the error changes to:
```
Traceback (most recent call last):
  File ""test-mqtt-client.py"", line 77, in <module>
    client.connect(urlparts.netloc, 443)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 935, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2706, in __init__
    self._do_handshake(extra_headers)
  File ""/home/oskar/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2758, in _do_handshake
    raise WebsocketConnectionError(""WebSocket handshake error, connection not upgraded"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error, connection not upgraded
```

I can't find any way to dump the actual websocket-connection's data with paho.mqtt, if i could do that and get the http request + the http reply before the connection is upgraded to websocket it would be relatively simple to figure out what's going on, at least until mqtt starts running.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjAxOTEyMw==,paho.mqtt.python,372019123,277,NA,cetex,3268506,Oskar Stenman,,NA,2018-03-10T10:18:09Z,2018-03-10T10:18:09Z,"Alright, i figured it out, the only header i need to set is Host, and it should not include the port (as that's not included in my signature)

```
import paho.mqtt.client as mqtt
from urllib.parse import urlparse

ws_url=""wss://g4j1j7awkxpu3u.iot.eu-west-1.amazonaws.com/mqtt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAJ4G6ST6PXIGUJGXQ%2F20180308%2Feu-west-1%2Fiotdevicegateway%2Faws4_request&X-Amz-Date=20180308T221105Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&X-Amz-Signature=9005ac10563d9867e9aab1c640658f6c288dadf42a3d70156b0e841dca3793d8&X-Amz-Security-Token=AgoGb3JpZ2luELr//////////wEaCWV1LXdlc3QtMSKAAncOIW1b0gtQ9o2Gdp2SOW6y8aqcuKEr6O9Q8XpTjPLv4UMLT5JRJX325K1cqMb5KD56xzDwpvkif48Tfgo5P%2BHHgTX304zyaagZD8tpjJBAdrYxrKPACqMrBSgUrh8vRHiM8Qvji7GENTxLTboT4ksaxpXKjgSUjuaIW3SGKmj6fTdL/1C3wCZwctq8lsil3jx93g7P3zEYirNJGxYLPC8cwF9v/5/Fg8JdPkwlLQCPQUTGfDWrg5GpqpDWKopL9A8iJiSdPaVRomiwcMlbARAp/Rbou%2Bz5JQaWX4Omw5UtNDlK0CV8NSSLINzIdJT1TEVKc7HaZhuzzSL/hmJsocUqowIIr///////////ARAAGgwxMzA0NzY2Nzk0MjkiDEqxaST0YhySwT0V8Sr3AeEP2loBVm0A8h3G2esC526%2BUddX%2B7nI1eQPA449q3D3jneH8AizMuL5f2S1TrRLE5hPW1aXRmgz5JFu3Yikm7ZpEpwarwCAwn9A0xuVGHQodHaU7WPcFcwsRwji88ppnvBcP23wR5yaWiScsMWkROycEI9GEXaqJWB5ORHqH1Oyy%2BSCqSagFGLjnKfswiNOTzkbTOgxJoe32DYLwwNhMR4kxfaBhVZXQtkrMfM1fBh%2ByLNapqN42ESJIk%2B9d9sp/QYp2V4S77f9x4LPB1PbilKVBXbKa4MZxxyDZV2Ytvbbevb9MfWaxbOt/I64BSCik9rcQEa738ww%2BemG1QU%3D""

urlparts = urlparse(ws_url)
# urlparts is now:
# ParseResult(scheme='wss', netloc='g4j1j7awkxpu3u.iot.eu-west-1.amazonaws.com', path='/mqtt', params='', query='X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIAJ4G6ST6PXIGUJGXQ%2F20180308%2Feu-west-1%2Fiotdevicegateway%2Faws4_request&X-Amz-Date=20180308T221105Z&X-Amz-Expires=900&X-Amz-SignedHeaders=host&X-Amz-Signature=9005ac10563d9867e9aab1c640658f6c288dadf42a3d70156b0e841dca3793d8&X-Amz-Security-Token=AgoGb3JpZ2luELr//////////wEaCWV1LXdlc3QtMSKAAncOIW1b0gtQ9o2Gdp2SOW6y8aqcuKEr6O9Q8XpTjPLv4UMLT5JRJX325K1cqMb5KD56xzDwpvkif48Tfgo5P%2BHHgTX304zyaagZD8tpjJBAdrYxrKPACqMrBSgUrh8vRHiM8Qvji7GENTxLTboT4ksaxpXKjgSUjuaIW3SGKmj6fTdL/1C3wCZwctq8lsil3jx93g7P3zEYirNJGxYLPC8cwF9v/5/Fg8JdPkwlLQCPQUTGfDWrg5GpqpDWKopL9A8iJiSdPaVRomiwcMlbARAp/Rbou%2Bz5JQaWX4Omw5UtNDlK0CV8NSSLINzIdJT1TEVKc7HaZhuzzSL/hmJsocUqowIIr///////////ARAAGgwxMzA0NzY2Nzk0MjkiDEqxaST0YhySwT0V8Sr3AeEP2loBVm0A8h3G2esC526%2BUddX%2B7nI1eQPA449q3D3jneH8AizMuL5f2S1TrRLE5hPW1aXRmgz5JFu3Yikm7ZpEpwarwCAwn9A0xuVGHQodHaU7WPcFcwsRwji88ppnvBcP23wR5yaWiScsMWkROycEI9GEXaqJWB5ORHqH1Oyy%2BSCqSagFGLjnKfswiNOTzkbTOgxJoe32DYLwwNhMR4kxfaBhVZXQtkrMfM1fBh%2ByLNapqN42ESJIk%2B9d9sp/QYp2V4S77f9x4LPB1PbilKVBXbKa4MZxxyDZV2Ytvbbevb9MfWaxbOt/I64BSCik9rcQEa738ww%2BemG1QU%3D', fragment='')

# Host header needs to be set, port is not included in signed host header so should not be included here.
# No idea what it defaults to but whatever that it seems to be wrong.
headers = {
        ""Host"": ""{0:s}"".format(urlparts.netloc),
}

client = mqtt.Client(transport='websockets')
client.on_connect = on_connect
client.on_message = on_message
client.ws_set_options(path=""{}?{}"".format(urlparts.path, urlparts.query), headers=headers)
client.tls_set()
client.connect(urlparts.netloc, 443)

```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjAxOTEyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAxNTMzNw==,paho.mqtt.python,490015337,277,NA,smoothwood,3354461,,ycm@outlook.com,NA,2019-05-07T09:54:53Z,2019-05-07T09:54:53Z,"@cetex Hi, your code is still working? I notice your added client.tls_set() in your second version of code, when I did the same thing, I got error: self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1056)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAxNTMzNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAyMjU3Nw==,paho.mqtt.python,490022577,277,NA,cetex,3268506,Oskar Stenman,,NA,2019-05-07T10:17:12Z,2019-05-07T10:17:12Z,"It did work for me, but i havent used this for about 10 months or so.

My project went stale.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAyMjU3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAyNDI1Ng==,paho.mqtt.python,490024256,277,NA,smoothwood,3354461,,ycm@outlook.com,NA,2019-05-07T10:23:21Z,2019-05-07T10:23:21Z,"Ok, it's not working for me somehow, but thanks anyway. I hope paho.mqtt will have something that allows to set presigned url when initiate client object ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDAyNDI1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMjY0MzU4OA==,paho.mqtt.python,632643588,277,NA,petergerten,17756065,,,NA,2020-05-22T11:27:48Z,2020-05-22T11:27:48Z,"does indeed not seem to work anymore
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMjY0MzU4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/277,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNDY0NzMzMA==,paho.mqtt.python,704647330,277,NA,scottjustin5000,2997998,Scott St Germain,,NA,2020-10-07T02:00:21Z,2020-10-07T02:00:21Z,"FWIW, the above works with python 2.7, but does fail with 3.9","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNDY0NzMzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,paho.mqtt.python,304438656,278,MQTT Protocol,johansutanto,6890315,Johan Sutanto,,CLOSED,2018-03-12T16:12:47Z,2018-04-14T14:42:16Z,"Paho is using TCP protocol, and my broker is using MQTT protocol, is there any chance i can go with mqtt protocol? (mqtt://localhost:1883)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM3NzE2Mw==,paho.mqtt.python,372377163,278,NA,jamesmyatt,1047337,James Myatt,,NA,2018-03-12T16:40:55Z,2018-03-12T16:40:55Z,"It does implement the MQTT _protocol_. What you're looking at is the _transport_ setting, which is TCP by default. ""mqtt"" and ""mqtts"" schemes translate to TCP transport.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM3NzE2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM4NjgzOQ==,paho.mqtt.python,372386839,278,NA,johansutanto,6890315,Johan Sutanto,,NA,2018-03-12T17:07:00Z,2018-03-12T17:07:00Z,"Thanks
Client(client_id="""", clean_session=True, userdata=None, protocol=MQTTv311, transport=""tcp"")
So change the tcp into mqtt?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjM4NjgzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjQwNjE5MQ==,paho.mqtt.python,372406191,278,NA,jamesmyatt,1047337,James Myatt,,NA,2018-03-12T18:00:30Z,2018-03-12T18:00:30Z,"As you have written it, you will get the MQTT protocol using a TCP socket. I think that's what you want.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjQwNjE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjUxNjEyOQ==,paho.mqtt.python,372516129,278,NA,johansutanto,6890315,Johan Sutanto,,NA,2018-03-13T01:31:18Z,2018-03-13T01:31:18Z,"Hmm, i dont think so,
Im using rabbitmq, which support mqtt in plugin, its bassically support, but it need mqtt://localhost:1883, ive been testing it.
Paho require tcp://localhost:1883, it works on mosquitto, but got error on rabbitmq, it say network error (5), ithing because tcp protocol is used by amqp in rabbitmq
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjUxNjEyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjUxNjk4Mg==,paho.mqtt.python,372516982,278,NA,johansutanto,6890315,Johan Sutanto,,NA,2018-03-13T01:36:08Z,2018-03-13T01:36:08Z,"Based on your comment, it cannot use mqtt://broker:1883 right?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjUxNjk4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjU0MTgzMA==,paho.mqtt.python,372541830,278,NA,swails,779022,Jason Swails,,NA,2018-03-13T04:16:23Z,2018-03-13T04:16:23Z,"As @Nzbuu said, MQTT is a communication protocol -- it specifies how messages should be formatted in order to conform to the specification.  MQTT specifically is lightweight (unlike, say HTTP), so the amount of data that needs to be sent on connection is minuscule by comparison.

Since MQTT is a strictly a protocol, it is completely abstracted from the transport technology used (think TCP or UDP, for example).  I've only ever used MQTT over a TCP connection, and I strongly suspect that's what you need here.

The URLs you're posting here are generally of the format:

``<scheme>://<hostname>:<port>``

``<scheme>`` is there primarily to tell the client what to do.  Different clients may interpret ``<scheme>`` differently.  For instance, ""https"" in web browsers indicates that the web browser should utilize the http protocol secured via a TLS-encrypted TCP connection (notice that, like MQTT, HTTP is nothing more than a protocol for communication rather than a transport technology itself).

So when you see ""mqtt://"" in relation to RabbitMQ, that's telling you to use the MQTT protocol.  This is most likely because a RabbitMQ broker supports more than 1 different protocol.  However, the MQTT library here doesn't support multiple protocols.  It supports MQTT (over TCP and websockets).  So ""mqtt://"" isn't supported -- after all, it's not like the client library here knows how to handle another protocol (like http).  I've never used ""tcp://"" either.  I've only specified the hostname (or IP address) and the port number.  Something like this:

```python
client = Client()
client.connect('localhost', port=1883)
```

> Based on your comment, it cannot use mqtt://broker:1883 right?

Correct -- nowhere do you use `mqtt://broker:1883`.  You use `broker` for the server location (hostname or IP address) and 1883 for the port.  The `mqtt://` part is simply assumed because you're using an MQTT library.  The TCP part is specified as the transport layer in the `Client` constructor (the only other supported option is `websockets`, although the current client library will interpret anything that's not `websockets` as TCP).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjU0MTgzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/278,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjYxMzEyMg==,paho.mqtt.python,372613122,278,NA,johansutanto,6890315,Johan Sutanto,,NA,2018-03-13T10:09:48Z,2018-03-13T10:09:48Z,Thanks for the detail,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3MjYxMzEyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,paho.mqtt.python,304456456,279,Roadmap for dropping support for Python 2,jamesmyatt,1047337,James Myatt,,CLOSED,2018-03-12T16:57:14Z,2024-01-07T23:29:58Z,"Is there any roadmap for dropping support for Python 2, along the lines of https://python3statement.org/?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNTg5Nw==,paho.mqtt.python,477525897,279,NA,vrst37,34431050,,,NA,2019-03-28T09:54:25Z,2019-03-28T09:54:25Z,"@PierreF @ralight what do you guys think about this? I think it makes sense, but I am not sure how many people will be affected by this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNTg5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzc1MTU4NA==,paho.mqtt.python,477751584,279,NA,ralight,79578,Roger Light,,NA,2019-03-28T20:07:16Z,2019-03-28T20:07:16Z,"I am not involved in the Paho Python code at the moment, but take the stance that if upstream doesn't support something then neither should I. Support for 2.7 should go before 1st January 2020. I'd also support the suggestion to drop it before/as part of the MQTT v5 work.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzc1MTU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49xB6f,paho.mqtt.python,1036263071,279,NA,knyghty,3871354,Tom Carrick,tom@carrick.eu,NA,2022-02-11T14:22:54Z,2022-02-11T14:22:54Z,"If there's any interest I'd be happy to work on this. In a similar vein, Python 3.6 is now out of support, so it could also be dropped.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49xB6f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vwpF_,paho.mqtt.python,1875022207,279,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2024-01-03T08:49:10Z,2024-01-03T08:49:10Z,"Python 2.7 support was implicitly dropped in 1.6.x.

Future versions will only support Python 3.7+: https://github.com/eclipse/paho.mqtt.python/blob/b29e31c8943702cd5fcc3dbddc505107c57eaaa8/pyproject.toml#L13","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vwpF_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/279,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEdAv,paho.mqtt.python,1880215599,279,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:29:58Z,2024-01-07T23:29:58Z,"I'm going to close this as the readme now states ""It supports Python 3.7+"" (and the next release should be out shortly).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEdAv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/280,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/280,paho.mqtt.python,305351235,280,on_disconnect gets call after network comes back online,cah-sachin,4475487,Sachin Burange,,CLOSED,2018-03-14T22:26:42Z,2023-12-07T20:56:38Z,"Hi,

We are facing issues of on_disconect get's called once network comes back online. Here are the steps, this is very rare but seen happening,

1. Cut off the network
2. Wait for some time (may be few minutes)
3. Connect to the network.

Once the mqtt connection get connected, sometime control moves down to disconnect method. I understand borker should be doing it, but do not understand why as network is back online again ?

Sachin
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/280/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/280,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNDMyOA==,paho.mqtt.python,381334328,280,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-14T14:50:15Z,2018-04-14T14:50:15Z,"I'm not sure to understand your problem.
My understanding of your step is:
* cut off the [physical] network, like unpluging the network cable
* wait some time
* reconnect the network
* on_disconnect is called

Which I don't see any issue in this. on_disconnect is called when the MQTT connection is broken (and also when connection fail to establish IIRC). The MQTT connection may be broken *after* the physical network is back online.

I'm not sure what you mean by ""Once the mqtt connection get connected"". What make you think the mqtt connection resumed ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNDMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/280,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCUO8,paho.mqtt.python,1846100924,280,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:56:38Z,2023-12-07T20:56:38Z,Closing due to lack of activity (and need for further information).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCUO8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/283,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/283,paho.mqtt.python,309608784,283,"document mistake, see the block function",jia-zhengwei,31585302,Jesse,,CLOSED,2018-03-29T03:44:07Z,2023-12-07T21:43:04Z,"message_callback_remove()
Remove a topic/subscription specific callback previously registered using **message_callback_add()**.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/283/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/283,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNDU4Ng==,paho.mqtt.python,381334586,283,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-14T14:54:11Z,2018-04-14T14:54:11Z,"I don't see where is the issue, could you explain what problem did you see ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNDU4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/283,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uChtX,paho.mqtt.python,1846156119,283,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:43:04Z,2023-12-07T21:43:04Z,Closing this due to inactivity. Please reopen if you do not believe this is fixed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uChtX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,paho.mqtt.python,309934094,284,Paho freezes if resuming session that starts with PUBREL,rbalik,8295543,Reuben Balik,,CLOSED,2018-03-29T23:26:04Z,2018-05-01T09:57:32Z,"We're working the emqtt broker which appears to resume persistent sessions at exactly the point in the QOS2 handshake where they left off. This means the broker may start the session by sending PUBREL instead of PUBLISH.
Paho doesn't reply to the PUBREL and so the session ends up getting stuck (we only have one message in flight at a time) and emqtt keeps sending the same PUBREL over and over again.

The emqtt behavior appears to be based on a very strict reading of the spec:
> If CleanSession is set to 0, the Server MUST resume communications with the Client based on state from the current Session (as identified by the Client identifier).
> The Session state in the Client consists of:
> QoS 2 messages which have been received from the Server, but have not been completely acknowledged.

mosquitto_sub handles this behavior by sending a PUBCOMP every time which seems to be a little more usable.

Here's the log output from paho:
```
INFO:root:Sending CONNECT (u1, p1, wr0, wq0, wf0, c0, k60) client_id=reubenpy2
INFO:root:Received CONNACK (1, 0)
INFO:root:Connected with result code 0
INFO:root:Session present: 1
INFO:root:Sending SUBSCRIBE (d0) [('#', 2)]
INFO:root:Received PUBREL (Mid: 32629)
INFO:root:Received SUBACK
INFO:root:subscribed with qos:(2,)
```

I put a quick patch together to change _handle_pubrel to always send a PUBCOMP back and I'll post a PR for that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDU4MjA5NQ==,paho.mqtt.python,380582095,284,NA,rosshettel,773995,Ross Hettel,ross@het.tel,NA,2018-04-11T20:17:17Z,2018-04-11T20:17:17Z,"We're seeing this too, any idea when the PR might get merged? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MDU4MjA5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMyNzIzMA==,paho.mqtt.python,381327230,284,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-14T12:54:35Z,2018-04-14T12:54:35Z,"In you test, could you confirm that:
* you are using cleanSession=0
* you restarted the paho client and not just a reconnection (i.e. the memory state is lost)

The issue that will come from your proposed change it that some QoS 2 messages may be lost... but I agree that it may be better that no longer working at all. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMyNzIzMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTM0MDY2Mg==,paho.mqtt.python,381340662,284,NA,rbalik,8295543,Reuben Balik,,NA,2018-04-14T16:18:57Z,2018-04-14T16:18:57Z,"Yes I can confirm both of those. We're running a persistent session and this issue occurs after a full restart so there is no state.
I guess the spec in this case assumes that the client will have some state saved at all times. I don't see a way to handle this case otherwise as there is no way to request a full retry of the message.
I agree it's not ideal, but seems like the only way to prevent the whole session from getting stuck.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTM0MDY2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzMxNDkyOQ==,paho.mqtt.python,383314929,284,NA,rbalik,8295543,Reuben Balik,,NA,2018-04-21T17:31:46Z,2018-04-21T17:31:46Z,"Hi @PierreF did you have a chance to think about this?
This is causing some issues in a project I'm working on. Would be good to get that patch merged in for an update.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MzMxNDkyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/284,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTYzNzY3MQ==,paho.mqtt.python,385637671,284,NA,PierreF,359833,Pierre Fersing,,NA,2018-05-01T09:57:32Z,2018-05-01T09:57:32Z,"Merged. I'll update documentation to state the limitation of current implementation: since we don't have persistent store, it's possible to loss some Qos2 message on client restart. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTYzNzY3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,paho.mqtt.python,310813679,287,on_message load multiple time ,connect2robiul,1263093,Robiul Islam,r_islam@live.com,CLOSED,2018-04-03T12:22:19Z,2023-12-07T21:17:41Z,"```
def on_message(client, userdata, message):
    with app.app_context():
        print(message.topic)

mqc = mqttc.Client()
mqc.on_connect = on_connect
mqc.on_message = on_message
mqc.on_publish = on_publish
mqc.connect('localhost',1883,60)
mqc.loop_start()
```

Publish code 

`mosquitto_pub -h localhost -t ccu -m ""{'device':'CO74','message':'hello',}""`



for this single line of code, print comment execute multiple time which case error 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODQwMDIwMw==,paho.mqtt.python,378400203,287,NA,rbalik,8295543,Reuben Balik,,NA,2018-04-03T21:09:30Z,2018-04-03T21:09:30Z,Have you tried a higher QOS level?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODQwMDIwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODQ4MTg0Mw==,paho.mqtt.python,378481843,287,NA,connect2robiul,1263093,Robiul Islam,r_islam@live.com,NA,2018-04-04T05:09:36Z,2018-04-04T05:09:36Z,no sure . can you please give me some example? ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODQ4MTg0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODcwNTE0OA==,paho.mqtt.python,378705148,287,NA,rbalik,8295543,Reuben Balik,,NA,2018-04-04T18:46:47Z,2018-04-04T18:46:47Z,"Here's a good article on MQTT QOS levels: https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels

For mosquitto_pub you can publish at QOS 2 by putting `-q 2` in the command.
In Paho when you subscribe to the topic, you'll want to subscribe at that QOS level too. The subscribe function takes a QOS level.

That being said, if you're at QOS 0 you probably shouldn't see repeat messages anyway so this might be unrelated.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODcwNTE0OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyMTg3OQ==,paho.mqtt.python,378821879,287,NA,connect2robiul,1263093,Robiul Islam,r_islam@live.com,NA,2018-04-05T05:10:06Z,2018-04-05T05:10:06Z,"`message.qos ` value is zero here  see both code carefully 

```
def on_message(client, userdata, message):
    with app.app_context():
        print(message.topic)
        x = yaml.load(message.payload)
        admin_data = [x]
        socketio.emit('admin', admin_data)

mqc = mqttc.Client()
mqc.on_connect = on_connect
mqc.on_message = on_message
mqc.on_publish = on_publish
mqc.connect('localhost',1883,60)
mqc.loop_start()

& 

def on_message(client, userdata, message):
    with app.app_context():
        print(message.topic)
        x = yaml.load(message.payload)
        admin_data = [x]
        socketio.emit('admin', admin_data)

mqc = mqttc.Client()
mqc.on_connect = on_connect
mqc.on_message = on_message
mqc.on_publish = on_publish
mqc.connect('localhost',1883,60)
mqc.loop_forever()
```


1st one shows multiple messages and emit & server work properly 
2nd one shows the single message but emit & server is not working 

I need single message with proper emit & python server ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM3ODgyMTg3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNTQ0NA==,paho.mqtt.python,381335444,287,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-14T15:06:22Z,2018-04-14T15:06:22Z,"Did you have on_message called multiple for all messages or only sometime ? i.e. it is reproducible 100% of the time.
If yes, I need more information on how to reproduce this issue, as I don't get multiple on_message delivery. (in fact if the answer is not, more information are still welcome, since I never seen this behaviour).

Especially your code sample is never complete and don't include part like your subscription. Could you come with a minimal example which exhibit your issue ?

The subscription part is very interesting, because that may be your issue. If you are doing two subscription like ""#"" and ""ccu"", then the broker is allowed to send the message twice which means on_message() will be called twice, one for each message.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTMzNTQ0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTM0MzQwMg==,paho.mqtt.python,381343402,287,NA,connect2robiul,1263093,Robiul Islam,r_islam@live.com,NA,2018-04-14T16:57:11Z,2018-04-14T16:57:11Z,I have multiple subscription. But broker is allow to sent only one subscription or topic at time. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MTM0MzQwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTY2MTE1OQ==,paho.mqtt.python,385661159,287,NA,PierreF,359833,Pierre Fersing,,NA,2018-05-01T12:36:35Z,2018-05-01T12:36:35Z,"I'm not sure to understand last sentence. From what I've seen on the MQTT standard, if you have multiple subscription that overlap the broker may send ""duplicated"" message.
Could you print the mid of the message that you get twice ? If the mid is not the same, this is not a paho bug. Maybe a broker bug, but for me it's a misuse of MQTT.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTY2MTE1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk2Mjc3Mw==,paho.mqtt.python,386962773,287,NA,connect2robiul,1263093,Robiul Islam,r_islam@live.com,NA,2018-05-07T05:42:52Z,2018-05-07T05:42:52Z,"`mosquitto_pub -h localhost -t ccu -m ""{'device':'CO74','message':'hello',}"" -q 2`

I am trying with this code but the problem cannot be solved. It also give 2 values with QoS 2 @rbalik ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk2Mjc3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk2NjEzMg==,paho.mqtt.python,386966132,287,NA,connect2robiul,1263093,Robiul Islam,r_islam@live.com,NA,2018-05-07T06:06:14Z,2018-05-07T06:06:14Z,I am not working with print section @PierreF . Give multiple messages on message section which is shown in the code ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4Njk2NjEzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/287,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCahD,paho.mqtt.python,1846126659,287,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:17:40Z,2023-12-07T21:17:40Z,"I'm going to close this due to inactivity. If you are still experiencing the issue then please feel free to reopen (but please try to provide a minimal, reproducible, example). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCahD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288,paho.mqtt.python,312991016,288,TimeoutError not handled,mlhales,228981,Mike Hales,,CLOSED,2018-04-10T16:06:45Z,2023-12-07T21:10:57Z,"https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L1470

When the client is connected using [connect_async()](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L808) and then loop_start() is called which runs [loop_forever()](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L2650) in its own thread. The socket connection which happens in [reconnect()](https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L895) can throw a TimeoutError which is not not caught, and cannot be caught by user code since the thread is owned by the library.

This can be fixed by catching socket.timeout in addition to socket.error, or by catching OSError.

socket.error is documented as a deprecated alias for OSError, but it does not seem to include TimeoutError which is a subclass of OSError","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjQzMDA1OQ==,paho.mqtt.python,522430059,288,NA,ncoghlan,1026649,Alyssa Coghlan,,NA,2019-08-19T06:23:27Z,2019-08-19T06:23:27Z,"It looks like this has been resolved in #291, so should this issue be closed as fixed in the v1.4.0 release?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjQzMDA1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs477-LT,paho.mqtt.python,1005576915,288,NA,prsousa,9092681,Paulo Sousa,,NA,2022-01-05T10:47:05Z,2022-01-05T10:47:05Z,"I'm having the same problem, but during `_packet_read`.

https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L2369-L2376
`self._sock_recv(1)` is raising a `TimeoutError` ([Errno 60] Operation timed out) and the thread created by `loop_start` crashes (without recovering).
Is this an issue of the library, or should it be handled on an upper level?

EDIT: I'm using TCP sockets.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs477-LT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/288,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCYbL,paho.mqtt.python,1846118091,288,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:10:57Z,2023-12-07T21:10:57Z,"I'm going to close this because the original issue appears to have been resolved (and there is a separate issue, #694, which looks like a better place to discuss the related issue in the comment from @prsousa). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCYbL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/290,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/290,paho.mqtt.python,314253030,290,publish.multiple causes a memory leak,berCamargos,928413,Bernardo,ber.camargos@gmail.com,CLOSED,2018-04-13T21:16:47Z,2023-12-24T00:17:31Z,"When using publish.multiple multiple times ( around once every seconds) in my code a memory leak appears, removing it makes the leak disappear.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/290/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/290,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXhp,paho.mqtt.python,1868396649,290,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:17:31Z,2023-12-24T00:17:31Z,Closing this due to its age and inactivity. Note that when logging this kind of issue please provide detailed info (ideally a sample app that duplicates the issue).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXhp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/292,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/292,paho.mqtt.python,315067955,292,subscribe.simple can‘t sub all messages at the same moment,sunshine725,29997858,,,CLOSED,2018-04-17T13:48:10Z,2018-04-18T06:00:47Z,"i want to use subscribe.simple as i need tls verification,but i don‘t know how many msg_count the topic would publish at the same moment，the subscribe.simple function connect itself and will disconnect after its subscription，then some messages will be ignored, how can i subscribe when i don't konw msg_count. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/292/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/292,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjAwODg4Ng==,paho.mqtt.python,382008886,292,NA,PierreF,359833,Pierre Fersing,,NA,2018-04-17T14:17:09Z,2018-04-17T14:17:09Z,"I'm not sure to understand your use case.

Using subscribe.simple allow to subscribe and receive N (fixed) messages from topics. By default it's only one.
If you need to process an unknown number of message subscribe.callback could be useful.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjAwODg4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/292,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjI3MTg2Ng==,paho.mqtt.python,382271866,292,NA,sunshine725,29997858,,,NA,2018-04-18T06:00:47Z,2018-04-18T06:00:47Z,thank you very much!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4MjI3MTg2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/293,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/293,paho.mqtt.python,316232309,293,Logging of UNSUBSCRIBE does not log the MID,barrierbank,13014105,,,CLOSED,2018-04-20T11:33:05Z,2023-12-07T21:26:07Z,"The logging of the UNSUBACK logs the MID but the logging of UNSUBSCRIBE does not log the MID.  It would be useful if it did because then the UNSUBACK can be correlated with the UNSUBSCRIBE message during debugging.

Suggested change:
```
client.py
2178c2178
<         self._easy_log(MQTT_LOG_DEBUG, ""Sending UNSUBSCRIBE (d%d) %s"", dup, topics)
---
>         self._easy_log(MQTT_LOG_DEBUG, ""Sending UNSUBSCRIBE (d%d, m%d) %s"", dup, local_mid, topics)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/293/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/293,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCc1R,paho.mqtt.python,1846136145,293,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:26:06Z,2023-12-07T21:26:06Z,Closing this due to inactivity (and it appears the issue was resolved). Please reopen if you do not believe this is fixed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCc1R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,paho.mqtt.python,318938454,295,what is the state of develop and fixes?,swails,779022,Jason Swails,,CLOSED,2018-04-30T15:47:19Z,2018-08-04T14:54:09Z,"I've brought up this confusion several times in the past, and it's causing me pains again:

*What is the current state of the develop and fixes branches?*

fixes does not merge cleanly into develop -- not even close.  Some changes go into fixes and some into develop (""features"" and ""bug fixes"" are not always cut-and-dry).  I can't find the discussion, but I was originally told the branching model we're using here is basically [this](http://nvie.com/posts/a-successful-git-branching-model/).

Except it's not.  It's broken.  The fixes branch needs to be *continuously* updated into develop, which doesn't happen.  Otherwise I find myself spinning my wheels trying to merge in diverged fixes and develop branches by hand, not knowing what to keep and what to reverse.

If a release were to be cut today, *there is no branch or even automated process that can generate the code that would be released.*  This is absolutely crazy.  I fail to see how this is a sustainable development strategy.  I can understand the value of the strategy in the link, but the purported need for a ""fixes"" branch is rather undercut by the incredibly slow release cycle -- we're talking about 1/year, with maybe a couple quick bugfix branches immediately after a release -- certainly nothing that justifies a dedicated branch to rapidly-releasable hotfixes.

I'm going to *try* and push my merge attempt fixes -> develop soon, but I would really like to never have to do this again; it's endlessly frustrating.  But nobody seems to have the time to maintain the branching structure being used here.  I'd really like to see this repo to move to something simpler and more manageable, even if it sacrifices aspects that quite frankly aren't even utilized, anyway.

<\/rant>","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQ0MTAzOQ==,paho.mqtt.python,385441039,295,NA,jamesmyatt,1047337,James Myatt,,NA,2018-04-30T15:50:23Z,2018-04-30T15:50:23Z,"I'm with you, @swails . Also this: https://github.com/eclipse/paho.mqtt.python/issues/141","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM4NTQ0MTAzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk0MTkxNQ==,paho.mqtt.python,396941915,295,NA,0181532686cf4a31163be0bf3e6bb6732bf,2615950,Alex R,,NA,2018-06-13T13:43:19Z,2018-06-13T13:43:19Z,"Same here. This library really looks abandoned. @PierreF can you please maybe give a hint on the support status of this? Because while there are other solutions available, the library remains the most popular choice for MQTT stuff with Python (despite lots of issues which pop up here and there if you need some beyond-the-scope-of-the-tutorial-application), and thus user base is quite big as it seems to me. While nobody here probably have time to devote themselves on maintainer role, it would be really nice to at least come to some stable state and at least setup some Travis CI for PRs and branches (I can do this).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk0MTkxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk1MDI3OA==,paho.mqtt.python,396950278,295,NA,swails,779022,Jason Swails,,NA,2018-06-13T14:07:44Z,2018-06-13T14:07:44Z,"@lyssdod - you need to look at the `develop` branch, not `master` (the latter is very rarely updated, the former, with `fixes` are those that are typically developed more regularly).

Both of those branches were changed as recently as May 1, 2018.  The library certainly doesn't get the attention it probably needs, but ""abandoned"" is an exaggeration.

> and at least setup some Travis CI for PRs and branches (I can do this).

Look at any of the PRs (or the PR page itself) and you'll see either a check or an X indicating the status of the Travis build.  This is already done.

The problem I'm raising here is that there's no single branch of truth that indicates the actual state of what would be released today.  You have to pull the relevant changes from `fixes` into `develop` and resolve the differences (and I have no idea which commits to `fixes` fits that description).

I'm not upset with the pace of development.  I'm upset with the fact that we can't reliably *test* or try the latest version before a release is cut (and I can't wrap my head around the actual branching strategy being employed here).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk1MDI3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk1MTY1NQ==,paho.mqtt.python,396951655,295,NA,jamesmyatt,1047337,James Myatt,,NA,2018-06-13T14:11:22Z,2018-06-13T14:11:22Z,"@swails, can you add a link to the Travis CI project in the README files? Also any other SaaS services being used.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk1MTY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk5MjE1MA==,paho.mqtt.python,396992150,295,NA,0181532686cf4a31163be0bf3e6bb6732bf,2615950,Alex R,,NA,2018-06-13T15:59:53Z,2018-06-13T15:59:53Z,"@jamesmyatt That's nice for the development perspective, but PyPi release uses `master` branch, which was updated quite a while ago (I'm speaking from the point of end user, who just wants to do `pip install paho-mqtt`). I understand the problem of merging, although I thought `develop` is the most recent branch","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5Njk5MjE1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA1Mzg3OA==,paho.mqtt.python,397053878,295,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-13T19:16:34Z,2018-06-13T19:16:34Z,"@lyssdod as other replied, this project is not abandoned but indeed could require more attention. Help is always welcomed :)
Master branch is the latest released code (that why PyPI ""uses"" master branch). There aren't release since then because: 1) it take time to do a release 2) I don't though that pending changes were important enough to justify a release.

@swails I'll try to come with a simpler branching models after the next feature release. Probably as you suggest keeping only develop branch and no longer doing fixes release (urgent hot fixes could always be cherry-picked on master in rare case that require it).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzA1Mzg3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NjI0MQ==,paho.mqtt.python,410446241,295,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-04T12:31:19Z,2018-08-04T12:31:19Z,"I suggest the following new workflow:

* kept only one branch ""master""
* Any commits, bug fixes or new feature go to master
* A new major release is made from master. As currently release are tagged on git

For a minor release:
* The change to include in the minor release are, like all other contribution, committed to master.
* A branch is created from the release tag
* Fixes that must be included are cherry-picked from master
* tag & release the new minor version
* (unsure if needed) merge this branch into master and delete the branch

This workflow will make minor release slightly more complicated (need to sort-out which commit to cherry-pick and resolve potential conflict). Be regarding the number of minor release I think this is acceptable and easier that current branching that should require constant merging of fixes branch into develop branch.
It will also cause master branch to no longer being the latest release as it's with current model. While this allow to see documentation of latest release from github (and not next release), I think this is acceptable and usually master branch is the next release to people are used to it.
In general it will ease contribution, as PR are mostly created for master branch.

If nobody object for this workflow, I will start using it with the next major release, which I hope will arrive soon.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0NjI0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODI2Nw==,paho.mqtt.python,410448267,295,NA,swails,779022,Jason Swails,,NA,2018-08-04T13:06:19Z,2018-08-04T13:06:19Z,"> (unsure if needed) merge this branch into master and delete the branch

This step doesn't make sense with cherry-picking fixes from master.  You would do this if you made a fix against a release branch and *also* wanted that fix in `master`.

But if you make the fix to master first, like I think you should (and you suggested), the way to propagate that fix to the necessary release branches is to cherry-pick (again, as you suggested).  You may have to resolve conflicts (but that would be true with merging release into master if you patched against the release version first).

With the exception of this one step, I like this workflow much better. 👍","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODI2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODM5OA==,paho.mqtt.python,410448398,295,NA,swails,779022,Jason Swails,,NA,2018-08-04T13:08:54Z,2018-08-04T13:08:54Z,"One other comment:

It may be that a fix is only needed in a release branch because a major refactor in master had the side-effect of fixing the bug in question.

Assuming that refactor was not desired in the release branch (probably true), then the fix would be created as a PR against the release branch, and nothing done to `master`.

In other cases, fixing master and cherry-picking is the right way to go, I think.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODM5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODQ0MA==,paho.mqtt.python,410448440,295,NA,swails,779022,Jason Swails,,NA,2018-08-04T13:09:38Z,2018-08-04T13:09:38Z,It also may be worth creating a new issue specifically for this proposal to increase its visibility.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ0ODQ0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/295,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ1NTAyNA==,paho.mqtt.python,410455024,295,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-04T14:54:08Z,2018-08-04T14:54:08Z,"Good idea, new issue created as #320. I'm closing this issue as #320 will fix this issue. Any further discussion should go to #320 to avoid 2 thread.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ1NTAyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/296,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/296,paho.mqtt.python,319854130,296,error: [Errno 32] Broken pipe,connect2robiul,1263093,Robiul Islam,r_islam@live.com,CLOSED,2018-05-03T09:51:23Z,2018-06-10T09:31:51Z,"error 

```
Traceback (most recent call last):
  File ""/usr/local/lib/python2.7/dist-packages/eventlet/wsgi.py"", line 564, in h                                                                                                                     andle_one_response
    write(b''.join(towrite))
  File ""/usr/local/lib/python2.7/dist-packages/eventlet/wsgi.py"", line 510, in w                                                                                                                     rite
    wfile.writelines(towrite)
  File ""/usr/lib/python2.7/socket.py"", line 334, in writelines
    self.flush()
  File ""/usr/lib/python2.7/socket.py"", line 303, in flush
    self._sock.sendall(view[write_offset:write_offset+buffer_size])
  File ""/usr/local/lib/python2.7/dist-packages/eventlet/greenio/base.py"", line 4                                                                                                                     03, in sendall
    tail += self.send(data[tail:], flags)
  File ""/usr/local/lib/python2.7/dist-packages/eventlet/greenio/base.py"", line 3                                                                                                                     94, in send
    return self._send_loop(self.fd.send, data, flags)
  File ""/usr/local/lib/python2.7/dist-packages/eventlet/greenio/base.py"", line 3                                                                                                                     81, in _send_loop
    return send_method(data, *args)
error: [Errno 32] Broken pipe

```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/296/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/296,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAzNDY0Ng==,paho.mqtt.python,396034646,296,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-10T09:31:50Z,2018-06-10T09:31:50Z,"The traceback show no code about paho-mqtt. This bug seems opened in the wrong project.
If it's indeed in paho-mqtt bug, feel free to reopen and provide more context. As is, we can't reproduce this bug.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAzNDY0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/297,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/297,paho.mqtt.python,319874613,297,Reconnect when host is changed,riccardoch,3284977,Riccardo Chiarini,,CLOSED,2018-05-03T11:01:27Z,2023-12-07T20:53:01Z,"In my application I have Master-Slave architecture, the slaves are connected to the master unit where _Mosquitto_ is running; if the Master is KO, a new Master is elected and the Slaves have to connect to the new broker. 

How can I create the new connection using the same client object? Paho doesn't offer a close method and `reinitialise()` allows only to reset the connection to the same Broker.

I tried to disconnect the client and to redefine the object, but often the socket to the old Broker is still opened.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/297/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/297,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAzNTM0MQ==,paho.mqtt.python,396035341,297,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-10T09:44:41Z,2018-06-10T09:44:41Z,"You should be able to re-call connect and provide another broker address. Please note that this will assume to be connected to the same/equivalent broker, so for example QoS 2 message waiting for pubcomp will resume as send pubrel, not send publish. If your two broker are not synchronized this will be an issue.

In this case, your last solution (disconnect and re-created a new Client() object) should work. Once disconnected your should not have a socket opened to old Broker. Your issue may be due to disconnect() being asynchronous. It queue the sending of disconnect message and actually close the socket once sent. Once the full disconnection is done, loop_forever() should return (or loop_stop() if you are using loop_start()/loop_stop()).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NjAzNTM0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/297,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCTLt,paho.mqtt.python,1846096621,297,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:53:01Z,2023-12-07T20:53:01Z,I'm going to close this because it appears the question has been answered and it's been inactive for some time.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCTLt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/298,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/298,paho.mqtt.python,320840550,298,paho client sends pubrel with dup flag,uboscolo,8389000,Umberto Boscolo,uboscolo@gmail.com,CLOSED,2018-05-07T15:06:02Z,2018-08-01T21:18:06Z,"Hi,

according to MQTT specs there should be no dup flag set for the PUBREL message (section 3.6.1-1 in mqtt 3.1.1 specs)

I see this statement where the pubrel is sent with Dup = True

elif m.state == mqtt_ms_wait_for_pubcomp:
                        m.timestamp = now
                        m.dup = True
self._send_pubrel(m.mid, True)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/298/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/298,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTcyNjczOQ==,paho.mqtt.python,409726739,298,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-01T21:18:06Z,2018-08-01T21:18:06Z,This is now fixed on fixes branch. Thanks for the report.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTcyNjczOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/300,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/300,paho.mqtt.python,322305133,300,Subcribe.simple() on empty topic,chathurangawijetunge,24654773,Chathuranga,chathurangawijetunge@gmail.com,CLOSED,2018-05-11T13:52:39Z,2023-12-07T20:54:33Z,"If we subcribe a new topic which have no data this function keeps looping no return.

How to set a time out","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/300/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/300,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCTnA,paho.mqtt.python,1846098368,300,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:54:33Z,2023-12-07T20:54:33Z,"I'm going to close this due to age/inactivity (and further detail, ideally an example, would be needed). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCTnA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/301,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/301,paho.mqtt.python,326084708,301,Run asynchronous consumer ,shaloba,8169292,,,CLOSED,2018-05-24T11:46:20Z,2023-12-24T00:02:16Z,"Hi ,

First of all I love your package, easy to use and with helpful documentation. 
I wish to use your package in asynchronous way in order to use it more efficiently. 
I didn't find anything beside the repository below   

https://github.com/mossblaser/aiomqtt

do you have something like that in your to do list or can suggest a better way to implement it ?


Thanks!


Shlomy.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/301/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/301,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWk1,paho.mqtt.python,1868392757,301,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:02:16Z,2023-12-24T00:02:16Z,"Closing this as the question is fairly vague (if asking this kind of thing please be specific and, ideally, include some code).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWk1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/302,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/302,paho.mqtt.python,326860875,302,install fails with python 3.5 on raspbian stretch (berryconda virtual environment),alexryan,372076,Alex Ryan,alexander.j.ryan@gmail.com,CLOSED,2018-05-27T23:30:55Z,2023-12-07T21:31:47Z,"**when I try to install via pip ...**

```
    (qt) pi@qacker:~ $ which python
    /home/pi/berryconda3/envs/qt/bin/python

    (qt) pi@qacker:~ $ python --version
    Python 3.5.4

    (qt) pi@qacker:~ $ pip install paho-mqtt
    Traceback (most recent call last):
      File ""/home/pi/berryconda3/envs/qt/bin/pip"", line 4, in <module>
        import pip
      File ""/usr/lib/python3/dist-packages/pip/__init__.py"", line 26, in <module>
        from pip.utils import get_installed_distributions, get_prog
      File ""/usr/lib/python3/dist-packages/pip/utils/__init__.py"", line 30, in <module>
        from pip._vendor.retrying import retry
    ImportError: No module named 'pip._vendor.retrying'
```

**when I try to build ...**

```
    (qt) pi@qacker:~/bitsy_gen3/dev-tools/qacker/paho.mqtt.python $ python setup.py install
    running install
    Traceback (most recent call last):
      File ""setup.py"", line 56, in <module>
        setup_requires=setup_requirements
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/core.py"", line 148, in setup
        dist.run_commands()
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/dist.py"", line 955, in run_commands
        self.run_command(cmd)
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/dist.py"", line 974, in run_command
        cmd_obj.run()
      File ""/usr/lib/python3/dist-packages/setuptools/command/install.py"", line 67, in run
        self.do_egg_install()
      File ""/usr/lib/python3/dist-packages/setuptools/command/install.py"", line 103, in do_egg_install
        cmd.ensure_finalized()  # finalize before bdist_egg munges install cmd
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/cmd.py"", line 107, in ensure_finalized
        self.finalize_options()
      File ""/usr/lib/python3/dist-packages/setuptools/command/easy_install.py"", line 305, in finalize_options
        'install_lib', ('install_dir', 'install_dir')
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/cmd.py"", line 287, in set_undefined_options
        src_cmd_obj.ensure_finalized()
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/cmd.py"", line 107, in ensure_finalized
        self.finalize_options()
      File ""/usr/lib/python3/dist-packages/setuptools/command/install_lib.py"", line 18, in finalize_options
        self.set_undefined_options('install',('install_layout','install_layout'))
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/cmd.py"", line 290, in set_undefined_options
        setattr(self, dst_option, getattr(src_cmd_obj, src_option))
      File ""/home/pi/berryconda3/envs/qt/lib/python3.5/distutils/cmd.py"", line 103, in __getattr__
        raise AttributeError(attr)
    AttributeError: install_layout
```


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/302/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/302,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODYxOTE1OA==,paho.mqtt.python,408619158,302,NA,ifduyue,568900,,,NA,2018-07-28T16:27:35Z,2018-07-28T16:27:35Z,"Seems more like an environment issue to me.
You're in a virtualenv but are using pip from /usr/lib/python3/","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODYxOTE1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/302,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCeeg,paho.mqtt.python,1846142880,302,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:31:47Z,2023-12-07T21:31:47Z,I'm going to close this due to inactivity. If you are still experiencing the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCeeg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/303,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/303,paho.mqtt.python,332039055,303,Paho does not initialize audio files after payload is received,netrosec,30176078,iosph,,CLOSED,2018-06-13T15:08:57Z,2021-08-16T22:52:11Z,"I think i just found a potential bug in paho.

Below is my python script that listens for incoming mqtt payloads and should play a sound file with 

> Sox os.system('play --no-show-progress %s --channels 2 synth %s' % (sound1, duration))

 depending on the publication from the client, but it doesn't.

Upon further investigation i discovered that when i put the call to initialize the sound file directly under the on_message function, the sound file plays. But if i make the statement conditional it fails to play without giving any error.

Here's my full code.

> 
```
> import paho.mqtt.client as mqtt
> from subprocess import Popen
> import os
> import sys
> import subprocess
> import time
> 
> 
> 
> mqtt_topic = ""light""
> mqtt_broker_ip = ""192.168.0.55""
> duration = 5  # second
> sound1 = ""/home/pi/on.wav""
> 
> client = mqtt.Client()
> 
> 
> def on_connect(client, userdata, rc):
>    
>     print ""Connected!"", str(rc)
>     
>  
>     client.subscribe(mqtt_topic)
>     
> def on_message(client, userdata, msg):
>     if msg.payload == ""0"":
>         os.system('play --no-show-progress %s --channels 2 synth %s' % (sound1, duration))
>         #os.system('aplay -d {} {}'.format(duration_time, song_path))
>     print ""Topic: "", msg.topic + ""\nMessage: "" + str(msg.payload)
>     
>     
> 
> 
> client.on_connect = on_connect
> client.on_message = on_message
> 
> client.connect(mqtt_broker_ip, 1883)
> 
> 
> client.loop_forever()
> client.disconnect()
> 
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/303/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/303,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NzQ3MQ==,paho.mqtt.python,399947471,303,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-25T13:14:58Z,2018-06-25T13:14:58Z,"Hi,

my guess it that you condition is never true. If you are using Python 3, IIRC, the payload will be bytes and not string. You must use ""msg.payload == b'0'"".

Also be aware that on_message callback should not hang for too long, as paho-mqtt is single-threaded it will block all network processing which may cause keep-alive the disconnect you. ""Too long"" depends on your keep-alive (60 seconds by default), so blocking for 1-10 seconds should be fine.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NzQ3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/303,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41oubm,paho.mqtt.python,899868390,303,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:52:10Z,2021-08-16T22:52:10Z,Closing because this appears to be mostly unrelated to Paho operation itself. If you still have a problem with the Paho Python client please reopen and add more details.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41oubm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/304,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/304,paho.mqtt.python,332265739,304,ModuleNotFoundError: No module named 'paho',ntdgo,37483861,NTDGO,,CLOSED,2018-06-14T06:21:09Z,2021-08-16T22:51:20Z,"I'm newbie. I installed paho-mqtt but when IDE PyCharm/Spyder can't find Module Paho
![image](https://user-images.githubusercontent.com/37483861/41394818-9ca63d78-6fd5-11e8-9738-6f2e6f03184a.png)
![image](https://user-images.githubusercontent.com/37483861/41394841-af59fbd0-6fd5-11e8-8326-cf4355ffbe1f.png)
Please help me!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/304/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/304,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzI4MzY0Mw==,paho.mqtt.python,397283643,304,NA,swails,779022,Jason Swails,,NA,2018-06-14T12:51:48Z,2018-06-14T12:51:48Z,You probably didn't install the paho-mqtt library to the same Python environment your IDE is using.  You almost certainly have more than 1 Python installation.  Installing it in one Python installation does not make it available in any other one.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5NzI4MzY0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/304,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouXX,paho.mqtt.python,899868119,304,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:51:20Z,2021-08-16T22:51:20Z,Closing because this has been answered.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouXX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/305,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/305,paho.mqtt.python,333808223,305,Insecure use of random.randint,gblewis1,40405644,Gavin Lewis,gavin.b.lewis@intel.com,CLOSED,2018-06-19T19:31:29Z,2018-08-01T21:24:24Z,"In client.py, random.randint is used in a cryptographic context.  It would be potentially more secure to use random.SystemRandom().randint.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/305/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/305,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NDAxNQ==,paho.mqtt.python,399944015,305,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-25T13:03:00Z,2018-06-25T13:03:00Z,"Hi,

thanks for the report, indeed the Websocket mask must use secure random generator. I will see to improve this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NDAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/305,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTcyODY2MA==,paho.mqtt.python,409728660,305,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-01T21:24:24Z,2018-08-01T21:24:24Z,Choose to use os.urandom(). It's simpler to generate a bytearray that using randint().,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTcyODY2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/306,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/306,paho.mqtt.python,334033881,306,Publisher and subscriber loosing messages,shaloba,8169292,,,CLOSED,2018-06-20T11:23:08Z,2023-12-07T21:02:45Z,"System:

```
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION=""Ubuntu 16.04.4 LTS""
NAME=""Ubuntu""
VERSION=""16.04.4 LTS (Xenial Xerus)""
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=""Ubuntu 16.04.4 LTS""
VERSION_ID=""16.04""
HOME_URL=""http://www.ubuntu.com/""
SUPPORT_URL=""http://help.ubuntu.com/""
BUG_REPORT_URL=""http://bugs.launchpad.net/ubuntu/""
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial
```

Paho MQTT:

`paho-mqtt==1.3.1`

issue: 

- ""client_sub.py"" example as subscriber  and publisher (two different processes)
- VerneMQ as the MQTT broker

I have encountered with the following wired issues: 

1. process 1 publish 10,000 messages to the broker (on_publish callback didn't called 10,000 times) and the subscriber didn't got all the messages that sent to the broker
2. process 1 publish 10,000 with sleep 1 second between each publish (on_published called 10,000 times) but the subscriber pulled only 80-80% of the messages
3. publish 10,000 messages with another librery (NodeJS) and all the messages have been written and read by the pub/sub processes. 

* why I loosing the data with the paho-mqtt ? 
Do I need to configure the paho-mqtt in a different way from the example ? does it suppose to support batch of data transformation ? 
Thanks in advanced!


Shlomy.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/306/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/306,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NTg0Mw==,paho.mqtt.python,399945843,306,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-25T13:09:32Z,2018-06-25T13:09:32Z,"Hi,

I could think of max_queued_messages_set, but by default it's unlimited. Could you confirm you are not calling it with value smaller than 10000 ?
Which QoS level are you using ? (even it this should not matter normally. You just need to make sure you are connected before trying a QoS=0 message).
Have you tested sending with the NodeJS code and receiving using the Python code (and the other way) ? This may give clue if the issue is on the sender or receiver side.

If possible, could you share the code of your Python pub/sub  ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0NTg0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/306,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCWBA,paho.mqtt.python,1846108224,306,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:02:45Z,2023-12-07T21:02:45Z,I'm going to close this due to inactivity (additional info requested but not provided). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCWBA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,paho.mqtt.python,335237211,307,About the reconnect  interval.,DavidDong33,16789589,Andy,,CLOSED,2018-06-25T02:11:50Z,2019-05-31T01:54:35Z,"I want it to keep re-connect, how to set minRetryInterval and maxRetryInterval? 
my setting now is:
automaticReconnect = 1;
cleansession = 0;	
keepAliveInterval = 60;
connectTimeout=30
retryInterval=0
minRetryInterval=1
maxRetryInterval=32768","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0Mzc4NQ==,paho.mqtt.python,399943785,307,NA,PierreF,359833,Pierre Fersing,,NA,2018-06-25T13:02:13Z,2018-06-25T13:02:13Z,"Hi,

I'm not sure to understand what your settings are. None of those variable name exists in this project.

That being said, paho.mqtt.python does support automatic reconnect which is enabled by default if you are using loop_forever()/loop_start(). When using manual loop(), you will need to call reconnect yourself.

About possible correspondence to minRetryInterval and maxRetryInterval there is a reconnect_delay_set that allow you to specify the shortest and longest delay between two reconnect try. Note that it's the delay between two reconnect, so if you set max_delay to 32768 it means that reconnect may wait 32768 seconds (or ~9 hours) before retrying. The re-connection process will re-attempt forever (until you either explicitly call disconnect() or - if using loop_start() - you explicitly call  loop_stop())","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDM5OTk0Mzc4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDE0MzgxNQ==,paho.mqtt.python,400143815,307,NA,DavidDong33,16789589,Andy,,NA,2018-06-26T01:07:41Z,2018-06-26T01:07:41Z,"Thank you for your reply.
I want to know:
How it do re-connect and never don't stop.(when it disconnect).
Maybe some flag or parameter cand set?!
(I use paho.mqtt  c code)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDE0MzgxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDE0NTM5MA==,paho.mqtt.python,400145390,307,NA,DavidDong33,16789589,Andy,,NA,2018-06-26T01:18:06Z,2018-06-26T01:18:06Z,"Sorry, I post wrong place.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMDE0NTM5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/307,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzU0NjYyMw==,paho.mqtt.python,497546623,307,NA,lincoln310,7071490,lincoln,,NA,2019-05-31T01:54:35Z,2019-05-31T01:54:35Z,"@DavidDong33 
MQTTAsync_connectOptions conn_opts = MQTTAsync_connectOptions_initializer;
conn_opts.automaticReconnect = true;
MQTTAsync_connect(client, &conn_opts)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NzU0NjYyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,paho.mqtt.python,337240935,308,Does this library support connecting to mqtt cluster?,tjmcclure0501,10501891,Tim McClure,tjmcclure0501@gmail.com,CLOSED,2018-06-30T20:31:36Z,2024-01-07T23:05:01Z,Does this library support connecting to a mqtt cluster - it is not mentioned in the documentation - it is a hard requirement for us.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTU5NDc2Ng==,paho.mqtt.python,401594766,308,NA,jamesmyatt,1047337,James Myatt,,NA,2018-07-01T09:19:29Z,2018-07-01T09:19:29Z,Is there anything about the interface between your implementation of a cluster of MQTT brokers and the MQTT clients that is different from just a regular interface?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMTU5NDc2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMjc5NzU4MA==,paho.mqtt.python,402797580,308,NA,tjmcclure0501,10501891,Tim McClure,tjmcclure0501@gmail.com,NA,2018-07-05T17:32:55Z,2018-07-05T17:32:55Z,I am trying to leverage an MQTT cluster with 3 nodes.  MQTT packages in other lang such as node https://www.npmjs.com/package/mqtt allow for the passing in of a list of MQTT urls and handle reconnecting to another MQTT server if the first one goes down.  This library does not support the passing of multiple URLS.  Is there a document way to handle failover using this library?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwMjc5NzU4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjk5MDEyNQ==,paho.mqtt.python,406990125,308,NA,gustaebel,878270,Lars Gustäbel,lars@gustaebel.de,NA,2018-07-23T09:04:31Z,2018-07-23T09:04:31Z,"```python
import random
from paho.mqtt.client import *


class ClusterClient(Client):
    """"""A subclass of paho.mqtt.Client that supports connecting to a cluster of
       mqtt brokers. connect() and connect_async() additionally accept a list
       of hostnames or host/port tuples:

           connect(""host1"")

           connect([""host1"", ""host2"", ""host3""]) # use default port 1883

           connect([""host1"", (""host2"", 8883), (""host3"", 8883)])

       Hosts to connect to are chosen randomly. If a host disappears the client
       automatically connects to another host from the list.
    """"""

    def __init__(self, client_id="""", clean_session=True, userdata=None,
            protocol=MQTTv311, transport=""tcp""):
        super().__init__(client_id, clean_session, userdata, protocol, transport)
        self._hosts = []

    def connect_async(self, host, port=1883, keepalive=60, bind_address=""""):
        if isinstance(host, (list, tuple)):
            self._hosts = [(t, 1883) if isinstance(t, str) else t for t in host]
        else:
            self._hosts = [(host, port)]

        for host, port in self._hosts:
            if host is None or len(host) == 0:
                raise ValueError('Invalid host.')
            if port <= 0:
                raise ValueError('Invalid port number.')

        host, port = random.choice(self._hosts)

        super().connect_async(host, port, keepalive, bind_address)

    def reconnect(self):
        hosts = self._hosts[:]
        random.shuffle(hosts)
        while True:
            self._host, self._port = hosts.pop(0)
            try:
                return super().reconnect()
            except socket.error:
                if not hosts:
                    raise
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwNjk5MDEyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/308,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbHb,paho.mqtt.python,1880207835,308,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:05:01Z,2024-01-07T23:05:01Z,"I'm going to close this because it looks like a solution has been proposed (alternatives include using `on_pre_connect` or implement via DNS). 

It would be possible to add the ability to specify multiple hosts but that creates further complications. If those hosts are not clustered then they will have differing session state stores...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbHb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/309,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/309,paho.mqtt.python,338057312,309,Possible for messages to forgotten by paho but never marked as published,ZombieFoodDan,5510884,,,CLOSED,2018-07-03T21:16:40Z,2018-09-02T11:40:07Z,"I'm having problems any time I start trying to rely on MQTTMessageInfo::is_published() or ::wait_for_publish(). I inevitably get hung up eventually when testing in poor network conditions.

It looks like msg is popped from _out_messages but then there is an entire code path that returns without setting the message as published, so if you actually rely on the publish status in your code you can get hung up forever waiting for a message that paho has already forgotten due to the pop().

It seems like the _set_as_published() line should likely happen before the entire qos > 0 section, immediately after the pop()? (Some might even argue before the pop().)


```
    def _do_on_publish(self, idx, mid):
        with self._callback_mutex:
            if self.on_publish:
                with self._in_callback:
                    self.on_publish(self, self._userdata, mid)

        msg = self._out_messages.pop(idx)
        if msg.qos > 0:
            self._inflight_messages -= 1
            if self._max_inflight_messages > 0:
                rc = self._update_inflight()
                if rc != MQTT_ERR_SUCCESS:
                    return rc
        msg.info._set_as_published()
        return MQTT_ERR_SUCCESS
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/309/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/311,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/311,paho.mqtt.python,339062433,311,Possible for messages to get stuck in mqtt_ms_publish state,ZombieFoodDan,5510884,,,CLOSED,2018-07-06T20:29:34Z,2023-12-07T20:59:23Z,"_handle_connack is the only place that will publish messages that are in a state of mqtt_ms_publish (that I've found), which seems like it should be fine since we only put them in that state when we are disconnected.

When playing around with packet loss, I've gotten myself into a state where my code is waiting on a message to be published that is in the state of mqtt_ms_publish but we are already connected, so it will never publish.

I don't really know exactly how to trigger this state but I can do it fairly consistently. For now I've just abstracted the publishing loop from _handle_connack and reused it in _message_retry_check in my copy of paho, but that seems like a hack rather than the correct fix. (It does seem to fix my issue though.)

Possibly this was what the person who submitted issue 280 was trying to get at.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/311/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/311,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCVB9,paho.mqtt.python,1846104189,311,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:59:23Z,2023-12-07T20:59:23Z,">but I can do it fairly consistently

It would be great if you could provide a reproducible example?

I'm going to close this for now due to it's age (the library has changed significantly in the interim) ; if you are still encountering the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCVB9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/312,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/312,paho.mqtt.python,340199191,312,Topic tutple not correctly unpacked,nicola-lunghi,25422924,Nicola Lunghi,,CLOSED,2018-07-11T11:19:53Z,2018-07-11T11:21:45Z,"https://github.com/eclipse/paho.mqtt.python/blob/e9914a759f9f5b8081d59fd65edfd18d229a399e/src/paho/mqtt/client.py#L1208

If the topic list is passed as a tuple this doesn't work.... add

```
or isinstance(topic, tuple)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/312/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,paho.mqtt.python,340985837,313,MQTT5 Status,AtosNicoS,37442184,Nico,,CLOSED,2018-07-13T11:35:53Z,2021-07-22T01:21:47Z,"Hi,
I was unable to find any status about a version for mqtt5. Is there anything planned/working on? Is the code public yet?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTU3MjQxMg==,paho.mqtt.python,409572412,313,NA,NicoHood,6888294,NicoHood,,NA,2018-08-01T13:22:00Z,2018-08-01T13:22:00Z,@PierreF @jamesmyatt @ralight Could anyone of you please give some details if mqtt5 is in development or not yet planned. That is an important factor when designing new mqtt applications. I'd possibly wait for version5 when i know its coming sooner than later. :),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTU3MjQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTkxOTUxMA==,paho.mqtt.python,409919510,313,NA,NicoHood,6888294,NicoHood,,NA,2018-08-02T13:07:07Z,2018-08-02T13:07:07Z,"@icraggs Could you maybe tell me more about the Python client here:
https://github.com/eclipse/paho.mqtt.testing/blob/master/interoperability/mqtt/clients/V5/main.py

Is this one fully functional? Why is it not merged here?

I am searching for an mqtt library that supports persistent session. Mqtt5 is not top prio, but nice. And it seems that this paho library here does not support this feature, nor Mqtt5. So I am wondering what would be an argument for/against using the library in the test suit?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwOTkxOTUxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA3NDk3MQ==,paho.mqtt.python,410074971,313,NA,ralight,79578,Roger Light,,NA,2018-08-02T21:34:35Z,2018-08-02T21:34:35Z,"I'm not currently able to work on the Paho project, so can't promise MQTT 5 support from me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA3NDk3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA4NTY1OQ==,paho.mqtt.python,410085659,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-08-02T22:18:51Z,2018-08-02T22:18:51Z,"@NicoHood there's no reason why you couldn't use the Python client in the test repo, it's entirely up to you of course.  I added MQTT V5 support as part of creating a broker that client libraries could test with.

Why isn't it merged here?  That's for historical reasons - it was a project of my own which I used for test purposes.  It's fairly complete as you might see from the client_test.py and client_test5.py broker test programs which use it.  The API style is different of course, I tended to reimplement the first Java MQTT API in various languages to give a 'family' feel, for better or worse.  

I'm motivated to add V5 support to this Python client too, and may well get around to it before Pierre.  Of course, we're always open to PRs from anyone who would like to contribute too!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDA4NTY1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ3OTk5NA==,paho.mqtt.python,410479994,313,NA,NicoHood,6888294,NicoHood,,NA,2018-08-04T21:55:47Z,2018-08-04T21:55:47Z,"That sounds good! I would recommend to use the **better API**. We do not want to maintain both, even though compatibility is nice. I'd personally want to use the better API that is well supported across the whole paho project. Do you have any compiled docs for your current v5 library? Maybe we can just 'transfer' it here, and its all done.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDQ3OTk5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDY2NzQyOA==,paho.mqtt.python,410667428,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-08-06T10:44:17Z,2018-08-06T10:44:17Z,"I don't think it's a question of which is the better API, as different people will always have different opinions.  Whichever API is used, there will be outstanding issues or enhancements which could be deal-breakers for different situations.

My plan was to submit an MQTT V5 update for this API.    Are there particular features of MQTT V5 that you are interested in?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDY2NzQyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDY3NzMyMw==,paho.mqtt.python,410677323,313,NA,NicoHood,6888294,NicoHood,,NA,2018-08-06T11:27:43Z,2018-08-06T11:27:43Z,"Okay that sounds nice.

The features that I'd like to use are:
* Message persistence (retrieve stored messages >= QoS 0 with a persistant session) -> not a V5 feature, but still missing
* Message Properties
* Time to live for messages (Message expiry)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDY3NzMyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNjU2OTYzMQ==,paho.mqtt.python,416569631,313,NA,AtosNicoS,37442184,Nico,,NA,2018-08-28T12:44:06Z,2018-08-28T12:44:06Z,@icraggs Any updates on this?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNjU2OTYzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTEyNjI4Mg==,paho.mqtt.python,419126282,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-06T14:58:48Z,2018-09-06T14:58:48Z,"@AtosNicoS Not yet I'm afraid.  I'm finishing off the Paho C client V5 support, then I'll get to look at this one.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxOTEyNjI4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzk0MzE5NQ==,paho.mqtt.python,423943195,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-24T11:23:30Z,2018-09-24T11:23:30Z,"I'm starting to look at this, this week.  If anyone else is looking, please let me know so we don't duplicate :-)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMzk0MzE5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDI4NTc2MQ==,paho.mqtt.python,424285761,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-25T10:14:32Z,2018-09-25T10:14:32Z,"I'm making the changes in https://github.com/icraggs/paho.mqtt.python before creating the PR, if anyone wants to take a look.  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDI4NTc2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDI5OTE1Mg==,paho.mqtt.python,424299152,313,NA,jamesmyatt,1047337,James Myatt,,NA,2018-09-25T11:01:15Z,2018-09-25T11:01:15Z,"Is it worth doing things like dropping support for old versions of Python (e.g. <3.5) and all of the associated compatibility code, before making a big change like this?

(https://github.com/eclipse/paho.mqtt.python/issues/279)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDI5OTE1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMDE1OQ==,paho.mqtt.python,424300159,313,NA,AtosNicoS,37442184,Nico,,NA,2018-09-25T11:04:43Z,2018-09-25T11:04:43Z,"I'd say yes. I personally would also drop python2 support, as nobody should develop a new mqtt5 infrastructure in python2. That would be the time to migrate both. If it simplifies the code, makes it better maintainable, readable and less error-prone, I'd go for it. Good idea.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMDE1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMTc5NA==,paho.mqtt.python,424301794,313,NA,Monarda,22151237,Ivan Finch,ivan.finch@stfc.ac.uk,NA,2018-09-25T11:09:34Z,2018-09-25T11:09:34Z,"I'm stuck on Python 2.7.2 (a long story) for now, so I'd personally appreciate retaining backward compatibility there. But obviously do what's better for the overall health of the project.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMTc5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMyNDE0NQ==,paho.mqtt.python,424324145,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-25T12:32:01Z,2018-09-25T12:32:01Z,I'm going to leave that decision to the project maintainers - my aim is just to add the V5 support.  I'll make the basic V5 function work and then submit a PR for review/comments.   Quite a lot of the V5 code is in separate modules so the main module isn't getting more complication than it needs.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMyNDE0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDczOTk5OQ==,paho.mqtt.python,424739999,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-26T14:37:35Z,2018-09-26T14:37:35Z,"I've created the initial changes to allow basic MQTT V5 to work, here: 

https://github.com/icraggs/paho.mqtt.python/commit/d2d62a169426273449cfd14294591f9b9b8935a5

An example program to show how this works is here: 

https://github.com/icraggs/paho.mqtt.python/blob/master/src/test_mqttv5.py

(this program works using the V5 broker in https://github.com/eclipse/paho.mqtt.testing).  I reused some code from my previous Python implementation, with few changes at the moment.

(@AtosNicoS sorry your previous comments have been lost because I redid the commit from the proper base level, 1.4.  I have an email with them in though, and have taken note.  Thanks!)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDczOTk5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDk3NjA1NA==,paho.mqtt.python,424976054,313,NA,AtosNicoS,37442184,Nico,,NA,2018-09-27T06:40:01Z,2018-09-27T06:40:01Z,"So I did another quick review. Not all of my comments might make sense to you. I thought it would be better to write down my ideas than maybe missing something.

Overall the PR looks extremely good to me and also simple to review. The diff is quite simple (did not expect this) and the added files are only a few. Good work!

It would be interesting to me what features are still missing from the spec. They might be no prio1 or required at all. What I wish for is (maybe another separate PR) persistant session support. As far as I know this is not yet supported. Did you also reflect that in the connection properties? I remember you can tell the broker what mqtt features your support and what not.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDk3NjA1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTAzODE3OA==,paho.mqtt.python,425038178,313,NA,icraggs,10279016,Ian Craggs,,NA,2018-09-27T10:20:03Z,2018-09-27T10:20:03Z,"I realised that that PR doesn't work in Python 2, only Python 3.  I'm working on that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNTAzODE3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDUxMTMzMg==,paho.mqtt.python,450511332,313,NA,petersilva,394117,Peter Silva,,NA,2018-12-29T18:28:18Z,2018-12-29T18:28:18Z,"where is a good place to talk about this? just let me know if this is the wrong one...

I just tried out @icraggs branch, with a simple pub/sub pattern.  environment: EMQ as a broker on localhost.  result: subscriber connection in v5 does not succeed.

Did the obvious similar things with @icraggs  C client.  worked perfectly.

code for the publisher:
```
import paho.mqtt.client as mqtt
from paho.mqtt.properties import Properties
from paho.mqtt.packettypes import PacketTypes

client = mqtt.Client(protocol=mqtt.MQTTv5)

client.connect( 'localhost' )

i=0
while i < 10:
    print( ""message with index %d"" % i )
    props = Properties(PacketTypes.PUBLISH)
    props.UserProperty = ( 'aname', 'avalue' )
    props.UserProperty = ( 'i', '%d' % i )
    result = client.publish(""mytopic"", ""yup. this is a payload"", qos=1, properties=props  )
    i += 1

client.disconnect()

```

code for the subscriber:

```
import paho.mqtt.client as mqtt
from paho.mqtt.properties import Properties
from paho.mqtt.packettypes import PacketTypes

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.subscribe(""mytopic"")

def on_message(client, userdata, msg):
    print( ""on_message"", userdata )
    print( ""topic: "", msg.topic ) 
    print( ""properties: "", str(msg.properties) )
    print( ""payload: "", msg.payload.decode(""utf-8"") )
    
client = mqtt.Client(protocol=mqtt.MQTTv5)
#client = mqtt.Client()

client.on_connect = on_connect
client.on_message = on_message

print('about to connect')
client.connect( 'localhost' )
print('done connect')

client.loop_forever()

```
the on_connect plugin never triggers when the MQTTv5 flag is set.
so the subscription does not happen.  If I remove the protocol flag, connection
succeeds, but the properties are empty (as one would expect from v < 5.)

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDUxMTMzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDUyNTk1OQ==,paho.mqtt.python,450525959,313,NA,petersilva,394117,Peter Silva,,NA,2018-12-29T22:47:08Z,2018-12-29T22:47:08Z,"the details of using the c client:
publish:

`./paho_c_pub mytopic --message hoho -V 5 --user-property lala hoho
`
subscribe 
 
`./paho_c_sub mytopic -V 5 -v`

When I use the c subscriber with the python publisher, the properties do not show up.  So I suspect the publish in python isn't working either.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MDUyNTk1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjgzNDU0NA==,paho.mqtt.python,452834544,313,NA,icraggs,10279016,Ian Craggs,,NA,2019-01-09T19:52:44Z,2019-01-09T19:52:44Z,Hi.  I'm working on the Java client release (https://github.com/eclipse/paho.mqtt.java/milestone/2) at the moment as my top priority.  I'll get back to this when I can.  I'm happy to have any help.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1MjgzNDU0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/313,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uebu,paho.mqtt.python,884598510,313,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:21:47Z,2021-07-22T01:21:47Z,MQTT v5 support was released in v1.5.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uebu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,paho.mqtt.python,344310575,314,Date for next pip release?,vrst37,34431050,,,CLOSED,2018-07-25T06:33:16Z,2018-09-03T08:55:03Z,"Hello all,
When is the next pip release? 
Last time the library binary was released to pip was ""Oct 9, 2017"", and I was wondering when the next release is going to be?

There are features added to library that are still not released to pip and I would like to use them. 

I can help releasing the library, if someone helps me for the first time.

Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODAxODQ1OQ==,paho.mqtt.python,408018459,314,NA,PierreF,359833,Pierre Fersing,,NA,2018-07-26T08:24:36Z,2018-07-26T08:24:36Z,"I'm quite lagging in processing issues of paho. I'm will work to catch-up and make a release (at least fixes, but I'll aim for a feature release) during the next week (think release done 4 or 5 August).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODAxODQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY3NTEwOA==,paho.mqtt.python,415675108,314,NA,HaraldGustafsson,3320413,Harald Gustafsson,,NA,2018-08-24T07:22:46Z,2018-08-24T07:22:46Z,"Have you stumbled on any issues or is the next release still soon available. I wanted the extended support for asyncio loop. I can work with the develop branch for now, but good to know if I use features of that branch it will be easily available in deployments. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY3NTEwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY3OTUxNA==,paho.mqtt.python,415679514,314,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-24T07:42:20Z,2018-08-24T07:42:20Z,The PR #310 took more time that I expected and my vacation didn't helped. I won't be able to work this week-end but I will try to make a release for the end of August or early September. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY3OTUxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY4MzY1NQ==,paho.mqtt.python,415683655,314,NA,HaraldGustafsson,3320413,Harald Gustafsson,,NA,2018-08-24T07:59:52Z,2018-08-24T07:59:52Z,"Thanks, I can work with the develop branch during my project development, just did not want to depend on something that is not going to be official.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTY4MzY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkyNzEzOA==,paho.mqtt.python,417927138,314,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T12:23:25Z,2018-09-02T12:23:25Z,Release 1.4.0 was done few minutes ago.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkyNzEzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/314,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODA0Nzc1Ng==,paho.mqtt.python,418047756,314,NA,jamesmyatt,1047337,James Myatt,,NA,2018-09-03T08:55:03Z,2018-09-03T08:55:03Z,"Well done, @PierreF ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODA0Nzc1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316,paho.mqtt.python,344747879,316,Client.connect() throws exception on providing URL scheme mqtt://**:1883,itsgk92,12249040,Arvindh,,CLOSED,2018-07-26T08:38:46Z,2021-07-22T10:41:04Z,"When I try connecting to brocker with fully formed URL it gives socket stream error on get address info

socket.gaierror: [Errno -2] Name or service not known

Stack trace: 

   client.connect(broker_url)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 895, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/usr/local/lib/python2.7/socket.py"", line 557, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODAyMzUxNg==,paho.mqtt.python,408023516,316,NA,itsgk92,12249040,Arvindh,,NA,2018-07-26T08:42:27Z,2018-07-26T08:42:27Z,Okay! I noted the similar issue here on JAVA branch! https://github.com/eclipse/paho.mqtt.java/issues/464. Link them if appropriate!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODAyMzUxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODA5OTA4OA==,paho.mqtt.python,408099088,316,NA,PierreF,359833,Pierre Fersing,,NA,2018-07-26T13:34:06Z,2018-07-26T13:34:06Z,"The Python library does not support URL. It take host and as second argument a port. E.g.
```
mqttc.connect(""test.mosquitto.org"", 1883)
```

Note that the port is not mandatory and default to 1883.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQwODA5OTA4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/316,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vTgh,paho.mqtt.python,884815905,316,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:41:03Z,2021-07-22T10:41:03Z,Closing because I believe this has been addressed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vTgh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/318,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/318,paho.mqtt.python,345387936,318,pylama code audit tool is incompatible with Python 3.7,cclauss,3709715,Christian Clauss,cclauss@me.com,CLOSED,2018-07-27T22:50:45Z,2020-02-26T18:33:02Z,#317 and https://github.com/klen/pylama/pull/120,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/318/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,paho.mqtt.python,346004653,319,ca_certs: FileNotFoundError: [Errno 2] No such file or directory,vladyslav2,704096,Vladyslav Tarasenko,,CLOSED,2018-07-31T01:44:34Z,2019-04-18T10:36:17Z,"Get stuck with that error for a little bit.

```
$ python --version
Python 3.7.0

$ uname -a
Darwin  16.0.0 Darwin Kernel Version 16.0.0: Mon Aug 29 17:56:20 PDT 2016; root:xnu-3789.1.32~3/RELEASE_X86_64 x86_64

$ pipenv --version
pipenv, version 2018.7.1
```

Traceback:
```
Traceback (most recent call last):
  File ""send_messages.py"", line 286, in <module>
    main()
  File ""send_messages.py"", line 237, in main
    args.mqtt_bridge_hostname, args.mqtt_bridge_port)
  File ""send_messages.py"", line 142, in get_client
    client.tls_set(ca_certs=ca_certs, tls_version=ssl.PROTOCOL_TLSv1_2)
  File ""/Users/home/.local/share/virtualenvs/iot-core-zt_-zuGz/lib/python3.7/site-packages/paho/mqtt/client.py"", line 703, in tls_set
    context.load_verify_locations(ca_certs)
FileNotFoundError: [Errno 2] No such file or directory
```

Found this solution:
```
$ pipenv install certifi
$ cp /Users/home/.local/share/virtualenvs/iot-core-zt_-zuGz/lib/python3.7/site-packages/certifi/cacert.pem roots.pem
```

Not sure if that correct fix, but I did not find a much info in google so just want to post it here
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDUzOTc5NQ==,paho.mqtt.python,410539795,319,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-05T18:49:53Z,2018-08-05T18:49:53Z,"It seems you are calling tls_set with ca_certs pointing to non existing file.
With you fix, I assume ca_certs value is ""root.pem"", but as expected if that file does not exists, tls_set can't work.
I don't understand what exactly is your issue, could you explain a bit more ?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDUzOTc5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDU1MTgxMQ==,paho.mqtt.python,410551811,319,NA,vladyslav2,704096,Vladyslav Tarasenko,,NA,2018-08-05T22:02:29Z,2018-08-05T22:02:29Z,"@PierreF Nothing unusual

I tried to run google iot python example https://github.com/GoogleCloudPlatform/python-docs-samples/blob/master/iot/api-client/mqtt_example/cloudiot_mqtt_example.py

and got an error (i sent it above). First I thought that I'm missing some libraries on my machine but after few hours of debugging i found this workaround ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDU1MTgxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDYwNjM1MQ==,paho.mqtt.python,410606351,319,NA,PierreF,359833,Pierre Fersing,,NA,2018-08-06T06:51:24Z,2018-08-06T06:51:24Z,"Ok, got it. It's the GoogleCloudPlatform that require roots.pem to be present and does not seems to document it clearly enough.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMDYwNjM1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/319,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NDQ0NTg2Nw==,paho.mqtt.python,484445867,319,NA,dyngosz,7306151,Wiktor Dyngosz,wiktor.dyngosz@gmail.com,NA,2019-04-18T10:36:00Z,2019-04-18T10:36:00Z,"For anyone looking for an answer to this - even though the sample parameter is optional, defaulting to `roots.pem` in the current path, you still will need to retrieve the root certificate from Google e.g. `wget https://pki.goog/roots.pem`.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NDQ0NTg2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/320,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/320,paho.mqtt.python,347624568,320,Change contribution workflow / branches model,PierreF,359833,Pierre Fersing,,CLOSED,2018-08-04T14:52:26Z,2018-09-02T12:21:59Z,"Our current workflow for contribution/develop is too complicated for our need.
This has be discussed in multiple other issues:
* #295 
* #294 
* #140 

The aim of this issue is the re-state what is our current workflow and what will be our future proposed workflow.
If everyone agree with the new workflow, we will start using it with the next (major) release.

## Current workflow

The current workflow is based on multiple branches:
* master: the latest release
* fixes: branch for bug fixes, intended to be the next minor release
* develop: branch for new feature, intended to be the next major release

New commits should only go either on develop or on fixes (depending if it's a bug fixes or a new feature). Bug fixes that are probably also needed on develop branch are still only committed on fixes branch, and the fixes branch is merged from time to time into develop branch.
In case of a minor release, fixes branch is merged into master (which is a fast-forward since master don't have commit).
In case of a major release, fixes branch is merged into develop. Then develop is merged into master (once more a fast-forward) and into fixes (fast-forward, needed to have all branch at the same state just after a major release).

This model have few issues:
* It's complicated, and most new contributor don't know it. They create PR against master, so either we need to ask them to update the PR against either fixes or develop or we need to cherry-pick/manually merge into to correct branch. Which could require resolving some conflict.
* While future minor release is the fixes branch, the future major release is the develop branch with fixes branch merged into. So if the fixes branch has commit not yet merged into develop branch, it's hard to test.

## New workflow

(discussion started in #295).
The new workflow will only use one branch master. Most contributor expect master to be where development happen (cf all last PR, that with very few exception are on master).

All new commits goes to master branch (for bug fixes and for new feature).

In case of new major release, master is tagged and the release is made from it.

For minor release, the workflow is the following (for bug fixes that also apply to master):
* Fixes are committed to master
* If not already done, a new release branch (e.g. ""1.3"") is created from the release tag
* Commit are cherry-picked from master into this branch
* The branch is tagged and the release is made from it.

For bug fixes that does not apply to master (e.g. due to a refactoring) and important enough to justify a minor release:
* If not already done, a new release branch (e.g. ""1.3"") is created from the release tag.
* Commit/PR are done on this branch
* The branch is tagged and the release is made from it.

This workflow is not perfect, but I think it much simpler and more adapted to our usage:
* Creating minor release is slightly more complicated. It require cherry-picking good commit and resolving conflict. But we have very few minor release and current workflow also had conflict resolving (when PR are submitted on master, when fixes is merged into develop).
* Bug fix that don't apply to master will require the release branch to exist (or contributor can't submit a PR for it). I think this a rare enough event to be handled by an issue requesting the creating of the branch. An alternative could be to always create the release branch after each new major release.

If someone have any though on it, feel free to comment :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/320/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/320,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkyNzA1Mw==,paho.mqtt.python,417927053,320,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T12:21:59Z,2018-09-02T12:21:59Z,Change done. develop and fixes branch deleted. Release branch 1.4 created (only for bugfix that does not apply to master).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkyNzA1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,paho.mqtt.python,349154346,321,paho.mqtt.publish.multiple publishes messages in wrong order,stmax82,6381927,Markus Stöger,,CLOSED,2018-08-09T14:32:06Z,2018-11-07T17:08:06Z,"The following code uses publish.multiple to publish multiple messages.

For some reason my subscribers receive the messages in reverse order.

When I send messages with payloads ""msg0"", ""msg1"", ""msg2"", the subscribers receive ""msg2"", ""msg1"", ""msg0"".

Is this normal and as it should be? (Documentation doesn't seem to mention this behavior anywhere...)

Is it safe to reverse the order of messages before sending them?

```python
import paho.mqtt.publish as publish

msgs = [{""topic"": ""pahotest/foo"", ""payload"": ""msg%d"" % i, ""qos"": 2} for i in range(10)]

publish.multiple(msgs, hostname=""test.mosquitto.org"", port=1883)
```

paho version 1.3.1","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMTg2NDM4NA==,paho.mqtt.python,411864384,321,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2018-08-09T19:07:58Z,2018-08-09T19:07:58Z,"Yes, it is safe to reverse the order of the messages before sending them.

The reason it is publishing in reverse order is that it uses a pop function(which returns the last element of the list) to get the message and then publishes it. I don't know if there will be any change in the next versions so be careful about that(most probably there will be no change).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMTg2NDM4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ4MTU1MA==,paho.mqtt.python,413481550,321,NA,stmax82,6381927,Markus Stöger,,NA,2018-08-16T09:21:44Z,2018-08-16T09:21:44Z,"> The reason it is publishing in reverse order is that it uses a pop function

Sorry if this is a dumb question but it's the first time I need to send data over MQTT - What's the use case for sending messages in reverse order?

Could a note be added to the documentation of paho.mqtt.publish.multiple that explains that messages are sent in reverse order (and why this is useful)?

Or a parameter ""send_in_order=False"" (with a default value of False for backward compatibility)?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ4MTU1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ4MzIxOA==,paho.mqtt.python,413483218,321,NA,ralight,79578,Roger Light,,NA,2018-08-16T09:27:36Z,2018-08-16T09:27:36Z,I'd say this is a bug and needs fixing.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzQ4MzIxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTE3NjI2OQ==,paho.mqtt.python,415176269,321,NA,stmax82,6381927,Markus Stöger,,NA,2018-08-22T20:54:19Z,2018-08-22T20:54:19Z,"@ralight do you have an idea in mind how it should be fixed? Does it have to be backward compatible? Or could we just set userdata=list(reversed(msgs)) in publish.multiple?

```python
    client = paho.Client(client_id=client_id,
                         userdata=list(reversed(msgs)), protocol=protocol, transport=transport)
                                  ^^^^^^^^^^^^^^^^^^^^
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTE3NjI2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTQ2MTUwMw==,paho.mqtt.python,415461503,321,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2018-08-23T15:33:57Z,2018-08-23T15:33:57Z,"A more efficient way would be to reverse the messages using list.reverse() function.

    msgs.reverse()
    client = paho.Client(....)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNTQ2MTUwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/321,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzk2Ng==,paho.mqtt.python,417917966,321,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:51:33Z,2018-09-02T09:51:33Z,"This bug was fixed 1 year ago by #215... but on develop which is not yet released :(

But to be clear: yes it's a bug, the publish.multiple should send message in order. It will be fixed in next release (should be done today).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzk2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,paho.mqtt.python,349344929,322,I do not know how to use it on my server。 when I use my server，i can not receive my subscribe。,pengbo19921206,13478786,,,CLOSED,2018-08-10T01:28:06Z,2023-12-24T00:00:42Z,"```
import paho.mqtt.client as mqtt
message = 'ON'
def on_connect(mosq, obj, rc):
    mqttc.subscribe(""test"", 0)
    print(""rc: "" + str(rc))

def on_message(mosq, obj, msg):
    global message
    print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))
    message = msg.payload
    mqttc.publish(""f2"",msg.payload);

def on_publish(mosq, obj, mid):
    print(""mid: "" + str(mid))

def on_subscribe(mosq, obj, mid, granted_qos):
    print(""Subscribed: "" + str(mid) + "" "" + str(granted_qos))

def on_log(mosq, obj, level, string):
    print(string)

mqttc = mqtt.Client()
# Assign event callbacks
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe
# Connect
mqttc.connect(""my server"", 1883,60)
mqttc.subscribe(""test"", 0)

# Continue the network loop
mqttc.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzk2MjQ5Nw==,paho.mqtt.python,413962497,322,NA,vrst37,34431050,,,NA,2018-08-17T19:11:55Z,2018-08-17T19:11:55Z,What is it your are asking?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxMzk2MjQ5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNjI3MDQ0Mw==,paho.mqtt.python,416270443,322,NA,wuyanbei24,4532950,WuYanbei,,NA,2018-08-27T15:43:21Z,2018-08-27T15:43:21Z,"maybe i have meet the same problem in my work
when i use it as a server and running a few days(almost two weeks) later, it can not receive message and without connect error
at the same time, i use an another thead publish topic, there is no problem","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNjI3MDQ0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzMwMQ==,paho.mqtt.python,417917301,322,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:38:14Z,2018-09-02T09:38:14Z,"As said in #323:
* I don't see issue with this code. It not perfect, but it should work (see below for how to improve it)
* Log from client (by adding mqttc.on_log = on_log) and from broker (if using mosquitto, with option -v) could help
* Information on how you publish message, and if the publish happend *after* the subscribe will also be helpful

The point that could be improved is where the subscribe is done. By doing the subscribe here, the subscription will only exists for current connection. If the connection is broken and client reconnect, the subscribe is lost.
This may explain @wuyanbei24 : the subscribe works for the first connection, but after a reconnection (after few days, it may happen depending on network quality) the subscription is lost.

To avoid this issue, the best it to subscribe within the on_connect callback. As such you will be sure to subscribe on each (re)connection.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNzMwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDE3NjMyMA==,paho.mqtt.python,420176320,322,NA,cs48a,14795130,csk,,NA,2018-09-11T07:31:20Z,2018-09-11T07:31:20Z,"hi, it took me some time yesterday to find out that the signature of on_connect has now changed, without keywords the on_connect posted above fails and therefore no subscription is made. Almost the same example code can be found here: https://www.eclipse.org/paho/clients/python/ which, at least in my case, also failed. Changing the definition of 
`def on_connect(client, userdata, rc)`
to
`def on_connect(client, userdata, flags, rc)`
solved the issue for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDE3NjMyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxNzg4NQ==,paho.mqtt.python,420917885,322,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-13T07:56:38Z,2018-09-13T07:56:38Z,"Indeed, good catch: the website have a broken example.

on_connect callback must accept 4 argument since version 1.3.0. I'll update the website.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxNzg4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/322,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWgK,paho.mqtt.python,1868392458,322,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:00:42Z,2023-12-24T00:00:42Z,Closing as it looks like an answer was provided (and the issue has been inactive for some time).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWgK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/323,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/323,paho.mqtt.python,349345821,323,I use my server pub a info. I sub it.But i can not receive it.,pengbo19921206,13478786,,,CLOSED,2018-08-10T01:33:37Z,2018-09-02T09:30:11Z,"```
#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2010-2013 Roger Light <roger@atchoo.org>
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Distribution License v1.0
# which accompanies this distribution.
#
# The Eclipse Distribution License is available at
#   http://www.eclipse.org/org/documents/edl-v10.php.
#
# Contributors:
#    Roger Light - initial implementation
# Copyright (c) 2010,2011 Roger Light <roger@atchoo.org>
# All rights reserved.

# This shows a simple example of an MQTT subscriber.

#import context  # Ensures paho is in PYTHONPATH
import paho.mqtt.client as mqtt


def on_connect(mqttc, obj, flags, rc):
    print(""rc: "" + str(rc))


def on_message(mqttc, obj, msg):
    print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))


def on_publish(mqttc, obj, mid):
    print(""mid: "" + str(mid))


def on_subscribe(mqttc, obj, mid, granted_qos):
    print(""Subscribed: "" + str(mid) + "" "" + str(granted_qos))


def on_log(mqttc, obj, level, string):
    print(string)


# If you want to use a specific client id, use
# mqttc = mqtt.Client(""client-id"")
# but note that the client id must be unique on the broker. Leaving the client
# id parameter empty will generate a random id for you.
mqttc = mqtt.Client()
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.connect(""my server"", 1883, 60)
mqttc.subscribe(""test"", 0)

mqttc.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/323/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/323,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjgzMg==,paho.mqtt.python,417916832,323,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:28:15Z,2018-09-02T09:28:15Z,"I don't see any issue with your code.
How did you publish the message ? Is the message published *after* the subscribe is done ?

If you could attach log from the client (uncomment the mqttc.on_log = on_log to get them) and ideally also your broker (if it's mosquitto, start it in verbose mode with -v option).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjgzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/323,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjkxNA==,paho.mqtt.python,417916914,323,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:30:11Z,2018-09-02T09:30:11Z,Closing a duplicate of #322. Please continue on #322 thread.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjkxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/324,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/324,paho.mqtt.python,352724286,324,RaspberryPi Zero W Paho-mqtt not working with local host,alfredoxyanez,18299052,Alfredo Yanez,,CLOSED,2018-08-21T21:51:30Z,2018-08-22T05:45:52Z,"I just set up my rpi zero w. I've been trying to get the following script to work. The script does work in my rpi 3B but for some reason it does not work on the zero w. The script does work when I connect to any other address but ""localhost"".

Script:
```
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
        client.subscribe(""help/hi"")

def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(""localhost"", 1883, 60)

client.loop_forever()
```
The error I get is:

```
Traceback (most recent call last):
  File ""sample_client.py"", line 19, in <module>
    client.connect(""localhost"", 1883, 60)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 768, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 895, in reconnect
    sock = socket.create_connection((self._host, self._port), source_address=(self._bind_address, 0))
  File ""/usr/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
socket.error: [Errno 111] Connection refused
```
When I change `localhost` to `iot.eclipse.org` it works. Any idea what could be going on? Is there anything else I need to install?

More details: `Python 2.7.13`

Contents of pip show paho-mqtt:

```
Name: paho-mqtt
Version: 1.3.1
Summary: MQTT version 3.1.1 client class
Home-page: http://eclipse.org/paho
Author: Roger Light
Author-email: roger@atchoo.org
License: Eclipse Public License v1.0 / Eclipse Distribution License v1.0
Location: /usr/local/lib/python2.7/dist-packages
Requires:
```
Rasbian Version:

```
PRETTY_NAME=""Raspbian GNU/Linux 9 (stretch)""
NAME=""Raspbian GNU/Linux""
VERSION_ID=""9""
VERSION=""9 (stretch)""
ID=raspbian
ID_LIKE=debian
HOME_URL=""http://www.raspbian.org/""
SUPPORT_URL=""http://www.raspbian.org/RaspbianForums""
BUG_REPORT_URL=""http://www.raspbian.org/RaspbianBugs""
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/324/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/324,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNDkxODYyNg==,paho.mqtt.python,414918626,324,NA,alfredoxyanez,18299052,Alfredo Yanez,,NA,2018-08-22T05:45:52Z,2018-08-22T05:45:52Z,I wasn't running mosquitto :(,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNDkxODYyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326,paho.mqtt.python,354659837,326,mqtt client receive error,githubhjz,11263682,,,CLOSED,2018-08-28T10:05:45Z,2023-12-24T00:00:06Z,"  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/MqttThread.py"", line 46, in run
    self.client.loop_forever()
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 1481, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 1003, in loop
    rc = self.loop_read(max_packets)
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 1284, in loop_read
    rc = self._packet_read()
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 1849, in _packet_read
    rc = self._packet_handle()
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 2305, in _packet_handle
    return self._handle_publish()
  File ""/home/ehigh/work/EHTOF_ProductTest/components/MQTT/paho/mqtt/client.py"", line 2466, in _handle_publish
    (topic, packet) = struct.unpack(pack_format, packet)
struct.error: bad char in struct format
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjU1NQ==,paho.mqtt.python,417916555,326,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:22:47Z,2018-09-02T09:22:47Z,This looks as a duplicate of #255. Are your sure you didn't call loop() and loop_forever() from 2 thread ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjU1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTA3NTYyOA==,paho.mqtt.python,455075628,326,NA,monexiao,37441996,,,NA,2019-01-17T07:54:24Z,2019-01-17T07:54:24Z,"Hello, I am also in front of this issue when publishing data sometimes.
In my code, I create a class extended the mqtt.client, and thread.
In my MAIN THREAD, I init a instance of the class I created and then call the client.loop_forever() in the thread of the instance.
Finally, sometimes some data will be published from MAIN THREAD.

I do not call loop_forever() and loop() from different threads in the same time.

Can someone help me or give some tip to avoid this issue ?? I appreciate your response. Thanks a lot.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1NTA3NTYyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/326,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWet,paho.mqtt.python,1868392365,326,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:00:05Z,2023-12-24T00:00:05Z,Closing this due to inactivity (when asking something like this it's helpful if you include code and [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger)).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWet/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/327,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/327,paho.mqtt.python,354693642,327,Unit tests failing in fixes and develop branches,jamesmyatt,1047337,James Myatt,,CLOSED,2018-08-28T11:45:40Z,2018-09-02T14:47:57Z,Unit tests are failing on the two main development branches (https://travis-ci.org/eclipse/paho.mqtt.python/branches). This makes it hard to unit test new submissions.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/327/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/327,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjE3OQ==,paho.mqtt.python,417916179,327,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-02T09:15:10Z,2018-09-02T09:15:10Z,"I've pushed a commit on develop branch that should avoid the connection reset error that happen from time to time (nearly every time on Travis for last tests :().

I was able to reproduce it on my laptop by:
* Forcing the CPU frequency to the slowest: `cpupower frequency-set -u 400Mhz`
* Having other process consuming CPU (like Firefox, at 4Ghz my laptop use 20-30% of CPU, at 400Mhz is 100%)
* Run the test

The result is a connection reset (but still not 100% reproducible. It seems the more the CPU is used the more like to produce the error). Using wireshark I've seen the following:
![capture d ecran de 2018-09-02 11-09-45](https://user-images.githubusercontent.com/359833/44954327-bfc29180-aea0-11e8-860d-754eaabfa470.png)

Which show that client does:
* Send the publish message
* Send the reset (result of sock.close() I din't) *before* broker had time to ack the message

I know that closing TCP connection while some data may be pending (the ack message from broker) could cause reset. It seems we are in this case.

As a short term fix, I've added a simple sleep in the test code.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkxNjE3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/327,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkzNTk0MA==,paho.mqtt.python,417935940,327,NA,jamesmyatt,1047337,James Myatt,,NA,2018-09-02T14:47:57Z,2018-09-02T14:47:57Z,I think that's a good fix. It bothers me that the only way to unit test currently is to use a fake broker and real socket connection. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxNzkzNTk0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,paho.mqtt.python,356658708,328,keepalive does NOT work when on_message is much frequently called(on pressure),liusong1111,69246,liusong1111,liusong1111@gmail.com,OPEN,2018-09-04T05:34:30Z,2024-07-15T07:38:45Z,"Summary:

set keepalive=8.
in on_message, sleep 2 seconds.
publish message frequently, then **RECONNECTION** occurs. that's NOT expected.
It seems that if always has message to work on, the PING(heartbeat) will NEVER be sent.
the MQTT broker server is EMQ(emqx-3.0-beta.1).

subscribe with QoS0 indicate on_message will not send any ACK, right?


code:
```python
import paho.mqtt.client as mqtt
import time
import datetime

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

    client.subscribe(""hello"")

def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))
    print(datetime.datetime.now())
    time.sleep(2)

client = mqtt.Client()
client.will_set(""die"", ""die"")
client.on_connect = on_connect
client.on_message = on_message

client.connect(""localhost"", 1883, 8)

client.loop_forever()
```
and run it.

open another terminal, type:
```bash
mosquitto_pub -t 'hello' -m '111' -r

# run them quickly
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
mosquitto_pub -t 'hello' -m '222'
...
```

the python console output:
```bash
$python3 main.py
Connected with result code 0
hello b'111'
2018-09-04 13:36:07.738074
hello b'222'
2018-09-04 13:36:13.008156
hello b'222'
2018-09-04 13:36:15.011262
hello b'222'
2018-09-04 13:36:17.014952
hello b'222'
2018-09-04 13:36:19.018574
hello b'222'
2018-09-04 13:36:21.021358
hello b'222'
2018-09-04 13:36:23.024580
#----> note this line, it's reconnected <-----
Connected with result code 0
hello b'111'
2018-09-04 13:36:26.031771
```
and when RECONNECTION occurs, we can see the last will `die` in the same time.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyMTA5NQ==,paho.mqtt.python,420921095,328,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-13T08:08:44Z,2018-09-13T08:08:44Z,"First of all, this library can do nothing if your on_message callback took more than half of keepalive. In such case you may always miss the sent of PING hearbeat (but using a 2 seconds sleep with 8 seconds keepalive should not reach this point).

I'll look if the ""priority"" is not handled well enough in the library, since in your example, the library should have a moment to send the ping every 2 seconds.

In meantime, workaround could be to increase keepalive: do you *need* that very short keepalive or is it to more easily reproduce an issue that happen in real situation ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyMTA5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTg4MzQyNg==,paho.mqtt.python,421883426,328,NA,liusong1111,69246,liusong1111,liusong1111@gmail.com,NA,2018-09-17T03:30:04Z,2018-09-17T03:30:04Z,"Thanks.

PING will NEVER happen while messages are accumulated, in that case, if accumulating time is larger than keepalive time, the same error will occur.

It looks like ""priority"" issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTg4MzQyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTk5OTA1MA==,paho.mqtt.python,491999050,328,NA,j3pic,26551894,,,NA,2019-05-13T21:46:21Z,2019-05-13T21:46:21Z,"Another way to reproduce this problem: Call `client.publish()` 100,000 times or so, so that the broker has to send you a constant stream of pubacks. Then call `client.loop(timeout=N)`, where `N` is some small number. You have a good chance of `client.loop()` running for much longer than `N` seconds, without sending keepalives.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTk5OTA1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_4MUT,paho.mqtt.python,1071695123,328,NA,atmask,28781746,Ben Mask,benjaminajm@gmail.com,NA,2022-03-17T22:37:28Z,2022-03-17T22:37:28Z,"This seems to be an issue where the first loop call in loop_forever() triggers _check_keepalive() in client.py and sets the ping_t. On the second iteration of loop_forever() calling loop (which may be be seconds after the previous call) if the ping response has not been returned then the socket is closed. Would it make more sense that, instead of closing the socket if ping_t > 0, we allow for some tolerance so the broker can return the pingresp?
I would suggest that since the keep alive time is triggered after 1xkeep_alive and the broker waits 1.5xkeep_alive before closing the connection that we allow ping_t a tolerance of 0.5*keep_alive before closing the socket.

If this is a reasonable solution could I pick this up? 


_check_keepalive()
```python         
if self._state == mqtt_cs_connected and self._ping_t == 0:
                try:
                    self._send_pingreq()
                except Exception:
                    self._sock_close()
                    self._do_on_disconnect(MQTT_ERR_CONN_LOST)
                else:
                    with self._msgtime_mutex:
                        self._last_msg_out = now
                        self._last_msg_in = now
            else:
                self._sock_close()

                if self._state == mqtt_cs_disconnecting:
                    rc = MQTT_ERR_SUCCESS
                else:
                    rc = MQTT_ERR_KEEPALIVE

                self._do_on_disconnect(rc)
```

The ping_t == 0 is what I think needs to be changed and then remove the duplicate check in that takes place after the _check_keepalive call in loop_misc:

```python
        if self._ping_t > 0 and now - self._ping_t >= self._keepalive:
            # client->ping_t != 0 means we are waiting for a pingresp.
            # This hasn't happened in the keepalive time so we should disconnect.
            self._sock_close()

            if self._state == mqtt_cs_disconnecting:
                rc = MQTT_ERR_SUCCESS
            else:
                rc = MQTT_ERR_KEEPALIVE

            self._do_on_disconnect(rc)

            return MQTT_ERR_CONN_LOST
```


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_4MUT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50PsaV,paho.mqtt.python,1950271125,328,NA,skinkie,502394,Stefan de Konink,stefan@konink.de,NA,2024-02-17T18:03:23Z,2024-02-17T18:03:23Z,I notice this issue is still prominently visible also on the version 2.x. The only way I figured out is to _ignore_ the keep alive checks and don't disconnect. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50PsaV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/328,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Eyg7W,paho.mqtt.python,2227834582,328,NA,dberardo-com,65530457,,,NA,2024-07-15T07:12:13Z,2024-07-15T07:12:13Z,is this fix already available in v2.1.0? i am experiencing issue with disconnect error rc = 16  ... or is it perhaps possible to manually instruct paho to send the ping message from code ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Eyg7W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/329,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/329,paho.mqtt.python,357103559,329,Linux Client-C wrong timer init,Tassenpudding,5907836,Marvin,,CLOSED,2018-09-05T07:41:50Z,2018-09-05T08:02:09Z,"I am not sure because I used the Linux code to adapt to another platform, but the TimerInit shouldn't set the end_time to zero, because if it comes to the comparing Timer Functions there you get ""gettimeofday"" what is returning the current unix time. The unixtime can't be zero

I post the change i made here, maybe it could be done simpler.

MQTTClient-C\src\linux\MQTTLinux.c

void TimerInit(Timer* timer)
{
	struct timeval now;
	gettimeofday(&now, NULL);
	&timer->end_time.tv_sec = now.sec;
	&timer->end_time.tv_usec = now.usec;
}","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/329/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/329,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODYzNzI3MQ==,paho.mqtt.python,418637271,329,NA,Tassenpudding,5907836,Marvin,,NA,2018-09-05T08:02:09Z,2018-09-05T08:02:09Z,wrong github repo,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQxODYzNzI3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,paho.mqtt.python,358818653,330,MQTT Client/Broker recives/send code 4,cah-sachin,4475487,Sachin Burange,,CLOSED,2018-09-10T22:30:59Z,2024-07-17T22:27:26Z,"Paho 1.1 Python:

In our experiment, we are sending last 72 hour data to AWS cloud. While sending it it publishes at very fast rate. Probably couple of in few microsecond. We have verified we are not crossing any limits of AWS cloud.

While dequeuing the data we fetch it from redis queue and send to cloud. For some time it works fine, in between d-queuing the data broker/client responds with result code 4 which means client is not connected.

I am consistently able  to reproduce this locally.  This is happening because,

Our client is hitting on below method and returning the 4.
[ client.py file from paho library version 1.1 ]
 def _send_publish(self, mid, topic, payload=None, qos=0, retain=False, dup=False):
        if self._sock is None and self._ssl is None:
            return MQTT_ERR_NO_CONN


Not sure, why the self._sock or self._ssl is None while d-queing the data at very fast rate. Could you guys help here ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxODM5Ng==,paho.mqtt.python,420918396,330,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-13T07:58:32Z,2018-09-13T07:58:32Z,"Version 1.1 starts to be an old version :(

Can you try with latest version ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxODM5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMjE1MTc3MQ==,paho.mqtt.python,422151771,330,NA,cah-sachin,4475487,Sachin Burange,,NA,2018-09-17T20:05:11Z,2018-09-17T20:05:11Z,"Same Issue with 1.4.0 version.
Debugger stopped at below line 2269 of _send_publish method inside client.py file.

if self._sock is None:
   return MQTT_ERR_NO_CONN
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMjE1MTc3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXW86,paho.mqtt.python,1868394298,330,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:08:35Z,2023-12-24T00:08:35Z,Are you still seeing this with [v1.6.1](https://github.com/eclipse/paho.mqtt.python/releases/tag/v1.6.1)? (sorry - I'm trying to ascertain what issues are current and duplicating this looks tricky - if you have an example app that would be helpful).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXW86/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/330,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLv3J,paho.mqtt.python,2234449353,330,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:27:26Z,2024-07-17T22:27:26Z,I'm going to close this due to lack of activity/reproducability. I feel it' may be a duplicate of #328 but there is insufficient info to be sure.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLv3J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,paho.mqtt.python,359781979,331,mqtt reconnect takes more than  40 seconds,sunshine725,29997858,,,CLOSED,2018-09-13T07:52:49Z,2023-12-23T23:57:54Z,"```
client = Mqtt.Client()
client.connect(self.mqtt['server'], port=self.mqtt['port'])
client.loop_start()

while True:
       msg = {'topic': '/dev/20', 'payload': b'dsjfheruweioe', 'qos': 0, 'retain': False}
       client.publish(**msg)
       time.sleep(2)
```

I use this code in python 3.5, It should be publish the message 2 seconds,but some times the interval between two publish can be more than 40 seconds, It occur about 1 or 2 times during 48 hours, I want to ask your how can I reduce the reconnect time, Do I use in a wrong method,best wishes !
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxNzQ3Ng==,paho.mqtt.python,420917476,331,NA,sunshine725,29997858,,,NA,2018-09-13T07:55:06Z,2018-09-13T07:55:06Z,"client = Mqtt.Client()
client.connect(self.mqtt['server'], port=self.mqtt['port'])
client.loop_start()

while True:
        msg = {'topic': '/dev/20', 'payload': b'dsjfheruweioe', 'qos': 0, 'retain': False}
        client.publish(**msg)
        time.sleep(2)

I use this code in python 3.5, It should be publish the message every 2 seconds,but some times the interval between two publish can be more than 40 seconds, It occur about 1 or 2 times during 48 hours, I want to ask your how can I reduce the reconnect time, Do I use in a wrong method,best wishes !","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkxNzQ3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyMjY5NQ==,paho.mqtt.python,420922695,331,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-13T08:14:39Z,2018-09-13T08:14:39Z,"You code seems correct.
In the title you talk about ""reconnection"", is your connection broken and a reconnect happen ?
In that case, it may be the exponential reconnect delay, you can configure is using https://github.com/eclipse/paho.mqtt.python#reconnect_delay_set","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyMjY5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyOTAyMw==,paho.mqtt.python,420929023,331,NA,sunshine725,29997858,,,NA,2018-09-13T08:37:01Z,2018-09-13T08:37:01Z,"thank you very much ! do you mean that i reduce the max_delay seconds,like:
client.connect(self.mqtt['server'], port=self.mqtt['port'])
client.loop_start()
client.reconnect_delay_set(min_delay=1, max_delay=30)
while True:
msg = {'topic': '/dev/20', 'payload': b'dsjfheruweioe', 'qos': 0, 'retain': False}
client.publish(**msg)
time.sleep(2)
what the best max_delay should i set?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMDkyOTAyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTAyMzkzNQ==,paho.mqtt.python,421023935,331,NA,PierreF,359833,Pierre Fersing,,NA,2018-09-13T14:18:49Z,2018-09-13T14:18:49Z,"This delay is an exponential delay, which means that first re-connection attempt will be done after 1 seconds (if min_delay=1). If that re-connection fail, the next attempt will be after 2 seconds. Then 4, 8, ... until reaching 30 (max_delay).

Usually for simple disconnection, the first reconnect attempt will success (e.g. after min_delay). But if the cause of the disconnection persist (network is saturated, broker is overloaded, or no connection at all), then you may reach the max_delay.

Then the max_delay is mostly a tradeoff between faster re-connection and saving resources:
* With short max_delay, you get reconnected as soon as the issue is solved, but you may contribute to aggravate that situation (since you will retry connection more often, generating network traffic and/or broker processing)
* With long max_delay, you may need to wait longer for the reconnected (but remember that the first re-connection attempt use min_delay), on the other hand you will generate less traffic due to fewer retry in the same period.

That max_delay may be very useful in case where your broker had an outage. With a too short max_delay, all your clients will be hammering the server trying to reconnect.
The importance between a faster re-connection and avoiding hammering the broker depend on your need (can you accept 10 seconds delay ? 1 minute ? more ?) but also the number of clients (with 10 clients, it does not matter).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTAyMzkzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTIwMjY2MQ==,paho.mqtt.python,421202661,331,NA,sunshine725,29997858,,,NA,2018-09-14T01:33:07Z,2018-09-14T01:33:07Z,"thank you very much, i was not care of the network traffic until you refer this. In fact, I really have a number of clients, maybe I should use other method to solve this problem,not just to reduce max_delay.thank you very much for you great help!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTIwMjY2MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTI1MjE3Nw==,paho.mqtt.python,551252177,331,NA,,,,,NA,2019-11-07T20:34:49Z,2019-11-07T20:34:49Z,"@chutingxia, How did you solve this issue? My Paho MQTT client is taking 1 minute between each message for publishing. I didnot configure any where to send like that. 
Please take a look at my code:

import argparse
import json
import ssl
import sys
import datetime

import paho.mqtt.client as mqtt



def parse_args():
    # Parse arguments
    parser = argparse.ArgumentParser(description=""Connect and send device data to Sentience"")
    parser.add_argument(""-t"", ""--token"", dest=""token"",
                        help=""specify a device JWT token in the format '<token>'"", required=True,
                        type=str)
    parser.add_argument(""-b"", ""--broker"", dest=""broker"",
                        help=""specify the broker to connect to"", default=""mqtt-ws.XXXX"",
                        type=str)
    parser.add_argument(""-p"", ""--port"", dest=""port"",
                        help=""specify the port to connect with"", default=443,
                        type=int)

    parser.add_argument(""--project"", dest=""project_id"",
                        help=""specify the project the device exists within"", required=True,
                        type=str)
    parser.add_argument(""--device"", dest=""device_id"",
                        help=""specify the device to send data to"", required=True,
                        type=str)

    parser.add_argument(""payload"", metavar=""P"", nargs=""+"",
                        help=""<measurement>=<value>"")

    return parser.parse_args()


def verify_on_connect(rc):
    if rc == 0:
        print(""rc printing"")
        print(""Connection successful"")
        print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))
    else:
        if rc == 1:
            print(""Connection refused - incorrect protocol version"", file=sys.stderr)
        if rc == 2:
            print(""Connection refused - invalid client identifier"", file=sys.stderr)
        if rc == 3:
            print(""Connection refused - server unavailable"", file=sys.stderr)
        if rc == 4:
            print(""Connection refused - bad username or password"", file=sys.stderr)
        if rc == 5:
            print(""Connection refused - not authorized"", file=sys.stderr)
        exit(2)


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    
    print(""On connect called"")
    print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))
    verify_on_connect(rc)

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(""telemetry"")

    # Send some data
    data_payload = {arg[0]: float(arg[1]) for arg in [arg.split(""="") for arg in args.payload]}
    payload = json.dumps({""points"": data_payload})

    rc, mid = client.publish(topic=""/telemetry"", payload=payload)

    
    #mqtt_client.loop_stop()

    print(""Publish result: {} messageId: {}"".format(rc, mid))
    print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))


# The callback for when a PUBLISH message is sent to the server
def on_publish(client, userdata, mid):
    print(""Message sent successfully with payload: {}"".format(args.payload))
    print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))


# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic + "" "" + str(msg.payload))

def on_disconnect(client, userdata,rc=0):
    print(""DisConnected result code ""+str(rc))
    mqtt_client.loop_stop()

def main():

    print(""Called Python Connector with args:"", args)

    if args.project_id is None:
        print(""No Project ID was specified"", file=sys.stderr)
        exit(1)

    if args.device_id is None:
        print(""No Device ID was specified"", file=sys.stderr)
        exit(1)

    mqtt_client = mqtt.Client(client_id=f""{args.project_id}.{args.device_id}"", transport=""websockets"")
    print(rc1)
    
        #print(""printing"")
     mqtt_client.on_connect = on_connect
     mqtt_client.on_message = on_message
     mqtt_client.on_publish = on_publish
     mqtt_client.on_disconnect = on_disconnect

    mqtt_client.username_pw_set(""none"", password=args.token)
    mqtt_client.ws_set_options(path=""/mqtt"", headers=None)
    mqtt_client.tls_set(cert_reqs=ssl.CERT_NONE)

    try:
        print(""End time"")
        print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))
        
        mqtt_client.connect(args.broker, args.port, 300)
       
        
    except Exception as e:
        print(""Connection failed:"", e)

    # Blocking call that processes network traffic, dispatches callbacks and
    # handles reconnecting.
    # Other loop*() functions are available that give a threaded interface and a
    # manual interface.
    #print(""Start time"")
    #print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))
    mqtt_client.loop_forever()
    print(datetime.datetime.utcnow().strftime(""%m/%d/%Y, %H:%M:%S""))
    print(""End time"")


if __name__ == ""__main__"":
    args = parse_args()
    main()
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MTI1MjE3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/331,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWbj,paho.mqtt.python,1868392163,331,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:57:54Z,2023-12-23T23:57:54Z,Closing as it looks like an answer was provided (and the issue has been inactive for some time). Note that when asking questions like this it's helpful if you can provide [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWbj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/332,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/332,paho.mqtt.python,360561551,332,tests missing from pypi source distribution,andir,638836,Andreas Rammhold,,CLOSED,2018-09-15T17:56:20Z,2023-12-24T00:05:32Z,"Currently the `tests` folder is missing from source distributions of this package on PyPi. I would like to be able to run the tests during the NixOS packaging.

The following additional lines within your `MANIFEST.in` should be sufficient:

```
recursive-include tests *.py
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/332/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/332,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTYwODQwNw==,paho.mqtt.python,421608407,332,NA,andir,638836,Andreas Rammhold,,NA,2018-09-15T18:00:39Z,2018-09-15T18:00:39Z,I just saw that those were removed on purpose (https://github.com/eclipse/paho.mqtt.python/commit/4f3ef85dc377d6aafe3cbecbfee142c11736f318). Was there a  good reason for that?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyMTYwODQwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/332,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMjI4MA==,paho.mqtt.python,424302280,332,NA,jamesmyatt,1047337,James Myatt,,NA,2018-09-25T11:11:24Z,2018-09-25T11:11:24Z,I don't think that tests are typically included in PyPI distributions. If you want the tests then you can go back to the source repo (i.e. here),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQyNDMwMjI4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/333,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/333,paho.mqtt.python,362521644,333,Paho Client didn't connect with mqttroute.com,nikson-a,43266690,,,CLOSED,2018-09-21T09:05:04Z,2023-12-23T23:56:16Z,"I try to connect paho Client (https://www.eclipse.org/paho/clients/js/utility/) with [mqttroute.com](http://mqttroute.com), it didn't connect. The broker is running in 10443 in Non TLS mode. 
But When I run bevywise [mqtt broker](https://www.bevywise.com/mqtt-broker/)  in the my machine ( localhost), it is working fine. 
Can you help me connect to the mqttroute.com ?

Thanks in advance.
![paho_client](https://user-images.githubusercontent.com/43266690/45870552-cad65680-bda8-11e8-91ce-ebd2b551ae06.png)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/333/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/333,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMTA5Ng==,paho.mqtt.python,477521096,333,NA,vrst37,34431050,,,NA,2019-03-28T09:40:38Z,2019-03-28T09:40:38Z,"This is python library for mqtt, not js library. Please close this issue and ask in correct forum.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMTA5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/335,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/335,paho.mqtt.python,366722204,335,Certificate verify failed for secure websockets,koxu1996,6506780,,,CLOSED,2018-10-04T10:25:58Z,2023-12-23T23:55:57Z,"I am unable to connect to test server over encrypted websockets, because I am getting following error:
```
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)
```

### Details
I downloaded root certificate from https://test.mosquitto.org/ssl/mosquitto.org.crt:
```
-----BEGIN CERTIFICATE-----
MIIC8DCCAlmgAwIBAgIJAOD63PlXjJi8MA0GCSqGSIb3DQEBBQUAMIGQMQswCQYD
VQQGEwJHQjEXMBUGA1UECAwOVW5pdGVkIEtpbmdkb20xDjAMBgNVBAcMBURlcmJ5
MRIwEAYDVQQKDAlNb3NxdWl0dG8xCzAJBgNVBAsMAkNBMRYwFAYDVQQDDA1tb3Nx
dWl0dG8ub3JnMR8wHQYJKoZIhvcNAQkBFhByb2dlckBhdGNob28ub3JnMB4XDTEy
MDYyOTIyMTE1OVoXDTIyMDYyNzIyMTE1OVowgZAxCzAJBgNVBAYTAkdCMRcwFQYD
VQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwGA1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1v
c3F1aXR0bzELMAkGA1UECwwCQ0ExFjAUBgNVBAMMDW1vc3F1aXR0by5vcmcxHzAd
BgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hvby5vcmcwgZ8wDQYJKoZIhvcNAQEBBQAD
gY0AMIGJAoGBAMYkLmX7SqOT/jJCZoQ1NWdCrr/pq47m3xxyXcI+FLEmwbE3R9vM
rE6sRbP2S89pfrCt7iuITXPKycpUcIU0mtcT1OqxGBV2lb6RaOT2gC5pxyGaFJ+h
A+GIbdYKO3JprPxSBoRponZJvDGEZuM3N7p3S/lRoi7G5wG5mvUmaE5RAgMBAAGj
UDBOMB0GA1UdDgQWBBTad2QneVztIPQzRRGj6ZHKqJTv5jAfBgNVHSMEGDAWgBTa
d2QneVztIPQzRRGj6ZHKqJTv5jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUA
A4GBAAqw1rK4NlRUCUBLhEFUQasjP7xfFqlVbE2cRy0Rs4o3KS0JwzQVBwG85xge
REyPOFdGdhBY2P1FNRy0MDr6xr+D2ZOwxs63dG1nnAnWZg7qwoLgpZ4fESPD3PkA
1ZgKJc2zbSQ9fCPxt2W3mdVav66c6fsb7els2W2Iz7gERJSX
-----END CERTIFICATE-----
```
I am using simple script:
```
#!/usr/bin/python
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.subscribe(""$SYS/broker/uptime"")
    
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))


if __name__ == '__main__':
    client = mqtt.Client(""Test"", transport=""websockets"")
    client.on_connect = on_connect
    client.on_message = on_message
    client.tls_set(""mosquitto.org.crt"")
    client.connect(""test.mosquitto.org"", 8081)
    client.loop_forever()
```
Running it results with error:
```
Traceback (most recent call last):
  File ""test.py"", line 17, in <module>
    client.connect(""test.mosquitto.org"", 8081)
  File ""/home/andrew/VirtualEnvs/tmp/lib/python3.7/site-packages/paho/mqtt/client.py"", line 839, in connect
    return self.reconnect()
  File ""/home/andrew/VirtualEnvs/tmp/lib/python3.7/site-packages/paho/mqtt/client.py"", line 994, in reconnect
    sock.do_handshake()
  File ""/usr/lib64/python3.7/ssl.py"", line 1108, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/335/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/335,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWYL,paho.mqtt.python,1868391947,335,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:55:56Z,2023-12-23T23:55:56Z,"As per the [test.mosquitto.org/](https://test.mosquitto.org/) docs:

>Ports 8081 and 8886 have a Lets Encrypt certificate, so you should use your system CA certificates or the appropriate Lets Encrypt CA certificate for verification.

So the CA you are using is not the right one in this case.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXWYL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,paho.mqtt.python,372674396,336,message_callback_add - multiple callbacks on same topic,HiraveBapu,468513,Bapu Hirave,,CLOSED,2018-10-22T19:57:54Z,2024-01-07T22:36:45Z,"Hello,
in my current project, we have a component. In that same component, couple of places are subscribing to same topic and each time its being subscribe, there is new callback method provided. Is this supported ? i am seeing that only last subscriber callback receives the message, not others.

**example (portion of code):**
```
def pahoo_on_message(client, userdata, msg):
    #print(msg.topic+"" ""+str(msg.payload))
    print(""method1: ""+ msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))

def pahoo_on_message_two(client, userdata, msg):
    print(""method2: ""+ msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))

def test():
    mqttClient.subscribe('sampleTopic',pahoo_on_message)
    mqttClient.subscribe('sampleTopic',pahoo_on_message_two)
```

**subscribe method from our wrapper class:**
```
    def subscribe(self,topic,subscribe_callback,i_qos=1):
        self.client.subscribe(topic, i_qos)
        self.client.message_callback_add(topic,subscribe_callback)
```
Any suggestion ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzNTA0MQ==,paho.mqtt.python,447635041,336,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T11:16:37Z,2018-12-16T11:16:37Z,"Hi,

no, it's not supported by message_callback_add: (quoting README about message_callback_add)
> Only one callback may be defined per literal sub string

Also not that MQTT protocol does not support multiple subscribe with the same topic ([MQTT-3.8.4-3])
> If a Server receives a SUBSCRIBE Packet containing a Topic Filter that is identical to an existing Subscription’s Topic Filter then it MUST completely replace that existing Subscription with a new Subscription. The Topic Filter in the new Subscription will be identical to that in the previous Subscription, although its maximum QoS value could be different. Any existing retained messages matching the Topic Filter MUST be re-sent, but the flow of publications MUST NOT be interrupted

Which mostly means that the most recent subscribe's qos will be used.


To workaround those limitation I would:
* If my real callbacks are fixed, only have on callback per topic and that callback dispatch to each real callbacks
* If not, store each (topic, subscribe_callback, i_qos) used in the wrapper's subscribe.
   * The message_callback_add will use a wrapper callback. This callback will use the stored couple (topic, subscribe_callback) to call each real callbacks.
   * The wrapper's subscribe will call client.subscribe with the highest i_qos stored for that topic.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzNTA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUyODUyOQ==,paho.mqtt.python,458528529,336,NA,vikahl,3051877,Viktor Rimark,,NA,2019-01-29T12:52:21Z,2019-01-29T12:52:21Z,"Is there a reason for not implementing the wrapper method in the library so that message_callback_add can support multiple callbacks?

(I am not trying to blame with ""why haven't it been done"" or similar, just curious what the project thinks about it and if it is worth to create a PR)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ1ODUyODUyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNjQ4MDA5Mw==,paho.mqtt.python,636480093,336,NA,kwesolowski,5962607,Krzysztof Wesolowski,krzysztof.wesolowski@rainlabs.pl,NA,2020-05-31T14:39:19Z,2020-05-31T14:39:19Z,"Removing callbacks would be one example of making it harder to design nice API - if add callback actually allowed many callbacks for same topic, then removing subscriptions would not be as simple as today. 

Seems either you have unique topics and can use add/remove, or in more complex scenarios need to build sth on your own with on_message or reference counting for message_callback_add (to remove subscription when all subscribers are gone)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNjQ4MDA5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1OTU5MTgyMA==,paho.mqtt.python,759591820,336,NA,pavloblindnology,27725335,Pavlo Kolomiiets,pkolomiets@gmail.com,NA,2021-01-13T17:11:59Z,2021-01-13T17:11:59Z,+1 vote for the functionality.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1OTU5MTgyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/336,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEZXO,paho.mqtt.python,1880200654,336,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:36:45Z,2024-01-07T22:36:45Z,I'm going to close this due to age/inactivity and because it looks like the OP's question was answered (if there is demand for a router than can call multiple call backs per topic then that's probably best discussed in a new issue).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEZXO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/337,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/337,paho.mqtt.python,374166360,337,Regarding max_inflight_messages_set,vrst37,34431050,,,CLOSED,2018-10-25T23:04:36Z,2019-03-28T09:53:29Z,"Hello,

Can I set the max_inflight_messages_set in runtime? Will it cause issues? 

Let's say I want to slow down the paho client (because my broker is having issues) then I can max_inflight_messages_set(1) and this will slow down the messages. Is this a good idea? Am I thinking correctly?

I read somewhere in documentation that max_inflight_messages_set should not be set after connect has been called however I do not see any reason why this is a problem.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/337/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/337,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMzY5MA==,paho.mqtt.python,447633690,337,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:54:54Z,2018-12-16T10:54:54Z,"Is the answer in #338 the answer you need ?

Lowering the max_inflight message will slow down the message rate, but depending on your exact situation it may not be significant.
max_inflight mostly impact network with high latency, in low latency network it may have few to no impact at all.
Also, IIRC QoS = 0 are not counted at all in the max_inflght_message.

About changing max_inflght_message while connected, the issue it that it's not supported (mostly because not tested). It may work or may not work. The issue I could easily see is what happen when you have 10 messages inflight and reduce the the max_inflight to 5 ? Any part of code that assume current number of message inflight <= max_inflight will break.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMzY5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/338,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/338,paho.mqtt.python,374166836,338,Information about message_retry_set,vrst37,34431050,,,CLOSED,2018-10-25T23:06:49Z,2019-03-28T09:53:22Z,"Hello, 

Can I set the message_retry_set on runtime while the client is connected? Can I change this value without any negative consequences? I read on github documentation that this function should be set before connect. I do not understand why this is the case.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/338/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/338,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMzA3Nw==,paho.mqtt.python,447633077,338,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:43:26Z,2018-12-16T10:43:26Z,"Based on your other issue (#337  and #339) are you having trouble with message_retry that re-send message while your broker struggle processing the first one ?

As I said in #339, I think the message_retry is only used with historical TCP stack that were not reliable (TCP is supposed to never loose any byte. Either the connection is broken or nothing is lose). So for me this message_retry is not needed with a correct TCP stack.

Therefor if your issue is indeed re-send of message before broker handled them, you could disable message_retry... since the library does not allow to completely disable it, you may try setting it to arbitrary long value (e.g. 86400, you broker is probably able to process the message within 1 day :))","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMzA3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/338,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNTQ3Mg==,paho.mqtt.python,477525472,338,NA,vrst37,34431050,,,NA,2019-03-28T09:53:22Z,2019-03-28T09:53:22Z,"Thanks man, makes sense :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNTQ3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339,paho.mqtt.python,374167015,339,Exponential backoff on message retry,vrst37,34431050,,,CLOSED,2018-10-25T23:07:39Z,2021-08-16T22:48:52Z,"Hello,

Currently the message_retry_set is set to a static value. Would it be better to implement an exponential backoff on this?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjYwNQ==,paho.mqtt.python,447632605,339,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:36:37Z,2018-12-16T10:36:37Z,"If I understand correctly the use-case for this message retry, I would probably prefer to remove it completly or as very least disable it by default.
I think it's used for (quoting http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718103)
> Historically retransmission of Control Packets was required to overcome data loss on some older TCP networks.

Are anyone using Python with such TCP stack ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjYwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMTg3Nw==,paho.mqtt.python,477521877,339,NA,vrst37,34431050,,,NA,2019-03-28T09:42:57Z,2019-03-28T09:42:57Z,I think we can simplify the code by following your suggestion. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMTg3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/339,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouKo,paho.mqtt.python,899867304,339,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:48:52Z,2021-08-16T22:48:52Z,"Message retry is only allowed on reconnect not on a time basis, as per the v5.0 spec and discussions around the intention of the v3.1.1 and earlier specs, so time based reconnection has been removed and I'm closing this issue as no longer needed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouKo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,paho.mqtt.python,374457877,340,Rc - Out of memory ,ahmetalperenbulut,17411738,Ahmet Alperen Bulut,,CLOSED,2018-10-26T16:28:41Z,2023-12-23T23:35:26Z,"if client disconnects, can occur ""out of memory"" error constantly.
The error occurs in this line
`rc = 1`  please check this assigment in code
if it is true, please change it in this way  rc = MQTT_ERRNOMEM 

Thank you..
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjI3OA==,paho.mqtt.python,447632278,340,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:31:46Z,2018-12-16T10:31:46Z,"It's indeed wrong. RC = 1 is not out of memory, it's ""generic error"".","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjI3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0ODk1NjU4Mw==,paho.mqtt.python,548956583,340,NA,bjoernbusch,15795611,Bjoern Busch,,NA,2019-11-01T21:26:31Z,2019-11-01T21:26:31Z,Is there any way to find out what's actually causing the disconnect? I have the issue that my client constantly disconnect after about 1 minute with error code 1. How can I drill down on the reason?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0ODk1NjU4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc2MDM4MA==,paho.mqtt.python,549760380,340,NA,nawab36085,978841,Nawab,,NA,2019-11-05T10:22:33Z,2019-11-05T10:22:33Z,"Is there any plan to fix this. I think fix is quite simple by setting rc to MQTT_ERR_CONN_LOST before passing rc to self.on_disconnect(self, self._userdata, rc) in function loop_misc. The loop_misc function later on anyway returns the right value MQTT_ERR_CONN_LOST in case of an failed ping.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc2MDM4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc2ODA5OQ==,paho.mqtt.python,549768099,340,NA,nawab36085,978841,Nawab,,NA,2019-11-05T10:43:17Z,2019-11-05T10:43:17Z,Created a pull request to fix this issue: https://github.com/eclipse/paho.mqtt.python/pull/441,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTc2ODA5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4MDI5OA==,paho.mqtt.python,674380298,340,NA,drmikecrowe,90312,,,NA,2020-08-15T10:30:26Z,2020-08-15T10:30:26Z,@bjoernbusch seeing a similar issue -- did you discover what the issue was?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4MDI5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDQ0NDQyNw==,paho.mqtt.python,674444427,340,NA,bjoernbusch,15795611,Bjoern Busch,,NA,2020-08-15T20:32:17Z,2020-08-15T20:32:17Z,it was something on the server side that the packages where not handled properly or something. I had to use a different reverse proxy on my server and now it works.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDQ0NDQyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/340,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVzo,paho.mqtt.python,1868389608,340,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:35:26Z,2023-12-23T23:35:26Z,"I believe this was resolved in [this commit](https://github.com/eclipse/paho.mqtt.python/commit/332834e7ec293f1bfe385180b8691863af5a7738) (Jul 7, 2021). As such I'm going to close the issue; if the problem still exists then please free free to reopen it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVzo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,paho.mqtt.python,376214833,341,Is sleep after publish() valid way to determine if message was published?,MrBillium,14281367,,,CLOSED,2018-11-01T01:03:13Z,2024-01-07T22:28:48Z,"I am running connect_async() and want to save any messages that fail publish to disk rather that queuing them up in client. So in my main loop I am inspecting the MQTTMessagInfo returned by the publish().
It appears that If I immediately query the result of the publish then it always shows failed - which makes sense because it is non blocking and the publish takes time .

```
mqtt.loop_start()
# test main loop
x = 0
while True:
    x += 1
    sleep(5)
    message = 'hello {}'.format(x)
    msginfo = mqtt.publish(topic='/test', payload=message, qos=1)

    # need to wait here to ever see ._ published == True - why does it work?
    sleep(1)

    if mqtt.isconnected and msginfo._published:
        print('message sent ', message)
    else:
        print('message failed ', message)
```

What does not make sense to me is why  my query DOES WORK if I sleep(1) after the publish call since the msginfo has already been populated. 
Is this expected behavior ( which would be nice) or just a fluke of internal threading and not to be trusted?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAwMDM3NQ==,paho.mqtt.python,435000375,341,NA,ralight,79578,Roger Light,,NA,2018-11-01T10:35:07Z,2018-11-01T10:35:07Z,"What is happening here is that `loop_start()` starts the thread that handles the network code. `publish()` queues up a message to be published, which is handled by the network thread. The return value of publish is an object which contains information about the state of the message. The library keeps a reference to that object so it can update it once it is published.

The documentation says this about publish():

        Returns a MQTTMessageInfo class, which can be used to determine whether
        the message has been delivered (using info.is_published()) or to block
        waiting for the message to be delivered (info.wait_for_publish()). The
        message ID and return code of the publish() call can be found at
        info.mid and info.rc.

You can call `info.is_published()` after a sleep, but there is no **guarantee** that it will have worked by then. The best bet is to use `info.wait_for_publish()`, or keep on checking `is_published()` until true if you need to do other tasks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAwMDM3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAwNTQ2Ng==,paho.mqtt.python,435005466,341,NA,MrBillium,14281367,,,NA,2018-11-01T10:56:31Z,2018-11-01T10:56:31Z,"Thanks, this makes it easy since I am publishing on a regular schedule so waiting a little after sending to see what happened is fine.

However if I add unscheduled publish calls on another thread  ( e.g. alarms that can not wait) then they could potentially happen at the same time as the regular publish calls. Will the client just handle them or do I need to be careful about contention and look at using locks etc?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTAwNTQ2Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTI5NTQyMQ==,paho.mqtt.python,435295421,341,NA,ralight,79578,Roger Light,,NA,2018-11-02T07:34:25Z,2018-11-02T07:34:25Z,"It will just handle them, there are locks internally.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTI5NTQyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3MDY3MQ==,paho.mqtt.python,435370671,341,NA,MrBillium,14281367,,,NA,2018-11-02T12:57:33Z,2018-11-02T12:57:33Z,"Thanks,

 

Consider adding this to documentation since published support for async operation begs the question – just how async can I go?

 

Bill

 

From: Roger Light <notifications@github.com> 
Sent: Friday, November 2, 2018 3:34 AM
To: eclipse/paho.mqtt.python <paho.mqtt.python@noreply.github.com>
Cc: MrBillium <bilmar19@gmail.com>; Author <author@noreply.github.com>
Subject: Re: [eclipse/paho.mqtt.python] Is sleep after publish() valid way to determine if message was published? (#341)

 

It will just handle them, there are locks internally.

—
You are receiving this because you authored the thread.
Reply to this email directly, view it on GitHub <https://github.com/eclipse/paho.mqtt.python/issues/341#issuecomment-435295421> , or mute the thread <https://github.com/notifications/unsubscribe-auth/ANnql4UNpIM9D77X-eQmax9gocwuDLx0ks5uq_WDgaJpZM4YFm1Z> .  <https://github.com/notifications/beacon/ANnql_Ts-H0eI_CeGEls4aR3-8D2E1WSks5uq_WDgaJpZM4YFm1Z.gif> 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzNTM3MDY3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/341,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEY6b,paho.mqtt.python,1880198811,341,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:28:48Z,2024-01-07T22:28:48Z,I'm going to close this due to it's age and because it appears the original question was answered (the library has also moved on a bit since 2018).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEY6b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/342,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/342,paho.mqtt.python,377412325,342,MQTT Connection Failed,Modelhaus,44775294,,,CLOSED,2018-11-05T13:59:30Z,2019-05-16T08:49:03Z,"Hi guys,
I'm supposed to code a model house with BME680 sensors. I have the scripts of the previous team but the programm always fails in main.py when it comes to the connection part to the mqtt.py. I don't understand the Error and cannot find anything about it. So maybe you guys can help me. In the following ist the mqtt.py code:

import usocket as socket
import ustruct as struct
from ubinascii import hexlify

class MQTTException(Exception):
    pass

class MQTTClient:

    def __init__(self, client_id, server, port=0, user=None, password=None, keepalive=0,
                 ssl=False, ssl_params={}):
        if port == 0:
            port = 8883 if ssl else 1883
        self.client_id = client_id
        self.sock = None
        self.addr = socket.getaddrinfo(server, port)[0][-1]
        self.ssl = ssl
        self.ssl_params = ssl_params
        self.pid = 0
        self.cb = None
        self.user = user
        self.pswd = password
        self.keepalive = keepalive
        self.lw_topic = None
        self.lw_msg = None
        self.lw_qos = 0
        self.lw_retain = False

    def _send_str(self, s):
        self.sock.write(struct.pack(""!H"", len(s)))
        self.sock.write(s)

    def _recv_len(self):
        n = 0
        sh = 0
        while 1:
            b = self.sock.read(1)[0]
            n |= (b & 0x7f) << sh
            if not b & 0x80:
                return n
            sh += 7

    def set_callback(self, f):
        self.cb = f

    def set_last_will(self, topic, msg, retain=False, qos=0):
        assert 0 <= qos <= 2
        assert topic
        self.lw_topic = topic
        self.lw_msg = msg
        self.lw_qos = qos
        self.lw_retain = retain

    def connect(self, clean_session=True):
        sock = socket.socket()
        self.sock_connect(self.addr)
        if self.ssl:
            import ussl
            self.sock_connect = ussl.wrap_socket(self.sock, **self.ssl_params)
        msg = bytearray(b""\x10\0\0\x04MQTT\x04\x02\0\0"")
        msg[1] = 10 + 2 + len(self.client_id)
        msg[9] = clean_session << 1
        if self.user is not None:
            msg[1] += 2 + len(self.user) + 2 + len(self.pswd)
            msg[9] |= 0xC0
        if self.keepalive:
            assert self.keepalive < 65536
            msg[10] |= self.keepalive >> 8
            msg[11] |= self.keepalive & 0x00FF
        if self.lw_topic:
            msg[1] += 2 + len(self.lw_topic) + 2 + len(self.lw_msg)
            msg[9] |= 0x4 | (self.lw_qos & 0x1) << 3 | (self.lw_qos & 0x2) << 3
            msg[9] |= self.lw_retain << 5
        self.sock.write(msg)
        #print(hex(len(msg)), hexlify(msg, "":""))
        self._send_str(self.client_id)
        if self.lw_topic:
            self._send_str(self.lw_topic)
            self._send_str(self.lw_msg)
        if self.user is not None:
            self._send_str(self.user)
            self._send_str(self.pswd)
        resp = self.sock.read(4)
        assert resp[0] == 0x20 and resp[1] == 0x02
        if resp[3] != 0:
            raise MQTTException(resp[3])
        return resp[2] & 1

    def disconnect(self):
        self.sock.write(b""\xe0\0"")
        self.sock.close()

    def ping(self):
        self.sock.write(b""\xc0\0"")

    def publish(self, topic, msg, retain=False, qos=0):
        pkt = bytearray(b""\x30\0\0\0"")
        pkt[0] |= qos << 1 | retain
        sz = 2 + len(topic) + len(msg)
        if qos > 0:
            sz += 2
        assert sz < 2097152
        i = 1
        while sz > 0x7f:
            pkt[i] = (sz & 0x7f) | 0x80
            sz >>= 7
            i += 1
        pkt[i] = sz
        #print(hex(len(pkt)), hexlify(pkt, "":""))
        self.sock.write(pkt, i + 1)
        self._send_str(topic)
        if qos > 0:
            self.pid += 1
            pid = self.pid
            struct.pack_into(""!H"", pkt, 0, pid)
            self.sock.write(pkt, 2)
        self.sock.write(msg)
        if qos == 1:
            while 1:
                op = self.wait_msg()
                if op == 0x40:
                    sz = self.sock.read(1)
                    assert sz == b""\x02""
                    rcv_pid = self.sock.read(2)
                    rcv_pid = rcv_pid[0] << 8 | rcv_pid[1]
                    if pid == rcv_pid:
                        return
        elif qos == 2:
            assert 0

    def subscribe(self, topic, qos=0):
        assert self.cb is not None, ""Subscribe callback is not set""
        pkt = bytearray(b""\x82\0\0\0"")
        self.pid += 1
        struct.pack_into(""!BH"", pkt, 1, 2 + 2 + len(topic) + 1, self.pid)
        #print(hex(len(pkt)), hexlify(pkt, "":""))
        self.sock.write(pkt)
        self._send_str(topic)
        self.sock.write(qos.to_bytes(1, 'little'))
        while 1:
            op = self.wait_msg()
            if op == 0x90:
                resp = self.sock.read(4)
                #print(resp)
                assert resp[1] == pkt[2] and resp[2] == pkt[3]
                if resp[3] == 0x80:
                    raise MQTTException(resp[3])
                return

    # Wait for a single incoming MQTT message and process it.
    # Subscribed messages are delivered to a callback previously
    # set by .set_callback() method. Other (internal) MQTT
    # messages processed internally.
    def wait_msg(self):
        res = self.sock.read(1)
        self.sock.setblocking(True)
        if res is None:
            return None
        if res == b"""":
            raise OSError(-1)
        if res == b""\xd0"":  # PINGRESP
            sz = self.sock.read(1)[0]
            assert sz == 0
            return None
        op = res[0]
        if op & 0xf0 != 0x30:
            return op
        sz = self._recv_len()
        topic_len = self.sock.read(2)
        topic_len = (topic_len[0] << 8) | topic_len[1]
        topic = self.sock.read(topic_len)
        sz -= topic_len + 2
        if op & 6:
            pid = self.sock.read(2)
            pid = pid[0] << 8 | pid[1]
            sz -= 2
        msg = self.sock.read(sz)
        self.cb(topic, msg)
        if op & 6 == 2:
            pkt = bytearray(b""\x40\x02\0\0"")
            struct.pack_into(""!H"", pkt, 2, pid)
            self.sock.write(pkt)
        elif op & 6 == 4:
            assert 0

    # Checks whether a pending message from server is available.
    # If not, returns immediately with None. Otherwise, does
    # the same processing as wait_msg.
    def check_msg(self):
        self.sock.setblocking(False)
        return self.wait_msg()
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/342/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/342,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTM3MjU5Mw==,paho.mqtt.python,439372593,342,NA,Modelhaus,44775294,,,NA,2018-11-16T12:00:08Z,2018-11-16T12:00:08Z,Problem solved.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTM3MjU5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/342,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Mjk3ODI1OA==,paho.mqtt.python,492978258,342,NA,vikramuk,4569591,vikram u k,vikramuk@gmail.com,NA,2019-05-16T08:49:02Z,2019-05-16T08:49:02Z,what was the Error?. Was it connected or failed to subscribe?.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Mjk3ODI1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/343,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/343,paho.mqtt.python,381574011,343,OS Error: I2C bus error on wipy 3.0,Modelhaus,44775294,,,CLOSED,2018-11-16T12:10:46Z,2018-12-17T11:05:05Z,"Hi everyone, I want to connect two BME680 sensors with a wipy 3.0 to a raspi 3 via wifi. On the raspi is a MQTT broker so we can see the temperature etc. So I've got this code from another team, but it doesn't work. The error is coming up when I set the second I2C adapter on P9, P10 and when it comes to ""sensor1 = bme680.BME680(i2c_device=i2c_dev1)"". I think it is because the first sensor ist defined as the same, but I don't know what to code else. You can find the code below. I hope you can help me.  

import time
import machine
from machine import RTC, Pin
import onewire
from network import WLAN
from mqtt import MQTTClient
import binascii
import ujson
import bme680
from machine import I2C
from i2c import I2CAdapter




#Fühler
# Hier werden die onewire Fühler mit addressierung festgelegt
# Wenn neue Wände für das Haus gebaut werden, müssen genau hier neue Adressen eingefügt werden.
# Die BME Sensoren werden extra verarbeitet.
# Achtung die Fühlerbezeichnung wird unten im Programm weiterhin verwendet KEINE ÄNDERUNG VORNEHMEN
# Die Anzahl der onewire Sensoren wird durch die Art der Verdrahtung (Sterntopologie 10 Sensoren)
# und durch die größe des Pulldown Widerstand festgelegt (bei 4,7kOhm und Sterntopologie 10 Sensoren)


fuehler={""zone2_heizbett"" : bytearray(b'(ad\x11\xbd\x86Y='),
    ""zone2_peltier_zuluft"" : bytearray(b'(ad\x11\xbd\x86t\xe3'),
    ""zone2_peltier_abluft"" :  bytearray(b'(ad\x11\xbce\x01\xaf'),
    ""zone2_peltier_fortluft"" : bytearray(b'(ad\x123\x9b#\xc0'),
    ""zone2_peltier_außenluft"" : bytearray(b'(ad\x123\x9b\xa92'),
    ""zone2_globetemp"" :  bytearray(b'(ad\x123\xb5\x98\xcf'),
    ""zone2_schicht_unten"" : bytearray(b'(ad\x123\x96Br'),
    ""zone2_schicht_oben"" : bytearray(b'(ad\x123\x96H\x0c'),
    ""zone2_wandtemp1"" : bytearray(b'(ad\x11\xbf\xc9\xb6Y'),
    ""zone2_wandtemp2"" : bytearray(b'(ad\x11\xbct\xaei')
        }



#WLAN Verbindung herstellen
#Das Modellhaus wird mit dem WLAN des Modellhaus verbunden
# ssid = HBC_Modellhaus
# Passwort HBC_Modellhaus

wlan = WLAN(mode=WLAN.STA)

# Die Umgebung wird nach WLAN Netzen durchsucht

nets = wlan.scan()

#Die Schleife legt fest, mit welchem WLAN Netz Verbindung vorgenommen werden soll.

for net in nets:
    if net.ssid == 'HBC_Modellhaus':
        print('Network found!')
        wlan.connect(net.ssid, auth=(net.sec, 'Modellhaus'), timeout=5000)
        while not wlan.isconnected():
            machine.idle() # save power while waiting
        print('WLAN connection succeeded!')
        break


def settimeout(duration):
    pass


rtc = RTC() # real-time-clock
#print(rtc.now())
rtc.ntp_sync('pool.ntp.org', update_period=3600)
#while not rtc.synced():
#    machine.idle() # TODO: make robust: prevent form waiting for ntp

#print(rtc.now())



# MQTT_Server

cid = binascii.hexlify(machine.unique_id())
print(cid)
client = MQTTClient(cid,""192.168.4.1"",user=""Modell"", password=""Modellhaus"", port=1883)
time.sleep(1)
client.connect()


print('conneced to mqtt server', client)

#client.publish('state/ag/uniqueid', binascii.hexlify(machine.unique_id()), retain=True)
client.publish('Zone2', binascii.hexlify(machine.unique_id()), retain=True)


#onewire
#Hier wird die Onewire Sensoren Datenleitung mit mit dem Microkontroller verbunden.
#Für die Verbindung wurder der Pin 4 gewählt. Der Pin kann jedoch frei gewählt werden.

ow = onewire.OneWire(Pin('P4'))
temp = onewire.DS18X20(ow)

# Die Liste legt die Reienfolge für die Bearbeitung der Sensoren fest.

temps=[fuehler[""zone2_heizbett""],fuehler[""zone2_peltier_zuluft""],fuehler[""zone2_peltier_abluft""],
fuehler[""zone2_peltier_fortluft""],fuehler[""zone2_peltier_außenluft""],fuehler[""zone2_globetemp""],
fuehler[""zone2_schicht_unten""],fuehler[""zone2_schicht_oben""],fuehler[""zone2_wandtemp1""],fuehler[""zone2_wandtemp2""]]


#bme680 mit i2c Bus

i2c_dev = I2CAdapter(0, pins=('P7','P8'))
sensor = bme680.BME680(i2c_device=i2c_dev)


# These oversampling settings can be tweaked to
# change the balance between accuracy and noise in
# the data.
sensor.set_humidity_oversample(bme680.OS_2X)
sensor.set_pressure_oversample(bme680.OS_4X)
sensor.set_temperature_oversample(bme680.OS_8X)
sensor.set_filter(bme680.FILTER_SIZE_3)



i2c_dev1 = I2CAdapter(1, pins=('P9','P10'))
sensor1 = bme680.BME680(i2c_device=i2c_dev1)

# These oversampling settings can be tweaked to
# change the balance between accuracy and noise in
# the data.
sensor1.set_humidity_oversample(bme680.OS_2X)
sensor1.set_pressure_oversample(bme680.OS_4X)
sensor1.set_temperature_oversample(bme680.OS_8X)
sensor1.set_filter(bme680.FILTER_SIZE_3)

# auf sd Karte schreiben





# hier wird das Programm ausgefürt

print(""Polling:"")
try:
    while True:
        for i in temps:
            temp.start_conversion(i)
        bme_temp = sensor.data.temperature
        bme_pressure = sensor.data.pressure
        bme_humidity = sensor.data.humidity
        bme_temp_1 = sensor.data.temperature
        bme_pressure_1 = sensor.data.pressure
        bme_humidity_1 = sensor.data.humidity
        json=ujson.dumps({ 'heizbett': temp.read_temp_async(temps[0]),
            'zuluft': temp.read_temp_async(temps[1]),
            'abluft': temp.read_temp_async(temps[2]),
            'fortluft': temp.read_temp_async(temps[3]),
            'aussenluft': temp.read_temp_async(temps[4]),
            'globetemp': temp.read_temp_async(temps[5]),
            'schicht_unten': temp.read_temp_async(temps[6]),
            'schicht_oben': temp.read_temp_async(temps[7]),
            'wandtemp1': temp.read_temp_async(temps[8]),
            'wandtemp2': temp.read_temp_async(temps[9]),
            'bme_temp': bme_temp,
            'pressur': bme_pressure,
            'humidity': bme_humidity,
            'bme_temp_aussen': bme_temp_1,
            'pressur_aussen': bme_pressure_1,
            'humidity_aussen': bme_humidity_1
            })
        try:
            time.sleep(5)
            client.publish('Zone2/Messdaten', json)
        except Exception as e:
            print(e)


except KeyboardInterrupt:
    pass



Traceback (most recent call last):
  File ""main.py"", line 123, in <module>
  File ""/flash/lib/bme680.py"", line 25, in __init__
  File ""/flash/lib/bme680.py"", line 285, in _get_regs
  File ""/flash/lib/i2c.py"", line 26, in read_byte_data
OSError: I2C bus error
MicroPython v1.8.6-849-83e2f7f on 2018-03-19; WiPy with ESP32
Type ""help()"" for more information.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/343/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/343,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjA2NA==,paho.mqtt.python,447632064,343,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:29:07Z,2018-12-16T10:29:07Z,"Hi,
I don't see any reference to paho.mqtt.python in your code. If you are using it, it's behind a wrapper (mqtt.MQTTClient is not coming from paho.mqtt.python).
You traceback does not include any reference to an paho.mqtt.python file.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMjA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/343,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzgwNjg4Mw==,paho.mqtt.python,447806883,343,NA,Modelhaus,44775294,,,NA,2018-12-17T11:04:36Z,2018-12-17T11:04:36Z,@PierreF We solved the problem. It was because of a damaged data cable which was hided behind a wooden wall. Thanks for your comment and help anyways.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzgwNjg4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/344,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/344,paho.mqtt.python,382010357,344,Standard Python code not  working on new pip installs,cymplecy,2357428,Simon Walters,,CLOSED,2018-11-18T22:57:56Z,2018-11-19T09:24:50Z,"Very strange issue
Installed standard mosquitto 1.4.10 on latest Pi 2018-11-13 release.  All working fine - connect and publish from Node-RED running on main Win10.

Decided to do pip install paho-mqtt and ran standard 
```
import paho.mqtt.client as mqtt

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(""$SYS/#"")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(""iot.eclipse.org"", 1883, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
```
but with ip of my broker - nothing received
changed back to iot.eclipse.org - nothing received

copied python prog to another Pi that's been runnining for last 6 months 24/7 - it didn't have paho-mqtt installed so did pip install paho-mqtt - ran python prog - nothing received

So lastly, I copied python prog to my main Win10 machine (which I knew I'd installed paho-mqtt a long time ago - worked perfectly with both my own 2 brokers and iot.eclipse.org

I don't know what else to try out to try and work out what the fault is!!!


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/344/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/344,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTc5MjkxMA==,paho.mqtt.python,439792910,344,NA,cymplecy,2357428,Simon Walters,,NA,2018-11-19T07:12:35Z,2018-11-19T07:12:35Z,"After trying out many things and looking at client/py source code, I came up with this idea to change the def on_connect to
```
def on_connect(client, userdata, flags, rc):
```
which got it to work :)

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTc5MjkxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/344,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTgyNTQ2OQ==,paho.mqtt.python,439825469,344,NA,cymplecy,2357428,Simon Walters,,NA,2018-11-19T09:24:50Z,2018-11-19T09:24:50Z,"I've squared the circle :)  
I used the example from https://www.eclipse.org/paho/clients/python/ which must have not been updated to work with paho-mqtt 1.4.

The example here on Github is fine

I'll try and contact someone to get it changed on the other site
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQzOTgyNTQ2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,paho.mqtt.python,387976957,345,AttributeError: 'NoneType' object has no attribute 'recv',weswitt,15125944,Wesley Witt,,CLOSED,2018-12-05T22:38:26Z,2022-01-19T16:12:37Z,"I'm running version 1.4 (latest). Code is running on Ubuntu 18.04 in a VirtualBox VM.

I'm seeing the following exception and it happens very reliably. The app does not run very long before this throws.
```
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2913, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1578, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1072, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1374, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2030, in _packet_read
    byte = self._sock_recv(1)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 607, in _sock_recv
    return self._sock.recv(bufsize)
AttributeError: 'NoneType' object has no attribute 'recv'
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NDY4Mzg4MA==,paho.mqtt.python,444683880,345,NA,weswitt,15125944,Wesley Witt,,NA,2018-12-05T22:58:07Z,2018-12-05T22:58:07Z,Dropping back to 1.3.1 and this problem does not happen. Seems like a bug introduced in 1.4,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NDY4Mzg4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTUzMzAyOA==,paho.mqtt.python,445533028,345,NA,sousacanfly,10224085,,,NA,2018-12-09T12:22:57Z,2018-12-09T12:22:57Z,"I can confirm, the same's happening here. 
Using latest version too. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTUzMzAyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTU0NDExOA==,paho.mqtt.python,445544118,345,NA,weswitt,15125944,Wesley Witt,,NA,2018-12-09T14:51:30Z,2018-12-09T14:51:30Z,"With some more debugging I worked around this. The issue was caused by the fact that I was using the multi-threaded loop_forever. What happens is that the socket connection is dropped and then my main thread called reconnect. This causes the socket object to be set to None (null) and then you see this error. I changed my code to use the single threaded loop and it no longer happens. That being said, this is a bug in the paho mqtt code.

Also, my previous statement about 1.3.1 fixing it was false. It also happens with that version.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NTU0NDExOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMTcxMg==,paho.mqtt.python,447631712,345,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:23:42Z,2018-12-16T10:23:42Z,loop_forever could not and should not be run in multiple thread. We should either add some note in the documentation and/or some kind of assert in the code that reject running loop_forever twice.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMTcxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzY0OTQ4Mg==,paho.mqtt.python,447649482,345,NA,weswitt,15125944,Wesley Witt,,NA,2018-12-16T14:57:01Z,2018-12-16T14:57:01Z,You misread my comment. I did and would not run loop_forever twice.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzY0OTQ4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzY1NDcxMw==,paho.mqtt.python,447654713,345,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T16:05:18Z,2018-12-16T16:05:18Z,What do you mean by the multi-threaded loop_forever ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzY1NDcxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTI5NDQxNQ==,paho.mqtt.python,545294415,345,NA,kitten77,11948741,l9,,NA,2019-10-23T06:44:55Z,2019-10-23T06:44:55Z,"@PierreF 

```
ERROR asyncio    Exception in callback None()
handle: <Handle cancelled>
Traceback (most recent call last):
  File ""/usr/local/lib/python3.7/asyncio/events.py"", line 88, in _run
    self._context.run(self._callback, *self._args)
  File ""/home/muad/workbench/tonder/irc/plugins/mqtt.py"", line 30, in cb
    client.loop_read()
  File ""/home/muad/venv/tonder3.7/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1374, in loop_read
    rc = self._packet_read()
  File ""/home/muad/venv/tonder3.7/lib/python3.7/site-packages/paho/mqtt/client.py"", line 2030, in _packet_read
    byte = self._sock_recv(1)
  File ""/home/muad/venv/tonder3.7/lib/python3.7/site-packages/paho/mqtt/client.py"", line 607, in _sock_recv
    return self._sock.recv(bufsize)
AttributeError: 'NoneType' object has no attribute 'recv'
```
Any ideas on what is causing this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NTI5NDQxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyNzQ1OQ==,paho.mqtt.python,580427459,345,NA,emha69,59359368,,,NA,2020-01-30T19:57:42Z,2020-01-30T19:57:42Z,"This seems to be caused if the client.loop(n>1), and if the client.loop() is not used immediately after client.publish().
For example, when the client.loop() is used in the main loop e.g. for waiting for messages or something like that.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDQyNzQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzQwNTM5NQ==,paho.mqtt.python,667405395,345,NA,bggardner,1537777,,,NA,2020-07-31T22:02:43Z,2020-07-31T22:02:43Z,"I had this error when using `loop_start()` and calling `connect()` more than once, not realizing the client auto-reconnects.  So, not calling `connect()` again was my solution.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NzQwNTM5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42QBWS,paho.mqtt.python,910169490,345,NA,mxmaxime,10252674,Maxime moreau,contact@maxime-moreau.fr,NA,2021-09-01T10:57:52Z,2021-09-01T10:57:52Z,"Got the same issue here, sometimes it works sometimes not... After a bit of research I found that I had `loop_start()` and after a `loop_forever()`, removing one of them worked.

I've searched a bit in the library, I don't understand how `self._sock` could be `None`, it's only set to `None` in the method `_sock_close()`. I didn't searched any further, but in my understanding:
- checks on `self._sock` is not None are performed before calling `self._sock_recv`, but in between another thread set it to None by calling `_sock_close()`.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42QBWS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/345,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48mHnm,paho.mqtt.python,1016625638,345,NA,russell-sealand,74590108,,,NA,2022-01-19T16:12:37Z,2022-01-19T16:12:37Z,I fixed the problem by switching to use client.loop_start() instead of client.loop_forever(),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48mHnm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346,paho.mqtt.python,391369720,346,Document the lock helds during callbacks,jbwdevries,17177339,,,CLOSED,2018-12-15T11:27:07Z,2021-08-16T22:43:30Z,"During callbacks, the mqtt client holds a lock. If your application also uses locks, this can result in a deadlock. I think it would be best if there was a short section on the README or such that makes a note of this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMTQ1Mw==,paho.mqtt.python,447631453,346,NA,PierreF,359833,Pierre Fersing,,NA,2018-12-16T10:19:53Z,2018-12-16T10:19:53Z,"I don't think we should expose in any way our internal lock behavior. I think it should not impact user and not be ""documented"" to allow it to change.
Could you describe the use-case where you create a deadlock, so we could fix this bug ?
I also sometime ask myself if we should not simplify the locks used in the library. I count 9 locks, which seems way too much.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzMTQ1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzODA4MA==,paho.mqtt.python,447638080,346,NA,jbwdevries,17177339,,,NA,2018-12-16T12:11:51Z,2018-12-16T12:11:51Z,"In our case, we had a data class which uses a lock to protect it's data. In on_message, we would call a function in this class. Sometimes, a second thread would call upon this data class to publish messages. This could causes a deadlock, since the on_message would first claim the paho lock, and then our lock, but the other thread would claim them the other way around.

Once we found this, it was easy enough to move the publish call outside the lock, and the problem was solved. Though it took some digging before we actually found out this was the case.

I also wondered why you claim a lock during the callback at all; is that strictly necessary?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0NzYzODA4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/346,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41otqY,paho.mqtt.python,899865240,346,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:43:05Z,2021-08-16T22:43:05Z,"In the `1.6.x` branch locking in callbacks has been improved so the only callback held is  in_callback_mutex, which will not call deadlocks with any client code, so I think this can be closed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41otqY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,paho.mqtt.python,391500315,347,"German umlauts like ""ä"" ü""ö"" are not supported ",HannHank,24795815,,,CLOSED,2018-12-16T20:08:04Z,2021-08-16T22:44:23Z,"Ich would like to send some german umlauts over my mqtt broker but is alway return just a weird number. Please fix this for me .

thanks ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODIwMjkwNw==,paho.mqtt.python,448202907,347,NA,ralight,79578,Roger Light,,NA,2018-12-18T12:23:48Z,2018-12-18T12:23:48Z,Could you share some example code that fails? I've just tested with a modified version (using umlauts) of  https://github.com/eclipse/paho.mqtt.python/blob/master/examples/publish_utf8-27.py and it worked fine.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODIwMjkwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMyMzcyNQ==,paho.mqtt.python,448323725,347,NA,HannHank,24795815,,,NA,2018-12-18T18:35:52Z,2018-12-18T18:35:52Z,"```
import paho.mqtt.client as mqtt
# -*- encoding: utf-8 -*-
global Message 
Message = True
# Define event callbacks
def on_connect(client, userdata, flags, rc):
    print(""rc: "" + str(rc))

def on_message(client, obj, msg):
    global Message
    print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))
    Message = str(msg.payload)
    Message = Message[:-1] 
    Message = Message[2:] 

def on_publish(client, obj, mid):
    print(""mid: "" + str(mid))
    

def on_subscribe(client, obj, mid, granted_qos):
    print(""Subscribed: "" + str(mid) + "" "" + str(granted_qos))

def on_log(client, obj, level, string):
    print(string)
def state():
    global Message
    
    return Message
mqttc = mqtt.Client()
# Assign event callbacks
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe

# Uncomment to enable debug messages
#mqttc.on_log = on_log



# Connect
mqttc.username_pw_set(""*******"", ""**********************"")
mqttc.connect(""*******************"", *******)
topic = ""SH1/actor/in""
# Start subscribe, with QoS level 0
mqttc.subscribe(topic)
mqttc.loop()
# Publish a message
#mqttc.publish(""SH1/actor/ATemp"", ""my message"")

# Continue the network loop, exit when an error occurs


##if __name__ == '__main__':
 #   start()
```


I wrote a messager in python, and normally the code is working, but when i send Umlauts. I just get for ""ä"" this ""\xc3\xa41"" help :( sorry for my bad english :( ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMyMzcyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMyOTIwNA==,paho.mqtt.python,448329204,347,NA,ralight,79578,Roger Light,,NA,2018-12-18T18:52:28Z,2018-12-18T18:52:28Z,"My guess is that you're expecting the payload to be a string, when in fact it is a set of bytes. Please try:

```
print(msg.payload.decode('utf-8'))
```

instead of what I presume you are doing at the moment:
```
print(msg.payload)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMyOTIwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzMDY2NQ==,paho.mqtt.python,448330665,347,NA,HannHank,24795815,,,NA,2018-12-18T18:56:54Z,2018-12-18T18:56:54Z," Message = str(msg.payload.decode('utf-8'))
          ^
SyntaxError: invalid syntax

mhhhm do i need to import something ? :/ ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzMDY2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzMTQyOQ==,paho.mqtt.python,448331429,347,NA,ralight,79578,Roger Light,,NA,2018-12-18T18:59:11Z,2018-12-18T18:59:11Z,Looks like a syntax error for before that line to me...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzMTQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzNTYyNA==,paho.mqtt.python,448335624,347,NA,HannHank,24795815,,,NA,2018-12-18T19:12:26Z,2018-12-18T19:12:26Z,"okay i was a little bit to fast :) Now it works. Thank you so much, you saved my day :) ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzNTYyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzNzEyMA==,paho.mqtt.python,448337120,347,NA,HannHank,24795815,,,NA,2018-12-18T19:17:21Z,2018-12-18T19:17:21Z,"Ähm i have also another question, would it be possible to send a picture over this lib ? I guess no, but iam not sure about it .","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODMzNzEyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/347,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODM1MjYwOQ==,paho.mqtt.python,448352609,347,NA,ralight,79578,Roger Light,,NA,2018-12-18T20:07:09Z,2018-12-18T20:07:09Z,"Always best to open a new issue when you're asking a different question - but the answer is that MQTT doesn't do anything with its payload, so you can send text, pictures, anything you want.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ0ODM1MjYwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,paho.mqtt.python,391749083,348,Prevent ack of received message until final,HaraldGustafsson,3320413,Harald Gustafsson,,CLOSED,2018-12-17T14:57:24Z,2023-12-23T09:07:58Z,"Hi,

Would it be possible adapt paho so that qos=1 message are not acknowledge until after handling of the on_message call? I was thinking that in `client.py: _handle_publish()` we have the following code:

        elif message.qos == 1:
            rc = self._send_puback(message.mid)
            self._handle_on_message(message)
            return rc

Could it be changed to:

        elif message.qos == 1:
            try:
                  self._handle_on_message(message)
            except SomeSuitableException:
                  return MQTT_ERR_AGAIN # Would this be a good error?
            rc = self._send_puback(message.mid)
            return rc

And then allow `_handle_on_message` to pass on SomeSuitableException. Which should be some Paho defined exception. This would allow not acknowledge message if for example the callback fails to permanently store the message due to error in such storage.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNDA0MA==,paho.mqtt.python,477524040,348,NA,vrst37,34431050,,,NA,2019-03-28T09:49:11Z,2019-03-28T09:49:11Z,"While this is possible, why would you want to do this??

Imagine you block with a sleep(60) in on_message, then qos=1 ack is not sent to the broker. Then the broker keeps trying to send the message again and again, queuing the message in the library buffer. I don't think that behaviour is acceptable.

The problem in general terms is, you are trying to use protocol level handshaking concepts to signify application level signals. Which I think is bad, we should not confuse the two.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyNDA0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzc3MzI0OQ==,paho.mqtt.python,477773249,348,NA,HaraldGustafsson,3320413,Harald Gustafsson,,NA,2019-03-28T21:13:37Z,2019-03-28T21:13:37Z,"@vrst37 it is common for many broker protocols to allow waiting with ack until a message is processed. The general thinking is that it is not recieved persistently until e.g. stored. A broker should not resend a message while the connection is not lost. In Mqtt 5 it is even forbidden to resend while the connection is alive. 
The exception is to have a typical python way of signaling that something bad happened. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzc3MzI0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3ODk1NDc4NQ==,paho.mqtt.python,478954785,348,NA,yatwang,27543825,,,NA,2019-04-02T11:27:37Z,2019-04-02T11:27:37Z,"@vrst37 I find that there is risk of message lost even with QoS 1 due to the PUBACK was sent back to the broker before calling the on_message callback function. If there is power outage, hardware or other system failure after the PUBACK and before the on_message callback is called, there will be message lost and it seems that there is no way to avoid it.

The Java implementation Eclipse Paho client sends the acknowledgement until the messageArrived method returns cleanly.
[org.eclipse.paho.client.mqttv3 - Interface MqttCallback](https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttCallback.html)

> void messageArrived(java.lang.String topic, MqttMessage message) throws java.lang.Exception
>
>This method is called when a message arrives from the server.
This method is invoked synchronously by the MQTT client. An acknowledgment is not sent back to the server until this method returns cleanly. 

Besides, I have also tried the mqtt.js client library and it also sends the PUBACK after the on message callback function returns.
[The MQTT client for Node.js](https://github.com/mqttjs/MQTT.js)

In other MQ products, they also support similar feature, e.g. RabbitMQ
[RabbitMQ tutorial - Work Queues](https://www.rabbitmq.com/tutorials/tutorial-two-python.html)
> In order to make sure a message is never lost, RabbitMQ supports message acknowledgments. An ack(nowledgement) is sent back by the consumer to tell RabbitMQ that a particular message had been received, processed and that RabbitMQ is free to delete it.

In the on_message function, programmers may want to write the message to Redis, MQ, Database, etc. with high availability allowing workers for further processing for building reliable and scalable systems.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3ODk1NDc4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3OTA3MzA1Ng==,paho.mqtt.python,479073056,348,NA,yatwang,27543825,,,NA,2019-04-02T16:12:19Z,2019-04-02T16:12:19Z,"MQTT is an application layer protocol on top of the TCP transport layer protocol. If the PUBACK is not sent after the client or the broker handling the message, I think the TCP already provides reliable message delivery and the extra acknowledgement would not be needed. Just my two cents.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3OTA3MzA1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NTQzNDg1Nw==,paho.mqtt.python,555434857,348,NA,dalbani,1470270,Damiano Albani,damiano.albani@gmail.com,NA,2019-11-19T10:15:44Z,2019-11-19T10:15:44Z,"Coming from a RabbitMQ / Google Cloud PubSub background, I find it strange as well that MQTT messages are automatically ACK'ed, even if a problem occurred in the handler.
The fact that the Java version of the Paho client doesn't acknowledge in case of an error, seems a good reason to implement it as well in the Python client. Isn't it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NTQzNDg1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1Nzg4NDAwNw==,paho.mqtt.python,557884007,348,NA,dalbani,1470270,Damiano Albani,damiano.albani@gmail.com,NA,2019-11-24T12:30:21Z,2019-11-24T12:30:21Z,"I've looked at other Paho implementations, and it seems that the C implementation is the only (other) one that supports explicit acknowledgement, via the return value of the [MQTTAsync_messageArrived](https://www.eclipse.org/paho/files/mqttdoc/MQTTAsync/html/_m_q_t_t_async_8h.html#a3918ead59b56816a8d7544def184e48e) function.
(This functionality also exists in the synchronous version of the library.)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1Nzg4NDAwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNzMwMjYxNw==,paho.mqtt.python,607302617,348,NA,baldoalessandro,902985,Baldo Alessandro,,NA,2020-04-01T15:03:00Z,2020-04-01T15:03:00Z,"I found this https://github.com/eclipse/paho.mqtt.c/issues/522 to be something worth looking at!
It seems to me that this has pushed people to revive the Python C binding of paho for the sake of conceptual form.
>The problem in general terms is, you are trying to use protocol level handshaking concepts to signify application level signals. Which I think is bad, we should not confuse the two.

Please re-consider this, I would be more that happy to contribute code/tests","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwNzMwMjYxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMTMxMjU2OA==,paho.mqtt.python,631312568,348,NA,chrismaes87,6972561,Chris Maes,chrismaes87@gmail.com,NA,2020-05-20T08:09:04Z,2020-05-20T08:09:04Z,"Hello, this is really a drawback for the paho-mqtt library compared to other libraries. We now have no way to guarantee that we will not lose any message. The solution proposed (processing before sending the ack message) would be perfect and doesn't seem complicated to implement.

This is a requirement for paho-mqtt to be production-grade! We cannot afford the risk to lose a message due to network glitches or other.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMTMxMjU2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTM4ODgxNg==,paho.mqtt.python,659388816,348,NA,munluk,28752839,munluk,,NA,2020-07-16T12:48:55Z,2020-07-16T12:48:55Z,"Hi @chrismaes87 ,
I just wanted make a note at this point. MQTT is not a message queue. The re-delivery of messages (probably depending on the MQTT version) is specified different than you might expect. Please read up on the official documentation for [v3.1.1](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718037). 

> When a Client reconnects with CleanSession set to 0, both the Client and Server MUST re-send any unacknowledged PUBLISH Packets (where QoS > 0) and PUBREL Packets using their original Packet Identifiers [MQTT-4.4.0-1]. This is the only circumstance where a Client or Server is REQUIRED to redeliver messages.

If you read it, it sounds that if you cannot process a message, you can only assure that the broker will re-send the PUBLISH package IF you re-connect. Of course this happens only on publishes QoS > 0. This means that in case you do not want to acknowledge the PUBLISH with a PUBACK the broker will store it and he is only required to send the message to the client again when you re-connect.

Please correct me if I am wrong.

#FirstGitCommentEver :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTM4ODgxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTM5Njg5OQ==,paho.mqtt.python,659396899,348,NA,HaraldGustafsson,3320413,Harald Gustafsson,,NA,2020-07-16T13:03:56Z,2020-07-16T13:03:56Z,"@munluk this i already commented on in my comment above. Why you should not send the ack is due to if you get a fail crash or fail silent between receiving the message and handling it. When the client crash or hangs it will reconnect. You can't use this as a way to handle any exception, since at least you need to reconnect. But you won't lose the message with this change compared to how it is implemented today. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1OTM5Njg5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzU4MzU5MQ==,paho.mqtt.python,723583591,348,NA,linuxbasic,688922,Linus Basig,,NA,2020-11-08T14:19:29Z,2020-11-08T14:19:29Z,"The [MQTT specifications](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_QoS_1:_At) says: 
> In the QoS 1 delivery protocol, the receiver MUST respond with a PUBACK packet containing the Packet Identifier from the incoming PUBLISH packet, having accepted ownership of the Application Message

`Figure 4.2 – QoS 1 protocol flow diagram, non-normative example` goes into more detail:
> The receiver does not need to complete delivery of the Application Message before sending the PUBACK. When its original sender receives the PUBACK packet, ownership of the Application Message is transferred to the receiver.

I personally find this annoying and misleading to burry this small fact in the specs but that's the downside of a lightweight and telemetry-focused protocol. 🙈

Besides this ""non-normative example"" the specification is extremely vague about the definition of ""accepting ownership of a message"". I would prefer the application and not the messaging library to decide when the ownership of a message is accepted.

A ""manual ack"" mode would be extremely valuable (like [NATS Streaming](https://docs.nats.io/developing-with-nats-streaming/acks) has). I think a ""manual ack"" mode would not conflict with the specification as one can easily include the processing of a message (e.g. store it in a database) into the ""taking ownership process"".

I understand that this change would be somewhat revolutionary in the MQTT library landscape, but I see a clear need and no obvious downsides in adding it as an optional feature.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzU4MzU5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzY2MTQ3Mw==,paho.mqtt.python,723661473,348,NA,munluk,28752839,munluk,,NA,2020-11-08T20:29:22Z,2020-11-08T20:29:22Z,"@linuxbasic, the manual acknowledging is built in the java version of the paho client :wink: https://github.com/eclipse/paho.mqtt.java/blob/master/org.eclipse.paho.mqttv5.client/src/main/java/org/eclipse/paho/mqttv5/client/IMqttAsyncClient.java#L823
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzY2MTQ3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTY5OTAxNQ==,paho.mqtt.python,789699015,348,NA,petersilva,394117,Peter Silva,,NA,2021-03-03T13:03:08Z,2021-03-03T13:03:08Z,"I have made a patch 6225aff21571d7bc8e2e1507954dea037bb1af46
It's ... I dunno, a dozen lines of code? most of the change is documenting the api change.   

It adds auto_ack as an argument to the __init__ function, defaulting to True (existing behaviour.)
If you turn set it to False, then the library no longer provides acks.

messages already have the ""mid"" attribute defined.  Just need to provide that as an argument to the new
entry point  *ack(mid)*

Also added an auto_ack(on=True) entry point to turn if off ... purpose of that was this bit of logic, in my client code:
```

               if hasattr( self.client, 'auto_ack' ):
                    self.client.auto_ack( False )
                    logger.info(""Switching off auto_ack for higher reliability. Using explicit acknowledgements."" )
                else:
                    logger.info(""paho library without auto_ack support. Loses data every crash or restart."" )

```
To give the ability to test  for presence of the feature, and use it if it is there.
Would be nice if people could try it out, and comment.

It is available in: https://github.com/MetPX/paho.mqtt.python



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTY5OTAxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40jyCE,paho.mqtt.python,881795204,348,NA,BBBSnowball,454972,,,NA,2021-07-17T01:41:40Z,2021-07-17T01:41:40Z,"With the current implementation, puback says that the message has reached an intermediate point between the server and the application. If we say that the paho library is the receiver, this conforms to the spec (""arrives at the receiver at least once""). However, I would argue that it does so in a very narrow way that is next to useless. That way, QoS 1 slightly increases the chance of delivering the message but it doesn't give any guarantees that are meaningful to the application, i.e. the message can still get lost before it has any effect that is visible to the application.

There is some evidence that the authors of MQTT Version 3.1.1 wanted the narrow interpretation, which only focusses on network problems: They talk about ""data loss on some older TCP networks"" and they don't forbid resending messages while the TCP connection is alive. Both of that is changed in MQTT 5 (as has been pointed out by @HaraldGustafsson).

I would argue that the correct default behaviour would be to first call the handler and then puback the message. That way, we will handle it at least once (and maybe more than once if we are interrupted before the puback). Furthermore, the sender can use our puback messages to implement a sensible rate limit. While I strongly think that this is the correct default, it would be an incompatible change.

The argument is not so clear cut when the handler aborts with an exception: We would usually not puback and propagate the error. This will most likely lead to a reconnect and the message will be processed again. This is a good reaction in many cases, e.g. if handling failed due to temporary connection problems with the database. It wouldn't make much sense to lie and puback because the next message will run into the same problem. However, this will hamper any further progress if the exception is due to a persistent problem, e.g. one message contains an emoji and the application is not prepared to handle this. We would be better off skipping this message.

The approach taken by the PR is different: It doesn't change the default and it gives all the power to the application. It is also more powerful than simply changing the order of calls: The application may return from the callback and only later acknowledge the message. This is required for asyncio-mqtt, which puts the message into an asyncio queue to be handled later. Thus, the PR is necessary even if we decide to change the default behaviour (which I assume, we won't do). With that power, comes some responsibility: The application must make sure to always call ack() eventually. It is in a better position than the library because it can know which exceptions it can recover from. Still, this is no easy feat if the way to the usual ack() call involves several threads or tasks and has multiple failure points. For example, asyncio-mqtt will put messages into a bounded queue and it will drop messages if the queue is full.

Unfortunately, some parts of the MQTT 3.1.1 approach are still present in MQTT 5 (and there are good arguments for keeping it that way):

- ""The Client MUST send PUBACK packets in the order in which the corresponding PUBLISH packets were received (QoS 1 messages) [MQTT-4.6.0-2]""
- ""The Client MUST acknowledge any Publish packet it receives according to the applicable QoS rules regardless of whether it elects to process the Application Message that it contains [MQTT-4.5.0-2].""

The non-normative part says that the first one is for the benefit of the subscriber (i.e. the application) but it wouldn't be unthinkable that a server takes advantage of that guarantee to optimize its tracking of unacknowledged messages. I think we can add this requirement to the help text and let the application deal with it. They are in a better position to do so.

For the second one: We either have to add a default on_message handler with `if not self._auto_ack: self.ack(message.mid)` or again put the onus onto the application. I'd say the latter is fine because if the application does add a handler, it has to deal with that anyway (we cannot know whether the handler failed to call ack() or plans to do so later).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40jyCE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40m-uB,paho.mqtt.python,882633601,348,NA,petersilva,394117,Peter Silva,,NA,2021-07-19T15:16:56Z,2021-07-19T15:16:56Z,"I would add that callbacks need to return quickly to avoid message loss (learned that the hard way, yup!)  I think callbacks are synchronous with the library. My guess would be there are many applications where ensuring a message is properly received is more involved than just running the initial (abbreviated) callback.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40m-uB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43XJT0,paho.mqtt.python,928814324,348,NA,martinscheffler,1038753,,,NA,2021-09-28T04:59:38Z,2021-09-28T04:59:38Z,"Just wanted to +1 this issue. I am really surprised that there is not a single python mqtt client library that lets me not send an ACK to the broker when storage to the database fails. 
I have a situation where lost messages can result in financial losses, so the chain of ACKs must be without gaps.
Please please don't make me switch back to Java : (","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43XJT0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cN-x,paho.mqtt.python,930144177,348,NA,petersilva,394117,Peter Silva,,NA,2021-09-29T12:49:51Z,2021-09-29T12:49:51Z,"
Just feel the need to point out later in that same section of the MQTT standard: 

""By default, a Server MUST treat every Topic as an Ordered Topic when it is forwarding messages on **Non‑shared Subscriptions**. [MQTT-4.6.0-6]. A Server MAY provide an administrative or other mechanism to allow one or more Topics to not be treated as an Ordered Topic.""

So the above stipulations about ordering apply to non-shared subscriptions.  In my use case, all subscriptions are shared, so it does not apply, even in the standard.  Also note that the next sentence gives permission for the server to permit out of order... without saying how to signal that to a client.



 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cN-x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cPA2,paho.mqtt.python,930148406,348,NA,petersilva,394117,Peter Silva,,NA,2021-09-29T12:55:38Z,2021-09-29T12:55:38Z,"fwiw... I'm also puzzled by the term ""ordered Topic""... in a single connection, one could subscribe to multiple topics, either with multiple subscribe topics or with wildcards, it isn't clear to me that the broker is sending ""an ordered Topic"" at all. it is sending messages from many topics. It isn't clear to me that messages from different topics are considered part of the same ""ordered Topic"" or not.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cPA2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cRKD,paho.mqtt.python,930157187,348,NA,petersilva,394117,Peter Silva,,NA,2021-09-29T13:06:23Z,2021-09-29T13:06:23Z,"my mearning may be more clear thus... perhaps messages on topic A are 10x more expensive (in time) to process than topic B but 100x less frequent.  so when you receive a message on A, in a stream of B, then it makes sense to acknowledge 10B's before the A you received, maximizing throughput.  I read the spec. as the combined flow on A and B are a single ordered Topic, so it would insist that the A be acknowledged while the B's wait. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43cRKD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5sDlZ4,paho.mqtt.python,1812878968,348,NA,SebastianBerchtold,1236100,Sebastian Berchtold,Seb.Berchtold@web.de,NA,2023-11-15T16:37:30Z,2023-11-15T16:37:30Z,"I would be interested in this, as apparently many others are.
Is there any reason to not merge the recently updated pull request #753?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5sDlZ4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vIV8e,paho.mqtt.python,1864458014,348,NA,PierreF,359833,Pierre Fersing,,NA,2023-12-20T13:16:41Z,2023-12-20T13:16:41Z,"To my understanding this issue was fixed with release 1.6.0 in commit https://github.com/eclipse/paho.mqtt.python/commit/9a4941efd758ca4231d4f16a8d3951686e24cb92: The ack of QoS = 1 message now occur after on_publish callback.

If the issue isn't fixed, feel free to reopen this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vIV8e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vWmeW,paho.mqtt.python,1868195734,348,NA,petersilva,394117,Peter Silva,,NA,2023-12-23T04:04:10Z,2023-12-23T04:04:10Z,"I'm not sure if this is worth re-opening, but until #753 is merged, providing for application controlled manual acknowledgements, I don't think all the cases that people are interested in related to this issue are addressed.

The most common/obvious case is back-pressure... if something being used for persistence is temporarily unavailable, then we want to apply back-pressure to the broker, and stop receiving new messages. The calls to on_message are automatic, and the acknowledgement of messages happens after on_message is called without regard to success. Incoming queue of messages will be drained into the current consumer, regardless of the ability to process them.

I don't know if such problems have been addressed in more recent code, but I had lots of issues with message loss when my on_message processing got complicated. In my usage of the library, on_messsage had to be extremely lightweight to avoid message loss. So having on_message not return as a means of controlling acknowledgements has not been an option in the past.  

This is especially problematic when using shared subscriptions where processing is OK on one participant, but broken in the other.  Rather than
having the working subscriber process all messages, the current method will share the messages evenly among the share participants, because the library will call on_message (which must return quickly) and then acknowledge all the messages regardless of the ability to process them.

There is no way for an application to apply back-pressure, that is, to get the source to wait while the consumer has some temporary issue, or for different participants to consume at different rates.

There should be no reason to debate the need for manual application level acknowledgements since other language bindings (e.g. java) provide this same functionality.  it has already been debated and accepted, and refusing to add it to the python binding is just hobbling python users when compared to users of other languages.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vWmeW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/348,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vWzPP,paho.mqtt.python,1868248015,348,NA,PierreF,359833,Pierre Fersing,,NA,2023-12-23T09:07:57Z,2023-12-23T09:07:57Z,"Agree that manual ack could be added. I've closed the issue because the issue was about acking after on_message.

Side note on back pressure: I use to do back pressure by not returning from on the on_message callback, which... ""work"". It does because we don't ack the message but will cause the client to disconnect due to not responding to keepalive which is not perfect. Anyway #753 is merged.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vWzPP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/349,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/349,paho.mqtt.python,392577492,349,Paho Client send PUBREC after reconnecting,codearky,45842933,,,CLOSED,2018-12-19T12:24:30Z,2019-02-12T12:55:49Z,"Hi,
When the client tries to reconnect on a persistent session, it first sends again PUBREC packets which were (I guess) queued up during the last session. According to the MQTT  spec, this is an invalid behavior, the only packets that MUST be resent on a reconnect of a persistent sessions are the PUBLISH and PUBREL packets. This happens until the client's queue clean up (which occurs on restart).

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/349/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350,paho.mqtt.python,392853025,350,can't sent big file,vic68liu,34366320,,,CLOSED,2018-12-20T01:47:39Z,2023-12-23T23:27:01Z,"Hi Team, I want to send a audio file from Raspberry ,but I can't sent the file out if the size is more than 80k.  Follow is my code.  

```
import paho.mqtt.client as mqtt
import os, time, json,sys,socket,base64
import yaml

audio_path = ""/home/pi/record/""
host = ""192.168.6.21""
port = 1883
keep_alive = 600


def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))


def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))


def publish_message(tile,payload,qos):
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(host, port, keep_alive)
    print(payload)
    client.publish(tile, payload=payload, qos=qos)
    client.loop_start()


def publish_audio_file():
    #audio_ab_path = record_sound()
    #f = open(""/home/pi/record/audio.wav"", ""rb"")
    f = open(""/home/pi/record/test.txt"",""rb"")
    audio_data = f.read()
    audio_bytes = bytes(audio_data)
    publish_message(""voice/audio"", audio_bytes, 0)
    f.close()
	
	
def encode_audio(audio_ab_path):
    f = open(audio_ab_path, ""rb"")
    audio_data = f.read()
    
    return base64.b64encode(audio_data)


if __name__ == ""__main__"":
    publish_audio_file()
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDA1NTY1MQ==,paho.mqtt.python,470055651,350,NA,ZsnZeeshan,26135642,Muhammad Zeeshan,zeeshan_16_11@hotmail.com,NA,2019-03-06T10:31:02Z,2019-03-06T10:31:02Z,"@vic68liu I would never recommend sending files over the mqtt protocol. For audio files, you may use UDP sockets (for streaming, recorded files) or maybe TCP iff (recorded files).
You may use mqtt protocol for a handshake between the two or more devices for that purpose.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDA1NTY1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDA1NzMyNA==,paho.mqtt.python,470057324,350,NA,ralight,79578,Roger Light,,NA,2019-03-06T10:36:15Z,2019-03-06T10:36:15Z,"```
    client.loop_start()
```

The problem is that you call loop_start(), and then exit immediately. The data doesn't have chance to get sent.

I'd suggest setting up an `on_publish()` callback in which you call `client.disconnect()` - this will be called when your client has sent the message. Combine that with `loop_forever()` instead of `loop_start()` and you should be fine.

Alternatively, if you are just sending a single message at once, you could use the publish helper, which does everything for you:

```
import paho.mqtt.publish as publish

publish.single(""paho/test/single"", ""message"", hostname=""test.mosquitto.org"")
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MDA1NzMyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/350,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVli,paho.mqtt.python,1868388706,350,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:27:01Z,2023-12-23T23:27:01Z,Closing as it looks like an answer was provided (and the issue has been inactive for some time).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVli/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/351,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/351,paho.mqtt.python,395553838,351,"Hexadecimal  array send,    how  to  publish?",xcmg,16689548,,,CLOSED,2019-01-03T12:19:52Z,2021-08-16T22:47:02Z,"import paho.mqtt.publish as publish

intArr = [hex(11), hex(11), hex(12), hex(51), hex(21), hex(31), hex(31), hex(12)] #Hex send
publish.single(""Data/F911"",  intArr , hostname=""host"")



That 's  no response! 
How to do this？



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/351/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/351,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDA4MTg0MQ==,paho.mqtt.python,474081841,351,NA,PierreF,359833,Pierre Fersing,,NA,2019-03-18T20:11:59Z,2019-03-18T20:11:59Z,"It's a bug that single hang like it does. The issue is that publish.single expect a single value (string, byte or bytearray) and not a list.
You will need to convert your intArr to a string (`''.join(intArr)`) before passing it to publish.single.

But I'm not sure that you really want to send that. Do you really want to use `hex()` ? If you want to send the binary string made of 8 bytes whose decimal value are 11, 11, 12, ...,  31, 12, then you should use
```
binary_value = bytearray([11, 11, 12, 51, 21, 31, 31, 12])
# OR
binary_value = b'\x0b\x0b\x0c3\x15\x1f\x1f\x0c'
publish.single(""Data/F911"", binary_value , hostname=""host"")
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDA4MTg0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/351,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouA7,paho.mqtt.python,899866683,351,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:47:02Z,2021-08-16T22:47:02Z,"An exception is now raised if a list is passed, so I think this can be closed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ouA7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352,paho.mqtt.python,400549309,352,"Error ""bad char in struct format"" on data publish",monexiao,37441996,,,CLOSED,2019-01-18T02:45:12Z,2023-12-23T23:40:16Z,"```
Traceback (most recent call last):
  File ""/opt/test_mqtt/test_mqtt_client.py"", line 227, in run
    self.client.loop_forever()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1578, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1072, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1374, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2071, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2560, in _packet_handle
    return self._handle_publish()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2728, in _handle_publish
    (topic, packet) = struct.unpack(pack_format, packet)
error: bad char in struct format
```

-------------------------------------------------------------------------------------------------------------------
Hello, I am also in front of this issue when publishing data sometimes.
In my code, I create a class extended the mqtt.client, and thread.
In my MAIN THREAD, I init a instance of the class I created and then call the client.loop_forever() in the thread of the instance.
Finally, sometimes some data will be published from MAIN THREAD, and the error sometimes occur on/after publishing.

I do not call loop_forever() and loop() from different threads in the same time.

Can someone help me or give some tip to avoid this issue ?? I appreciate your response. Thanks a lot.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDA4Mzc3MQ==,paho.mqtt.python,474083771,352,NA,PierreF,359833,Pierre Fersing,,NA,2019-03-18T20:17:31Z,2019-03-18T20:17:31Z,Could it be a due to MQTT broker like in #155 ? What it the MQTT broker you are using and can you try against Mosquitto ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDA4Mzc3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDE0OTc5MA==,paho.mqtt.python,474149790,352,NA,monexiao,37441996,,,NA,2019-03-19T00:16:11Z,2019-03-19T00:16:11Z,"> Could it be a due to MQTT broker like in #155 ? What it the MQTT broker you are using and can you try against Mosquitto ?

In my case, the issue occur when the client the Mosquitto 1.4.8, it don't seem to happen after the mosquttio upgraded.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NDE0OTc5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/352,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXV8r,paho.mqtt.python,1868390187,352,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:40:16Z,2023-12-23T23:40:16Z,"I'm going to close this because it seems the issue may have been due to an old version of Mosquitto sending an invalid packet (potentially, there have also been changes to this library since which may have addressed the issue). If the issue has reoccurred then please reopen this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXV8r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,paho.mqtt.python,401325326,353,connection timeout,deiv23,45002907,,,CLOSED,2019-01-21T12:10:38Z,2023-12-23T23:21:11Z,Is there any way of setting a timeout for the client.connect method?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MjI5MjcyNw==,paho.mqtt.python,472292727,353,NA,agm30,17164371,,,NA,2019-03-13T06:08:41Z,2019-03-13T06:08:41Z,I want to do the same thing. I'm having a connection timeout error as well when I try to establish connection over TLS. I initially thought the networks was slow but OpenVPN works on the same network. How can I modify the timeout value when connecting?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MjI5MjcyNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMDI5Ng==,paho.mqtt.python,477520296,353,NA,vrst37,34431050,,,NA,2019-03-28T09:38:22Z,2019-03-28T09:38:22Z,"Hello guys, from what I can understand [here](https://github.com/eclipse/paho.mqtt.python/blob/4fa31585e501a4e5b5c0d91c2dd14a0f69a6f89c/src/paho/mqtt/client.py#L993) you can just set the timeout by setting the keepalive variable. Give it a shot and see what comes of it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUyMDI5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDQ5NDM0NA==,paho.mqtt.python,490494344,353,NA,escrichov,1677451,,,NA,2019-05-08T13:52:44Z,2019-05-08T13:52:44Z,"For me this doesn't work. The problem is that inside reconnect method there is a call to socket.create_connection. This function has a default the default timeout ""_GLOBAL_DEFAULT_TIMEOUT"". 
The solution for me is to modify socket.create_connection((self._host, self._port)) call with socket.create_connection((self._host, self._port), timeout=self._keepalive)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDQ5NDM0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MzczMDczNw==,paho.mqtt.python,863730737,353,NA,gilbertwong96,20479699,Gilbert,gilbertwong96@icloud.com,NA,2021-06-18T03:38:26Z,2021-06-18T03:38:26Z,This issue hasn't been resolved.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MzczMDczNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ixsJ,paho.mqtt.python,898308873,353,NA,azdobylak,6059870,Adrian Zdobylak,,NA,2021-08-13T09:13:08Z,2021-08-13T09:13:08Z,"As a workaround you can set default socket timeout and then use `client.connect`.
```python
import socket
socket.setdefaulttimeout(timeout)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41ixsJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5BhEP9,paho.mqtt.python,1099187197,353,NA,creyD,15138480,Conrad,,NA,2022-04-14T13:28:24Z,2022-04-14T13:28:24Z,"The default timeout for socket doesn't work, using `paho.mqtt.publish.single` as it probably get's overwritten by paho in the process.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5BhEP9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/353,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVb8,paho.mqtt.python,1868388092,353,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:21:11Z,2023-12-23T23:21:11Z,"[Changes](https://github.com/eclipse/paho.mqtt.python/pull/578) have been made since this issue was raised; you can now use:

```
mqtt_client = mqtt.Client()
mqtt_client._connect_timeout = 1.0
```

I believe that this addresses the original issue so am going to close this. If you are still having problems then please raise a new issue (but please include as much information as possible including code/logs). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVb8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,paho.mqtt.python,402930531,354,Deadlock when publishing from multiple threads.,blockbomb,629077,Brian Block,block.j.brian@gmail.com,CLOSED,2019-01-24T22:49:41Z,2024-01-07T23:06:53Z,"There seems to be an issue that is causing my codebase a deadlock that seem related to #168 and #235. when using version 1.4.0 of the project.

I have a multi-threaded application that performs the client.loop_forever(retry_first_connection=True) at the end of my main thread.  This performs all the event handling for the MQTT layer.  On the underside of that I have another thread that reads messages that come from a USB device.

When I receive an MQTT message my handler issues commands to the USB Device and await their successful completion before exiting the handler (one mqtt message may require multiple command/response pairs on the USB comm).  There are other asynchronous messages that may come up from the USB device from time to time and I publish those on the broker when they arrive.

I use not returning from the callback as a way to throttle my consumption of the next message on the broker to alleviate my need for queuing messages in the application however in version (1.4.0)  if I receive one of the asynchronous messages from the USB device it attempts to publish from another thread which ends up calling   

client.publish
self._send_publish
self._packet_queue
self._call_socket_register_write

which of course waits on the **self._callback_mutex** that is already held by the first thread.

A few questions.  

1) in #168 it was mentioned that the changes would prohibit two callbacks being called at the same time is it undesirable to have two callbacks called at the same time?  In my case I suppose I was relying on it being possible.

2) when 1. was mentioned above the enhancements for external loop control were not yet added to the codebase so maybe we need to be more careful about when we issue the callback for socket register write.

3)  I am attempting to use the project in the wrong manner?  in which case how would I stop the broker from publishing to my client while I wait for the USB device communications to come back with a response to the initial request while still being able to publish to the broker but without maintaining an 
 incoming queue of my own in the application.  I would assume that the MQ in MQTT should be handling that aspect without my need to.

3a)  I suppose it is possible I could create another client that is associated with the USB device that wouldn't clash with the main client, but it was easier to reason with a unique shared client for the application.

any input would be greatly appreciated,  Thank you for all of your hard work I really enjoy this project.

-BB","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NjMxMTYzMg==,paho.mqtt.python,466311632,354,NA,mehdilauters,468923,Mehdi,mehdilauters@gmail.com,NA,2019-02-22T08:13:39Z,2019-02-22T08:13:39Z,"We also have a deadlock using the mqtt client in 2 different threads with the same version (1.4.0)
As a quick (and ugly) workaround we did the following wrapper.
````
class MQTTClientWrapper(mqtt.Client):

    def __init__(self, name):
        mqtt.Client.__init__(self, name)

    def publish(self, topic, payload=None, qos=0, retain=False):
        with self._callback_mutex:
            mqtt.Client.publish(self, topic, payload, qos, retain)
````","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2NjMxMTYzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzU2MTU3NQ==,paho.mqtt.python,543561575,354,NA,dw7086,7887837,,,NA,2019-10-18T07:16:01Z,2019-10-18T07:16:01Z,"To avoid the publish in the callback in multiple threads, it will cause the deadlock issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MzU2MTU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NDQ1NzU2OA==,paho.mqtt.python,544457568,354,NA,corroleaus,11280124,Pontus Pohl,,NA,2019-10-21T10:41:51Z,2019-10-21T10:41:51Z,"For me this error started to happen in v1.4.0 because of the addition of 

```
self._call_socket_register_write()
```
at line 2545 in client.py in method _packet_queue. ```_call_socket_register_write()``` tries to aquire the self._callback_mutex lock, which it never did in 1.3.1 and subsequently if another thread is receiving a packet at the same time, trying to aquire that same mutex to pass data to a callback, stuff can break. 

In my case pahos locks interferes with application level locks because of that the thread calling publish( and thus ends up calling _call_socket_register_write() ) waits for self._callback_mutex, that is held by another thread receiving a mqtt packet. That thread in turn waits for a lock outside of paho, that is held by the first thread that called publish. 

Its entirely possible to redesign usage of paho to accomodate for this behaviour, but in my opinion it is kind of weird to add callback logic solely to integrate with external event loops, that gets called by default. 

Hopefully this can help someone with a similar issue. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NDQ1NzU2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NDg3NDIyMQ==,paho.mqtt.python,544874221,354,NA,corroleaus,11280124,Pontus Pohl,,NA,2019-10-22T09:16:02Z,2019-10-22T09:16:02Z,"A simple fix for above mentioned issue would be to simply not aquire self._callback_mutex_lock in _call_socket_register_write if no callback is defined. 

```
--- a/src/paho/mqtt/client.py
+++ b/src/paho/mqtt/client.py
@@ -2137,8 +2137,8 @@ class Client(object):
         if not self._sock or self._registered_write:
             return
         self._registered_write = True
-        with self._callback_mutex:
-            if self.on_socket_register_write:
+        if self.on_socket_register_write:
+            with self._callback_mutex:
                 try:
                     self.on_socket_register_write(
                         self, self._userdata, self._sock)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NDg3NDIyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTA2ODgxMA==,paho.mqtt.python,581068810,354,NA,mjcumming,1330184,Michael Cumming,,NA,2020-02-01T21:00:55Z,2020-02-01T21:00:55Z,I have experience this problem as well. Created a separate thread with an event loop and scheduled publishing using loop.call_soon_threadsafe.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTA2ODgxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTc4ODY1OQ==,paho.mqtt.python,581788659,354,NA,riccardoch,3284977,Riccardo Chiarini,,NA,2020-02-04T08:06:00Z,2020-02-04T08:06:00Z,"I had the same issue. I have multiple threads that can call `client.publish`. 
I solved using a queue to send the messages; so I don't call `client.publish`, but I've created a utility method to add messages to my queue. In a separated thread I manage the queue to send the messages, in this way I'm sure I do the `client.publish` only from one thread.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MTc4ODY1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjM3MTE3OA==,paho.mqtt.python,642371178,354,NA,AndrewCarterUK,6486835,Andrew Carter,andrewcarter1992@gmail.com,NA,2020-06-11T02:41:46Z,2020-06-11T02:41:46Z,We're having this issue. The library should make it clear that it is not suitable for thread safe use. At the moment it occupies the dangerous space of pretending to be thread safe.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjM3MTE3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzA2MDUwNw==,paho.mqtt.python,663060507,354,NA,dbeinder,342955,David Beinder,,NA,2020-07-23T15:06:05Z,2020-07-23T15:06:05Z,"If you don't use the `on_socket_register_write` callbacks, this is a simple performance-neutral workaround:
```python
#   NetLoop Thread:                                         User code in another thread
#   loop(): receives message
#   loop_read() => _packet_read()
#   _packet_handle() => handle_publish()
#   _handle_on_message(): holds _callback_mutex
#   USER CODE: long-running message handler,                User code tries to publish:
#              gets preempted by another thread             publish(): holds _out_message_mutex
#                                                           _send_publish()
#                                                           _packet_queue()
#                                                           _call_socket_register_write(): blocks on _callback_mutex
#   USER CODE: long-running message handler resumes 
#              and attempts to publish a response
#   publish(): blocks on _out_message_mutex
#              => deadlock

# avoid deadlock by nop-ing socket control callback stubs
import paho.mqtt.client as mqtt
mqtt.Client._call_socket_register_write = lambda _self: None
mqtt.Client._call_socket_unregister_write = lambda _self, _sock=None: None
```
Ultimately, the global `_callback_mutex` should either be removed or made more granular.
According to https://github.com/eclipse/paho.mqtt.python/pull/168 the reason for holding `_callback_mutex` everytime a callback is set or executed, is to avoid this scenario:
> 1. User in main thread sets on_subscribe to be a function
> 2. Client acquires _callback_mutex, and self._on_subscribe is present
> 3. Before the function is actually called, user sets on_subscribe to be None
> 4. Client tries to call None, raises an exception

If the point is simply to avoid the exception, just take a copy of the callback before making the `is None` check.
What the current system actually does, is turn the operation of setting a callback into: 
`Block until existing callback is finished, then set callback to new function`
I'd argue that a potential multi-second block is not what the average developer expects in a simple property setter. Even worse, it waits for any running callback, not just the one being set. 
If there is a need to set a callback in such a way that guarantees, that after returning from the setter, the previous callback has finished executing - I think it would be better to expose a locking mechanism, so a developer can implement this behavior only when needed. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzA2MDUwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uevL,paho.mqtt.python,884599755,354,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:26:31Z,2021-07-22T01:26:31Z,The 1.6.x branch has a lot of improvement in this area if you'd like to give it a try.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uevL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ExqYY,paho.mqtt.python,1153869336,354,NA,jimfunk,1350280,James Oakley,,NA,2022-06-13T12:45:09Z,2022-06-13T12:45:09Z,I had the same issue and it went away after upgrading to 1.6.1.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ExqYY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/354,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbPh,paho.mqtt.python,1880208353,354,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:06:53Z,2024-01-07T23:06:53Z,I'm going to close this due to it's age and the fact that the v1.6 improved things; if anyone is encountering similar issues I'd suggest raising a new issue (trying to get the issue count down to a manageable level!).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbPh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,paho.mqtt.python,403513168,355,Both single and multiple message publication are blocked when using publish module,baqwas,7071255,Matha Goram,baqwas@yahoo.com,CLOSED,2019-01-27T04:37:39Z,2024-01-08T00:23:52Z,"My issue is similar in behavior to the two referenced below. The outcome of the first case is unknown to me. The second case was solved through re-installation.

Using the **client** module, everything works fine. However, when using the **publish** module both functions, _single_ and _multiple_, hang. The subscriber does not receive any message. My code snippet (for the _multiple_ case) is as follows:

```
    msgs = [
        {'topic':""L1/S1/T1"", 'payload':""83.0""}],
        {'topic':""L1/S1/T2"", 'payload':""33.0""}
        ]
    try:
        while True:
            print(""Publishing..."")
            publish.multiple(msgs,
                client_id="""",
                hostname=""host.domain.com""),
                auth={'username':""xxxx"", 'password':""xxxxxxxx""})
            print(""Sleeping..."")
            time.sleep(60)
    except KeyboardInterrupt:
        pass
    finally:
        pass
```
The _hostname_ and _auth_ strings have been mangled for presentation here. For the exercise, publishing repetitive values is acceptable (until I get the code working). All machines are in the same subnet.

The service broker is accessible from the publisher and the subscriber - access tested via SSH. If I revert to the **client** module use, the subscriber immediately receives messages from the client version of the publisher. Is there another set of canned examples that I can run in my subnet to leverage your **publish** module because that fits my need very nicely? Am I misunderstanding the correct use of the **publish** utility module?

Thanks a bunch.

### References:
[(https://github.com/eclipse/paho.mqtt.python/blob/m)]
[(https://github.com/eclipse/paho.mqtt.python/issues/274)]

### Installation:
```
pi@raspbari8:~ $ pip3 show paho-mqtt
Name: paho-mqtt
Version: 1.4.0
Summary: MQTT version 3.1.1 client class
Home-page: http://eclipse.org/paho
Author: Roger Light
Author-email: roger@atchoo.org
License: Eclipse Public License v1.0 / Eclipse Distribution License v1.0
Location: /home/pi/.local/lib/python3.5/site-packages
Requires: 
pi@raspbari8:~ $ 
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDU2NzY3Mg==,paho.mqtt.python,480567672,355,NA,nickma82,243070,NickMa,,NA,2019-04-07T07:51:55Z,2019-04-07T07:51:55Z,"I'm also running into a similar issue with paho-mqtt v1.4.0.
In my case publish.single (not tested with multiple but as single is a wrapper of multiple.. ) is working when the connection and auth credentials are ok, otherwise it loops here infinitely:
https://github.com/eclipse/paho.mqtt.python/blob/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61/src/paho/mqtt/client.py#L2967-L2972","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDU2NzY3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYyNjAzNg==,paho.mqtt.python,480626036,355,NA,baqwas,7071255,Matha Goram,baqwas@yahoo.com,NA,2019-04-07T20:25:26Z,2019-04-07T20:25:26Z,"@nickma82 
I think I will follow your lead now and _split_ the multiple payload into serial singles. Of course, I will have to fall back on the **client** and not the **publish** module. Thanks again for posting the note.

Regards,","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYyNjAzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYyNzg3MA==,paho.mqtt.python,480627870,355,NA,nickma82,243070,NickMa,,NA,2019-04-07T20:43:52Z,2019-04-07T20:43:52Z,"Hi @baqwas, 
thanks for the quick response!

> split the multiple payload into serial singles

Isn't it possible to replace the `loop_forever` call, with a `loop(timeout, ...)` like call?
https://github.com/eclipse/paho.mqtt.python/blob/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61/src/paho/mqtt/publish.py#L160

Workaround:
[This PR #373 ](https://github.com/eclipse/paho.mqtt.python/pull/373) enables a pretty neat workaround.
By calling `publish` ""manually"" followed by an `wait_for_publish(timeout)` everything works just fine.

```
infot = self.mqttc.publish(topic, msg, qos=1)
infot.wait_for_publish(0.5)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDYyNzg3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk5ODIxOQ==,paho.mqtt.python,506998219,355,NA,baqwas,7071255,Matha Goram,baqwas@yahoo.com,NA,2019-06-30T01:02:34Z,2019-06-30T01:02:34Z,Many thanks everyone. Kind regards.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjk5ODIxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzA1OTUyMA==,paho.mqtt.python,507059520,355,NA,ralight,79578,Roger Light,,NA,2019-06-30T19:08:48Z,2019-06-30T19:08:48Z,"I don't think this should be closed, the problem with invalid authentication blocking the call should be fixed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzA1OTUyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjMxMDk1MQ==,paho.mqtt.python,522310951,355,NA,nickma82,243070,NickMa,,NA,2019-08-18T10:50:42Z,2019-08-18T10:50:42Z,@ralight I'd rather see a good fix too @baqwas. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMjMxMDk1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/355,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEj82,paho.mqtt.python,1880244022,355,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:23:51Z,2024-01-08T00:23:51Z,"I'm going to close this because it appears the issue has been addressed (as noted in issue #470) and the last activity was back in 2019. 

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEj82/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/356,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/356,paho.mqtt.python,404086367,356,WebSocket handshake error,monexiao,37441996,,,CLOSED,2019-01-29T01:51:03Z,2024-01-07T08:02:16Z,"  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 839, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1002, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 2969, in __init__
    self._do_handshake(extra_headers)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 3049, in _do_handshake
    raise WebsocketConnectionError(""WebSocket handshake error"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error

-------------------------------------------------------------------------------------------------------------------
I ran into a problem when I tried to connect to a mosquitto v1.4.12 broker with username/password using paho.mqtt.python client (1.4.0) websocket. Error always occur on using official sample code with username_pw_set().
[https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub-ws.py](url)

The websocket connection of broker can be connected successfully by paho.mqtt.javascript, mqtt-spy with the same pair of username and password.
Does anyone have relevant experience that may be offered to me? I will be very grateful to you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/356/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/356,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNzIxMw==,paho.mqtt.python,477517213,356,NA,vrst37,34431050,,,NA,2019-03-28T09:29:33Z,2019-03-28T09:29:33Z,Can you post your code?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNzIxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/356,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlJ3,paho.mqtt.python,1879986807,356,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T08:02:16Z,2024-01-07T08:02:16Z,Closing due to inactivity (example code was requested but not provided).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlJ3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/357,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/357,paho.mqtt.python,405182413,357,Getting below wee during MQTT IPV6 COMMUNICATION,sudeepgithub,46890749,,,CLOSED,2019-01-31T10:39:29Z,2021-07-22T22:21:34Z,"[‎1/‎31/‎2019 9:45 AM] Rajendrabhal, Dhruv11: 
reason 0
msg MqttException
loc MqttException
cause java.net.UnknownHostException: [2002
excep MqttException (0) - java.net.UnknownHostException: [2002
at org.eclipse.paho.client.mqttv3.internal.ExceptionHelper.createMqttException(ExceptionHelper.java:38)
	at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:664)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.net.UnknownHostException: [2002
	at java.net.AbstractPlainSocketImpl.connect(Unknown Source)
	at java.net.PlainSocketImpl.connect(Unknown Source)
	at java.net.SocksSocketImpl.connect(Unknown Source)
	at java.net.Socket.connect(Unknown Source)
	at org.eclipse.paho.client.mqttv3.internal.TCPNetworkModule.start(TCPNetworkModule.java:70)
	at org.eclipse.paho.client.mqttv3.internal.ClientComms$ConnectBG.run(ClientComms.java:650)
	... 1 more
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/357/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/357,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNjQwMQ==,paho.mqtt.python,477516401,357,NA,vrst37,34431050,,,NA,2019-03-28T09:27:21Z,2019-03-28T09:27:21Z,"You are in wrong forum. Please go to java forum to ask this question.
Please close this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNjQwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/357,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNjg5Nw==,paho.mqtt.python,477516897,357,NA,vrst37,34431050,,,NA,2019-03-28T09:28:40Z,2019-03-28T09:28:40Z,"BTW next time you ask a question, please understand that we need more information.

A very food way of asking a question can be found  [here](https://github.com/eclipse/paho.mqtt.python/issues/365#issue-419050069).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNjg5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,paho.mqtt.python,407577187,358,Thread safety,Leedayoung,18284678,,,CLOSED,2019-02-07T07:51:50Z,2024-01-08T11:24:35Z,"Is this client library thread-safe?
In my view, it is quite thread-safe by using threading.Lock() but I am not sure.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTkzNTA5NA==,paho.mqtt.python,461935094,358,NA,swails,779022,Jason Swails,,NA,2019-02-08T20:23:42Z,2019-02-08T20:23:42Z,"Yes, it should be thread-safe.  If it's not, that's a bug.

That said, in multithreaded applications I've written utilizing this library, I usually instantiate a separate connection for each worker thread.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTkzNTA5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzQyMjE2OQ==,paho.mqtt.python,463422169,358,NA,timyig,15726945,Timur Yigit,,NA,2019-02-13T23:42:32Z,2019-02-13T23:42:32Z,"@swails  could you share some snippets regarding the workers?
Cheers","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MzQyMjE2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjM3MDU1MA==,paho.mqtt.python,642370550,358,NA,AndrewCarterUK,6486835,Andrew Carter,andrewcarter1992@gmail.com,NA,2020-06-11T02:39:35Z,2020-06-11T02:39:35Z,This library isn't thread safe at the moment (v1.5.0). We're getting deadlocks calling publish on a client from multiple threads.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjM3MDU1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47CvGa,paho.mqtt.python,990572954,358,NA,farzadpanahi,3793563,Farzad Panahi,farzad.panahi@gmail.com,NA,2021-12-10T03:16:09Z,2021-12-10T03:16:09Z,What is the latest status on this issue for v1.6.1? Is the client library thread safe? Can I create one connection and use it in multiple threads to publish data or it should be one connection per thread?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47CvGa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/358,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGwcx,paho.mqtt.python,1880819505,358,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T11:24:35Z,2024-01-08T11:24:35Z,"My answer is ""we are aiming for a thread-safe library, and things improve with each release, but we probably have a way to go"" (see PR's like #168). I realise that's not really a satisfactory answer but work is proceeding (and if you hit an issue, please do log an issue and provide as much information as you can!). 

On that basis I'm going to close this issue because I don't think it's particularly useful keeping it open (there are a few open issues covering specific thread safety issues).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGwcx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,paho.mqtt.python,408072900,359,Update DB after on_message callback,ciolo,21953595,Alberto Ciolini,,CLOSED,2019-02-08T09:39:39Z,2021-07-22T10:53:24Z,"Hi everyone,
I've a problem. I'd like to update a table in my DB after that I received a message, so after _on_message_ callback. The message will be a json object and I'd like to build query dynamically, so I've to iterate on message. 
I tried but for loop not working inside _on_message_ callback. 
Any ideas?

Thank u very much.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTkzNDQ1Ng==,paho.mqtt.python,461934456,359,NA,swails,779022,Jason Swails,,NA,2019-02-08T20:21:32Z,2019-02-08T20:21:32Z,"Your post doesn't contain any actual code, so it's impossible to tell what went wrong.

Rest assured that for loops *do* work inside any callbacks functions -- there are no arbitrary restrictions like that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MTkzNDQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjExNzEyNQ==,paho.mqtt.python,462117125,359,NA,ciolo,21953595,Alberto Ciolini,,NA,2019-02-10T09:28:55Z,2019-02-10T09:28:55Z,"Yeah, you're right sorry. This is my _on_message_ callback:
<img width=""508"" alt=""screenshot 2019-02-10 at 10 19 03"" src=""https://user-images.githubusercontent.com/21953595/52531990-3b611e00-2d1e-11e9-95fa-b888d40386bb.png"">
But the execution flow not enter inside for loop, I don't know why.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ2MjExNzEyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNTgxMQ==,paho.mqtt.python,477515811,359,NA,vrst37,34431050,,,NA,2019-03-28T09:25:44Z,2019-03-28T09:25:44Z,"You really should not block for that long in the on_message.

Take a look at [this](https://github.com/eclipse/paho.mqtt.python/issues/368#issuecomment-477502146).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNTgxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/359,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vVAz,paho.mqtt.python,884822067,359,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:53:24Z,2021-07-22T10:53:24Z,"The linked bug gives some good ideas to help you out, so I'm going to close this issue. If you still have problems please feel free to reopen it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vVAz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/360,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/360,paho.mqtt.python,408696909,360,Making my App crash when the App is in Background while trying to connect from Application class,Sudhakaraks03,40895385,Sudhakar,,CLOSED,2019-02-11T09:36:35Z,2023-12-23T23:35:47Z,"Caused by java.lang.IllegalStateException: Not allowed to start service Intent { cmp=com.customer.delivX/org.eclipse.paho.android.service.MqttService }: app is in background uid UidRecord{8710802 u0a1102 CEM  idle procs:1 seq(0,0,0)}
       at android.app.ContextImpl.startServiceCommon(ContextImpl.java:1538)
       at android.app.ContextImpl.startService(ContextImpl.java:1484)
       at android.content.ContextWrapper.startService(ContextWrapper.java:663)
       at org.eclipse.paho.android.service.MqttAndroidClient.connect(MqttAndroidClient.java:414)
       at com.customer.delivX.network.MQTTManager.connectMQTTClient(MQTTManager.java:359)
       at com.customer.delivX.network.MQTTManager.createMQttConnection(MQTTManager.java:347)
       at com.customer.delivX.ApplicationManager.connectMqTT(ApplicationManager.java:208)
       at com.customer.delivX.ApplicationManager.onCreate(ApplicationManager.java:123)
       at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1125)
       at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6056)
       at android.app.ActivityThread.-wrap1(Unknown Source)
       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1764)
       at android.os.Handler.dispatchMessage(Handler.java:105)
       at android.os.Looper.loop(Looper.java:164)
       at android.app.ActivityThread.main(ActivityThread.java:6938)
       at java.lang.reflect.Method.invoke(Method.java)
       at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)
       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/360/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/360,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNTAwMw==,paho.mqtt.python,477515003,360,NA,vrst37,34431050,,,NA,2019-03-28T09:23:29Z,2019-03-28T09:23:29Z,"Please close this issue and ask in the appropriate forum. This is python library for mqtt, not java.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNTAwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,paho.mqtt.python,414382917,361,on_publish() called before publish() completes,mistotebe,1913139,Ondřej Kuzník,,CLOSED,2019-02-26T01:13:34Z,2019-05-13T13:23:45Z,"While trying to write an asyncio-friendly wrapper, I have this code:
```python
async def publish(self, *args, **kwargs):
    future = self.loop.create_future()
    result, mid = super().publish(*args, **kwargs)
    if result != mqtt.MQTT_ERR_SUCCESS:
        raise MQTTError(result)
    self.__in_flight[mid] = future
    return await future

def on_publish(self, client, userdata, mid):
    future = self.__in_flight.pop(mid)
    future.set_result(None)
```
The problem is that for `qos=0` messages, `on_publish` is being called somewhere from within `publish`, before it has returned the message id to us, so the above fails.

Is it possible to tell based on the `publish` result whether `publish` has completed all required actions succesfully (even when `qos>0`) or there is still work to be done and we have to wait for `on_publish`?

And how would one tell that a publish failed? - but feel free to redirect me to the protocol spec on this one if I'm missing something.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTY2NjAxMQ==,paho.mqtt.python,481666011,361,NA,jeeger,3542252,Jan Seeger,,NA,2019-04-10T12:16:22Z,2019-04-10T12:16:22Z,"I'm doing the exact same thing, and it is very annoying. `on_publish` is called directly, before the result is even returned. This makes sense from the standpoint of the library implementor, as `on_publish` on a QOS 0 publishing is not caused by an acknowledgement packet arriving, but by the package *leaving* the send queue (client.py:2112).

This also means that the documentation is partially incomplete – on QoS 0 messages, when `publish()` returns, the packet has indeed been sent, and thus, publishing has been successful, UNLESS the socket queue was full, in which case the `on_publish` callback would be called later by another thread. This makes it really hard to handle publishing messages with different QoS levels and correctly check for the sent state under an external event loop.

I see two possibilities here for us using an external event loop: Move the `on_publish` callback call into the `loop_misc` loop (but that loop is called only rarely), or somehow get the callback into the `loop_write` loop.

I don't have enough experience in the paho-mqtt codebase to decide on either solution, but I will have a look and post the solution here if I find one.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTY2NjAxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTczNzQ0MQ==,paho.mqtt.python,481737441,361,NA,mistotebe,1913139,Ondřej Kuzník,,NA,2019-04-10T15:24:17Z,2019-04-10T15:24:17Z,"My main issue is that the message id has not been seen by us yet at the point of the callback (so we don't know how to mark it done), nor does the result of `publish()` indicate all work is complete and no further `on_publish()` callback is pending for it (so we don't need to wait for it either).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTczNzQ0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTczOTU4NA==,paho.mqtt.python,481739584,361,NA,mistotebe,1913139,Ondřej Kuzník,,NA,2019-04-10T15:29:17Z,2019-04-10T15:29:17Z,"So happy if another result code was added that makes the distinction between ""everything has been done"" and ""wait for on_publish with this `mid` if you want to know it's done"" clearer. Or even returning `mid == None` in this case if that makes sense elsewhere?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTczOTU4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTgyNzExNg==,paho.mqtt.python,481827116,361,NA,jeeger,3542252,Jan Seeger,,NA,2019-04-10T19:20:13Z,2019-04-10T19:20:13Z,"With the patch in the linked pull request, on_publish is called by another thread/event loop on all messages, also those with QoS 0.

On April 10, 2019 5:24:19 PM GMT+02:00, ""Ondřej Kuzník"" <notifications@github.com> wrote:
>My main issue is that the message id has not been seen by us yet at the
>point of the callback (so we don't know how to mark it done), nor does
>the result of `publish()` indicate all work is complete and no further
>`on_publish()` callback is pending for it (so we don't need to wait for
>it either).
>
>-- 
>You are receiving this because you commented.
>Reply to this email directly or view it on GitHub:
>https://github.com/eclipse/paho.mqtt.python/issues/361#issuecomment-481737441

-- 
Sent from my mobile device. Please excuse my brevity.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTgyNzExNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDI0MTI0NA==,paho.mqtt.python,490241244,361,NA,mistotebe,1913139,Ondřej Kuzník,,NA,2019-05-07T20:23:17Z,2019-05-07T20:23:17Z,"The above wouldn't fix it for clients that don't use an event loop. The (not exactly documented?) way to deal with this is to use the `MQTTMessageInfo` that's returned directly rather than unpacking it.

If `msginfo.rc` is ok and `msginfo.is_published() == False`, we need to yield until `on_publish()` gets called, otherwise we're done already (and let `on_publish` ignore the fact that `mid` hasn't been registered yet).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MDI0MTI0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/361,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTgyMDM4NA==,paho.mqtt.python,491820384,361,NA,jeeger,3542252,Jan Seeger,,NA,2019-05-13T13:23:45Z,2019-05-13T13:23:45Z,"Hello!

Thanks for your feedback on this!

> The above wouldn't fix it for clients that don't use an event loop.

True.

> The (not exactly documented?) way to deal with this is to use the
> MQTTMessageInfo that's returned directly rather than unpacking it.
> If msginfo.rc is ok and msginfo.is_published() == False, we need to
> yield until on_publish() gets called, otherwise we're done already
> (and let on_publish ignore the fact that mid hasn't been registered
> yet).

I'll try it out. It will be nice not having to rely on my own branch of 
mqtt-python.

Best regards,
Jan
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTgyMDM4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/362,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/362,paho.mqtt.python,416774857,362,"As a client, how to get the id of the publisher.",haitanghuadeng,43346455,HaiTangHuaDeng,,CLOSED,2019-03-04T12:18:22Z,2019-04-15T06:22:37Z,"This problem has been bothering me, and I looked at the paho source code, and I still don't know what to get from on_subscribe.I don't want every publisher subject party to put its own id in the data at the time of publication.Also look for advice.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/362/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/362,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNDY1NA==,paho.mqtt.python,477514654,362,NA,vrst37,34431050,,,NA,2019-03-28T09:22:26Z,2019-03-28T09:22:26Z,"So you want clientID of every publisher?? There is no provision for this in the MQTT specification. I think you will have to build this in the payload of the message, or use another communication protocol.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNDY1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/362,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzEyMjU3MA==,paho.mqtt.python,483122570,362,NA,haitanghuadeng,43346455,HaiTangHuaDeng,,NA,2019-04-15T06:22:37Z,2019-04-15T06:22:37Z,Thank you very much for your help!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MzEyMjU3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,paho.mqtt.python,416791912,363,Identify broken connection,jvrahav,27826808,Rahav J V,rahavjvr@gmail.com,CLOSED,2019-03-04T13:04:27Z,2023-12-23T22:05:09Z,"I have a client connected to a broker. im using loop_start on the client side after connection is established. My client publishes data to the broker at scheduled intervals in a thread.

After some time if the connection to broker is lost either the broker has gone down or the network is bad, in such cases im not getting a disconnect callback.

Is there a way to figure out in the client if there is an active connection to the broker. For some reason in such cases where the broker is unreachable, i see the client stuck and not processing any message.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTMxNjIxOQ==,paho.mqtt.python,471316219,363,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2019-03-10T15:29:44Z,2019-03-10T15:29:44Z,"Can you please share your relevant code and logs?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTMxNjIxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNDExMQ==,paho.mqtt.python,477514111,363,NA,vrst37,34431050,,,NA,2019-03-28T09:21:00Z,2019-03-28T09:21:00Z,Are you using the threaded version of loop_start?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxNDExMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTI2NTAyMw==,paho.mqtt.python,495265023,363,NA,Queuecumber,5865387,Max Ehrlich,,NA,2019-05-23T15:22:16Z,2019-05-23T15:22:16Z,"I have the same problem with `loop_forever`. I need to be robust to broker failures for my application, and when testing by connecting to the broker, killing the broker, then restarting, my client just sits there not doing anything even after the broker is restarted. 

Actually the weird thing is that it seems like my `on_connect` function is getting called, so there must be a reconnection happening, but my `on_message` no longer seems to get called.

Here is relevant code:


```
def main():
    broker_address = os.environ['BROKER']
    light_controller = light.Light()

    client = mqtt.Client(client_id='...', userdata=...)

    client.will_set(availability_topic, 'offline', retain=True, qos=1)
    client.on_connect = on_connect
    client.on_message = command

    client.connect(broker_address)

    client.subscribe(command_topic)

    state(client, light_controller)

    client.loop_forever()



if __name__ == '__main__':
    main()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NTI2NTAyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MzkyMjA0MQ==,paho.mqtt.python,653922041,363,NA,Queuecumber,5865387,Max Ehrlich,,NA,2020-07-05T18:24:39Z,2020-07-05T18:24:39Z,"I'm revisiting this again to see if there's any workaround I can come up with, I don't know what relevant log files I can provide, but when I kill the server, it does see a reconnect as soon as it comes back up. The messages from my client aren't coming through. Here's the relevant server log after restarting:

```
1593972949: mosquitto version 1.6.10 starting
1593972949: Config loaded from /mosquitto/config/mosquitto.conf.
1593972949: Opening ipv4 listen socket on port 1883.
1593972949: Opening ipv6 listen socket on port 1883.
1593972951: New connection from 10.244.1.1 on port 1883.
1593972951: New client connected from 10.244.1.1 as home/test (p2, c1, k60).
```

I have set up the client to do a heartbeat, e.g. every time it receives a message it sends one on the same topic:

```
def command(client: mqtt.Client, light_controller: light.Light, message: mqtt.MQTTMessage):
    if message.topic == 'heartbeat':
        print(f'beat: {time.localtime()}')
        client.publish('heartbeat', '{}')
        return

def main():
    broker_address = os.environ['BROKER']
    light_controller = light.Light()

    client = mqtt.Client(client_id='home/test', userdata=light_controller)

    client.will_set(availability_topic, 'offline', retain=True, qos=1)
    client.on_connect = on_connect
    client.on_message = command

    client.connect(broker_address)

    client.subscribe('heartbeat')

    client.publish('heartbeat', '{}')

    client.loop_forever()
```

With this I can see the client printing up until the broker is killed, at which point it stop receiving those messages:

```
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
beat: time.struct_time(tm_year=2020, tm_mon=7, tm_mday=5, tm_hour=14, tm_min=23, tm_sec=16, tm_wday=6, tm_yday=187, tm_isdst=1)
```

If there was some way to identify the broker failing, that would be good enough to put my service into a restart loop until the broker came back up
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1MzkyMjA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/363,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXS70,paho.mqtt.python,1868377844,363,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:05:09Z,2023-12-23T22:05:09Z,"I'm going to close this due to its age and the fact that the OP did not provide the requested details.

@Queuecumber change your code to call `Subscribe` in `on_connect` (as shown in [this example](https://github.com/eclipse/paho.mqtt.python#getting-started)). Otherwise the subscription may be dropped if the client reconnects.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXS70/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,paho.mqtt.python,416836081,364,asyncio loop_forever,au190,2842733,,,CLOSED,2019-03-04T14:47:26Z,2023-12-23T22:55:58Z,"Hi All

Iam using asyncio of this lib, as in the exemple
But when the server stops and start the client is not conecting back.
The loop_forever is blocking, not good for me.

Can you advice help ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMTg0Mw==,paho.mqtt.python,480421843,364,NA,swails,779022,Jason Swails,,NA,2019-04-05T21:05:04Z,2019-04-05T21:05:04Z,"`loop_forever` is blocking.  It's designed for single-thread execution, mainly.

If you want a multithreaded client, look at `loop_start()` and `loop_stop()` -- those are non-blocking.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMTg0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMjU0Mw==,paho.mqtt.python,480422543,364,NA,swails,779022,Jason Swails,,NA,2019-04-05T21:07:47Z,2019-04-05T21:07:47Z,"Oh, I misunderstood your question.

There are a couple approaches you can take.  One thing you can do (which I've done), is add a reconnection attempt to the `on_disconnect()` callback.  I'm not particularly fond of that approach, but it was fast and I wasn't trying to do anything complex enough with my client that I would wind up paying for it later.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMjU0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4MTY1NA==,paho.mqtt.python,674381654,364,NA,drmikecrowe,90312,,,NA,2020-08-15T10:45:58Z,2020-08-15T10:45:58Z,@swails Did you find your `on_disconnect` logic worked better than the `loop_forever` reconnect?  I'm getting generic errors (`rc==1`) disconnects and debating if my backoff/reconnect logic should be dumped and replaced with the `loop_forever` running in a separate thread,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4MTY1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iiAPe,paho.mqtt.python,1653081054,364,NA,saimigo,100557314,sai,,NA,2023-07-27T07:48:57Z,2023-07-27T07:48:57Z,I have same question，is there some solutions？ please.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iiAPe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/364,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUiz,paho.mqtt.python,1868384435,364,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:55:58Z,2023-12-23T22:55:58Z,"I'm going to close this due to it's age and lack of detail (it appears some comments may have been removed). The `loop_asyncio.py` demo does not implement any reconnection logic currently (but it's fairly specialised so I'd suggest using `loop_start()` unless you need the async functionality). 

If this is still an issue (and for @saimigo) then please re-open, but include full details of your requirements, logs, sample code etc (as you will note by the lack of response to this ticket, this project has limited resources, meaning we may have to close issues that don't provide sufficient details).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXUiz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,paho.mqtt.python,419050069,365,Exceptions and undefined variables are not raised within callback handlers,jpmens,60706,Jan-Piet Mens,,CLOSED,2019-03-09T08:52:52Z,2023-11-08T15:01:58Z,"Exceptions (e.g. missing variables) are not raised from within callback handlers nor is there any indication that the program is failing.

## Install latest version of paho.mqtt 

```bash
python3 -mvenv v3
source v3/bin/activate
pip install pip --upgrade       # => pip-19.0.3
pip install paho-mqtt		# => paho-mqtt-1.4.0
```

## Run the following short program

```python
#!/usr/bin/env python -B

import paho.mqtt.client as paho

def on_connect(mosq, userdata, flags, rc):
    raise(MoreTrouble)
    mqttc.subscribe(""test"", 0)

def on_message(mosq, userdata, msg):

    bb = this_is_not_defined
    raise(Hell)

mqttc = paho.Client(None, clean_session=True)
mqttc.on_message = on_message
mqttc.on_connect = on_connect

mqttc.connect(""localhost"", 1883, 60)

while True:
    try:
        mqttc.loop_forever()
    except KeyboardInterrupt:
        mqttc.disconnect()
        exit(0)
    except:
        raise
```

## What happens

The program connects to the MQTT broker, but neither subscribes nor does it show any sign of doing anything on the console.

## Expectations

I'd expect the `raise` within `on_connect()` to cause an undefined error, and I would expect the raise and the `this_is_not_defined` variable to also cause such errors.

```
NameError: name 'MoreTrouble' is not defined
```

## Platforms

I have tested this on

- Mac OS/X 10.12.6 (Python 3.7.2)
- Linux Debian 9 (Python 2.7.13 and Python 3.5.3)


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTI4MTE4Nw==,paho.mqtt.python,471281187,365,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2019-03-10T11:54:01Z,2019-03-10T11:54:01Z,"Instead of raising the error, v1.4 logs the error (using _easy_log function).
Here is the snapshot from client.py
```
with self._in_callback_mutex:
    try:
        self.on_connect(self, self._userdata, flags_dict, result)
    except Exception as err:
        self._easy_log(MQTT_LOG_ERR, 'Caught exception in on_connect: %s', err)
```

```
def _easy_log(self, level, fmt, *args):
        if self.on_log is not None:
            buf = fmt % args
            try:
                self.on_log(self, self._userdata, level, buf)
            except Exception:
                # Can't _easy_log this, as we'll recurse until we break
                pass # self._logger will pick this up, so we're fine
        if self._logger is not None:
            level_std = LOGGING_LEVEL[level]
            self._logger.log(level_std, fmt, *args)
```

You can modify your above code to log error messages using on_log callback. For example,

```
import paho.mqtt.client as paho

def on_connect(mosq, userdata, flags, rc):
    raise(MoreTrouble)
    mqttc.subscribe(""test"", 0)

def on_message(mosq, userdata, msg):

    bb = this_is_not_defined
    raise(Hell)

def on_log(mqttc, obj, level, string):
    print(string)

mqttc = paho.Client(None, clean_session=True)
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_log = on_log

mqttc.connect(""localhost"", 1883, 60)

while True:
    try:
        mqttc.loop_forever()
    except KeyboardInterrupt:
        mqttc.disconnect()
        exit(0)
    except:
        raise
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTI4MTE4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTI4NDgwMg==,paho.mqtt.python,471284802,365,NA,jpmens,60706,Jan-Piet Mens,,NA,2019-03-10T12:46:01Z,2019-03-10T12:46:01Z,"Thank you, @tarunw07, that works, and I wasn't aware of that. Is this ""designed to be so""?

I find it would be a great improvement if [the documentation](https://pypi.org/project/paho-mqtt/) were to state that explicitly.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTI4NDgwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTMxNjQ3Ng==,paho.mqtt.python,471316476,365,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2019-03-10T15:32:32Z,2019-03-10T15:32:32Z,I think it is designed to be so. I agree that it should be mentioned in the documentation. I will try to update the documentation if I get any free time.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MTMxNjQ3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4OTM1OTA3NQ==,paho.mqtt.python,489359075,365,NA,kanflo,931076,Johan Kanflo,watski@bitfuse.net,NA,2019-05-04T19:40:11Z,2019-05-04T19:40:11Z,Personally I find this behaviour of silently eating exceptions annoying and not a very good practice. A change would be much appreciated ;),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4OTM1OTA3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Mzk0ODA1MQ==,paho.mqtt.python,493948051,365,NA,BazaJayGee66,19566498,,,NA,2019-05-20T11:31:08Z,2019-05-20T11:31:08Z,"When running the above example, the script simply hangs after logging the exception until I pass a KeyboardInterrupt.

How would I gracefully fail the script when raising an exception within callback handlers?

I was attempting to catch bad users/passwords, and raise an exception within on_connect, so that I could handle these failed attempts, however the best I can do is to stop the loop, with the script still hung.
```
def on_connect(client, userdata, flags, rc):
  if rc == 5:
    client.loop_stop()
    raise MQTTAuthenticationException
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5Mzk0ODA1MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDExMTY5OA==,paho.mqtt.python,534111698,365,NA,tapionx,1826929,Riccardo Serafini,,NA,2019-09-23T13:59:06Z,2019-09-23T13:59:06Z,"> Errors should never pass silently.
> Unless explicitly silenced.
> 

https://www.python.org/dev/peps/pep-0020/

This issue is really annoying, exceptions should be raised properly and not be silenced.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDExMTY5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjk5OTMyOA==,paho.mqtt.python,536999328,365,NA,DanielO,643662,Daniel O'Connor,darius@dons.net.au,NA,2019-10-01T11:47:54Z,2019-10-01T11:47:54Z,"Silently eating exceptions makes debugging and development much harder.
Having it as an option (that defaults to eating) would be reasonable IMHO.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjk5OTMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4OTEwMDIwMg==,paho.mqtt.python,589100202,365,NA,ukrutt,1161208,,,NA,2020-02-20T15:11:53Z,2020-02-20T15:11:53Z,"Seconding.  I'm currently getting an log message, `paho.mqtt.client: ERROR: Caught exception in on_message: '<string that I created>'`.  I did in fact construct this string but I don't know how it raises an  exception.  A proper crash and traceback would give me this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4OTEwMDIwMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMTUwNDExNg==,paho.mqtt.python,631504116,365,NA,brd,1096842,Brad Davis,,NA,2020-05-20T14:20:29Z,2020-05-20T14:20:29Z,"Argh, I have wasted hours and I am sure many others have too.  Please consider changing this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMTUwNDExNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2OTkyODM3Mg==,paho.mqtt.python,669928372,365,NA,trebolcinco,1411323,Mike Taylor,,NA,2020-08-06T13:31:31Z,2020-08-06T13:31:31Z,"Wasted hours this week, really miserable.  Agree that they should NOT be swallowed, make an option to swallow but default off.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2OTkyODM3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDQyNDM2OA==,paho.mqtt.python,670424368,365,NA,schneeemensch,44439378,,,NA,2020-08-07T09:25:50Z,2020-08-07T09:25:50Z,We had issues with this in the past as well. We needed to implement new communication channels to get around this.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDQyNDM2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA3NjE0Mg==,paho.mqtt.python,695076142,365,NA,mxmaxime,10252674,Maxime moreau,contact@maxime-moreau.fr,NA,2020-09-18T20:41:24Z,2020-09-18T20:41:24Z,"Hello, that seems to be fixed right now (thanks a ton!), but how do we handle exceptions? For example, If I have an Exception raised in a callback (function added via `message_callback_add` for ex), I would like to catch it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NTA3NjE0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk5Mzc3OQ==,paho.mqtt.python,812993779,365,NA,hardillb,1800845,Ben Hardill,hardillb@gmail.com,NA,2021-04-04T08:15:41Z,2021-04-04T08:15:41Z,"This was a major change of default behaviour and as such probably should not have happened on point release, it probably should have been saved for 1.6 not a change from 1.5.0 to 1.5.1. While I understand why the change has been made, this is as likely to break existing code as it is to solve peoples frustrations with not knowing what happened.

@mxmaxime It looks like you would have to put a try/expect block as the top level construct in your callback e.g.

```
def some_callback:
  try:
    ...
  expect err:
    ...
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxMjk5Mzc3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/365,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5raVs7,paho.mqtt.python,1802066747,365,NA,fleutot,178409,Gauthier Fleutot Östervall,,NA,2023-11-08T15:01:58Z,2023-11-08T15:01:58Z,"@hardillb I still have an issue with this: the thread dies with an exception, but I cannot catch it in the caller thread. That's a problem because my application has multiple threads, and I want _the whole thing_ to die in case of error in my callback.

I've solved that in other threaded modules by saving the exception in a `self.exc` and returning, then throwing that exception upon the thread dying, _in the caller thread_:

```python

class MyClassError(Exception):
    def __init__(self, message):
        self.message = f""{message}""
        super().__init__(self.message)


class MyClass()::
    # other stuff...
    def rx(self):
        try:
            while True:
                do_your_thing()
        except Exception as e:
            self.exc = MyClassError(f""An unexpected error occurred: {e}"")
            return

    def run(self):
        self.rx_thread.start()
        self.rx_thread.join()
        if self.exc is not None:
            raise self.exc
```
Since `run` runs in the caller thread, the exception is risen there.

But in the paho case, I don't know where to raise it in order to be caught in the main thread?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5raVs7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366,paho.mqtt.python,420930834,366,ESP32 + PubSubClient + Mosquitto Issue.,imankareem,41558467,Iman Kareem,,CLOSED,2019-03-14T10:11:23Z,2019-09-23T01:43:52Z,"Hello Everyone,
I am using an ESP32 with PubSubClient and Paho and Mosquitto (1.5.8) running on a Raspi 3 on Ubuntu. ESP32 and Raspi are on the same local network . PubSubClient's MQTT_MAX_PACKET_SIZE has been set to 256 bytes. Code used to work fine before but not anymore.

Error is ""Attempting MQTT connection...failed, rc=-4 try again in 5 seconds""

The code running on my ESP32 is below. Setup is 2 Pro mins connected to IMUs over UART/Serial and a Temp sensor.
` 


#include <Wire.h>
#include <DallasTemperature.h>
#include <OneWire.h>
#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = ""Me"";
const char* password = """";

const char* mqtt_server = ""192.168.1.124""; //ip address of the mqtt server

const char* mqtt_topic = ""/hms/data"";

#define ONE_WIRE_BUS 18 // D18 ESP32, use 4.7K pull up

WiFiClient espClient;

PubSubClient client(espClient);

void MQTT_connect();

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature temperatureSensor(&oneWire);
float temperature = 0.0F;

unsigned long prevTime = 0;

HardwareSerial proMiniIMU1(2); // RX1:23, TX1:22 on ESP32. 
                              // Edit the file 'HardwareSerial.cpp 'like in video.
    
HardwareSerial proMiniIMU2(2); // RX2:16, TX2:17 on ESP32. This is by default.

String imu1Data;
String imu2Data;

int BPM = -1;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  proMiniIMU1.begin(9600);
  proMiniIMU2.begin(9600);

  connectWifi();
  client.setServer(mqtt_server, 1883);

  // temperatureSensor.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  //temperatureSensor.requestTemperatures();
  //temperature = temperatureSensor.getTempCByIndex(0);

  if (millis() - prevTime > 1000) {
    //  publishData();

    displayData();

    prevTime = millis();

  }
}

void publishData() {

  char msg[200];

  sprintf(msg, ""%.2f,%d,%s,%s"",temperature, BPM,imu1Data,imu2Data);

  client.publish(mqtt_topic, msg);
  //Serial.println(msg);
}

void displayData() {
  Serial.println();
  Serial.println();
  Serial.print(""Temperature = "");
  Serial.println(temperature);
  Serial.println();
  Serial.println(""-----------------------[ IMU-1 ]-----------------------]"");
  Serial.print(imu1Data);
  Serial.println();
  Serial.println(""-----------------------[ IMU-2 ]-----------------------]"");
  Serial.print(imu2Data);
  Serial.println();
}

void readIMU1() {

  proMiniIMU1.println(""imu"");

  if(proMiniIMU1.available())
  {
    imu1Data = proMiniIMU1.readStringUntil('\n');
    imu1Data.trim();
  }
}

void readIMU2() {

  proMiniIMU2.println(""imu"");

  if(proMiniIMU2.available())
  {
    imu2Data = proMiniIMU2.readStringUntil('\n');
    imu2Data.trim();
  }
}

void connectWifi() {

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print(""[*] Connecting to "");
  Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
    yield();
  }
  Serial.println();

  Serial.println(""[+] WiFi connected"");
  Serial.print(""    >> IP address : "");
  Serial.println(WiFi.localIP());
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print(""Attempting MQTT connection..."");
    // Attempt to connect
    if (client.connect(""ESP32_HMS"")) {
      Serial.println(""connected"");
      // Subscribe
      //client.subscribe(""Master/commands"");
    } else {
      Serial.print(""failed, rc="");
      Serial.print(client.state());
      Serial.println("" try again in 5 seconds"");
      // Wait 5 seconds before retrying
      delay(5000);
    }
    yield();
  }
}
`

**Using this python script on the Raspi to receive mqtt packets and save to CSV file**
`import paho.mqtt.client as mqtt
import json
import time
import csv
import os
from datetime import datetime

host_name = ""localhost""
topic = ""/hms/data""

def store_data(msg):
    file_path = ""./hms-data.csv""

    csv_title = [""Timestamp"",""Temperature"",""BPM"",""IMU1-Accel-X"",""IMU1-Accel-Y"",""IMU1-Accel-Z"",
                  ""IMU1-Gyro-X"",""IMU1-Gyro-Y"",""IMU1-Gyro-Z"",""IMU1-Mag-X"",""IMU1-Mag-Y"",""IMU1-Mag-Z"",
                  ""IMU2-Accel-X"",""IMU2-Accel-Y"",""IMU2-Accel-Z"",""IMU2-Gyro-X"",""IMU2-Gyro-Y"",""IMU2-Gyro-Z"",
                  ""IMU2-Mag-X"",""IMU2-Mag-Y"",""IMU2-Mag-Z""]

    msg = [float(x.strip()) for x in msg.split("","")]
    msg.insert(0, str(datetime.now()))

    if os.path.isfile(file_path):
        with open(file_path, ""a"") as fp:
            csv_writer = csv.writer(fp, delimiter=',')
            csv_writer.writerow(msg)
    else:
        with open(file_path, ""w+"") as fp:
            csv_writer = csv.writer(fp, delimiter=',')
            csv_writer.writerow(csv_title)
            csv_writer.writerow(msg)


def on_message(client, userdata, message):
    print(""message received "", str(message.payload.decode(""utf-8"")))
    print(""message topic = "", message.topic)
    print(""message qos = "", message.qos)
    print(""message retain flag = "", message.retain)
    msg = str(message.payload.decode(""utf-8"")).strip()
    if(message.topic == ""/hms/data""):
        store_data(msg)

mqtt_client = mqtt.Client(""omega31"")
mqtt_client.on_message = on_message

broker = mqtt_client.connect(host_name)

print(""Subscribing to topic : {}"".format(topic))
while(True):
    mqtt_client.loop_start()

    mqtt_client.subscribe(topic)

    mqtt_client.loop_stop()


**`
Please help as my thesis is due soon. Thank you!**","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Mjc4NjU2Mg==,paho.mqtt.python,472786562,366,NA,imankareem,41558467,Iman Kareem,,NA,2019-03-14T10:12:37Z,2019-03-14T10:12:37Z,Really don't know what happened to the Github's insert code function there ^ -.-,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Mjc4NjU2Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUwNjc3Ng==,paho.mqtt.python,477506776,366,NA,vrst37,34431050,,,NA,2019-03-28T08:58:48Z,2019-03-28T08:58:48Z,Can you try using the mosquitto_sub command to check if you are able to connect to the broker?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUwNjc3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/366,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMzkzOTAyNQ==,paho.mqtt.python,533939025,366,NA,imankareem,41558467,Iman Kareem,,NA,2019-09-23T01:43:52Z,2019-09-23T01:43:52Z,"Pretty sure I closed this issue ages ago. I belive I solved it with a fresh install of Raspbian/Ubuntu.
Thank you @vrst37 !","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMzkzOTAyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,paho.mqtt.python,421117999,367,Certificate Verify Failed ,drHogan,10745764,,,CLOSED,2019-03-14T16:21:30Z,2021-02-16T20:29:47Z,"Hello guys,

I am a having a very strange issue. The premise is that I am fairly ignorant in both mqtt and python (the latter I don't use it now since at least 5-6 years), but I am making a Unity app for a museum using a 3D tracking system (www.pozyx.io) and I need each of my machines to run a small mqtt-to-OSC client, so that Unity will read the position data from the client.

On my development machine, it all worked like a charm, using a slightly modified version of the script provided by the sensor producer.

`
    
    API_KEY = ""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX""

    import paho.mqtt.client as mqtt
    import ssl
    import json

    from pythonosc.udp_client import SimpleUDPClient


    host = ""mqtt.cloud.pozyxlabs.com""
    port = 443
    topic = ""5c500595601a3f5871a17685""
    username = ""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX""
    password = ""XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX""

    ip = ""127.0.0.1""                   # IP for the OSC UDP
    network_port = 8888                # network port for the OSC UDP
    osc_udp_client = SimpleUDPClient(ip, network_port)


    def on_connect(client, userdata, flags, rc):
        print(mqtt.connack_string(rc))


    def on_message(client, userdata, msg):

    tag_data = json.loads(msg.payload.decode())

    for tag in tag_data:
        try:
            network_id = tag[""tagId""]
            #print(network_id)
            timestamp = tag[""timestamp""]
            position = tag[""data""][""coordinates""]
            yaw = tag[""data""][""orientation""][""yaw""]

            osc_udp_client.send_message(""/position"", [network_id, timestamp, position[""x""], position[""y""], position[""z""], yaw])
        except:
            print(""Received a bad packet?"")
            pass


    def on_subscribe(client, userdata, mid, granted_qos):
        print(""Subscribed to topic!"")


    client = mqtt.Client(transport=""websockets"")

    client.username_pw_set(username, password=password)

    client.tls_set_context(context=ssl.create_default_context())

    client.on_connect = on_connect

    client.on_message = on_message
    client.on_subscribe = on_subscribe

    client.connect(host, port=port)
    client.subscribe(topic)

    client.loop_forever()
`

Now that I am in the musem to deploy, of course on the freshly setup windows 10 machines ( I tried both on a NUC and and on a Lenovo Thinkpad), nothing works, and I get each time the following error

C:\Users\Vattenkikare1\Desktop\osc_hans>py osc_hans.py
Traceback (most recent call last):
  File ""osc_hans.py"", line 67, in <module>
    client.connect(host, port=port)
  File ""C:\Users\Vattenkikare1\AppData\Local\Programs\Python\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 839, in connect
    return self.reconnect()
  File ""C:\Users\Vattenkikare1\AppData\Local\Programs\Python\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 994, in reconnect
    sock.do_handshake()
  File ""C:\Users\Vattenkikare1\AppData\Local\Programs\Python\Python37-32\lib\ssl.py"", line 1117, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1056)

My laptop is plugged onto the same WiFi and I do have admin rights on all the machines. Would you have any idea on what might be causing the problem? And why might that happen only on the other computers and not on mine?
I did first deply and exe to those machines, but then on one of them i did a quick python setup with all the modules, but nothing changed.

I am not even 100% sure it's an issue caused by paho.mqtt at this point, but i've seen a couple of other similar issues with similar error messages (unfortunately with solution that didn't seem to fit for me) so I thought it worth  a try

Thanks in advance for your time guys
Emiliano
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzIyMDE4NQ==,paho.mqtt.python,473220185,367,NA,drHogan,10745764,,,NA,2019-03-15T09:39:59Z,2019-03-15T09:39:59Z,"The problem was not related to paho.mqtt, but to the lack of a certain certificate, COMODO RSA Domain Validation Secure Server CA, that while not mentioned anywhere was necessary to connect to the cloud. Sorry guys!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzIyMDE4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA1MjIzNQ==,paho.mqtt.python,780052235,367,NA,zikrulhakiem,35251371,zikhak,,NA,2021-02-16T19:02:43Z,2021-02-16T19:02:43Z,"Hi @drHogan. Hope you are doing well during this pandemic times.

I am currently working on POZYX with Unity3D, but seems there isn't many examples showing on the steps to incorporate POZYX with Unity3D through MQTT except from steps showed by @laurentva. As I am just starting to learn these topics, It would be much appreciated if you could show me/us the steps in connecting POZYX Unity3D through MQTT. Thanks in advance and hope to hear from you soon.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA1MjIzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA2NDQwMA==,paho.mqtt.python,780064400,367,NA,drHogan,10745764,,,NA,2021-02-16T19:25:41Z,2021-02-16T19:25:41Z,"Hi there!

Today and tomorrow I don't have much time, but I did set a note for
thursday, I can search for my old code and try and send you some examples
(it's quite some time that I don't work with Pozyx any longer)

Cheers,


On Tue, Feb 16, 2021 at 8:03 PM zikhak <notifications@github.com> wrote:

> Hi @drHogan <https://github.com/drHogan>. Hope you are doing well during
> this pandemic times.
>
> I am currently working on POZYX with Unity3D, but seems there isn't many
> examples showing on the steps to incorporate POZYX with Unity3D through
> MQTT except from steps showed by @laurentva <https://github.com/laurentva>.
> As I am just starting to learn these topics, It would be much appreciated
> if you could show me/us the steps in connecting POZYX Unity3D through MQTT.
> Thanks in advance and hope to hear from you soon.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/paho.mqtt.python/issues/367#issuecomment-780052235>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ACR7PJHOZRRZQ37EHWDYCL3S7K6OJANCNFSM4G6SVGYQ>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA2NDQwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/367,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA5ODk4MA==,paho.mqtt.python,780098980,367,NA,zikrulhakiem,35251371,zikhak,,NA,2021-02-16T20:29:47Z,2021-02-16T20:29:47Z,"@drHogan Thank You. I really appreciate it. I'm leaving my email here; zikrul.hakiem@gmail.com if you like to reach me through email regarding the example codes.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4MDA5ODk4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,paho.mqtt.python,421502573,368,Real-time Callback Processing,dorintt,40022306,,,CLOSED,2019-03-15T12:47:57Z,2021-07-22T10:46:37Z,"Let's say I have one client publishing 10 times a second on a given topic, and another client that must process the data on that topic, but the processing takes 150 ms (more than 1/10 seconds).

Obviously, the processing client cannot keep up with the messages, so the callbacks will queue up. However, I want my client to always process the latest message, and ignore the ones that arrive while a message is still being processed (the callback didn't return yet).

What is the correct way / recommended methods to handle this problem and not have an infinitely growing callback stack?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzMyMTIxNg==,paho.mqtt.python,473321216,368,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2019-03-15T15:03:55Z,2019-03-15T15:03:55Z,"You can create a global variable called PROCESSING = False.
And inside on message callback, 
```
if PROCESSING == False: 
    set PROCESSING = True
    start processing data in a seperate thread and ensure that after processing data you set PROCESSING to False again
else:
    pass
```

I think it would be much better if you use locks instead of PROCESSING variable","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3MzMyMTIxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUwMjE0Ng==,paho.mqtt.python,477502146,368,NA,vrst37,34431050,,,NA,2019-03-28T08:44:13Z,2019-03-28T08:44:13Z,"Here is my recommendation:
When using callbacks, do not do any processing. Just populate a queue in the on_message callback. Then in a separate thread, you can do whatever you want. It is really not a good idea to block the callback. It will start acting strangely at some point in production and cause issues.

the on_message callback:

        def on_message(self, client, userdata, msg):
            logger.info(""Received message"", mqtt_msg=msg)
            # only populate the mq queue object when you are not processing.
            # processing is a threading event
            # https://docs.python.org/2/library/threading.html#event-objects 
            if processing.is_set() is False:
                mq.put(msg)

Then in another thread:

        msg = mq.get(block=True)
        processing.set()
        # process the msg
        processing.clear()

Lastly, this is my personal opinion:
I always thought of the github issues to either propose a new feature, ask a library specific question or report a bug. 

Your question is more suited to stackoverflow since it is asking a general programming question.

This is just an opinion and I am happy to change it.

@PierreF  what do you think of my stackoverflow comment?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUwMjE0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDg0NDAyNQ==,paho.mqtt.python,480844025,368,NA,dorintt,40022306,,,NA,2019-04-08T14:00:49Z,2019-04-08T14:00:49Z,"Thank you for the responses. I successfully used threading locks with threads started from the callback.

It's true that this is a more general question suited for stackoverflow, but I wanted to make sure the library doesn't already have some hidden built-in functionality to handle this automatically (for cleaner application code and / or to help newbies that are not so familiar with threading subtleties).

Here is another solution using events for when there is only one callback processing function:
```
message_data = None
callbackEvent = threading.Event()


def callback(client, userdata, message):
    global message_data
    message_data = message.payload
    callbackEvent.set()


def main():
    while True:
        callbackEvent.wait()
        callbackEvent.clear()
        process_data(message_data)
```
This would have the advantage of no thread starting overhead.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDg0NDAyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/368,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vULR,paho.mqtt.python,884818641,368,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:46:36Z,2021-07-22T10:46:36Z,"I think that this issue has been answered, so I'm going to close it. If there's still more to add, please reopen and ask/answer away!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vULR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369,paho.mqtt.python,425939812,369,"connect() always returns 0, even if connection fails.",acetylen,42578370,Emil Tylén,,OPEN,2019-03-27T12:46:45Z,2024-01-07T08:17:12Z,"## Summary
The `paho.mqtt.client.Client.connect()` function call always returns zero, even on failed connections.

If the intention is to use the `on_connect` and `on_disconnect`callbacks, then surely the `connect` method should not return anything? This behavior is needlessly confusing.

## Software
* **paho-mqtt version:** 1.4.0
* **python version:** 3.7.1
* **mosquitto version:** 1.4.15

## Test setup
* Locally running instance of mosquitto
* Test script `mqtt_tester.py`

Mosquitto configuration:
```
$ cat mosquitto.conf
password_file mosquitto.passwd
allow_anonymous false

$ mosquitto_passwd -b mosquitto.passwd testuser test
```

Contents of `mqtt_tester.py`:
```python3
import paho.mqtt.client as mqtt

client = mqtt.Client(""mqtt_tester"")
client.username_pw_set(""testuser"", ""test"")

rc = client.connect(""127.0.0.1"", 1883)
print(""connect() return code:"", rc)

client.publish(""TEST"", ""test"")

try:
    client.loop_forever()
except KeyboardInterrupt:
    client.disconnect()
    exit(0)
```

### Method
1. Start `mosquitto -v -c mosquitto.conf`
2. In another terminal, start `mosquitto_sub -t ""#"" -v -u testuser -P test`
3. in a third terminal, start `python3 mqtt_tester.py`

## Test

### Case 1: correct credentials
`mosquitto -v -c mosquitto.conf` output:
```
mosquitto version 1.4.15 (build date Wed, 13 Feb 2019 00:27:01 +0000) starting
Config loaded from mosquitto.conf.
Opening ipv4 listen socket on port 1883.
Opening ipv6 listen socket on port 1883.

New connection from 127.0.0.1 on port 1883.
New client connected from 127.0.0.1 as mosqsub (c1, k60, u'testuser').
Sending CONNACK to mosqsub (0, 0)
Received SUBSCRIBE from mosqsub
    # (QoS 0)
mosqsub 0 #
Sending SUBACK to mosqsub

New connection from 127.0.0.1 on port 1883.
New client connected from 127.0.0.1 as mqtt_tester (c1, k60, u'testuser').
Sending CONNACK to mqtt_tester (0, 0)

Received PUBLISH from mqtt_tester (d0, q0, r0, m0, 'TEST', ... (4 bytes))
Sending PUBLISH to mosqsub (d0, q0, r0, m0, 'TEST', ... (4 bytes))

Received DISCONNECT from mqtt_tester
Client mqtt_tester disconnected.

Socket error on client mosqsub, disconnecting.
```
`python3 mqtt_tester.py` output:
```
connect() return code: 0
```
`mosquitto_sub -t ""#"" -v -u testuser -P test` output:
```
TEST test
```
### Case 2: incorrect credentials
for this case, line 5 of `mqtt_tester.py` was changed from 
```python 
client.username_pw_set(""testuser"", ""test"")
```
to
```python
client.username_pw_set(""testuser"", ""wrong"")
```
No other changes were made.

`mosquitto -v -c mosquitto.conf` output:
```
mosquitto version 1.4.15 (build date Wed, 13 Feb 2019 00:27:01 +0000) starting
Config loaded from mosquitto.conf.
Opening ipv4 listen socket on port 1883.
Opening ipv6 listen socket on port 1883.

New connection from 127.0.0.1 on port 1883.
New client connected from 127.0.0.1 as mosqsub (c1, k60, u'testuser').
Sending CONNACK to mosqsub (0, 0)
Received SUBSCRIBE from mosqsub
    # (QoS 0)
mosqsub 0 #
Sending SUBACK to mosqsub

New connection from 127.0.0.1 on port 1883.
Sending CONNACK to 127.0.0.1 (0, 5)
Socket error on client <unknown>, disconnecting.

Socket error on client mosqsub, disconnecting.
```
`mosquitto_sub -t ""#"" -v -u testuser -P test` output:
```
```

`python3 mqtt_tester.py` output:
```
connect() return code: 0
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxMzQ0OQ==,paho.mqtt.python,477513449,369,NA,vrst37,34431050,,,NA,2019-03-28T09:19:11Z,2019-03-28T09:19:11Z,"From my understanding the code is supposed to return 0.

The intention is definitely to use the on_connect and on_disconnect callbacks.

I think the behaviour might be residues from ancient times of this library (i.e. to maintain compatibility and not break too many things).

@PierreF @ralight can any one you confirm so we can close this issue?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3NzUxMzQ0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzk0MjU5Mw==,paho.mqtt.python,477942593,369,NA,acetylen,42578370,Emil Tylén,,NA,2019-03-29T10:09:40Z,2019-03-29T10:09:40Z,"My problem is specifically that I'm dealing with a system that runs a non-standard broker, that doesn't signal failure properly. If the client provides bad credentials, the broker holds the connection open until the other side times out. This makes it hard to use the callbacks as none of them fire, and it also makes it hard to use `connect` as it returns immediately. With is library there's basically no way to know failure state.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ3Nzk0MjU5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/369,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDl8K,paho.mqtt.python,1879990026,369,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T08:17:04Z,2024-01-07T08:17:04Z,">that doesn't signal failure properly.

So, if I'm understanding you correctly, the broker does not return a `CONNACK` or drop the connection?

The only real option the spec offers in this situation is a timeout:

>If the Client does not receive a CONNACK Packet from the Server within a reasonable amount of time, the Client SHOULD close the Network Connection. A ""reasonable"" amount of time depends on the type of application and the communications infrastructure.

I've had a scan through the library and there does not seem to be any option for a `CONNACK` timeout; as such I'm going to tage this issue as an enhancement request. 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDl8K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/370,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/370,paho.mqtt.python,426480608,370,How to use celery in mqtt,fanmlei,19201217,FanMinglei,15638515832@163.com,CLOSED,2019-03-28T13:04:24Z,2024-01-07T08:00:33Z,"When I received the message, I wanted to pass the message to celery for processing, but the celery worker did not receive 
```python

# client.py
import paho.mqtt.client as mqtt
from tasks import handles

def on_message(client, userdata, msg):
    print(msg.topic,msg.payload)
    handles.delay(msg.topic, msg.payload)

def on_connect(client, userdata, flags, rc):
    client.subscribe(""$SYS/brokers/emq@127.0.0.1/clients/#"")

client = mqtt.Client('admin')
client.on_message = on_message
client.on_connect = on_connect
client.connect('iotforfml.com', 1883, 60)

client.loop_forever()


# tasks.py

@app.task
def handles(stream_id, msg):
    print(stream_id, msg)
    return msg
```
This problem has been bothering me for a long time, how can I solve it?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/370/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/370,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMDk0MQ==,paho.mqtt.python,480420941,370,NA,swails,779022,Jason Swails,,NA,2019-04-05T21:01:48Z,2019-04-05T21:01:48Z,"Your `tasks.py` isn't complete -- I get an error.

I made a short test with these files:

client.py:

```python
# client.py
import paho.mqtt.client as mqtt
from tasks import handles

def on_message(client, userdata, msg):
    print(msg.topic,msg.payload)
    handles(msg.topic, msg.payload)

def on_connect(client, userdata, flags, rc):
    client.subscribe(""testjason/test-topic"")

client = mqtt.Client('admin')
client.on_message = on_message
client.on_connect = on_connect
client.connect('test.mosquitto.org', 1883, 60)

client.loop_forever()
```

tasks.py:

```python
def handles(stream_id, msg):
    print('Inside handles()', stream_id, msg)
    return msg
```

Then I used `mosquitto_pub` to publish a message to that topic:

```
mosquitto_pub -h test.mosquitto.org -t testjason/test-topic -m ""Help me""
```

I saw this output:

```
bash ~ $ python test.py 
testjason/test-topic b'Help me'
Inside handles() testjason/test-topic b'Help me'
```

So it's pretty clear that `handles()` is being called inside the `on_message` callback when testing against the test.mosquitto.org test broker.

I'd recommend breaking the problem down.  Remove components until it's just the MQTT broker.  Then add in pieces (like the callback, etc.) one at a time until it doesn't behave the way you expect.  That will help you determine where to look further for the problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQyMDk0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/370,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlEK,paho.mqtt.python,1879986442,370,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T08:00:33Z,2024-01-07T08:00:33Z,Closing due to inactivity (@swails offered suggestions and no followup from OP so assume they have resolved the issue).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlEK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,paho.mqtt.python,429299549,371,incorrectly reporting incorrect protocol version,jvrahav,27826808,Rahav J V,rahavjvr@gmail.com,CLOSED,2019-04-04T14:06:12Z,2024-01-08T00:40:13Z,"Hi,

I have a client written on paho. I have implemented callbacks for disconnect, connect.

although my client sends the message successfully, on_disconnect callback keeps getting called due to error code 1. Error code 1 refers to incorrect protocol version. Connection doesnt seem to be broken but this error message keeps coming up.

Im using emqtt version 2.1.2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDM3NzA2NA==,paho.mqtt.python,480377064,371,NA,ralight,79578,Roger Light,,NA,2019-04-05T18:26:50Z,2019-04-05T18:26:50Z,"The documentation for the on_disconnect callback says:

```
    on_disconnect(client, userdata, rc): called when the client disconnects from the broker.
      The rc parameter indicates the disconnection state. If MQTT_ERR_SUCCESS
      (0), the callback was called in response to a disconnect() call. If any
      other value the disconnection was unexpected, such as might be caused by
      a network error.
```

So the 1 here indicates that your client is disconnecting for a reason other than you calling the `client.disconnect()` function. Error code 1 is mismatching protocol for CONNACK only.

The typical sort of problem is that people aren't calling one of the `loop*()` functions to process the background network loop. Do you have some example code you could share that shows your problem?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDM3NzA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTIzNDU4OA==,paho.mqtt.python,481234588,371,NA,jvrahav,27826808,Rahav J V,rahavjvr@gmail.com,NA,2019-04-09T12:41:54Z,2019-04-09T12:41:54Z,"```
def __init__(self, config):
        # TODO: clean up call hierarchy to remove unwanted params
       self.client = mqtt.Client(self.clientId)
        self.tls_dict = {
            'ca_certs': os.path.join(somepath),
            'certfile': os.path.join(somepath),
            'keyfile': os.path.join(somepath),
            'cert_reqs': ssl.CERT_NONE,
            'tls_version': ssl.PROTOCOL_TLSv1_2}
            self.mqtt_client = None
            self.mqtt_client = mqtt.Client(self.clientId)
            self.mqtt_client.username_pw_set(""user"", ""pass"")
            self.mqtt_client.tls_set(**self.tls_dict)
            self.mqtt_client.on_disconnect = self.on_disconnect
            self.mqtt_client.on_connect = self.on_connect
            self.mqtt_client.on_publish = self.on_publish
            self.mqtt_client.on_log = self.on_log
            self.mqtt_client.connect(host=self.broker_host, port=self.broker_tcp_port, keepalive=60)
            self.mqtt_client.loop_start()

def on_connect(self, mqtt_client, userdata, flags, rc):
        log.debug(""connect to data plane was invoked."")
        if rc == 0:
            self.mqtt_client.loop_start()
            log.debug(""connected to data plane ..."")
        else:
            error_msg = self.getErrorString(rc)
            log.error(""Error occurred when trying to establish connection to data plane. %s"" % error_msg)
           raise RuntimeError(error_msg)

def on_disconnect(self, mqtt_client, obj, rc):
        try:
            if rc == 0:
                log.info(""disconnect request was initiated"")
            else:
                if rc >= 1:
                    error_msg = self.getErrorString(rc)
                    log.error(""disconnect occurred due to {}. Will attempt to reconnect"".format(error_msg))
                    mqtt_client.reconnect()
        except Exception as e:
            log.error(""Error occurred in disconnect callback with error {}"", str(e), exc_info=True)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MTIzNDU4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5OTA0NjAwMQ==,paho.mqtt.python,499046001,371,NA,mjcumming,1330184,Michael Cumming,,NA,2019-06-05T11:30:56Z,2019-06-05T11:30:56Z,Were you able to solve this?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5OTA0NjAwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/371,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEliQ,paho.mqtt.python,1880250512,371,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:40:13Z,2024-01-08T00:40:13Z,"I'm going to close this due to age/inactivity (apologies for the fact that you did not get an answer back in 2019!). Please do feel free to reopen if you are still encountering the issue; however if doing so it would be really useful if you could include broker logs. A common cause of this kind of error is having two clients using the same client ID (second one connects; server drops connection to first one, first one reconnects so broker drops second etc).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEliQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,paho.mqtt.python,429921054,372,Amazon MQ ,solmazgh,44710340,,,CLOSED,2019-04-05T20:24:50Z,2024-01-07T04:01:00Z,"Hi, 
I am trying to write a small piece of code in  Python to connect to my broker in Amazon MQ. 
my broker has username and password. Using Paho MQTT , I am not able to add the broker's username and PWD in my code. 
Do I have to use Stomp instead of MQTT ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQxMzkwNg==,paho.mqtt.python,480413906,372,NA,swails,779022,Jason Swails,,NA,2019-04-05T20:35:59Z,2019-04-05T20:35:59Z,Search for `username_pw_set` in the main README file (which is also the documentation).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4MDQxMzkwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTIyNzIwMA==,paho.mqtt.python,531227200,372,NA,saketagarwal,13829912,Saket,,NA,2019-09-13T12:59:03Z,2019-09-13T12:59:03Z,@solmazgh Did you manage to connect to Amazon MQ broker using python Paho MQTT client?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTIyNzIwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTMzNzQ5Nw==,paho.mqtt.python,531337497,372,NA,solmazgh,44710340,,,NA,2019-09-13T18:10:09Z,2019-09-13T18:10:09Z,"Hello.
Yes , exactly!

On Fri, Sep 13, 2019, 5:59 AM Saket <notifications@github.com> wrote:

> @solmazgh <https://github.com/solmazgh> Did you manage to connect to
> Amazon MQ broker using python Paho MQTT client?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/paho.mqtt.python/issues/372?email_source=notifications&email_token=AKVDTRB4PQ3LJWVPNVF2Q6DQJOFBXA5CNFSM4HD6VBD2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6U6EQA#issuecomment-531227200>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AKVDTRFR4CEAZPT5FAX4D73QJOFBXANCNFSM4HD6VBDQ>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTMzNzQ5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTc1MTIxNQ==,paho.mqtt.python,531751215,372,NA,saketagarwal,13829912,Saket,,NA,2019-09-16T12:14:36Z,2019-09-16T12:14:36Z,"@solmazgh Can you please provide me with a code snippet? I'm able to connect to amazon MQ with Java eclipse paho client but not in python. It gives me an error ""servername or nodename not present"". The python code works fine with a locally hosted MQTT broker but not with amazonMQ broker.

I have tried doing this : 

import paho.mqtt.client as mqttClient
import time
​
Connected = False   #global variable for the state of the connection
​
broker_address= ""ssl://somestring.mq.us-east-1.amazonaws.com""
port = 8883
user = ""abcqwert""
password = ""abc12345""
​
​
​
def on_connect(client, userdata, flags, rc):
 
    if rc == 0:
        print(""Connected to broker"")
        global Connected                #Use global variable
        Connected = True                #Signal connection  
    else:
        print(""Connection failed"")
​
 
client = mqttClient.Client(""Enable - Backend"")     #create new instance
client.username_pw_set(user, password=password)    #set username and password
client.on_connect= on_connect                      #attach function to callback
client.connect(broker_address, port=port)          #connect to broker
 
client.loop_start()        #start the loop
 
while Connected != True:    #Wait for connection
    time.sleep(0.1)
 
​
# def message_me(topic, message):
#      client.publish(topic, message)
try:
    while True:
        
        value = input('Enter the message:')
        client.publish(""logs/test"",value)
        # message_me(""python/test1"",""value"")
​
 
except KeyboardInterrupt:
 
    client.disconnect()
    client.loop_stop()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzMTc1MTIxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODkwNjIwOQ==,paho.mqtt.python,538906209,372,NA,quanphuong,51616546,Quan Phuong,,NA,2019-10-07T09:02:20Z,2019-10-07T09:02:20Z,"> @solmazgh Can you please provide me with a code snippet? I'm able to connect to amazon MQ with Java eclipse paho client but not in python. It gives me an error ""servername or nodename not present"". The python code works fine with a locally hosted MQTT broker but not with amazonMQ broker.
> 
> I have tried doing this :
> 
> import paho.mqtt.client as mqttClient
> import time
> ​
> Connected = False #global variable for the state of the connection
> ​
> broker_address= ""ssl://somestring.mq.us-east-1.amazonaws.com""
> port = 8883
> user = ""abcqwert""
> password = ""abc12345""
> ​
> ​
> ​
> def on_connect(client, userdata, flags, rc):
> 
> ```
> if rc == 0:
>     print(""Connected to broker"")
>     global Connected                #Use global variable
>     Connected = True                #Signal connection  
> else:
>     print(""Connection failed"")
> ```
> 
> ​
> 
> client = mqttClient.Client(""Enable - Backend"") #create new instance
> client.username_pw_set(user, password=password) #set username and password
> client.on_connect= on_connect #attach function to callback
> client.connect(broker_address, port=port) #connect to broker
> 
> client.loop_start() #start the loop
> 
> while Connected != True: #Wait for connection
> time.sleep(0.1)
> 
> ​
> 
> # def message_me(topic, message):
> # client.publish(topic, message)
> try:
> while True:
> 
> ```
>     value = input('Enter the message:')
>     client.publish(""logs/test"",value)
>     # message_me(""python/test1"",""value"")
> ```
> 
> ​
> 
> except KeyboardInterrupt:
> 
> ```
> client.disconnect()
> client.loop_stop()
> ```

@saketagarwal i use paho.mqtt to connect to AmazonMQ, and i wrote some codes the same idea with you, but i don't know why when i attach `on_message` callback, it didn't show anything. And the consumer, can you show up the snippet of the consumer ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODkwNjIwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NjM0MjYxNw==,paho.mqtt.python,686342617,372,NA,mahan-angadi,10592623,,,NA,2020-09-03T08:36:13Z,2020-09-03T08:36:13Z,"@saketagarwal , @solmazgh @swails Can anyone please provide me with a code snippet? It would help me greatly as I am not able to connect to AmazonMQ, even though it works in localhost and standalone ActiveMQ server. 

I have posted the question on [stackoverflow](https://stackoverflow.com/questions/63720249/not-able-to-connect-to-amazonmq-via-mqtt-protocol-using-pythonpaho-mqtt-python) as well.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4NjM0MjYxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/372,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDXP1,paho.mqtt.python,1879929845,372,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T04:01:00Z,2024-01-07T04:01:00Z,Closing this due to its age and because there appears to be an answer to the OP's stack overflow post. Please feel free to reopen if you are still having issues.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDXP1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/375,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/375,paho.mqtt.python,434519935,375,Subscribed topics are lost if connection to broker restarts,schmidty1913,24723142,Mike Schmidt,schmidty1913@gmail.com,CLOSED,2019-04-17T22:56:20Z,2019-04-18T00:21:49Z,"When the connection to broker is lost, the subscribed topics do not work anymore.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/375/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/375,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NDMwODA4Ng==,paho.mqtt.python,484308086,375,NA,swails,779022,Jason Swails,,NA,2019-04-18T00:16:25Z,2019-04-18T00:16:25Z,"Is this not the target behavior according to the spec?

You can resubscribe automatically by adding the subscriptions to the on_connect callback. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NDMwODA4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,paho.mqtt.python,436090200,376,Race condition when sending lots of messages,yschroeder,8067560,Yannic Schröder,,CLOSED,2019-04-23T09:33:09Z,2024-01-15T17:27:31Z,"I try to send a lot of MQTT messages as fast as possible (I know MQTT might not be the correct protocol for this...). I am using the following code snippet:

```python
from paho.mqtt.client import Client as MQTTClient
from paho.mqtt.client import error_string

mqttc = MQTTClient()
mqttc.connect_async('localhost', 1883, 10)
mqttc.loop_start()

# adding these two lines, it always works
#info = mqttc.publish(""test-topic"", payload=""online"", qos=2, retain=False)
#info.wait_for_publish()

for i in range(300):
    message = ""{}"".format(i)
    info = mqttc.publish(""test-topic"", payload=message, qos=2, retain=False)
    print(message, error_string(info.rc))

# adding this line also makes it work, but data is being send ""chunky""
# it sends 120 messages at a time and then waits quite some time
# until the next chunk is send
#info.wait_for_publish()
mqttc.loop_stop()
mqttc.disconnect()
```

What I experience is, that when running this script, occasionally it does not send messages at all (most of the time it works perfectly). I believe in the error case, the client never manages to connect in time and the loop is stopped and MQTT disconnected before any message was being able to leave the client.

I want all of the messages being send before the connection is closed. Do I have to track this myself by saving all the `MQTTMessageInfo` objects and check if all of them have been sent?

Waiting for the last message to be sent helps (see the example). However, the messages are being send in chunks of 120 messages with 20 seconds delay in between. I suspect this to be due to message queue limits in Mosquitto (20 inflight messages with QoS > 0 and 100 queued messages maximum). However, why does the client wait 20 seconds before trying to send the next message?

Tl;DR: I was expecting that the loop only stops when all QoS messages were sent correctly. What do I need to configure to get rid of the 20 second delay once the queue at the broker is full and make it retry earlier?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NTcyOTIyMg==,paho.mqtt.python,485729222,376,NA,yschroeder,8067560,Yannic Schröder,,NA,2019-04-23T09:37:51Z,2019-04-23T09:37:51Z,"I just figured out that the message retry time is set to 20 seconds by default. On PyPI the documentation is wrong: https://pypi.org/project/paho-mqtt/#message-retry-set

It says 5 seconds there. Setting it to a lower value helps with my problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NTcyOTIyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NjE0ODQ1Mg==,paho.mqtt.python,486148452,376,NA,yschroeder,8067560,Yannic Schröder,,NA,2019-04-24T09:43:10Z,2019-04-24T09:43:10Z,"Part of the problem seems to be related to #196. I think the library should be able to tell me if all QoS > 0 messages have been sent correctly.

How about adding a function e.g. `message_queue_empty()` that returns `True` if all QoS > 0 messages have been sent? When calling `loop_stop(force=False)` it could wait for this to be `True` and only join the thread once the messages are sent. With `loop_stop(force=True)` it would not wait for this condition, but exit immediately.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4NjE0ODQ1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjEwMTg5Ng==,paho.mqtt.python,496101896,376,NA,vrst37,34431050,,,NA,2019-05-27T06:59:57Z,2019-05-27T06:59:57Z,"**For the problem of sending messages when you are yet to connect:**
So there are a few ways you can solve this problem. In your application, you can use on_connect and on_disconnect callbacks to set a flag to start sending data only when the flag is set (i.e. you are connected). 

**For the problem of disconnecting before the thread is able to send all the messages:**
Hi, does [this](https://github.com/eclipse/paho.mqtt.python/blob/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61/src/paho/mqtt/client.py#L1449) fulfill your requirement? 

Basically you can check if there are pending messages and defer disconnect call. 

Another way is to use [this](https://github.com/eclipse/paho.mqtt.python/blob/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61/src/paho/mqtt/client.py#L325) call on the last message you send out. This solution may not be such a good idea because if the publish is not done in sequence, then your logic will fail. 

As per your suggestion of changing the behaviour of loop_stop, I am cool with it, just make sure default value of force is True (to maintain backwards compatibility) however I think it can easily be done in application side as well. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjEwMTg5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjUyMzYwNg==,paho.mqtt.python,526523606,376,NA,Mithrandir2k18,41417290,,,NA,2019-08-30T09:03:07Z,2019-08-30T09:03:07Z,"I also encountered a race condition. My scenario was a sensor that is sending data at 1Hz(calls the publish function from an asyncio-thread), is syncronized via Ping/Pong/Offset Messages(the ping is replied to in the on_message callback) at 3Hz and sends a Heartbeat at 0.25Hz from another thread.

The race condition would sometimes occur after 10 seconds, sometimes after 20 minutes at a steady traffic. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyNjUyMzYwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDXMP,paho.mqtt.python,1879929615,376,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:59:23Z,2024-01-07T03:59:23Z,"I believe that @vst37 has provided some options and there has been no response so I'm going to close this issue (as its very old and the library has changed in the interim). If anyone is still having issues please feel free to reopen.

@Mithrandir2k18 - It's not really clear if your issue is the same as OP's; if you are still seeing this please rais a new issue (but please provide a minimal reproducible example if at all possible).

Ref the original issue; I think it's important to note that `connect_async` returns immediately (the connection process happens in the network loop). As such it's possible that you will get to the `loop_stop` before the connection is actually up (at QOS1+ messages are queued if the connection is down) and a bit more work is needed to ensure messages actually go out.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDXMP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/376,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wzh3x,paho.mqtt.python,1892556273,376,NA,Mithrandir2k18,41417290,,,NA,2024-01-15T17:27:30Z,2024-01-15T17:27:30Z,"@MattBrittan This issue is rather old and I don't want to be rude, but I don't really care anymore. We switched to beerfactory/hbmqtt and that didn't cause any race conditions in our usecase.

What I described is a setup with 4.25 messages per second coming from 3 different threads, setting this up is trivial. We observed that sending a message from a callback thread (subscriber of a ping topic publishes a pong on a pong topic) *could* trigger the race-condition sometimes.

Sorry but that's all the info I can give at this moment - and I don't know if it's still relevant anyway as the project in question was completed years ago.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wzh3x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,paho.mqtt.python,436556312,377,Send queue has a size limit of 65555 when using QoS > 0,yschroeder,8067560,Yannic Schröder,,OPEN,2019-04-24T08:11:56Z,2024-01-07T22:58:16Z,"Contrary to the documentation, which states that there is an unlimited queue size by default, the send queue for messages with QoS > 0 is limited to 65555 entries via this `if` statement:
https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L1210

I think the code could be changed so that message ids are assigned later, when the message should actually be sent and a message id is available again.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODQxMjU4Ng==,paho.mqtt.python,748412586,377,NA,fargiolas,133750,Filippo Argiolas,filippo.argiolas@gmail.com,NA,2020-12-19T03:30:42Z,2020-12-19T03:30:42Z,"Any insight from the devs about this issue? a brief look at the code suggests this is true and the queue is actually limited to 65535 messages given it's not an actual queue but a dict indexed by message ids. It would be great to have some confirmation about this, I wanted to use paho as my sole message queue but with this constraint it seems I'd start losing data after about 18 hours (sending 1 sample per second) of network down.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODQxMjU4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDA5NTQ3Mw==,paho.mqtt.python,770095473,377,NA,yschroeder,8067560,Yannic Schröder,,NA,2021-01-29T23:02:32Z,2021-01-29T23:02:32Z,"I will shamelessly summon @ralight, as I think this issue got lost between the support requests from Python beginners.

As my above link is outdated, I will describe the problem again:

[Here](https://github.com/eclipse/paho.mqtt.python/blob/225ab3757f6818ba85eb80564948d1c787190cba/src/paho/mqtt/client.py#L1269) the message ID for an outgoing message is generated via `_mid_generate()`. It assigns the numbers from 1 to 65535 as message IDs in a round-robin style.

[Here](https://github.com/eclipse/paho.mqtt.python/blob/225ab3757f6818ba85eb80564948d1c787190cba/src/paho/mqtt/client.py#L1291) the generated message ID is checked if it already exists in the dictionary that holds outgoing messages. If the message ID is already in there, the message is discarded. This might happen when the network connection is gone while 2^16 messages are requested to be published. In fact, this dictionary should be a queue and allow arbitrary numbers of messages.

[Here](https://github.com/eclipse/paho.mqtt.python/blob/225ab3757f6818ba85eb80564948d1c787190cba/src/paho/mqtt/client.py#L1295) the new message is put into the dictionary if the message ID does not exist there (the previous message with the same ID is already sent successfully).

In my opinion, this behavior is a bug when using QoS 1 or QoS 2. I expect all my messages that I put into the MQTT stack to reach the broker eventually.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDA5NTQ3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDM2NzkzNg==,paho.mqtt.python,770367936,377,NA,fargiolas,133750,Filippo Argiolas,filippo.argiolas@gmail.com,NA,2021-01-31T11:34:10Z,2021-01-31T11:34:10Z,"I believe this comes from the protocol limiting IDs to 16bits, but as far as I can tell nothing prevents an implementation to store messages in an independent local queue and assign them an ID as soon as they become available for reuse.

In my opinion, this is a quite serious issue both because the doc promises unlimited message queue ~~and because it silently drops messages without throwing an error~~. (EDIT: it indeed does return an error code in `message.info`)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDM2NzkzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDQ0NzczOA==,paho.mqtt.python,770447738,377,NA,yschroeder,8067560,Yannic Schröder,,NA,2021-01-31T20:44:34Z,2021-01-31T20:44:34Z,"It is not strictly silent. The `publish()` call returns a `message.info` object which contains a return code, but it is rarely checked.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDQ0NzczOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDY0MjY1Ng==,paho.mqtt.python,770642656,377,NA,fargiolas,133750,Filippo Argiolas,filippo.argiolas@gmail.com,NA,2021-02-01T07:41:01Z,2021-02-01T07:41:01Z,"> It is not strictly silent. The `publish()` call returns a `message.info` object which contains a return code, but it is rarely checked.

you're right, thought the error was being set only if queue length exceeded `_max_queued_messages` but it also checks if current id is already in queue. Fixed my comment thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDY0MjY1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDU5ODIwNA==,paho.mqtt.python,830598204,377,NA,JsBergbau,37013344,,,NA,2021-05-01T09:50:23Z,2021-05-01T09:50:23Z,I've created a pullrequest to mention this limitation in the documentation. Would have saved me a lot of time if this was mentioned as long as this limitiation is fixed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgzMDU5ODIwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NDQxMTIzOA==,paho.mqtt.python,844411238,377,NA,yschroeder,8067560,Yannic Schröder,,NA,2021-05-19T19:38:27Z,2021-05-19T19:38:27Z,"I am not entirely sure how I came up with the value of 65555. The message IDs are 16 bit, so their maximum is of course 65535. And I am pretty sure this is not a typo as I typed it twice and and I know my powers of two...

Is there another inflight queue or something that can accomodate 20 additional messages?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NDQxMTIzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NDQxMjI5MQ==,paho.mqtt.python,844412291,377,NA,yschroeder,8067560,Yannic Schröder,,NA,2021-05-19T19:39:50Z,2021-05-19T19:39:50Z,"To answer my own question:

There are exactly 20 inflight messages according to [this line](https://github.com/eclipse/paho.mqtt.python/blob/c339cea2652a957d47de68eafb2a76736c1514e6/src/paho/mqtt/client.py#L608).

So 65555 seems to be indeed correct.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NDQxMjI5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/377,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEaqv,paho.mqtt.python,1880205999,377,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:58:07Z,2024-01-07T22:58:07Z,"I'm going to flag this as an enhancement; as the limitation is now documented I guess it's not a bug!. Having said that it does look to me like there may be a bug here, when nearing 65535 messages in progress you are going to get ID reuse and there does not seem to be any check for this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEaqv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,paho.mqtt.python,439428441,379,Slow on_message callback causes disconnection,iblislin,761623,Iblis Lin,iblislin@gmail.com,CLOSED,2019-05-02T05:05:18Z,2023-12-24T22:04:45Z,"```python
def on_message(client, userdata, msg):
     # slow operation ... maybe it needs 5 minutes
```
then, I got this from mosquitto:
```
1556772590: Client 417c5720-d208-4a0c-a60f-264b2bf91e8b has exceeded timeout, disconnecting.                                                  
1556772590: Socket error on client 417c5720-d208-4a0c-a60f-264b2bf91e8b, disconnecting.
```

Is this intended?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTU0NjgwMQ==,paho.mqtt.python,491546801,379,NA,rajapulau,958302,Ganjar Widiatmansyah,rajapulau@gmail.com,NA,2019-05-11T21:56:11Z,2019-05-11T21:56:11Z,"btw, i have a problem like you. I want to create monitoring subscribing. When the message comes to late in 1 minute, I want to show a warning. I create publisher every one minute post to mqtt. How to know if we got late subscribe from last publish?

> 00:10 Post A -> Get subscribe A (same time)
> 00:11 Post B -> -
> 00:12 Post C -> 

Before I do Post C, I didn't get subscribe Post B. How do I know if I didn't get subscribe from Post B?

Regards","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5MTU0NjgwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTQxMzg3NQ==,paho.mqtt.python,515413875,379,NA,tarunw07,14329327,Tarun Wadhwa,tarunwadhwa85@gmail.com,NA,2019-07-26T11:15:51Z,2019-07-26T11:15:51Z,"@iblis17 Yes this is the intended behaviour. If you have a task which takes a lot of time, execute that task in a separate thread.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNTQxMzg3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wtv5,paho.mqtt.python,901962745,379,NA,michaelosthege,5894642,Michael Osthege,,NA,2021-08-19T14:27:44Z,2021-08-19T14:27:44Z,"I had the same problems but instead of running my task on another thread I switched from calling `loop()` to `loop_start()`, which is advertised to run on its own thread.
It resolved the problem for me, but please let me know if I'm doing something stupid.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wtv5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/379,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJbR,paho.mqtt.python,1868601041,379,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T22:04:45Z,2023-12-24T22:04:45Z,I'm going to close this due to age/inactivity. As mentioned above the callbacks are not intended for long running actions (start a thread for these). Long callbacks prevent other processes from running and may lead to timeouts.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJbR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380,paho.mqtt.python,440307234,380,ESP32 cant connect to mosquitto broker on Raspberry pi,monthern,50060797,,,CLOSED,2019-05-04T10:08:58Z,2024-01-08T01:26:26Z,"I'm using Raspberry Pi 3 where I Installed Mosquitto broker, it is tested and working perfectly. Im trying the following code on ESP32 to connect to this Mosquitto broker but getting error code -4.  I'm getting connected to wifi but not MQTT

#include <WiFi.h> // Enables the ESP32 to connect to the local network (via WiFi)
#include <PubSubClient.h> // Allows us to connect to, and publish to the MQTT broker


// WiFi Credentials
const char* ssid = ""iPhone"";
const char* wifi_password = ""auwz1234"";

// MQTT Broker IP and Credentials

const char* mqtt_server = ""169.254.135.104"";
const char* mqtt_topic = ""moisture"";
const char* mqtt_username = ""monther"";
const char* mqtt_password = ""mosquitto"";

const char* clientID = ""ESP32_Pump"";
const int mqttPort = 1883;

// Initialise the Pushbutton Bouncer object
//Bounce bouncer = Bounce();

// Initialise the WiFi and MQTT Client objects
//WiFiClient wifiClient;
//PubSubClient client(mqtt_server, 1883, wifiClient); // 1883 is the listener port for the Broker

WiFiClient espClient;
PubSubClient client(espClient);


void setup() {
  
  Serial.begin(115200);

  Serial.print(""Connecting to "");
  Serial.println(ssid);

  //Added by Monther on 04.may2019  WIFI_STA
  //WiFi.mode(WIFI_STA);

  // Connect to the WiFi
  WiFi.begin(ssid, wifi_password);

  // Wait until the connection has been confirmed before continuing
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""Trying to connect"");
  }

  // Debugging - Output the IP Address of the ESP32
  Serial.println(""WiFi connected"");
  Serial.print(""IP address: "");
  Serial.println(WiFi.localIP());

    //Added by Monther on 04.may2019  setServer & Callback
  client.setServer(mqtt_server, mqttPort);
  //client.setCallback(callback);
}
/*
void callback(char* topic, byte* payload, unsigned int length) {
 
  Serial.print(""Message arrived in topic: "");
  Serial.println(topic);
 
  Serial.print(""Message:"");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
 
  Serial.println();
  Serial.println(""-----------------------"");
 
}
*/
void loop() {
    // Connect to MQTT Broker
  if (client.connect(clientID, mqtt_username, mqtt_password)) {
    Serial.println(""Connected to MQTT Broker!"");
  }
  else {
    Serial.println(""Connection to MQTT Broker failed..."");
  }
if (client.publish(mqtt_topic, ""Monther Button pressed!"")) {
      Serial.println(""Button pushed and message sent!"");
    }
    // Again, client.publish will return a boolean value depending on whether it succeded or not.
    // If the message failed to send, we will try again, as the connection may have broken.
    else {
      Serial.println(""Message failed to send. Reconnecting to MQTT Broker and trying again"");
      Serial.print(""failed with state "");
      Serial.print(client.state());
      client.connect(clientID, mqtt_username, mqtt_password);
      delay(10); // This delay ensures that client.publish doesn't clash with the client.connect call
      client.publish(mqtt_topic, ""Monther Button pressed!"");
    }
  }","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4OTMxMzc4NA==,paho.mqtt.python,489313784,380,NA,monthern,50060797,,,NA,2019-05-04T10:10:14Z,2019-05-04T10:10:14Z,"Here is the error Im getting
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4Connection to MQTT Broker failed...
Message failed to send. Reconnecting to MQTT Broker and trying again
failed with state -4","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ4OTMxMzc4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vwoum,paho.mqtt.python,1875020710,380,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2024-01-03T08:47:40Z,2024-01-03T08:47:40Z,This does not seem to be related to the Python `paho.mqtt` library.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vwoum/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/380,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEq1u,paho.mqtt.python,1880272238,380,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T01:26:26Z,2024-01-08T01:26:26Z,"Closing this as it's an issue with another library.

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEq1u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,paho.mqtt.python,441191617,381, paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error when connecting to AWS IoT over websocket,smoothwood,3354461,,ycm@outlook.com,CLOSED,2019-05-07T11:55:35Z,2024-01-08T01:33:51Z,"Hi All,

I appended below two lines to aws_iot.py and replace the host, access key and secret key with mine. When I call example_use() function, I always get this error: paho.mqtt.client.WebsocketConnectionError: WebSocket handshake 

    client.connect(""a3f3ep261pa8dz-ats.iot.ap-northeast-1.amazonaws.com"",443)

    client.loop_start()
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjM1MTcwNA==,paho.mqtt.python,496351704,381,NA,lwh31415,28473317,,,NA,2019-05-28T03:26:03Z,2019-05-28T03:26:03Z,"https://github.com/eclipse/paho.mqtt.python/issues/277

1. the only header you need to set is Host
2.before connect, you need client.tls_set()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDQ5NjM1MTcwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDc0MjQxMw==,paho.mqtt.python,630742413,381,NA,NarendraSingh727,11240711,Narendra Singh,,NA,2020-05-19T10:50:29Z,2020-05-19T10:50:29Z,i am also getting same error,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMDc0MjQxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMjU4NjY5NQ==,paho.mqtt.python,632586695,381,NA,petergerten,17756065,,,NA,2020-05-22T09:10:19Z,2020-05-22T09:10:19Z,same issue here,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMjU4NjY5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/381,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wErvv,paho.mqtt.python,1880275951,381,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T01:33:51Z,2024-01-08T01:33:51Z,"I'm going to close this due to its age and the minimal information provided. Please feel free to reopen but please provide a minimal, reproducible example (we cannot help unless we can see how you have configured `client`).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wErvv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382,paho.mqtt.python,441445153,382,Loosing qos 2 messages on reconnect after process kill,erik-neumann,6123716,Erik Neumann,,CLOSED,2019-05-07T21:02:54Z,2023-12-24T21:59:00Z,"I'm experiencing an issue with delivery reliability on client reconnects. Messages are published and subscribed using v1.4.0, qos 2, clean_session=false, loop_start(). Now if we have a longer running operation in on_message callback that blocks further processing, and the python process with the client gets killed during that time, messages are skipped when restarting the client. By using clean_session=false in combination with qos 2, I would expect that messages will be delivered even on hard client fails.

Now I think with the recent v1.4 release a behaviour was introduced to rather skip messages than result in hanging of processing. 

When starting a Test client subscribing to a topic with enough messages queued to be delivered, it seems that 20 messages are received before actually calling the handler for the first time. After killing and restarting, the messages get PUBCOMed I guess because of the 1.4 change that cant do other than skipping because message not present in buffer anymore.

I tried to work around this by setting max inflight messages to 1 to get a bit more control and not receiving messages that might not be handled (processing only 1 message at a time), but this had no effect at all.

This is the log output, after setting client.max_inflight_messages_set(1):

`('MQTT-TEST-SUB on_log ', 'Sending CONNECT (u0, p0, wr0, wq0, wf0, c0, k60) client_id=test')
MQTT-TEST-SUB Waiting for messages...
('MQTT-TEST-SUB on_log ', 'Received CONNACK (1, 0)')
MQTT-TEST-SUB Connected with result code 0
('MQTT-TEST-SUB on_log ', ""Sending SUBSCRIBE (d0, m1) [('TestTopic', 2)]"")
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 71)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 71)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d1, q2, r0, m72), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 72)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d1, q2, r0, m73), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 73)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d1, q2, r0, m74), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 74)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m75), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 75)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m76), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 76)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m77), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 77)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m78), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 78)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m79), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 79)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m80), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 80)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m81), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 81)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m82), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 82)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m83), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 83)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m84), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 84)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m85), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 85)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m86), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 86)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m87), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 87)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m88), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 88)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m89), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 89)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m90), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 90)')
('MQTT-TEST-SUB on_log ', 'Received SUBACK')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m91), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 91)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 72)')
MQTT-TEST-SUB TestTopic: {""timestamp"": ""2019-05-07T20:39:33+0200""}
^CMQTT-TEST-SUB Signal 2 received, terminating application...
('MQTT-TEST-SUB on_log ', 'Sending DISCONNECT')
Killed

MQTT-TEST-SUB Application Starting
('MQTT-TEST-SUB on_log ', 'Sending CONNECT (u0, p0, wr0, wq0, wf0, c0, k60) client_id=test')
MQTT-TEST-SUB Waiting for messages...
('MQTT-TEST-SUB on_log ', 'Received CONNACK (1, 0)')
MQTT-TEST-SUB Connected with result code 0
('MQTT-TEST-SUB on_log ', ""Sending SUBSCRIBE (d0, m1) [('TestTopic', 2)]"")
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 72)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 72)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 73)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 73)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 74)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 74)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 75)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 75)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 76)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 76)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 77)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 77)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 78)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 78)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 79)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 79)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 80)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 80)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 81)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 81)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 82)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 82)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 83)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 83)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 84)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 84)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 85)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 85)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 86)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 86)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 87)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 87)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 88)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 88)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 89)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 89)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 90)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 90)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d1, q2, r0, m91), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 91)')
('MQTT-TEST-SUB on_log ', 'Received SUBACK')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m92), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 92)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m93), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 93)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m94), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 94)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m95), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 95)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m96), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 96)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m97), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 97)')
('MQTT-TEST-SUB on_log ', u""Received PUBLISH (d0, q2, r0, m98), 'TestTopic', ...  (87 bytes)"")
('MQTT-TEST-SUB on_log ', 'Sending PUBREC (Mid: 98)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 91)')
MQTT-TEST-SUB TestTopic: {""timestamp"": ""2019-05-07T20:56:13+0200""}`

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzc5NTAwMQ==,paho.mqtt.python,523795001,382,NA,yschroeder,8067560,Yannic Schröder,,NA,2019-08-22T07:58:46Z,2019-08-22T07:58:46Z,"Have you set a client id? By default it is automatically generated, thus the client gets a new ID on every restart (even with clean session set to false). The broker cannot identify the client and will not deliver queued messages. Also make sure that all clients have unique IDs!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMzc5NTAwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41uGZt,paho.mqtt.python,901277293,382,NA,joshfriend,885137,Josh Friend,,NA,2021-08-18T17:00:57Z,2021-08-18T17:00:57Z,"In the ""Known Limitations"" section of the docs it says this:

> When clean_session is False, the session is only stored in memory not persisted. This means that when client is restarted (not just reconnected, the object is recreated usually because the program was restarted) the session is lost. This result in possible message lost.

Since your python process died, so did all of the pending qos2 messages not yet ack'd by the broker","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41uGZt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/382,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJOL,paho.mqtt.python,1868600203,382,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:59:00Z,2023-12-24T21:59:00Z,"You can pretty much see what is happening in the logs

```
MQTT-TEST-SUB Connected with result code 0
('MQTT-TEST-SUB on_log ', ""Sending SUBSCRIBE (d0, m1) [('TestTopic', 2)]"")
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 72)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 72)')
('MQTT-TEST-SUB on_log ', 'Received PUBREL (Mid: 73)')
('MQTT-TEST-SUB on_log ', 'Sending PUBCOMP (Mid: 73)')
```

So upon connection after the failure `PUBREL` messages are being received from the server (relating to messages that were previously acknowledger with a `PUBREC`); due to the loss of the store (which is held in memory) the client has no knowledge of these ID's. The client responds as is required by the spec:

>In the QoS 2 delivery protocol, the sender MUST send a PUBREL packet when it receives a PUBREC packet from the receiver with a Reason Code value less than 0x80. This PUBREL packet MUST contain the same Packet Identifier as the original PUBLISH packet.

One potential option might be to use `manual_ack` and only acknowledge the message when you have completed processing (however I think `manual_ack` functionality may be broken with QOS2 based on a quick look at [the code](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3369)).

As this is due to a known limitation and the issue is pretty old I'm going to close it. Please feel free to reopen (or open a new issue) if you have further thoughts.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJOL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/383,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/383,paho.mqtt.python,441708266,383,Cannot use loop_forever after having used loop_start/loop_stop,tim-bitreactive,18209077,,,OPEN,2019-05-08T12:24:29Z,2024-01-08T01:31:08Z,"Currently loop_stop leaves `self._thread_terminate = True`
It should reset it to `False` after joining the worker thread:
```
        self._thread_terminate = True
        if threading.current_thread() != self._thread:
            self._thread.join()
            self._thread = None
            self._thread_terminate = False
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/383/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/386,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/386,paho.mqtt.python,444261632,386,"multiple topics, display all at once, one each only",prankousky,11297070,prankousky,,CLOSED,2019-05-15T06:38:19Z,2023-12-24T22:02:25Z,"Hi everybody,

I am not very familiar with python in general, but kept reading about `paho-mqtt` when researching how to realize this little project I am trying to build. So I gave it a shot. Sorry if these are dumb questions; I have no background in IT and am just a self taught hobbyist, usually using bash scripts only for my workflows. 

My version is `Python 3.7.3`.

Here is what I am trying to do

* subscribe to multiple mqtt topics
* display **each topic's** *most recent* payload
* display all those payloads at the same time
* display *one* payload per topic **only**

My test script (code see below) will currently produce this output

```
battery sally => 95%
window bedroom => open
battery sally => 95%
battery sally => 95%
```

Basically what it will do is first display line 1 - 2, then after a while display line 3, then line 4. I have tried using `import os` and `os.system('clear')` in the script, but that will produce something like `battery sally => 95%`, then clear the screen, then display nothing for a while, then display `window bedroom => open`, clear the screen, display nothing, eventually display one of those lines again.

My script should always display 

```
battery sally => $payload %
window bedroom => $payload
```

When either value changes, it should 1) clear the page 2) insert each current value (if value has not changed, display last value).

This is a modified version of my script (tried to change everything to English while the original script is in German)

```
#!/usr/bin/env python3
# paho-mqtt 
import paho.mqtt.client as mqtt
# clear the screen
import os
# colorized output
from termcolor import colored

# colors
open = colored(""open"", ""red"")
closed = colored(""closed"", ""green"")

def on_connect(client, userdata, flags, rc):
    # display connection infos; irrelevant for now
    # print(""Connected with result code "" + str(rc))

    # this works as well
    # client.subscribe([(""home/misc/vacuum/sally/stat/battery"",1), (""home/oben/schlafzimmer/open/fenster/open"",2)])
    client.subscribe(""home/misc/vacuum/sally/stat/battery"",1)
    client.subscribe(""home/oben/schlafzimmer/open/fenster/open"",1)

def on_message(client, userdata, msg):
    # don't display like `b'payload'` 
    msg.payload = msg.payload.decode(""utf-8"")
    # print(msg.topic + "" "" + str(msg.payload))
    # os.system('clear')
    # print(""Wert ==> "" + str(msg.payload))
    if msg.topic == ""home/misc/vacuum/sally/stat/battery"":
        print(""Batterie Sally \t\t ==> \t "" + str(msg.payload + ""%""))
    if msg.topic == ""home/oben/schlafzimmer/open/fenster/open"":
        if msg.payload == ""true"":
            print(""window bedroom \t ==> \t "" + open)
        elif msg.payload == ""false"":
            print(""window bedroom \t ==> \t "" + closed)
        # print(""Fenster Schlafzimmer ==> "" + str(msg.payload))

# def on_message(client2, userdata, msg):
    # does this work?
    # print(""Fenster Schlafzimmer: "" + str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(""MYIP"", MYPORT, REFRESH_TIME(??))
#Set userid and password
client.username_pw_set(""USERNAME"", ""QWERTY123_VERYSECURE"")

client.loop_forever()
```

There is **a lot** to improve, but I wanted to see if the constant output of all values is possible. Once I got this done, I am planning on using a dict to automatically define what each topic should be named, for example

```
mydict = {
""battery sally"": ""home/misc/vacuum/sally/stat/battery"",
""window bedroom"": ""home/oben/schlafzimmer/open/fenster/open""
(etc)
}
```

I have also tried this (`on_message` part only, rest as in script above)

```def on_message(client, userdata, msg):
    msg.payload = msg.payload.decode(""utf-8"")
    os.system('clear')
    sally = """"
    f_schlafz = """"
    if msg.topic == ""home/misc/vacuum/sally/stat/battery"":
        # print(""battery sally \t\t ==> \t "" + str(msg.payload + ""%""))
        sally = ""battery sally \t\t ==> \t "" + str(msg.payload + ""%\n"")
    if msg.topic == ""home/oben/schlafzimmer/open/fenster/open"":
        f_schlafz = """"
        if msg.payload == ""true"":
            f_schlafz = ""window bedroom \t ==> \t"" + open
        elif msg.payload == ""false"":
            f_schlafz = ""window bedroom \t ==> \t"" + closed

    print(f_schlafz)
    print(sally)
```

This will **not** work. It will *only* print `window bedroom => $payload` **and an empty line underneath it**; if I put `print(sally)` above `print(f_schlafz)`, it will *only* print `battery sally => $payload %` (+ empty line underneath). No matter how I tried to construct this, it will not produce the desired output

```
window bedroom => closed
battery sally => 95%
```

The final script is supposed to have more than just those two lines; I am planning something like

```
UPSTAIRS
    bedroom
window bedroom => $payload
door bedroom => $payload
temp bedroom => $payload °C
    hallway
window hallway => $payload
door hallway => $payload
temp hallway => 
DOWNSTAIRS
    misc
battery sally => $payload %
```

Whenever any payload changes, the entire page should be cleared, then re-drawn. I thought saving each payload in a dedicated variable would do this, but I must have messed something up. 

I already have an overview like this generated by `node-red` as an html dashboard, but I'd prefer a terminal version like this that I can throw in a `tmux` window and quickly look at at any time without using a browser.

Would somebody please help me figure this out? Thanks in advance for your help :+1: ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/386/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/386,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJVZ,paho.mqtt.python,1868600665,386,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T22:02:25Z,2023-12-24T22:02:25Z,Apologies that you did not get an answer; I'm going to close this due to age/inactivity. If you are stil having issues please feel free to reopen (but as this is not really a question that's specific to this library stackoverflow might be a better venue; this kind of question generally receives an answer quickly there).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYJVZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/387,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/387,paho.mqtt.python,446037394,387,'_reset_sockets' fails on instanciation,antechrestos,5700545,Benjamin Einaudi,,CLOSED,2019-05-20T10:21:41Z,2019-09-24T07:06:01Z,"When `_socketpair_compat` fails, it invokes `_reset_sockets` that also fails as attributes `_sockpairR` and `_sockpairW`has not been initialized.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/387/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/387,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDQyMjEzMg==,paho.mqtt.python,534422132,387,NA,PierreF,359833,Pierre Fersing,,NA,2019-09-24T07:05:42Z,2019-09-24T07:05:42Z,Are you able to reproduce the issue on _socketpair_compat ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNDQyMjEzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/391,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/391,paho.mqtt.python,452265370,391,Possible thread safety issue,mjcumming,1330184,Michael Cumming,,CLOSED,2019-06-05T00:35:56Z,2019-12-16T20:51:56Z,"Version 1.4.0

I am getting this error - is this a threading issue?

``
Exception in thread Thread-10:
Traceback (most recent call last):
  File ""C:\Program Files (x86)\Python37-32\lib\threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""C:\Program Files (x86)\Python37-32\lib\threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 2913, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 1578, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 1072, in loop
    rc = self.loop_read(max_packets)
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 1374, in loop_read
    rc = self._packet_read()
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 2071, in _packet_read
    rc = self._packet_handle()
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 2566, in _packet_handle
    return self._handle_connack()
  File ""C:\Program Files (x86)\Python37-32\lib\site-packages\paho\mqtt\client.py"", line 2635, in _handle_connack
    for m in self._out_messages.values():
RuntimeError: OrderedDict mutated during iteration
``
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/391/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/392,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/392,paho.mqtt.python,454717229,392,Bad return code on failed ping,yveoch,6233736,Yves Lefloch,,CLOSED,2019-06-11T14:15:13Z,2019-06-12T11:40:50Z,"Hello all!

Sometimes, I get a strange error code: `MQTT_ERR_NOMEM`. I grepped the source to try and understand how it was happening, but I could not find any occurrence of the error... until I came across [this line](https://github.com/eclipse/paho.mqtt.python/blob/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61/src/paho/mqtt/client.py#L1481)!!

I don't think the error there was meant to be ""Out of memory"", maybe `1` could be replaced with `MQTT_ERR_CONN_LOST` or perhaps a new, dedicated error code?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/392/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/392,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDg5NjczMg==,paho.mqtt.python,500896732,392,NA,ralight,79578,Roger Light,,NA,2019-06-11T15:34:11Z,2019-06-11T15:34:11Z,"I'd say you're reading too much into that value I'm afraid. The `on_disconnect` reason code is just intended as a flag to indicate whether the call was as a result of you asking to disconnect or not, nothing more. There is more meaning in the code for MQTT v5 clients, so this has almost certainly changed for that update anyway.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMDg5NjczMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/392,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTIzNTk5Mg==,paho.mqtt.python,501235992,392,NA,yveoch,6233736,Yves Lefloch,,NA,2019-06-12T11:40:47Z,2019-06-12T11:40:47Z,"Okay, I understand. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwMTIzNTk5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/393,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/393,paho.mqtt.python,460845032,393,Django does not run when broker connected. it loops forever.,sabuhish,46589585,Sabuhi ,sabuhi.shukurov@gmail.com,CLOSED,2019-06-26T08:56:35Z,2019-06-29T07:16:21Z,"![Screenshot from 2019-06-26 12-54-15 - 1](https://user-images.githubusercontent.com/46589585/60166122-90a35500-9811-11e9-85e7-4cd021920d34.png)
![Screenshot from 2019-06-26 12-54-17](https://user-images.githubusercontent.com/46589585/60166123-90a35500-9811-11e9-8337-6e5e4181dc4e.png)

I put the code belowe inside the  __init__.py where the app is:
from . import mqtt_con

mqtt_con.client.loop_start()

I have channels installed in my apps I am connecting with ASGI server. 
what could be the issue, how can I resolve this?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/393/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/393,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjkzNTAzOA==,paho.mqtt.python,506935038,393,NA,sabuhish,46589585,Sabuhi ,sabuhi.shukurov@gmail.com,NA,2019-06-29T07:16:21Z,2019-06-29T07:16:21Z,"I fixed this problem.
I forgot to to write on_disconnect callback functions:
```    def on_disconnect(client, userdata, flags, rc):
        print('Disconnected from MQTT broker, reconnecting...')
        client.loop_stop(force=False)
        if rc != 0:
            print(""Unexpected disconnection."")
        else:
            print(""Disconnected"")
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjkzNTAzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,paho.mqtt.python,461005589,394,issue  CELERY and mqtt ,mexekanez,1692609,Ivan Shevchenko,i.shevchenko@flavosill.com,CLOSED,2019-06-26T14:28:41Z,2024-07-17T22:29:42Z,"Yes I can confirm that mqtt publish  does not works on celery beat.

```
@shared_task
def time_sched():

    print(""send....."")
    
    res = mqtt.client.publish('clients/c/0000000016ab8294', json.dumps({""celery"":""ok""}), qos=2)
    res.wait_for_publish()
    
```
```

@celery.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):

    sender.add_periodic_task(5.0, time_sched.s())
```


this task will halt forever.

if we will use without res.wait_for_publish(), you will see that is published in logger but nothing came in to channel.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTkwNTg4MA==,paho.mqtt.python,505905880,394,NA,mexekanez,1692609,Ivan Shevchenko,i.shevchenko@flavosill.com,NA,2019-06-26T14:41:03Z,2019-06-26T14:41:03Z,"but when I run it without celery just like: 


```
@manager.command
def mqtt_test():

    
    while True:
        sleep(1)
        res = mqtt.client.publish('clients/c/0000000016ab8294', json.dumps({""celery"":""ok""}), qos=2)
        res.wait_for_publish()
```

No issues here","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTkwNTg4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTkyMjE0OQ==,paho.mqtt.python,505922149,394,NA,mexekanez,1692609,Ivan Shevchenko,i.shevchenko@flavosill.com,NA,2019-06-26T15:19:22Z,2019-06-26T15:19:22Z,"this is also related current issue:
https://stackoverflow.com/questions/55864502/mqtt-message-not-getting-published-from-celery-beat-task","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNTkyMjE0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTE1MTIwOA==,paho.mqtt.python,549151208,394,NA,maei1337,38084991,,,NA,2019-11-03T15:56:18Z,2019-11-03T15:56:18Z,any news? have the same problem,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0OTE1MTIwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fKq-f,paho.mqtt.python,1596632991,394,NA,quirinhamp,83789808,,,NA,2023-06-19T07:10:19Z,2023-06-19T07:10:19Z,"Hello, 

I experience the same issue and this bug is open for 4 years now. What is the status?

Yours sincerely, 

Quirin","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fKq-f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZWG,paho.mqtt.python,1868404102,394,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:02:27Z,2023-12-24T01:02:27Z,Unfortunately without additional information it's difficult to investigate; it would be useful if someone could provide an example (e.g. docker-compose with everything necessary to duplicate the issue) or full code (showing how the connection is established) and [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) (the easier you can make it for us to replicate/track the issue the more likely it is that we will be able to resolve it).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZWG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/394,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLx3L,paho.mqtt.python,2234457547,394,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:29:42Z,2024-07-17T22:29:42Z,I'm going to close this due to lack of activity/reproducability. Please feel free to reopen if you are able to provide a way for us to duplicate the issue (or debug logs etc).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLx3L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/395,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/395,paho.mqtt.python,461571582,395,memory leaks after MQTTClient_destroy,paulborile,722094,Paul Stephen Borile,paul.borile@scientiamobile.com,CLOSED,2019-06-27T14:43:10Z,2019-06-27T16:58:26Z,"Hi,

we are MQTTClient apis ( MQTTClient_create(), MQTTClient_setCallbacks(), MQTTClient_connect(), MQTTClient_publishMessage(), MQTTClient_(un)subscribe(), MQTTClient_destroy() ) and using gcc sanitizer ( -fsanitize=address ) these are the reported leaks :

`==7515==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 4448 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16dfd54b8 in CRYPTO_zalloc (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1574b8)

Indirect leak of 17920 byte(s) in 276 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16dfd54b8 in CRYPTO_zalloc (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1574b8)

Indirect leak of 16712 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e3146bb  (/usr/lib/x86_64-linux-gnu/libssl.so.1.1+0x1e6bb)

Indirect leak of 16560 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e3147b1  (/usr/lib/x86_64-linux-gnu/libssl.so.1.1+0x1e7b1)

Indirect leak of 3318 byte(s) in 3 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16df0ff6f  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x91f6f)

Indirect leak of 2617 byte(s) in 93 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16df03e79 in ASN1_STRING_set (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x85e79)

Indirect leak of 1280 byte(s) in 9 object(s) allocated from:
    #0 0x7fd17001ff40 in realloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdef40)
    #1 0x7fd16e027258 in OPENSSL_sk_insert (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1a9258)

Indirect leak of 810 byte(s) in 3 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16defac4d  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x7cc4d)

Indirect leak of 788 byte(s) in 6 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16df3c0e7 in BUF_MEM_grow (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0xbe0e7)

Indirect leak of 563 byte(s) in 6 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e040c19  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1c2c19)

Indirect leak of 544 byte(s) in 2 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e0274b5 in OPENSSL_sk_dup (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1a94b5)

Indirect leak of 432 byte(s) in 12 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16dfd54b8 in CRYPTO_zalloc (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1574b8)
    #2 0xa17f9e24757c48ff  (<unknown module>)

Indirect leak of 312 byte(s) in 3 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16df2bfb6 in BN_MONT_CTX_new (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0xadfb6)

Indirect leak of 256 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16defac4d  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x7cc4d)
    #2 0x61b000010d2d  (<unknown module>)

Indirect leak of 256 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16defac4d  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x7cc4d)
    #2 0x62a00000cd92  (<unknown module>)

Indirect leak of 256 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16defac4d  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x7cc4d)
    #2 0x62a00000c8f7  (<unknown module>)

Indirect leak of 144 byte(s) in 9 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16df0e54e  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x9054e)

Indirect leak of 120 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e33029f  (/usr/lib/x86_64-linux-gnu/libssl.so.1.1+0x3a29f)

Indirect leak of 80 byte(s) in 2 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e027478 in OPENSSL_sk_dup (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1a9478)

Indirect leak of 29 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16dfde3be in CRYPTO_strdup (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1603be)

Indirect leak of 24 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e031cb2  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1b3cb2)

Indirect leak of 24 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16e031b3e  (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1b3b3e)

Indirect leak of 19 byte(s) in 1 object(s) allocated from:
    #0 0x7fd17001fb50 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb50)
    #1 0x7fd16dfde4ee in CRYPTO_strndup (/usr/lib/x86_64-linux-gnu/libcrypto.so.1.1+0x1604ee)
`
Any other info needed please let know
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/395/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/395,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjM4MTUxMw==,paho.mqtt.python,506381513,395,NA,ralight,79578,Roger Light,,NA,2019-06-27T14:56:15Z,2019-06-27T14:56:15Z,"I imagine you wanted to submit this to https://github.com/eclipse/paho.mqtt.c instead :)

It would be helpful to have full line information for the paho library, at the moment you just have the openssl lines shown, which isn't much use.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjM4MTUxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/395,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjQyODYwOA==,paho.mqtt.python,506428608,395,NA,paulborile,722094,Paul Stephen Borile,paul.borile@scientiamobile.com,NA,2019-06-27T16:58:25Z,2019-06-27T16:58:25Z,:-) yes ... forgive my clumsiness I'll post this in the right place.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNjQyODYwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396,paho.mqtt.python,462429254,396,Rpi - One core completely pegged when using client.loop_start(),raghur,516267,Raghu,,CLOSED,2019-06-30T17:46:59Z,2023-12-24T21:45:02Z,"As the title says, 1 core is completely pegged when using `client.loop_start()`
If I replace the code with the `loop()` inside a forever loop, CPU drops to 0.

Running this on a Rpi 2B+ 
```
# client.loop_start()

while 1:
  client.loop()
  try_read_data()
```

try_read_data does not have any sleep/delays. What gives?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzA1OTk5OA==,paho.mqtt.python,507059998,396,NA,ralight,79578,Roger Light,,NA,2019-06-30T19:15:30Z,2019-06-30T19:15:30Z,"If `try_read_data()` returns without any sleep or delays, then that part of your code will loop very quickly and cause the excess CPU usage you are seeing. When you include `client.loop()`, that introduces a delay into the loop as the call is waiting for network traffic.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzA1OTk5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzEwOTQyOA==,paho.mqtt.python,507109428,396,NA,raghur,516267,Raghu,,NA,2019-07-01T04:14:46Z,2019-07-01T04:14:46Z,":man_facepalming: That's there but that isn't the whole story. 
So I tried right now and added a 250ms, then 1s and 2s delay to `try_read_data` and even with the 2s delay, CPU is at 4.5% on a single core of the RPI.
Comparatively, with the the client.loop version CPU sits at 0.0! - so there's still a massive difference.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUwNzEwOTQyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/396,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYI2K,paho.mqtt.python,1868598666,396,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:45:02Z,2023-12-24T21:45:02Z,I'm going to close this to age/inactivity. If you are still seeing this with the latest version please reopen and provide simple runnable demo apps for both cases (want to confirm that the issue is with the threaded loop and not something else in your code),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYI2K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,paho.mqtt.python,464461877,397,Any insights about next release??,bh4r4th,20146174,Bharath Yadavally,bharath.yadavally@gmail.com,CLOSED,2019-07-05T05:00:37Z,2023-12-24T21:45:34Z,"Out of curiosity, I am asking this question. 
When can we expect the next release to be? What are the caveats in using the proxy configuration from latest project. 

However, I am able to access and try the latest paho-mqtt by doing `pip install git+https://github.com/eclipse/paho.mqtt.python.git`. Please let me know about the progress /limitations in relation to this proxy feature. 

It would be great to just include versioning in my `requirements.txt`. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI1NjQ2OA==,paho.mqtt.python,518256468,397,NA,antechrestos,5700545,Benjamin Einaudi,,NA,2019-08-05T14:25:28Z,2019-08-05T14:25:28Z,:+1: ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxODI1NjQ2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDMxNTY5OQ==,paho.mqtt.python,520315699,397,NA,antechrestos,5700545,Benjamin Einaudi,,NA,2019-08-12T06:55:06Z,2019-08-12T06:55:06Z,"For your issue, I put that line in my `requirements.txt`

`git+https://github.com/eclipse/paho.mqtt.python.git@a8b2b4d039571e9bd873dd550a1dddabc6d3cb61#egg=paho_mqtt`

And for my `Dockerfile` that does not have `git`: 

`pip install --no-cache-dir https://github.com/eclipse/paho.mqtt.python/zipball/a8b2b4d039571e9bd873dd550a1dddabc6d3cb61`


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUyMDMxNTY5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTc1ODc4MA==,paho.mqtt.python,541758780,397,NA,g-escoffre,42832850,,,NA,2019-10-14T15:48:34Z,2019-10-14T15:48:34Z,"Hi, I have exactly the same need. When can we expect a new release integration proxy management? Thanks ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTc1ODc4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/397,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYI3F,paho.mqtt.python,1868598725,397,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:45:34Z,2023-12-24T21:45:34Z,Closing due to age (and the fact there have been releases since the issue was raised).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYI3F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/398,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/398,paho.mqtt.python,469251061,398,can't get messages after loop_forever,Black3rror,33788464,Amin,,CLOSED,2019-07-17T14:31:28Z,2021-07-22T22:18:35Z,"System: ubuntu 16.04 server

### Problem explanation
I'm using this library to connect to a local mosquitto broker and subscribe to ""#"" and then `loop_forever`. it successfully connects to the broker and subscribes to the ""#"" and then gets the _retain_ messages and shows them by on_message method. then it publishes an _Online_ message and receives its own _Online_ message. then it should listen for new messages. sometimes it works perfect but **sometimes** it gets a problem.
the problem is: after showing retain messages and its own _Online_ message, it doesn't show new published messages. its noticeable that it doesn't disconnect from the broker.

### Solve the problem
by restarting the system I can solve the problem but it can happen again

### Python code
```
import paho.mqtt.client as mqtt

def on_message(client, userdata, message):
    print(""message received "", str(message.payload.decode(""utf-8"")))
    print(""message topic="", message.topic)
    print(""message qos="", message.qos)
    print(""message retain flag="", message.retain)
    print(""\n"")

	
client = mqtt.Client(""MQTT2DB"")
client.on_message = on_message
#client.username_pw_set(""username"", ""password"")
client.will_set(""MQTT2DB/status"", ""Offline"", 0, True)
client.connect(""localhost"")
client.subscribe(""#"")
client.publish(""MQTT2DB/status"", ""Online"", 0, True)
client.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/398/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/398,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0NTEwOA==,paho.mqtt.python,670545108,398,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:28:44Z,2020-08-07T14:28:44Z,"""Sometimes"" here probably means your network connection dropped. When the client reconnects automatically it will not re-subscribe and you have the default clean_session=True so your old session will be removed on the broker when you reconnect.

The easy way to handle this is to make your call to subscribe() in an on_connect callback.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0NTEwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/398,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xC87,paho.mqtt.python,885272379,398,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:18:34Z,2021-07-22T22:18:34Z,"I'm closing this issue because I think I've provided the answer. If not, please feel free to reopen and add more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xC87/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/399,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/399,paho.mqtt.python,469678371,399,How to fix EE certificate key too weak,lizhenwei,13379136,,,CLOSED,2019-07-18T09:57:37Z,2022-09-17T06:55:15Z,"HI, this is my code
```

class mqttClient():
    def __init__(self, host, token, port):
        self.host = host
        self.token = token
        self.port = port
        self.client = mqtt.Client()
        self.client.on_connect = self.__on_connect
        self.client.on_messsage = self.__on_message
        self.next_reading = time.time()
        self.client.username_pw_set(self.token)
        self.client.tls_set(ca_certs=""C:/Users/Administrator/Downloads/dadbc6ef-c7ab-4119-ab3e-a29753a207c9.cer"",tls_version=ssl.PROTOCOL_TLSv1_2)
        self.client.tls_insecure_set(True)
        self.client.connect(self.host, self.port, 60)
```


my consolelog said:
```
D:\lzwprogram\loadtest\venv\Scripts\python.exe D:/lzwprogram/loadtest/load/mqttClient.py
Traceback (most recent call last):
  File ""D:/lzwprogram/loadtest/load/mqttClient.py"", line 94, in <module>
    client = mqttClient(""192.168.0.243"", ""JqSnehoaXR6lPSiLZHNy"", 1883)
  File ""D:/lzwprogram/loadtest/load/mqttClient.py"", line 27, in __init__
    self.client.connect(self.host, self.port, 60)
  File ""D:\lzwprogram\loadtest\venv\lib\site-packages\paho\mqtt\client.py"", line 839, in connect
    return self.reconnect()
  File ""D:\lzwprogram\loadtest\venv\lib\site-packages\paho\mqtt\client.py"", line 994, in reconnect
    sock.do_handshake()
  File ""C:\Users\Administrator\AppData\Local\Programs\Python\Python37\lib\ssl.py"", line 1117, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: EE certificate key too weak (_ssl.c:1056)

Process finished with exit code 1
```
can any body tell me .how to fix EE certificate key too weak error","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/399/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/399,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjM1MDg0Ng==,paho.mqtt.python,516350846,399,NA,lizhenwei,13379136,,,NA,2019-07-30T09:53:32Z,2019-07-30T09:53:32Z,"make my server  *.jks file from 512bit to 1024bit ,this error disappear","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUxNjM1MDg0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/399,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KgbhS,paho.mqtt.python,1250015314,399,NA,resphinas,69687075,resphina,,NA,2022-09-17T06:55:15Z,2022-09-17T06:55:15Z,thanks for your sharing~,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KgbhS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,paho.mqtt.python,475847230,400,Duplicate message at MQTT broker,ttruongatl,5000972,ttruongatl,thanh.truong.tech@gmail.com,CLOSED,2019-08-01T19:20:04Z,2023-12-24T21:41:31Z,"Hi,
I implemented Paho client in Linux. I recognize that if there are more than 20 messages in Paho client queue than we receive duplicate messages in our MQTT broker. 

the issue appears when I'm using QOS=1 and a depth of several thousand messages and it went away when I tried limiting queue depth in paho to 20 (20 was picked arbitrarily)

Is anybody facing the same issue?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNTgwMTc5NA==,paho.mqtt.python,535801794,400,NA,MartinRiddar,14327782,M. Riddar,markstrom.martin@gmail.com,NA,2019-09-27T06:08:19Z,2019-09-27T06:08:19Z,"QoS=1 is specified as ""at least once delivery"", meaning that you are guaranteed that the message will reach the receiver (in this case the broker) at least once. This is guaranteed by having the receiver sending a PUBACK - acknowledging that it has received the message. If the sender does not receive a PUBACK within a specified amount of time it will send the message again and that is probably what is happening in your case.
If you need each message to go through exactly once you need to use QoS=2, the HiveMQ blog has some good reading on the details https://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels/.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNTgwMTc5NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjA5NzUyMg==,paho.mqtt.python,536097522,400,NA,ttruongatl,5000972,ttruongatl,thanh.truong.tech@gmail.com,NA,2019-09-27T21:09:53Z,2019-09-27T21:09:53Z,"Thanks, @MartinRiddar. Your explanation makes sense to me. There is a thing that makes me a surprise that is once I changed `limiting queue depth in paho to 20` and `retry connection from 20 second as default to 120 seconds`, my issue was gone. Is it a good solution in the case I still keep QOS=1?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjA5NzUyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE3OTk2MA==,paho.mqtt.python,536179960,400,NA,MartinRiddar,14327782,M. Riddar,markstrom.martin@gmail.com,NA,2019-09-28T11:37:00Z,2019-09-28T11:37:00Z,"That I'm afraid is completely up to your use case so can't tell you if it is good or bad.
You didn't say what you changed the queue depth to but I'm guessing that you increased it or removed the limit completely. Just make sure that you can't end up in a situation where your queue consumes all of your RAM :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzNjE3OTk2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODY0NzEwNA==,paho.mqtt.python,538647104,400,NA,ttruongatl,5000972,ttruongatl,thanh.truong.tech@gmail.com,NA,2019-10-05T12:50:27Z,2019-10-05T12:50:27Z,"I tried limiting queue depth in paho to 20 actually.

> the issue appears when I'm using QOS=1 and a depth of several thousand messages and it went away when I tried limiting queue depth in paho to 20 (20 was picked arbitrarily)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzODY0NzEwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/400,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIvA,paho.mqtt.python,1868598208,400,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:41:31Z,2023-12-24T21:41:31Z,Closing this as it appears a solution was found.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIvA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/401,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/401,paho.mqtt.python,476428857,401,will_set send message delay about 90s when the network is manually disconnected,moluzhui,44611938,,,CLOSED,2019-08-03T08:21:14Z,2021-07-22T22:17:36Z,"I use will_set() API to monitor device whether the fault which includes device offline or fault interruption.

I coding a test,  it cannot respond in time when the network is `manually disconnected`, the delay is about `90s`, but it can respond in time when I press `ctrl+c` to abort the program.

Part of the test code is as follows
```
# coding=utf8  

import paho.mqtt.client as mqtt
import time  
  
def on_connect(client, userdata, flags, rc):  
    print(""Connected with result code ""+str(rc))  
  
client = mqtt.Client()  
client.on_connect = on_connect  
client.will_set('test/rensanning/will', 'Last will message', 2, False)  
client.connect(cloud_mqtt_broker, cloud_mqtt_port)  
  
client.loop_start()  

while 1:
    msg = ""test LWT "" +time.ctime()  
    client.publish(""test/rensanning/time"", msg, 2)  
    print(""message published "",msg)  
    time.sleep(5)
#client.disconnect()  
  
# client.loop_stop()  
print(""done"")
```

I wrote the code to listen for all information on the MQTT port. the result is showned as follows
ctrl+c abort the program
```
15:58:59
message received  test LWT Sat Aug  3 15:58:59 2019
message topic= test/rensanning/time
message qos= 2
message retain flag= 0
-------------------------------------------------
15:59:03
message received  Last will message
message topic= test/rensanning/will
message qos= 2
message retain flag= 0
```

I manually disconnect network by close network
`first`
```
15:59:50
message received  test LWT Sat Aug  3 15:59:50 2019
message topic= test/rensanning/time
message qos= 2
message retain flag= 0
-------------------------------------------------
16:01:20
message received  Last will message
message topic= test/rensanning/will
message qos= 2
message retain flag= 0
```
`second`
```
16:07:21
message received  test LWT Sat Aug  3 16:07:16 2019
message topic= test/rensanning/time
message qos= 2
message retain flag= 0
-------------------------------------------------
16:08:50
message received  Last will message
message topic= test/rensanning/will
message qos= 2
message retain flag= 0
```
`third`
```
16:14:36
message received  test LWT Sat Aug  3 16:14:36 2019
message topic= test/rensanning/time
message qos= 2
message retain flag= 0
-----------------------------------------------
16:16:06
message received  Last will message
message topic= test/rensanning/will
message qos= 2
message retain flag= 0
```
what causes this high latency and is so stable around 90s? I am using the ubuntu virtual machine to send mqtt messages to the ubuntu cloud server.

I would very appreciate it if you guys can suggest me some advice","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/401/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/401,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0NDIxOA==,paho.mqtt.python,670544218,401,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:26:45Z,2020-08-07T14:26:45Z,"This is simply a fact of how networking works. If you press Ctrl-C then information that the connection is closing makes its way to the broker. If you pull the network cable, the broker has to wait for the keepalive timeout to detect that the client has disconnected. You are using the default keepalive=60 seconds, and the broker waits 1.5x that value, hence 90 seconds.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0NDIxOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/401,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xC2k,paho.mqtt.python,885271972,401,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:17:36Z,2021-07-22T22:17:36Z,"Closing, because I don't think there is anything the library can do here.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xC2k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/402,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/402,paho.mqtt.python,476891161,402,proxy should be configurable from single/multiple operations,antechrestos,5700545,Benjamin Einaudi,,CLOSED,2019-08-05T14:28:10Z,2019-09-24T07:23:37Z,"With the great work of #315 , it would be great to have the possibility to specify a proxy while calling `single`or `multiple` operation","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/402/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/404,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/404,paho.mqtt.python,479071863,404,subscribe simple freeze when auth is wrong,Mendes11,7904704,Rafael Mendes Pacini Bachiega,rafaelmpb11@hotmail.com,CLOSED,2019-08-09T16:33:56Z,2024-01-08T00:51:54Z,"When I try to subscribe to a specific topic using single, if my auth configuration is wrong the code freezes and never return or throw any error. I think it just keeps trying.

Is there any way to configure a timeout? I went to single and connect methods docs and saw that there isn't an option for timeout.

I detected this problem by configuring mosquitto with allow_anonymous = false and then tried to connect using auth = None.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/404/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/404,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmur,paho.mqtt.python,1880255403,404,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:51:53Z,2024-01-08T00:51:53Z,"I believe that #470 was a duplicate of this issue and, in that issue, @sparky8512 reported:

>I tracked it down to an exception being swallowed from the on_connect handler publish.multiple (and therefor publish.single) uses. I believe it got fixed by https://github.com/eclipse/paho.mqtt.python/commit/88688d85d3d6307a3da11c97d77dc1e29b52453a. After updating to paho-mqtt-1.5.1, I no longer get the blocking forever behavior.

Hopefully that resolves the main focus of this issue; the other portion is the need for a timeout and I'll make issue #655 the primary issue for that.

As a result I'm going to close this issue (given the number of years passed!); if you retest and the issue still exists then please do reopen this (and apologies for the lack of response to this issue!).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmur/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/405,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/405,paho.mqtt.python,482586159,405,Does paho client support ipv6? Both as local adapter and client host with ipv6 literals,bh4r4th,20146174,Bharath Yadavally,bharath.yadavally@gmail.com,CLOSED,2019-08-20T00:21:04Z,2021-07-22T10:43:57Z,"I am curious to know whether this paho mqtt client supports ipv6 adaptor and ipv6 based routing to connect. 
At the moment I have created a class wrapper and able to initialise, connect, subscribe, set will, publish, proxy config and disconnect. 
Last 2 things I wanted to try is:
1. If my adapter is configured with ipv6 instead of ipv4
2. Can i connect to client specified with ipv6 literals.

Any insights or info about how to achieve these scenarios would be grateful. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/405/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/405,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vT3V,paho.mqtt.python,884817365,405,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:43:57Z,2021-07-22T10:43:57Z,"Yes, it supports IPv6.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vT3V/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406,paho.mqtt.python,484837385,406,OSError(Code 24) and Attribute Error,feyzikesim,36535648,Feyzi Kesim,,CLOSED,2019-08-24T16:02:46Z,2019-12-16T13:02:33Z,"Hi all,

I am using Raspberry Pi for my project that reads and sends multiple sensor datas over MQTT. About 4-5 months ago, I built a system like this;
```
## Temperature Sensor
def readSensor():
xxxxxxx

def send2Cloud():
xxxxxxx

readSensor()
send2Cloud()

```
I was running this kind of scripts in service files and restarting services within the periods I want. So simple. Devices had worked for months like this without a problem. But the CPU usage was so high, average 70-80%. So I decided to build a thread based system. Now I have one read and one send threads for each of the sensors. Once device started to work, everything is fine for about 7-8 hours but after I got these 2 errors for each sending threads.

```
Aug 23 04:02:23 raspberrypi python3[1153]:   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 51
Aug 23 04:02:23 raspberrypi python3[1153]:   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 25
Aug 23 04:02:23 raspberrypi python3[1153]:   File ""/usr/lib/python3.7/socket.py"", line 212, in accept                   
Aug 23 04:02:23 raspberrypi python3[1153]: OSError: [Errno 24] Too many open files  


Aug 23 04:02:23 raspberrypi python3[1153]: Exception ignored in: <function Client.__del__ at 0xb5e3ae88>                
Aug 23 04:02:23 raspberrypi python3[1153]: Traceback (most recent call last):                                           Aug 23 04:02:23 raspberrypi python3[1153]:   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 60
Aug 23 04:02:23 raspberrypi python3[1153]:     self._reset_sockets()                                                    Aug 23 04:02:23 raspberrypi python3[1153]:   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 64
Aug 23 04:02:23 raspberrypi python3[1153]:     if self._sockpairR:                                                      Aug 23 04:02:23 raspberrypi python3[1153]: AttributeError: 'Client' object has no attribute '_sockpairR' 
```


I could not find a solution on web and hope you can help me to handle this problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjcwOTM0Mw==,paho.mqtt.python,546709343,406,NA,PierreF,359833,Pierre Fersing,,NA,2019-10-27T16:12:47Z,2019-10-27T16:12:47Z,"Hello,

are you opening one connection per thread in your ""send2Cloud"" ? If yes are you opening more than ~340 connections ?
There is a known issue that paho-mqtt does not support more than ~340 connection are the same time.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjcwOTM0Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzU4MTQ3Ng==,paho.mqtt.python,553581476,406,NA,Cediddi,2720608,Umut Karcı,cediddi@gmail.com,NA,2019-11-13T20:12:40Z,2019-11-13T20:12:40Z,~340 connection limit is an interesting limitation. I think this should be in Known Limitations part of the readme.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzU4MTQ3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/406,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NjA1MTU2Mw==,paho.mqtt.python,566051563,406,NA,feyzikesim,36535648,Feyzi Kesim,,NA,2019-12-16T13:02:33Z,2019-12-16T13:02:33Z,"> Hello,
> 
> are you opening one connection per thread in your ""send2Cloud"" ? If yes are you opening more than ~340 connections ?
> There is a known issue that paho-mqtt does not support more than ~340 connection are the same time.

I was disconnecting after every publish, so there was no way to have +340 connections at the same time. Anyway, I changed nothing but problem solved somehow. I do not get this error anymore. Closing the issue","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NjA1MTU2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/408,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/408,paho.mqtt.python,489866702,408,On_message for Mac(Mojave and High Sierra) not working,kwalkerk,488547,,,CLOSED,2019-09-05T16:18:39Z,2024-01-07T22:37:34Z,"I have python 2.7 code which subscribes to a topic and then does some processing based upon the message received.  This exact code runs fine on a Raspberry Pi, but when I run it on my Mac the program does not receive any of the messages.  The code on the two machines is exactly the same.

Any ideas?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/408/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/408,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTM2OTYxNg==,paho.mqtt.python,539369616,408,NA,quanphuong,51616546,Quan Phuong,,NA,2019-10-08T06:56:40Z,2019-10-08T06:56:40Z,"maybe it's my problem, too. I create a producer on my Macbook, and `on_message` function didn't show anything. I use python 3.7 at all.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTM2OTYxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/408,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEZZr,paho.mqtt.python,1880200811,408,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:37:34Z,2024-01-07T22:37:34Z,"Closing due to age (sorry no one got back to you!), inactivity and the fact that 2.7 is no longer supported.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEZZr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409,paho.mqtt.python,493903907,409,How can I set PEM password?,mofywong,32129866,,,CLOSED,2019-09-16T08:10:18Z,2021-10-21T09:30:57Z,"Hi,
     I use PEM file with password. In C language，It's provide a function callback to set the pem password (int tls_set(const char *cafile, const char *capath=NULL, const char *certfile=NULL, const char *keyfile=NULL, int (*pw_callback)(char *buf, int size, int rwflag, void *userdata)=NULL);)with libmosquitto. But I didn't find any function like that in paho.mqtt.python.Can it support that? If yes, how can I do?
Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2OTk5NTg3OQ==,paho.mqtt.python,569995879,409,NA,velosol,37089357,,,NA,2019-12-31T21:49:40Z,2019-12-31T21:49:40Z,"It doesn't seem to support it.

Per the docs at [pypi](https://pypi.org/project/paho-mqtt/#constructor-reinitialise) under `certfile, keyfile`:
>Note that if either of these files in encrypted and needs a password to decrypt it, Python will ask for the password at the command line. It is not currently possible to define a callback to provide the password.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2OTk5NTg3OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDcwODYwOA==,paho.mqtt.python,860708608,409,NA,tzahari,6674098,Thomas Zahari,,NA,2021-06-14T14:00:34Z,2021-06-14T14:00:34Z,"Hi, it seems that the context which is used by loading the certificates, has an optional parameter for the password:
client.py
```python
        context = ssl.SSLContext(tls_version)

        # Configure context
        if certfile is not None:
            context.load_cert_chain(certfile, keyfile)
```
And in the SSLContext:
https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain
New parameter password in version 3.3
```
    def load_cert_chain(
        self, certfile: StrPath, keyfile: Optional[StrPath] = ..., password: Optional[_PasswordType] = ...
    ) -> None: ...
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDcwODYwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/409,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDc4NzEzMw==,paho.mqtt.python,860787133,409,NA,tzahari,6674098,Thomas Zahari,,NA,2021-06-14T15:41:16Z,2021-06-14T15:41:16Z,I created a pull request #576 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDc4NzEzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/410,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/410,paho.mqtt.python,496334081,410,Undefined variable sock in client.reconnect,preoteasa,6583978,,,CLOSED,2019-09-20T12:49:32Z,2019-10-27T16:55:36Z,"The sock variable in client.reconnect is defined by:

        try:
            sock = self._create_socket_connection()
        except socket.error as err:
            if err.errno != errno.EINPROGRESS and err.errno != errno.EWOULDBLOCK and err.errno != EAGAIN:
                raise
However, if the _create_socket_connection rises an exception and the if condition is false, then the variable sock remains undefined, an it is used later in

self._sock = sock

This happens for example if one tries to connect to a mqtt host that is outside the local network.

In general, in case of network errors, it seems that the library rises exceptions from the background thread. This does not seem appropriate because it is not easy to treat those exceptions.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/410/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/415,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/415,paho.mqtt.python,499634649,415,rc,Yoendric,39169537,Yoendric Oropesa Mendoza,,CLOSED,2019-09-27T20:25:51Z,2019-10-27T15:40:25Z,,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/415/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/422,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/422,paho.mqtt.python,503341937,422,Client Local Persistence in the Python library,surashiva,10557080,Shivaram Subramanian,,CLOSED,2019-10-07T09:45:22Z,2023-12-07T20:32:04Z,"Hi,

I am trying to use the MQTT python client and there is a use case where I need a local persistence of the MQTT messages when there is a possibility that the broker connection is lost so messages are buffered but the client could be restarted too. In a hard reboot the client loses the messages which are offline buffered, i see the file persistence implemented in the Java library but i dont see any corresponding hook in the python library. Any idea when client persistence will be implemented on the python library? If not is there any pointer of how one could do it in the application side?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/422/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/422,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D8y-m,paho.mqtt.python,1140010918,422,NA,carlos00027,44844428,Carlos Sanchez Acero,,NA,2022-05-27T20:29:51Z,2022-05-27T20:29:51Z,+1,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D8y-m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/422,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCMEa,paho.mqtt.python,1846067482,422,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:31:53Z,2023-12-07T20:31:53Z,I'm going to close this as a duplicate (#223). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCMEa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,paho.mqtt.python,503895301,424,problem with sending MQTT PUBLISH when using multiprocessing,gromajus,4416385,,,OPEN,2019-10-08T08:14:19Z,2024-01-09T22:29:42Z,"Hi!
In my code I am able to send Publish from the main thread, but when I use multiprocessing, the logger shows that the message was published, but the broker doesn't get any message.
The publish result code is zero.

Is it wanted behaviour? Or I am doing something wrong?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MzA0MjMyOA==,paho.mqtt.python,563042328,424,NA,JarbasAl,33701864,JarbasAI,,NA,2019-12-09T03:01:05Z,2019-12-09T03:01:05Z,"i am having same issue, workaround was to create a new client before every publish, less than ideal

at very least we need an error code, this was painful to debug","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MzA0MjMyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNzYyODI4Mg==,paho.mqtt.python,627628282,424,NA,victorct-pronto,56981448,,,NA,2020-05-12T22:17:18Z,2020-05-12T22:17:18Z,"I'm running into this issue today, this affects almost all of the apps, that do not initialize a connection before every publish, apps deployed on gunicorn, etc. Libraries such as the SDKs for AWS.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNzYyODI4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDk1MjM1MA==,paho.mqtt.python,670952350,424,NA,mxmaxime,10252674,Maxime moreau,contact@maxime-moreau.fr,NA,2020-08-08T17:15:22Z,2020-08-08T17:15:22Z,"Just got the same issue here... I lost so many hours, now every thread is creating a new client","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDk1MjM1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3ODI0NDAwOA==,paho.mqtt.python,678244008,424,NA,schneeemensch,44439378,,,NA,2020-08-21T11:29:59Z,2020-08-21T11:29:59Z,"I have spent quite some hours into this problem as well.

It seems like calling publish() is not 100% thread safe.
Our problem was that we called publish() from on_message callbacks and also from other threads outside.

If these publish() calls overlap both calls can hang while trying to acquire a lock. The outer thread is usually trying to acquire the _callback_mutex and one from the callback is stuck on the _out_message_mutex.

Since it was hard for me to move the publish() call out of the callback I am now creating two clients.
One receives the messages in the callback and publishes messages through the other client.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3ODI0NDAwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4NTY1NQ==,paho.mqtt.python,730585655,424,NA,guiklimek,72322850,Guillaume Klimek,,NA,2020-11-19T19:23:21Z,2020-11-19T19:23:21Z,"I am experiencing the same issue and I have found the same workaround as @schneeemensch (explained here https://github.com/eclipse/paho.mqtt.python/issues/527)

Thank you to be part of my comprehension and solution :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4NTY1NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2OTA3MjQ5MA==,paho.mqtt.python,869072490,424,NA,greyltc,16778174,M. Greyson Christoforo,grey@christoforo.net,NA,2021-06-26T23:12:49Z,2021-06-26T23:12:49Z,This is definitely still an issue. My workaround has been to put what I wish to publish in to a `multiprocessing.Queqe()` and publish it from outside the process.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2OTA3MjQ5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400NJw,paho.mqtt.python,886100592,424,NA,dachshund-digital,1486285,,,NA,2021-07-24T19:22:49Z,2021-07-24T19:22:49Z,"Yup, same issue I tripped over today!  Publish fails unless main thread calls it for me as well.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400NJw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400Qkt,paho.mqtt.python,886114605,424,NA,ralight,79578,Roger Light,,NA,2021-07-24T21:42:42Z,2021-07-24T21:42:42Z,@dachshund-digital Could you try with the current `1.6.x` branch? There have been a log of changes related to threading there.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs400Qkt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41lC1A,paho.mqtt.python,898903360,424,NA,dachshund-digital,1486285,,,NA,2021-08-14T14:46:24Z,2021-08-14T14:46:24Z,"Yes, I will try... sorry for the late reply... did not happen to see this request until now.  Will report back in a few days when I can get the testing done.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41lC1A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41zu1p,paho.mqtt.python,902753641,424,NA,dachshund-digital,1486285,,,NA,2021-08-20T14:56:39Z,2021-08-20T14:56:39Z,"I tried to git clone... but only got version 1.5.1?  Not very familiar with git, so how do I pull a specific branch?  I navigated to the 1.6.1 branch, get the code link, and it says 1.6.x page, but when I do the actual git clone with the so-called 1.6.x link, it pulls down 1.5.1 again, when I install, tells me 1.5.1 is installed already.

Ok, I think this is the right way to clone a specific branch...
    git clone -b 1.6.x  https://github.com/eclipse/paho.mqtt.python.git

Is the above right?  Appears to have worked.  It pulled some files, but when I run the python install, I still end up with 1.5.1

So I tried...
   git clone -b 1.6.x --single-branch https://github.com/eclipse/paho.mqtt.python.git

This how show 1.6.x branch as tracked... But this still shows 1.5.1 when I run the python install setup script.  So, not sure how to get 1.6.x correctly, or if I got it correctly why the setup script reports 1.5.1 still?

My local believes it is 1.6.x...
    git checkout 1.6.x
    Already on '1.6.x'
    Your branch is up to date with 'origin/1.6.x'.

But... python3 setup,py install in the resulting directory, reports 1.5.1 installed.

    Installed /usr/local/lib/python3.7/dist-packages/paho_mqtt-1.5.1-py3.7.egg
    Processing dependencies for paho-mqtt==1.5.1
    Finished processing dependencies for paho-mqtt==1.5.1

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41zu1p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410Ivh,paho.mqtt.python,902859745,424,NA,ralight,79578,Roger Light,,NA,2021-08-20T17:54:37Z,2021-08-20T17:54:37Z,"@dachshund-digital you were doing everything right, but the version number hadn't been updated in the in-development branch. Sorry for the confusion. I actually did that yesterday by chance, but hadn't pushed it. If you now do `git checkout 1.6.x ; git pull` you should have the correct code and be certain about it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410Ivh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410Y24,paho.mqtt.python,902925752,424,NA,dachshund-digital,1486285,,,NA,2021-08-20T20:02:41Z,2021-08-20T20:02:41Z,"LOL!  What the definition of insanity... Doing the same thing again, and expecting a different result... I was starting to think I was crazy!  OK, so next couple of days should be able to get some testing done.  Will report back then.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410Y24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410eOZ,paho.mqtt.python,902947737,424,NA,dachshund-digital,1486285,,,NA,2021-08-20T20:45:44Z,2021-08-20T20:45:44Z,"As  quick test, I setup multiprocessing processes for the subscribe queue dequeue, and publish dequeue in my project, which handle all the subscribe messages received by the client, and then publishes any results via the client.  These two routines work fine when invoked by the main thread.  But using separate processes to service the same multiprocessing queues via processes, the subscribe logic works fine.  But every publish attempted by the client when it receives a publish request from the dedicated process, returns result code 4.  This is the same behavior with 1.5.x now on 1.6.x.

Since my project is quite complex, I am going to create a simple script and test again.  If that also fails, will publish here applicable details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410eOZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410fDb,paho.mqtt.python,902951131,424,NA,dachshund-digital,1486285,,,NA,2021-08-20T20:53:01Z,2021-08-20T20:53:01Z,"A bit more information... my code does not generate any exceptions or errors, no trace back, etc.  The publish request is accepted, the topic and payload are valid, identical to testing with main thread logic, but as noted I always get result code 4, and broker nor and subscribers (say Node Red) receive anything.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410fDb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410iks,paho.mqtt.python,902965548,424,NA,ralight,79578,Roger Light,,NA,2021-08-20T21:23:51Z,2021-08-20T21:23:51Z,"Thanks, a small(ish) example would be a big help.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410iks/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411Lyy,paho.mqtt.python,903134386,424,NA,dachshund-digital,1486285,,,NA,2021-08-21T15:37:32Z,2021-08-21T15:37:32Z,"Yeah, working on it now... but I still have something odd... I queried the version... and seems my script is still using 1.5.0, see issue [https://github.com/eclipse/paho.mqtt.python/issues/596](url).  So I was not really testing 1.6.x as expected in my comment above.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411Lyy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411wDQ,paho.mqtt.python,903282896,424,NA,dachshund-digital,1486285,,,NA,2021-08-22T15:07:21Z,2021-08-22T15:07:21Z,"Ok, got virtual environment setup, clean copy of Pi OS as well, just because I could.  Updated python to 3.9.6 over Pi OS default of 3.7.3.  Did explicit git clone for branch 1.6.x.  When I run my test script I get the following on the attempt to publish:

python3.9 __Test.py
Python Version 3.9.6
Paho MQTT Module Version 1.6.0
OnSubscriber Alive
Client <paho.mqtt.client.Client object at 0xb64d7ca0>, Is Connect? False
Wait
OnPublisher Alive
Connect, Client <paho.mqtt.client.Client object at 0xb64d7ca0>, Is Connect? True, Data 'None', Flags '{'session present': 0}', Result '0'
Subscribe, Is Subscribe? True, Topic 'command/test', Id 1, Result 0
Subscribe, Client '<paho.mqtt.client.Client object at 0xb64d7ca0>', Data 'None', Id '1', Quality '(0,)'
Client <paho.mqtt.client.Client object at 0xb64d7ca0>, Is Connect? True
Subscriber, Message '{'topic': 'command/test', 'payload': '1629644326960'}', Client '<paho.mqtt.client.Client object at 0xb64d7ca0>', Topic 'command/test', Payload '1629644326960', Queue 0, Accumulator 1
Test, Client <paho.mqtt.client.Client object at 0xb64d7ca0>, Instance 1, Topic 'command/test', Payload '1629644326960'
Publisher, Message '{'topic': 'command/test', 'payload': {'Instance': 1, 'Data': '1629644326960'}}', Topic 'status/test', Payload '{'Instance': 1, 'Data': '1629644326960'}', Queue 1, Accumulator 1
Subscriber, Message '{'topic': 'command/test', 'payload': '1629644330582'}', Client '<paho.mqtt.client.Client object at 0xb64d7ca0>', Topic 'command/test', Payload '1629644330582', Queue 0, Accumulator 2
Test, Client <paho.mqtt.client.Client object at 0xb64d7ca0>, Instance 2, Topic 'command/test', Payload '1629644330582'
Publish, Result (4, 1)
Exception: Message publish failed: The client is not currently connected. (<class 'RuntimeError'>)
Traceback (most recent call last):
  File ""/home/pi/noderedlistener/NodeRedListener/__Test.py"", line 326, in OnPublisher
    thePublishOrNot=theResult.is_published()
  File ""/home/pi/noderedlistener/lib/python3.9/site-packages/paho_mqtt-1.6.0-py3.9.egg/paho/mqtt/client.py"", line 360, in is_published
    raise RuntimeError('Message publish failed: %s' % (error_string(self.rc)))
RuntimeError: Message publish failed: The client is not currently connected.
OnPublisher Not Alive

Tne 'OnPublisher' is the multiprocessing process that attempts the actual publish.  The OnSubscriber does the processing of messages the client receiveds, so my on_message callback enqueues message to a subclass subscribe queue under the client (global) object.  

So the test logic is MQ client -> on_message -> SubscribeQueue -> OnSubscriber dequeues message, calls OnTest, and OnTest triggers a publish request.  Thus OnTest -> PublishQueue -> OnPublisher -> client publish.   At which point result is 4, which under 1.6 provides a more descriptive message, that no connect exists.

The actual client object is global, the connection is made via the main thread, and OnSubscriber has not issue with this as a separate process.  But OnPublisher as a separate process, when it calls the client publish method, that method apparently cannot see the active connection. 

So, why does OnPublisher process, i.e. client object not see the actual connection?  Am I breaking some type namespace or scope boundary?  OnPublisher running as method under main thread, works, but not a process?

The OnSubscriber explicitly accesses the client global object, because I am subclassing the separate queues (one for subscribe and one for publish) under the client.  Thus my expectation is that OnPublisher can do the same, and it does, it can access the subclassed queue without issue.  The failure point is at the actual publish call of the client.

I suspect if I open a (different) separate connection under the OnPublisher process, maybe with client publish.single(), that this connection might be recognized and used, so publish does not fail.  Maybe that is the next test.  But, I really would like to know why the client publish logic fails to use the global client object connection that does exist.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411wDQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411xHf,paho.mqtt.python,903287263,424,NA,dachshund-digital,1486285,,,NA,2021-08-22T15:36:16Z,2021-08-22T15:36:16Z,"Attached is my script.
[__Test.zip](https://github.com/eclipse/paho.mqtt.python/files/7027690/__Test.zip)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411xHf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411xwc,paho.mqtt.python,903289884,424,NA,dachshund-digital,1486285,,,NA,2021-08-22T15:55:26Z,2021-08-22T15:55:26Z,"FYI... using publish.single(), works.  So my key question stands, why doe the client publish() method fail to see the existing connection established and used by the client for subscribes.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411xwc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4117TZ,paho.mqtt.python,903328985,424,NA,dachshund-digital,1486285,,,NA,2021-08-22T20:54:48Z,2021-08-22T20:54:48Z,"A bit more... I tweaked the code to report more information... such as calling is_connected() just before the attempt to publish, but also, as I pull an subscribe message.  Since the subscribe queue handler and the publish queue handler are both separate processes, calls to the client is_publish() method, both report false from the separate processes, but reports true from the main process, where the original connect was established.  What is very odd is that the subscribe messages are received and my on_message callback fires, but per the documentation it is not under scope of the main thread.  So I am left with the impression that the paho client can't handle, at least the way I have my code designed, cross process scoping.  Because the subscribe handler never actually interacts with the client object connection, no issues.  But since the publish method relies on the establish connection, it fails.

Python Version 3.9.6
Paho MQTT Module Version 1.6.0
OnSubscriber Alive
OnSubcribe Idle
OnPublisher Alive
OnPublish Idle
Wait
**OnConnect, Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? True**, Data 'None', Flags '{'session present': 0}', Result '0'
Subscribe, Is Subscribe? True, Topic 'command/test', Id 1, Result 0
OnSubscribe, Client '<paho.mqtt.client.Client object at 0xb650cf70>', Data 'None', Id '1', Quality '(0,)'
Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? True
Wait, Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? True
**OnSubscriber, Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? False**
OnSubscriber, Message '{'topic': 'command/test', 'payload': '1629665379959'}', Client '<paho.mqtt.client.Client object at 0xb650cf70>', Topic 'command/test', Payload '1629665379959', Queue 0, Accumulator 1
OnTest, Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? False, Instance 1, Topic 'command/test', Payload '1629665379959'
OnSubcribe Idle
**OnPublisher, Client <paho.mqtt.client.Client object at 0xb650cf70>, Is Connect? False**
OnPublisher, Message '{'topic': 'command/test', 'payload': {'Instance': 1, 'Data': '1629665379959'}}', Topic 'status/test', Payload '{'Instance': 1, 'Data': '1629665379959'}', Queue 0, Accumulator 1
OnPublish, Result (4, 1)
OnException: Message publish failed: The client is not currently connected. (<class 'RuntimeError'>)
Traceback (most recent call last):
  File ""/home/pi/noderedlistener/NodeRedListener/__Test.py"", line 355, in OnPublisher
    thePublishOrNot=theResult.is_published()
  File ""/home/pi/noderedlistener/lib/python3.9/site-packages/paho_mqtt-1.6.0-py3.9.egg/paho/mqtt/client.py"", line 360, in is_published
    raise RuntimeError('Message publish failed: %s' % (error_string(self.rc)))
RuntimeError: Message publish failed: The client is not currently connected.

I can't use a lock and value methodology for the client, since it can't be serialized or pickled, because the thread under the client can't be.  For the same reason, I can't use a multiprocessing manager object per my understanding.  I did try these methods but the client object trips up the serialization or pickling of object, that a thread object can't be pickled.

Seems to keep the subscribe handler as a separate process, and publish handler as a separate process, I have to create connections within the scope of each respective process.  Or... I have to use true threads not multiprocessing processes, true threads would exist in the same namespace as the client of course.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4117TZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BxAP,paho.mqtt.python,906432527,424,NA,dachshund-digital,1486285,,,NA,2021-08-26T13:50:49Z,2021-08-26T13:50:49Z,Bump?  No one?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BxAP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5P7KwK,paho.mqtt.python,1340910602,424,NA,sakoarts,1674450,Sako Arts,,NA,2022-12-07T12:41:14Z,2022-12-07T12:41:14Z,"Weird that this still isn't fixed, I'm trying to publish a message in a Flask GET request and it (almost) never works because these request handlers are obviously also in separate threads. It does not seem like a weird use case to me, but because of this bug, it does not work. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5P7KwK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGqdz,paho.mqtt.python,1880794995,424,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T11:07:14Z,2024-01-08T11:07:14Z,Tagging as an enhancement as its going to take some time to sort this out (if anyone is willing to help please yell out). I can duplicate the issue with the code provided by @dachshund-digital but suspect this is a design issue (e.g. the library uses `thread.lock` not `multiprocessing.lock` etc) but this is well above my python knowledge!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGqdz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/424,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wShPJ,paho.mqtt.python,1883902921,424,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-09T22:29:41Z,2024-01-09T22:29:41Z,"I doubt sharing a Client() over multiple process is something we can and want to support. The paho Client() can not be made picklable since it contains a socket.

> Picklability
>   Ensure that the arguments to the methods of proxies are picklable.
-- https://docs.python.org/3/library/multiprocessing.html#programming-guidelines

By design, multiprocessing use multiple process which do not share object between them (unless special multiprocessing stuff is used). That means `theClient` can NOT the same between process, from there I don't see how to make this working.

You will have to make you own way to communicate across your processes and have the paho client in a single process.

Comment that talk only about thread are not the same issue at this one, since the issue is sharing between multiple processes. multithreading is supported.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wShPJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,paho.mqtt.python,504240440,426,socket.create_connection needs a configurable timeout,dean-82,56320678,,,CLOSED,2019-10-08T19:44:14Z,2024-01-07T23:33:38Z,"I am using this for an embedded project where the broker can disappear and come back due to sleep processing.  When it comes back up I traced back a large reconnection delay to the fact that the call to socket.create_connection is not provided a timeout thereby using the default which can be rather large (observed 20 seconds on Windows 10 with Python 3.7.3).  I want to be able to configure my timeout so it is passed into the call to speed up reconnect attempts.  While I can use socket.setdefaulttimeout(), that is a global value that will affect other socket connections as well.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTg2ODk1MA==,paho.mqtt.python,539868950,426,NA,ruoshui1314,18414978,,,NA,2019-10-09T07:07:27Z,2019-10-09T07:07:27Z,Maybe #425 is what you want.But waiting for merge.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTg2ODk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTk5NTY3Mw==,paho.mqtt.python,539995673,426,NA,dean-82,56320678,,,NA,2019-10-09T13:15:29Z,2019-10-09T13:15:29Z,"That is close although I'm not sure that you want to use the keep alive time for that timeout.  Basically, as the keep alive time could be set to a large value, I think that it would be better to have a separate settable timeout value for the initial connection attempt that could be much smaller than the keep alive.  You could initialize it to None so that by default, python will use it's default.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDUzOTk5NTY3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTMwMjM4NA==,paho.mqtt.python,541302384,426,NA,ruoshui1314,18414978,,,NA,2019-10-12T08:42:11Z,2019-10-12T08:42:11Z,"Yeah, I read the source code of paho.mqtt.c about connecting timeout.The default timeout is 10 seconds and the library does not support interface or attribute to set it.
I agree that we may need to separate timeout and keep alive. Whether the library for python should support another parameter for timeout or just give default value, I do not know which is better.
For your issue, maybe support set timeout is better.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTMwMjM4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTQ4Mzk0NQ==,paho.mqtt.python,541483945,426,NA,ruoshui1314,18414978,,,NA,2019-10-14T02:13:08Z,2019-10-14T02:13:08Z,"I read the source code and find that socket timeout is set to the value of keep alive when connecting to the websocket server or using ssl protocal.What about stay the same? Another suggestion is that update all the socket timeout value to another variable as we discussed before.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTQ4Mzk0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTY3NjI2Mw==,paho.mqtt.python,541676263,426,NA,dean-82,56320678,,,NA,2019-10-14T13:25:12Z,2019-10-14T13:25:12Z,"That's what I switched to and it is working now.  The main issue is that
this sets the default timeout for all socket connections which is not
necessarily desirable.  If there is a separate timeout in this code, then
it will only be set for the one connection.

On Sun, Oct 13, 2019 at 9:13 PM ruoshui1314 <notifications@github.com>
wrote:

> I read the source code and find that socket timeout is set to the value of
> keep alive when connecting to the websocket server or using ssl
> protocal.What about stay the same? Another suggestion is that update all
> the socket timeout value to another variable as we discussed before.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/paho.mqtt.python/issues/426?email_source=notifications&email_token=ANNWFJRJZ4IF5IQNVG4YDCLQOPITRA5CNFSM4I6WJIKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEBDGHKI#issuecomment-541483945>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ANNWFJTNL6TM5ATEASKYMHTQOPITRANCNFSM4I6WJIKA>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0MTY3NjI2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjY4MzEyNQ==,paho.mqtt.python,546683125,426,NA,PierreF,359833,Pierre Fersing,,NA,2019-10-27T10:54:07Z,2019-10-27T10:54:07Z,I've merged #425 but I won't yet close this issue as from the description the timeout should be configurable (esp. to much lower value from keepalive).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjY4MzEyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MjAwMzE2Mw==,paho.mqtt.python,572003163,426,NA,,,,,NA,2020-01-08T11:11:37Z,2020-01-08T11:11:37Z,"As a quite happy user of Paho 1.4, I've noticed that #425 became part of the new public 1.5.0 release.

I indeed recommend to refine this implementation in the next release.
We use Paho with setting keepalive==0, which according to the MQTT standard (and properly in the Paho 1.4 implementation) disables the watchdog mechanism.
However, it seems that re-using the Zero as timeout on the socket doesn't allow us to connect at all anymore (errno 115).

The least thing I'd recommend here is to provide the global default timeout again in case keepalive==0. Better, as indicated above already, would be to use separate deadlines for the quite different cases...

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MjAwMzE2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2ODAzMDIxNw==,paho.mqtt.python,668030217,426,NA,schneeemensch,44439378,,,NA,2020-08-03T13:42:57Z,2020-08-03T13:42:57Z,"I would like to push this issue.

It is impossible to use paho-mqtt with the latest version (1.5.0) when configuring keep_alive to 0.

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2ODAzMDIxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/426,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEdcX,paho.mqtt.python,1880217367,426,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:33:38Z,2024-01-07T23:33:38Z,It appears that this was resolved in PR #578 so I'm going to close this issue. If I'm mistaken (apologies - working through a lot of old issues) then please feel free to reopen.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEdcX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/427,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/427,paho.mqtt.python,504413866,427,AmazonMQ TLS,quanphuong,51616546,Quan Phuong,,CLOSED,2019-10-09T04:51:45Z,2022-04-04T17:17:32Z,"Hi there, i'm using paho.mqtt.python to connect to AmazonMQ, but i can't make the connection. I think cause of AmazonMQ use TLS for broker, but i'm not sure it's the main reason. At the moment, i'm trying to find out AmazonMQ TLS root certificate. Does anyone work with this ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/427/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/427,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5A1rLZ,paho.mqtt.python,1087812313,427,NA,lewysigns,66562010,Luis Saenz,,NA,2022-04-04T17:17:32Z,2022-04-04T17:17:32Z,"did you resolve this?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5A1rLZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,paho.mqtt.python,504910972,428,only 120 retained messages delivered immediately after connect,smurfless1,7451983,,,CLOSED,2019-10-09T21:41:13Z,2024-01-07T22:23:24Z,"We have a topic of retained messages of QOS1. Our default connection to log in and subscribe to them is clean=True, no ID, QOS 2. Recently we noticed we're only getting 120 messages, and no more. They're always the earliest 120 messages. Changing to clean=false with an ID does not change it, changing to different subscription QOS levels also does not change it. How do I get the rest of them?

Printing with the mosquitto_sub CLI tool shows the messages are in the topic, so the data is not lost. 

broker is paho-mqtt, client is python paho-mqtt","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzQ4MjA4OA==,paho.mqtt.python,553482088,428,NA,dometec,1739159,Domenico Briganti,dometec@gmail.com,NA,2019-11-13T16:32:25Z,2019-11-13T16:32:25Z,same problem here...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzQ4MjA4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTg0NDAzNA==,paho.mqtt.python,649844034,428,NA,pkshima,30329086,,,NA,2020-06-25T22:13:00Z,2020-06-25T22:13:00Z,Exact same issue here. Would really appreciate an update. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTg0NDAzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTg0NzgzOA==,paho.mqtt.python,649847838,428,NA,pkshima,30329086,,,NA,2020-06-25T22:23:39Z,2020-06-25T22:23:39Z,"Found the solution here :-)
https://www.eclipse.org/lists/paho-dev/msg04335.html","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0OTg0NzgzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/428,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEYUZ,paho.mqtt.python,1880196377,428,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:23:24Z,2024-01-07T22:23:24Z,"I'm going to close this due to it's age and lack of reproducibility (sorry that no one working on the project has responded previously).

If you are still encountering this issue then please feel free to reopen it; however we would appreciate additional details to enable us to identify/replicate the issue i.e.

* Subscribe with the same pattern using `mosquitto_sub` and show a summary of the output (from your question it's unclear if `mosquitto_sub` retrieves all of the retained messages successfully or if you are just testing with more specific patterns)
* Mosquitto version, config and, ideally, logs
* A minimal version of your code (so we can see how you are connecting, subscribing, and handling the messages.

This kind of issue can be difficult to track down; often it's a server configuration issue (as noted by @pkshima). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEYUZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/429,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/429,paho.mqtt.python,509540479,429,"publish.single(""test"", []) empty message hangs",CarlFK,23225,Carl Karsten,,CLOSED,2019-10-20T03:38:30Z,2021-07-23T22:37:26Z,"I haven't seen docs that define what should happen for an empty list.  I would expect this:

>     payload : the payload to be published. If """" or None, a zero length payload
>               will be published.
 - https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/publish.py#L179

instead it gets stuck:

```
import paho.mqtt.publish as publish

publish.single(""test"", 1) 
publish.single(""test"", True)
publish.single(""test"", []) # never returns 
```
until ^c
```
^CTraceback (most recent call last):
  File ""t1.py"", line 7, in <module>
    publish.single(""test"", [])
  File ""/home/runr/score/venv/lib/python3.7/site-packages/paho/mqtt/publish.py"", line 223, in single
    protocol, transport)
  File ""/home/runr/score/venv/lib/python3.7/site-packages/paho/mqtt/publish.py"", line 160, in multiple
    client.loop_forever()
  File ""/home/runr/score/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1578, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/runr/score/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1057, in loop
    socklist = select.select(rlist, wlist, [], timeout)
KeyboardInterrupt
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/429/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/429,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjcwNTk1Nw==,paho.mqtt.python,546705957,429,NA,PierreF,359833,Pierre Fersing,,NA,2019-10-27T15:38:04Z,2019-10-27T15:38:04Z,"I don't have yet a fix to propose, but the issue is that you send an empty list and not an empty string or None.
So to avoid your issue, use
```
publish.single(""test"", ""[]"")  # which send an non-empty payload
publish.single(""test"", """")  # which send a zero-length payload
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU0NjcwNTk1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/429,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znp9,paho.mqtt.python,885947005,429,NA,ralight,79578,Roger Light,,NA,2021-07-23T22:37:26Z,2021-07-23T22:37:26Z,"This was addressed in 1.5.1, if you try to send an empty list an exception will be raised.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znp9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/430,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/430,paho.mqtt.python,509834802,430,Bad network cause too many time_wait connections,zjalen,23429274,Javion Chang,zjalen@163.com,CLOSED,2019-10-21T09:14:59Z,2023-12-26T00:57:45Z,"I have a client program running on **raspiberry**.Sometimes the network environment is bad.My MQTT broker server show thousands of **time_wait** connections from the same client.Even the server will be out of response.
```shell
$ netstat -an |grep "":9898""
tcp        0      0 127.0.0.1:9898              125.90.0.11:41378             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:41379             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:39352             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:39350             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:35763             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:39372             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:39373             TIME_WAIT
tcp        0      0 127.0.0.1:9898              125.90.0.11:41176             TIME_WAIT
...
```
I don't know how to resolve this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/430/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/430,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVM0,paho.mqtt.python,1869173556,430,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T00:57:45Z,2023-12-26T00:57:45Z,"I'm going to close this due to the elapsed time (sorry there was no response earlier). If you are still having issues them please feel free to reopen this but we will need to be able to duplicate the issue so if you could share a [minimal, reproducible example](https://stackoverflow.com/help/minimal-reproducible-example) that would be really helpful.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVM0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/431,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/431,paho.mqtt.python,510607731,431,check_hostname should not be enabled by default,banjaxedben,8545839,,,CLOSED,2019-10-22T11:59:53Z,2023-12-24T21:39:53Z,"I use the tls_set() function with the default value for ""cert_reqs"" = ssl.CERT_REQUIRED.
The Python ssl module documentation is very clear:
- https://docs.python.org/3/library/ssl.html#verifying-certificates
- https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED

Quote:
> This mode is not sufficient to verify a certificate in client mode as it does not match hostnames.

But I was surprised to find with Paho paho.mqtt.client that I was getting an error:
> ""ssl.CertificateError: hostname 'example.com' doesn't match '1.2.3.4'""

Looking at the code for client.py, I can see that if cert_reqs == ssl.CERT_REQUIRED, then you call tls_insecure_set(False), which in turn ""sets context.check_hostname attribute if available"".

While having a default configuration that promotes best-practice security is admirable, I think this is inconsistent with the Python ssl documentation, and causes confusion.
And during development or testing, a user may want to ignore certificate verification errors.

The code in question is 2 years old: https://github.com/eclipse/paho.mqtt.python/issues/123","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/431/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/431,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1hjm,paho.mqtt.python,1742084326,431,NA,gdt,515284,Greg Troxel,,NA,2023-10-01T13:36:20Z,2023-10-01T13:36:20Z,"Defaults should be secure.  python has fixed this in 3.7 so now it matches.

Users should be able to pass args to modify, but that seems feasible.

I think this should just be closed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1hjm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/431,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIqi,paho.mqtt.python,1868597922,431,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:39:53Z,2023-12-24T21:39:53Z,Closing due to inactivity and above comment.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIqi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432,paho.mqtt.python,510885362,432,Socket disconnect does not end with on_disconnect call.,yozik04,2420038,Jevgeni Kiski,yozik04@gmail.com,CLOSED,2019-10-22T20:20:26Z,2024-07-18T00:09:16Z,"I tried to test with this example:
https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py

Using iptables on the server with mosquitto to block requests from my Pi(192.168.1.3) to the brocker.

```bash
sudo iptables -D OUTPUT -p tcp -d 192.168.1.3 -j DROP
sudo iptables -D INPUT -p tcp -s 192.168.1.3 -j DROP
```

The example prints:
```
Socket closed
```
So `on_socket_close` is called. But why `on_disconnect` is not called?

Then nothing happens.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNjg4NDg1NA==,paho.mqtt.python,706884854,432,NA,ShaoMingya,46741536,邵明亚,,NA,2020-10-12T05:59:18Z,2020-10-12T05:59:18Z,"def on_disconnect(**client, userdata, rc**):","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNjg4NDg1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbmZ,paho.mqtt.python,1880209817,432,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:13:15Z,2024-01-07T23:13:15Z,Apologies for the lack of response here. I'd appreciate it if you could attempt to replicate this with the current release (there have been quite a few fixes since 2019) and confirm if it's still an issue?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEbmZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/432,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNOhP,paho.mqtt.python,2234837071,432,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:09:16Z,2024-07-18T00:09:16Z,Closing due to age/inactivity. Please fee free to reopen if this is still an issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNOhP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/433,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/433,paho.mqtt.python,513515301,433,Publish message to a specific client ID,KabDeveloper,34721845,,,CLOSED,2019-10-28T19:39:03Z,2020-08-07T14:22:10Z,"Hi,

Is it possible to publish message to a specific client id ?

I want to publish two things using mqtt:
1- General informations like users scores, stats etc ... and can be viewable by everyone.
2- Sensitive informations reserved for private user like own score, name etc ...

Is there any clean way to do it using Paho MQTT ?

Thank you","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/433/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/433,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNDg1NTUwNg==,paho.mqtt.python,614855506,433,NA,mbenabda,3693756,Mehdi Ben Abdallah,,NA,2020-04-16T19:38:35Z,2020-04-16T19:38:35Z,"MQTT is pub/sub. point to point messaging can be achieved but is not what the protocol was designed for.
You could publish an encrypted payload to a topic that is specific to your recipient (ex: point-to-point/${recipient id}), and setup your broker's access control so that only that recipient is allowed to subscribie to that topic","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNDg1NTUwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/433,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0MjAzOQ==,paho.mqtt.python,670542039,433,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:22:10Z,2020-08-07T14:22:10Z,"I'm closing this issue because you've received a relevant answer above, and it's not related to the Python client particularly. If you disagree, please reopen and provide more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0MjAzOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,paho.mqtt.python,514556420,434,"def on_connect(client, userdata, rc) give no error using python3",cymplecy,2357428,Simon Walters,,CLOSED,2019-10-30T10:35:08Z,2022-06-18T00:36:44Z,"I've used

```
def def on_connect(client, userdata, rc):
    print(""Connected with result code "" + str(rc))
```
in python2 for many years

Switched to using python3 and the print is never seen when connecting

Googling found I should use
```
def def on_connect(client, userdata, flags, rc):
```
Issue is - should I not receive error message if function definition is wrong?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Mjk5ODcxNQ==,paho.mqtt.python,562998715,434,NA,josiahwitheford,26098624,Joeey,,NA,2019-12-08T21:46:25Z,2019-12-08T21:46:25Z,You have written `def def` here instead of just `def`. Is that the same as in your code or just a typo here?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2Mjk5ODcxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MzAwMjg0NQ==,paho.mqtt.python,563002845,434,NA,cymplecy,2357428,Simon Walters,,NA,2019-12-08T22:27:23Z,2019-12-08T22:27:23Z,"Checking my orig Python 2 code I did use
![image](https://user-images.githubusercontent.com/2357428/70397434-16a30900-1a0a-11ea-9a01-226b59649660.png)


I don't know how I managed to mangle my original post!

Thanks for pointing it out :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MzAwMjg0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0MTU4OA==,paho.mqtt.python,670541588,434,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:21:07Z,2020-08-07T14:21:07Z,"The on_connect docs say:
```
        Expected signature for MQTT v3.1 and v3.1.1 is:
            connect_callback(client, userdata, flags, rc, properties=None)

        and for MQTT v5.0:
            connect_callback(client, userdata, flags, reasonCode, properties)
```

You wouldn't have seen an error because of #365, which now has an open PR. I think in essence that means this is a duplicate: even though it's not exactly the same issue you would have found the problem if that had been fixed. You have the answer to your specific problem above, and the more general problem of errors is addressed in #365.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDU0MTU4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znYk,paho.mqtt.python,885945892,434,NA,ralight,79578,Roger Light,,NA,2021-07-23T22:33:39Z,2021-07-23T22:33:39Z,I'm closing this because I believe it has been addressed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znYk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/434,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FGdfd,paho.mqtt.python,1159321565,434,NA,wagnerengenhoca,70587304,Wagner Antônio Ferreira da Silva ,,NA,2022-06-18T00:36:44Z,2022-06-18T00:36:44Z,Como recebo minha mensagem como string em vez de bytes?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FGdfd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/435,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/435,paho.mqtt.python,514617199,435,Is it possible to wait pause subscription until callback has returned?,muety,8978843,Ferdinand Mütsch,ferdinand@muetsch.io,CLOSED,2019-10-30T12:08:38Z,2023-12-24T21:38:51Z,"To my understanding, as long as a client subscription to a topic exists, messages from that topic are being received as they come in and then enqueued by Paho until the `on_message` callback has run for each one of them.
I would like to know whether it is possible to wait for the blocking callback to return before accepting new messages, while knowingly ""missing"" messages being published to the broker in the mean time.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/435/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/435,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znPc,paho.mqtt.python,885945308,435,NA,ralight,79578,Roger Light,,NA,2021-07-23T22:31:43Z,2021-07-23T22:31:43Z,"This is an old issue, I apologise! I don't like to just close issues, so here is an answer:

I would approach this by adding messages to a queue in the on_message callback, then having a separate thread to process the queue. At the end of processing one message you could completely clear the queue, which would give you the behaviour you want without risking doing anything odd to the MQTT connection.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40znPc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/435,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIow,paho.mqtt.python,1868597808,435,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:38:51Z,2023-12-24T21:38:51Z,Closing this due to age/inactivity/solution suggested.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIow/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436,paho.mqtt.python,516541549,436,"WebsocketConnectionError: WebSocket handshake error, connection not upgraded",supersongpeng,29834949,SuperOn,sss6ppp@163.com,CLOSED,2019-11-02T09:08:17Z,2023-12-26T00:56:09Z,"```
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc):
    print(""Connected"")

def on_message(client, userdata, msg):
    print(msg)

client = mqtt.Client(client_id='leisu_kr899999r998',transport=""websockets"")
client.on_connect = on_connect
client.on_message = on_message
client.connect(""v2.push.leisu.com"",8084, 60)
client.subscribe(""chatroom/room_2766534"")
client.loop_forever()
```

I made request to host [v2.push.leisu.com:8084](url)  ,but it threw the error as below:

Traceback (most recent call last):
  File ""D:\super\Documents\11.WebCrawlers\test.py"", line 17, in <module>
    client.connect(""push.namitiyu.com"",443, 60)
  File ""C:\Users\super\Anaconda3\lib\site-packages\paho\mqtt\client.py"", line 937, in connect
    return self.reconnect()
  File ""C:\Users\super\Anaconda3\lib\site-packages\paho\mqtt\client.py"", line 1108, in reconnect
    self._websocket_path, self._websocket_extra_headers)
  File ""C:\Users\super\Anaconda3\lib\site-packages\paho\mqtt\client.py"", line 3556, in __init__
    self._do_handshake(extra_headers)
  File ""C:\Users\super\Anaconda3\lib\site-packages\paho\mqtt\client.py"", line 3610, in _do_handshake
    ""WebSocket handshake error, connection not upgraded"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error, connection not upgraded

However, I used [http://www.tongxinmao.com/txm/webmqtt.php](url)  on Chrome to connect the [v2.push.leisu.com:8084](url) and subscribed one topic and it was connected successfully with TSL. 


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NTA0NzEzNA==,paho.mqtt.python,555047134,436,NA,christopherkuemmel,23188241,Christopher Kümmel,,NA,2019-11-18T14:48:27Z,2019-11-18T14:48:27Z,"Try to add this line: `client.tls_set()` before your **connect()** call. Since it looks like you're using TSL you have to enable this setting. 

I ran into a similar issue and this solved it for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1NTA0NzEzNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMjkyNDIzMQ==,paho.mqtt.python,622924231,436,NA,fcracker79,7695156,Mirko Bonasorte,mirko@mirko.io,NA,2020-05-02T09:16:38Z,2020-05-02T09:16:38Z,"Hi there,

I have the same issue with the following code:

```
        client = mqtt.Client(client_id=client_id, transport=""websockets"")
        client.enable_logger(logging.getLogger('paho-mqtt'))
        client.on_connect = ...
        client.on_message = ...
        client.on_log = lambda *a, **kw: self._logger.info('On log', exc_info=True)
        client.ws_set_options(path=""{}?{}"".format(urlparts.path, urlparts.query), headers=headers)
        client.tls_set()

        self._debug('trying to connect now....')
        client.connect(urlparts.netloc, 443)
        try:
            client.loop_forever()
        except Exception:
            self._logger.exception('Error looping forever')
            raise
        finally:
            client.disconnect()
```
It works for about 24 hours, then it fails as follows:

```
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:     self.reconnect()
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:     self._websocket_path, self._websocket_extra_headers)
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:     self._do_handshake(extra_headers)
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]:     ""WebSocket handshake error, connection not upgraded"")
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]: paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error, conne
May 01 20:39:21 ip-10-0-1-121 test_chattyraspi[8022]: 2020-05-01 20:39:21,194 - paho-mqtt - DEBUG - Connection failed, retrying
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]: 2020-05-01 20:39:23,207 - client.raspi.alexa.mirko.io - INFO - On log
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]: Traceback (most recent call last):
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:     self.reconnect()
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:     self._websocket_path, self._websocket_extra_headers)
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:     self._do_handshake(extra_headers)
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/clie
May 01 20:39:23 ip-10-0-1-121 test_chattyraspi[8022]:     ""WebSocket handshake error, connection not upgraded"")
```
From this point on, it does not get out of this situation and the client does not receive any notification.
If I reboot the whole script, it works, but it seems to be a very bad hack.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMjkyNDIzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/436,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVF5,paho.mqtt.python,1869173113,436,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T00:56:09Z,2023-12-26T00:56:09Z,"I'm going to close this due to age/inactivity (please feel free to reopen it if you are still encountering the issue and can provide further details).

When raising this kind of issue it's really useful if you can provide full details of the working connection (e.g. a screenshot of `http://www.tongxinmao.com/txm/webmqtt.php` showing the working config). I tried to connect myself but `v2.push.leisu.com` does not resolve. There are a range of possible issues here and often different users get the same error but for differing reasons (particularly when connecting to differing servers).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVF5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,paho.mqtt.python,517385716,439,MQTTMessageInfo is_published() return false while message delivered,aymeric-soubrouillard,5519142,zeradev,,CLOSED,2019-11-04T20:34:02Z,2024-07-17T22:36:15Z,"# Context
I am new using the python version of Paho.mqtt. I am just trying to make a simple publish but i am facing a issue when using QoS 1 or 2:
The message is successfully published on my localhost Mosquitto server but the client says that it has not been published and even worst, if I used `publish_result.wait_for_publish()` my program get stucked forever.
With QoS 0, it always return true, even if the message hasn't been delivered (which is what Qos 0 is designed for)
I have tried with both local & test.mosquitto.orf servers

# How to reproduce
```
client = mqtt.Client()
client.connect(""localhost"", 1883)
publish_result = client.publish(topic=""test"", payload=""Testing publish"", qos=1, retain=False)
time.sleep(5)
print(publish_result.rc)
> 0
print(publish_result.is_published())
> False
publish_result.wait_for_publish() 
> stucked here for ever
```

# Additional point
Why not add a timeout on `wait_for_publish()`. It's always a bad practice to be stucked for ever on a loop.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzUwMjk3OA==,paho.mqtt.python,553502978,439,NA,akiross,884092,Alessandro Re,,NA,2019-11-13T17:20:21Z,2019-11-13T17:20:21Z,I am experiencing the same issue. Using `paho-mqtt==1.4.0` with Python 3.7.4 on Linux.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzUwMjk3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTUxNDM5Mw==,paho.mqtt.python,565514393,439,NA,aymeric-soubrouillard,5519142,zeradev,,NA,2019-12-13T16:46:30Z,2019-12-13T16:46:30Z,"Because `published()` is not synchronous, it return false while he is not aware of delivery that's why calling `wait_for_publish() ` is mandatory.
Apparently calling `start_loop()` before wait_for_publish() resolve the `stucked forever` problem.

Here is a working code:
```
client = mqtt.Client()
client.connect(""localhost"", 1883)
client.start_loop()
publish_result = client.publish(topic=""test"", payload=""Testing publish"", qos=1, retain=False)
time.sleep(5)
print(publish_result.rc)
> 0
print(publish_result.is_published())
> False
publish_result.wait_for_publish() 
print(publish_result.is_published())
> True
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTUxNDM5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4MTc3Nw==,paho.mqtt.python,730581777,439,NA,guiklimek,72322850,Guillaume Klimek,,NA,2020-11-19T19:15:55Z,2020-11-19T19:15:55Z,"I'm experiencing the same issue, in a different context (publishing in the `on_message()` callback) https://github.com/eclipse/paho.mqtt.python/issues/527","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4MTc3Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/439,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FL3BA,paho.mqtt.python,2234478656,439,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:36:15Z,2024-07-17T22:36:15Z,I'm going to close this because OIP's issue appears to have been that they were not starting a [network loop](https://github.com/eclipse/paho.mqtt.python?tab=readme-ov-file#network-loop) and they reported the issue fixed (5 years ago :-) ).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FL3BA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440,paho.mqtt.python,517414634,440,No error when publish message fails with QoS 1 or 2,aymeric-soubrouillard,5519142,zeradev,,CLOSED,2019-11-04T21:29:02Z,2023-12-23T22:34:50Z,"# Context
If a deconnection occurred between connection & publishing a message the client return 0 which is the MQTT_ERR_SUCCESS while it has not been delivered.

# How to reproduce
```
client = mqtt.Client()
client.connect(""localhost"", 1883)
time.sleep(15)
# Shutdown the server
publish_result = client.publish(topic=""test"", payload=""Testing publish"", qos=1, retain=False)
print(publish_result.rc)
> 0
# Should be an MQTT_ERR_* int
```

# Additional note
Why call a success code MQTT_ERR_SUCCESS. Is it an error or a success?! very confusing.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MDU1NTUyMA==,paho.mqtt.python,560555520,440,NA,pshem,26800787,,,NA,2019-12-02T19:56:36Z,2019-12-02T19:56:36Z,"I've got the same problem. I can get `client.is_connected() == False && publish_result.is_published() == True`, which just feels wrong. The only way to check I've come up with is timing out `publish_result.wait_for_publish()` - if it doesn't return in 5s, it failed. However, this doesn't feel like a proper solution.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MDU1NTUyMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4MDQxMg==,paho.mqtt.python,730580412,440,NA,guiklimek,72322850,Guillaume Klimek,,NA,2020-11-19T19:13:08Z,2020-11-19T19:13:08Z,Have you check this known limitations on doc : https://github.com/eclipse/paho.mqtt.python#known-limitations ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU4MDQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/440,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXT6W,paho.mqtt.python,1868381846,440,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:34:49Z,2023-12-23T22:34:49Z,"Unfortunately handling errors publishing QOS1/2 messages will always be a bit confusing. This is because these messages are queued and may be sent when/if the connection comes back up (and the acknowledgment process, especially with QOS2, may take a while to complete). If you wish to confirm delivery then register an `on_publish` callback (which will be notified when a PUBACK is received from the broker).

Given this issues age I'm going to close it. I did attempt to duplicate the issue with the latest release (code/results below) but it worked as expected. If this remains an issue please reopen the issue but supply [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) to enable us to see what is happening.

```
import paho.mqtt.client as mqtt
import time


def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))


client = mqtt.Client()
client.on_connect = on_connect
client.loop_start()
client.connect(""host.docker.internal"", 1883)
time.sleep(15)
# Shutdown the server
publish_result = client.publish(topic=""test"", payload=""Testing publish"", qos=1, retain=False)
print(publish_result.rc)
```

Output:

```
Attaching to pythondocker-1
pythondocker-1  | Connected with result code 0
pythondocker-1  | 4
pythondocker-1 exited with code 0
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXT6W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/442,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/442,paho.mqtt.python,521739758,442,connect_srv() broken : MQTT_CLEAN_START_FIRST_ONLY issue,edwin-oetelaar,1407996,Edwin van den Oetelaar,edwin@oetelaar.com,CLOSED,2019-11-12T18:58:11Z,2023-12-24T20:56:55Z,"Code that worked some time ago fails now.
I have set up my SRV records correctly.
I can see my hostname / port are found correctly.

client.connect_srv(domain='xx88.nl', keepalive=60)

It appears that ""clean_start"" is not getting to the ""connect()"" function.
No error is reported, however, debugging finds : 
this gets called :
raise ValueError(""Clean start only applies to MQTT V5"")

This is however not caught in connect_srv() which reports 
raise ValueError(""No SRV hosts responded"")
(THIS IS WRONG)

paho-mqtt ==  1.5.0
python == 3.6

I will try to debug and find a work-around.
Best regards,
Edwin van den Oetelaar
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/442/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/442,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzA3NDQzNQ==,paho.mqtt.python,553074435,442,NA,edwin-oetelaar,1407996,Edwin van den Oetelaar,edwin@oetelaar.com,NA,2019-11-12T19:24:14Z,2019-11-12T19:24:14Z,"I have found the commit : e5d89089df87e89126d48e5b54d7102b5a268187
The bind_port parameter is given the value of the clean_start flag.
Using positional argument list on named arguments... well...

line 974 of client.py

    return self.connect(host=host, port=port, keepalive=keepalive,clean_start=clean_start, properties=properties)

will fix the issue for now.
Someone with more time can now clean this up.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU1MzA3NDQzNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/442,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYHTN,paho.mqtt.python,1868592333,442,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T20:56:54Z,2023-12-24T20:56:54Z,I'm going to close this as a duplicate of #493 (for which a PR has now been submitted - just ned the ECA signed on that).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYHTN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/443,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/443,paho.mqtt.python,530482111,443,on_message() not called for every publish(),anik01ic,58344653,,,CLOSED,2019-11-29T20:36:16Z,2019-12-03T17:26:49Z,"Hello,

I have a subscriber and a publisher.
The publisher calls the publish(topic, data) function 5 times in a row (the on_publish() callback is called for every publish() call).
If there isnt a small delay (e.g. 10ms) between the publish() calls, only the first message that has been published is received by the subscriber. If there is a short delay, all 5 messages are received. 

Any thoughts on this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/443/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/443,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MTI3MTk4OQ==,paho.mqtt.python,561271989,443,NA,anik01ic,58344653,,,NA,2019-12-03T17:26:35Z,2019-12-03T17:26:35Z,"I used the helper function multiple(), I guess calling publish() sequentially without any pause in between is just too fast. Closing the issue","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2MTI3MTk4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/447,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/447,paho.mqtt.python,535083842,447,"Examples ignore errors, because Client does not always raise exceptions",theamk,1980235,,,OPEN,2019-12-09T17:43:56Z,2023-12-23T21:42:49Z,"The current API uses error return codes (see #142), which needs to be checked for each relevant call. However, documentation does not mention it, and the examples do not so it either. 

For example. https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub.py says:
```
mqttc.connect(""mqtt.eclipse.org"", 1883, 60)
mqttc.subscribe(""$SYS/#"", 0)
```

The correct code would be:
```
result = mqttc.connect(""mqtt.eclipse.org"", 1883, 60)
if result != mqtt.MQTT_ERR_SUCCESS:
     raise Exception(""mqtt connect failed: "" + mqtt.error_string(result))

result, mid = mqttc.subscribe(""$SYS/#"", 0)
if result != mqtt.MQTT_ERR_SUCCESS:
     raise Exception(""mqtt subscribe failed: "" + mqtt.error_string(result))
```

I think that either:
- Every example should be fixed to properly error-check
- .. or an API should be changed to always raise on error. 

(I personally prefer latter solution, because that's how every other python library works)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/447/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/448,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/448,paho.mqtt.python,535442907,448,Use paho-mqtt cannot generate on_connect() callback when authorization error,Sean-Xiangxuan-Kong,58714510,,,CLOSED,2019-12-10T01:55:19Z,2019-12-13T08:29:27Z,"I am having trouble with a problem that handle the error cases of connect with AWS IoT.

I am coding for handle the error cases of connect to AWS by using paho-mqtt, e.g. Invalid certificates, revoke certificate on AWS, deactivate certificates, or deny the IoT connect on AWS. However I cannot get on_connect callback called in these error cases, instead the on_disconnect is invoked immediately, please see follow example log of my testing. As we know, “When the client receives a CONNACK message from the broker in response to the connect it generates an on_connect() callback.”

Observe the debug log of Paho MQTT, I didn’t see any CONNACK message received, dig into the Paho MQTT code, I found that PahoMQTT would call on_disconnect itself in _loop_rc_handle() while rc is above 0, continue add debug log in Paho MQTT, I found that indeed at these error cases, the “command” length is zero and returns 1 (returns 0 on success) while trying to receive from a socket.

Continue check the log on CloudWatch, I cannot see any detail information either except the following error message:

2019-12-05 02:10:42.369 TRACEID:20829ac5-8ea5-e5b9-5a08-eda5713ca730 
PRINCIPALID:552625b012f310b37a5a48687a4b0939290b1010008dce5331a460438d2d682d 
[ERROR] EVENT:MQTT Client Connect MESSAGE:Connect Status: 
AUTHORIZATION_ERROR Failure reason:AUTHORIZATION_FAILURE 

I don’t have other good idea to track this issue presently, so I would like to ask for help from you. Do you have any comments about this result? MY expected result should be call on_connect() with rc is not CONNACK_ACCEPTED for these error cases.

In normal case (with valid certificates), my client is able to connect with IoT success.

Any comments about this issue is appreciated. Thanks in advance.

It may helpful with my code reference, please see follow:


def on_connect(client, userdata, flags, rc):
    print(""On connect rc: {}"".format(rc))

def on_disconnect(client, userdata, rc):
    print(""On disconnect rc: {}"".format(rc))

def on_log(client, userdata, level, buf):
    print(""{}"".format(buf))

def main():
    ca = ""X:\Files\Certificates\cacert.pem""
    cert = ""X:\Files\Certificates\cert.pem""
    private = ""X:\Files\Certificates\prikey.pem""

    print(""Enter main()"")
    mqttc = mqtt.Client(client_id=""70AC03436BAB4"", clean_session=False)
    mqttc.on_connect = on_connect
    mqttc.on_disconnect = on_disconnect
    mqttc.on_log = on_log

    ssl_context = ssl.create_default_context()
    ssl_context.options |= (ssl.OP_NO_SSLv2 | ssl.OP_NO_SSLv3)
    ssl_context.set_alpn_protocols([""x-amzn-mqtt-ca""])
    ssl_context.load_verify_locations(cafile=ca)
    ssl_context.load_cert_chain(certfile=cert,
                                keyfile=private)
    try:
        mqttc.tls_set_context(context=ssl_context)
        # mqttc.tls_insecure_set(True)
        mqttc.connect(host=""sample.amazonaws.com"", port=443)
        mqttc.loop_start()
    except Exception as e:
        print(""Error: {}"".format(str(e)))

    while not mqttc.is_connected():
        time.sleep(1)

    print(""Connect success"")

    run = 0
    while run < 5:
        time.sleep(2)
        run += 1

    mqttc.disconnect()
    mqttc.loop_stop()

    while mqttc.is_connected():
        time.sleep(1)

if __name__ == ""__main__"":
    sys.exit(main())


As well as my connecting log:

Enter main()
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'70AC03436BAB4'
On disconnect rc: 1
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'70AC03436BAB4'
On disconnect rc: 1
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'70AC03436BAB4'
On disconnect rc: 1
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'70AC03436BAB4'
On disconnect rc: 1
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'70AC03436BAB4'
On disconnect rc: 1

Thanks for any suggestions.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/448/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/448,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTM0OTUwMA==,paho.mqtt.python,565349500,448,NA,Sean-Xiangxuan-Kong,58714510,,,NA,2019-12-13T08:29:26Z,2019-12-13T08:29:26Z,The behavior is normal and expected.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU2NTM0OTUwMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/449,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/449,paho.mqtt.python,536488098,449,Dead code and probably bug,niklasekstrom,6104627,Niklas Ekström,,CLOSED,2019-12-11T16:40:32Z,2021-07-23T22:26:41Z,"I just browsed through the code and saw this line, which does nothing and is probably a bug:

self._mqttv5_first_connect == True

at line
https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L928
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/449/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/449,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40zm5B,paho.mqtt.python,885943873,449,NA,ralight,79578,Roger Light,,NA,2021-07-23T22:26:41Z,2021-07-23T22:26:41Z,"Thank you, this was fixed in a release so I'm closing this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40zm5B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/450,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/450,paho.mqtt.python,536652907,450,Deprecation warning,pshem,26800787,,,CLOSED,2019-12-11T22:37:07Z,2020-07-29T16:02:06Z,"While running a unit test on code using `paho-mqtt`, I've run into a deprecation warning:
```python
paho/mqtt/publish.py:127: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3,and in 3.9 it will stop working
  if not isinstance(msgs, collections.Iterable)
```

Since Python 3.8 has been released and 3.9 is next, I think this is worth fixing. I can write the PR later if the maintainers are interested in getting this fixed","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/450/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/450,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMjQwNTMwNg==,paho.mqtt.python,612405306,450,NA,tirkarthi,3972343,Karthikeyan Singaravelan,tir.karthi@gmail.com,NA,2020-04-11T12:04:27Z,2020-04-11T12:04:27Z,I have created https://github.com/eclipse/paho.mqtt.python/pull/485 to fix this. Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMjQwNTMwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/450,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NTc1MjY3OA==,paho.mqtt.python,665752678,450,NA,PierreF,359833,Pierre Fersing,,NA,2020-07-29T16:02:05Z,2020-07-29T16:02:05Z,Thank for your report and thank @tirkarthi for your PR. This should be solved by PR #497 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NTc1MjY3OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,paho.mqtt.python,539006945,451,TLS-PSK,ebm539,25342857,Ethan,,CLOSED,2019-12-17T11:27:36Z,2023-12-24T21:38:00Z,"Hi,
How do I configure TLS-PSK for use with paho.mqtt.python?
tls_set does not have arguments for PSK options.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzE4NzkyMQ==,paho.mqtt.python,663187921,451,NA,gennadykr,18310065,Gennady Krasnikov,,NA,2020-07-23T19:22:02Z,2020-07-23T19:22:02Z,"You can try SSLContext() API derivated from sspsk package, see https://github.com/drbild/sslpsk/issues/19
in some way like this:
```
context = SSLPSKContext(ssl.PROTOCOL_TLS)
context.set_ciphers('PSK')
context.psk = (b'1234', bytes(""1234"", encoding=""utf-8""))
client.tls_set_context(context)
```
It works for me with an additional patch for `sslpsk` to work with python3.8","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzE4NzkyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTQ3OTQ1OQ==,paho.mqtt.python,705479459,451,NA,pavel-ch,771816,,,NA,2020-10-08T10:26:27Z,2020-10-08T10:26:27Z,"Hello @gennadykr could you share your patch to sslpsk? I tried this and drbild/sslpsk#19 with https://github.com/autinerd/sslpsk2 which works with 3.8, but no success.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTQ3OTQ1OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTYyMzA4NA==,paho.mqtt.python,705623084,451,NA,gennadykr,18310065,Gennady Krasnikov,,NA,2020-10-08T14:50:15Z,2020-10-08T14:50:15Z,"Hello @pavel-ch , this is not a patch but steps how I use this. I change sslpsk just to let it work with python 3.8. Then I place the code suggested in drbild/sslpsk#19 in my script file. 
1) Dockerfile part:
```
FROM ubuntu
RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
    python3 python3-pip python3-venv \
    build-essential libssl-dev python3-dev \
    && apt-get clean
```
2) requirements part
```
sslpsk
paho-mqtt
```
3) Another Dockerfile part
```
RUN sed -i ""s|sys.version_info >= (3, 5)|sys.version_info == (3, 5)|g"" \
    /usr/local/lib/python3.8/dist-packages/sslpsk/sslpsk.py
```
4) A Python script parts
- import:
```
import paho.mqtt.client as mqtt
import ssl
from sslpsk.sslpsk import _ssl_set_psk_server_callback, _ssl_set_psk_client_callback
```
- drbild/sslpsk#19 part with SSLPSKContext re-definition
- using this SSLPSKContex:
```
context = SSLPSKContext(ssl.PROTOCOL_TLS)
context.set_ciphers('PSK')
context.psk = (b'1234', bytes(""1234"", encoding=""utf-8""))
client = mqtt.Client(...)
client.tls_set_context(context)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTYyMzA4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTY0MDA4NQ==,paho.mqtt.python,705640085,451,NA,pavel-ch,771816,,,NA,2020-10-08T15:16:48Z,2020-10-08T15:16:48Z,"Hello Gennady thank you, this looks like an equivalent of what I did with sslpsk2. I was getting ssl3 handshake error, maybe I am wrong with setting psk. How your mosquitto (I guess you use it) config and psk files look like? How it corresponds with psk tuple?
Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTY0MDA4NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTY4MjQxNA==,paho.mqtt.python,705682414,451,NA,gennadykr,18310065,Gennady Krasnikov,,NA,2020-10-08T16:27:03Z,2020-10-08T16:27:03Z,"No, I didn't check it with mosquitto server. But I saw handshake problems and this is the reason I added  `context.set_ciphers('PSK')` and tried to work with the more recent Python - otherwise it was unable to find PSK ciphers and failed with a handshake. What kind of ssl error did you see? Missed ciphers lead to TLSV1_ALERT_INSUFFICIENT_SECURITY error. I used `print(context.get_ciphers())` to check presence of PSK ciphers.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTY4MjQxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTgzNDU2MA==,paho.mqtt.python,705834560,451,NA,pavel-ch,771816,,,NA,2020-10-08T21:30:54Z,2020-10-08T21:30:54Z,"I am getting 
`[SSL: SSLV3_ALERT_ILLEGAL_PARAMETER] sslv3 alert illegal parameter (_ssl.c:1108)`
when I have the mosquitto configured to 1234:1234 in mosquitto.psk file (identificatio:psk format), or 
`[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1108)`
when mosquitto is not configured 'properly'
I must look into the handshake, no clue why SSLV3 is chosen.
print(context.get_ciphers()) returns a lot of ciphers:
`[{'id': 50336514, 'name': 'TLS_AES_256_GCM_SHA384', 'protocol': 'TLSv1.3', 'description': 'TLS_AES_256_GCM_SHA384  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-gcm', 'digest': None, 'kea': 'kx-any', 'auth': 'auth-any'}, {'id': 50336515, 'name': 'TLS_CHACHA20_POLY1305_SHA256', 'protocol': 'TLSv1.3', 'description': 'TLS_CHACHA20_POLY1305_SHA256 TLSv1.3 Kx=any      Au=any  Enc=CHACHA20/POLY1305(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'chacha20-poly1305', 'digest': None, 'kea': 'kx-any', 'auth': 'auth-any'}, {'id': 50336513, 'name': 'TLS_AES_128_GCM_SHA256', 'protocol': 'TLSv1.3', 'description': 'TLS_AES_128_GCM_SHA256  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-gcm', 'digest': None, 'kea': 'kx-any', 'auth': 'auth-any'}, {'id': 50331821, 'name': 'RSA-PSK-AES256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'RSA-PSK-AES256-GCM-SHA384 TLSv1.2 Kx=RSAPSK   Au=RSA  Enc=AESGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-gcm', 'digest': None, 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331819, 'name': 'DHE-PSK-AES256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES256-GCM-SHA384 TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-gcm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50384046, 'name': 'RSA-PSK-CHACHA20-POLY1305', 'protocol': 'TLSv1.2', 'description': 'RSA-PSK-CHACHA20-POLY1305 TLSv1.2 Kx=RSAPSK   Au=RSA  Enc=CHACHA20/POLY1305(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'chacha20-poly1305', 'digest': None, 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50384045, 'name': 'DHE-PSK-CHACHA20-POLY1305', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-CHACHA20-POLY1305 TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=CHACHA20/POLY1305(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'chacha20-poly1305', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50384044, 'name': 'ECDHE-PSK-CHACHA20-POLY1305', 'protocol': 'TLSv1.2', 'description': 'ECDHE-PSK-CHACHA20-POLY1305 TLSv1.2 Kx=ECDHEPSK Au=PSK  Enc=CHACHA20/POLY1305(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'chacha20-poly1305', 'digest': None, 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380971, 'name': 'DHE-PSK-AES256-CCM8', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES256-CCM8     TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESCCM8(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-ccm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380967, 'name': 'DHE-PSK-AES256-CCM', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES256-CCM      TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESCCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-ccm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380911, 'name': 'RSA-PSK-ARIA256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'RSA-PSK-ARIA256-GCM-SHA384 TLSv1.2 Kx=RSAPSK   Au=RSA  Enc=ARIAGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aria-256-gcm', 'digest': None, 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50380909, 'name': 'DHE-PSK-ARIA256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-ARIA256-GCM-SHA384 TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=ARIAGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aria-256-gcm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331817, 'name': 'PSK-AES256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'PSK-AES256-GCM-SHA384   TLSv1.2 Kx=PSK      Au=PSK  Enc=AESGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-gcm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50384043, 'name': 'PSK-CHACHA20-POLY1305', 'protocol': 'TLSv1.2', 'description': 'PSK-CHACHA20-POLY1305   TLSv1.2 Kx=PSK      Au=PSK  Enc=CHACHA20/POLY1305(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'chacha20-poly1305', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380969, 'name': 'PSK-AES256-CCM8', 'protocol': 'TLSv1.2', 'description': 'PSK-AES256-CCM8         TLSv1.2 Kx=PSK      Au=PSK  Enc=AESCCM8(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-ccm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380965, 'name': 'PSK-AES256-CCM', 'protocol': 'TLSv1.2', 'description': 'PSK-AES256-CCM          TLSv1.2 Kx=PSK      Au=PSK  Enc=AESCCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aes-256-ccm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380907, 'name': 'PSK-ARIA256-GCM-SHA384', 'protocol': 'TLSv1.2', 'description': 'PSK-ARIA256-GCM-SHA384  TLSv1.2 Kx=PSK      Au=PSK  Enc=ARIAGCM(256) Mac=AEAD', 'strength_bits': 256, 'alg_bits': 256, 'aead': True, 'symmetric': 'aria-256-gcm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50331820, 'name': 'RSA-PSK-AES128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'RSA-PSK-AES128-GCM-SHA256 TLSv1.2 Kx=RSAPSK   Au=RSA  Enc=AESGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-gcm', 'digest': None, 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331818, 'name': 'DHE-PSK-AES128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES128-GCM-SHA256 TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-gcm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380970, 'name': 'DHE-PSK-AES128-CCM8', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES128-CCM8     TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESCCM8(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-ccm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380966, 'name': 'DHE-PSK-AES128-CCM', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-AES128-CCM      TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=AESCCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-ccm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380910, 'name': 'RSA-PSK-ARIA128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'RSA-PSK-ARIA128-GCM-SHA256 TLSv1.2 Kx=RSAPSK   Au=RSA  Enc=ARIAGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aria-128-gcm', 'digest': None, 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50380908, 'name': 'DHE-PSK-ARIA128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'DHE-PSK-ARIA128-GCM-SHA256 TLSv1.2 Kx=DHEPSK   Au=PSK  Enc=ARIAGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aria-128-gcm', 'digest': None, 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331816, 'name': 'PSK-AES128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'PSK-AES128-GCM-SHA256   TLSv1.2 Kx=PSK      Au=PSK  Enc=AESGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-gcm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380968, 'name': 'PSK-AES128-CCM8', 'protocol': 'TLSv1.2', 'description': 'PSK-AES128-CCM8         TLSv1.2 Kx=PSK      Au=PSK  Enc=AESCCM8(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-ccm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380964, 'name': 'PSK-AES128-CCM', 'protocol': 'TLSv1.2', 'description': 'PSK-AES128-CCM          TLSv1.2 Kx=PSK      Au=PSK  Enc=AESCCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aes-128-ccm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380906, 'name': 'PSK-ARIA128-GCM-SHA256', 'protocol': 'TLSv1.2', 'description': 'PSK-ARIA128-GCM-SHA256  TLSv1.2 Kx=PSK      Au=PSK  Enc=ARIAGCM(128) Mac=AEAD', 'strength_bits': 128, 'alg_bits': 128, 'aead': True, 'symmetric': 'aria-128-gcm', 'digest': None, 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380856, 'name': 'ECDHE-PSK-AES256-CBC-SHA384', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-AES256-CBC-SHA384 TLSv1 Kx=ECDHEPSK Au=PSK  Enc=AES(256)  Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha384', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380854, 'name': 'ECDHE-PSK-AES256-CBC-SHA', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-AES256-CBC-SHA TLSv1 Kx=ECDHEPSK Au=PSK  Enc=AES(256)  Mac=SHA1', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha1', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50331831, 'name': 'RSA-PSK-AES256-CBC-SHA384', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-AES256-CBC-SHA384 TLSv1 Kx=RSAPSK   Au=RSA  Enc=AES(256)  Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha384', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331827, 'name': 'DHE-PSK-AES256-CBC-SHA384', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-AES256-CBC-SHA384 TLSv1 Kx=DHEPSK   Au=PSK  Enc=AES(256)  Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha384', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331797, 'name': 'RSA-PSK-AES256-CBC-SHA', 'protocol': 'SSLv3', 'description': 'RSA-PSK-AES256-CBC-SHA  SSLv3 Kx=RSAPSK   Au=RSA  Enc=AES(256)  Mac=SHA1', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha1', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331793, 'name': 'DHE-PSK-AES256-CBC-SHA', 'protocol': 'SSLv3', 'description': 'DHE-PSK-AES256-CBC-SHA  SSLv3 Kx=DHEPSK   Au=PSK  Enc=AES(256)  Mac=SHA1', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha1', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380955, 'name': 'ECDHE-PSK-CAMELLIA256-SHA384', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-CAMELLIA256-SHA384 TLSv1 Kx=ECDHEPSK Au=PSK  Enc=Camellia(256) Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'camellia-256-cbc', 'digest': 'sha384', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380953, 'name': 'RSA-PSK-CAMELLIA256-SHA384', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-CAMELLIA256-SHA384 TLSv1 Kx=RSAPSK   Au=RSA  Enc=Camellia(256) Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'camellia-256-cbc', 'digest': 'sha384', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50380951, 'name': 'DHE-PSK-CAMELLIA256-SHA384', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-CAMELLIA256-SHA384 TLSv1 Kx=DHEPSK   Au=PSK  Enc=Camellia(256) Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'camellia-256-cbc', 'digest': 'sha384', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331823, 'name': 'PSK-AES256-CBC-SHA384', 'protocol': 'TLSv1.0', 'description': 'PSK-AES256-CBC-SHA384   TLSv1 Kx=PSK      Au=PSK  Enc=AES(256)  Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha384', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50331789, 'name': 'PSK-AES256-CBC-SHA', 'protocol': 'SSLv3', 'description': 'PSK-AES256-CBC-SHA      SSLv3 Kx=PSK      Au=PSK  Enc=AES(256)  Mac=SHA1', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'aes-256-cbc', 'digest': 'sha1', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380949, 'name': 'PSK-CAMELLIA256-SHA384', 'protocol': 'TLSv1.0', 'description': 'PSK-CAMELLIA256-SHA384  TLSv1 Kx=PSK      Au=PSK  Enc=Camellia(256) Mac=SHA384', 'strength_bits': 256, 'alg_bits': 256, 'aead': False, 'symmetric': 'camellia-256-cbc', 'digest': 'sha384', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380855, 'name': 'ECDHE-PSK-AES128-CBC-SHA256', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-AES128-CBC-SHA256 TLSv1 Kx=ECDHEPSK Au=PSK  Enc=AES(128)  Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha256', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380853, 'name': 'ECDHE-PSK-AES128-CBC-SHA', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-AES128-CBC-SHA TLSv1 Kx=ECDHEPSK Au=PSK  Enc=AES(128)  Mac=SHA1', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha1', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50331830, 'name': 'RSA-PSK-AES128-CBC-SHA256', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-AES128-CBC-SHA256 TLSv1 Kx=RSAPSK   Au=RSA  Enc=AES(128)  Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha256', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331826, 'name': 'DHE-PSK-AES128-CBC-SHA256', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-AES128-CBC-SHA256 TLSv1 Kx=DHEPSK   Au=PSK  Enc=AES(128)  Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha256', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331796, 'name': 'RSA-PSK-AES128-CBC-SHA', 'protocol': 'SSLv3', 'description': 'RSA-PSK-AES128-CBC-SHA  SSLv3 Kx=RSAPSK   Au=RSA  Enc=AES(128)  Mac=SHA1', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha1', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331792, 'name': 'DHE-PSK-AES128-CBC-SHA', 'protocol': 'SSLv3', 'description': 'DHE-PSK-AES128-CBC-SHA  SSLv3 Kx=DHEPSK   Au=PSK  Enc=AES(128)  Mac=SHA1', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha1', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50380954, 'name': 'ECDHE-PSK-CAMELLIA128-SHA256', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-CAMELLIA128-SHA256 TLSv1 Kx=ECDHEPSK Au=PSK  Enc=Camellia(128) Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'camellia-128-cbc', 'digest': 'sha256', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380952, 'name': 'RSA-PSK-CAMELLIA128-SHA256', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-CAMELLIA128-SHA256 TLSv1 Kx=RSAPSK   Au=RSA  Enc=Camellia(128) Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'camellia-128-cbc', 'digest': 'sha256', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50380950, 'name': 'DHE-PSK-CAMELLIA128-SHA256', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-CAMELLIA128-SHA256 TLSv1 Kx=DHEPSK   Au=PSK  Enc=Camellia(128) Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'camellia-128-cbc', 'digest': 'sha256', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331822, 'name': 'PSK-AES128-CBC-SHA256', 'protocol': 'TLSv1.0', 'description': 'PSK-AES128-CBC-SHA256   TLSv1 Kx=PSK      Au=PSK  Enc=AES(128)  Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha256', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50331788, 'name': 'PSK-AES128-CBC-SHA', 'protocol': 'SSLv3', 'description': 'PSK-AES128-CBC-SHA      SSLv3 Kx=PSK      Au=PSK  Enc=AES(128)  Mac=SHA1', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'aes-128-cbc', 'digest': 'sha1', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380948, 'name': 'PSK-CAMELLIA128-SHA256', 'protocol': 'TLSv1.0', 'description': 'PSK-CAMELLIA128-SHA256  TLSv1 Kx=PSK      Au=PSK  Enc=Camellia(128) Mac=SHA256', 'strength_bits': 128, 'alg_bits': 128, 'aead': False, 'symmetric': 'camellia-128-cbc', 'digest': 'sha256', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50380859, 'name': 'ECDHE-PSK-NULL-SHA384', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-NULL-SHA384   TLSv1 Kx=ECDHEPSK Au=PSK  Enc=None      Mac=SHA384', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha384', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380858, 'name': 'ECDHE-PSK-NULL-SHA256', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-NULL-SHA256   TLSv1 Kx=ECDHEPSK Au=PSK  Enc=None      Mac=SHA256', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha256', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50380857, 'name': 'ECDHE-PSK-NULL-SHA', 'protocol': 'TLSv1.0', 'description': 'ECDHE-PSK-NULL-SHA      TLSv1 Kx=ECDHEPSK Au=PSK  Enc=None      Mac=SHA1', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha1', 'kea': 'kx-ecdhe-psk', 'auth': 'auth-psk'}, {'id': 50331833, 'name': 'RSA-PSK-NULL-SHA384', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-NULL-SHA384     TLSv1 Kx=RSAPSK   Au=RSA  Enc=None      Mac=SHA384', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha384', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331832, 'name': 'RSA-PSK-NULL-SHA256', 'protocol': 'TLSv1.0', 'description': 'RSA-PSK-NULL-SHA256     TLSv1 Kx=RSAPSK   Au=RSA  Enc=None      Mac=SHA256', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha256', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331829, 'name': 'DHE-PSK-NULL-SHA384', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-NULL-SHA384     TLSv1 Kx=DHEPSK   Au=PSK  Enc=None      Mac=SHA384', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha384', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331828, 'name': 'DHE-PSK-NULL-SHA256', 'protocol': 'TLSv1.0', 'description': 'DHE-PSK-NULL-SHA256     TLSv1 Kx=DHEPSK   Au=PSK  Enc=None      Mac=SHA256', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha256', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331694, 'name': 'RSA-PSK-NULL-SHA', 'protocol': 'SSLv3', 'description': 'RSA-PSK-NULL-SHA        SSLv3 Kx=RSAPSK   Au=RSA  Enc=None      Mac=SHA1', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha1', 'kea': 'kx-rsa-psk', 'auth': 'auth-rsa'}, {'id': 50331693, 'name': 'DHE-PSK-NULL-SHA', 'protocol': 'SSLv3', 'description': 'DHE-PSK-NULL-SHA        SSLv3 Kx=DHEPSK   Au=PSK  Enc=None      Mac=SHA1', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha1', 'kea': 'kx-dhe-psk', 'auth': 'auth-psk'}, {'id': 50331825, 'name': 'PSK-NULL-SHA384', 'protocol': 'TLSv1.0', 'description': 'PSK-NULL-SHA384         TLSv1 Kx=PSK      Au=PSK  Enc=None      Mac=SHA384', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha384', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50331824, 'name': 'PSK-NULL-SHA256', 'protocol': 'TLSv1.0', 'description': 'PSK-NULL-SHA256         TLSv1 Kx=PSK      Au=PSK  Enc=None      Mac=SHA256', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha256', 'kea': 'kx-psk', 'auth': 'auth-psk'}, {'id': 50331692, 'name': 'PSK-NULL-SHA', 'protocol': 'SSLv3', 'description': 'PSK-NULL-SHA            SSLv3 Kx=PSK      Au=PSK  Enc=None      Mac=SHA1', 'strength_bits': 0, 'alg_bits': 0, 'aead': False, 'symmetric': None, 'digest': 'sha1', 'kea': 'kx-psk', 'auth': 'auth-psk'}]`
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNTgzNDU2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5OTk5ODM5Mw==,paho.mqtt.python,799998393,451,NA,rousku,2264792,,,NA,2021-03-16T06:43:12Z,2021-03-16T06:43:12Z,"> [SSL: SSLV3_ALERT_ILLEGAL_PARAMETER] sslv3 alert illegal parameter (_ssl.c:1108

^ Is the result of client using incorrect psk. Remember to supply psk as byte array, eg. bytes.fromhex(""10ab45ce"");","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5OTk5ODM5Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs479Bei,paho.mqtt.python,1005852578,451,NA,rjma30,12559776,,,NA,2022-01-05T15:59:17Z,2022-01-05T15:59:17Z,"Hi @rousku, how can I add identity? Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs479Bei/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5HHILO,paho.mqtt.python,1193050830,451,NA,maovidal,13444566,Mauricio Vidal,,NA,2022-07-23T03:39:43Z,2022-07-23T03:39:43Z,"Hi all!

May I have any pointers on how to achieve the proposed in this issue?

I have tried to follow @gennadykr and @pavel-ch steps using `sspsk2`. However I'm getting this error on my client when attempting the connection:

```
File ""/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/ssl.py"", line 1341, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:997)
```

The broker is a `Mosquitto 2.0.14` running in a `docker` container from the official image, which reports this when the connection is attempted:
```
1658538579: OpenSSL Error[0]: error:1417A0C1:SSL routines:tls_post_process_client_hello:no shared cipher
```

To isolate the problem, I decided to test the broker with:
```
mosquitto_sub --psk-identity MyDevice --psk 1234 -h localhost -p 8883 -t TestTopic -u MyUser -P MyUserPassword -i TheReceiver
mosquitto_pub --psk-identity MyDevice --psk 1234 -h localhost -p 8883 -t TestTopic -u MyUser -P MyUserPassword -m Hello -i TheSender
```

The above successfully worked with a `psk` file that has this content:
```
MyDevice:1234
``` 

Then my problem should be arround my client. My development environment is based on a `Intel macOS 12.5` with `openssl@3` via `brew` and  `sspsk2` installed using `ARCHFLAGS=""-arch x86_64"" pip3 install sslpsk2` otherwise `pip` complained about an unsupported achitecture.

`print(context.get_ciphers())` provides plenty of PSK ciphers, so I guess my setup is not the problem.

What other tests should I perform?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5HHILO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5HHe7O,paho.mqtt.python,1193144014,451,NA,maovidal,13444566,Mauricio Vidal,,NA,2022-07-23T15:37:34Z,2022-07-23T15:37:34Z,"This morning I had published the code I'm using to test the implementation. It is not working yet and any help would be much appreciated.

Here it is: https://github.com/maovidal/paho_sslpsk2_demo/blob/main/paho_sslpsk2_demo.py","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5HHe7O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WWx24,paho.mqtt.python,1448811960,451,NA,pat1,3214854,Paolo Patruno,,NA,2023-02-28T20:07:34Z,2023-02-28T20:07:34Z,"Any news ? There is a working example ?
I am using @maovidal example but it do not work. On mosquitto broker I get:
```
OpenSSL Error[0]: error:14094417:SSL routines:ssl3_read_bytes:sslv3 alert illegal parameter
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WWx24/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WcvUU,paho.mqtt.python,1450374420,451,NA,pat1,3214854,Paolo Patruno,,NA,2023-03-01T15:48:22Z,2023-03-01T15:48:22Z,"setting TLS version:
``` 
     context = SSLPSKContext(ssl.PROTOCOL_TLSv1_2)
```
it works!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WcvUU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WyCIm,paho.mqtt.python,1455956518,451,NA,pat1,3214854,Paolo Patruno,,NA,2023-03-06T11:24:50Z,2023-03-06T11:24:50Z,"references about use of TLSv1_2 for PSK in mosquitto:
https://github.com/eclipse/mosquitto/commit/ea371564e7bc6e4402ff2a80b768b649644b18f2
https://www.eclipse.org/lists/mosquitto-dev/msg02722.html","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5WyCIm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/451,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIm8,paho.mqtt.python,1868597692,451,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:38:00Z,2023-12-24T21:38:00Z,Closing this as it appears you found a solution; if questions remain please reopen with details.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIm8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/452,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/452,paho.mqtt.python,539513818,452,Error loading plugin paho-mqtt,stefanbschneider,28340802,Stefan Schneider,,CLOSED,2019-12-18T07:47:46Z,2023-12-24T00:25:07Z,"I'm using `tavern` for API testing, which internally apparently uses `paho-mqtt`. Currently, I'm getting the following error when running my tests:

```
E   tavern.util.exceptions.PluginLoadError: Error loading plugin paho-mqtt = tavern._plugins.mqtt.tavernhook - [Errno 20] Not a directory: '/usr/local/lib/python3.6/site-packages/tavern-0.26.1-py3.6.egg/tavern/_plugins/mqtt/schema.yaml'
```

I'm using versions

```
paho-mqtt==1.3.1
tavern==0.26.1
```

Strangely, the tests pass fine when executing them locally and the error only occurs when building and running them in Docker containers, eg, in Jenkins.

* Container build: https://github.com/sonata-nfv/tng-sdk-project/blob/master/pipeline/build/build.sh
* Unit tests: https://github.com/sonata-nfv/tng-sdk-project/blob/master/pipeline/unittest/test.sh

I further described the issue here: https://github.com/taverntesting/tavern/issues/314
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/452/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/452,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXX64,paho.mqtt.python,1868398264,452,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:25:06Z,2023-12-24T00:25:06Z,Closing this as it looks like the issue was sorted on the tavern repo.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXX64/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/453,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/453,paho.mqtt.python,542091800,453,Force close sockets after use,kaizensparc,3254450,Kaizen Sparc,,CLOSED,2019-12-24T11:03:41Z,2023-12-24T02:20:59Z,"Hello, 
I'm using the library in a long-running script where I frequently connect/disconnect to brokers. After a few hours/days, I cannot connect anymore due to ""too many open files"" error. In fact after checking the open sockets with `lsof` I end up with hundreds of open sockets when idle.

It seems the MQTT client class relies on `__del__` method (and thus in the garbage collector) to close the sockets, which gives unpredictable results. Is there any way to force close the sockets when disconnecting? I was thinking maybe exporting the `_reset_sockets` method?

Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/453/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/453,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNzQwMzk0Ng==,paho.mqtt.python,827403946,453,NA,kevalRPansuriya,37825293,Keval.Pansuriya,,NA,2021-04-27T08:02:54Z,2021-04-27T08:02:54Z,I am experiencing the same issue I am performing a test where I disconnect from the broker every 30 seconds this left too many open sockets which is not getting closed in my case.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNzQwMzk0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/453,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcPZ,paho.mqtt.python,1868415961,453,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:20:59Z,2023-12-24T02:20:59Z,"I'm going to close this due to inactivity (the library has changed since this was raised). Please feel free to reopen, but if you do please provide a minimal example and details about your environment (OS etc). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcPZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,paho.mqtt.python,542471799,454,why connect() returns but connection is not established?,charleshuangcai,57748975,,,CLOSED,2019-12-26T07:55:31Z,2025-02-14T23:09:04Z,"paho version is 1.5.0, python 3.8
code example:
client.connect(host=self.__profile.get_host(), port=self.__profile.get_port(),
                                       keepalive=self.__profile.get_keep_alive_interval())
client.loop_start()
client.is_connected()

but client.is_connect() reslut is false.  why sync method connect returns but connection is not established?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MTU2MjE1OA==,paho.mqtt.python,571562158,454,NA,smuu,18609909,smuu,,NA,2020-01-07T12:13:13Z,2020-01-07T12:13:13Z,"Have the same problem and can't find a solution.

client.connect(..) returns 0 (MQTT_ERR_SUCCESS) so no error occur while connecting.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MTU2MjE1OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MTU2NTkwNA==,paho.mqtt.python,571565904,454,NA,smuu,18609909,smuu,,NA,2020-01-07T12:25:57Z,2020-01-07T12:25:57Z,"I have another python script to publish data to mqtt.

```
client.connect(host, port)
client.is_connected()
client.publish(topic, message)
client.disconnect()
```

client.is_connected() returns False but data get published to the mqtt broker.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3MTU2NTkwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3ODY4NDc4OA==,paho.mqtt.python,578684788,454,NA,cjdcordeiro,4047767,Cristovao Cordeiro,,NA,2020-01-27T10:28:56Z,2020-01-27T10:28:56Z,same here,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3ODY4NDc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDA0NDY0MA==,paho.mqtt.python,580044640,454,NA,billimek,6393612,Jeff Billimek,jeff@billimek.com,NA,2020-01-30T01:38:24Z,2020-01-30T01:38:24Z,observing the same behavior,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDA0NDY0MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDExNzc2NQ==,paho.mqtt.python,580117765,454,NA,smuu,18609909,smuu,,NA,2020-01-30T07:21:58Z,2020-01-30T07:21:58Z,"For me was the problem, that I used websockets at the mqtt broker and forgot to specify that while creating the client.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4MDExNzc2NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTYxMTM4OQ==,paho.mqtt.python,599611389,454,NA,denravonska,135439,Marco Nilsson,denravonska@gmail.com,NA,2020-03-16T15:49:41Z,2020-03-16T15:49:41Z,Same issue here. `connect` is asynchronous and requires an event loop. That defeats the purpose of a synchronous variant.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5OTYxMTM4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NTA5NjU5MA==,paho.mqtt.python,665096590,454,NA,dxmann,5407393,Daniele Mannocchi,,NA,2020-07-28T15:07:18Z,2020-07-28T15:07:18Z,"I'm working with AWSIoT.
After understanding that is not useful set the CA cert path, I have encountered your same problem. Looking on called callbacks I have on_disconnected called with error code 1: as wrote [here](http://www.steves-internet-guide.com/client-connections-python-mqtt/), 1 is ""Connection refused – incorrect protocol version"".
so I set the protocol to MQTTv311, the only one used by AWSIot, but with the same result.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2NTA5NjU5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwODY1MjkxNw==,paho.mqtt.python,708652917,454,NA,eohlde,40407768,Erich Ohlde,,NA,2020-10-14T20:51:09Z,2020-10-14T20:51:09Z,"Same issue here. is_connected() always returns False, but MQTT data is being published. I have also overridden the on_connect and on_disconnect callbacks and they are never triggered. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwODY1MjkxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NTEzMTA1Nw==,paho.mqtt.python,755131057,454,NA,wanZzz6,28629837,wanZzz,1343837706@qq.com,NA,2021-01-06T07:17:36Z,2021-01-06T07:17:36Z,Have the same problem,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NTEzMTA1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNjcwODA3MA==,paho.mqtt.python,816708070,454,NA,Haifischbecken,58732614,Florian Oppermann,,NA,2021-04-09T14:06:35Z,2021-04-09T14:06:35Z,"Ran into a similar problem, I didn't know that calling `client.tls_set_context()` or `client.tls_set()` was necessary as it wasn't part of any introduction I found online and I'm quit new to this whole networking thing.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNjcwODA3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43ZMnw,paho.mqtt.python,929352176,454,NA,chengchenglee,9875546,,,NA,2021-09-28T15:45:15Z,2021-09-28T15:45:15Z,"> 
> 
> I'm working with AWSIoT. After understanding that is not useful set the CA cert path, I have encountered your same problem. Looking on called callbacks I have on_disconnected called with error code 1: as wrote [here](http://www.steves-internet-guide.com/client-connections-python-mqtt/), 1 is ""Connection refused – incorrect protocol version"". so I set the protocol to MQTTv311, the only one used by AWSIot, but with the same result.

Same here.
I am using aws iot mqtt for data transmit.

I am using mqtt_bridge.

every time , the _on_disconnect_ will give the response code 1 back .

I do not know how to solve it.
I also raised a question here.
https://github.com/groove-x/mqtt_bridge/issues/61","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43ZMnw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44kb9h,paho.mqtt.python,949075809,454,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2021-10-21T23:27:17Z,2021-10-21T23:27:17Z,"Connecting to a broker is a two stage process:
* Establish a connection (TCP/TLS/Websocket etc)
* Perform the MQTT connection handshake (`CONNECT`/`CONNACK`)

Taking a look at [the source](https://github.com/eclipse/paho.mqtt.python/blob/71e29222421b83774af8c241898d4f1f15f58b8d/src/paho/mqtt/client.py#L911) it appears that `connect` returns when the first step (establish network connection) is complete and the CONNECT packet has been sent ([`connect`](https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L885) returns [`reconnect()`](https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L1012) returns [`_send_connect()`](https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L2718)).  At this point in time the second part of the process (receiving/processing the `CONNACK`) has not happened; that happens latter within the [network loop code](https://github.com/eclipse/paho.mqtt.python/blob/71e29222421b83774af8c241898d4f1f15f58b8d/src/paho/mqtt/client.py#L2969). Code called within the loop:
* Updates the connection status (returned by `is_connected()`)
* Calls the `on_connect` callback

This has a few implications:
* Some functionality relies upon the network loop. If the network loop is not run `is_connected()` will return `false` and callbacks such as `on_connect` will not be called. 
* `is_connected()`  will return `false` if called soon after `connect` (or for ever if the loop is not called/running) because the connection state is only updated when the `CONNACK` is received/processed. Using the callback `on_connected' is the best way to handle this (do not assume the connection is up until this is called).
* It is possible that the broker will reject the connection due to something within the `CONNECT` packet (meaning  `connect` returns without error but `is_connected()` continues to evaluate to false). When this happens `on_disconnect` should get called if the loop is run (this is what @chengchenglee is seeing).
* `publish` *may* succeed without a network loop (but messages may also just be dropped and, as `PUBACK`/`PUBCOMP` will not be handled, QOS1/2 transactions will not complete).

The above is my assessment based upon a review of the code; I'd appreciate it if someone could confirm my findings and I'll propose some updates to the docs.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44kb9h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5URmmC,paho.mqtt.python,1413900674,454,NA,FeroxTL,1344549,Юрий,,NA,2023-02-02T15:11:32Z,2023-02-02T15:11:32Z,"Made cool workaround:

```python

def connect():
    client = mqtt.Client()
    client.connect(host=""host"", port=""port"")

    started = time.time()
    while time.time() - started < 5.0:
        client.loop()
        if client.is_connected():
            return client

    raise OSError('Not connected')
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5URmmC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcL2,paho.mqtt.python,1868415734,454,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:19:03Z,2023-12-24T02:19:03Z,Closing this because my PR (#615) to update the documentation has now been accepted. Hopefully that will clarify things a bit!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcL2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/454,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ekx5j,paho.mqtt.python,2660441699,454,NA,stefan-sherwood,2094779,,,NA,2025-02-14T23:09:02Z,2025-02-14T23:09:02Z,"I had this same problem and I updated my code to start the network traffic processing thread and the connected state now shows correctly.

```
import paho.mqtt.client as mqtt
client = mqtt.Client( mqtt.CallbackAPIVersion.VERSION2, ""my_device"" )
client.connect( 'my_mqtt_server.lan' )
client.loop_start()
```

There are multiple loop functions, [documented in the main documentation](https://github.com/eclipse-paho/paho.mqtt.python#network-loop) and included in the example code. If you don't use them a bunch of things, including `client.is_connected()` do not work properly.

Note that `client.is_connected()` is updated asynchronously so its value immediately after connecting is not reliable.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ekx5j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/455,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/455,paho.mqtt.python,544560009,455,Make AsyncioHelper part of the library proper,micolous,246847,micolous,,OPEN,2020-01-02T12:29:02Z,2024-01-07T22:26:38Z,"The [`AsyncioHelper` class](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py) is really helpful in using this library with `asyncio`.

As `asyncio` and `async def` are part of the Python v3.5+, it would be helpful if this was a proper part of `paho.mqtt.python` (minus `print` statements), rather than merely a standalone example.  That way, software using this library doesn't need to ship its own copy of that class.

For compatibility with older versions of Python, this should be in its own module.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/455/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/455,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NjA0MjA5MA==,paho.mqtt.python,576042090,455,NA,newAM,7845120,Alex Martens,,NA,2020-01-19T20:14:13Z,2020-01-19T20:14:13Z,"Additionally, it would be nice to get native `asyncio` support to use coroutine functions for callback (`async def on_connect(self, client, userdata, flags, rc):`)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU3NjA0MjA5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/455,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTg3NTczOQ==,paho.mqtt.python,609875739,455,NA,frederikaalund,545423,Frederik Aalund,frederikaalund@gmail.com,NA,2020-04-06T15:47:23Z,2020-04-06T15:47:23Z,"[asyncio-mqtt](https://github.com/sbtinstruments/asyncio-mqtt) provides an idiomatic asyncio-based interface. It's a tiny wrapper (250 lines of code) around paho-mqtt. asyncio-mqtt replaces callbacks with `async with` and `async for` statements.

This enables you to write code like this:
```
async with Client('test.mosquitto.org') as client:
    await client.subscribe('floors/#')

    async with client.filtered_messages('floors/+/humidity') as messages:
        async for message in messages:
            print(message.decode())
```

It's all paho-mqtt underneath, so you still have the time-proven stability and large feature set of paho-mqtt.

Full disclosure: I'm the author of asyncio-mqtt. :) Feel free to take inspiration from the design and implementation of asyncio-mqtt. I'd also be happy to see asyncio-mqtt directly integrated into paho-mqtt.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwOTg3NTczOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/456,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/456,paho.mqtt.python,548086150,456,connect does not return,refigh,7396325,Refigh,,CLOSED,2020-01-10T13:41:31Z,2023-12-24T02:26:38Z,"Hello,
when the server is not available, the client call to connect, gets stuck there, and does not return. When the server becomes available again, it does not continue.
In those situations, I also see ""Error <class 'socket.timeout;> occurred, but not sure it is related to this.
Any idea to solve this?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/456/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/456,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcY3,paho.mqtt.python,1868416567,456,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:26:38Z,2023-12-24T02:26:38Z,I'm going to close this due to it's age and lack of a reproducible example/logs. At a minimum please share your code.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcY3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,paho.mqtt.python,548405878,457,socket.error: [Errno 111] Connection refused,sergge1,49363121,,,CLOSED,2020-01-11T09:22:55Z,2024-01-07T22:12:51Z,"Hello.

I have _eclipse-mosquitto_ as a mqtt broker and _paho-mqtt_ as a mqtt client installed at the same box, which is Raspberry Pi 3 B+.

**Current behavior**:
The client paho.mqtt.python ended with socket.error no.111. if my broker is unreachable (just did not started yet prior to the client).

**Expected behavior**:
Client should make attempts to reconnect until the broker did not become active/reachable. 

**Traceback**

```
pi@raspberrypi:~/mqtt_clients $ sudo python pir.py
Script started. PIR sensor is activated. Looking for a movement...
Traceback (most recent call last):
  File ""pir.py"", line 59, in <module>
    main()
  File ""pir.py"", line 34, in main
    motion_off()
  File ""pir.py"", line 46, in motion_off
    client.connect(BROKER_ADDRESS, BROKER_PORT)
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 937, in connect
    return self.reconnect()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1071, in reconnect
    sock = self._create_socket_connection()
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 3522, in _create_socket_connection
    return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
  File ""/usr/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
socket.error: [Errno 111] Connection refused

```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MzU2MzY4MQ==,paho.mqtt.python,593563681,457,NA,bkrajendra,994083,Rajendra,bkrajendra@gmail.com,NA,2020-03-02T19:03:08Z,2020-03-02T19:03:08Z,"I was also getting this similar issue.
But for me everything was working fine and suddenly one fine day it started throwing this error.
First make sure you can connect to your broker normally from other test clients.

I resolve it by changing transport to websockets.
https://github.com/eclipse/paho.mqtt.python/issues/467#issuecomment-593561726","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MzU2MzY4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0MTcxMDU4MQ==,paho.mqtt.python,841710581,457,NA,wonx,2736639,Marc Palaus,,NA,2021-05-15T19:12:13Z,2021-05-15T19:12:13Z,I also have the same issue. I don't know how to let the script keep retrying until a connection has been stablished.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0MTcxMDU4MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs494zM_,paho.mqtt.python,1038299967,457,NA,martopg,94135085,,,NA,2022-02-13T17:56:13Z,2022-02-13T17:56:13Z,"I had the issue described in the **Current behavior** section.  Tried websockets as suggested but that just caused different issues.

In my case, switching from Python 2.7 to 3.7 fixed the issue; on 3.7 it works with both tcp and websockets transports.

Likely works on newer versions of 3.x as well but haven't tested.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs494zM_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/457,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEXSU,paho.mqtt.python,1880192148,457,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:12:50Z,2024-01-07T22:12:50Z,"I'm going to close this due to it's age/inactivity (sorry that no-one responded) and the fact that the next release will only support Python 3.7+ (which comments above indicate may resolve the issue). In addition support for `socket.error` was removed back in August 2021.

If you are still experiencing this issue (with the current release and Python 3.7+) then please feel free to reopen. Unfortunately, as you will note from the lack of response, we have limited resources so will not be able to provide support for old python versions.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEXSU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/458,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/458,paho.mqtt.python,550763020,458,How to use MQTT concept in FLASK REST API ?,vvksahoo,56999733,,,CLOSED,2020-01-16T12:00:21Z,2020-01-20T05:38:15Z,"I have a requirement where will have a POST api call ,read the json data from this and publish the messages to this topic ""/home/floor_1/room"" and return a success response .
Project structure:
````
│   app.py
│   config.py
│   Dockerfile
│   requirement.txt
│
├───app_services
│   │   __init__.py
│   │
│   ├───controller
│   │   │   send_downlink_cmd.py
│   │   │   __init__.py
│   │
│   ├───models
│   │   │   __init__.py
│   │   │
│   │   ├───database
│   │   │   │   device.py
`````
In app.py
```
from app_services import app

if __name__ == '__main__':
    app.run(host=app.config['HOST'], port=app.config['PORT'], debug=app.config['DEBUG'])
```
in app_service/__init__.py
```
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api
from flask_mqtt import Mqtt
from app_service.controller.send_down_link import SendDownlink

app = Flask(__name__)
db = SQLAlchemy(app)
mqtt = Mqtt(app)
api = Api(app)
api.add_resource(SendDownlink, ""/api/t1/device/"")
```
In controller/send_down_link.py:
```
class SendDownlink(Resource):
       def post(self):
         input_data =  request.get_json()
        message = input_data['message']
```
I want to publish this message to ""/home/floor_1/room"" topic . So i just want accommodate mqtt code in this 'post' method. Dont know how to work around it .How do i connect to broker ?  Any suggestion ?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/458/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/459,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/459,paho.mqtt.python,556468576,459,Failed to receive on socket: [Errno 104] Connection reset by peer,marcomiglionico94,19528605,Marco Miglionico,,CLOSED,2020-01-28T21:06:37Z,2024-01-08T03:57:05Z,"I am using paho.mqtt on a Jetson Nano and I am running the following example code from https://www.cloudmqtt.com/docs/python.html using my connection credentials.

The problem is that I am getting the following error:
""failed to receive on socket: [Errno 104] Connection reset by peer"".

If I run the same code on my Mac instead of the Jetson Nano it is working","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/459/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/459,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42Ol5C,paho.mqtt.python,909794882,459,NA,vnrgoli,6668347,,,NA,2021-09-01T01:45:25Z,2021-09-01T01:45:25Z,Did you fix this? I am getting same error on Raspi.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42Ol5C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/459,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE-hC,paho.mqtt.python,1880352834,459,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:57:05Z,2024-01-08T03:57:05Z,"The error is to be expected if the connection drops (which can happen). More information (e.g. your code, details of what happens - does this cause the loop to stop etc) would be needed to assist.

However as this issue is quite old I'm going to close it; if you are still having the issue (with the latest release) then please feel free to reopen (ideally with more info).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE-hC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/461,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/461,paho.mqtt.python,559346172,461,Docstring for client.proxy_set(),lxnzr,6199598,Lex Nemzer,,CLOSED,2020-02-03T21:29:58Z,2024-01-07T07:55:47Z,"The new SOCKS proxy support in v1.5.0 is great, thanks for the effort that went into it. 

The proxy_set method's documentation seems to be missing the `proxy_port` parameter, though, which when missing leads to a silent failure rather than either raising an exception or using a default.

I figured this out by reading the _get_proxy() implementation, but only after trying to chase down other problems in my test setup.

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L871
```
    proxy_type: One of {socks.HTTP, socks.SOCKS4, or socks.SOCKS5}
    proxy_addr: IP address or DNS name of proxy server
```

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3645
```
    ""proxy_type"": socks.SOCKS5,
    ""proxy_addr"": parts.hostname,
    ""proxy_port"": parts.port
```


I don't have time to do a PR today, but if no one else does either, I'm happy to come back to it later in the week. (Also, the section of _get_proxy() I quoted isn't actually where the parameter gets used, it's just an alternate way of setting it. Someone familiar with the implementation could document the usage more accurately than me.)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/461/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/461,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDk3L,paho.mqtt.python,1879985611,461,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T07:55:47Z,2024-01-07T07:55:47Z,PR updating docs has now been committed so closing this issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDk3L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/462,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/462,paho.mqtt.python,560920308,462,problem with sending MQTT PUBLISH when using multiprocessing,mttbx,38148377,,,CLOSED,2020-02-06T10:32:23Z,2020-02-07T02:54:19Z,I noticed that others have the same problem! Please give us some feedback...,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/462/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463,paho.mqtt.python,561040522,463,Does paho support $share/group/ features,Jean-PhilippeD,14221237,,,CLOSED,2020-02-06T14:16:05Z,2024-01-07T03:06:34Z,"Hello,
I'd like to use the $share features with rabbitmq broker.
I've tried with the standard format `$share/my_group/my_topic/#` but when I publish a message to `my_topic/ ` my client does not receive the message.
Thus I'm not sure either rabbitmq or paho mqtt supports it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4Mjk3MjY4Mg==,paho.mqtt.python,582972682,463,NA,Jean-PhilippeD,14221237,,,NA,2020-02-06T15:56:47Z,2020-02-06T15:56:47Z,"It seems rabbitmq-mqtt does not yet support mqttv5 
https://github.com/rabbitmq/rabbitmq-mqtt/issues/194","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU4Mjk3MjY4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46egLw,paho.mqtt.python,981074672,463,NA,hardillb,1800845,Ben Hardill,hardillb@gmail.com,NA,2021-11-28T12:12:48Z,2021-11-28T12:12:48Z,Shared subscriptions is a property of the broker not the client,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46egLw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/463,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDVl5,paho.mqtt.python,1879923065,463,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:06:34Z,2024-01-07T03:06:34Z,Closing this due to inactivity and the fact that an answer has been provided.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDVl5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/467,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/467,paho.mqtt.python,574143087,467,socket.error: [Errno 104] Connection reset by peer,bkrajendra,994083,Rajendra,bkrajendra@gmail.com,CLOSED,2020-03-02T17:52:42Z,2024-01-07T05:07:55Z,"Recently I am getting this error from the python client on my one of the VPS

```
Traceback (most recent call last):
  File ""mqtt.py"", line 30, in <module>
    client.connect(""MYSECRET.MQTT.BROKER"", 8883, 60)
  File ""/usr/lib/python2.7/site-packages/paho/mqtt/client.py"", line 937, in connect
    return self.reconnect()
  File ""/usr/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1100, in reconnect
    sock.do_handshake()
  File ""/usr/lib64/python2.7/ssl.py"", line 831, in do_handshake
    self._sslobj.do_handshake()
socket.error: [Errno 104] Connection reset by peer
```

Settings is very simple.
I have my mqtt broker (mosquitto) on one VPS and I am connecting it from python client on another VPS. Everything was working fine till I ran update on both machines.
Or dont know what triggered this.

code I am using is:
```
#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author : Rajendra Khope
import paho.mqtt.client as mqtt
import ssl
import sys

user = ""IAMNOTTELLINGYOU""
passw =""IAMNOTTELLINGYOU""
# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
	print(""Connected with result code ""+str(rc))
	client.subscribe(""testings"")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
	print ""Topic: "", msg.topic+""\nMessage: ""+str(msg.payload)

client = mqtt.Client()
client.tls_set()
client.tls_insecure_set(True) 

client.username_pw_set(user,passw)
client.on_connect = on_connect
client.on_message = on_message

client.connect(""HIDDENSERVER"", 8883, 60)
client.publish(""data/deviceInfo"", ""Hello"", qos=0, retain=False)

```

Most important thing is that same code if I run it from my local machine works fine.
All other type of clients (Secure Websocket from browser, mqtt ssl from android and other ) works fine with my borker.
Only connection from this specific VPS with this above code does not work.
On broker I get log:
```
Client connection from CLIENTVPSIP failed: error:140760FC:SSL routines:SSL23_GET_CLIENT_HELLO:unknown protocol.

```
Pleas help to resolve this issue.


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/467/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/467,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MzU2MTcyNg==,paho.mqtt.python,593561726,467,NA,bkrajendra,994083,Rajendra,bkrajendra@gmail.com,NA,2020-03-02T18:59:01Z,2020-03-02T18:59:01Z,"Temporarily I have resolved the issue by changing my transport to `websockets`

```client = mqtt.Client(transport=""websockets"")```
and changing port from ssl tcp to ssl websocket.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5MzU2MTcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/467,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDbQe,paho.mqtt.python,1879946270,467,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T05:07:55Z,2024-01-07T05:07:55Z,"Apologies for the lack of response on this. Unfortunately, due to the issues age, I'm going to close it (because it's likely that both machines have been updated a number of times since this was logged).

If you are still having issues please reopen the isue and provide the OS and version of each machine and the output of `openssl version` (my guess is that one of the machines was updated to a version that raised the minimum TLS version supported to a level above what the other one supported - that's just a guess tho!).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDbQe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/468,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/468,paho.mqtt.python,574426610,468,How to add message_callback_add() in client_sub-class.py?,vvksahoo,56999733,,,CLOSED,2020-03-03T05:31:12Z,2024-01-08T03:32:59Z,"I was going through this example folder scripts . Ocean of Thanks , its save lot of times . I would like to follow  ""paho.mqtt.python/examples/client_sub-class.py "" this scripts . I have one silly doubts that how can we add message_callback_add() in this scripts ? 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/468/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/468,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5ODc1Mzg1Nw==,paho.mqtt.python,598753857,468,NA,makoit,42139290,,,NA,2020-03-13T14:42:52Z,2020-03-13T14:42:52Z,"I have the same question. I tried this in the class __init__ function


```
import paho.mqtt.client as mqtt
import uuid

class MqttClient(mqtt.Client):

    def __init__(self, client_name, log=True, **kwargs):

        #  own MqttClient class inherit all the methods and properties from mqtt.Client
        super(MqttClient, self).__init__(client_name + ""_"" + str(uuid.uuid1()), **kwargs)

        # assign event handlers to client instance
        self._on_connect = self.on_connect
        self._on_message = self.on_message
        self._on_publish = self.on_publish
        self._on_subscribe = self.on_subscribe

        # if true enable debug messages
        if log:
             self._on_log = self.on_log

    # Define event callbacks

    def on_connect(self, userdata, flags, rc):
        # value of rc determines success or not
        if rc == 0:
            print(""on_connect: client connection successful"")
        elif rc == 1:
            print(""on_connect: client connection refused - incorrect protocol version"")
        elif rc == 2:
            print(""on_connect: client connection refused - invalid client identifier"")
        elif rc == 3:
            print(""on_connect: client connection refused - server unavailable"")
        elif rc == 4:
            print(""on_connect: client connection refused - bad username or password"")
        elif rc == 5:
            print(""on_connect: client connection refused - not authorised"")

    def on_message(self, obj, msg):
        print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))

    def on_publish(self, obj, mid):
        print(""mid: "" + str(mid))

    def on_subscribe(self, obj, mid, granted_qos):
        print(""Subscribed: "" + str(mid) + "" "" + str(granted_qos))

    def on_log(self, obj, level, string):
        print(string)

    # client methods


    def client_run(self, hostname, port_num, keep_alive=60):
        self.connect(host=hostname, port=port_num, keepalive=keep_alive)
        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc

    def client_connect(self, hostname, port_num, keep_alive=60):
        self.connect(host=hostname, port=port_num, keepalive=keep_alive)

    def client_disconnect(self):
        self.disconnect()
```
    



But it does not work. It looks like the handlers are never called... I can not see any log in my command line...

Is there any solution?

Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5ODc1Mzg1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/468,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE7bY,paho.mqtt.python,1880340184,468,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:32:59Z,2024-01-08T03:32:59Z,"I'm not really clear what the issue is here; the following works fine for me:

```
import paho.mqtt.client as mqtt


class MyMQTTClass(mqtt.Client):

    def on_connect(self, mqttc, obj, flags, rc):
        print(""rc: ""+str(rc))

    def blah(self, mqttc, userdata, message):
        print(""blah got message on topic: "" + message.topic)

    def run(self):
        self.connect(""mqtt.eclipseprojects.io"", 1883, 60)
        self.message_callback_add(""$SYS/#"", self.blah)
        self.subscribe(""$SYS/#"", 0)

        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc


# If you want to use a specific client id, use
# mqttc = MyMQTTClass(""client-id"")
# but note that the client id must be unique on the broker. Leaving the client
# id parameter empty will generate a random id for you.
mqttc = MyMQTTClass()
rc = mqttc.run()

print(""rc: ""+str(rc))
```

Given the age of this issue and the above solution I'm going to close it.

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE7bY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/469,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/469,paho.mqtt.python,574615039,469,NullPointerException in MqttCallbackExtended ,Turbozanik,7550948,,,CLOSED,2020-03-03T11:52:48Z,2020-03-12T08:57:38Z,"Gist: https://gist.github.com/Turbozanik/bacc394cca10430e189bbf5e379abaf0

Problem description:
NullPointerException in line 144 after creating new AndroidMqttClient.
Hotfix: We have added 0.5 second delay before and after calling init method.

We have an IoT application, that is receiving mqtt server ip and mac over mdns. So we have to recreate AndroidMqttClient every time we are receiving new data(for example user has changed his router and the mqtt server ip has been updated). 
You can see this code in line 183.
To create new AndroidMqttClient  and reset all it callbacks we are executing init() method.(line 183)
And any action we do after that will result in NPE in line 144.

Maybe you can explain why does this library behave like this? And maybe some approaches how can I fix this without 0.5 second workaround?

Atomics were added for testing purposes. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/469/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/469,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NjgwODY0NA==,paho.mqtt.python,596808644,469,NA,0xfadeef,30846958,,,NA,2020-03-09T22:25:34Z,2020-03-09T22:25:34Z,"You use Paho Java library in your example, but this is repo for Python library.

Here's correct link: https://github.com/eclipse/paho.mqtt.java/issues","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5NjgwODY0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/469,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5ODA3NjExMg==,paho.mqtt.python,598076112,469,NA,Turbozanik,7550948,,,NA,2020-03-12T08:57:38Z,2020-03-12T08:57:38Z,"Ooops, sorry. Got some brain lag.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDU5ODA3NjExMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/470,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/470,paho.mqtt.python,576169819,470,publish.single blocks forever when authentication fails,stereobutter,35063695,Sascha Desch,,CLOSED,2020-03-05T11:01:22Z,2023-12-23T23:26:31Z,"When using `publish.single` to publish a message to a broker and one used an invalid `username` and/or `password` the call blocks forever. I would have expected this to raise an exception; is this the intended behavior? 

**Disclaimer**: This might be the same issue as https://github.com/eclipse/paho.mqtt.python/issues/355, I don't know, since the issue description there is rather long winded and unclear.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/470/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/470,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzQwNTM5OA==,paho.mqtt.python,757405398,470,NA,sparky8512,76499194,,,NA,2021-01-10T03:08:35Z,2021-01-10T03:08:35Z,"FYI: Saw this issue while looking into same symptom, using paho-mqtt-1.5.0.

I tracked it down to an exception being swallowed from the on_connect handler publish.multiple (and therefor publish.single) uses. I believe it got fixed by 88688d85d3d6307a3da11c97d77dc1e29b52453a. After updating to paho-mqtt-1.5.1, I no longer get the blocking forever behavior.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzQwNTM5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/470,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVku,paho.mqtt.python,1868388654,470,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T23:26:31Z,2023-12-23T23:26:31Z,Closing this based on the comment above and lack of further activity.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXVku/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/471,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/471,paho.mqtt.python,577418411,471,Paho-MQTT message data from subscribe topic and write to a file *.txt/*.csv,patel999jay,5512610,Jay Patel,patel999jay@gmail.com,CLOSED,2020-03-07T23:48:15Z,2023-12-24T00:12:12Z,"Hi I am trying to subscribe to the messages/topics with paho-mqtt but which is not connecting to client. here is the snippet of the code.

```
import time
import sys
import os
from functools import partial

import paho.mqtt.client as mqttClient
# To convert *.txt to *.csv for later use.
# import pandas as pd

sys.path.append(os.path.join(os.path.dirname(__file__),'../'))
from src.node_utils import create_node_logger, connect_to_broker
from src import topics


class LoggingNode():
""""""# use to log the details of this two topics
# state_encoders = root + '/' + 'state_encoders'
# format
# Instance of State class
# estimates the robots position based on encoder ticks

# state_model = root + '/' + 'state_model'
# format
# Instance of State class for where the motion model estimates the
# robot will be based on wheel_velocity
#------------------------------------------------------------------#
#------------------------------------------------------------------# """"""
    def __init__(self, client, logger):
        self.state = None
        self.logger = logger
        self.client = client

    # initialize subscription to encoders and wheel_velocity
    def on_connect(self, userdata, flags, rc):
        suc1 = self.client.subscribe(topics.state_encoders)
        suc2 = self.client.subscribe(topics.state_model)
        self.logger.info('Connected and Subscribed: {} {}'.format(suc1, suc2))

    def on_message(self, client, userdata, message):
        print('heelo')
        print(""Message received: ""  + message.payload)
        with open('/home/test.txt','a+') as f:
             f.write(""Message received: ""  + message.payload + ""\n"")

    Connected = False   #global variable for the state of the connection

if __name__ == '__main__':
    node_name = 'logging_node'
    logger = create_node_logger(node_name)
    client = connect_to_broker()

    node = LoggingNode(client, logger)

    client.on_connect = node.on_connect
    client.message_callback_add(topics.state_model, node.on_message)
    logger.info('Started logging Node loop')


    try:
        client.loop_forever()
    except KeyboardInterrupt:
        logger.info(""KeyboardInterrupt seen"")
```

Here is the state model connected. This is publishing messages as well. Is there anyway I can put subscribe to the data and put that in the *.txt and/or *.csv ?

```bash
jay@jay-MS-7885:~/autonomous-class/src$ python3 state_estimation_node.py $HOSTNAME
2020-03-07 19:04:22,412 node:state_estimate INFO 
  Started state_estimate loop

2020-03-07 19:04:22,413 node:state_estimate INFO 
  Connected and Subscribed: (0, 3) (0, 4)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/471/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/471,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXMn,paho.mqtt.python,1868395303,471,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:12:11Z,2023-12-24T00:12:11Z,"Sorry - It's not really clear what your issue is (you say ""is not connecting to client"" but the logs indicate the connection is up). Given the questions age I'm going to close it (this kind of question is more likely to receive a quick answer on stack overflow).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXMn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472,paho.mqtt.python,578841629,472,Shared Subscription does not match topic using topic_matches_sub(),dmarsh19,8670277,Derek Marsh,,OPEN,2020-03-10T20:27:58Z,2024-01-08T00:37:11Z,"Using release 1.5.0

I would expect the behavior of this call to return True.
`topic_matches_sub(""$share/group/+/+/c"", ""a/b/c"")`
The `MQTTMessage.topic` received from the `on_message` callback will be the second part (a/b/c) and is a topic that should fall within the shared subscription topicFilter.

I believe this is causing issues with Client.message_callback_add(). If the subscription is a shared subscription (E.g. `Client.message_callback_add(""$share/group/+/+/c"", callback)` the callback is never executed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42gHmR,paho.mqtt.python,914389393,472,NA,maciejkorzepa,14107551,Maciej Korzepa,,NA,2021-09-07T15:06:47Z,2021-09-07T15:06:47Z,"I can confirm the same problem in the latest release 1.5.1.

For now my workaround is delegating the message to the topic-filter-specific callback within the on_message callback that receives the unmatched messages, but it would be great to see this issue addressed in the next release.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42gHmR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43NJyC,paho.mqtt.python,926194818,472,NA,tomasgareau,10787950,Tomas Gareau,,NA,2021-09-23T22:03:47Z,2021-09-23T22:03:47Z,"Another quick workaround: it seems you can drop the `$share/group` portion of the topic filter when adding a message callback.

Quick (runnable) example:
```python
import paho.mqtt.client as mqtt

def handle_yo(client, userdata, msg):
    print(f""Yo: {msg.payload}"")

def handle_hi(client, userdata, msg):
    print(f""Hi: {msg.payload}"")

def on_connect(client, userdata, flags, rc):
    # The subscription topic is a shared topic
    client.subscribe(""$share/group/base/#"")
    print(""Subscribed"")

c = mqtt.Client()
c.on_connect = on_connect

# Message callbacks drop the `$share/group` portion
c.message_callback_add(""base/+/yo"", handle_yo)
c.message_callback_add(""base/+/hi"", handle_hi)
c.connect(""localhost"", 1883)

c.loop_forever()
```

Running the script above and publishing the following two messages:
```bash
mosquitto_pub -t base/a/yo -m ""test""
mosquitto_pub -t base/a/hi -m ""test""
```

gives

```bash
Subscribed
Yo: b'test'
Hi: b'test'
```

A generic way to add these callbacks:
```python
def add_message_callback(client, topic, callback):
    """"""Add a message callback to a paho MQTT client.

    Internally, paho uses a function called `topic_matches_sub` to determine if
    a given topic string matches an MQTT topic pattern. Currently, this function
    does not match shared topics correctly, e.g.,:
        >>> topic_matches_sub(""$share/group/+/+/c"", ""a/b/c"")  # expected: True
        False

    Issue link: https://github.com/eclipse/paho.mqtt.python/issues/472

    This function handles stripping the `$share/group` portion of a topic
    (if required) before calling `client.message_callback_add`.
    """"""
    if topic.startswith(""$share""):
        # split the topic into at most 3 items: if this is a shared topic
        # string, it will be of the form:
        #   $share/group_id/rest/of/topic/string
        # this split gives:
        #   [""$share"", ""group_id"", ""rest/of/topic/string""]
        # and we only use the last bit (rest/of/topic/string)
        topic = topic.split(""/"", maxsplit=2)[-1]
    client.message_callback_add(topic, callback)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43NJyC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/472,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wElNu,paho.mqtt.python,1880249198,472,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:37:03Z,2024-01-08T00:37:03Z,"I'm going to flag this as an enhancement. `$share` was not part of the v3 spec; as it's included in v5 we should really support it here or, at a minimum, document the fact that its not supported.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wElNu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/473,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/473,paho.mqtt.python,578938244,473,Connect with keepalive 0 reports BlockingIOError,InventoryTech,49542518,,,CLOSED,2020-03-11T00:34:22Z,2024-01-07T02:41:07Z,"I'm attempting to connect with keepalive set to 0, I get the following error:

> Traceback (most recent call last):
>   File ""main.py"", line 55, in <module>
>     res = client.connect(broker_address, port=1883, keepalive=0, bind_address="""")
>   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 937, in connect
>     return self.reconnect()
>   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1071, in reconnect
>     sock = self._create_socket_connection()
>   File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 3522, in _create_socket_connection
>     return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
>   File ""/usr/lib/python3.7/socket.py"", line 727, in create_connection
>     raise err
>   File ""/usr/lib/python3.7/socket.py"", line 716, in create_connection
>     sock.connect(sa)
> BlockingIOError: [Errno 115] Operation now in progress

My current understanding is that keepalive 0 is valid and should prevent keepalive pings being sent from the client to the broker?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/473/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/473,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDUv6,paho.mqtt.python,1879919610,473,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T02:41:07Z,2024-01-07T02:41:07Z,"I've tested this with the latest client (and Mosquitto 2.0.17) and was unable to duplicate. Due to the age of the issue I'm going to assume that the issue has been fixed in releases since this was raised (apologies it's taken so long for anyone to respond).

If this is still an issue, then please feel free to reopen (ideally with a reproducible example).

Note that some brokers will not accept a 0 keepalive without configuration (e.g. for mosquitto set `max_keepalive 0`).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDUv6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,paho.mqtt.python,579970732,474,is_published() ist TRUE while mosquitto says NO,mhechthz,37075144,Michael Hecht,,CLOSED,2020-03-12T14:15:55Z,2023-12-24T00:14:11Z,"Hi,

I have a ACL configured for mosquitto and now try to publish on a blocked topic.

While mosquitto displays: 
```
1584022491: Denied PUBLISH from notAllowedClientTopic (d0, q1, r0, m11, 'test/pressur
e   ', ... (12 bytes))
1584022491: Sending PUBACK to notAllowedClientTopic (m11, rc135)

```
the client is_published() gives TRUE.

What's wrong here?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzODEyNA==,paho.mqtt.python,670538124,474,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:13:31Z,2020-08-07T14:13:31Z,"`is_published()` means that it has been delivered to the broker, it doesn't have any information about whether it was denied or not. It is only possible to know whether a message has been rejected by the broker under MQTT v5 as well. It would certainly be useful to have that information where possible though.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzODEyNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45-HdV,paho.mqtt.python,972584789,474,NA,tarekasishm,20544298,tarekasis,,NA,2021-11-18T06:47:54Z,2021-11-18T06:47:54Z,"Since MQTT v5 release there is a reason code in PUBACK for publish messages rejected by the broker (rc = 0x87). It should work, right?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45-HdV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mMawq,paho.mqtt.python,1714531370,474,NA,SimonMacIntyre,1260938,Simon,,NA,2023-09-11T20:27:27Z,2023-09-11T20:27:27Z,"Yes MQTT 5 does include an authorization failure code, but it doesn't appear to surface in `on_publish()` sadly.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mMawq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/474,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXT0,paho.mqtt.python,1868395764,474,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:14:11Z,2023-12-24T00:14:11Z,Closing this as I believe the question has been answered (best to handle the v5 responses in a separate issue to keep things clean),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXXT0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,paho.mqtt.python,581700301,475,Publish returns success if wrong credentials are used and message is not delivered.,axmag,62206592,,,CLOSED,2020-03-15T14:40:13Z,2024-01-07T07:59:19Z,"### Context
The publish function returns MQTT_ERR_SUCCESS when wrong combination of login/password is used. 

### How to reproduce
Run following code with correct ip address of the server and login/password with correct combination in the first call of username_pw_set and wrong login or password in the second call of username_pw_set.

> import paho.mqtt.client as paho
broker=""192.168.1.80""
port=1883
mosquitto = paho.Client(""client1"")
mosquitto.username_pw_set(""login name"",""correct password"")
mosquitto.connect(broker,port)                          
res1= mosquitto.publish(""topic1"",""message1"")
print(""Return with correct credentials: "" + str(res1.rc))
mosquitto.disconnect
mosquitto.username_pw_set(""login name"",""wrong password"")
mosquitto.connect(broker,port)                          
res2 = mosquitto.publish(""topic2"",""message2"")
print(""Return with wrong credentials: "" + str(res2.rc))
mosquitto.disconnect

### Additional note
MQTT_ERR_SUCCESS = 0 returned in rc in both cases.
 
What's wrong here? Do I understand it correctly as a bug?
Thanks a lot!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44kER3,paho.mqtt.python,948978807,475,NA,BriannaBrown-hub,46937658,Brianna Brown,,NA,2021-10-21T20:28:18Z,2021-10-21T20:28:18Z,I am seeing the same issue. Any updates here would be greatly appreciated. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44kER3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44tjC-,paho.mqtt.python,951464126,475,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2021-10-26T01:07:47Z,2021-10-26T01:07:47Z,"I believe that this is efficiently a duplicate of #454. As mentioned in my recent [comment on that issue](https://github.com/eclipse/paho.mqtt.python/issues/454#issuecomment-949075809) `connect` returns when the network connection is up and the `CONNECT` packet has been sent to the broker; this is before the `CONNACK` is received/processed (and the `CONNACK` will never be processed in the code above because there is no [network loop](https://github.com/eclipse/paho.mqtt.python#network-loop)).

The `CONNECT` packet includes the username/password so the `connect` function is returning before the broker has checked these.

If you want to connect, send a message, and then disconnect I'd suggest using [publish.Single](https://github.com/eclipse/paho.mqtt.python#publish)/[publish.Multiple](https://github.com/eclipse/paho.mqtt.python#multiple). These functions wait for the `on_connect` callback to be called (meaning the `CONNACK` has been processed) before publishing (and run a network loop for you). Alternatively run a loop and publish from the `on_connect` callback.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44tjC-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44v5tg,paho.mqtt.python,952081248,475,NA,BriannaBrown-hub,46937658,Brianna Brown,,NA,2021-10-26T15:57:09Z,2021-10-26T15:57:09Z,I appreciate the response @MattBrittan. This is a helpful explanation!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44v5tg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/475,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlAs,paho.mqtt.python,1879986220,475,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T07:59:19Z,2024-01-07T07:59:19Z,I'm going to close this because I believe the updated docs now offer a better explanation (and all of the examples include a network loop).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDlAs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/476,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/476,paho.mqtt.python,588381237,476,"while publishing mqtt message , message of heavy size is not recieved using paho with python?",gaurav10022,11428609,,,CLOSED,2020-03-26T12:23:52Z,2021-07-22T22:15:17Z,"I am unable to recieve mqtt message of size 6240 bytes, I tried with mesage size of 1200,1330 bytes, it is working fine, I am using python with paho mqtt","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/476/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/476,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzNjU4Ng==,paho.mqtt.python,670536586,476,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:10:25Z,2020-08-07T14:10:25Z,"Try this example code, it should work fine:

```
import paho.mqtt.client as paho

def on_connect(mqttc, obj, flags, rc):
    mqttc.subscribe(""#"")

def on_message(mqttc, obj, msg):
    print(msg.topic)

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.connect(""test.mosquitto.org"", 1883, 60)
mqttc.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzNjU4Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/476,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xClF,paho.mqtt.python,885270853,476,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:15:17Z,2021-07-22T22:15:17Z,Closing because I believe this has been addressed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xClF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477,paho.mqtt.python,589567937,477,How to make multiple broker connection in paho mqtt?,vvksahoo,56999733,,,CLOSED,2020-03-28T12:27:24Z,2023-12-26T01:52:45Z,"I want to connect to multiple broker , so does paho_mqtt handle it ? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNTEwNTk3Mw==,paho.mqtt.python,615105973,477,NA,mbenabda,3693756,Mehdi Ben Abdallah,,NA,2020-04-17T08:04:53Z,2020-04-17T08:04:53Z,"do you know in advance which servers you'll be connected to or is it a HA scenario ?
if you do, you need 1 socket / broker connection. have you tried using multiple client instances ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxNTEwNTk3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNzE5MTE4OA==,paho.mqtt.python,707191188,477,NA,andrequeiroz2,17392173,Andre,andrequeiroz.com@gmail.com,NA,2020-10-12T15:31:46Z,2020-10-12T15:31:46Z,"> você sabe com antecedência a quais servidores estará conectado ou é um cenário de HA?
> se fizer isso, você precisará de 1 conexão de soquete / corretor. você já tentou usar várias instâncias do cliente?


I'm trying to do this. In my case, I want the user to register several bokers.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwNzE5MTE4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/477,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaZjx,paho.mqtt.python,1869191409,477,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T01:52:45Z,2023-12-26T01:52:45Z,"This is not something the library supports out of the box. Please see [this issue](https://github.com/eclipse/paho.mqtt.python/issues/308#issuecomment-406990125) for one suggestion (I have not tested this).

Given this issues age I'm going to close it (hopefully the above helps, if not and this is still a problem for you feel free to reopen).

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaZjx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/478,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/478,paho.mqtt.python,591541397,478,Capture exception: socket.gaierror: [Errno 11004] getaddrinfo failed,zdrux,38148750,,,CLOSED,2020-04-01T00:59:01Z,2024-01-08T00:20:03Z,"I am trying to build a GUI interface for paho.mqtt, but when I enter an invalid hostname upon client.connect, the app simply exits with the following found in the Python console:

```
Traceback (most recent call last):
  File ""C:/Users/zdrux/PycharmProjects/mq/main.py"", line 56, in <module>
    client.connect(values[0])  # connect to broker
  File ""C:\Users\zdrux\PycharmProjects\mq\lib\site-packages\paho\mqtt\client.py"", line 937, in connect
    return self.reconnect()
  File ""C:\Users\zdrux\PycharmProjects\mq\lib\site-packages\paho\mqtt\client.py"", line 1071, in reconnect
    sock = self._create_socket_connection()
  File ""C:\Users\zdrux\PycharmProjects\mq\lib\site-packages\paho\mqtt\client.py"", line 3522, in _create_socket_connection
    return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
  File ""C:\Users\zdrux\AppData\Local\Programs\Python\Python38-32\lib\socket.py"", line 787, in create_connection
    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
  File ""C:\Users\zdrux\AppData\Local\Programs\Python\Python38-32\lib\socket.py"", line 918, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno 11004] getaddrinfo failed
```

How do I capture this error so my app doesn't forcefully close and I can at least print some error to the user and keep the app running?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/478/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/478,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjQwOTQwNQ==,paho.mqtt.python,626409405,478,NA,poleguy,13422719,Nicholas Dietz,github@poleguy.com,NA,2020-05-10T23:55:34Z,2020-05-10T23:55:34Z,"It's not obvious why you can't just try: except on it... but it seems to be because the exception is on a different thread. You need to look at the logger callback: .on_log(), and unfortunately you might have to modify the source code as this error isn't caught everywhere it can come up. I'm working on a PR to try to address this.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjQwOTQwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/478,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEji3,paho.mqtt.python,1880242359,478,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:20:03Z,2024-01-08T00:20:03Z,"I'm going to close this due to age/inactivity (apologies there was not more of a response years ago!). If you are still seeing this issue with a current version of the library then please feel free to reopen the issue (there have been quite a few changes to exception handling in the interim but I'm sure that some problems remain).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEji3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/479,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/479,paho.mqtt.python,592566188,479,How to implement a subclass of paho.mqtt.client.Client with custom constructor?,prouschal,16081148,Paul Rouschal,,CLOSED,2020-04-02T11:41:05Z,2024-01-07T22:24:25Z,"I tried to subclass `paho.mqtt.client.Client` and override `on_connect` and `on_message`.

Unfortunately this stops working after a custom `__init__` method was added, because the callbacks are all reset in the calll to `super().__init__(...)`.

I then tried to manually set this.on_connect to MySubClass.on_connect in the constructor but that is not quite a good solution, as then any subclass of MySubclass will run into a similar problem.

Is there a way to make this work properly?

The workaround in my case was to make the client a member of my class and not use inheritance.
I just wonder whether I overlooked something and there is a simpler solution after all.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/479/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/479,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMzEwMzA0Ng==,paho.mqtt.python,633103046,479,NA,alexander-travov,1105220,Alexander Travov,,NA,2020-05-23T17:40:02Z,2020-05-23T17:40:02Z,"Look at `examples/client_sub-class.py`.

Don't forget to add `self` argument to your callback methods so:
``` python
def on_message(client, userdata, message):
    ...
```
becomes:
``` python
class MyClient(paho.mqtt.client.Client):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # custom initialization
    def on_message(self, client, userdata, message):
        ...
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzMzEwMzA0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/479,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEYYb,paho.mqtt.python,1880196635,479,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T22:24:24Z,2024-01-07T22:24:24Z,Closing due to age/inactivity and the fact that it looks like an answer was provided.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEYYb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,paho.mqtt.python,593250114,481,PUBREL handling error in MQTT v5,sutao,1234759,Tao Su,,CLOSED,2020-04-03T09:33:50Z,2022-05-04T16:25:09Z,"When using MQTT v5 broker and subscribing to a QoS 2 topic, there seems to be an issue handling `PUBREL` packets, specifically:

```py
    def _handle_pubrel(self):
        if self._in_packet['remaining_length'] != 2:  # <-- remaining_lenth is 4 for PUBREL packets.
            return MQTT_ERR_PROTOCOL
```

This causes a silent reconnection.

According to the official MQTT v5 protocol here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/cos02/mqtt-v5.0-cos02.html#_Toc1477441

It appears `PUBREL` header should indeed be 4 bytes. In MQTT v3.1.1, this header is 2 bytes.

The two additional bytes are for **PUBREL Reason Code** and **Property Length**. 
Currently, I subclassed the `Client` class on my own application so it's compatible with v5 brokers. 

I did my tests on emqx. Mosquitto seems to be fine (which means it did not support full v5 protocol).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwODM2MDczMA==,paho.mqtt.python,608360730,481,NA,ralight,79578,Roger Light,,NA,2020-04-03T10:32:57Z,2020-04-03T10:32:57Z,"Mosquitto allows the pubrel reason code and property length bytes to be omitted, as allowed by the MQTT v5.0 specification just a little bit on from where you quote, so perhaps it is emqx that doesn't fully support v5 :)

This is indeed a bug in the Python client though.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYwODM2MDczMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDIwOTQxMg==,paho.mqtt.python,610209412,481,NA,sutao,1234759,Tao Su,,NA,2020-04-07T06:52:06Z,2020-04-07T06:52:06Z,"Ah I see... so yeah the client should be able to support 2 or 4 bytes of the Variable Header.

Thanks for the reply. :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMDIwOTQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDMyMjAyNg==,paho.mqtt.python,770322026,481,NA,naknz,9669086,,,NA,2021-01-31T04:06:49Z,2021-01-31T04:06:49Z,"Using emqx with the client there is now an unpack buffer error.

It's the same issue related to v5 clients and the variable header having more than 2 bytes.
Just the unpack expecting 2 bytes and getting 4 instead so throwing the exception.

Worked around with just taking the first 2 bytes:
`mid, = struct.unpack(""!H"", self._in_packet['packet'][:2])`


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MDMyMjAyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/481,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CnInA,paho.mqtt.python,1117555136,481,NA,renaudcalmont,20964337,Renaud Calmont,,NA,2022-05-04T16:25:09Z,2022-05-04T16:25:09Z,"Just walked into the same issue more than one year later...
Shouldn't @naknz workaround be commited into the official code?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CnInA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/482,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/482,paho.mqtt.python,596099917,482,on_published() called before publish() returns,teslafields,24792806,Benhur,,OPEN,2020-04-07T19:29:46Z,2023-12-23T23:06:18Z,"I noticed an awkward scenario, where I have a MQTT client instance publishing messages periodically to a localhost mosquitto broker. Turns out, that occurred that I received the publish confirmation before the publish() method returns. Here is the log:

```
[PRINT] 1586267171460 -> 6940
[LOG]   2020-04-07 10:46:11,461 INF [mqtt_clien:174] [bridge] --> mid=6940 topic/5e851e3895be4d00079b86f3/state [1665] {""time"":{""$date"":""2020-04-07T13:46:11.458Z""},""data"":{""net_eth0_mac"":""00:01:c0:26:13:df"",""net_dns2"":""8.8.4.4"",""sys_uptime"":263738,""sys_cpu_freq_avg"":1200.0,""sys_mem_avail"":522,""dckr_cntr0_cpu_avg"":96.0,""net_eth1_gw"":""0.0.0.0"",""dckr_img0_created"":""2020-01-10T16:49:04"",""net_eth0_dhcp"":false,""net_eth1_mac"":""00:01:c0:26:13:e7"",""sys_cpu_usage_min"":19.4,""dckr_cntr0_image"":""topic/edge-agent:latest"",""sys_board_model"":""IOTG-CIMX7-D1G-N16-E2-WAB-POE-PS-XL-V130-191016"",""net_eth1_ip"":"""",""net_ping_rtt_min"":-1,""dckr_cntr0_mem_min"":333,""dckr_cntr0_name"":""edge-agent"",""sys_mem_used_min"":348,""net_eth1_nmask"":"""",""dckr_img0_id"":""0b8fe711a7"",""dckr_cntr0_mem_avg"":369.0,""sys_disk_total"":14136,""sys_mem_total"":999,""net_eth0_ip"":""192.168.0.10"",""net_ping_loss_max"":0,""sys_cpu_freq_min"":1200,""dckr_img0_name"":""topic/edge-agent:latest"",""net_eth1_active"":false,""dckr_img0_size"":1224,""dckr_cntr0_cpu_min"":0.0,""net_wlan0_rssi"":74,""net_wlan0_ssid"":""VIVO-1711"",""net_eth1_dhcp"":false,""net_eth1_rx"":0,""net_eth1_tx"":0,""dckr_cntr0_mem_max"":369,""sys_cpu_freq_max"":1200,""net_wlan0_tx"":61116,""net_eth0_tx"":0,""sys_app_version"":""0.2.2"",""net_ping_rtt_avg"":45.06,""net_ping_loss_min"":0,""sys_disk_used_max"":5321,""dckr_cntr0_id"":""345d3d8402"",""sys_cpu_usage_max"":77.0,""net_eth0_gw"":""0.0.0.0"",""net_dns1"":""8.8.8.8"",""sys_cpu_usage_avg"":34.75,""sys_mem_used_avg"":413.0,""net_wlan0_mac"":""40:06:a0:86:40:e1"",""net_ping_loss_avg"":0.0,""sys_disk_used_min"":5275,""dckr_cntr0_status"":""running"",""net_wlan0_active"":true,""sys_disk_used_avg"":5321.0,""net_ping_rtt_max"":1106.883,""net_wlan0_rx"":61116,""net_eth0_active"":true,""net_eth0_nmask"":""255.255.255.0"",""sys_mem_used_max"":413,""dckr_cntr0_cpu_max"":189.47,""net_eth0_rx"":0}}
[PRINT] 1586267171468 <- 6940
2020-04-07 10:46:11,473 INF [mqtt_clien:217] [bridge] mid=6940 published!
[PRINT] 1586267189673 -> 6941
[LOG]   2020-04-07 10:46:29,674 INF [mqtt_clien:174] [bridge] --> mid=6941 topic/5e851e3895be4d00079b86f3/state [1665] {""time"":{""$date"":""2020-04-07T13:46:29.672Z""},""data"":{""net_eth0_mac"":""00:01:c0:26:13:df"",""net_dns2"":""8.8.4.4"",""sys_uptime"":263752,""sys_cpu_freq_avg"":1200.0,""sys_mem_avail"":522,""dckr_cntr0_cpu_avg"":70.27,""net_eth1_gw"":""0.0.0.0"",""dckr_img0_created"":""2020-01-10T16:49:04"",""net_eth0_dhcp"":false,""net_eth1_mac"":""00:01:c0:26:13:e7"",""sys_cpu_usage_min"":19.4,""dckr_cntr0_image"":""topic/edge-agent:latest"",""sys_board_model"":""IOTG-CIMX7-D1G-N16-E2-WAB-POE-PS-XL-V130-191016"",""net_eth1_ip"":"""",""net_ping_rtt_min"":-1,""dckr_cntr0_mem_min"":333,""dckr_cntr0_name"":""edge-agent"",""sys_mem_used_min"":348,""net_eth1_nmask"":"""",""dckr_img0_id"":""0b8fe711a7"",""dckr_cntr0_mem_avg"":369.0,""sys_disk_total"":14136,""sys_mem_total"":999,""net_eth0_ip"":""192.168.0.10"",""net_ping_loss_max"":0,""sys_cpu_freq_min"":1200,""dckr_img0_name"":""topic/edge-agent:latest"",""net_eth1_active"":false,""dckr_img0_size"":1224,""dckr_cntr0_cpu_min"":0.0,""net_wlan0_rssi"":77,""net_wlan0_ssid"":""VIVO-1711"",""net_eth1_dhcp"":false,""net_eth1_rx"":0,""net_eth1_tx"":0,""dckr_cntr0_mem_max"":369,""sys_cpu_freq_max"":1200,""net_wlan0_tx"":61119,""net_eth0_tx"":0,""sys_app_version"":""0.2.2"",""net_ping_rtt_avg"":38.51,""net_ping_loss_min"":0,""sys_disk_used_max"":5321,""dckr_cntr0_id"":""345d3d8402"",""sys_cpu_usage_max"":77.0,""net_eth0_gw"":""0.0.0.0"",""net_dns1"":""8.8.8.8"",""sys_cpu_usage_avg"":34.5,""sys_mem_used_avg"":413.0,""net_wlan0_mac"":""40:06:a0:86:40:e1"",""net_ping_loss_avg"":0.0,""sys_disk_used_min"":5275,""dckr_cntr0_status"":""running"",""net_wlan0_active"":true,""sys_disk_used_avg"":5321.0,""net_ping_rtt_max"":1106.883,""net_wlan0_rx"":61119,""net_eth0_active"":true,""net_eth0_nmask"":""255.255.255.0"",""sys_mem_used_max"":413,""dckr_cntr0_cpu_max"":189.47,""net_eth0_rx"":0}}
[PRINT] 1586267189676 <- 6941
[LOG]   2020-04-07 10:46:29,677 INF [mqtt_clien:217] [bridge] mid=6941 published!
[PRINT] 1586267213887 <- 6942
[LOG]   2020-04-07 10:46:53,888 INF [mqtt_clien:217] [bridge] mid=6942 published!
[PRINT] 1586267213889 -> 6942
[LOG]   2020-04-07 10:46:53,889 INF [mqtt_clien:174] [bridge] --> mid=6942 topic/5e851e3895be4d00079b86f3/state [1665] {""time"":{""$date"":""2020-04-07T13:46:53.880Z""},""data"":{""net_eth0_mac"":""00:01:c0:26:13:df"",""net_dns2"":""8.8.4.4"",""sys_uptime"":263780,""sys_cpu_freq_avg"":1200.0,""sys_mem_avail"":522,""dckr_cntr0_cpu_avg"":72.84,""net_eth1_gw"":""0.0.0.0"",""dckr_img0_created"":""2020-01-10T16:49:04"",""net_eth0_dhcp"":false,""net_eth1_mac"":""00:01:c0:26:13:e7"",""sys_cpu_usage_min"":19.4,""dckr_cntr0_image"":""topic/edge-agent:latest"",""sys_board_model"":""IOTG-CIMX7-D1G-N16-E2-WAB-POE-PS-XL-V130-191016"",""net_eth1_ip"":"""",""net_ping_rtt_min"":-1,""dckr_cntr0_mem_min"":333,""dckr_cntr0_name"":""edge-agent"",""sys_mem_used_min"":348,""net_eth1_nmask"":"""",""dckr_img0_id"":""0b8fe711a7"",""dckr_cntr0_mem_avg"":369.0,""sys_disk_total"":14136,""sys_mem_total"":999,""net_eth0_ip"":""192.168.0.10"",""net_ping_loss_max"":0,""sys_cpu_freq_min"":1200,""dckr_img0_name"":""topic/edge-agent:latest"",""net_eth1_active"":false,""dckr_img0_size"":1224,""dckr_cntr0_cpu_min"":0.0,""net_wlan0_rssi"":67,""net_wlan0_ssid"":""VIVO-1711"",""net_eth1_dhcp"":false,""net_eth1_rx"":0,""net_eth1_tx"":0,""dckr_cntr0_mem_max"":369,""sys_cpu_freq_max"":1200,""net_wlan0_tx"":61124,""net_eth0_tx"":0,""sys_app_version"":""0.2.2"",""net_ping_rtt_avg"":45.31,""net_ping_loss_min"":0,""sys_disk_used_max"":5321,""dckr_cntr0_id"":""345d3d8402"",""sys_cpu_usage_max"":77.0,""net_eth0_gw"":""0.0.0.0"",""net_dns1"":""8.8.8.8"",""sys_cpu_usage_avg"":30.4,""sys_mem_used_avg"":413.0,""net_wlan0_mac"":""40:06:a0:86:40:e1"",""net_ping_loss_avg"":0.0,""sys_disk_used_min"":5275,""dckr_cntr0_status"":""running"",""net_wlan0_active"":true,""sys_disk_used_avg"":5321.0,""net_ping_rtt_max"":1106.883,""net_wlan0_rx"":61124,""net_eth0_active"":true,""net_eth0_nmask"":""255.255.255.0"",""sys_mem_used_max"":413,""dckr_cntr0_cpu_max"":189.47,""net_eth0_rx"":0}}
```

In this log, the prefix [PRINT] means that is a print() call from line numbers 172 and 214 (see code bellow). On the other hand, the [LOG] prefix means that was a logging.info() call from line numbers 173 and 217.

From my understanding, I was hoping that I would always see the print() first, followed by the logging.info() from lines 172 & 173, and after that, the print() followed by the logging.info() from the lines 214 & 217, like I do in mids 6940 and 6941. However, in the mid 6942, I have received the publishing confirmation before my publish() call returns. Looks like the cb_publish() was called before the publish() returns.

Here's my code (the class that contains these methods inherits from paho.mqtt.client.Client.):
```
165     def do_publish(self, message):
166         if not isinstance(message, Message):
167             return None
168         topic = message.topic
169         payload = json.dumps(message.payload, separators=(',', ':'))
170         p = self.publish(topic, payload, qos=message.qos, retain=self.retain)
171         self.__msg_pending[p.mid] = message
172         print(timemnow(),'->', p.mid, file=sys.stderr)                                                                                                                                                         
173         self.logger.info('--> mid=%d %s [%3d] %s' % (p.mid, topic, len(payload),
174                                                      payload))

213     def cb_publish(self, client, userdata, mid):
214         print(timemnow(), '<-', mid, file=sys.stderr)
215         if mid in self.__msg_pending:
216             del self.__msg_pending[mid]
217         self.logger.info('mid=%s published!' % mid)
```

version:
paho-mqtt==1.5.0

In the mosquitto log, I can see that the message was correctly received and ack-ed.

```
Apr  7 10:46:11 cl-debian mosquitto[16045]: Received PUBLISH from core-app (d0, q1, r0, m6940, 'topic/5e851e3895be4d00079b86f3/state', ... (1665 bytes))
Apr  7 10:46:11 cl-debian mosquitto[16045]: Sending PUBACK to core-app (m6940, rc0)
Apr  7 10:46:29 cl-debian mosquitto[16045]: Received PUBLISH from core-app (d0, q1, r0, m6941, 'topic/5e851e3895be4d00079b86f3/state', ... (1665 bytes))
Apr  7 10:46:29 cl-debian mosquitto[16045]: Sending PUBACK to core-app (m6941, rc0)
Apr  7 10:46:53 cl-debian mosquitto[16045]: Received PUBLISH from core-app (d0, q1, r0, m6942, 'topic/5e851e3895be4d00079b86f3/state', ... (1665 bytes))
Apr  7 10:46:53 cl-debian mosquitto[16045]: Sending PUBACK to core-app (m6942, rc0)
```

I am running this on armhf and using pyinstaller to freeze my python code.

Any thoughts about it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/482/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/482,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCNgM,paho.mqtt.python,1711855628,482,NA,tibboh,10303065,,,NA,2023-09-08T15:33:03Z,2023-09-08T15:33:03Z,"I'm seeing the same behavior. It makes it quite difficult to build a client-side persistence layer (you don't know the ``mid`` until ``publish()`` returns, but in ``on_publish()`` you want to remove the message from persistent store by ``mid``).

Ideally, one should be able to:
 * call ``publish()``
 * write the message in the persistent store, keyed by ``mid``
 * remove it by ``mid`` in ``on_publish``","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCNgM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/482,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCOuB,paho.mqtt.python,1711860609,482,NA,tibboh,10303065,,,NA,2023-09-08T15:37:04Z,2023-09-08T15:37:04Z,"This could be solved by allowing per-message callback argument in ``publish`` (which I've seen planned somewhere in the docs). Then we could:
 * generate a unique ID
 * store the message in the persistent store keyed by ID
 * pass the ID as a callback argument and delete from persistent store in the callback","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCOuB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/483,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/483,paho.mqtt.python,596479769,483,delayed messages and infinite buffer,mhechthz,37075144,Michael Hecht,,CLOSED,2020-04-08T10:38:18Z,2023-12-26T01:44:45Z,"Hi,

I'm not sure wether this is the right place to post but my problem is in combination with mosquitto as well as activeMQ.

I use mosquitto with paho-mqtt to send jpegs (ca. 50 kB) from camera to a light weight video server that stores the images in a database. Both sides work with paho-mqtt. What I see now is that the camera advances the stored images, i.e. after a few minutes there is a time gap of at least a minute. Obviously the publisher publishes faster than the broker can transmit or the subscriber can read. After 4 hours there is a gap of about 2 hours. **No frame is dropped**, so the mqtt-broker(s) seem to buffer the images. I don't want this behaviour, but want that only one image is buffered.

I do the following:
```
  client = mqtt.Client('myCameraClient', clean_session=True)
  client.max_queued_messages_set(1)
  client.max_inflight_messages_set(1)
  client.connect('brokeraddress', 1883, 60)
```
What is wrong here? Is it paho-mqtt, is it my code or is it the configuration of broker?

**EDIT:**
What I see is, that the publisher consumes an increasing amount of memory, so the publisher is buffering the messages!

**EDIT 2:**
Meanwhile I changed the code getting it working:
```
      msgInfo = client.publish(""stream/camera"", encFrame,  qos=0, retain=False)  
      while msgInfo[1] - publishedMID>=2:
        print(""DELAY:"",msgInfo[1],publishedMID,""... sleep 0.05s ..."")
        time.sleep(0.05)
```
`publishedMID` I get from `on_publish`, i.e. I wait until the buffer is less than 2 messages. This means that I drop the messages myself manually, but expected that the mqtt ""system"" is doing this for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/483/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/483,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaYqi,paho.mqtt.python,1869187746,483,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T01:44:45Z,2023-12-26T01:44:45Z,"This is the expected behaviour; if you call `publish` the library will make an attempt to publish it (the exact behaviour depends upon the QOS level used).  `publish` adds the message to an internal queue (`_out_packet`) and there is currently no mechanism to limit this queue.

`max_queued_messages_set` and `max_inflight_messages_set` have no impact at QOS0 (a message is ""inflight"" if we are waiting for a response from the server, QOS1 is fire and forget so there is no response).

Note that your solution will break down when the MID reaches 65535 and resets to 1 (keeping a count of messages you have published but not received the callback for might be a better option).

Due to the age of this issue I'm going to close it (sorry no one responded earlier); if you are still having issues then please feel free to reopen it.


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaYqi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484,paho.mqtt.python,598078451,484,loop() function does not clear TCP buffer,spynappels,6206185,,,CLOSED,2020-04-10T20:25:16Z,2024-01-07T01:47:21Z,"I'm running an application in Python 3.7.3 using the Paho MQTT module version 1.5.0 on a Raspberry Pi3.
It subscribes to a Mosquitto broker and displays the data from messages received for the subscribed topics on an attached screen.

I've noticed that after some time it simply stops updating the values, and after some investigation it was seen that the client device is simply closing the TCP connection with a RST packet.
It turns out that when I use the non-blocking loop() method in a while loop, it does not seem to clear the  bytes from the TCP buffer. Running netstat -tn every second shows the Recv-Q counter increasing by 26 bytes for every message received.

Using the loop_forever() function, the Recv-Q counter does not increment and the script continues to work as expected, but this doesn't work for the application.

Is there anything additional required when using the loop() method as opposed to using the loop_forever() method? Or is there some bug in the loop() method?

I can provide supporting tcpdumps and netstat output or any debug output required.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMjIxNDExNA==,paho.mqtt.python,612214114,484,NA,spynappels,6206185,,,NA,2020-04-10T20:58:45Z,2020-04-10T20:58:45Z,"In this pcap, 192.168.10.60 is the MQTT broker, and 192.168.13.190 is the device running the Python code.
[mqtt-broker-traffic-extract.zip](https://github.com/eclipse/paho.mqtt.python/files/4463362/mqtt-broker-traffic-extract.zip)
The netstat output is as follows:

> pi@office-control:~ $ date; netstat -nt
> Fri 10 Apr 2020 09:51:24 PM BST
> Active Internet connections (w/o servers)
> Proto Recv-Q Send-Q Local Address           Foreign Address         State
> tcp        0      0 192.168.13.190:22       192.168.13.192:49859    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60822    ESTABLISHED
> tcp        0      0 127.0.0.1:37446         127.0.0.1:40005         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60842    ESTABLISHED
> tcp     1874      0 192.168.13.190:49005    192.168.10.60:1883      ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49842    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49843    ESTABLISHED
> tcp        0     48 192.168.13.190:22       192.168.13.192:49858    ESTABLISHED
> tcp        0      0 127.0.0.1:37767         127.0.0.1:46902         ESTABLISHED
> tcp        0      0 127.0.0.1:40005         127.0.0.1:37446         ESTABLISHED
> tcp        0      0 127.0.0.1:34321         127.0.0.1:55006         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60819    ESTABLISHED
> tcp        0      0 127.0.0.1:55006         127.0.0.1:34321         ESTABLISHED
> tcp        0      0 127.0.0.1:46902         127.0.0.1:37767         ESTABLISHED
> pi@office-control:~ $ date; netstat -nt
> Fri 10 Apr 2020 09:51:29 PM BST
> Active Internet connections (w/o servers)
> Proto Recv-Q Send-Q Local Address           Foreign Address         State
> tcp        0      0 192.168.13.190:22       192.168.13.192:49859    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60822    ESTABLISHED
> tcp        0      0 127.0.0.1:37446         127.0.0.1:40005         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60842    ESTABLISHED
> tcp     1926      0 192.168.13.190:49005    192.168.10.60:1883      ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49842    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49843    ESTABLISHED
> tcp        0     48 192.168.13.190:22       192.168.13.192:49858    ESTABLISHED
> tcp        0      0 127.0.0.1:37767         127.0.0.1:46902         ESTABLISHED
> tcp        0      0 127.0.0.1:40005         127.0.0.1:37446         ESTABLISHED
> tcp        0      0 127.0.0.1:34321         127.0.0.1:55006         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60819    ESTABLISHED
> tcp        0      0 127.0.0.1:55006         127.0.0.1:34321         ESTABLISHED
> tcp        0      0 127.0.0.1:46902         127.0.0.1:37767         ESTABLISHED
> pi@office-control:~ $ date; netstat -nt
> Fri 10 Apr 2020 09:51:33 PM BST
> Active Internet connections (w/o servers)
> Proto Recv-Q Send-Q Local Address           Foreign Address         State
> tcp        0      0 192.168.13.190:22       192.168.13.192:49859    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60822    ESTABLISHED
> tcp        0      0 127.0.0.1:37446         127.0.0.1:40005         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60842    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49842    ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:49843    ESTABLISHED
> tcp        0    160 192.168.13.190:22       192.168.13.192:49858    ESTABLISHED
> tcp        0      0 127.0.0.1:37767         127.0.0.1:46902         ESTABLISHED
> tcp        0      0 127.0.0.1:40005         127.0.0.1:37446         ESTABLISHED
> tcp        0      0 127.0.0.1:34321         127.0.0.1:55006         ESTABLISHED
> tcp        0      0 192.168.13.190:22       192.168.13.192:60819    ESTABLISHED
> tcp        0      0 127.0.0.1:55006         127.0.0.1:34321         ESTABLISHED
> tcp        0      0 127.0.0.1:46902         127.0.0.1:37767         ESTABLISHED
> pi@office-control:~ $ 
> 

The Recv-Q increments in 26 byte steps, which is the same as the MQTT payload as can be seen in the pcap.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYxMjIxNDExNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5Njg4NDQ0Mg==,paho.mqtt.python,696884442,484,NA,ralight,79578,Roger Light,,NA,2020-09-22T17:59:29Z,2020-09-22T17:59:29Z,How frequently are you calling `loop()`? Could you use `loop_start()` instead to start a new thread which handles it for you?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5Njg4NDQ0Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/484,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDSXV,paho.mqtt.python,1879909845,484,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T01:47:21Z,2024-01-07T01:47:21Z,I'm going to close this issue due to inactivity; please feel free to reopen if you are able to provide more info (as Roger requested above).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDSXV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,paho.mqtt.python,607057672,487,How can I send a message with publish packet?,xZurdo,58427333,,,CLOSED,2020-04-26T16:50:40Z,2020-08-07T14:05:14Z,"I mean, I am trying to publish the measurements of a flow meter sensor, and I don't know how to encode this measurements to be sent properly through MQTT protocol using publish. Has someone any idea to do it?

I have measures like this: 4'5; 1.'3; 0'43

And the problem is that I don't know how to send that in the publish packet","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMDI2OTMzOA==,paho.mqtt.python,620269338,487,NA,castillo92,37965565,Castillo,,NA,2020-04-27T22:29:38Z,2020-04-27T22:29:38Z,"Using Python it is very simple:

Sending multiple messages
```
    msgs = [{'topic': topic, 'payload': mensaje1},
            (topic, mensaje2, 0, False),
            (topic, mensaje3, 0, False),
            (topic, mensaje4, 0, False)]
    
    
    while True:
        print(""."")
        mqtt_publish.multiple(msgs, hostname=""localhost"", port=1883,auth = {'username':""user_MQTT"", 'password':""psw""})
        
        time.sleep(1)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMDI2OTMzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMDUzNTMxMQ==,paho.mqtt.python,620535311,487,NA,xZurdo,58427333,,,NA,2020-04-28T10:59:52Z,2020-04-28T10:59:52Z,"Sorry I didn't explain my situation at all. I am using a STM32 microcontroller with a GPRS Module SIM800L, so I have to send this publish message using TCP/IP protocol through SIM800L and I have to generate the MQTT publish packet and I am having problems with this. Do you have any other idea to solve the problem? Thank you very much for your help. 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMDUzNTMxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTQxMDk4OA==,paho.mqtt.python,621410988,487,NA,castillo92,37965565,Castillo,,NA,2020-04-29T19:18:54Z,2020-04-29T19:18:54Z,"> s. Do you have any other idea to solve the problem? Thank you very much for your help.

Sorry but I do not know that microcontroller. In what language do you make the program? 

I saw in internet that SIM800L works with AT commands... Could you search how to send data with it. I do not know nothing about it, sorry.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyMTQxMDk4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/487,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzNDE4Nw==,paho.mqtt.python,670534187,487,NA,ralight,79578,Roger Light,,NA,2020-08-07T14:05:13Z,2020-08-07T14:05:13Z,"It seems like this is out of scope for the Paho Python client, so I'm going to close this issue. If you disagree, please reopen and add more details about your Python code.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzNDE4Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/488,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/488,paho.mqtt.python,611424130,488,Error upon receiving keepalive connection,fcracker79,7695156,Mirko Bonasorte,mirko@mirko.io,CLOSED,2020-05-03T14:18:17Z,2023-12-24T02:12:17Z,"I am using paho-mqtt as a subscription client for AWS Appsync notifications.
Sometimes AWS AppSync seems to send `connection: keep-alive` response, which causes the library get into a loop from which it never gets out.

The log is the following:

```
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]: Traceback (most recent call last):
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1807, in loop_forever
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:     self.reconnect()
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1108, in reconnect
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:     self._websocket_path, self._websocket_extra_headers)
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/client.py"", line 3556, in __init__
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:     self._do_handshake(extra_headers)
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:   File ""/home/ubuntu/chattyraspi/lib/python3.6/site-packages/paho/mqtt/client.py"", line 3610, in _do_handshake
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]:     ""WebSocket handshake error, connection not upgraded: "" + str(self._readbuffer))
May 03 11:32:02 ip-10-0-1-121 test_chattyraspi[11317]: paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error, connection not upgraded: bytearray(b'connection: keep-alive\r\n')
```

I have slightly modified the source code of Paho to get more verbose logs on what the receiving buffer string contains.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/488/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/488,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXb--,paho.mqtt.python,1868414910,488,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:12:17Z,2023-12-24T02:12:17Z,"Looks like you got an [answer on stackoverflow](https://stackoverflow.com/a/61605533/11810946) so I'll copy it below and close this issue.

>IoT disconnects WebSocket connection and requires authentication every 24 hours. You will need to redo Subscribe(basically the authentication and connect to the pre-signed URL) every 24 hours.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXb--/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/489,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/489,paho.mqtt.python,611620097,489,wss:// url string cannot be used,jax79sg,2820927,Kah Siong Tan,,CLOSED,2020-05-04T05:49:47Z,2023-12-26T01:22:16Z,"Hi, i am trying to use Paho Client to connect to a mqtt via the following URL ( `wss://usr:pw@host:port/mqtt` ) without success. The url is a https gateway that authenticates with `usr` and `pw` before forwarding to the MQTT server. How should i get this to work? The code below couldn't work.

```
self.client = mqtt.Client(client_id=""mqClientName"", transport=""websockets"" 
self.client.username_pw_set(username=usr, password=pw)
self.client.tls_set(cert_reqs=ssl.CERT_NONE)
self.client.tls_insecure_set(True)
self.client.on_connect=self.__on_connect__
self.client.on_message=self.__on_message__
self.client.connect(host, port)
```
I get the following error.

```
/venv/lib/python3.6/site-packages/paho/mqtt/client.py"", line 3643, in _do_handshake
    raise WebsocketConnectionError(""WebSocket handshake error"")
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error
```

The URL string works fine for the Android Java Paho Client though.

Any advice here?
Thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/489/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/489,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNjA1OTY2OQ==,paho.mqtt.python,636059669,489,NA,imperialguy,5052377,The Zo,,NA,2020-05-29T16:15:55Z,2020-05-29T16:15:55Z,"Are there any plans to add this feature soon? It will be very useful for users who don't want to connect using a port, instead we just want to use a wss://url.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzNjA1OTY2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/489,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaW6n,paho.mqtt.python,1869180583,489,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T01:22:15Z,2023-12-26T01:22:15Z,"I'm going to close this issue due to it's age and a need for more information. The library does support web-socket connections but it's difficult for us to diagnose issues that we cannot duplicate; if you are still having issues please reopen this issue but, ideally, provide an example trying to connect to a public broker (e.g. `mqtt.eclipseprojects.io` or `test.mosquitto.org`). Alternatively (but not as good) use a test page to connect (e.g. [hive client](https://www.hivemq.com/demos/websocket-client/)) and include a screenshot so we can see what options were selected.

@imperialguy This library accepts a host & port (passed to `connect`) and a `path` (defaults to `/mqtt` but can be set with `ws_set_options`). The library does not currently use URL's and there are no current plans to add this (if you are keen to add this then please raise an issue with a proposal).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaW6n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,paho.mqtt.python,612368585,490,Able to publish long payload with mqtt-spy but not with paho.mqtt.python ,graftedlife,12371526,Grafted Life,,CLOSED,2020-05-05T06:26:59Z,2021-07-22T21:08:25Z,"Hi All,

I need to regularly publish payloads with a string length of ca. 125500 (~70KB). While I successfully did so with mqtt-spy, I constantly found I couldn't make it in Python using paho.mqtt.python (version 1.3.1), for any payload of a length longer than 85395.

Did I miss any parameter setting for the max. length allowed in paho.mqtt.python? I'd appreciate any advice!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjQxMzc5NQ==,paho.mqtt.python,642413795,490,NA,MartinRiddar,14327782,M. Riddar,markstrom.martin@gmail.com,NA,2020-06-11T05:19:32Z,2020-06-11T05:19:32Z,I'm guessing it's a long shot but have you tried with version 1.4 or 1.5? 1.3.1 is getting close to 3 years old by now.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MjQxMzc5NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzgwNDM1Mg==,paho.mqtt.python,663804352,490,NA,graftedlife,12371526,Grafted Life,,NA,2020-07-25T04:00:53Z,2020-07-25T04:00:53Z,Yes I tried 1.5.0 but it doesn't work either... Does paho.mqtt.python come with any parameter setting for the max. length allowed in a message?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY2MzgwNDM1Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzMDIyNg==,paho.mqtt.python,670530226,490,NA,ralight,79578,Roger Light,,NA,2020-08-07T13:58:00Z,2020-08-07T13:58:00Z,"Are you definitely calling loop_start() or loop_forever()? If not, you'll have problems. Have you got some example code that exhibits this behaviour? I just tested with an 800kB message and had no problems.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUzMDIyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/490,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w5yr,paho.mqtt.python,885234859,490,NA,ralight,79578,Roger Light,,NA,2021-07-22T21:08:25Z,2021-07-22T21:08:25Z,"I'm going to close this issue, if it's still a problem please reopen and add more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w5yr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,paho.mqtt.python,615847046,491,struct.error: bad char in struct format every once in a while,SkyperTHC,5938498,skyper,,CLOSED,2020-05-11T12:29:31Z,2024-07-18T00:11:56Z,"Hi,

during simple 'subscribe' (single thread) I randomly get the error below and the connection is terminated. Sometimes immediately after connect and sometimes it takes 20 minutes for the error to show. Wireshark shows that valid data is send (attached) but the lib falls over.

Using the ThingSpeaks MQTT broker as a peer. Looks like a valid 'Sub Ack' from the broker.

Connected
log:  Sending SUBSCRIBE (d0, m4) [(b'channels/1099999/subscribe/fields/field1/XXXXXX', 0)]
log:  Received SUBACK
log:  Received SUBACK
Traceback (most recent call last):
  File ""mqtt-ts-widget.py"", line 61, in <module>
    client.loop_forever()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1782, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1177, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 1568, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 2315, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 2960, in _packet_handle
    return self._handle_suback()
  File ""/usr/local/lib/python3.7/dist-packages/paho/mqtt/client.py"", line 3142, in _handle_suback
    (mid, packet) = struct.unpack(pack_format, self._in_packet['packet'])
struct.error: bad char in struct format


![mqtt-paho](https://user-images.githubusercontent.com/5938498/81560968-563f9980-938a-11ea-9c03-45ba73cbb3a1.png)

-s
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjcwNjMzMw==,paho.mqtt.python,626706333,491,NA,ralight,79578,Roger Light,,NA,2020-05-11T13:36:36Z,2020-05-11T13:36:36Z,"```
    def _handle_suback(self):
        self._easy_log(MQTT_LOG_DEBUG, ""Received SUBACK"")
        pack_format = ""!H"" + str(len(self._in_packet['packet']) - 2) + 's'
        (mid, packet) = struct.unpack(pack_format, self._in_packet['packet'])
```
struct.unpack would give `struct.error: bad char in struct format` if len(self._in_packet['packet']) is less than 2, and so pack_format ended up like `""!H-1s""`. That suggests that the SUBACK packet is too short. The ones you show above look complete, are they the packets that correspond to the error?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjcwNjMzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjc4OTgzOA==,paho.mqtt.python,626789838,491,NA,SkyperTHC,5938498,skyper,,NA,2020-05-11T15:53:21Z,2020-05-11T15:53:21Z,"> ```
>     def _handle_suback(self):
>         self._easy_log(MQTT_LOG_DEBUG, ""Received SUBACK"")
>         pack_format = ""!H"" + str(len(self._in_packet['packet']) - 2) + 's'
>         (mid, packet) = struct.unpack(pack_format, self._in_packet['packet'])
> ```
> 
> struct.unpack would give `struct.error: bad char in struct format` if len(self._in_packet['packet']) is less than 2, and so pack_format ended up like `""!H-1s""`. That suggests that the SUBACK packet is too short. The ones you show above look complete, are they the packets that correspond to the error?

yes, I had the tcpdump running while the error occurred and the picture above is from that tcp dump.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYyNjc4OTgzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47eKrJ,paho.mqtt.python,997763785,491,NA,Adum888,33115304,,,NA,2021-12-20T09:48:10Z,2021-12-20T09:48:10Z,"Hi
So im running into a simmilar problem where i every now and then get the ""bad char Error"" during publishing
![bad_char](https://user-images.githubusercontent.com/33115304/146746702-67544c27-7107-4e85-ad2a-1b20a1f91934.PNG)
Are there any known workarounds for this issue?

I'm using RobotFramework to send those msgs.
They are sent wit qos=0 and retain=false 
Im on the latest version of the paho library","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47eKrJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4-Ze5M,paho.mqtt.python,1046867532,491,NA,rnwhitehead,85872522,Richard Whitehead,,NA,2022-02-21T13:14:42Z,2022-02-21T13:14:42Z,I was getting this but it turned out to be because I was calling loop_start() but then also trying to loop() in the main thread.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4-Ze5M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5VhWaB,paho.mqtt.python,1434805889,491,NA,whaou,18322904,,,NA,2023-02-17T15:28:03Z,2023-02-17T15:28:03Z,"I'm in the same case: I use RobotFramework (qos=1) and randomly get the ""bad char in struct format"" error.
Do you have any hint?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5VhWaB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5dWaoP,paho.mqtt.python,1566157327,491,NA,kabannis,134854954,,,NA,2023-05-28T14:28:14Z,2023-05-28T14:28:14Z,"It faced this issue with loop_forever, but not with loop_start/stop. 
To resolve it, I commented a ""subscribe"" line to a non existing topic and it worked. I think it happens when the subscription is ""empty"". ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5dWaoP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5gG7I0,paho.mqtt.python,1612427828,491,NA,kaijie0102,38713736,Leow Kai Jie,,NA,2023-06-29T04:50:55Z,2023-06-29T04:50:55Z,"```
client.connect(broker)
client.subscribe(""test/topic"")
client.loop_forever()
```

**make sure you subscribe to a topic before you do loop_forever()** ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5gG7I0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDkzG,paho.mqtt.python,1879985350,491,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T07:54:15Z,2024-01-07T07:54:15Z,"Working through old issues tidying things up - if this is no longer an issue then please close it; otherwise I'll try to help resolve it.

@kaijie0102 - it's preferable to call `subscribe` in the `on_connect` callback (as shown in [the examples](https://github.com/eclipse/paho.mqtt.python#getting-started)) because, otherwise, the subscription may be lost if the connection is lost/re-established (a lot of users have issues with this).

@SkyperTHC - are you still having this issue? I'd be keen to add a bit of extra debug code to try and work out where things are going wrong (as per Rogers comments it looks like an issue with the packet length but that does not match up with the dump. As such the simplest way to track this down is to add extra logging (as it's not something I can replicate).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDkzG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/491,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNQhf,paho.mqtt.python,2234845279,491,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:11:56Z,2024-07-18T00:11:56Z,Closing due to age/inactivity. Please feel free to reopen if this is still an issue with the current release (additional info would be needed to help us trace this).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNQhf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/492,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/492,paho.mqtt.python,621502979,492,"At reconnect, the client doesn't seem to take max_inflight_messages into account",LOorts-Aloxy,50589042,,,CLOSED,2020-05-20T06:44:10Z,2024-01-08T06:57:16Z,"Hi,
We've been using your service for some time now and are very happy about the results. Thanks for this! 

Our setup is the following:
Sensor - (Dash 7)-> gateway -(mqtt)-> server
On the server, we do authentication of the gateway but also the sensor sending the information. When an unauthenticated sensor sends a message through our gateway, the gateway gets disconnected from the broker as per the following documentation: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc39871804 . 

Now I've created some code to manually delete the last entry and this seems to work but when the service reconnects, it seems to publish all messages in the _out_messages queue while we've set the max_inflight_messages to 1. I've looked at the code and looks like there's no check for this (https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3054). Shouldn't we check here if we're not publishing to many messages at once?

Thank you in advance!

Kind regards,
Liam","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/492/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/492,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDV-A,paho.mqtt.python,1879924608,492,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:18:42Z,2024-01-07T03:18:42Z,"Apologies for the huge delay in responding (we are working through old issues currently). 

Can you please confirm if this is still an issue for you with the current release? I would also appreciate it if you could update the question as the links are now outdated making the issue a little unclear. It would also be useful to see the code you created to ""manually delete the last entry"".

Note:; If we do not hear from you in a month we will assume this is no longer an issue (not ideal but the only option with issues as old as this).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDV-A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,paho.mqtt.python,623150198,493,SRV connection do not work (with fix),edwin-oetelaar,1407996,Edwin van den Oetelaar,edwin@oetelaar.com,OPEN,2020-05-22T11:41:39Z,2023-12-24T02:34:04Z,"https://github.com/eclipse/paho.mqtt.python/blob/1eec03edf39128e461e6729694cf5d7c1959e5e4/src/paho/mqtt/client.py#L974

Please replace line with parameters instead of wrong positional arguments.
Testen on python 2.7.x and 3.5.x fixes both.

  # return self.connect(host, port, keepalive, bind_address, clean_start, properties)
                # Edwin van den Oetelaar fixes this 2020-05-22
                return self.connect(host=host, port=port, keepalive=keepalive, bind_address=bind_address, clean_start=clean_start, properties=properties)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMzc1ODA3MQ==,paho.mqtt.python,703758071,493,NA,TD22057,1421685,Ted Drain,,NA,2020-10-05T16:55:41Z,2020-10-05T16:55:41Z,"In case this bug isn't clear - this is serious (i.e. breaking) issue.  The connect line in client.py is not passing the arguments through in the correct locations to connect().  As far as I can see, this means args like clean_start don't work at all.  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMzc1ODA3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMzc2NTM0MQ==,paho.mqtt.python,703765341,493,NA,edwin-oetelaar,1407996,Edwin van den Oetelaar,edwin@oetelaar.com,NA,2020-10-05T17:08:38Z,2020-10-05T17:08:38Z,"I am not sure how to contribute here even more than I already did.
My code running a real project broke, I needed the SRV functions.
I found the problem, debugged it, fixed it and submitted a patch. 
Who is responsible for maintaining this code base? 

Also https://github.com/eclipse/paho.mqtt.python/issues/442#issue-521739758
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMzc2NTM0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxOTk3NzY4OA==,paho.mqtt.python,719977688,493,NA,TD22057,1421685,Ted Drain,,NA,2020-10-31T19:33:22Z,2020-10-31T19:33:22Z,"Any update on this?  This bug breaks the client and is trivial to fix.  
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxOTk3NzY4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTA4MjE5MA==,paho.mqtt.python,771082190,493,NA,and3rson,190107,Andrew Dunai,a@dun.ai,NA,2021-02-01T19:00:33Z,2021-02-01T19:00:33Z,Any updates? This really breaks the `connect_srv` and makes it unusable.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc3MTA4MjE5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/493,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs449oXX,paho.mqtt.python,955680215,493,NA,edwin-oetelaar,1407996,Edwin van den Oetelaar,edwin@oetelaar.com,NA,2021-10-31T11:12:29Z,2021-10-31T11:12:29Z,"https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L951

this looks still not fixed

@icraggs : please fix what you broke","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs449oXX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/494,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/494,paho.mqtt.python,629244073,494,loop_start() isssue,thrmk,61312222,Manoj kumar,,CLOSED,2020-06-02T14:20:21Z,2021-07-22T21:05:19Z,"I used loop_start() in my flask application with paho-mqtt protocol.  And the data is getting stored twice in the sqlite database. How to overcome this issue?
Can anyone help me resolving it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/494/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/494,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNzcwNA==,paho.mqtt.python,670527704,494,NA,ralight,79578,Roger Light,,NA,2020-08-07T13:52:47Z,2020-08-07T13:52:47Z,"You'll have to provide more details, like an example working program that demonstrates what you are seeing.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNzcwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/494,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w5S0,paho.mqtt.python,885232820,494,NA,ralight,79578,Roger Light,,NA,2021-07-22T21:05:19Z,2021-07-22T21:05:19Z,"I'm going to close this, if it's still an issue please reopen and add more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w5S0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,paho.mqtt.python,630009643,495,PUBLISH is not sent to python subscriber after server SIGHUP.,jshep321,12618683,jshep321,,CLOSED,2020-06-03T13:47:42Z,2020-06-04T14:51:59Z,"I am running both bash (mosquitto_sub) and python subscribers.  Every morning when the cron.daily runs, the server mosquitto.log shows this:
_Wed Jun  3 06:25:02 2020: Error in poll: Interrupted system call.
Wed Jun  3 06:25:02 2020: Reloading config.
Wed Jun  3 06:25:02 2020: Client mqttpi_monitor disconnected.
Wed Jun  3 06:25:03 2020: New connection from 10.0.0.101 on port 8883.
Wed Jun  3 06:25:04 2020: New client connected from 10.0.0.101 as mqttpi_monitor (c1, k60).
Wed Jun  3 06:25:04 2020: Sending CONNACK to mqttpi_monitor (0, 0)_

However after the above occurs and any client publishes a message (on a topic that is subscribed to by my python subscriber), the server never sends the PUBLISH to that sub.  Works fine on the mosquitto_sub client.

I've tried both loop_forever and loop_start/stop in a while loop, as below.  Same result.

#forever loop:
    client.subscribe(topic+topic2)
    client.loop_forever()
#OR

#infinite loop:
client.subscribe(topic+topic2)
while (1):
    client.loop_start() 
    time.sleep(4) 
    client.loop_stop() 
`
Is this error due to my loop misconfiguration or a server bug?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxMTk3Ng==,paho.mqtt.python,638211976,495,NA,jshep321,12618683,jshep321,,NA,2020-06-03T13:51:43Z,2020-06-03T13:51:43Z,"Also FYI.  On the client side I can see the ""correct"" log entries from my callbacks:
_2020-06-03 06:25:02,876 INFO     client disconnected OK
2020-06-03 06:25:04,035 INFO     client connected OK_
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxMTk3Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxNzMwNA==,paho.mqtt.python,638217304,495,NA,ralight,79578,Roger Light,,NA,2020-06-03T14:00:17Z,2020-06-03T14:00:17Z,"The broker shouldn't be kicking out your client on a HUP (what version of mosquitto are you using - this isn't something I've been able to reproduce)

However, your client should be able to handle reconnecting. What your code does it subscribe on the first connection only. Try putting your subscribe in the on_connect callback.

```
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, rc):
    mqttc.subscribe(""topic"")

client = mqtt.Client()
client.on_connect = on_connect
client.connect(""localhost"", 1883, 60)
client.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxNzMwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxOTE0MQ==,paho.mqtt.python,638219141,495,NA,jshep321,12618683,jshep321,,NA,2020-06-03T14:03:21Z,2020-06-03T14:03:21Z,"Ok, I'll try that thanks!  I'm using 1.4.10 on raspbian (stretch).

Edit:  Seems to work perfectly on a systemctl service restart of the server.  Will close issue if everything works after tomorrow's event.

As far as the root cause of the server issue it's unclear what that exactly might be.  My only evidence: cron.daily restarts other unrelated services (CUPS, Apache, etc.) at exactly that time.  The only related restart showing in the /var/log/syslog might be rsyslogd (logrotate), which causes mosquitto to change the log file it's writing to.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODIxOTE0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/495,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODkwMDMyMw==,paho.mqtt.python,638900323,495,NA,jshep321,12618683,jshep321,,NA,2020-06-04T14:51:59Z,2020-06-04T14:51:59Z,Subscribe as part of the on_connect callback function fixes it.  Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDYzODkwMDMyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/496,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/496,paho.mqtt.python,634506002,496,How can i fix Connection Timed Out issue?,ozleyengoktug,59779434,,,CLOSED,2020-06-08T10:53:56Z,2020-06-09T12:11:55Z,"`<script src=""https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js"" type=""text/javascript""></script>
<script>
    // Create a client instance
    client = new Paho.MQTT.Client(""broker.hivemq.com"", 8000, """" , ""gokden"");


    // connect the client
    client.connect({onSuccess:onConnect,useSSL:true}); 

    function onConnect(){
        console.log(""Connected!"");
    }

</script>`

This is my connection code. But after 20 seconds i get `WebSocket connection to 'wss://broker.hivemq.com:8000/' failed: Error in connection establishment: net::ERR_CONNECTION_CLOSED` error","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/496/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/496,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MTI0ODU5OQ==,paho.mqtt.python,641248599,496,NA,ozleyengoktug,59779434,,,NA,2020-06-09T12:11:55Z,2020-06-09T12:11:55Z,"broker.hivemq.com does not support secure mqtt over websocket
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY0MTI0ODU5OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,paho.mqtt.python,654088112,499,Question about mqtt and threading,fjpa121197,43655840,,,CLOSED,2020-07-09T14:05:21Z,2023-12-07T20:24:40Z,"Hi,

Im trying to simulate multiples (up to 10,000) devices sending data. Is there any limitations on how many devices (clients) I can create using threading and mqtt library?  I managed to create 200 devices and there is no problem connecting and sending data for the 200 devices. However, when I try to scale this to 1000 devices, Im not able to connect to all of them, and they just disconnect (only two or one device stays connected. 

Here is my code:

```
import paho.mqtt.client as mqtt
import time
import threading
import logging
import thingsboard_objects as Things
import random
import datetime
logging.basicConfig(level=logging.INFO)


init_time = time.time()


def Connect(client, broker, port, token, keepalive, run_forever=False):
    connflag = False
    delay = 5
    print(""connecting "",client)
    badcount = 0  # counter for bad connection attempts
    while not connflag:
        print(logging.info(""connecting to broker "" + str(broker)))
        # print(""connecting to broker ""+str(broker)+"":""+str(port))
        print(""Attempts "", str(badcount))
        time.sleep(2)
        try:
            client.username_pw_set(token)
            client.connect(broker, port, keepalive)
            connflag = True

        except:
            client.badconnection_flag = True
            logging.info(""connection failed "" + str(badcount))
            badcount += 1
            if badcount >= 3 and not run_forever:
                return -1
                raise SystemExit  # give up

    return 0


def wait_for(client, msgType, period=1, wait_time=20, running_loop=False):
    """"""Will wait for a particular event gives up after period*wait_time, Default=10
seconds.Returns True if succesful False if fails""""""
    # running loop is true when using loop_start or loop_forever
    client.running_loop = running_loop  #
    wcount = 0
    while True:
        logging.info(""waiting"" + msgType)
        if msgType == ""CONNACK"":
            if client.on_connect:
                if client.connected_flag:
                    return True
                if client.bad_connection_flag:  #
                    return False

        if msgType == ""SUBACK"":
            if client.on_subscribe:
                if client.suback_flag:
                    return True
        if msgType == ""MESSAGE"":
            if client.on_message:
                if client.message_received_flag:
                    return True
        if msgType == ""PUBACK"":
            if client.on_publish:
                if client.puback_flag:
                    return True

        if not client.running_loop:
            client.loop(.01)  # check for messages manually
        time.sleep(period)
        wcount += 1
        if wcount > wait_time:
            print(""return from wait loop taken too long"")
            return False
    return True


def client_loop(client, broker, port, token, keepalive=300, loop_function=None,
                loop_delay=10, run_forever=False):
    """"""runs a loop that will auto reconnect and subscribe to topics
    pass topics as a list of tuples. You can pass a function to be
    called at set intervals determined by the loop_delay
    """"""
    client.run_flag = True
    client.broker = broker
    print(""running loop "")
    client.reconnect_delay_set(min_delay=1, max_delay=12)

    while client.run_flag:  # loop forever

        if client.bad_connection_flag:
            break
        if not client.connected_flag:
            print(""Connecting to "" + broker)
            if Connect(client, broker, port, token, keepalive, run_forever) != -1:
                if not wait_for(client, ""CONNACK""):
                    client.run_flag = False  # break no connack
            else:  # connect fails
                client.run_flag = False  # break
                print(""quitting loop for  broker "", broker)

        client.loop(0.01)

        if client.connected_flag and loop_function:  # function to call
            loop_function(client, loop_delay)  # call function

    time.sleep(1)
    print(""disconnecting from"", broker)
    if client.connected_flag:
        client.disconnect()
        client.connected_flag = False


def on_log(client, userdata, level, buf):
    print(buf)


#def on_message(client, userdata, message):
#    time.sleep(1)
#    print(""message received"", str(message.payload.decode(""utf-8"")))


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag = True  # set flag
        for c in clients:
            if client == c[""client""]:
                if c[""sub_topic""] != """":
                    client.subscribe(c[""sub_topic""])

                    print(""connected OK"")
    else:
        print(""Bad connection Returned code="", rc)
        client.loop_stop()


def on_disconnect(client, userdata, rc):
    client.connected_flag = False  # set flag
    # print(""client disconnected ok"")


def on_publish(client, userdata, mid):
    print(""In on_pub callback mid= "", mid)


def pub(client, loop_delay):

    rmd_current = round(random.uniform(0.6, 50.0), 2)
    rmd_pressure = round(random.uniform(0.6, 50.0), 2)
    global init_time
    if time.time() - init_time >= 3600:
        rmd_mnc = round(random.uniform(5.0, 30.0), 2)
        rmd_sdc = round(random.random(), 2)
        rmd_mnp = round(random.uniform(5.0, 30.0), 2)
        rmd_sdp = round(random.random(), 2)

        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
        client.publish('v1/devices/me/telemetry',
                       '{""MnC"": ""%s"", ""SdC"": ""%s"", ""Str"": ""2554"",""Stp"": ""2554"", '
                       '""MnP"": ""%s"", ""SdP"": ""%s""}' % (rmd_mnc, rmd_sdc, rmd_mnp, rmd_sdp))

        init_time = time.time()
    else:
        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
    print(datetime.datetime.now())
    time.sleep(loop_delay)
    pass


def Create_connections():
    for i in range(n_clients):
        cname = ""client"" + str(i)
        t = int(time.time())
        client_id = cname + str(t)  # create unique client_id
        client = mqtt.Client(client_id)  # create new instance
        clients[i][""client""] = client
        clients[i][""client_id""] = client_id
        clients[i][""cname""] = cname
        broker = clients[i][""broker""]
        port = clients[i][""port""]
        token = clients[i][""token""]
        client.on_connect = on_connect
        client.on_disconnect = on_disconnect
        client.on_publish = on_publish
        #client.on_message = on_message
        t = threading.Thread(target=client_loop, args=(client, broker, port, token, 300, pub))
        threads.append(t)
        t.start()


if __name__ == '__main__':

    things_location = input(""What type of thingsboard installation are you working with (demo/local)? "")

    if things_location == ""local"":
        type_install = 'cseetprj03.essex.ac.uk:8080'
        broker = 'cseetprj03.essex.ac.uk'
    else:
        type_install = broker = 'demo.thingsboard.io'

    header = Things.get_credentials(things_location)
    my_devices = Things.get_devices_id(header, type_install) # get list of devices created

    clients = []
    for device in my_devices:
        device_info = {""broker"": broker, ""port"": 1883, ""name"": device[""name""],
                       ""token"": Things.get_device_token(device[""id""][""id""], header, type_install)}
        clients.append(device_info)

    n_clients = len(clients)
    mqtt.Client.connected_flag = False  # create flag in class
    mqtt.Client.bad_connection_flag = False  # create flag in class

    threads = []
    print(""Creating Connections "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""Publishing "")
    Create_connections()

    print(""All clients connected "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""starting main loop"")
    try:
        while no_threads == 1001:
            time.sleep(10)
            no_threads = threading.active_count()
            print(""current threads ="", no_threads)
            for c in clients:
                if not c[""client""].connected_flag:
                    print(""broker "", c[""broker""], "" is disconnected"")

    except KeyboardInterrupt:
        print(""ending"")
        for c in clients:
            c[""client""].run_flag = False
    time.sleep(10)
```

Is there a parameters I should change, so it allows me to connect this 1000 devices? 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE1NTcyOA==,paho.mqtt.python,656155728,499,NA,swails,779022,Jason Swails,,NA,2020-07-09T14:18:37Z,2020-07-09T14:18:37Z,"If this is on a Linux machine, you may have to up the limit of open file descriptors in the kernel.  What does the command `ulimit -b` return?  For me it returns 1024 (OS default for Ubuntu 18.04).

File descriptors are consumed by open files as well as open connections, so you won't be able to open more than 1024 connections + files at once.

You can up this limit to, say, 11000 if you want to test 10K connections using:

```
ulimit -n 11000
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE1NTcyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE3NDA0MQ==,paho.mqtt.python,656174041,499,NA,fjpa121197,43655840,,,NA,2020-07-09T14:50:19Z,2020-07-09T14:50:19Z,"I also get 1024, however, this should allow me to open the 1000 connections right? Im having trouble opening the 1000 conections","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY1NjE3NDA0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzI2NDUzMw==,paho.mqtt.python,723264533,499,NA,mrdc,16876990,,,NA,2020-11-06T19:41:42Z,2020-11-06T19:41:42Z,"@fjpa121197 
`Each mqtt client means 3 open file descriptors: one to the mqtt server, and a pair of sockets connected to each other.
3 * 340 = 1020`
More info here:
https://github.com/eclipse/paho.mqtt.python/issues/238
https://github.com/eclipse/paho.mqtt.python/issues/183","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyMzI2NDUzMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/499,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCItO,paho.mqtt.python,1846053710,499,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:22:20Z,2023-12-07T20:22:20Z,I'm going to close this as a duplicate (#183 & #238 and a few others). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCItO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/500,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/500,paho.mqtt.python,656630061,500,Can't receive messages >4kb with TLS & websockets,christopherkuemmel,23188241,Christopher Kümmel,,CLOSED,2020-07-14T13:52:00Z,2021-10-21T09:30:58Z,"Hi, I stumbled on this problem in our current project. We have a distributed approach where a different partner controls the server. So, unfortunately I can't tell to much from the server side, except they're using the [MQTTnet](https://github.com/chkr1011/MQTTnet) implementation. 

On our side, however, we're using `paho-mqtt==1.5.0` and can successfully connect and publish any message to the broker. But receiving is a big problem. Small messages just work fine. Large messages won't be processed and causing the system to freeze.

I nailed the problem down to the `opcode` in the `_recv_impl` method in the client module. 
https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3714

With a dirty little hack the system start to work without any problems. Receiving several large messages in long sessions runs without any problem. We just overwrite and the variable to 2.
`L3714:    opcode = 2`

I honestly have no idea what side effects this can cause and would be glad to get some help or ideas on how to properly fix this. Also any intuition on what's going on with that *opcode* is very welcome. Thanks!

---

PS: The other partners are able to receive and send any data without using a hack. But they use the MQTTnet c# implementation.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/500/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/500,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4002f8,paho.mqtt.python,886269948,500,NA,ralight,79578,Roger Light,,NA,2021-07-25T22:58:32Z,2021-07-25T22:58:32Z,I think this is due to the client not handling websockets continuation frames. I've pushed some code that I believe should fix it.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4002f8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501,paho.mqtt.python,661944888,501,Code for multiple clients - Is there any possible error that disconnects a client after a while?,fjpa121197,43655840,,,CLOSED,2020-07-20T15:19:49Z,2024-07-18T00:12:42Z,"Hi, Im trying to create multiple clients that connect to an IoT platform that is hosted in a remote linux machine. I have already managed to get the code working with 200 clients. However, when I try to increase the number (1000 clients), I get some rc=3 (this number varies) and some of the clients end up disconnecting. I dont know if there is something in the code that causes these behaviours (I cant tell if Im doing something wrong).


Any suggestions with my code?

Thanks in advance 
```
import multiprocessing
import paho.mqtt.client as mqtt
import time
import threading
import logging
import math
import thingsboard_objects as Things
import random
import datetime
import numpy as np
import sys
logging.basicConfig(level=logging.INFO)

init_time = time.time()
disconnected = 0

def Connect(client, broker, port, token, keepalive, run_forever=False):
    connflag = False
    delay = 5
    print(""connecting "",client)
    badcount = 0  # counter for bad connection attempts
    while not connflag:
        print(logging.info(""connecting to broker "" + str(broker)))
        # print(""connecting to broker ""+str(broker)+"":""+str(port))
        print(""Attempts "", str(badcount))
        time.sleep(2)
        try:
            client.username_pw_set(token)
            client.connect(broker, port, keepalive)
            time.sleep(1)
            connflag = True

        except:
            pass
            #client.badconnection_flag = True
            #logging.info(""connection failed "" + str(badcount))
            #time.sleep(5)
            #badcount += 1
            #if badcount >= 3 and not run_forever:
            #    return -1
            #    raise SystemExit  # give up

    return 0


def wait_for(client, msgType, period=1, wait_time=15, running_loop=False):
    """"""Will wait for a particular event gives up after period*wait_time, Default=10
seconds.Returns True if succesful False if fails""""""
    # running loop is true when using loop_start or loop_forever
    client.running_loop = running_loop  #
    wcount = 0
    while True:
        logging.info(""waiting"" + msgType)
        if msgType == ""CONNACK"":
            if client.on_connect:
                if client.connected_flag:
                    return True
                if client.bad_connection_flag:  #
                    return False

        if msgType == ""SUBACK"":
            if client.on_subscribe:
                if client.suback_flag:
                    return True
        if msgType == ""MESSAGE"":
            if client.on_message:
                if client.message_received_flag:
                    return True
        if msgType == ""PUBACK"":
            if client.on_publish:
                if client.puback_flag:
                    return True

        if not client.running_loop:
            client.loop(.01)  # check for messages manually
        time.sleep(period)
        wcount += 1
        if wcount > wait_time:
            print(""return from wait loop taken too long"")
            return False
    return True


def client_loop(client, broker, port, token, keepalive=600, loop_function=None,
                loop_delay=10, run_forever=False):
    """"""runs a loop that will auto reconnect and subscribe to topics
    pass topics as a list of tuples. You can pass a function to be
    called at set intervals determined by the loop_delay
    """"""
    client.run_flag = True
    client.broker = broker
    print(""running loop "")
    client.reconnect_delay_set(min_delay=1, max_delay=12)

    while client.run_flag:  # loop forever

        if client.bad_connection_flag:
            break
        if not client.connected_flag:
            print(""Connecting to "" + broker)
            if Connect(client, broker, port, token, keepalive, run_forever) != -1:
                if not wait_for(client, ""CONNACK""):
                    client.run_flag = True  # break no connack
            else:  # connect fails
                client.run_flag = False  # break
                print(""quitting loop for  broker "", broker)

        client.loop(0.01)

        if client.connected_flag and loop_function:  # function to call
            loop_function(client, loop_delay)  # call function

    time.sleep(1)
    print(""disconnecting from"", broker)
    if client.connected_flag:
        client.disconnect()
        client.connected_flag = False


def on_log(client, userdata, level, buf):
    print(buf)


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag = True  # set flag
        for c in clients:
          #print(""connected OK"")
          pass
    else:
        print(""Bad connection Returned code="", rc)
        file1 = open(""bad_connections.txt"",""a"")#append mode 
        file1.write(""Bad connection Returned code=%s \n"" % rc) 
        file1.close() 
        client.loop_stop()


def on_disconnect(client, userdata, rc):
    client.connected_flag = False  # set flag
    print(""client disconnected ok"")


def on_publish(client, userdata, mid):
    print(""In on_pub callback mid= "", mid)

def pub(client, loop_delay):

    rmd_current = round(random.uniform(0.6, 50.0), 2)
    rmd_pressure = round(random.uniform(0.6, 50.0), 2)
    global init_time
    if time.time() - init_time >= 3600:
        rmd_mnc = round(random.uniform(5.0, 30.0), 2)
        rmd_sdc = round(random.random(), 2)
        rmd_mnp = round(random.uniform(5.0, 30.0), 2)
        rmd_sdp = round(random.random(), 2)

        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
        client.publish('v1/devices/me/telemetry',
                       '{""MnC"": ""%s"", ""SdC"": ""%s"", ""Str"": ""2554"",""Stp"": ""2554"", '
                       '""MnP"": ""%s"", ""SdP"": ""%s""}' % (rmd_mnc, rmd_sdc, rmd_mnp, rmd_sdp))

        init_time = time.time()
    else:
        client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
    print(datetime.datetime.now())
    time.sleep(loop_delay)

def Create_connections(n_clients, threads):
    for i in range(len(n_clients)):
        cname = ""client-"" + n_clients[i][""name""]
        t = int(time.time())
        client_id = cname + str(t)  # create unique client_id
        client = mqtt.Client(client_id)  # create new instance
        n_clients[i][""client""] = client
        n_clients[i][""client_id""] = client_id
        n_clients[i][""cname""] = cname
        broker_p = n_clients[i][""broker""]
        port = n_clients[i][""port""]
        token = n_clients[i][""token""]
        client.on_connect = on_connect
        client.on_disconnect = on_disconnect
        client.on_publish = on_publish
        #client.on_message = on_message
        t = threading.Thread(target=client_loop, args=(client, broker_p, port, token, 600, pub))
        threads.append(t)
        t.start()

def main_loop(clients_loop):

    mqtt.Client.connected_flag = False  # create flag in class
    mqtt.Client.bad_connection_flag = False  # create flag in class

    threads = []
    print(""Creating Connections "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""Publishing "")
    Create_connections(clients_loop, threads)

    print(""All clients connected "")
    no_threads = threading.active_count()
    print(""current threads ="", no_threads)
    print(""starting main loop"")
    try:
        while True:
            time.sleep(10)
            no_threads = threading.active_count()
            print(""current threads ="", no_threads)
            for c in clients_loop:
                if not c[""client""].connected_flag:
                    print(""broker "", c[""broker""], "" is disconnected"" , c[""name""])
                    file2 = open(""disconnects.txt"",""a"")#append mode 
                    file2.write(""broker %s is disconnected %s \n"" % (c[""broker""], c[""name""])) 
                    file2.close()
                    time.sleep(1)
                    #sys.exit(""A connection was dropped"")

    except KeyboardInterrupt:
        print(""ending"")
        for c in clients_loop:
            c[""client""].run_flag = False
        
    time.sleep(10)

if __name__ == '__main__':

    # In case the user is using a demo version or local version of thingsboard
    things_location = input(""What type of thingsboard installation are you working with (demo/local)? "")

    if things_location == ""demo"":
        type_install = ""demo.thingsboard.io""
        header = Things.get_credentials(things_location)
    elif things_location == ""local"":
        computer = input(""Which computer? "")
        type_install = ""cseetprj%s.essex.ac.uk:8080"" % computer
        broker = ""cseetprj%s.essex.ac.uk"" % computer
        header = Things.get_credentials(""local"", type_install)
    else:
        print(""Error: Installation not supported"")

    my_devices = Things.get_devices_id(header, type_install)
    
    clients = []
    for device in my_devices:
        device_info = {""broker"": broker, ""port"": 1883, ""name"": device[""name""],
                       ""token"": Things.get_device_token(device[""id""][""id""], header, type_install)}
        clients.append(device_info)
        
    print(len(clients))
    time.sleep(5)
    if len(clients) >= 200:
        print(""Splitting devices to multiprocess"")
        split_by = math.ceil(len(clients) / 250)
        split_clients = np.array_split(clients, split_by)

    jobs = []
    for idx, client_portion in enumerate(split_clients):
        print(""Starting process for portion %s"" % (idx + 1))
        p = multiprocessing.Process(target=main_loop, args = (client_portion,))
        jobs.append(p)
        p.start()
        
    for job in jobs:
      print(""Ending process"")
      job.join()
```
Also, is there any reason or possible explanation of why when publishing two messages(data) one after another, the second one doesnt arrive? 

For example, using the 200 clients sending data every 10 seconds, the following part is sent every hour:
```
 client.publish('v1/devices/me/telemetry',
                       '{""Current"": ""%s"",""Pressure"": ""%s"",""Str"": ""12341"",""Stp"": ""12340"",""AL1"": ""~"",""AL2"": ""~"",'
                       '""AL3"": ""~"",""AL4"": ""~"",""AL5"": ""~"",""AL6"": ""~"",""AL7"": ""~"",""AL8"": ""~""}' % (rmd_current, rmd_pressure))
        client.publish('v1/devices/me/telemetry',
                       '{""MnC"": ""%s"", ""SdC"": ""%s"", ""Str"": ""2554"",""Stp"": ""2554"", '
                       '""MnP"": ""%s"", ""SdP"": ""%s""}' % (rmd_mnc, rmd_sdc, rmd_mnp, rmd_sdp))
```
However, I sometimes see that the second message (data) doesnt arrive for all clients and if it does, the interval is not every hour.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTQ4MzY0OQ==,paho.mqtt.python,729483649,501,NA,yxlwfds,2525362,Pike,,NA,2020-11-18T07:11:06Z,2020-11-18T07:11:06Z,up,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTQ4MzY0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDVi1,paho.mqtt.python,1879922869,501,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:05:09Z,2024-01-07T03:05:09Z,"Apologies for the huge delay in responding (trying to clean up old issues on this repo).

Firstly I'd appreciate it if you could confirm you are still having this issue (quite possible you have moved onto another solution or updates to the library have resolved the issue).

> I get some rc=3 (this number varies) and some of the clients end up disconnecting

Can you please confirm which function is returning the error (or is it a mix?) and also the frequency that this is occurring (you would expect some connection loss over time; especially with 1000+ connections).

I'll leave it there for now - note that if there is no response in a month we will close this off.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDVi1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/501,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNRGK,paho.mqtt.python,2234847626,501,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:12:42Z,2024-07-18T00:12:42Z,Closing due to age/lack of activity.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNRGK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/502,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/502,paho.mqtt.python,662087403,502,Is there any Mechanism to store messages in file system even if the client lose the connection?,malepurakesh,53519398,,,CLOSED,2020-07-20T17:46:24Z,2021-08-16T22:36:01Z,"hi, 
 I want to store the sensor data if the client connection lost. And even if the client lose the connection, it should keep on store the sensor data in the file system. And after re-establishing the connection. Client should publish the stored data to cloud. So, I had tried with client persistence. 
 I have used MQTTCLIENT_PERSISTENCE_DEFAULT, according to my understanding if I use this attribute, the inflight message will store in the file system(if connection lost). 
How can I store the messages in file system, even after client connection lose? Is there any mechanism to automatic publishing of stored messages from file system?
Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/502/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/502,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNzMyMg==,paho.mqtt.python,670527322,502,NA,ralight,79578,Roger Light,,NA,2020-08-07T13:51:54Z,2020-08-07T13:51:54Z,I think you should be reporting this on the C client issue tracker: https://github.com/eclipse/paho.mqtt.c/issues,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNzMyMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/503,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/503,paho.mqtt.python,665740231,503,Getting error  'NoneType' object is not callable,doubledrat,15909637,,,CLOSED,2020-07-26T09:02:24Z,2023-12-26T01:08:17Z,"not all the time, but sometimes getting this error -

```
Exception in thread Thread-1 (most likely raised during interpreter shutdown):
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
  File ""/usr/lib/python2.7/threading.py"", line 754, in run
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 3428, in _thread_main
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1782, in loop_forever
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1193, in loop
  File ""/usr/local/lib/python2.7/dist-packages/paho/mqtt/client.py"", line 1588, in loop_write
<type 'exceptions.TypeError'>: 'NoneType' object is not callable

```

my code is simple -


```
import paho.mqtt.client as mqtt
client=mqtt.Client(""MQTTMonitor2"")
client.connect(""192.168.0.9"")
client.on_message=on_message
client.loop_start()
client.subscribe(""#"",2)
signal.pause() # wait for a signal
```

let me know if my on_message code is relevant.  I'm assuming it's not as the error is in client.py
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/503/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/503,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaV6P,paho.mqtt.python,1869176463,503,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T01:08:17Z,2023-12-26T01:08:17Z,"Sorry that no one has commented until now. Due to the age of this issue (possible the issue is already fixed or you have found a solution yourself) I'm going to close it (trying to get issues down to a manageable number).

If you are still having issues then please feel free to reopen. However I'd appreciate it if you could confirm which version of the library you are using (this makes it a lot easier to work out what's at line 1588 in `client.py`).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaV6P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/504,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/504,paho.mqtt.python,669804404,504,loop_forever() hides exceptions,jbnjohnathan,54041505,,,CLOSED,2020-07-31T13:13:36Z,2020-08-07T13:50:33Z,"paho-mqtt==1.5.0

I am using the loop_forever() funktion to do some things when an message which I subscribe to is found.

```
def on_message():
    doing stuff

mqtt_client.on_message = on_message
mqtt_client.loop_forever()
```

However if there are issues in the `on_message()` function that throws exceptions, those are not shown, instead they are eaten and kept secret by the `loop_forever()`
This is causing a lot of issues for me. Is there a way to let the loop allow exceptions and crash the python script instead of staying silent?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/504/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/504,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNjc1Mw==,paho.mqtt.python,670526753,504,NA,ralight,79578,Roger Light,,NA,2020-08-07T13:50:32Z,2020-08-07T13:50:32Z,"You're quite right. This is a duplicate of #365 with a new PR in #507, so I hope it's ok if I close this particular issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3MDUyNjc1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,paho.mqtt.python,674397478,505,AttributeError: 'NoneType' object has no attribute 'recv',freespy,2901078,江小鱼,arhui007@gmail.com,CLOSED,2020-08-06T15:22:19Z,2023-12-23T15:00:52Z,"```
ERROR mqtt error 'NoneType' object has no attribute 'recv' 2020-08-06 23:12:47
ERROR Traceback (most recent call last):
  File ""/data/dtuapi/dtuapi.py"", line 117, in run
    self.client.loop_forever()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1787, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1182, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1573, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2276, in _packet_read
    byte = self._sock_recv(1)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 660, in _sock_recv
    return self._sock.recv(bufsize)
AttributeError: 'NoneType' object has no attribute 'recv'
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgzODc0NzE1NA==,paho.mqtt.python,838747154,505,NA,valebes,10956211,Valerio Besozzi,,NA,2021-05-11T16:05:33Z,2021-05-11T16:05:33Z,I have the same error.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgzODc0NzE1NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODMwOTc2OQ==,paho.mqtt.python,848309769,505,NA,BadWolf42,8396512,Bad,,NA,2021-05-25T22:25:56Z,2021-05-25T22:25:56Z,"Hello,

I'm facing the same issue and could reproduce quite easily/often.
Enclosed code : [paho-mqtt-issue505.py.txt](https://github.com/eclipse/paho.mqtt.python/files/6542440/paho-mqtt-issue505.py.txt).
Associated log files : [20210225-2310.log](https://github.com/eclipse/paho.mqtt.python/files/6542443/20210225-2310.log), [20210225-2315.log](https://github.com/eclipse/paho.mqtt.python/files/6542445/20210225-2315.log), [20210225-2317.log](https://github.com/eclipse/paho.mqtt.python/files/6542447/20210225-2317.log)

Using `Python 3.7.3 (default, Jan 22 2021, 20:04:44)` and `paho-mqtt version 1.5.1` on 
`Linux mydevhost 4.19.0-16-amd64 #1 SMP Debian 4.19.181-1 (2021-03-19) x86_64 GNU/Linux`

I think this issue is coming from the fact that the MainThread destroys the `Client` object, which calls `_reset_sockets()`, then `_sock_close()` and sets `self._sock` to None...

But at the same time, `self._sock` is taken for granted bellow and is read by the `run_forever()` worker Thread:
https://github.com/eclipse/paho.mqtt.python/blob/c339cea2652a957d47de68eafb2a76736c1514e6/src/paho/mqtt/client.py#L662-L665","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0ODMwOTc2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41QtR1,paho.mqtt.python,893572213,505,NA,BadWolf42,8396512,Bad,,NA,2021-08-05T15:56:48Z,2021-08-05T15:56:48Z,Hello any update?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41QtR1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48l_hS,paho.mqtt.python,1016592466,505,NA,russell-sealand,74590108,,,NA,2022-01-19T15:39:39Z,2022-01-19T15:39:39Z,"I am also having the same issue, it seems related to this case: https://github.com/eclipse/paho.mqtt.python/issues/345
The cause was that `client.loop_forever()` was being called in a multithreaded fashion, but apparently it only works in single thread mode.
Given you asked this question months ago, did you manage to find a solution? Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48l_hS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48mHip,paho.mqtt.python,1016625321,505,NA,russell-sealand,74590108,,,NA,2022-01-19T16:12:17Z,2022-01-19T16:12:17Z,I fixed the problem by switching to use `client.loop_start()` instead of `client.loop_forever()`,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48mHip/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cX61u,paho.mqtt.python,1549774190,505,NA,lucasjinreal,21303438,MagicSource,nicholasjela@gmail.com,NA,2023-05-16T14:20:29Z,2023-05-16T14:20:29Z,"@russell-sealand its work not working, still get this error sometimes.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cX61u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cX-ew,paho.mqtt.python,1549789104,505,NA,russell-sealand,74590108,,,NA,2023-05-16T14:28:57Z,2023-05-16T14:28:57Z,"@lucasjinreal please can you provide more information, for example, under what conditions do you get this error? I am unable to investigate without further information since this now works for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cX-ew/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qj9tY,paho.mqtt.python,1787812696,505,NA,jelbin313,62405259,Julianne Elbin,,NA,2023-10-31T18:51:47Z,2023-10-31T18:51:47Z,"I was having this issue too. The exception is in `loop_read`, which checks that `self._sock` is not None before using it. Therefore, another thread must be setting `self._sock` to None while `loop_read` is running. The only function (besides `__init__`) that sets `self._sock` to None is `sock_close`, and this gets called when a disconnect packet is being written in `_packet_write`. I think the intention is that `_packet_write` only gets called in the `loop_forever` thread, because it is only called by `loop_write`, which should only be called by the `loop_forever` thread. However,  [`disconnect`](https://github.com/eclipse/paho.mqtt.python/blob/a4cb435ca2864d073ea3e0e18b0407e4bbe85b16/src/paho/mqtt/client.py#L3057) will actually end up calling `loop_write` via `_packet_queue` when we are doing everything in a single thread, which it seems is assumed that we are doing when using `loop_foever`.
As far as I can tell, `loop_forever` is not intended to ever have client functions called from different threads, but, in order to disconnect, you have to call disconnect from another thread, since `loop_forever` is blocking and no other function can be called in the thread that is running `loop_forever`. (at least from my understanding) In order to disconnect cleanly, it seems like we basically have to use `loop_forever` in a multithreaded fashion, despite it not being meant for that. This is just my understanding of what is happening though, it may not be correct.

I was able to find a ""hack"" fix for this by setting the _thread attribute of the client to the current thread before calling loop_forever:

> Client._thread = threading.current_thread()
> Client.loop_forever(retry_first_connection=True)

This ensures that we do not call `loop_write` from the thread that is calling `disconnect`. However, you're definitely not supposed to access the `_thread` attribute of the client, as it is a protected attribute. This solution may cause unexpected errors as well, although it didn't cause any for me. (yet) If you want to use this solution, use at your own risk and test thoroughly. The real solution is that if you need to disconnect cleanly, you should probably just use `loop_start`. I'm just putting this here as an option for anyone having this issue who insists on using `loop_forever` instead of `loop_start`.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qj9tY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/505,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXBip,paho.mqtt.python,1868306601,505,NA,PierreF,359833,Pierre Fersing,,NA,2023-12-23T14:35:17Z,2023-12-23T14:35:17Z,"With the sample code from https://github.com/eclipse/paho.mqtt.python/issues/505#issuecomment-848309769 I'm able to reproduce the issue.

In that code sample, the issue is in stop() function we call publish() which only *submit* a packet (it don't yet send it) and we disconnect just after. This means two threads will concurrently run, the one trying to actually send the publish packet and the one doing the disconnection.
I totally agree the library should better handle this concurrency issue, at very least document clearly document what could be called concurrently.

That being said, since disconnect() do an immediate disconnection, it will means your last publish could be lost.

A fix for both the last publish that could be lost and the _sock that could be None could be:
```
	def stop(self):
		self.mqttclient.publish('mybroker'+str(self.id)+'/status', 'offline', 1, True).wait_for_publish()
		self.mqttclient.disconnect()
		self.mqttthread.join()
```

As @jelbin313 there is indeed some assumption in the library that (at least some) function are only called from the loop thread (loop_forever, loop_start...). Their seems to have a bit better handling when the loop thread is one from loop_start().

A review of concurrency access / adding some locks should probably be done, but this is a large amount of work.

As side node, disconnect() could be called from the thread doing the loop_forever (depending on application needs), if it's done from a callback like on_message, on_publish... But this really depends on application needs, not all application might be able to disconnect on this condition.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXBip/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506,paho.mqtt.python,674956825,506,Setting keep_alive to 0 causes a BlockingIOError Exception due to socket Timeout,schneeemensch,44439378,,,CLOSED,2020-08-07T11:36:42Z,2022-02-02T17:43:32Z,"In version 1.5.0 it was added that the socket default timeout is set by the keep_alive value.

As discussed in #426 this can have implications on users who have set keep_alive to 0. 
According to the MQTT and paho.mqtt documentation this should disable the keep_alive mechanism.
We are using this in send-only clients where we cannot spawn an additional thread and cannot guarantee that they are accessed frequently.

Starting with version 1.5.0 this causes the socket connect to always timeout.
Either an additional option should be found to define the socket timeout or the default timeout should be used for cases where keep_alive=0. The first option is better for multiple reasons.

Here is the error output:

```
     self.mqtt_client.connect(self.mqtt_server, self.mqtt_port, self.keep_alive)
   File ""/localdev/clemens/tif/workspaces/ws1/audi_tif/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 937, in connect
     return self.reconnect()
   File ""/localdev/clemens/tif/workspaces/ws1/audi_tif/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1071, in reconnect
        sock = self._create_socket_connection()
   File ""/localdev/clemens/tif/workspaces/ws1/audi_tif/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 3522, in _create_socket_connection
     return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
   File ""/global/freeware/Linux/RHEL7/python-3.7.0/lib/python3.7/socket.py"", line 727, in create_connection
     raise err
   File ""/global/freeware/Linux/RHEL7/python-3.7.0/lib/python3.7/socket.py"", line 716, in create_connection
     sock.connect(sa)
BlockingIOError: [Errno 115] Operation now in progress
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MzY4ODE5MQ==,paho.mqtt.python,683688191,506,NA,schneeemensch,44439378,,,NA,2020-08-31T10:06:20Z,2020-08-31T10:06:20Z,"We have now locally patched paho.mqtt to use the default socket timeout when keep_alive is set to 0:

Here are the diffs:

![image](https://user-images.githubusercontent.com/44439378/91708925-4e4a7600-eb82-11ea-8a3c-8de4bc669787.png)

![image](https://user-images.githubusercontent.com/44439378/91708810-22c78b80-eb82-11ea-9c65-90cc13793864.png)

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4MzY4ODE5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4829G2,paho.mqtt.python,1021039030,506,NA,babaMar,20344561,Stefano,essemexes@gmail.com,NA,2022-01-25T10:30:54Z,2022-01-25T10:30:54Z,Any chance this can be made in a PR?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4829G2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/506,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49SPIv,paho.mqtt.python,1028190767,506,NA,schneeemensch,44439378,,,NA,2022-02-02T17:43:32Z,2022-02-02T17:43:32Z,"I have checked if this is fixed with the latest release (1.6.1) and our issue is gone.
As far as I see the timeout for the `socket.create_connection` call is now using a fixed timeout of 5 seconds, which seems to be enough in our use case.

I would therefore close this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49SPIv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,paho.mqtt.python,678482815,508,Remote procedure call/request-response messaging pattern,fkromer,10199742,Florian Kromer,kromer-florian@protonmail.com,CLOSED,2020-08-13T14:27:58Z,2020-11-27T18:59:28Z,There is an [extension for MQTTnet](https://www.nuget.org/packages/MQTTnet.Extensions.Rpc/) to add support for [request-response style communication](https://en.wikipedia.org/wiki/Request%E2%80%93response) via MQTT. [Here](https://github.com/chkr1011/MQTTnet/wiki/Client#rpc-calls) is explained how it works. [MQTTnet](https://github.com/chkr1011/MQTTnet) is the probably most used .NET library for MQTT based communication out there. Are you guys interested in adding something like this to the Python Paho client and potentially other clients as well?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgyNDgwNA==,paho.mqtt.python,734824804,508,NA,briggySmalls,11054133,briggySmalls,,NA,2020-11-27T13:01:46Z,2020-11-27T13:01:46Z,"I'd be really interested in this MQTTv5 feature.

The documentation for this library states that it supports v5, and this isn't mentioned in the [known limitations](https://pypi.org/project/paho-mqtt/#known-limitations).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgyNDgwNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgzOTM1Mw==,paho.mqtt.python,734839353,508,NA,briggySmalls,11054133,briggySmalls,,NA,2020-11-27T13:38:18Z,2020-11-27T13:38:18Z,A bit more digging reveals that this does indeed seem to be implemented. There is a [unit test](https://github.com/eclipse/paho.mqtt.python/blob/28f669160d213cfdb30c8f62982b8a5443950eeb/tests/test_mqttv5.py#L926) demonstrating it,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgzOTM1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgzOTk5OA==,paho.mqtt.python,734839998,508,NA,ralight,79578,Roger Light,,NA,2020-11-27T13:39:52Z,2020-11-27T13:39:52Z,"@briggySmalls You can do this already (as you've spotted), see https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_rpc_math.py and https://github.com/eclipse/paho.mqtt.python/blob/master/examples/server_rpc_math.py as examples. I image the point of what is done in MQTTnet is to wrap it up to make it easier.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDgzOTk5OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/508,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDk1NDE3NA==,paho.mqtt.python,734954174,508,NA,fkromer,10199742,Florian Kromer,kromer-florian@protonmail.com,NA,2020-11-27T18:59:27Z,2020-11-27T18:59:27Z,@ralight Great. I've just looked at the docs and did not browse the examples. Sorry for the spam.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDk1NDE3NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/509,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/509,paho.mqtt.python,679540198,509,Print exception raised in callbacks,daadu,4963236,Harsh Bhikadia,harsh@bhikadia.com,OPEN,2020-08-15T10:15:49Z,2024-01-06T04:02:31Z,"## Problem

Any exception raised on callbacks (`on_connect`, `on_message`, etc) are not being printed in the console. This can cause issue when debugging. It looks like the messages are not being handled properly.

## Possible Solution
- print the exception with traceback","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/509/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/509,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM3OTkwNg==,paho.mqtt.python,674379906,509,NA,daadu,4963236,Harsh Bhikadia,harsh@bhikadia.com,NA,2020-08-15T10:25:23Z,2020-08-15T10:25:23Z,"Looks like `Client._logger` is not configured by default. 

- Either we can initialise `Client._logger` by default.
- Or if `Client._logger` is not configured then  just `print()` in `Client._easy_log`

I think we should go for the second option to just `print` if no `logger` is configured. Let me know what the appropriate solution could be, so that I can work on the fix.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM3OTkwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/509,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4NTI4NA==,paho.mqtt.python,674385284,509,NA,swails,779022,Jason Swails,,NA,2020-08-15T11:27:28Z,2020-08-15T11:27:28Z,"I think we should initialize a logger by default.  loggers from the `logging` module are infinitely better than `print` for libraries you intend on including.  It makes it trivially easy to handle logging the way you want to in a client application.

It's really convenient to have log messages that only print out when debugging the application, but people writing clients often want to be able to turn debug logging on for their application code without being completely inundated with output from included libraries.

I will often set my default level to `DEBUG`, then grab the `requests` logger and set the log level to `WARNING` or `INFO` with a single line of code.  I don't have to worry about instantiating and passing a new logger to stuff I instantiate from that library, and I can configure logging behavior just the way I want to using nothing more than the `logging` package.  Using `print` instead of a default logger ruins that behavior, and forces developers to monkey-patch the print function to achieve the same behavior.

Also, `logging.exception` *does* print the traceback if used in an `except` block.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3NDM4NTI4NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,paho.mqtt.python,679847764,510,loop_forever vs KeyboardInterrupt?,eugene-kulak,34233075,Eugene K,,CLOSED,2020-08-16T23:24:22Z,2023-12-24T00:49:10Z,"```python
def mqtt_client():
    def on_connect(_client, _userdata, _flags, _rc):
        logger.info(""Connected to MQTT"")

    def on_log(_client, _userdata, _level, buf):
        logger.log(_level, buf)

    client = mqtt.Client(client_id=config.mqtt_client_id, transport=transport)
    client.on_connect = on_connect
    client.on_log = on_log

    client.connect(mqtt_uri.hostname, mqtt_uri.port)
    return client


def main():
    client = mqtt_client()
    try:
        mqtt_client.loop_forever()
    except KeyboardInterrupt:
        mqtt_client.disconnect()
```

Now if I run it and try to stop with Ctr+C, I see that client tries to reconnect. Why? What kind of design this is?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4OTIwMjY0NQ==,paho.mqtt.python,689202645,510,NA,minexo79,54303621,XOT,minexo79@gmail.com,NA,2020-09-09T00:10:51Z,2020-09-09T00:10:51Z,"try move the
```py
except KeyboardInterrupt:
        mqtt_client.disconnect()
```

to the `def mqtt_client():` inside?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY4OTIwMjY0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDIyOTQ5Ng==,paho.mqtt.python,860229496,510,NA,dachshund-digital,1486285,,,NA,2021-06-13T15:31:41Z,2021-06-13T15:31:41Z,"@minexo79, I don't understand your suggestion.  That does not address the issue, as I see the code design.  Both loop_forever() and loop_start() appear to be blocking the main thread once any connection is established.  Once the any mqtt client loop is established, the main thread never gets time again.  Which does not match, IMHO, how the documentation reads, that these are not blocking functions, which is true until the first connection is established.

I have seen the following for example, connect_async() then loop_start() do not block until the connect established, from then on, messages are handled, as expected but the main thread never gets time again.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MDIyOTQ5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42HXu5,paho.mqtt.python,907901881,510,NA,dachshund-digital,1486285,,,NA,2021-08-29T23:50:30Z,2021-08-29T23:50:30Z,"Reading some other issues, I think mine is covered under the discussion on the differences of connect() vs. connect_async() documentation gaps and how some have seen loop API calls failing under specific scenarios.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42HXu5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/510,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXY4d,paho.mqtt.python,1868402205,510,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:49:10Z,2023-12-24T00:49:10Z,PR #615 has now been merged; hopefully this addresses the issues you found in the documentation. Given the age of this issue I'm going to close it (if you would like a resolution can you please [enable logging](https://github.com/eclipse/paho.mqtt.python#enable_logger) and duplicate the issue then provide the full output).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXY4d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/513,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/513,paho.mqtt.python,683490088,513,Multithreading: Segmentation Fault,ovaar,1405257,Ovaar,,CLOSED,2020-08-21T11:19:01Z,2020-08-24T16:18:53Z,"I use paho in combination with pytest and pytest-bdd to run scenarios.
Randomly sometimes after executing a scenario and starting the next one I get a Segmentation fault.

I have extracted the usage below, more than this I cannot give because the sources are closed.

os: ubuntu 20.04
python: 3.8.2
paho.mqtt.python: 1.5.0
pytest: 6.0.1
pytest-bdd: 3.3.0

```sh
Fatal Python error: Segmentation fault

Thread 0x00007ff3025f7700 (most recent call first):
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 1163 in loop
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 1782 in loop_forever
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 3428 in _thread_main
  File ""/usr/lib/python3.8/threading.py"", line 870 in run
  File ""/usr/lib/python3.8/threading.py"", line 932 in _bootstrap_inner
  File ""/usr/lib/python3.8/threading.py"", line 890 in _bootstrap
  File ""/usr/local/lib/python3.8/dist-packages/debugpy/_vendored/pydevd/_pydev_bundle/pydev_monkey.py"", line 823 in __call__
```

```py
@pytest.fixture(scope=""session"")
def loop():
    print('create: loop')
    _loop = asyncio.new_event_loop()
    asyncio.set_event_loop(_loop)

    yield _loop
    _loop.close()
    print('exit: loop')
    
@pytest.fixture(scope=""session"")
def mqtt(loop: asyncio.AbstractEventLoop):
    print('create: mqtt')
    _mqtt = mqtt.Client(""client-id-here"")
    host=""some-host""
    port=1883
    mqtt.connect(host, port)
    mqtt.loop_start()
    yield _mqtt

    _mqtt.loop_stop()
    _mqtt.disconnect()
    print('exit: mqtt')

```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/513/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/513,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3OTIyNzM0NQ==,paho.mqtt.python,679227345,513,NA,ovaar,1405257,Ovaar,,NA,2020-08-24T16:18:53Z,2020-08-24T16:18:53Z,Root cause found. Can be closed,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY3OTIyNzM0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,paho.mqtt.python,702194953,514,"Callbacks do not work properly (for example, on_connect)",mrdc,16876990,,,CLOSED,2020-09-15T19:22:59Z,2020-09-25T08:28:21Z,"Hello,

I'm experiencing some weird bugs with callbacks: sometimes they work, sometimes they don't.
For example, `on_connect` works in one script, then I copy paste it to another one and no result code is shown `on_connect`:

```python

import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected! Result code: "" + str(rc))
    client.subscribe(""$SYS/#"")

client = mqtt.Client(""client"")
client.on_connect = on_connect
client.username_pw_set(username=""admin"", password=""admin"")
client.connect(""192.168.1.35"", 1883)
```

The same code shows me the connection result code in another script...

paho-mqtt 1.5.0
Python 3.8.5 
Win 10 x64, 1909
Atom 1.51 x64 with script 3.26.0 (to run Python code)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzAyNzI4OQ==,paho.mqtt.python,693027289,514,NA,ralight,79578,Roger Light,,NA,2020-09-15T23:14:36Z,2020-09-15T23:14:36Z,You need to use `loop_start()` or `loop_forever()` to process the network loop.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5MzAyNzI4OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDIzOTg2MA==,paho.mqtt.python,694239860,514,NA,mrdc,16876990,,,NA,2020-09-17T13:36:29Z,2020-09-17T13:36:29Z,"> 
> 
> You need to use `loop_start()` or `loop_forever()` to process the network loop.

Isn't it more logical when `on_connect callback` is called each time we connect to a MQTT broker? In this case we always have the result code to check if connection is properly established.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDIzOTg2MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI0NjUxMA==,paho.mqtt.python,694246510,514,NA,ralight,79578,Roger Light,,NA,2020-09-17T13:46:44Z,2020-09-17T13:46:44Z,"The `on_connect` callback will only be called once network data has been processed. For that to happen, one of `loop_start()` or `loop_forever()` needs to be called. If you have other things to do in your main program like reading data from a sensor then using `loop_start()` lets you do that because it starts a separate thread in the background. If you only need to respond to incoming messages, e.g. subscribe to topics and print the messages, then `loop_forever()` will process the network traffic for you without a separate thread, and because it doesn't exit until you disconnect, it means you don't need some other way of stopping your program from quitting.

```python
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected! Result code: "" + str(rc))
    client.subscribe(""$SYS/#"")

client = mqtt.Client(""client"")
client.on_connect = on_connect
client.username_pw_set(username=""admin"", password=""admin"")
client.loop_start()
client.connect(""192.168.1.35"", 1883)

while True:
    data = read_sensor()
    client.publish(""topic"", data)
```

```python
import paho.mqtt.client as mqtt

def on_message(client, userdata, msg):
    print(msg.topic)

def on_connect(client, userdata, flags, rc):
    print(""Connected! Result code: "" + str(rc))
    client.subscribe(""$SYS/#"")

client = mqtt.Client(""client"")
client.on_connect = on_connect
client.on_message = on_message
client.username_pw_set(username=""admin"", password=""admin"")
client.connect(""192.168.1.35"", 1883)
client.loop_forever()
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI0NjUxMA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI1MTI0OQ==,paho.mqtt.python,694251249,514,NA,mrdc,16876990,,,NA,2020-09-17T13:53:50Z,2020-09-17T13:53:50Z,"Thanks, it's clear. And when we have a regular script, for example, to publish some data not in loop - just once, how can we catch `on_connect` result code? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI1MTI0OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI2MTg0Nw==,paho.mqtt.python,694261847,514,NA,ralight,79578,Roger Light,,NA,2020-09-17T14:09:18Z,2020-09-17T14:09:18Z,"Something like one these should do the job. Note I've used qos=1 in the second example because `on_publish` will be called as soon as the data has left the client with qos=0, which could be before we've received the CONNACK. You could use `obj` to get your data to the on_connect in the first example.

```python
import paho.mqtt.client as mqtt

connack_rc = -1

def on_connect(mqttc, obj, flags, rc):
    global connack_rc
    connack_rc = rc
    mqttc.publish(""topic"", ""1"")

def on_publish(mqttc, obj, mid):
    mqttc.disconnect()

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.connect(""test.mosquitto.org"", 1883, 60)
mqttc.loop_forever()
print(""CONNACK reason code: %d"" % (connack_rc))
```

```python
import paho.mqtt.client as mqtt
import time

connack_rc = -1

def on_connect(mqttc, obj, flags, rc):
    global connack_rc
    connack_rc = rc
    
def on_publish(mqttc, obj, mid):
    mqttc.disconnect()

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.connect(""test.mosquitto.org"", 1883, 60)
mqttc.publish(""topic"", ""1"", qos=1)
mqttc.loop_start()
while connack_rc == -1:
    time.sleep(0.5)
print(""CONNACK reason code: %d"" % (connack_rc))
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDI2MTg0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDMxOTAwOQ==,paho.mqtt.python,694319009,514,NA,mrdc,16876990,,,NA,2020-09-17T15:38:34Z,2020-09-17T15:38:34Z,Thank you! Now it's clear that I have to always use` loop_start` or` loop_forever` for `on_connect` callback to work properly. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDMxOTAwOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/514,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDMzMjM1Mw==,paho.mqtt.python,694332353,514,NA,mrdc,16876990,,,NA,2020-09-17T16:01:11Z,2020-09-17T16:01:11Z,"One more weird issue with callbacks.
The same code as above but with `on_message` callback :

```python
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(""Connected! Result code: "" + str(rc))
    client.subscribe(""my_topic"")

def on_message(client, userdata, message):
    print(datetime.datetime.now())
    print(""Message received!"")

client = mqtt.Client(""client"")
client.on_connect = on_connect
client.username_pw_set(username=""admin"", password=""admin"")
client.connect(""192.168.1.35"", 1883)

client.loop_forever()
```

Yes, I've not included `import datetime`, but Python is not complaining that `datetime ` is missing and ` print(""Message received!"")` is not executed. Is it somehow related to paho mqtt? Because normally it always causes an exception `NameError: name 'datetime' is not defined`:

```python
# import datetime

def print_date_time():
    print(datetime.datetime.now())

print_date_time()
```

If I move `print(datetime.datetime.now())` outside `on_message ` function, Python complains as it should.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDY5NDMzMjM1Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/515,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/515,paho.mqtt.python,709653963,515,OSError: [Errno 24] Too many open files: with Paho python,carmenmoncada,54872829,Carmen Moncada,,CLOSED,2020-09-27T02:54:36Z,2021-02-05T00:30:54Z,"
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/515/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/516,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/516,paho.mqtt.python,711227495,516,Release 1.5.1 on PyPi not in sync with github,emontnemery,14281572,Erik Montnemery,erik@montnemery.com,CLOSED,2020-09-29T15:28:40Z,2020-09-30T14:16:19Z,"The latest Paho MQTT release on PyPi is 1.5.1, but github source is still marked as 1.5.0.dev0.

Based on comparing the PyPi package, the updated code string is the only code change, there are also some minor documentation changes.

Would it be possible to sync up the changes on PyPi with github? Would a PR doing that be accepted?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/516/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/516,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDc4ODcxNg==,paho.mqtt.python,700788716,516,NA,ralight,79578,Roger Light,,NA,2020-09-29T15:35:53Z,2020-09-29T15:35:53Z,"Thanks for the note, I did push the changes, but only to my other local copy, ahem... It is now updated with the commit and tag.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcwMDc4ODcxNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/517,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/517,paho.mqtt.python,712396941,517,"socks has no attribute HTTP, SOCKS4, SOCKS5 in check",kattstof,20643316,Katt Stof,,CLOSED,2020-10-01T01:16:30Z,2023-12-24T02:28:24Z,"not sure if its an issue with socks or not, as the Docs show that you're using it right, but i would continue getting no attribute for http, socks4 etc until i changed this line:


def check(t, a):
            return (socks is not None and
                    t in set([socks.HTTP, socks.SOCKS4, socks.SOCKS5]) and a)

to this:

def check(t, a):
            return (socks is not None)


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/517/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/517,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcb0,paho.mqtt.python,1868416756,517,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:28:23Z,2023-12-24T02:28:23Z,"Please share your code so we can see how you are setting the proxy.

Closing due to age/inactivity/need for info.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcb0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,paho.mqtt.python,712858026,518,publish single with TLS ca_certs from server,IsmaeelHaider,8415692,Ismaeel Haider,ismaeelhaider92@gmail.com,CLOSED,2020-10-01T13:43:43Z,2024-01-07T23:59:01Z,"Hi, 
I'm trying to connect to ""mqtts://broker.emqx.io:8883"" using paho mqtt but getting the invalid certificate error. 
`
        tls = {
                'ca_certs': ""certificate.pem"",
                'insecure': False,
                'tls_version': ssl.PROTOCOL_TLS_CLIENT
            }
`
`
        publish.single(
            topic=""testtopic\"", payload=payload, hostname=""broker.emqx.io"", auth={},
            port=8883, tls=tls, protocol=mqtt.MQTTv311
        )
`

I don't want it to be insecure and want to get the certificate from the server instead of providing a certificate file manually. It would be a great help if someone could guide me in a right direction. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48jkyt,paho.mqtt.python,1015958701,518,NA,runout-at,884915,,,NA,2022-01-19T00:29:42Z,2022-01-19T00:29:42Z,"following works at least under debian: `tls={'ca_certs':""/etc/ssl/certs/ca-certificates.crt""}`

but i think ca_certs should be auto-detected from the system if not provided.

the documentation should have some useful examples for ca_certs ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48jkyt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcH2,paho.mqtt.python,1868415478,518,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:17:04Z,2023-12-24T02:17:04Z,"Closing this due to inactivity.

Unfortunately answering certificate related issues like this can be difficult without a reproducible example (often the issue is the certificate itself).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcH2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEchL,paho.mqtt.python,1880213579,518,NA,runout-at,884915,,,NA,2024-01-07T23:24:05Z,2024-01-07T23:24:05Z,"@MattBrittan I wonder why you are closing this without asking for more information if something is not clear.

In my opinion the examples are there.

And as i found out it's just a missing default for the ca_certs file. At least on a debian stable (bookworm) system this is reproducible.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEchL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/518,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEgTp,paho.mqtt.python,1880229097,518,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T23:59:00Z,2024-01-07T23:59:00Z,"@runout-at there were around 300 open issues dating back many years; many of which had no responses at all. I'm attempting to get things into a manageable state so that issues can be categorised/resolved in a reasonable time-frame (as things stand the issue backlog is very intimidating, so has been largely ignored; resources are very limited). As you can probably understand working through this number of issues takes a considerable amount of time, and I will make mistakes (and am deliberately being somewhat ruthlessness through necessity). 

In this case the issue was really a request for help, and as it was raised over three years ago closing it seemed the best approach (I probably should have added a ""please reopen this if you are still experiencing the issue"" as I have to many others). In addition, the issue you mention appears to differ from the OP's (they specified `'ca_certs': ""certificate.pem""`). 

>And as i found out it's just a missing default for the ca_certs file. At least on a debian stable (bookworm) system this is reproducible.

Please consider raising this as a new issue (the docs state that ""By default, on Python 2.7.9+ or 3.4+, the default certification authority of the system is used."" so if that's not working then it's possibly a bug or deficiency in the docs).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEgTp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,paho.mqtt.python,722135201,519,[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:727),sonastyle,36029934,,,CLOSED,2020-10-15T08:52:50Z,2023-12-26T01:01:08Z,"**#CODE**
import paho.mqtt.client as mqtt
import ssl


def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.subscribe(""$SYS/#"")


def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.tls_set(ca_certs=None, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED,
     tls_version=ssl.PROTOCOL_TLS, ciphers=None)
client.tls_insecure_set(False)    
    
print(""connecting to broker"")
client.connect(""mqtt.eclipse.org"", 8883, 60)

client.loop_forever()

**###### END OF CODE#########**


#OUTPUT
connecting to broker
Traceback (most recent call last):
  File ""mqttRaw.py"", line 32, in <module>
    client.connect(""mqtt.eclipse.org"", 8883, 60)
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 941, in connect
    return self.reconnect()
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1104, in reconnect
    sock.do_handshake()
  File ""/usr/lib/python2.7/ssl.py"", line 828, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:727)

**########### end of terminal op #######**
**#The same code was running till 10.10.20, and after that its showing this certificate error even if #after fresh installation of raspi sd card**


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDE4MTM2Mw==,paho.mqtt.python,730181363,519,NA,jackattack21,63871719,,,NA,2020-11-19T07:19:49Z,2020-11-19T07:19:49Z,I just started with this library. Been running MQTT clients and servers in C for a while. I can't for the life of me get the TLS to verify. There's gotta be an issue with the library right now. Have you gotten it to work? ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDE4MTM2Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDQ1MzAzMQ==,paho.mqtt.python,730453031,519,NA,swails,779022,Jason Swails,,NA,2020-11-19T15:32:07Z,2020-11-19T15:32:07Z,I have gotten it to verify.  mqtt.eclipse.org uses let's encrypt as it's signing cert.  Try installing the `certifi` package from PyPI to install an up-to-date root CA trust store.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDQ1MzAzMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU0Njg4Mw==,paho.mqtt.python,730546883,519,NA,jackattack21,63871719,,,NA,2020-11-19T18:09:07Z,2020-11-19T18:09:07Z,"Can you post your implementation of certifi and your TLS function call? 

I actually can't even install certifi. Pip is getting an SSL error with that package repository too. 

Maybe not Paho, and it is something to do with my trust store or python 2.7","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMDU0Njg4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/519,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVZv,paho.mqtt.python,1869174383,519,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T01:01:08Z,2023-12-26T01:01:08Z,I'm going to close this due to it's age and the face that `mqtt.eclipse.org` is no longer line (cannot resolve the domain). If you have an example using a live server then please feel free to reopen this.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaVZv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/520,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/520,paho.mqtt.python,722352600,520,Creating a paho.mqtt.client.Client with invalid client_id and clean_session=False raises an AttributeError on deletion,chris-hibberd,63016664,Chris Hibberd,,CLOSED,2020-10-15T13:46:47Z,2021-07-22T21:59:57Z,"For package version paho-mqtt 1.5.1 and Python 3.8.2, running the following code:

``` python
from paho.mqtt.client import Client
try:
    Client(client_id="""", clean_session=False)
except ValueError as e:
    print(f""This is handled: {e}"")
```

Produces the following output:
```
This is handled: A client id must be provided if clean session is False.
Exception ignored in: <function Client.__del__ at 0x7f4531fab0d0>
Traceback (most recent call last):
  File ""/c/Users/hibbe/Code/bg-hub-applications/.venv/lib/python3.8/site-packages/paho/mqtt/client.py"", line 660, in __del__
    self._reset_sockets()
  File ""/c/Users/hibbe/Code/bg-hub-applications/.venv/lib/python3.8/site-packages/paho/mqtt/client.py"", line 704, in _reset_sockets
    self._sock_close()
  File ""/c/Users/hibbe/Code/bg-hub-applications/.venv/lib/python3.8/site-packages/paho/mqtt/client.py"", line 691, in _sock_close
    if not self._sock:
AttributeError: 'Client' object has no attribute '_sock'
```

The error is raised in `_sock_close` when `__del__` is called on the client as _sock_close checks `if not self._sock:` but the `_sock` attribute is never created on the client object as the exception is raised first (from `__init__` of Client in .venv/lib/python3.8/site-packages/paho/mqtt/client.py):
``` python
            if not clean_session and (client_id == """" or client_id is None):
                raise ValueError(
                    'A client id must be provided if clean session is False.')
            self._clean_session = clean_session

        if transport.lower() not in ('websockets', 'tcp'):
            raise ValueError(
                'transport must be ""websockets"" or ""tcp"", not %s' % transport)
        self._transport = transport.lower()
        self._protocol = protocol
        self._userdata = userdata
        self._sock = None
```

Perhaps either attribute initialisation should be moved earlier in the constructor, or `_sock_close` should check that the attribute exists.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/520/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/520,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xAlG,paho.mqtt.python,885262662,520,NA,ralight,79578,Roger Light,,NA,2021-07-22T21:59:53Z,2021-07-22T21:59:53Z,"Thanks Chris, and sorry for the delay in getting to this. I've pushed a fix and this will be part of 1.6.0.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xAlG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,paho.mqtt.python,723426830,521,on_publish called before on_connect,tompropst,4935266,Tom Propst,,CLOSED,2020-10-16T18:04:51Z,2023-12-24T02:25:08Z,"I am trying to detect when a connection fails by checking the `CONNACK` in the `on_connect` callback. In the case of a failure, I'm calling `disconnect` in the `on_connect` callback to break the network loop. In order to also break the network loop when a connection is successful (e.g. in a case where I just want to publish and exit), I also call `disconnect` in the `on_publish` callback.

When the connection fails (specifically, connection refused due to authentication failure), the `on_publish` callback executes first and I am unable to catch the connection failure so all indications are that everything worked.

```python
import logging
import paho.mqtt.client as mqtt

logger = logging.getLogger(__name__)

def on_connect(client, userdata, flags, rc):
    logger.info(""Connection result: "" + mqtt.connack_string(rc))
    if rc != mqtt.CONNACK_ACCEPTED:
        client.disconnect()

def on_disconnect(client, userdata, rc):
    logger.info(""Disconnecting"")

def on_publish(client, userdata, mid):
    logger.info(""Published message: "" + str(mid))
    client.disconnect()

mqtt_client = mqtt.Client()
mqtt_client.enable_logger(logger)
mqtt_client.on_connect = on_connect
mqtt_client.on_disconnect = on_disconnect
mqtt_client.on_publish = on_publish
mqtt_client.connect(""some.broker.url"", 1883)
mqtt_client.publish(""mytopic"", ""hello"")
mqtt_client.loop_forever()
```

As mentioned in issue #374, `on_publish` happens as soon as the packets are sent which here, appears to happen before the `CONNACK` is received. The lack of reliable connection status and error notification seems to be a common problem. A few options would be very helpful.

1. Allow connection attempts to cease on some errors like a connection refusal or authentication error. These are not likely to change with repeated attempts.
2. Make `connect` truly synchronous instead of [calling `connect_async` in all cases](https://github.com/eclipse/paho.mqtt.python/blob/42f0b13001cb39aee97c2b60a3b4807314dfcb4d/src/paho/mqtt/client.py#L939).
3. Maintain a connection status property to make detecting and correcting connection issues more straightforward.
    - Another approach would be to add an `on_connection_error` callback.

If any of this is amenable to the maintainers, I'm happy to go through the Eclipse registration and submit pull requests.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxNzU4ODk1MA==,paho.mqtt.python,717588950,521,NA,ralight,79578,Roger Light,,NA,2020-10-27T22:57:07Z,2020-10-27T22:57:07Z,"on_publish is tricky with QoS 0 messages, because we can only detect when the message has been passed to the OS, not when they have been accepted by the broker. So it will almost always fire before the broker can send a connack.

I always recommend that actions go in the on_connect callback where possible, which would catch this, but it does seem that the expectation of synchronous connect() is that the connect/connack flow has occurred. This might be worth a wider discussion on the Paho mailing list, but I think something needs to be done.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxNzU4ODk1MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44tmD8,paho.mqtt.python,951476476,521,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2021-10-26T01:39:26Z,2021-10-26T01:39:26Z,"Hi @ralight; just noticed your comment on this issue (from a while ago!). I've recently commented on a few related issues (#454, #475, and a few questions on stack overflow) and can see other open issues with the same root cause. 

As you say above it looks like there is some confusion about the connection state when `connect` returns (back to issue #4 where your answer is technically correct but perhaps also a little misleading) and the need for a network loop to complete the connection process. 

I'm happy to discuss on the mailing list; but given that this is a python specific question I was not sure if that was the best place. If you are in agreement I'll propose some updates to the documentation in an attempt to clarify this (I would think that changing the behaviour of `connect()` to wait for the `CONNACK` would be a breaking change so was not going to propose that). Apologies for not responding to your request for help on the mailing list a while back - my python skills are somewhat limited.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44tmD8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44ueeN,paho.mqtt.python,951707533,521,NA,ralight,79578,Roger Light,,NA,2021-10-26T08:30:09Z,2021-10-26T08:30:09Z,"Hi @MattBrittan,

The idea of taking it to the mailing list would be to get a wider audience than is likely to see this. I agree with your points though - changing behaviour now is probably a bad idea and so documentation and examples are the way to help.

If you want to suggest some updates I'd be very happy to see them.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44ueeN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/521,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcW2,paho.mqtt.python,1868416438,521,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:25:08Z,2023-12-24T02:25:08Z,"Closing this because #615 has now been accepted which, hopefully, clarifies things a bit.  If you feel more is needed then please feel free to reopen it.

The MQTT protocol allows messages to be sent prior to a CONNACK being received; we could prevent that from happening but it's something that some users might want to do...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcW2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,paho.mqtt.python,726779531,522,paho-mqtt 1.5.1: have to add 200ms delay between MQTT subscriptions,by5599,6979826,,,CLOSED,2020-10-21T18:54:46Z,2023-12-24T02:06:28Z,"We used to use the version 1.5.0. Everything seems working fine.
Recently we started using the version 1.5.1. We noticed one issue: we have to add at least 200ms delay between MQTT subscriptions when our application service is restarted. Otherwise, we can't receive any MQTT messages.
We have a service written in Python. Upon the system start-up, the service is started. This service is managed by systemd. In the service, we have about 80 MQTT messages to subscribe. The service subscribes the MQTT message one by one. 
In the version of 1.5.0, the messages can be subscribed and the messages can be received once the service is started. There was no delay among subscriptions.  It also works when the service is restarted by suing the systemctl command.
In the version of 1.5.1, the messages can be subscribed and the messages can be received once the service is started. However, no message can be received when the service is restarted. We found a work-around, which is to add 200ms delay between subscriptions. By the way, we tried 100ms delay which didn't work. It seems it has to be 200ms at least. As there are 80 MQTT messages, there will be a roughly 16 seconds delay for subscription. The question is, why is that? What is the problem? Is there a work-around other than adding delay?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzg0MDA2NA==,paho.mqtt.python,713840064,522,NA,ralight,79578,Roger Light,,NA,2020-10-21T20:00:07Z,2020-10-21T20:00:07Z,"The only thing that I can see that might be related to this is regarding a fix of first connection/subsequent connection behaviour for MQTT v5 clients.

Do you have a small example which shows exactly what you are doing?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzg0MDA2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzg3OTcwMQ==,paho.mqtt.python,713879701,522,NA,by5599,6979826,,,NA,2020-10-21T21:10:54Z,2020-10-21T21:10:54Z,"Thanks ralight for your reply.
The code doesn't look good by using the ""Insert code"" button on the web browser. So I attached the sample code:
[code1.txt](https://github.com/eclipse/paho.mqtt.python/files/5418748/code1.txt)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzg3OTcwMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzkxMjgxOQ==,paho.mqtt.python,713912819,522,NA,ralight,79578,Roger Light,,NA,2020-10-21T22:27:59Z,2020-10-21T22:27:59Z,"Thank you, but I'm afraid that doesn't help much because I can't see any Paho code there.

This is my simple example of connecting and subscribing. It works just fine on the first connection and on subsequent connections. I realise that it is likely a lot different to what you have, but getting an idea of what Paho functions you are using is key to understanding the problem. If you can distill your code down to the essence of what it is doing we should be able to figure out the problem.

[sub.py](https://github.com/eclipse/paho.mqtt.python/files/5418969/sub.txt)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzkxMjgxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzkyNDA3Mw==,paho.mqtt.python,713924073,522,NA,by5599,6979826,,,NA,2020-10-21T22:54:52Z,2020-10-21T22:54:52Z,"Thanks ralight.
We have a wrapper for the paho. Please see attached file.
[client.py.txt](https://github.com/eclipse/paho.mqtt.python/files/5419057/client.py.txt)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcxMzkyNDA3Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NTYyNzQyOQ==,paho.mqtt.python,745627429,522,NA,by5599,6979826,,,NA,2020-12-15T23:18:52Z,2020-12-15T23:18:52Z,"Here are the testing script and the systemd service file.

[mqtt_test.py.txt](https://github.com/eclipse/paho.mqtt.python/files/5699255/mqtt_test.py.txt)
[mqtt_test.service.txt](https://github.com/eclipse/paho.mqtt.python/files/5699256/mqtt_test.service.txt)

Here is how to test it:
- Use Ubuntu 18.04
- Rename the file to be mqtt_test.py and mqtt_test.service
- Copy mqtt_test.py to /usr/tests/ folder
- Copy mqtt_test.service to /etc/systemd/system/ folder
- Restart the service: sudo systemctl restart mqtttest
- Check the journal: journalctl -xe -u mqtttest -f

For v1.5.0, the journal will show ""Received: events/topic1 ..."". That means the message is received - the subscription works fine.
For v1.5.1, the journal will not show any ""Received: ..."" message - the subscription doesn't work.

One thing is: if we have the v1.5.0 installed initially in Linux, then install the v1.5.1 on top of the 1.5.0. The message can be received after the service is restarted. It seems there are something left behind by v1.5.0 made the subscription working. I'm just wondering how to check what v1.5.0 left? Where are the folders I should look into between 1.5.0 and 1.5.1? I found the folder ""/usr/local/lib/python3.6/dist-packages/paho/mqtt"". Is there other folders I should check?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NTYyNzQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40v9Cz,paho.mqtt.python,884986035,522,NA,ralight,79578,Roger Light,,NA,2021-07-22T15:04:07Z,2021-07-22T15:04:07Z,"I haven't been able to get your code to do what you describe. I can see all of the subscriptions are successfully created on the broker, but there isn't any code for publishing so I don't get the ""Received:"" messages. If I add in some publishing myself, I can see that works as well.

So I've not been able to get it to reproduce. If you can still help please let me know.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40v9Cz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/522,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbwf,paho.mqtt.python,1868413983,522,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:06:28Z,2023-12-24T02:06:28Z,I'm going to close this as we could not duplicate the problem and the issue has been inactive for a couple of years. If you are still able to reproduce this please feel free to reopen the issue (but it's likely that we will need further assistance - broker logs might be helpful too).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbwf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/523,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/523,paho.mqtt.python,736577237,523, error: [Errno 32] Broken pipe,wangchengpei,45087789,Chengpei Wang,,CLOSED,2020-11-05T03:21:28Z,2024-01-06T04:01:25Z,"Traceback (most recent call last):
  File ""/home/worker/compass/vehicle_backend/web_service/extensions/redis_subscriber.py"", line 56, in handle_msg
    MQTT_CLIENT.publish(Topic.TRACKING, data)
  File ""/home/worker/compass/vehicle_backend/web_service/extensions/mqtt_client.py"", line 143, in publish
    self._publish(mqtt_topic, payload)
  File ""/home/worker/compass/vehicle_backend/utils/mqtt_client_base.py"", line 92, in _publish
    self.__client.publish(topic, payload)
  File ""/home/worker/compass/depends/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1270, in publish
    local_mid, topic, local_payload, qos, retain, False, info, properties)
  File ""/home/worker/compass/depends/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 2580, in _send_publish
    return self._packet_queue(PUBLISH, packet, mid, qos, info)
  File ""/home/worker/compass/depends/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 2927, in _packet_queue
    self._sockpairW.send(sockpair_data)
BrokenPipeError: [Errno 32] Broken pipe","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/523/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/523,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDI3ODQ4Mw==,paho.mqtt.python,814278483,523,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T16:58:44Z,2021-04-06T16:58:44Z,"May have the same root cause as #563.  Without more detail, it is impossible to know.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDI3ODQ4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/523,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wB1Id,paho.mqtt.python,1879527965,523,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-06T04:01:24Z,2024-01-06T04:01:24Z,"Closing this as it's probably a duplicate of #563 (which is resolved) and without more info it would not be possible to really know.

Please feel free to reopen with more details (after testing against the latest release).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wB1Id/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,paho.mqtt.python,738002511,524,Publish on_disconnect is not working,mrdc,16876990,,,CLOSED,2020-11-06T19:49:00Z,2023-10-20T00:42:58Z,"Hello,

I'm experiencing an issue when publishing in `on_disconnect callback`: publish is executed after disconnect, so no data is actually published. Is it correct behavior?

```python
def on_disconnect(client, obj, rc):
    client.publish(""Some_Topic"", ""Data"", 1, True)

client.on_disconnect = on_disconnect

client.disconnect()
```

**In logs:**
```
Sending DISCONNECT
Sending PUBLISH (d0, q1, r1, m12), 'b'Some_Topic....'', ... (12 bytes)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODg4NjIwNw==,paho.mqtt.python,728886207,524,NA,kpfleming,305938,Kevin P. Fleming,,NA,2020-11-17T12:10:52Z,2020-11-17T12:10:52Z,"If the client is disconnected, it can't publish messages.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODg4NjIwNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODk5MTczOA==,paho.mqtt.python,728991738,524,NA,mrdc,16876990,,,NA,2020-11-17T15:10:11Z,2020-11-17T15:10:11Z,"So, the only way to send something on disconnect is to use LWT? In this case LWT is static - we can't send something useful on disconnect event.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODk5MTczOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTAyOTI4Mg==,paho.mqtt.python,729029282,524,NA,kpfleming,305938,Kevin P. Fleming,,NA,2020-11-17T16:05:53Z,2020-11-17T16:05:53Z,"Yes. You are literally disconnected from the MQTT broker, it's impossible to send a message.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTAyOTI4Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/524,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTAzNjU3NQ==,paho.mqtt.python,729036575,524,NA,mrdc,16876990,,,NA,2020-11-17T16:16:59Z,2020-11-17T16:16:59Z,"Thanks, it's clear. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyOTAzNjU3NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525,paho.mqtt.python,740302958,525,State of client doesn't change to disconnected after connection lost,mohsen-mahmoodi,2872586,Mohsen Mahmoodi,m.mahmoodi.biz@gmail.com,CLOSED,2020-11-10T22:56:50Z,2024-01-20T11:00:53Z,"When not using loop_forever or loop_start and running the loop in the main thread, a hard disconnect gets captured by the client but doesn't change the output of `is_connected()` method.

Steps to reproduce:

1. Run an mqtt server, I use emqx:

```bash    
docker run -d --name emqx -p 18083:18083 -p 1883:1883 emqx/emqx:v4.0.0
```

2. Run the code below:
   
```python
import time
import logging

import paho.mqtt.client as mqtt

logging.basicConfig(level=logging.DEBUG)

logger = logging.getLogger(__name__)


def on_connect(client, userdata, flags, rc):
    logger.debug('Connected with result code ' + str(rc))
    # subscribe
    client.subscribe('tienda/#')


def on_message(client, userdata, msg):
    logger.debug(msg.topic + "" "" + str(msg.payload))
    # if b'stop' in msg.payload:
    #     client.disconnect()


def on_disconnect(client, flags, rc):
    logger.debug('Disconnected with result code ' + str(rc))
    # client.reconnect()

# Build the client

client = mqtt.Client(clean_session=True)
logger.error('Client initialized with status: %s', client._state)
# Specify callback function
client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect
client.enable_logger(logger)
# client.username_pw_set('topse', 'cret')


# Establish a connection
client.connect('localhost', 1883, 60)
# wait for connection
while not client.is_connected():
    logger.debug('Connecting')
    client.loop(timeout=1)

logger.debug('Connected')

# This loops never ends even after there is no connection at all
while client.is_connected():
    client.loop()
    time.sleep(1)
    logger.debug('In main loop: %s', client.is_connected())
```

3. browse http://localhost:18083/#/clients and find you client and disconnect it.

The result is that you will see the `Disconnected with result code: 0` message, but the program never exits and keeps printing:

```bash
DEBUG:__main__:In main loop: True
DEBUG:__main__:In main loop: True
DEBUG:__main__:In main loop: True
DEBUG:__main__:In main loop: True
DEBUG:__main__:In main loop: True
```

The problem is the internal field `_state` doesn't changes to disconnected or any other states when we are not calling the disconnect method directly. This causes the `is_connected()` method return true and the loop never exits.

paho-mqtt version: 1.5.1
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNTI1NjY5MA==,paho.mqtt.python,725256690,525,NA,mohsen-mahmoodi,2872586,Mohsen Mahmoodi,m.mahmoodi.biz@gmail.com,NA,2020-11-11T07:28:38Z,2020-11-11T07:28:38Z,"Running the loop just like `loop_forever()` has no problem:

```python
while True:
    rc = 0
    while rc == 0:
        logger.debug(client._state)
        rc = client.loop()
        time.sleep(2)

    try:
        client.reconnect()
    except (socket.error, OSError, WebsocketConnectionError):
        logger.error(""Connection failed, retrying"") 
```

The problem is that `is_connected()` returns wrong result.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyNTI1NjY5MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODg4NTcyMw==,paho.mqtt.python,728885723,525,NA,kpfleming,305938,Kevin P. Fleming,,NA,2020-11-17T12:09:58Z,2020-11-17T12:09:58Z,Possibly related to #441.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDcyODg4NTcyMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/525,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wD8jt,paho.mqtt.python,1880082669,525,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T14:58:40Z,2024-01-07T14:58:40Z,"I'm able to reproduce this with the sample code your provided and killing the broken after log of `In main loop`.
I've used Mosquitto rather than emqx but this shouldn't matter.

#795 fix the issue in my test scenario. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wD8jt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/526,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/526,paho.mqtt.python,745625022,526,publish can't send  payload  to  mqtt,willisfeng,30314327,,,CLOSED,2020-11-18T12:40:21Z,2021-07-22T01:02:53Z,"
### ### ### ### ### 
def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))
    client.publish(""test"", payload=""hello world"", qos=1)
### ### ### ### ### 
def on_message(client, userdata, msg):
    print(""Start server!"")
    print(msg.topic + "" "" + str(msg.payload))
### ### ### ### ### 
def on_subscribe(client, userdata, mid, granted_qos):
    print(""On Subscribed: qos = %d"" % granted_qos)
### ### ### ### ### 
def on_publish(client, userdata, mid):
    print(""message ID "", mid)
    #client.disconnect()
### ### ### ### ### 
def on_disconnect(client, userdata, rc):
    if rc != 0:
        print(""Unexpected disconnection %s"" % rc)
### ### ### ### ### 
def on_log(mqttc, obj, level, string):
    print(""Log:""+string)
### ### ### ### ### 
def main():
    client.on_connect = on_connect
    client.on_message = on_message
    client.on_subscribe = on_subscribe
    client.on_publish = on_publish
    client.on_log = on_log
    client.connect(host, int(port), keepalive=60)
    client.loop_forever()
 
----------------------------------------------------------------------------------------------------------------------------------------------
log：
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.ProtocolProcessor   : Processing CONNECT message. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394, username=c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.ProtocolProcessor   : Configuring connection. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.ProtocolProcessor   : The connection has been configured CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394, keepAlive=60, removeTemporaryQoS2=true, idleTime=90
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.ProtocolProcessor   : Sending CONNACK. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.SessionsRepository  : Retrieving session. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.SessionsRepository  : Session does not exist. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.ProtocolProcessor   : CONNACK has been sent. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.BrokerInterceptor   : Sending MQTT CONNECT message to interceptor. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394, interceptorId=com.iot.mqtt.broker.interception.HazelcastDispatchInterceptHandler@_hzInstance_1_dev
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.SessionsRepository  : Retrieving session. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.SessionsRepository  : Session does not exist. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394
2020-11-18 20:32:05.970  INFO [] 9504 --- [nioEventLoopGroup-6-7] io.moquette.spi.impl.SessionsRepository  : Creating new session. CId=3u7b3y65-c1a0b0035240401a92dc434d3954b394, cleanSession=true
`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/526/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/526,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0MTA4ODQ5Ng==,paho.mqtt.python,741088496,526,NA,ralight,79578,Roger Light,,NA,2020-12-08T21:49:38Z,2020-12-08T21:49:38Z,"I've tested out your code and it works fine, once I added `client = paho.Client()`.

```
Log:Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
Log:Received CONNACK (0, 0)
Connected with result code 0
Log:Sending PUBLISH (d0, q1, r0, m1), 'b'test'', ... (11 bytes)
Log:Received PUBACK (Mid: 1)
message ID  1
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0MTA4ODQ5Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/526,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40udFG,paho.mqtt.python,884592966,526,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:02:53Z,2021-07-22T01:02:53Z,"I'm going to close this because I think the issue is solved, if you disagree please reopen and provide some more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40udFG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527,paho.mqtt.python,746752772,527,client.publish() does not work in the on_message() callback,guiklimek,72322850,Guillaume Klimek,,CLOSED,2020-11-19T16:50:51Z,2022-10-05T21:58:24Z,"### Context

Hello everyone,

I develop a program that wait for a specific couple(topic, message), when the message is received, doing things then publish a result.

For that:

1. I initialize a client like:
```Python
def init_client(role, host, port, keepalive) -> mqtt.Client:
   [...]
    client = mqtt.Client(
        client_id='awesome_name',
        clean_session=True,
        userdata=None,
        protocol=mqtt.MQTTv311,
        transport=""tcp""
    )
    [...]
    return client
```
2. I plugged callbacks (`on_connect`, `on_message`, `on_publish`, `on_log`...) on it.

3. I connect the client using `client.connect(host=host, port=port, keepalive=keepalive)`.

4. I run the client with a simple loop:
```Python
while True:
    client.loop()
```

### issue

Now, if I tried this:

```Python
def on_message(client, userdata, message) -> None:
    """"""The callback for when a message is received on subscribed topics""""""
    logger.debug(f""Received {message.topic}, {str(message.qos)}, {str(message.payload.decode('utf-8'))}"")
    pub_info = client.publish(topic='MYTOPIC', payload='mymessage', qos=0, retain=False)
    pub_info.wait_for_publish()
    logger.info(f'Published={pub_info.is_published()}')
```

- The `wait_for_publish()` is stuck for ever. 
- If I try without `wait_for_publish()`, message is published but `is_published()` tell me `False`.

### Expected

I would like to have a single client for subscribe, triggering callback on received messages and publish but it seems to not working.

### Workaround

I already go a workaround. I instantiate a second client and add it to the main client attributs like:

```Python
client = init_client(role='subscriber', host=host, port=port, keepalive=keepalive)

client_pub = init_client(role='publisher', host=host, port=port, keepalive=keepalive)

client.publisher = client_pub  # homemade attribut

while True:
    client.loop()
    client.publisher.loop()
```

With this, I use `client.publisher.publish()` and it works as expected. **BUT**, I'm not sure it's the best way to use the library. 

### Questions

Why I got this behavior ? Is the main client stuck in this `on_message()` callback ?

What is the best practice to do that ?

Thank you for answer me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMjA2NDQ5Mg==,paho.mqtt.python,732064492,527,NA,guiklimek,72322850,Guillaume Klimek,,NA,2020-11-23T10:18:13Z,2020-11-23T10:18:13Z,"It seems to be a nice answer: https://stackoverflow.com/a/36964192 

**TL;DR:** it's not possible to publish in a callback.

**Conclusion:** my workaround is a good solution.

**NB:** this behavior should be documented.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczMjA2NDQ5Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KDsJ2,paho.mqtt.python,1242481270,527,NA,sgbaird,45469701,Sterling G. Baird,sterling.baird@utoronto.ca,NA,2022-09-09T21:08:58Z,2022-09-09T21:08:58Z,@smilife-chocolat still the way to go? Wondering if this is applicable to umqtt and other mqtt frameworks in general.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KDsJ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/527,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Lo8Y3,paho.mqtt.python,1269024311,527,NA,thompcd,20342605,Corey Thompson,corey.dwayne.thompson@gmail.com,NA,2022-10-05T21:58:24Z,2022-10-05T21:58:24Z,"@sgbaird This is still the way to handle this scenario. In any callback that can block your main thread, you want to have extremely light callbacks with minimal or no chance of failure inside of those callbacks. So yes, this will apply to other MQTT frameworks and even other languages as it is a general programming paradigm. 

If you need to perform work signaled by a callback, create a queue and push your action into a queue and let a separate, non-blocking thread service that queue. If you are in a single-threaded environment, you must intentionally dedicate time inside of your main loop to processing the queue periodically.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Lo8Y3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/528,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/528,paho.mqtt.python,751642074,528,on_connect() different behaviour from version 1.5.0 to 1.5.1,CLDiego,41206919,,,CLOSED,2020-11-26T14:39:49Z,2020-11-27T09:59:13Z,"Hi,

I recently upgraded from version 1.5.0 to 1.5.1 and it introduced a bug on my code. 

My code for the callback was:

```
def on_connect(self, client, obj, flags, rc):

        if rc == 0:
            print(f'{rc} - {client.client_id} CONNECTED')
            client._mqtt_connected = True
            print(f'STATUS: {client.connack_string(rc)}')

        else:
            print('CONNECTION FAILED')
```

Now I get an error that client_id is not an attribute of the object client:
-  I changed that line to `client._client_id ` and it works

But then I received the error that `connack_string` is not an attribute.  I'm assuming that in the new version the client object paho is passing is different.

Was the change in behaviour of the on_connect callback intended?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/528/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/528,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDQ3Nzc3Mg==,paho.mqtt.python,734477772,528,NA,ralight,79578,Roger Light,,NA,2020-11-26T21:07:18Z,2020-11-26T21:07:18Z,"`connack_string()` has never been an attribute of a paho mqtt client instance. It is a function that is contained in the `paho.mqtt.client` module. What changed in 1.5.1 is that exceptions are no longer suppressed by default in callbacks. This means that it has exposed a bug in your code. Change to `paho.mqtt.client.connack_string(rc)`, and you will be up and running again.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDQ3Nzc3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/528,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDc1MTQxMg==,paho.mqtt.python,734751412,528,NA,CLDiego,41206919,,,NA,2020-11-27T09:59:13Z,2020-11-27T09:59:13Z,Thanks for the quick reply @ralight ! It was really helpful to get more clarity on this.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDczNDc1MTQxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529,paho.mqtt.python,752107133,529,Google API client breaks name resolution for paho in a docker context,wsw70,1345886,,,CLOSED,2020-11-27T09:25:27Z,2024-01-07T02:04:07Z,"My (home grade) code accesses the Google Calendar API and then publishes information it finds there to a MQTT bus.

It used to run as a service on my server and I decided to move it into a docker container (also on my server). 

**The problem I encounter is that calling the Google API libraries apparently breaks name resolution in paho when ran in a docker container.**

The following code works OK when started from the command line of my server (keys and endpoints redacted)

    import googleapiclient.discovery
    import paho.mqtt.publish
    from google.oauth2 import service_account as google_oauth2_service_account
    
    paho.mqtt.publish.single(
        topic=f""testtopic"",
        payload=""before google"",
        retain=True,
        hostname='mqtt.mydomain'
    )
    print(""before google"")

    google_credentials = google_oauth2_service_account.Credentials.from_service_account_info(
        {
            ""type"": ""service_account"",
            ""project_id"": ""myprojectid"",
            ""private_key_id"": ""8...4"",
            ""private_key"": ""-----BEGIN PRIVATE KEY-----\nM....Kag==\n-----END PRIVATE KEY-----\n"",
            ""client_email"": ""smthg@smthg.iam.gserviceaccount.com"",
            ""client_id"": ""1...9"",
            ""auth_uri"": ""https://accounts.google.com/o/oauth2/auth"",
            ""token_uri"": ""https://oauth2.googleapis.com/token"",
            ""auth_provider_x509_cert_url"": ""https://www.googleapis.com/oauth2/v1/certs"",
            ""client_x509_cert_url"": ""https://www.googleapis.com/robot/v1/metadata/x509/XXX%40dXXX.iam.gserviceaccount.com""
        },
        scopes=['https://www.googleapis.com/auth/calendar'],
        subject='XXX@YYYY'
    )
    google_service = googleapiclient.discovery.build('calendar', 'v3', credentials=google_credentials, cache_discovery=False)
    print(""after google"")
    
    paho.mqtt.publish.single(
        topic=f""testtopic"",
        payload=""after google"",
        retain=True,
        hostname='mqtt.mydomain'
    )
    print(""before end of script"")


In an MQTT explorer I see that the topic has been published to twice, with `before google` and `after google`, and the output is

    before google
    after google
    end of script

So far, so good.

I then moved that code file into docker via the following `Dockerfile`:

    FROM ubuntu:20.04
    RUN apt update && DEBIAN_FRONTEND=noninteractive apt install -y python3-arrow python3-pip python3-paho-mqtt
    RUN pip3 install google-api-python-client oauth2client
    WORKDIR /app
    COPY . .
    CMD python3 googlecalendartest.py ; sleep 1000

The build went fine but the program crashes with (this is the only log)

    before google
    after google
    Traceback (most recent call last):
      File ""googlecalendartest.py"", line 32, in <module>
        paho.mqtt.publish.single(
      File ""/usr/lib/python3/dist-packages/paho/mqtt/publish.py"", line 227, in single
        multiple([msg], hostname, port, client_id, keepalive, will, auth, tls,
      File ""/usr/lib/python3/dist-packages/paho/mqtt/publish.py"", line 163, in multiple
        client.connect(hostname, port, keepalive)
      File ""/usr/lib/python3/dist-packages/paho/mqtt/client.py"", line 937, in connect
        return self.reconnect()
      File ""/usr/lib/python3/dist-packages/paho/mqtt/client.py"", line 1071, in reconnect
        sock = self._create_socket_connection()
      File ""/usr/lib/python3/dist-packages/paho/mqtt/client.py"", line 3522, in _create_socket_connection
        return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
      File ""/usr/lib/python3.8/socket.py"", line 787, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File ""/usr/lib/python3.8/socket.py"", line 918, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno -2] Name or service not known

I **do see** that `testtopic` received a payload of `before google`, but the one after the Google API calls is not there anymore.

`socket.gaierror: [Errno -2] Name or service not known` suggests that `mqtt.mydomain` is not resolvable (I think).

I added a `print(requests.get(""http://google.com"").status_code)` call after the Google API part and it works, so resolution is fine.

It means that the resolution is broken only for paho MQTT.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDMzMTY2Nw==,paho.mqtt.python,814331667,529,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T18:10:59Z,2021-04-06T18:10:59Z,"I have a bug with a completely different context, a completely different setup, but the same symptoms.  e.g. Paho sees a `socket.gaierror: [Errno -2] Name or service not know` but other processes are able to resolve the name.

My issue: https://github.com/Azure/azure-iot-sdk-python/issues/548

@wsw70 - how easily can you repro this issue?

Correction: in your example, other objects in the current process are also able to resolve names, so it may be slightly different.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDMzMTY2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDM5ODkxMg==,paho.mqtt.python,814398912,529,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T19:55:37Z,2021-04-06T19:55:37Z,"I don't think this is related to my issue after all.  Or, at least, it's not directly related.  `socket.getaddrinfo` seems to be widely regarded as buggy and broken, and we're both seeing problems with `socket.getaddrinfo` returning failure.

For your problem, I've been looking at the `requests` code to see why it might be succeeding, and I can see that it's being much more specific about the parameters it passes to `getaddrinfo`.  I can't say why requests is succeeding and Paho is failing, but the bug reports are numerous enough and strange enough that I wouldn't be surprised by anything.

As to why this is broken in Docker and not outside docker, it's very possible that your outside-docker DNS resolver is different from your inside-docker DNS resolver.  One possible way to fix your issue is to install nscd into your container.  This _should_ cache DNS entries and make this error less likely.   reference: https://stackoverflow.com/a/19930436/6262999","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDM5ODkxMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/529,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTVA,paho.mqtt.python,1879913792,529,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T02:04:07Z,2024-01-07T02:04:07Z,"I'm going to close this off due to age/inactivity.

If you are still having issues (with the latest client) then please feel free to reopen. However it would be useful if you could confirm that `mqtt.mydomain` resolves within docker (as this may well be a docker setup issue; particularly if `mqtt.mydomain` only resolves on a local DNS server).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTVA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,paho.mqtt.python,762062850,531,publish blocks entire program ,mhechthz,37075144,Michael Hecht,,OPEN,2020-12-11T08:26:38Z,2024-01-07T11:04:15Z,"I have a really difficult problem. 

I'm using paho-mqtt inside python 3.7 on mosquitto broker at an ubuntu 18.03 system. The program is a bridge between two brokers (which could surely be solved via mosquitto directly, but I did it this way).

One special defined publish command of one client object irregularely hangs the entire program, i.e. starts but doesn't come back. Even timer events are blocked. The only solution is to kill the program from outside. The command itself is obviously ok, since I can send a hundred of publishes without problem. Also try-catch doesn't help, since the pogram hangs. No other publish command of both client object in the program shows this behaviour.

Is there any chance to analyze what happens?

EDIT: I added a threading.Semaphore() on friday - during weekend all seemed to be stable. Migth this be a hint?
EDIT2: Also with semaphore the call to publish blocks / hangs the program.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NzA4NDMxOQ==,paho.mqtt.python,747084319,531,NA,karolszklarski,6827214,,,NA,2020-12-16T22:41:35Z,2020-12-16T22:41:35Z,"I have similar issue. I use loop_start and on_message callback. The callback publishes new messages on different topic. I also have a ""while True"" loop, which publishes something from time to time. It seems that when these two try to publish at the same time, the publish metod hangs and doesn't return.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NzA4NDMxOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uc30,paho.mqtt.python,884592116,531,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:00:09Z,2021-07-22T01:00:09Z,Could you both take a look at the `1.6.x` branch? I've made improvements around the locking which may help here.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uc30/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416dy9,paho.mqtt.python,904518845,531,NA,lytasky,5234675,DongYe,lytasky@gmail.com,NA,2021-08-24T10:25:52Z,2021-08-24T10:25:52Z,hi   @ralight  when 1.6.x release？,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416dy9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416ikt,paho.mqtt.python,904538413,531,NA,ralight,79578,Roger Light,,NA,2021-08-24T10:59:10Z,2021-08-24T10:59:10Z,I'm planning a release around the end of September.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416ikt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42msJO,paho.mqtt.python,916111950,531,NA,dplaks-del,66314984,,,NA,2021-09-09T13:44:53Z,2021-09-09T13:44:53Z,I had a similar problem where the `client.publish` was taking way too long and switching to the `1.6.x` branch fixed the issue,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42msJO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p30Z8,paho.mqtt.python,1776240252,531,NA,David-OConnor,4590796,David O'Connor,the_alchemist@fastmail.com,NA,2023-10-23T23:58:55Z,2023-10-23T23:58:55Z,I'm getting the same thing.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p30Z8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/531,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDul2,paho.mqtt.python,1880025462,531,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T11:03:55Z,2024-01-07T11:03:55Z,"I'll need to information on how to reproduce this bug, as I never had publish() which hang the program in my usage.

#710 could be the same issue: a publish which network is down could result in publish being lost. #710 is merged but not yet released.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDul2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/532,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/532,paho.mqtt.python,762766532,532,"Protocol error: client resends messages after timeout, violating mqtt specification",kleunen,230050,Wouter van Kleunen,wouter.van@kleunen.nl,CLOSED,2020-12-11T18:59:22Z,2023-03-21T19:08:31Z,"Please see following issue:
https://github.com/redboltz/mqtt_cpp/issues/758

The paho python client attempts to resend publish/pubrec/pubcomp after timeout:
https://github.com/eclipse/paho.mqtt.python/blob/8945ee86f42effb305b52963396c51cbfd62bb39/src/paho/mqtt/client.py#L2810-L2829

But this is not according to MQTT specification:
https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901238

_When a Client reconnects with Clean Start set to 0 and a session is present, both the Client and Server MUST resend any unacknowledged PUBLISH packets (where QoS > 0) and PUBREL packets using their original Packet Identifiers. This is the only circumstance where a Client or Server is REQUIRED to resend messages. Clients and Servers MUST NOT resend messages at any other time [MQTT-4.4.0-1]._

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/532/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/532,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ucx6,paho.mqtt.python,884591738,532,NA,ralight,79578,Roger Light,,NA,2021-07-22T00:58:34Z,2021-07-22T00:58:34Z,"Yes, agreed. To be honest I thought this was already removed in 1.5. I removed it in the 1.6.x branch a little while ago, so I'm going to close this. Thanks for the report!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ucx6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/532,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YH0N8,paho.mqtt.python,1478443900,532,NA,BertKleewein,8028738,Bert Kleewein,,NA,2023-03-21T19:08:30Z,2023-03-21T19:08:30Z,"For what it's worth, the phrase ""Clients and Servers MUST NOT resend messages at any other time [MQTT-4.4.0-1]."" was added to the MQTT 5.0 spec. If you look at the 3.1.1 spec, this sentence is missing. I read this as a clarification of an existing requirement rather than a new requirement. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YH0N8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/541,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/541,paho.mqtt.python,766751201,541,There is an extra Byte in the payload if the properties packet length is greater or equal to 128,ochabloz,4550139,,,CLOSED,2020-12-14T17:33:18Z,2020-12-15T09:16:07Z,"There is an extra byte in the payload if the length of the property section of a publish packet is greater or equal to 128

How to reproduce the error:

    import threading
    from src.paho.mqtt import client as mqtt
    from src.paho.mqtt import packettypes
    
    url, port, user, pw = ""test.mosquitto.org"", 1883, """", """"
    ref_payload = b""abcdefghij""
    topic = ""test/corruption""
    emitter = mqtt.Client(protocol=mqtt.MQTTv5)
    emitter.connect(url, port, 120, clean_start=True)
    emitter.loop_start()
    recv = mqtt.Client(protocol=mqtt.MQTTv5)
    recv.connect(url, port, 120, clean_start=True)
    recv.loop_start()
    recv.subscribe(topic, qos=2)
    event = threading.Event()
    payload = []

    def on_message(c, u, m):
        payload.append(m.payload)
        event.set()

    recv.on_message = on_message
    props = mqtt.Properties(packettypes.PacketTypes.PUBLISH)
    props.CorrelationData = b""\x00\x00\x00\x01""
    props.ResponseTopic = ""test_bimbibmm/JB007/measurement""
    props.UserProperty = (""serial_number"", ""TST"")
    props.UserProperty = (""product_number"", ""TST"")
    props.UserProperty = (""vrd"", ""261DAEE5"")
    props.UserProperty = (""timestamp"", ""1234567.123400"")
    emitter.publish(topic, ref_payload, qos=0, properties=props)

    event.wait()
    p = payload.pop()
    assert ref_payload == p

With the message above, the property section is EXACTLY 128 bytes long. If you remove 1 character from any user property, (p.ex `props.UserProperty = (""timestamp"", ""1234567.12340"")`) the assertion will then be correct","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/541/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/541,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NDc3NjM4Mw==,paho.mqtt.python,744776383,541,NA,ralight,79578,Roger Light,,NA,2020-12-14T23:12:25Z,2020-12-14T23:12:25Z,"Thanks very much, that should be fixed now.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NDc3NjM4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/541,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NTE1ODg3MQ==,paho.mqtt.python,745158871,541,NA,ochabloz,4550139,,,NA,2020-12-15T09:16:07Z,2020-12-15T09:16:07Z,"Hello @ralight, thanks for your solution and for your reactivity.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NTE1ODg3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/542,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/542,paho.mqtt.python,770333712,542,client won't hand me messages stored on the broker,mlmarius,30006,,,CLOSED,2020-12-17T20:08:45Z,2020-12-20T13:24:39Z,"Using paho-mqtt and trying to have it receive queued messages. The broker I'm using is emqx 4.2.2 and this is my script:

```python
def on_connect(mqttc, obj, flags, rc, other):
    print(""    Session present: "" + str(flags['session present']))
    print(""    Connection result: "" + str(rc))
    mqttc.subscribe([
        ('/message/1', 1)
    ])


def on_message(*args, **kwargs):
    print(""received a message"")


client = Client(
    client_id='test-client-id',
    protocol=MQTTv5,
)


client.username_pw_set(
    username=""test-user-2"",
    password=""test""
)

client.on_connect = on_connect
client.on_message = on_message

client.connect(
    host='localhost',
    port=1883,
    keepalive=60,
    clean_start=False,
)

client.loop_forever()
```
I now go and publish a message to the broker:

```mosquitto_pub -u test-user-2 -P test -t '/message/1' -m 'this is a message' -q 1 -V mqttv5```

While the client is connected to the broker, It does receive the messages but given that I'm subscribing with QoS 1 and that messages are published with QoS 1 I am expecting that if I disconnect my client from the broker, then publish some more QoS 1 messages to that topic and then reconnect my client to the broker using the same fixed client_id, then my client will receive the messages that have been queued while my client was away. Well that's not happening and simulating the same functionality with mosquitto_sub with the -c flag everything works as expected, which leads me to ask myself ... is there a problem with paho-mqtt? Am I doing something wrong?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/542/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/542,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NzcwNzIxNQ==,paho.mqtt.python,747707215,542,NA,ralight,79578,Roger Light,,NA,2020-12-17T21:17:21Z,2020-12-17T21:17:21Z,"In MQTT v5, clean start means only whether the session is deleted at the start or not. To control how long the session lasts after you disconnect, you need to set the session expiry interval:

```python
import paho.mqtt.properties as properties
...
connect_properties = properties.Properties(properties.PacketTypes.CONNECT)
connect_properties.SessionExpiryInterval = 3600

client.connect(""localhost"", 1883, 60, properties=connect_properties)
```
mosquitto_sub sets a session expiry interval for you if you use `-c`, to keep behaviour consistent across the different specification versions.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0NzcwNzIxNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/542,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODYwNzQwMw==,paho.mqtt.python,748607403,542,NA,mlmarius,30006,,,NA,2020-12-20T13:24:39Z,2020-12-20T13:24:39Z,This is exactly what I needed. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc0ODYwNzQwMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,paho.mqtt.python,775060046,543,loop_forever() timeout,le0pa-RD,73554395,Paolo Leonardelli,,CLOSED,2020-12-27T15:42:46Z,2021-01-09T16:25:38Z,"Hello, I've been using this library to send and receive some data between an Arduino and a Raspberry Pi.
In the raspberry program, I connect to my Arduino and I read the messages containing the data I was searching for.
However, the Arduino sends data only one time while the receiving program runs in a loop.
I tried to set the loop_forever function with a timeout ""client.loop_forever(60000, 1)"" but when it times out it connects again to the client. Is there any way I can quit the program when loop_forever times out?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzEzMjM1Nw==,paho.mqtt.python,757132357,543,NA,lucacillario,26252002,Luca Cillario,luca.cillario.95@gmail.com,NA,2021-01-09T11:00:16Z,2021-01-09T11:00:16Z,"I'm not sure I understand your question. In any case i think that you have misunderstood the meaning of the `timeout` parameter. `client.loop_forever(timeout=60000)` does not mean ""run the loop for 60000 seconds and after that break and quit the program"".  `timeout` refers to how long the thread must block on the socket waiting for new messages to be processed (incoming and / or outgoing). At the end of that timeout interval, if there are no new messages to process, the thread continues with its execution and will try again later. 

If you want to stop the execution of your program after 60000 seconds, you could do this:
```python
import time

client= mqtt.Client()
client.connect(broker,port)
client.loop_start()

# do stuff ...

time.sleep(60000)
client.disconnect()
client.loop_stop()
```
This is a very simplified solution, but if you explain better what you need to do I will gladly try to help you :smile: .","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzEzMjM1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzI0MTY1Nw==,paho.mqtt.python,757241657,543,NA,le0pa-RD,73554395,Paolo Leonardelli,,NA,2021-01-09T14:27:16Z,2021-01-09T14:27:16Z,"What I wanted to do is to set a timeout from the last message received, if no more messages are incoming and the timeout ends it quits the program.
If I understood what you did above your program just waits 60000 seconds from the loop start and then quits, right?

Thanks for the help :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzI0MTY1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMyOTAxNw==,paho.mqtt.python,757329017,543,NA,lucacillario,26252002,Luca Cillario,luca.cillario.95@gmail.com,NA,2021-01-09T16:16:02Z,2021-01-09T16:16:02Z,"Yes, that's right.

So, if you need to quit the program after a certain period of not receiving any messages, you might try something like this:
```python
from paho.mqtt.client import Client
import time


client = Client()
client.connect(broker, port)
client.loop_start()

run = True
TIMEOUT = 10  # seconds
while run:
	client._msgtime_mutex.acquire()
	last_msg_in = client._last_msg_in
	client._msgtime_mutex.release()
	now = time.monotonic()
	if now - last_msg_in > TIMEOUT:
	    client.disconnect()
	    client.loop_stop()
	    run = False
	else:
	    time.sleep(1)
```
In the example above I am accessing some private variables, and this is not great (but it's just an example). You could implement a timer that does the same thing, without having to access private variables. Keep in mind that with `loop_start` you end up in multithreaded environment, so even a simple timer needs to be handled with care.

Another way to solve your problem is to use a ""special"" message which, once received by the client, triggers the disconnection.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMyOTAxNw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMyOTgwNQ==,paho.mqtt.python,757329805,543,NA,le0pa-RD,73554395,Paolo Leonardelli,,NA,2021-01-09T16:21:17Z,2021-01-09T16:21:17Z,Thanks for the help,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMyOTgwNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/543,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMzMDQ5Nw==,paho.mqtt.python,757330497,543,NA,lucacillario,26252002,Luca Cillario,luca.cillario.95@gmail.com,NA,2021-01-09T16:25:37Z,2021-01-09T16:25:37Z,"In any case I agree with you that the semantics of the `timeout` parameter, in the `loop_forever` function, is misleading. I'm not sure if that is bug or not. I'll try to investigate.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1NzMzMDQ5Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/544,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/544,paho.mqtt.python,775998959,544,Update the broker URL for the sandbox MQTT server,evanlesmez,31675729,Evan Lesmez,,CLOSED,2020-12-29T17:10:46Z,2021-07-07T10:27:35Z,"I tried to run the quick start example that communicates with the Eclipse MQTT server: 
```python
import paho.mqtt.client as mqtt

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(""$SYS/#"")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect(""mqtt.eclipse.org"", 1883, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
```

However the `connect` call repeatedly timed out 

```bash
    sock.connect(sa)
socket.timeout: timed out
```

I googled the broker url mqtt.eclipse.org and was redirected to https://mqtt.eclipseprojects.io/
I replaced that url in the quickstart example and receive a 0 return code from the `connect` which is intended to mean success. Does that url need to updated in the README? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/544/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/545,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/545,paho.mqtt.python,777454224,545,Import paho fail,Valtent,76870827,,,CLOSED,2021-01-02T12:39:21Z,2021-07-22T00:42:25Z,"I have an issue with the autostart from an ubuntu machine:
My python with the paho works perfectly when I start it manually but when I do the autostart with the following code
#! /bin/sh
sleep 10
python3 /home/ubuntu/haccp-MQTTPG-client.py
it does not work.
the error is the following
File ""/home/ubuntu/haccp-MQTTPG-client.py"", line 6, in <module>
Jan 02 13:19:00 ip-172-31-25-143 mqttpostgresql[1691]:     import paho.mqtt.client as mqtt
Jan 02 13:19:00 ip-172-31-25-143 mqttpostgresql[1691]: ModuleNotFoundError: No module named 'paho'

sorry, this is my first post, I checked the previous one but I did not find anything similar
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/545/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/545,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MzQ2OTc4OA==,paho.mqtt.python,753469788,545,NA,ochabloz,4550139,,,NA,2021-01-02T12:47:48Z,2021-01-02T12:47:48Z,"when you start a program in ""autostart"" it is usually ran as root or other admin account. check that you installed paho-mqtt system wide, not for a single user.  p.ex: `sudo pip show paho-mqtt`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc1MzQ2OTc4OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/545,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ubp8,paho.mqtt.python,884587132,545,NA,ralight,79578,Roger Light,,NA,2021-07-22T00:42:25Z,2021-07-22T00:42:25Z,"I think ochabloz is correct, so this isn't an issue with the library and am going to close this. If you still need help, please reopen and provide some more details.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ubp8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,paho.mqtt.python,789210751,548,AttributeError: module 'paho.mqtt.publish' has no attribute 'single',RossGoodman,4571012,,,CLOSED,2021-01-19T17:21:25Z,2021-04-14T23:34:26Z,"I had this working fine for a few days then I got the above error.
To try and troubleshoot I re-installed in a venv

```
(logging) rossgoodmancom@penguin:~/scripts/python/logging$ pip3 list
Package           Version
----------------- -------
astroid           2.4.2  
isort             5.7.0  
lazy-object-proxy 1.4.3  
mccabe            0.6.1  
paho-mqtt         1.5.1  
pip               18.1   
pkg-resources     0.0.0  
psutil            5.8.0  
pylint            2.6.0  
setuptools        40.8.0 
six               1.15.0 
toml              0.10.2 
typed-ast         1.4.2  
wheel             0.36.2 
wrapt             1.12.1 
```

and

```
(logging) rossgoodmancom@penguin:~/scripts/python/logging$ pip3 show paho-mqtt
Name: paho-mqtt
Version: 1.5.1
Summary: MQTT version 5.0/3.1.1 client class
Home-page: http://eclipse.org/paho
Author: Roger Light
Author-email: roger@atchoo.org
License: Eclipse Public License v1.0 / Eclipse Distribution License v1.0
Location: /home/rossgoodmancom/scripts/venv/logging/lib/python3.7/site-packages
Requires: 
Required-by: 
(logging) rossgoodmancom@penguin:~/scripts/python/logging$ 
```

When I run my code

```
#!/usr/bin/env python3

import time
import psutil
import socket
import paho.mqtt.publish as publish

print(""""""Logging CPU, Memory & Disk

Press Ctrl+C to exit!

"""""")
the_hostname = socket.gethostname()

try:
    while True:
        cpu_value = psutil.cpu_percent()
        memory_value = psutil.virtual_memory().percent
        disk_pct = psutil.disk_usage('/').percent
        # print('CPU % ', cpu_value)
        # print('Memory % ', memory_value)
        # print('Battery % ', battery_value)
        # print(psutil.disk_usage('/').percent)
        payload='[{""cpu_pct"":'+str(cpu_value)+',""memory_pct"":'+str(memory_value)+',""disk_pct"":'+str(disk_pct)+'},{""hostname"":""'+the_hostname+'""}]'
        # print(payload)
        publish.single(""hosts/performance"", payload, hostname=""192.168.1.4"", port=1883, retain=False, client_id=the_hostname)
        time.sleep(1.0)
except KeyboardInterrupt:
    print('Logging stopped.')
```

I get the error:

```
Traceback (most recent call last):
  File ""./logging.py"", line 5, in <module>
    import paho.mqtt.publish as publish
  File ""/home/rossgoodmancom/scripts/venv/logging/lib/python3.7/site-packages/paho/mqtt/publish.py"", line 29, in <module>
    from . import client as paho
  File ""/home/rossgoodmancom/scripts/venv/logging/lib/python3.7/site-packages/paho/mqtt/client.py"", line 20, in <module>
    import logging
  File ""/home/rossgoodmancom/scripts/python/logging/logging.py"", line 25, in <module>
    publish.single(""hosts/performance"", payload, hostname=""192.168.1.4"", port=1883, retain=False, client_id=the_hostname)
AttributeError: module 'paho.mqtt.publish' has no attribute 'single'
```

Any thoughts???","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc2Mjk5NTk0NQ==,paho.mqtt.python,762995945,548,NA,RossGoodman,4571012,,,NA,2021-01-19T17:25:07Z,2021-01-19T17:25:07Z,Edited above to correct the formatting.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc2Mjk5NTk0NQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MzA1NzU0MQ==,paho.mqtt.python,763057541,548,NA,RossGoodman,4571012,,,NA,2021-01-19T19:04:07Z,2021-01-19T19:04:07Z,"I can now ""fix"" this but not sure why it's a problem (new to Python).
The above script was in a folder called ""logging"" - if I move it to a different folder it works.
Likewise if I take a working copy of publish.py and copy it to a folder called ""logging"" then it gives the same error as above.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc2MzA1NzU0MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4Mjc3NjEzOA==,paho.mqtt.python,782776138,548,NA,seven0fx,57570821,,,NA,2021-02-21T01:14:31Z,2021-02-21T01:14:31Z,.../lib/python3.7/site-packages/paho/mqtt/client.py will try to import the module logging and your folder and *.py file is named 'logging',"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4Mjc3NjEzOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/548,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkxNjE3MA==,paho.mqtt.python,819916170,548,NA,ralight,79578,Roger Light,,NA,2021-04-14T23:34:26Z,2021-04-14T23:34:26Z,I'm going to close this then as it wasn't a Paho problem. I'm glad you got it sorted.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkxNjE3MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/549,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/549,paho.mqtt.python,797474104,549,loop_start() before connect(),jps-aldridge,34809163,,,CLOSED,2021-01-30T16:41:49Z,2024-01-20T13:55:34Z,"The documentation says that loop_start() can be called either before or after connect(), however this appears not to be true. Calling loop_start() after connect() seems to work fine

    import paho.mqtt.client
    print(paho.mqtt.__version__)

    client = paho.mqtt.client.Client()

    client.connect('keylimepi.lan')
    client.loop_start()

    mi = client.publish('test', 'testing')
    mi.wait_for_publish()

    client.disconnect()
    client.loop_stop()

but if I call it before

    import paho.mqtt.client
    print(paho.mqtt.__version__)

    client = paho.mqtt.client.Client()

    client.loop_start()
    client.connect('keylimepi.lan')

    mi = client.publish('test', 'testing')
    mi.wait_for_publish()

    client.disconnect()
    client.loop_stop()

then the message  is not published and the wait_for_publish() call hangs.

This behaviour is observed with both version 1.4.0 and 1.5.1","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/549/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/549,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MDYwOTQ4Mw==,paho.mqtt.python,870609483,549,NA,dachshund-digital,1486285,,,NA,2021-06-29T13:40:19Z,2021-06-29T13:40:19Z,"The logic I use is to connect than loop.  This makes sense to me, in that until you connect successfully looping serves little purpose.  I also use connect_async and set a connect=true flag in the on_connect callback, so that I know when it is possible for loop to do any work.

I also call disconnect before loop_stop, since I want to let on_disconnect run.  Even un_subscribe gets aborted when you do explicit unscribes and call loop_stop to fast for the broker to respond.

I don't tend to call wait_for_publish the way my code is designed, I use the on_publish call back to let my main loop know a publish was completed based on broker response.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3MDYwOTQ4Mw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/549,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wD9Af,paho.mqtt.python,1880084511,549,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T15:05:42Z,2024-01-07T15:05:42Z,"I'm not sure the message being dropped is a bug. You do a publish with QoS = 0 which is according to MQTTv3.1.1 standard:
> The message is delivered according to the capabilities of the underlying network.

So in my interpretation, the library should drop the message is the connection is not yet established.

Having wait_for_publish that hang is a bug however.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wD9Af/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,paho.mqtt.python,800712442,550,publish() never completes if done straight after connect_async(),jps-aldridge,34809163,,,CLOSED,2021-02-03T21:24:23Z,2021-07-22T11:57:53Z,"Using paho-pqtt 1.5.1, when the example

    import time
    import paho.mqtt.client

    print(paho.mqtt.__version__)
    client = paho.mqtt.client.Client()

    client.connect_async('keylimepi.lan')
    client.loop_start()

    # time.sleep(0.1)

    mi = client.publish('test', 'testing')
    mi.wait_for_publish()

    client.disconnect()
    client.loop_stop()

is run, the message never reaches the broker and the call to wait_for_publish() hangs indefinitely.

If the time.sleep() line is uncommented, then the code publishes the message and terminates as expected.

[ I'm using connect_async(), rather than connect(), because I want the message to reach the broker eventually, even if it cannot be reached when the program is started. ]
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQxNDUzNg==,paho.mqtt.python,814414536,550,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T20:22:34Z,2021-04-06T20:22:34Z,"By default, the `publish` method specifies `qos=0` which translates to ""no delivery guarantee"".  I recommend passing `qos=1` to the publish call, which translates to ""guaranteed to be delivered at least once.""

You may also want to check the value of `mi.rc`.  It might indicate an error that you need to handle.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQxNDUzNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDk2MTU0NA==,paho.mqtt.python,814961544,550,NA,jps-aldridge,34809163,,,NA,2021-04-07T14:28:53Z,2021-04-07T14:28:53Z,"Fair enough: it would be nice if this behaviour was documented, though.

I'd assumed that wait_for_publish() would complete immediately if the library had decided to discard the the message without sending it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDk2MTU0NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkxMzQwOA==,paho.mqtt.python,819913408,550,NA,ralight,79578,Roger Light,,NA,2021-04-14T23:26:38Z,2021-04-14T23:26:38Z,"Thanks for the report. `wait_for_publish()` now throws an exception if the preceding publish call produced an error. That would have allowed you to find the problem. If you think that's enough, please reopen and explain.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkxMzQwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0MjQzNjQ1Ng==,paho.mqtt.python,842436456,550,NA,photron,112723,Matthias Bolte,,NA,2021-05-17T15:51:54Z,2021-05-17T15:51:54Z,"@ralight Did you miss to include the actual change to `wait_for_publish()` in the commit? c339cea2652a957d47de68eafb2a76736c1514e6 only updated the changelog. Also, the change to `wait_for_publish()` should be applied to `is_published` too.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0MjQzNjQ1Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vSyx,paho.mqtt.python,884812977,550,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:35:10Z,2021-07-22T10:35:10Z,@photron It looks like it. I've added the code back in.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vSyx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/550,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vdQl,paho.mqtt.python,884855845,550,NA,photron,112723,Matthias Bolte,,NA,2021-07-22T11:57:53Z,2021-07-22T11:57:53Z,"@ralight Thank you. I think the same change should be applied to `is_published()` too. Because as it is now, the error behavior between `wait_for_publish()` and `is_published()` is different.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vdQl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551,paho.mqtt.python,803440256,551,Connecting to TLS1.2 server fails (on Python 3.5),wiebeytec,6682400,,,CLOSED,2021-02-08T10:50:06Z,2021-04-14T23:07:44Z,"I'm getting a TLSV1_ALERT_PROTOCOL_VERSION error on a Ubuntu 16.04 machine. Python 3.5, and openssl 1.0.2 all support TLS 1.2, but using PAHO to connect to a server that only supports TLS 1.2 or TLS 1.3 (Mosquitto on Ubuntu 20.04 for instance) fails.

I tried the newest Paho, 1.5.1. 

Trace, although this trace is 1.3, the error is the same:

```
File ""/bla/paho/mqtt/client.py"", line 760, in connect
    return self.reconnect()
  File ""/bla/paho/mqtt/client.py"", line 919, in reconnect
    sock.do_handshake()
  File ""/usr/lib/python3.5/ssl.py"", line 988, in do_handshake
    self._sslobj.do_handshake()
  File ""/usr/lib/python3.5/ssl.py"", line 633, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLError: [SSL: TLSV1_ALERT_PROTOCOL_VERSION] tlsv1 alert protocol version (_ssl.c:645)
```

The problem is in finding the supported version. I hack-patched it for a project of ours:

```
         # Create SSLContext object
         if tls_version is None:
-            tls_version = ssl.PROTOCOL_TLSv1
+            tls_version = ssl.PROTOCOL_TLSv1_2
             # If the python version supports it, use highest TLS version automatically
             if hasattr(ssl, ""PROTOCOL_TLS""):
                 tls_version = ssl.PROTOCOL_TLS
```

I know this is not a graceful patch, but FYI.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwOTk3Mg==,paho.mqtt.python,814409972,551,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T20:14:16Z,2021-04-06T20:14:16Z,"Maybe I misread something, but this seems like it's working correctly.  `ssl.PROTOCOL_TLSv1` means ""use TLS v1.0"".  If you pass this, it should fail if the server only supports TLS v1.2+
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwOTk3Mg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQ0MDMwNg==,paho.mqtt.python,814440306,551,NA,wiebeytec,6682400,,,NA,2021-04-06T21:06:23Z,2021-04-06T21:06:23Z,"The point is that 'If the python version supports it, use highest TLS version automatically' fails, so that it defaults to TLS1 and gives an incorrect error about TLS1.2 not being supported, while it actually is.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQ0MDMwNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/551,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkwNjM2OA==,paho.mqtt.python,819906368,551,NA,ralight,79578,Roger Light,,NA,2021-04-14T23:07:44Z,2021-04-14T23:07:44Z,"We should be defaulting to TLS 1.2 now anyway, so this is a fair change, thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTkwNjM2OA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,paho.mqtt.python,810461729,552,on_disconnect not working as expected ,mpena2099,1200886,Maurício Pena,,CLOSED,2021-02-17T19:14:40Z,2023-12-24T00:24:00Z,"Hello. 

The ""on_disconnect"" callback is not triggered when the internet connection is interrupted, but only when the program is killed.

I needed to execute a command every time the connection to the broker is lost ...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTM5NTE1Nw==,paho.mqtt.python,789395157,552,NA,jpodpro,15255854,Jason Danielson,,NA,2021-03-03T03:15:00Z,2021-03-03T03:15:00Z,i'm finding that we ocasionally get disconnected from the broker and the callback is not fired nor is a reconnect attempted. we simply notice that it has stopped functioning and have to restart the server. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTM5NTE1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODc4ODM5MQ==,paho.mqtt.python,808788391,552,NA,kinslayer1982,65303361,,,NA,2021-03-27T19:10:37Z,2021-03-27T19:10:37Z,"I can confirm this behaviour for 1.5.1
In 1.5.0 reconnect is working.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgwODc4ODM5MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTc5NTQyMQ==,paho.mqtt.python,879795421,552,NA,stsdc,6031763,Stanisław,,NA,2021-07-14T10:57:38Z,2021-07-14T10:57:38Z,Can confirm this issue. You may try to just add a rule to Your router to block certain URL to reproduce this issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3OTc5NTQyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/552,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXX3X,paho.mqtt.python,1868398039,552,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:24:00Z,2023-12-24T00:24:00Z,"Unfortunately without [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) it's difficult to respond to issues like this  (there are many potential causes; some OS dependent). Given this issues age (there have been a few releases since) I'm going to close it. If anyone is able to replicate the issue then please reopen it and supply logs to enable us to diagnose further (include details of the library version in use, OS, network setup etc).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXX3X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,paho.mqtt.python,818538769,553,paho python client stops django server ,minaee,10369075,,,CLOSED,2021-03-01T06:49:19Z,2021-03-09T07:10:25Z,"from [this SO question](https://stackoverflow.com/questions/41015779/how-to-use-paho-mqtt-client-in-django), I implemented a subscriber client in my Django project as following:

in mqtt.py, I create a client and connect to a local broker and subscribe to a topic.

```
#myapp/mqtt.py:
import paho.mqtt.client as paho
import json
import django
django.setup()
from .models import Temperature, Turbidity, Refined_fuels, Crude_oil
from datetime import datetime

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print(""CONNACK received with code %d."" % (rc))
    client.subscribe(""sensor/temp"", qos=0)


def on_subscribe(client, userdata, mid, granted_qos):
    print(""Subscribed: ""+str(mid)+"" ""+str(granted_qos))

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+"", ""+'QOS: ' +str(msg.qos)+"",\n""+str(msg.payload, 'utf-8'))
    message_dict = json.loads(msg.payload)
    
    now = datetime.now()
    captured_timestamp = datetime.utcfromtimestamp(int(message_dict['Timestamp'])).strftime('%Y-%m-%d %H:%M:%S')
    print('timestamp: ', captured_timestamp )
    if message_dict['Temperature'] and message_dict['D850'] and message_dict['D280']:
            
        temp = Temperature(captured_timestamp=captured_timestamp, data=message_dict['Temperature'], received_timestamp=now)
        temp.save()
        refined_fuels = Refined_fuels(captured_timestamp=captured_timestamp, data=float(message_dict['D850']), received_timestamp=now)
        refined_fuels.save()
        crude_oil = Crude_oil(captured_timestamp=captured_timestamp, data=float(message_dict['D280']), received_timestamp=now)
        crude_oil.save()

# defining client
client = paho.Client(client_id=""testSubscriber"",
                     clean_session=True, userdata=None,
                     protocol=paho.MQTTv311)

# adding callbacks to client
client.on_connect = on_connect
client.on_subscribe = on_subscribe
client.on_message = on_message

client.connect(host=""localhost"", port=1883, keepalive=60,
               bind_address="""" )
```

in `__init__.py` I call the `loop_start()` of client:

```
# myapp/__init__.py
from . import mqtt

mqtt.client.loop_start()
```

For **publisher** client I used **paho C client**. and for **broker** I used **hivemq-4.5.1** enterprise trial version. And, I'm running the project on ubuntu 18.04.

now, When I run the Django server(`python manage.py runserver`), it keeps calling the `on_connect()` method and continues `on_connect()` method, But the server is not running and I cant access the project from `localhost:8000`.


this is the django error before the `on_connect()` and `on_subscribe()` methods keep printing their messages:

> Exception in thread django-main-thread:
> Traceback (most recent call last):
>   File ""/usr/local/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
>     self.run()
>   File ""/usr/local/lib/python3.8/threading.py"", line 870, in run
>     self._target(*self._args, **self._kwargs)
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/utils/autoreload.py"", line 53, in wrapper
>     fn(*args, **kwargs)
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/core/management/commands/runserver.py"", line 110, in inner_run
>     autoreload.raise_last_exception()
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/utils/autoreload.py"", line 76, in raise_last_exception
>     raise _exception[1]
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/core/management/__init__.py"", line 357, in execute
>     autoreload.check_errors(django.setup)()
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/utils/autoreload.py"", line 53, in wrapper
>     fn(*args, **kwargs)
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/__init__.py"", line 24, in setup
>     apps.populate(settings.INSTALLED_APPS)
>   File ""/home/shahriar/webapp/venv/lib/python3.8/site-packages/django/apps/registry.py"", line 94, in populate
>     raise ImproperlyConfigured(
> django.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates: graphs
> 

and this is the broker log that is ok and shows no error:

> 2021-03-01 10:06:38,056 INFO  - Received PUBLISH from client 'testPublisher' for topic 'sensor/temp': Payload: '{ ""Timestamp"": 1609446782, ""Temperature"": ""30.13"", ""D850"": ""102.48"", ""D280"": ""4845.83"" }', QoS: '2', Retained: 'false'
> 2021-03-01 10:06:38,058 INFO  - Sent PUBREC to client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:38,059 INFO  - Sent PUBLISH to client 'testSubscriber' on topic 'sensor/temp': Payload: '{ ""Timestamp"": 1609446782, ""Temperature"": ""30.13"", ""D850"": ""102.48"", ""D280"": ""4845.83"" }', QoS: '0', Retained: 'false'
> 2021-03-01 10:06:38,075 INFO  - Received CONNECT from client 'testSubscriber': Protocol version: 'V_3_1_1', Clean Start: 'true', Session Expiry Interval: '0'
> 2021-03-01 10:06:38,207 INFO  - Sent CONNACK to client 'testSubscriber': Reason Code: 'SUCCESS', Session Present: 'false'
> 2021-03-01 10:06:38,209 INFO  - Received SUBSCRIBE from client 'testSubscriber': Topics: { [Topic: 'sensor/temp', QoS: '0'] }
> 2021-03-01 10:06:38,209 INFO  - Sent SUBACK to client 'testSubscriber': Suback Reason Codes: { [Reason Code: 'GRANTED_QOS_0'] }
> 2021-03-01 10:06:39,056 INFO  - Received PUBREL from client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:39,057 INFO  - Sent PUBCOMP to client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:39,131 INFO  - Received CONNECT from client 'testSubscriber': Protocol version: 'V_3_1_1', Clean Start: 'true', Session Expiry Interval: '0'
> 2021-03-01 10:06:39,158 INFO  - Received PUBLISH from client 'testPublisher' for topic 'sensor/temp': Payload: '{ ""Timestamp"": 1609446783, ""Temperature"": ""30.13"", ""D850"": ""102.48"", ""D280"": ""4845.83"" }', QoS: '2', Retained: 'false'
> 2021-03-01 10:06:39,161 INFO  - Sent PUBREC to client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:39,200 INFO  - Sent CONNACK to client 'testSubscriber': Reason Code: 'SUCCESS', Session Present: 'false'
> 2021-03-01 10:06:39,201 INFO  - Received SUBSCRIBE from client 'testSubscriber': Topics: { [Topic: 'sensor/temp', QoS: '0'] }
> 2021-03-01 10:06:39,203 INFO  - Sent SUBACK to client 'testSubscriber': Suback Reason Codes: { [Reason Code: 'GRANTED_QOS_0'] }
> 2021-03-01 10:06:40,162 INFO  - Received PUBREL from client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:40,162 INFO  - Sent PUBCOMP to client 'testPublisher': Reason Code: 'SUCCESS'
> 2021-03-01 10:06:40,262 INFO  - Received PUBLISH from client 'testPublisher' for topic 'sensor/temp': Payload: '{ ""Timestamp"": 1609446784, ""Temperature"": ""30.13"", ""D850"": ""102.48"", ""D280"": ""4845.83"" }', QoS: '2', Retained: 'false'
> 

**now the question is that, is the implementation of paho python client in Django wrong?** 

Since I wanted to store messages in DB, I imported the models in `mqtt.py` and that caused an error:

> raise AppRegistryNotReady(""Apps aren't loaded yet."")
> django.core.exceptions.AppRegistryNotReady: Apps aren't loaded yet.

to over come that. I put 
```
import django
django.setup()
```
before importing models in `mqtt.py` and that solved the problem.
to the best of my knowledge, it starts the app which  `mqtt.py` is inside of it before the main app. So the django see two instance of that app and throws this error:

> raise ImproperlyConfigured(
> django.core.exceptions.ImproperlyConfigured: Application labels aren't unique, duplicates: graphs

So, I understand that my implementation is wrong. but how to correct it?


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTM5NDU3MQ==,paho.mqtt.python,789394571,553,NA,jpodpro,15255854,Jason Danielson,,NA,2021-03-03T03:13:20Z,2021-03-03T03:13:20Z,"one issue is that you're importing and starting your MQTT client before the django app is setup. i run our MQTT client from django but i import it from the django app's `urls.py` file as that is a later entry point after which the django app has been loaded.

try moving the code from your `__init__.py` file into your `urls.py` or `wsgi.py` file.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc4OTM5NDU3MQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MjIxNDc0Ng==,paho.mqtt.python,792214746,553,NA,minaee,10369075,,,NA,2021-03-07T05:12:06Z,2021-03-07T05:12:06Z,"> one issue is that you're importing and starting your MQTT client before the django app is setup. i run our MQTT client from django but i import it from the django app's `urls.py` file as that is a later entry point after which the django app has been loaded.
> 
> try moving the code from your `__init__.py` file into your `urls.py` or `wsgi.py` file.

the `on_connect` and `on_subscribe` methods are being displayed even before the Django server prints the 127.0.0.1 URL on the terminal!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MjIxNDc0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzAxNzUyOA==,paho.mqtt.python,793017528,553,NA,jpodpro,15255854,Jason Danielson,,NA,2021-03-08T19:34:47Z,2021-03-08T19:34:47Z,i'm not entirely sure what you're doing. all i know is that it works for me to import and start the mqtt client in our `urls.py` file.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzAxNzUyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ0NzUxNA==,paho.mqtt.python,793447514,553,NA,minaee,10369075,,,NA,2021-03-09T06:18:30Z,2021-03-09T06:18:30Z,"> i'm not entirely sure what you're doing. all i know is that it works for me to import and start the mqtt client in our `urls.py` file.

this is what I'm following:

1. add `mqtt.py` file in an app directory named `Graphs`.
2. import and run `loop_start()` function in the main app `__init__.py` file.

this ends up the errors that I mentioned in the question.

I also followed your suggestion and it turned out to be like this:

1. add `mqtt.py` file in an app directory named `Graphs`.
2. import and run the `loop_start()` function in either the main app's `urls.py` file or `wsgi.py` file.

both of your suggestions resulted in the client to out of the loop. since no data was received in these cases.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ0NzUxNA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ2MjY2Nw==,paho.mqtt.python,793462667,553,NA,jpodpro,15255854,Jason Danielson,,NA,2021-03-09T06:50:50Z,2021-03-09T06:50:50Z,"i still can't accurately tell what you're doing without seeing the content of all relevant files. post all of them if you really want help. but my best guess is to

- move your loop start call to the end of your mqtt.py file. it doesn't make sense to have it separated from your other client calls.
`client.loop_start()`
- in your django app's `urls.py`, after any imports:
`from Graphs import mqtt`

'client to out of the loop' isn't a very clear description of what is happening. are you saying the program just quits? if you are correctly calling `loop_start` the client should just wait for messages from the broker. are you even running a broker?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ2MjY2Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/553,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ3MjYyNQ==,paho.mqtt.python,793472625,553,NA,minaee,10369075,,,NA,2021-03-09T07:10:24Z,2021-03-09T07:10:24Z,"> i still can't accurately tell what you're doing without seeing the content of all relevant files. post all of them if you really want help. but my best guess is to
> 
> * move your loop start call to the end of your mqtt.py file. it doesn't make sense to have it separated from your other client calls.
>   `client.loop_start()`
> * in your django app's `urls.py`, after any imports:
>   `from Graphs import mqtt`
> 
> 'client to out of the loop' isn't a very clear description of what is happening. are you saying the program just quits? if you are correctly calling `loop_start` the client should just wait for messages from the broker. are you even running a broker?

this part cleared the flow of running for me:

> * move your loop start call to the end of your mqtt.py file. it doesn't make sense to have it separated from your other client calls.
>   `client.loop_start()`
> * in your django app's `urls.py`, after any imports:
>   `from Graphs import mqtt`

I've changed `mqtt.py` as follows:

```
# graphs/mqtt.py
def on_connect(client, userdata, flags, rc):
    print(""CONNACK received with code %d."" % (rc))
    client.subscribe(""sensor/data"", qos=2)
    
def on_subscribe(client, userdata, mid, granted_qos):
    print(""Subscribed: ""+str(mid)+"" ""+str(granted_qos))
    
# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(""typeof payload: "", type(msg.payload))
    print(msg.topic+"", ""+'QOS: ' + str(msg.qos)+"",\n""+str(msg.payload, 'utf-8'))
    
    print(""payload: "", str(msg.payload, 'utf-8'))
    message_dict = json.loads(str(msg.payload, 'utf-8'))
    
def run_client():
    client = paho.Client(client_id=""testSubscriber"", clean_session=True,
                        userdata=None, protocol=paho.MQTTv311)

    # adding callbacks to client
    client.on_connect = on_connect
    client.on_subscribe = on_subscribe
    client.on_message = on_message

    client.connect_async(host=""localhost"", port=1883, keepalive=60, bind_address="""")
    client.loop_start()

```

and the `urls.py` file:

```
# graphs/urls.py
from django.contrib import admin
from django.urls import path, re_path, include

from . import views
from graphs import mqtt

mqtt.run_client()

urlpatterns = [
    ...
]
```

Thank you for your time friend.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDc5MzQ3MjYyNQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/555,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/555,paho.mqtt.python,823407965,555,Properties json() method doesn't return a valid json dictionnary,BinarSkugga,7575628,Charles Smith,binarskugga@gmail.com,CLOSED,2021-03-05T20:59:49Z,2021-10-21T09:31:00Z,"Using properties in MQTTv5, there is a method in the Properties object to transform them in json but it produces a dictionnary with bytes values which is not json serializable by the STD lib in Python.

Steps to reproduce:
```python
properties= Properties(PacketTypes.PUBLISH)
properties.CorrelationData = uuid.uuidv4().bytes

j = properties.json()
json.dumps(j)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/555/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/555,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41opN0,paho.mqtt.python,899847028,555,NA,ralight,79578,Roger Light,,NA,2021-08-16T22:03:20Z,2021-08-16T22:03:20Z,"The Correlation Data object now gets converted to hex when it is a bytes object, thanks for the report!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41opN0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/557,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/557,paho.mqtt.python,833292273,557,Caught exception in on_message: 'NoneType' object has no attribute 'unread_result',arslion,3967627,Arslan Zahid,,CLOSED,2021-03-17T00:22:23Z,2021-04-07T05:36:49Z,"Keep getting this error and code is crashing after one message recieved.
```
Caught exception in on_message: 'NoneType' object has no attribute 'unread_result'
Traceback (most recent call last):
  File ""updater.py"", line 250, in <module>
    client.loop_forever()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1181, in loop
    rc = self.loop_read(max_packets)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1572, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2310, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 2936, in _packet_handle
    return self._handle_publish()
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3216, in _handle_publish
    self._handle_on_message(message)
  File ""/usr/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3444, in _handle_on_message
    self.on_message(self, self._userdata, message)
  File ""updater.py"", line 218, in on_message
    print cursor.fetchall()
  File ""/usr/local/lib/python2.7/site-packages/mysql/connector/cursor_cext.py"", line 512, in fetchall
    if not self._cnx.unread_result:
AttributeError: 'NoneType' object has no attribute 'unread_result'
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/557/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/557,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwNTQxMw==,paho.mqtt.python,814405413,557,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T20:06:39Z,2021-04-06T20:06:39Z,"This isn't a bug in Paho.  It looks like your `on_message` function in updater.py is calling a mysql function (`cursor.fetchall`), and that function is raising an exception.  Maybe `cursor` hasn't be initialized properly?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwNTQxMw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,paho.mqtt.python,842286667,561,Can someone post an example of an unsubscribe callback?  I can't find an example that seems to work?,dachshund-digital,1486285,,,CLOSED,2021-03-26T20:49:29Z,2021-06-16T03:33:57Z,"Can someone post an example of an unsubscribe callback?  I can't find an example that seems to work?  I have even written python code to test this, and it appears that either my code is wrong, or the broker I am using just simply does not return back a UNSUBACK.  So, I am hoping someone can provide an example they know works 100%, that I can try against the broker I have to help isolate the issue to either my code, or the broker dropping the ball so to speak.  I am using the mosquitto broker that is installed via Raspberry Pi OS (latest), mosquitto version 2.0.9.

Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwMjgxMQ==,paho.mqtt.python,814402811,561,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-06T20:02:22Z,2021-04-06T20:02:22Z,"One way to debug this issue is to turn on Paho logging.  If your broker is sending UNSUBACK, you should see a `Received UNSUBACK` in your log.

To enable this, you need to:
1. `import logging` and `logging.getLogger(""paho"").setLevel(level=logging.DEBUG)`
2. call `enable_logger` on your Client object","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxNDQwMjgxMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTg5MDAzMg==,paho.mqtt.python,819890032,561,NA,ralight,79578,Roger Light,,NA,2021-04-14T22:27:11Z,2021-04-14T22:27:11Z,"Here you go:

```
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, rc):
    print(""Connected"")
    mqttc.subscribe(""unsub-callback-demo"", 0)

def on_subscribe(mqttc, obj, mid, granted_qos):
    print(""Subscribed"")
    mqttc.unsubscribe(""unsub-callback-demo"")

def on_unsubscribe(mqttc, obj, mid):
    print(""Unsubscribed"")

def on_log(mqttc, obj, level, string):
    print(string)

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe
mqttc.on_unsubscribe = on_unsubscribe
mqttc.on_log = on_log
mqttc.connect(""test.mosquitto.org"", 1883, 60)
mqttc.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTg5MDAzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTU5MjI2NA==,paho.mqtt.python,861592264,561,NA,dachshund-digital,1486285,,,NA,2021-06-15T15:21:23Z,2021-06-15T15:21:23Z,"Thanks!  Your example works, so good news is my broker is sending UNSUBACK.  But my callback is not firing.  So I have a bug or something else going on.

> [2021-06-15 15:16:31 GMT]  Test * 0.0.1 * 06/13/2021
[2021-06-15 15:16:31 GMT]  Test...
[2021-06-15 15:16:31 GMT]  Wait!
[2021-06-15 15:16:32 GMT]  Wait!
[2021-06-15 15:16:32 GMT]  Wait!
[2021-06-15 15:16:32 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
[2021-06-15 15:16:32 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Received CONNACK (0, 0)
[2021-06-15 15:16:32 GMT]  Connect! Client 0xb4ba6df0, Data None, Flags {'session present': 0}, Result: 0
[2021-06-15 15:16:32 GMT]  Subscribe 'command/irrigation/test'
[2021-06-15 15:16:32 GMT]  Wait!
[2021-06-15 15:16:32 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Sending SUBSCRIBE (d0, m1) [(b'command/irrigation/test', 2)]
[2021-06-15 15:16:32 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Received SUBACK
[2021-06-15 15:16:32 GMT]  Subscribe! Client 0xb4ba6df0, Data None, Topic 'command/irrigation/test', Quality (2,)
[2021-06-15 15:16:32 GMT]  Idle! Client 0xb4ba6df0
[2021-06-15 15:16:33 GMT]  Idle! Client 0xb4ba6df0
[2021-06-15 15:16:34 GMT]  Idle! Client 0xb4ba6df0
[2021-06-15 15:16:35 GMT]  Idle! Client 0xb4ba6df0
[2021-06-15 15:16:35 GMT]  Control Break (Control-C Interrupt)? SIGINT
[2021-06-15 15:16:35 GMT]  Interrupt (SIGINT)...
[2021-06-15 15:16:35 GMT]  ...Interrupt (SIGINT).
[2021-06-15 15:16:36 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Sending DISCONNECT
[2021-06-15 15:16:36 GMT]  Log! Client 0xb4ba6df0, Data None, Level 16, Message Sending UNSUBSCRIBE (d0, m2) [b'command/irrigation/test']
[2021-06-15 15:16:36 GMT]  Unsubscribe 'command/irrigation/test'
[2021-06-15 15:16:36 GMT]  Disconnect! Client 0xb4ba6df0, Data None, Result 0


My code never seems to see the UNSUBACK.  I am using loop_start() and loop_stop, as well as connect_async().  But I can't see that as an issue per se?  I am definitely trying to hook the message.

>                 theClient = mqtt.Client()
                if theClient is None:

                        #

                        raise Exception('No Client?')

                #

                theClient.on_connect = OnConnect
                theClient.on_subscribe = OnSubscribe
                theClient.on_message = OnMessage
                theClient.on_log = OnLog
                theClient.on_publish = OnPublish
                theClient.on_unsubscribe = OnUnSubscribe
                theClient.on_disconnect = OnDisconnect

                #

                theClient.connect_async(BROKER, PORT, ALIVE)
                theClient.loop_start()


So, time to do some debugging.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTU5MjI2NA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTYwNDg0Nw==,paho.mqtt.python,861604847,561,NA,dachshund-digital,1486285,,,NA,2021-06-15T15:35:52Z,2021-06-15T15:35:52Z,"This is a bit weird... I changed connect_async() to just connect, and called loop_forever(), this got a bit more detail.  But the message logged does not make much sense... my OnUnSubscribe() just has a print in it.

> [2021-06-15 15:32:57 GMT]  Log! Client 0xb4c80d70, Data None, Level 16, Message Sending SUBSCRIBE (d0, m2) [(b'command/irrigation/test', 2)]
[2021-06-15 15:32:57 GMT]  Log! Client 0xb4c80d70, Data None, Level 16, Message Received SUBACK
[2021-06-15 15:32:57 GMT]  Log! Client 0xb4c80d70, Data None, Level 8, Message Caught exception in on_subscribe: list index out of range
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTYwNDg0Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTY4ODMyMQ==,paho.mqtt.python,861688321,561,NA,dachshund-digital,1486285,,,NA,2021-06-15T17:25:48Z,2021-06-15T17:25:48Z,"Ok there is some code that consistently shows that unsubscribe message is just not being seen after loop_forever or loop_start has control.

import time
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, rc):
    print(""CONNECTED"")

def on_subscribe(mqttc, obj, mid, granted_qos):
    print(""SUBSCRIBED"")

def on_unsubscribe(mqttc, obj, mid):
    print(""UNSUBSCRIBED"")

def on_log(mqttc, obj, level, string):
    print(string)

def on_disconnect(mqttc, object, rc):
        print('DISCONNECTED')`
try:

        mqttc = mqtt.Client()
        mqttc.on_connect = on_connect
        mqttc.on_subscribe = on_subscribe
        mqttc.on_unsubscribe = on_unsubscribe
        mqttc.on_disconnect = on_disconnect
        mqttc.on_log = on_log

        #mqttc.connect_async(""broker.dd.org"", 1883, 60)
        mqttc.connect(""broker.dd.org"", 1883, 60)

        print('subscribe topic-1')
        mqttc.subscribe('topic-1')

        print('subscribe topic-2')
        mqttc.subscribe('topic-2')

        print('unsubscribe topic-1')
        mqttc.unsubscribe('topic-1')

       mqttc.loop_forever()

        while True:

                print('never here')

except KeyboardInterrupt as theException:

        print('')
        print('interrupt')

except Exception as theException:

        print('catch anything')

finally:

        print('attempt unsubscribe')
        mqttc.unsubscribe('topic-2')

        print('wait')
        time.sleep(15)

        print('attempt disconnect')
        mqttc.disconnect()

        print('done')

Run results....  The first unsubscribe gets the UNSUBACK as expected, but the second unsubscribe never gets an UNSUBACK.  I can't figure out why this happens, my code?  A bug?  The main thread is waiting as well, before calling disconnect, so what is the deal?

~# python3 Test.py
Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
subscribe topic-1
Sending SUBSCRIBE (d0, m1) [(b'topic-1', 0)]
subscribe topic-2
Sending SUBSCRIBE (d0, m2) [(b'topic-2', 0)]
unsubscribe topic-1
Sending UNSUBSCRIBE (d0, m3) [b'topic-1']
Received CONNACK (0, 0)
CONNECTED
Received SUBACK
SUBSCRIBED
Received SUBACK
SUBSCRIBED
Received UNSUBACK (Mid: 3)
UNSUBSCRIBED
^C
interrupt
attempt unsubscribe
Sending UNSUBSCRIBE (d0, m4) [b'topic-2']
wait
attempt disconnect
Sending DISCONNECT
DISCONNECTED
done

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MTY4ODMyMQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/561,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MjAxMTAzMg==,paho.mqtt.python,862011032,561,NA,dachshund-digital,1486285,,,NA,2021-06-16T03:33:57Z,2021-06-16T03:33:57Z,"Ok, posting this because it may help someone else, the bottom line is that I established a type of race condition.  The example code @ralight provided was a definite help, it confirmed that the the UNSUBACK was enabled for my given broker.  So the issue had to be in my code, somehow, somewhere.  What was happening was that the disconnect was faster than the unsubscribe UNSUBACK because I happen to be calling the explicit unsubcribe for each topic as the disconnect was in progress, this blinded my script from receiving/seeing the UNSUBACK response.  So the botton-line is, if you want to do explicit un-subbing and see the results via the unsub callback, do it before any disconnect message is generated to the broker!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg2MjAxMTAzMg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/562,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/562,paho.mqtt.python,844295788,562,Connection refused when connecting,jogehl,25370601,,,CLOSED,2021-03-30T09:43:27Z,2021-03-31T17:21:35Z,"I use mosquitto broker in a docker container and a paho.mqtt.client in another docker container. The hostname could be resolved but the connection is refused. 

> Traceback (most recent call last):
server_1  |   File ""//main.py"", line 39, in <module>
server_1  |     mqtt_client.connect(str(mqtt_ipaddr), args.mqttport, keepalive=60)
server_1  |   File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 941, in connect
server_1  |     return self.reconnect()
server_1  |   File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 1075, in reconnect
server_1  |     sock = self._create_socket_connection()
server_1  |   File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 3546, in _create_socket_connection
server_1  |     return socket.create_connection(addr, source_address=source, timeout=self._keepalive)
server_1  |   File ""/usr/local/lib/python3.9/socket.py"", line 843, in create_connection
server_1  |     raise err
server_1  |   File ""/usr/local/lib/python3.9/socket.py"", line 831, in create_connection
server_1  |     sock.connect(sa)
server_1  | ConnectionRefusedError: [Errno 111] Connection refused
src_server_1 exited with code 1

This seams a bug in the client. Or could it be an error with the broker?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/562/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,paho.mqtt.python,851618534,563,"What is the ""proper"" way to respond to a socket timeout when sending PINGREQ?",BertKleewein,8028738,Bert Kleewein,,CLOSED,2021-04-06T16:57:12Z,2021-11-25T16:53:40Z,"I'm seeing a case where the underlying socket is raising a `TimeoutError` when sending a `PINGREQ`.  This is causing the `loop_forever` thread to crash.  If we call `publish` after this, it raises a `BrokenPipeError`.

2 questions:
1. How would we (as consumers of Paho) proactively detect this situation and recover?  If we can't detect this failure until we call `publish`, we loose the advantage of the keep_alive messages.
2. Should Paho be modified to handle this internally, maybe by wrapping the call to `_check_keepalive` in a try/except or maybe by wrapping the call to `_send_pingreq`?

(This is the root cause of https://github.com/Azure/azure-iot-sdk-python/issues/747)

-Bert

```
Mar 24 14:49:25  Traceback (most recent call last):
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/threading.py"", line 916, in _bootstrap_inner
Mar 24 14:49:25  self.run()
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/threading.py"", line 864, in run
Mar 24 14:49:25  self._target(*self._args, **self._kwargs)
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 3452, in _thread_main
Mar 24 14:49:25  self.loop_forever(retry_first_connection=True)
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
Mar 24 14:49:25  rc = self.loop(timeout, max_packets)
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1201, in loop
Mar 24 14:49:25  return self.loop_misc()
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 1628, in loop_misc
Mar 24 14:49:25  self._check_keepalive()
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2418, in _check_keepalive
Mar 24 14:49:25  self._send_pingreq()
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2460, in _send_pingreq
Mar 24 14:49:25  rc = self._send_simple_command(PINGREQ)
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2586, in _send_simple_command
Mar 24 14:49:25  return self._packet_queue(command, packet, 0, 0)
Mar 24 14:49:25  File ""/media/maps/slip/slip/common/usr/lib/python3.6/site-packages/paho/mqtt/client.py"", line 2911, in _packet_queue
Mar 24 14:49:25  self._sockpairW.send(sockpair_data)
Mar 24 14:49:25  TimeoutError: [Errno 110] Connection timed out
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTg5NDcyOA==,paho.mqtt.python,819894728,563,NA,ralight,79578,Roger Light,,NA,2021-04-14T22:38:47Z,2021-04-14T22:38:47Z,"It's interesting that it's the sockpair mechanism that is timing out. I'm just reading your linked bug and see you've come to the same conclusion. Regardless of the outcome of your bug, we should still try to prevent this type of error from killing the whole thread.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgxOTg5NDcyOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyMTMyNTE4MA==,paho.mqtt.python,821325180,563,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-04-16T17:25:37Z,2021-04-16T17:25:37Z,"@ralight - Unfortunately, the device is at a customer site on a different continent, so I can't reach it directly.  The customer has to jump through hoops to deploy code and still has to wait for the bug to reproduce.  We may not be able to find a root cause.

Regardless, I'll work on a PR  to protect this with a try/except. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyMTMyNTE4MA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wGy3,paho.mqtt.python,901803191,563,NA,stijn-devriendt,20041019,Stijn Devriendt,,NA,2021-08-19T10:34:53Z,2021-08-19T10:34:53Z,"We are seeing similar issues, although in a slightly different setting. In our case, we are using asyncio-mqtt as a wrapper around paho-mqtt.

asyncio-mqtt doesn't call `loop()`, instead it calls `loop_read()`, `loop_write()` and `loop_misc()` when needed. However, the read-handling of `sockpairR` is in `loop()`. As a result, the sockpairR is never serviced. After a while (we are sending a relatively high-volume through mqtt), the `sockpairW.send()` gives a timeout, followed by broken pipe. I believe this implies that the kernel buffer (both send-side and recv-side) fill up and no forward progress is made. At that point the timeout occurs and the connection is lost.

I think the handling of sockpairR is broken in the sense that publish triggers a write of a single byte and loop() only dequeue's a single byte, but there is no guarantee that:
- `loop()` is ever called (as with asyncio-mqtt)
- The number of MQTT packets written to the MQTT socket corresponds to the number of bytes dequeued from sockpairR.
  This happens when `loop_write()` writes more than 1 packets to the MQTT broker, while `loop()` only dequeues a single byte.
  In this case, the number of bytes in the sockpair slowly builds up.

As a hint towards a potential solution, I think that:
- `loop_write()` should perform handling of sockpairR
- either `sockpairR` should always have the entire backlog drained and `loop_write()` should write into sockpairW when messages are still pending when it returns
- or `sockpairR` is drained entirely when there are no pending packets when `loop_write()` returns

Optionally, the entire sockpair mechanism should be used only in threading mode, giving extra speedups in non-thread mode.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wGy3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410l1S,paho.mqtt.python,902978898,563,NA,ralight,79578,Roger Light,,NA,2021-08-20T21:59:42Z,2021-08-20T21:59:42Z,"I've made some changes that should fix this, if you're able to confirm whether it works for you I'd be grateful. The changes are in the `1.6.x` branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410l1S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs412xMz,paho.mqtt.python,903549747,563,NA,stijn-devriendt,20041019,Stijn Devriendt,,NA,2021-08-23T08:22:15Z,2021-08-23T08:22:15Z,"@ralight, I assume you're pointing at https://github.com/eclipse/paho.mqtt.python/commit/4910b785a49b989e150eb11e87f7ca5aad38992a? If so, that's not going to help.

Let me try to elaborate a bit more. The sockpair is a regular TCP/IP connection going over the loopback interface. This means the kernel will allocate memory for transmit and receive buffers. What paho does (when not using threaded mode and `loop()` is never called) is write the the socket but _never_ read from it.

This means those kernel-allocated read/write buffers will fill up. However, these buffers (obviously) have a fixed size. What happens in the kernel is that, when the receive buffer is full, the TCP window size will be advertised as 0 to the sending end of the socket. When that happens a timeout mechanism kicks in. If the receiving end does not make progress within a certain time, the socket is forcefully closed on the transmit side and the next send operation gets an ETIMEOUT error.

See [TCP_USER_TIMEOUT](https://man7.org/linux/man-pages/man7/tcp.7.html).

So catching the exception only won't help, it's likely it will never even be raised at all, since the above mechanism kicks in when the TCP receive buffer is full, but then there's still the entire TCP send buffer to fill up, 1 byte at a time, before a EWOULDBLOCK is returned. It's not unlikely that the connection is aborted by the kernel before the send buffer fills up too.

As a confirmation of my thesis above, I created a script (using our MQTT layer above asyncio-mqtt) to send messages to MQTT as fast as possible. Using the command `netstat -anp` one can see the send and receive queues for the sockpair connection:
```
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name     Timer
tcp        0  34442 127.0.0.1:39385         127.0.0.1:35532         ESTABLISHED 6801/python3.7       on (10,05/11/0)
tcp   5401554      0 127.0.0.1:35532         127.0.0.1:39385         ESTABLISHED 6801/python3.7       off (0.00/0/0)
```

At this point, the connection has sent >7M messages, but the recv-Q is full and the timeout has started to kick in.
In this example, the next probe will be sent in 10s and 11 of them have already been sent. Default settings, I believe, cause a connection abort after 15 probes.

Using `ss -tmp` one can see the socket memory in a bit more detail:
```
State       Recv-Q    Send-Q      Local Address:Port        Peer Address:Port   Process
ESTAB       0         34442           127.0.0.1:39385          127.0.0.1:35532   users:((""python3.7"",pid=6801,fd=8))
	 skmem:(r0,rb131072,t0,tb2626560,f1910,w2627722,o0,bl0,d0)
ESTAB       5401554   0               127.0.0.1:35532          127.0.0.1:39385   users:((""python3.7"",pid=6801,fd=7))
	 skmem:(r6291760,rb6291456,t0,tb2626560,f3792,w0,o0,bl0,d113)
```

Ultimately, this test took about 10M sent messages before stopping. The timeout mechanism started at around 5.4M messages.

As I also tried to explain above, this library is likely to also suffer from this issue, although at a lower rate, when threaded mode is used. From the looks of it, the recv/send operations aren't guaranteed to be balanced, so the same effect will play at an even slower pace.

Still, I think using netstat and ss, one should be able to easily detect this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs412xMz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs414ZMN,paho.mqtt.python,903975693,563,NA,ralight,79578,Roger Light,,NA,2021-08-23T17:37:52Z,2021-08-23T17:37:52Z,"@stijn-devriendt The commit in question is immediately after the one you highlight, but I had neglected to push it to the repository. I've done that now, sorry for the confusion.

Thanks very much for the extra information. I understood the principle, but hadn't been able to trigger it - I simply hadn't sent enough messages. Having expected numbers really helps.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs414ZMN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416GHk,paho.mqtt.python,904421860,563,NA,stijn-devriendt,20041019,Stijn Devriendt,,NA,2021-08-24T08:11:12Z,2021-08-24T08:11:12Z,"@ralight That one looks good. I had a quick run and (obviously) there's no more sockpair in our use-case. Our other tests also succeed with this version. I'm now running the original test I had written for my previous comment on this thread, but I don't really expect any hiccups. Currently at 4M messages... As an added bonus, I think it's not unlikely that this is a slight performance improvement too, not having to perform extra reads or writes.

Just as an informational query, when is there a release planned on the 1.6.x branch? If that isn't on the table yet, we'll need to schedule work here to backport the patch ourselves for our own S/W. Either way works, no pressure ;)

Update: I just stopped the test at >14M messages. Netstat output looks good (no backlog even on the MQTT socket itself).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416GHk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416Nzt,paho.mqtt.python,904453357,563,NA,ralight,79578,Roger Light,,NA,2021-08-24T08:52:21Z,2021-08-24T08:52:21Z,"@stijn-devriendt Great, thanks for the feedback.

I don't have a particular plan for the 1.6 release as yet. The Python client has languished unloved for a while, so there is a bit of a backlog of issues. I'd like to get that a bit more under control first. Now I'm thinking about it, perhaps a planned release date would be good. I'm going to say around the end of September. I wish it could be earlier, but I recognise this isn't my highest priority.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416Nzt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416Oi7,paho.mqtt.python,904456379,563,NA,stijn-devriendt,20041019,Stijn Devriendt,,NA,2021-08-24T08:56:48Z,2021-08-24T08:56:48Z,"(Updated my previous comment at the same time as your comment)

Great, I'll discuss internally if we'll wait or move ahead with a backported version. Thanks a lot for your help!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs416Oi7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46W2X_,paho.mqtt.python,979068415,563,NA,stijn-devriendt,20041019,Stijn Devriendt,,NA,2021-11-25T10:24:57Z,2021-11-25T10:24:57Z,I guess this one can be closed as 1.6 has been released?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46W2X_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/563,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46X9BO,paho.mqtt.python,979357774,563,NA,ralight,79578,Roger Light,,NA,2021-11-25T16:53:40Z,2021-11-25T16:53:40Z,I guess so :) Thanks very much.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46X9BO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/564,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/564,paho.mqtt.python,857454904,564,Is it possible to reduce the size of paho.mqtt module,zeinsteinz,4165293,,,CLOSED,2021-04-14T02:11:25Z,2021-04-20T07:26:56Z,"Hi, when I am using ""import paho.mqtt.client as mqtt"", I find the memory usage increased by around 70MB, which is too large for my hardware. Is there any method to reduce it?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/564/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/565,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/565,paho.mqtt.python,860533332,565,Response Topic Support,mike-sandstrom,45952852,,,CLOSED,2021-04-17T23:15:30Z,2024-01-07T02:04:48Z,"Hello, 

When running dir(message) after receiving a message in an mqtt client, I can see `properties` is one of the options returned. When running dir(message.properties) i receive `AttributeError: properties`. I am trying to implement a response Topic from the sending client--which uses the mqtt.js library in the browser. I havent seen much in terms of documentation on this aside from `http://www.steves-internet-guide.com/mqttv5-request-response/`, he has a link to download code that demonstrates a responseTopic implementation. Any info on this will be appreciated, if there is no support for this what are the next steps to take to achieve this feature? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/565/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/565,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uVRB,paho.mqtt.python,884560961,565,NA,ralight,79578,Roger Light,,NA,2021-07-21T23:25:48Z,2021-07-21T23:25:48Z,"message.properties isn't set for MQTT v3.1.1 or earlier connections. I would suggest setting `protocol=5` in your client creation call, i.e. `client = paho.Client(protocol=5, ...)`.

There is an example that uses response topics here: https://github.com/eclipse/paho.mqtt.python/blob/master/examples/server_rpc_math.py","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uVRB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/565,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTWW,paho.mqtt.python,1879913878,565,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T02:04:48Z,2024-01-07T02:04:48Z,Closing this as it's been flagged completed for a few years.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTWW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566,paho.mqtt.python,863050948,566,Assertion error on CONACK,Siecje,4069476,Cody Scott,,CLOSED,2021-04-20T17:26:56Z,2021-07-22T21:53:05Z,"```
    client = mqtt.Client(client_id=MQTT_CLIENT_ID, protocol=5)
    # Assign event callbacks
    client.on_connect = on_connect
    client.on_publish = on_publish
    client.on_subscribe = on_subscribe
    client.on_log = on_log

    client.on_message = on_message

    client.username_pw_set(MQTT_USER, MQTT_PASS)

    # clean_start=False means this client (with the same client_id)
    # will get queued messages that it hasn't recevied yet
    client.connect(MQTT_HOST, MQTT_PORT, clean_start=False)

    # Continue the network loop, exit when an error occurs
    client.loop_forever()
```

```Python
AssertionError: null
  File ""runpy.py"", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File ""runpy.py"", line 87, in _run_code
    exec(code, run_globals)
  File ""__main__.py"", line 4, in <module>
    client.main()
  File ""msmqtt/client.py"", line 288, in main
    client.loop_forever()
  File ""paho/mqtt/client.py"", line 1779, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""paho/mqtt/client.py"", line 1181, in loop
    rc = self.loop_read(max_packets)
  File ""paho/mqtt/client.py"", line 1572, in loop_read
    rc = self._packet_read()
  File ""paho/mqtt/client.py"", line 2310, in _packet_read
    rc = self._packet_handle()
  File ""paho/mqtt/client.py"", line 2942, in _packet_handle
    return self._handle_connack()
  File ""paho/mqtt/client.py"", line 2980, in _handle_connack
    reason = ReasonCodes(CONNACK >> 4, identifier=result)
  File ""paho/mqtt/reasoncodes.py"", line 127, in __init__
    self.getName()  # check it's good
  File ""paho/mqtt/reasoncodes.py"", line 173, in getName
    return self.__getName__(self.packetType, self.value)
  File ""paho/mqtt/reasoncodes.py"", line 140, in __getName__
    assert len(namelist) == 1
```

The exception is from this line.
```Python
CONNACK = 0x20
result = 1
from paho.mqtt.client import ReasonCodes
reason = ReasonCodes(CONNACK >> 4, identifier=result)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uUty,paho.mqtt.python,884558706,566,NA,ralight,79578,Roger Light,,NA,2021-07-21T23:19:35Z,2021-07-21T23:19:35Z,"Setting result=1 and getting an assertion is consistent with what we'd expect - a reason code of 1 is not allowed on a CONNACK packet. Do you know what the server replied with to get the original assertion to fail? From what I can tell all of the cases are covered in the Paho code, so perhaps the server is sending out an unexpected value.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uUty/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40wlJ_,paho.mqtt.python,885150335,566,NA,Siecje,4069476,Cody Scott,,NA,2021-07-22T18:46:46Z,2021-07-22T18:46:46Z,"The server didn't support protocol version 5.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40wlJ_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/566,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w_y0,paho.mqtt.python,885259444,566,NA,ralight,79578,Roger Light,,NA,2021-07-22T21:53:00Z,2021-07-22T21:53:00Z,"Thanks, that was very helpful. I've now got some detection in place to deal with that case.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w_y0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/567,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/567,paho.mqtt.python,866470816,567,Protocol Error after rapid topic updates,orcunbaslak,12577988,Orçun Başlak,,CLOSED,2021-04-23T22:35:22Z,2021-04-24T08:37:39Z,"Hello,

I'm using the following versions
paho-mqtt 1.5.1
mosquitto 2.0.10

My mosquitto config is as follows.
mosquitto.conf
```pid_file /run/mosquitto/mosquitto.pid

persistence true
persistence_location /var/lib/mosquitto/
set_tcp_nodelay true
per_listener_settings true

log_dest file /var/log/mosquitto/mosquitto.log
log_type all

include_dir /etc/mosquitto/conf.d
```
my other conf
```user root

listener 1883
allow_anonymous false
password_file /etc/mosquitto/passwd

listener 9887
allow_anonymous false
password_file /etc/mosquitto/passwd
certfile /etc/letsencrypt/live/xxx/cert.pem
cafile /etc/letsencrypt/live/xxx/chain.pem
keyfile /etc/letsencrypt/live/xxx/privkey.pem
```

TLS is working as intended and everything is operation via different tools however I have the following python code
```       if server['enabled']:
            try:
                #Publish the message
                #client_name = str(device_serial)
                mqtt_client= mqtt.Client(clean_session=True)
                mqtt_client.username_pw_set(server['username'], password=server['password'])     
                mqtt_client.tls_set_context(ssl.SSLContext(ssl.PROTOCOL_TLSv1_2))                  
                mqtt_client.connect(server['ip_address'],server['port'])
                #time.sleep(1)
                for data in data_package:
                    #time.sleep(1)
                    topic = server['topic']+""/""+data['Device_Name']
                    ret = mqtt_client.publish(topic, str(json.dumps(data)))
                    if (ret.is_published()):
                        log.debug(""MQTT Message Published"")
                    else:
                        log.error(""MQTT Publish Error!"")

                mqtt_client.disconnect()             

            except Exception as e:
                log.error(""Exception while sending MQTT message:""+str(e))
```

The issue is; If I uncomment the time.sleep lines; It gets stucks after sending the update and throws the following error.
```1619217186: New client connected from XXX.XXX.XXX.XXX:54441 as f554cb27 (p2, c1, k60, u'solarian').
1619217186: No will message specified.
1619217186: Sending CONNACK to f554cb27 (0, 0)
1619217189: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR1_INV1', ... (6274 bytes))
1619217189: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR1_INV1', ... (6274 bytes))
1619217190: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR1_INV2', ... (6272 bytes))
1619217190: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR1_INV2', ... (6272 bytes))
1619217191: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR2_INV1', ... (6271 bytes))
1619217191: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR2_INV1', ... (6271 bytes))
1619217192: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR2_INV2', ... (6270 bytes))
1619217192: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR2_INV2', ... (6270 bytes))
1619217193: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR4_INV1', ... (6272 bytes))
1619217193: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR4_INV1', ... (6272 bytes))
1619217194: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR4_INV2', ... (6270 bytes))
1619217194: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR4_INV2', ... (6270 bytes))
1619217195: Received PUBLISH from f554cb27 (d0, q0, r0, m0, 'van_arisu/TR10_INV1', ... (6273 bytes))
1619217195: Sending PUBLISH to SolarianParser (d0, q0, r0, m0, 'van_arisu/TR10_INV1', ... (6273 bytes))
1619217195: Client f554cb27 disconnected: Protocol error.
```

I was unable to handle the protocol error. Only fix I came up with time.sleep(1) but it still gives error somewhere. How can this be fixed?

Any options?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/567/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/567,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNTk3ODc1Nw==,paho.mqtt.python,825978757,567,NA,orcunbaslak,12577988,Orçun Başlak,,NA,2021-04-23T22:43:17Z,2021-04-23T22:43:17Z,"Tried removing the Client_id just incase they are colliding but still the same.
```1619217616: Client auto-8A581CD1-167F-25D7-E530-B72B4CDB2999 disconnected: Protocol error.
1619217662: New connection from XXX:34745 on port 9887.
1619217662: New client connected from XXX:34745 as auto-7FE2AC70-0C78-D34C-054C-30BDBC1975B7 (p2, c1, k60, u'solarian').
1619217662: No will message specified.
1619217662: Sending CONNACK to auto-7FE2AC70-0C78-D34C-054C-30BDBC1975B7 (0, 0)
1619217662: New connection from XXX:47273 on port 9887.
1619217662: New client connected from XXX:47273 as auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 (p2, c1, k60, u'solarian').
1619217662: No will message specified.
1619217662: Sending CONNACK to auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 (0, 0)
1619217665: Received PUBLISH from auto-7FE2AC70-0C78-D34C-054C-30BDBC1975B7 (d0, q0, r0, m0, 'van_arisu/EKK_154kV', ... (477 bytes))
1619217665: Received PUBLISH from auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 (d0, q0, r0, m0, 'van_arisu/GES1_IrradiationSensor_1', ... (146 bytes))
1619217666: New connection from XXX:40909 on port 9887.
1619217666: New client connected from XXX:40909 as auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (p2, c1, k60, u'solarian').
1619217666: No will message specified.
1619217666: Sending CONNACK to auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (0, 0)
1619217667: Client auto-7FE2AC70-0C78-D34C-054C-30BDBC1975B7 disconnected: Protocol error.
1619217667: Received PUBLISH from auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 (d0, q0, r0, m0, 'van_arisu/GES1_IrradiationSensor_2', ... (146 bytes))
1619217669: Received PUBLISH from auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 (d0, q0, r0, m0, 'van_arisu/GES1_Meteorology', ... (284 bytes))
1619217669: Client auto-3D14EC6E-B3C2-FAE8-75F2-17D6BE4718D1 disconnected: Protocol error.
1619217669: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR1_INV1', ... (6273 bytes))
1619217671: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR1_INV2', ... (6272 bytes))
1619217673: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR2_INV1', ... (6271 bytes))
1619217675: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR2_INV2', ... (6271 bytes))
1619217677: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR4_INV1', ... (6272 bytes))
1619217679: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR4_INV2', ... (6270 bytes))
1619217681: Received PUBLISH from auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 (d0, q0, r0, m0, 'van_arisu/TR10_INV1', ... (6273 bytes))
1619217683: Client auto-0B45F4C9-84EA-7969-066C-F0CF3EF13294 disconnected: Protocol error.
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNTk3ODc1Nw==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/567,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNjA1ODQyOQ==,paho.mqtt.python,826058429,567,NA,orcunbaslak,12577988,Orçun Başlak,,NA,2021-04-24T08:36:51Z,2021-04-24T08:36:51Z,"I fixed it. I used the ""multiple"" method and things now work as expected.
```
    for server in servers:
        if server['enabled']:
            try:
                #Create the iterable data package
                mqtt_payload = []
                for data in data_package:
                    payload = defaultdict(dict)
                    payload['topic'] = server['topic']+""/""+data['Device_Name']
                    payload['payload'] = json.dumps(data)
                    mqtt_payload.append(copy.deepcopy(payload))
                
                auth_items = defaultdict(dict)
                auth_items['username']= server['username']
                auth_items['password'] = server['password']

                multiple(mqtt_payload,
                        hostname=server['ip_address'],
                        port=server['port'],
                        auth=auth_items,
                        tls=ssl.SSLContext(ssl.PROTOCOL_TLSv1_2))        

            except Exception as e:
                log.error(""Exception while sending MQTT message:""+str(e))
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDgyNjA1ODQyOQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/570,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/570,paho.mqtt.python,888882904,570,Wrong on_disconnect() being called for an MQTT v5 connection,fpagliughi,4303121,Frank Pagliughi,,CLOSED,2021-05-11T22:16:03Z,2021-07-22T08:56:54Z,"I have an MQTT v5 connection to Mosquitto, which I am trying to shut down cleanly as I exit the program, by calling `disconnect()` on the client. 

I registered a callback for the disconnect as a member of a class, using the form:

```
    def _on_disconnect(self, cli, _userdata, rc, props):
        log.warning(""MQTT client '%s' disconnected."", self.name)
```

But it crashes out, as it seems to be calling the v3 version of the callback:

```
Caught exception in on_disconnect: _on_disconnect() missing 1 required positional argument: 'props'
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python3.8/threading.py"", line 932, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.8/threading.py"", line 870, in run
    self._target(*self._args, **self._kwargs)
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 3452, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1197, in loop
    rc = self.loop_write(max_packets)
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1598, in loop_write
    rc = self._packet_write()
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 2374, in _packet_write
    self._do_on_disconnect(0)
  File ""/home/fmp/.local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 3360, in _do_on_disconnect
    self.on_disconnect(self, self._userdata, rc)
TypeError: _on_disconnect() missing 1 required positional argument: 'props'
```

Am I doing something dumb here?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/570/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/570,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uSDj,paho.mqtt.python,884547811,570,NA,ralight,79578,Roger Light,,NA,2021-07-21T22:51:45Z,2021-07-21T22:51:45Z,"Thanks Frank, you're not doing anything dumb - there was an incorrect check. I've fixed that in the `develop` branch if you fancy testing out the fix.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uSDj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571,paho.mqtt.python,892270369,571,Unable to receive large payload messages with TLS (80MB+),umorelli,32385672,Umberto Morelli,,CLOSED,2021-05-14T21:52:56Z,2021-07-22T21:53:58Z,"Hello,

While investigating possible DoS attacks in the context of MQTT, I noticed that the Paho client is unable to receive large payload messages if adopting TLS (1.2 or 1.3, with MQTT v.3.1.1 or v.5): it will use 100% of one CPU core and keeps reconnecting (and attempting the receiving of the message in loop in case of a persistent session).

Using a Raspberry PI 3 model B+, I can only receive a message of ~80MB (~450s to receive it) if the broker is Mosquitto; ~70MB in the case of VerneMQ (~350s to receive it). If not using TLS or using _mosquitto_sub_, the Raspberry can receive a 255MB message without issues in ~24s.
On a regular PC (Intel E3-1240 @3.40GHz), the same behaviour happens if the payload is >=100MB.

I am using paho-mqtt 1.5.1. To reproduce:

Create a large file and publish it (createFile.py uploaded [here](https://github.com/eclipse/paho.mqtt.python/files/6481190/createFile.txt)) with:
```
python3 createFile.py -s 100
mosquitto_pub -h <host> -q 1 -p 1883 -t messages -f 100MB_file
```
Example Paho receiver uploaded [here](https://github.com/eclipse/paho.mqtt.python/files/6481242/Tester_receiver.txt). It uses port 8002 for unilateral TLS, 8003 for mutual; expects ca.crt, client.crt and client.key in a relative `cert/` folder;  and runs with:
```
python3 Tester_receiver.py -p 8002 
python3 Tester_receiver.py -p 8002 -v 5
```
_mosquitto_sub_ can be run with  `mosquitto_sub -h <host> -p 8002 -q 1 --cafile certs/ca.crt --cert certs/client.crt --key certs/client.key -t messages -F %t`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uaiU,paho.mqtt.python,884582548,571,NA,ralight,79578,Roger Light,,NA,2021-07-22T00:29:54Z,2021-07-22T00:29:54Z,"Thanks for the report. There are a couple of things in play here. The big one is that Python has a non-optimal way of working with reading SSL sockets as summarised in this issue: https://bugs.python.org/issue37355 It looks like this will be fixed for Python 3.11 in October 2022. 

That's a long time to wait, so I've also added a change that means the slow SSL reads won't cause anything to time out in the rest of the client. It doesn't help the speed, that'll have to wait for the above fix.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uaiU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ucsP,paho.mqtt.python,884591375,571,NA,ralight,79578,Roger Light,,NA,2021-07-22T00:57:06Z,2021-07-22T00:57:06Z,"Ok, scrap that I've found the real answer. The incoming data was inadvertently being appended to a bytes() object, which is immutable and hence slooow. Changing to a bytearray() and it's much much faster. I just received a 1000MB file in about 4 seconds, over loopback.

If you'd like to give it a try, please check out the `1.6.x` branch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ucsP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/571,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w_56,paho.mqtt.python,885259898,571,NA,ralight,79578,Roger Light,,NA,2021-07-22T21:53:58Z,2021-07-22T21:53:58Z,"Closing because I believe this is fixed and I'm trying hard to get on top of the backlog. If you don't think it's closed, please feel free to reopen.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40w_56/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/573,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/573,paho.mqtt.python,897004023,573,after reconnection subscriber does not getting messages,mainulquraishi,14335238,,,CLOSED,2021-05-20T15:43:07Z,2021-05-20T16:05:12Z,"If the publisher does not send any message for some time, the subscriber gets disconnected but also gets re-connected again (since loop_forever automatically handles reconnection). But after reconnection, if the producer starts to send data again, the auto-reconnected server does not get any messages. In that case, the subscriber needs to start again (manually reconnection) 

My Subscriber

```
import paho.mqtt.client as mqttClient
import json
import datetime

def on_connect(client, userdata, flags, rc):

    if rc == 0:
        print(""Connected to broker"")

    else:
        print(""Connection failed"")

def on_disconnect(client, userdata, rc):
    if rc != 0:
        print(""Unexpected MQTT disconnection. Will auto-reconnect"")
    

def on_message(client, userdata, message):
    print(str(datetime.datetime.now())+str(message.payload) + ""\n"")


#broker_address= ""3.121.233.176"" 
broker_address= ""address_of_the_broker"" 
port = 1883                     
client = mqttClient.Client(""clientLB1"")               #create new instance
client.on_connect= on_connect                      #attach function to callback
client.on_message= on_message                      #attach function to callback
client.on_disconnect = on_disconnect
client.connect(broker_address,port,60)
client.subscribe(""xdk1"") #subscribe
client.loop_forever() #then keep listening forever
 
```

My Publisher:
```
import paho.mqtt.client as paho
import time
from random import random

def on_publish(client, userdata, mid):
    print(""mid: ""+str(mid))
 
client = paho.Client()
client.on_publish = on_publish
#client.connect(""35.157.39.224"", 1883)
client.connect(""LBmqtt-1826452731.eu-central-1.elb.amazonaws.com"", 1883)
client.loop_start()

while True:
    temperature = random()
    (rc, mid) = client.publish(""xdk1"", str(temperature), qos=1)
    time.sleep(.1)



```

How to solve this problem?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/573/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/573,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NTI1MDAwOA==,paho.mqtt.python,845250008,573,NA,mainulquraishi,14335238,,,NA,2021-05-20T16:05:12Z,2021-05-20T16:05:12Z,solved it by `clean_session=False`,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg0NTI1MDAwOA==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,paho.mqtt.python,902351529,574,[Errno 104] Connection reset by peer,vitalerter,71344988,,,CLOSED,2021-05-26T12:57:02Z,2024-01-07T16:38:50Z,"Hi, the library return error :
on linux: **failed to receive on socket: [Errno 104] Connection reset by peer**
on windows: **failed to receive on socket: [WinError 10054] An existing connection was forcibly closed by the remote host**

extra information:

using with asycnio 
paho-mqtt   1.5.1
broker is Rabbitmq 

`""extra"": {
      ""interpreter"": ""/usr/local/bin/python"",
      ""interpreter_version"": ""3.8.2"",
      ""func_name"": ""_easy_log"",
      ""process_name"": ""MainProcess"",
      ""thread_name"": ""MainThread"",
      ""logger_name"": ""mqtt"",
      ""path"": ""/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py"",
      ""logstash_async_version"": ""2.2.0"",
      ""line"": 2404`


Any idea?
Thanks.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ze6p,paho.mqtt.python,885911209,574,NA,ralight,79578,Roger Light,,NA,2021-07-23T21:00:48Z,2021-07-23T21:00:48Z,Have you got a minimal code example that shows the behaviour you are seeing?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40ze6p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs401dVq,paho.mqtt.python,886429034,574,NA,vitalerter,71344988,,,NA,2021-07-26T06:55:38Z,2021-07-26T06:55:38Z,"I just connect to rabbitmq broker and send message with qos1 every 1 s and receive from 5 topics every 10 ms.
i used asyncio example ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs401dVq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs402H_y,paho.mqtt.python,886603762,574,NA,ralight,79578,Roger Light,,NA,2021-07-26T11:07:26Z,2021-07-26T11:07:26Z,"I've tried to reproduce this with rabbitmq 3.8.9 using the loop_asyncio.py example modified to subscibe to the `#` topic at qos 1, and a separate publish example that published on 5 topics every 10ms. It all worked fine for me, so I'm afraid I don't know what to try next.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs402H_y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/574,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wECth,paho.mqtt.python,1880107873,574,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T16:38:50Z,2024-01-07T16:38:50Z,Closed as we can't reproduce the issue. Feel free to reopen if you have more information to reproduce the issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wECth/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,paho.mqtt.python,916285628,575,publish/subscribe helper functions break with MQTTv5,briggySmalls,11054133,briggySmalls,,CLOSED,2021-06-09T14:41:34Z,2021-07-22T10:33:15Z,"# Description

Hello, thanks for this great library. I'd like to report what I believe is a bug.

We are using the MQTTv5 protocol, and recently I attempted to use the synchronous helper functions (in the `paho.mqtt.publish` and `paho.mqtt.subscribe` modules) instead of the asynchronous client (`paho.mqtt.client`).

I found that this would not work using the MQTTv5 protocol version.

#  Steps to reproduce

```
# Start a broker
docker run -d -p 1883:1883 eclipse-mosquitto
# Attempt to send a message
python -c ""from paho.mqtt.publish import single; from paho.mqtt.client import MQTTv5; single('test', protocol=MQTTv5)""
```

The following error exhibits:
```
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/publish.py"", line 231, in single
    multiple([msg], hostname, port, client_id, keepalive, will, auth, tls,
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/publish.py"", line 168, in multiple
    client.loop_forever()
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
    rc = self.loop(timeout, max_packets)
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1181, in loop
    rc = self.loop_read(max_packets)
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1572, in loop_read
    rc = self._packet_read()
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 2310, in _packet_read
    rc = self._packet_handle()
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 2942, in _packet_handle
    return self._handle_connack()
  File ""/Users/sambriggs/Library/Caches/pypoetry/virtualenvs/e2e-2ZKQCMVw-py3.8/lib/python3.8/site-packages/paho/mqtt/client.py"", line 3026, in _handle_connack
    self.on_connect(self, self._userdata,
TypeError: _on_connect() takes 4 positional arguments but 5 were given
```

## Thoughts

Perhaps MQTTv5 was never intended to be supported? In which case I'd suggest a guard against this valid protocol version being supplied, avoiding this cryptic error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg1ODkwNTMyNg==,paho.mqtt.python,858905326,575,NA,samba,57386,Sam Briesemeister,sam.briesemeister@gmail.com,NA,2021-06-10T18:49:44Z,2021-06-10T18:49:44Z,"+1 for this. This is because when using MQTTv5, the [_on_connect call is also passed the properties object](https://github.com/eclipse/paho.mqtt.python/blob/225ab3757f6818ba85eb80564948d1c787190cba/src/paho/mqtt/client.py#L3025). 

I ran into the same problem using the client class implementation, like so:

```
class MyClientWrapper:
    def prepare_client(self):
        _client = mqtt.Client(client_id=self._clientid, protocol=mqtt.MQTTv5)
        props = mqtt.Properties(PacketTypes.CONNECT)

        props.RequestResponseInformation = self.RequestResponseInformation

        _client.on_connect = self.on_connect()
       #  <snip...>

        logger.info(""Attempting connection: %s:%d"", self._hostname, self._port)
        _client.connect(self._hostname, self._port, properties=props)

        return _client

    def run(self, forever=True):
        _client = self.prepare_client()
        if forever:
            _client.loop_forever()

    def on_connect(self):
        def _connect(client: mqtt.Client, userdata, flags, rc, props=None):
            # XXX: the `props` argument is ONLY passed when using MQTTv5.
            logger.info(""Connected to %s"", client._host)
            _subs = [(topic, qos) for (topic, qos, _) in self._callbacks]
            client.subscribe(_subs)

        return _connect

```

In effect the documentation is incomplete, and the documented interface for `on_connect` *and other handlers* is broken, because additional (undocumented) arguments are passed only in the MQTTv5 configuration. 

As a user of your library, I had to dig into its code to understand this. Therefore, as a library that should abstract these things, and I as a developer should not have to understand its inner workings, the documentation is not meeting its target. The documentation quality needs improvement.

Normally I'd be happy to contribute to docs, but just now I don't have spare time to do so.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg1ODkwNTMyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uRlm,paho.mqtt.python,884545894,575,NA,ralight,79578,Roger Light,,NA,2021-07-21T22:46:04Z,2021-07-21T22:46:04Z,"@briggySmalls I've added basic support now, so this doesn't raise an exception any more. You can't set properties, but you can recieve them.

@samba The on_connect documentation states:

```
        Expected signature for MQTT v3.1 and v3.1.1 is:
            connect_callback(client, userdata, flags, rc)

        and for MQTT v5.0:
            connect_callback(client, userdata, flags, reasonCode, properties)
```

Sorry that you missed that. I can see why it could happen - there was callback documentation in two places. I've removed some of the duplicate documentation so anybody reading up on callbacks will see that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uRlm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uVRy,paho.mqtt.python,884561010,575,NA,briggySmalls,11054133,briggySmalls,,NA,2021-07-21T23:25:55Z,2021-07-21T23:25:55Z,"Thanks @ralight, that’s definitely an improvement. Appreciate you responding to this issue","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uVRy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40u4XP,paho.mqtt.python,884704719,575,NA,briggySmalls,11054133,briggySmalls,,NA,2021-07-22T07:18:02Z,2021-07-22T07:18:02Z,"Looking at you commit I notice two things:

- my MR #577 added helper tests to the `tests` directory which should perhaps be removed now I see all the action is in `test/lib`
- perhaps a note in the documentation stating the limitations of the helpers for v5 (cannot set properties) would be useful for users","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40u4XP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/575,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vSjm,paho.mqtt.python,884812006,575,NA,ralight,79578,Roger Light,,NA,2021-07-22T10:33:15Z,2021-07-22T10:33:15Z,@briggySmalls Done!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40vSjm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/579,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/579,paho.mqtt.python,926911783,579,How do I set the maximum length of the rabbimtq queue?,lwlwudi,39557560,123,,CLOSED,2021-06-22T07:16:24Z,2021-07-21T20:46:19Z,"Message TTL  \| Auto expire  \| Max length  \| Max length bytes  \| Overflow behaviour Dead letter exchange  \| Dead letter routing key  \| Maximum priority Lazy mode  Master locator



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/579/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/579,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uDfG,paho.mqtt.python,884488134,579,NA,ralight,79578,Roger Light,,NA,2021-07-21T20:46:19Z,2021-07-21T20:46:19Z,"Sorry, this project isn't anything to do with RabbitMQ.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uDfG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/580,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/580,paho.mqtt.python,932725072,580,"Is there a way for the publish, subscribe or unsubscribe callbacks to know 'which' instance they are?",dachshund-digital,1486285,,,CLOSED,2021-06-29T14:07:52Z,2021-07-12T15:06:59Z,"Is there a way for the publish, subscribe or unsubscribe callbacks to know 'which' instance they are?

If I subscribe topic ""1"", can on_subscribe callback know they are processing ""1"" topic?
If I unsubscribe topic ""1"", can on_unsubscribe callback know they are processing ""1"" topic?
If I publish topic ""1"", can on_publish callback know they are processing ""1"" topic?

The given topic does not seem to be visible to the callbacks?  Can this be added?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/580/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/580,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzIxMjY0Ng==,paho.mqtt.python,877212646,580,NA,ralight,79578,Roger Light,,NA,2021-07-09T14:02:37Z,2021-07-09T14:02:37Z,"They will be processed in exactly the order in which they are sent out, so if you need to know this you can keep track yourself. MQTT doesn't tell you what the subscription was when it acknowledges the subscription request.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3NzIxMjY0Ng==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/580,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3ODM1NjcyNg==,paho.mqtt.python,878356726,580,NA,dachshund-digital,1486285,,,NA,2021-07-12T15:06:53Z,2021-07-12T15:06:53Z,"So no 'native way' but if it is FIFO (First In, First Out) I can use a queue or array to track which is which via assignment of index on order received.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg3ODM1NjcyNg==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/585,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/585,paho.mqtt.python,944684580,585,Received payload is corrupted depending on message properties,sammck,7035152,Sam McKelvie,dev@mckelvie.org,CLOSED,2021-07-14T18:21:47Z,2021-07-22T08:57:02Z,"I have noticed that received payloads are consistently corrupted with an extra byte at the front, when certain message properties are set on the publishing side. It seems to be related to the total length of the attached properties.  I have verified that the bug is on the receiving side rather than the sending side, because other MQTT clients subscribed to the topic do not see any problem with the received payloads.

I'm using the latest release in PyPI.

The following code demonstrates the problem:

```#!/usr/bin/env python3

import logging

from typing import List

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

import paho.mqtt.client as mqtt
from paho.mqtt.packettypes import PacketTypes
import uuid
import json
import sys

port = 1883

host = 'mqtt.eclipse.org'
username = None
password = None

id = str(uuid.uuid4())
req_topic = ""%s/req"" % id
resp_topic = ""%s/resp"" % id

payload: bytes = '{""value"": ""this is just a test request #0""}'.encode('utf-8')
n_received: int = 0

def on_connect(client: mqtt.Client, userdata, flags, rc: mqtt.ReasonCodes, properties: mqtt.Properties):
    logger.debug(""on_connect: Connected with result code %s"" % rc.getName())
    client.subscribe(req_topic)

def on_subscribe(client: mqtt.Client, userdata, mid, rc: List[mqtt.ReasonCodes], properties: mqtt.Properties):
    logger.debug(""on_subscribe: subcription acked with mid=%s, rc=%s"" % (mid, [x.getName() for x in rc]))
    client.publish(req_topic, payload=payload, qos=1)
    properties = mqtt.Properties(PacketTypes.PUBLISH)
    properties.ContentType = 'application/json'
    properties.ResponseTopic = resp_topic
    properties.CorrelationData = b'     0'
    properties.UserProperty = [('ts', '2021-07-14T07:09:40.365778Z'), ('start_ts', '2021-07-14T07:09:40.208527Z'), ('seq', '2')]
    client.publish(req_topic, payload=payload, qos=1, properties=properties)

def on_message(client: mqtt.Client, userdata, msg: mqtt.MQTTMessage):
    global n_received
    logger.info(""on_message %s: props=%s: [%s]"" % (msg.topic, str(msg.properties), str(msg.payload)))
    n_received += 1

    if repr(msg.payload) != repr(payload):
        logger.error(""Data Corruption! Received payload %s does not match published payload %s"" % (msg.payload, payload))

    if n_received == 2:
        client.disconnect()

client = mqtt.Client(protocol=mqtt.MQTTv5)
client.on_connect = on_connect
client.on_message = on_message
client.on_subscribe = on_subscribe
client.enable_logger()
if not username is None:
  client.username_pw_set(username, password=password)

logger.info('Connecting to MQTT broker at %s:%d' % (host, port))

client.connect(host, port=port)

client.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/585/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/585,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDEyMjc2OQ==,paho.mqtt.python,880122769,585,NA,sammck,7035152,Sam McKelvie,dev@mckelvie.org,NA,2021-07-14T18:38:52Z,2021-07-14T18:38:52Z,"Aha, this appears to be a duplicate of #541","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/MDEyOklzc3VlQ29tbWVudDg4MDEyMjc2OQ==/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/585,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uCz7,paho.mqtt.python,884485371,585,NA,ralight,79578,Roger Light,,NA,2021-07-21T20:41:23Z,2021-07-21T20:41:23Z,"Yes it is, but thank you for the report anyway!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40uCz7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/586,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/586,paho.mqtt.python,947130175,586,Subscription packet never acknowledged by broker if properties.SubscriptionIdentifier==[0],sammck,7035152,Sam McKelvie,dev@mckelvie.org,CLOSED,2021-07-18T22:30:14Z,2021-07-22T01:04:09Z,"I'm using the 1.6.x branch, which fixes another data corruption bug in PUBLISH when total property length > 128 bytes. I have not verified that this problem is also present in 1.5 release.

I've noticed that if I attach a SubscriptionIdentifier property to my subscribe request, everything works fine unless the value of the identifier is 0. If it is zero, the client claims to have sent the subscribe request. The MQTT broker (mosquitto) logs that it received a SUBSCRIBE but seems to indicate there are no requested topics), and never sends any SUBACK.  The client never receives SUBACK, on_subscribe is never called, and messages in the topic are not received. The client then immediately (before subscribe timeout) claims to have received DISCONNECT, and ends the connection.

My suspicion is that the SUBSCRIBE packet is corrupted at the sending side. I wonder if it might be related to the fact that SubscriptionIdentifier is encoded with ""Variable Byte Integer"" scheme, in which one might expect the value 0 to be a special edge case?

The following will demonstrate the problem:

```#!/usr/bin/env python3

import logging

from typing import List

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

import paho.mqtt.client as mqtt
from paho.mqtt.packettypes import PacketTypes
from paho.mqtt.properties import Properties

port = 1883

host = 'mqtt.eclipse.org'
username = None
password = None

def on_connect(client: mqtt.Client, userdata, flags, rc: mqtt.ReasonCodes, properties: mqtt.Properties):
    logger.debug(""on_connect: Connected with result code %s"" % rc.getName())
    props = Properties(PacketTypes.SUBSCRIBE)
    props.SubscriptionIdentifier=0
    # opts = SubscribeOptions(qos=2)
    client.subscribe(""paho-mqtt-bad-subscription-test/topic"", properties=props)

def on_subscribe(client: mqtt.Client, userdata, mid, rc: List[mqtt.ReasonCodes], properties: mqtt.Properties):
    logger.debug(""on_subscribe: subcription acked with mid=%s, rc=%s, properties=%s"" % (mid, [x.getName() for x in rc], str(properties)))
    client.disconnect()

client = mqtt.Client(protocol=mqtt.MQTTv5, client_id='paho-mqtt-bad-subscription-test')
client.on_connect = on_connect
client.on_subscribe = on_subscribe
client.enable_logger()
if not username is None:
  client.username_pw_set(username, password=password)

logger.info('Connecting to MQTT broker at %s:%d' % (host, port))

client.connect(host, port=port)

client.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/586/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/586,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40pVnG,paho.mqtt.python,883251654,586,NA,ralight,79578,Roger Light,,NA,2021-07-20T09:39:03Z,2021-07-20T09:39:03Z,"Your suspicion is correct - it's a problem at the sending side. If you look at the disconnect packet coming back when running your example you should see that it has the reason code ""malformed packet"". A subscription identifier of 0 is forbidden.

I've pushed a change which raises an exception if you try to set a forbidden value for properties. Thanks for the report!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40pVnG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/586,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40udLb,paho.mqtt.python,884593371,586,NA,ralight,79578,Roger Light,,NA,2021-07-22T01:04:08Z,2021-07-22T01:04:08Z,"This will be part of 1.6.0, I'm closing now to help tidy up the issue list.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40udLb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588,paho.mqtt.python,950765452,588,CA authentication,HDenied,35076965,simoneg,,CLOSED,2021-07-22T15:02:49Z,2021-07-23T20:58:14Z,"I am not sure if I understood this well,  when I read the docimentation related to ""tls_set"", for basic ca authentication it says:

""By default, on Python 2.7.9+ or 3.4+, the default certification authority of the system is used""

Does this mean that the client is picking up the certificates from the host machine communicating with the broker? I am asking this because I am running some tests with mosquitto running in a local docker container. The library doesn't seem to use the ca.crt file at all to verify the broker identity, I can just omit it and the client will be able to connect. Is this expected?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xDe-,paho.mqtt.python,885274558,588,NA,ralight,79578,Roger Light,,NA,2021-07-22T22:23:54Z,2021-07-22T22:23:54Z,It doesn't sound expected .Could you please provide some example code that demonstrates what you are seeing?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40xDe-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40x-0F,paho.mqtt.python,885517573,588,NA,HDenied,35076965,simoneg,,NA,2021-07-23T09:32:33Z,2021-07-23T09:32:33Z,"After further investigation I realised the certificate were generated without hostname, therefore the authentication needs to be insecure. I also tried to make broker authenitcation mandatory and use a wrong certificate and in that case it fails, when it is not mandatory even with the wrong certificate it works, which I guess is the correct behaviour. Sorry, false alarm, I apologise.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40x-0F/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/588,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40zenF,paho.mqtt.python,885909957,588,NA,ralight,79578,Roger Light,,NA,2021-07-23T20:57:36Z,2021-07-23T20:57:36Z,Ok! I'm glad you got it sorted.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs40zenF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,paho.mqtt.python,963300690,590,on_massage callbacks stop working,manusinh,32608918,Manojsinh,,CLOSED,2021-08-07T20:41:18Z,2024-01-07T07:14:18Z,"Hello Guys,
I have used two mqtt clients in same python script.
here I'm facing one issue is after some time the on_massage callbacks for both mqtt clients stop working.
i have ensured that mqtt connection is exist but the callbacks stop working .
How to solve it please help me.
Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VB5l,paho.mqtt.python,894705253,590,NA,ralight,79578,Roger Light,,NA,2021-08-07T20:48:01Z,2021-08-07T20:48:01Z,"Could you provide a small example that demonstrates what you are doing please? Please don't include your whole application, just enough to demonstrate the problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VB5l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VCnC,paho.mqtt.python,894708162,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-07T21:21:36Z,2021-08-07T21:21:36Z,"sure @ralight,

like,

like i have raspberry pi as a access point and other esp32 are connected with pi access point and mqtt broker which is running in pi.
now wrote python application to pass data coming from global broker topic to local broker topic .

so first i get data from global broker topic like on_massage global and that same massage pass to local broker topic
and vice versa.

global_server_name = ""50.18.230.127"" #this broker running in AWS EC2
local_server_name = ""192.168.11.1""   ##this broker running in pi

l_client = mqtt.Client()
g_client = mqtt.Client()

def on_connect_local():
      here publish data to global topics coming from local topics

def mqtt_init_global():
     here publish data to local topics coming from global topics


def mqtt_init_local():
    global l_client
    l_client.on_connect = on_connect_local
    l_client.on_message = on_message_local
    l_client.connect(local_server_name, 1883, 60)
    l_client.loop_start()
    
def mqtt_init_global():
    global g_client
    g_client.on_connect = on_connect_global
    g_client.on_message = on_message_global
    g_client.connect(global_server_name, 1883, 60)
    g_client.loop_start()


if __name__ == ""__main__"":
    mqtt_init_local()
    mqtt_init_global()
 
    thread= threading.Thread(None, scheduler_task)  #one thread for other task
    thread.start()
    ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VCnC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VCqK,paho.mqtt.python,894708362,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-07T21:23:52Z,2021-08-07T21:23:52Z,"![image](https://user-images.githubusercontent.com/32608918/128614167-9455656e-1541-4439-88bc-55b624d87426.png)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VCqK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VEr5,paho.mqtt.python,894716665,590,NA,ralight,79578,Roger Light,,NA,2021-08-07T23:09:46Z,2021-08-07T23:09:46Z,"I'm sorry but what I meant was a complete example. What you have there has
functions missing, so I can't run the example. This might sound like me
being picky, but it is exactly the details in those missing parts that may
be causing the problem. Without them I would have to guess what is
happening.

On Sat, 7 Aug 2021, 22:21 Manusinh Thakor, ***@***.***> wrote:

> sure @ralight <https://github.com/ralight>,
>
> like,
>
> like i have raspberry pi as a access point and other esp32 are connected
> with pi access point and mqtt broker which is running in pi.
> now wrote python application to pass data coming from global broker topic
> to local broker topic .
>
> so first i get data from global broker topic like on_massage global and
> that same massage pass to local broker topic
> and vice versa.
>
> global_server_name = ""50.18.230.127"" #this broker running in AWS EC2
> local_server_name = ""192.168.11.1"" ##this broker running in pi
>
> l_client = mqtt.Client()
> g_client = mqtt.Client()
>
> def on_connect_local():
> here publish data to global topics coming from local topics
>
> def mqtt_init_global():
> here publish data to local topics coming from global topics
>
> def mqtt_init_local():
> global l_client
> l_client.on_connect = on_connect_local
> l_client.on_message = on_message_local
> l_client.connect(local_server_name, 1883, 60)
> l_client.loop_start()
>
> def mqtt_init_global():
> global g_client
> g_client.on_connect = on_connect_global
> g_client.on_message = on_message_global
> g_client.connect(global_server_name, 1883, 60)
> g_client.loop_start()
>
> if *name* == ""*main*"":
> mqtt_init_local()
> mqtt_init_global()
>
> thread= threading.Thread(None, scheduler_task)  #one thread for other task
> thread.start()
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/paho.mqtt.python/issues/590#issuecomment-894708162>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAATNWVEUMATQELH56HTGP3T3WPWXANCNFSM5BXX3IMQ>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&utm_campaign=notification-email>
> .
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VEr5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VLnY,paho.mqtt.python,894745048,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-08T05:19:13Z,2021-08-08T05:19:13Z,"# -*- coding: utf-8 -*-
""""""
Created on Sun Aug  8 02:52:21 2021

@author: 91957
""""""
from datetime import datetime
import json
import requests
import time
import subprocess
from time import sleep
import os
import threading
import paho.mqtt.client as mqtt
import sys
import os

global_server_name = ""50.18.230.127"" #this broker running in AWS EC2
local_server_name = ""192.168.11.1"" ##this broker running in pi

l_client = mqtt.Client()
g_client = mqtt.Client()

t_esp_state_control_l = ""/manoj/local/topic""
t_esp_state_control_g = ""/manoj/global/topic""

def on_connect_local(client, userdata, flags, rc):
    print(""Local MQTT Connected with result code "" + str(rc))
    client.subscribe(t_esp_state_control_l)
    
# The callback for when the client receives a CONNACK response from the server.
def on_connect_global(client, userdata, flags, rc):
    print(""Global MQTT Connected with result code "" + str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    client.subscribe(t_esp_state_control_g)
    
# The callback for when a PUBLISH message is received from the server.
def on_message_local(client, userdata, msg):
    # local
    info = (msg.payload).decode(""utf-8"")
    print(""local - "" + msg.topic + "" "" + info)
    if (msg.topic == t_esp_state_control_l):
        g_client.publish(t_esp_state_control_g, info)
        print(""card scan published"")       
        
# The callback for when a PUBLISH message is received from the server.
def on_message_global(client, userdata, msg):
    # global
    info = (msg.payload).decode(""utf-8"")
    print(""global - "" + msg.topic + "" "" + info)
    if (msg.topic == t_esp_state_control_l):
        l_client.publish(t_esp_state_control_g, info)
        print(""published"")
        
def mqtt_init_local():
    global l_client
    l_client.on_connect = on_connect_local
    l_client.on_message = on_message_local
    l_client.connect(local_server_name, 1883, 60)
    l_client.loop_start()

def mqtt_init_global():
    global g_client
    g_client.on_connect = on_connect_global
    g_client.on_message = on_message_global
    g_client.connect(global_server_name, 1883, 60)
    g_client.loop_start()

def scheduler_task():
    print(""Schedular running"")
    
if __name__ == ""__main__"":
    mqtt_init_local()
    mqtt_init_global()
    
    thread= threading.Thread(None, scheduler_task)  #one thread for other task
    thread.start()
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VLnY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VLoD,paho.mqtt.python,894745091,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-08T05:19:59Z,2021-08-08T05:19:59Z,"[example.txt](https://github.com/eclipse/paho.mqtt.python/files/6950257/example.txt)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41VLoD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41auYD,paho.mqtt.python,896198147,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-10T18:00:23Z,2021-08-10T18:00:23Z,"anyone going to help me?please
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41auYD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mVp1,paho.mqtt.python,899242613,590,NA,ralight,79578,Roger Light,,NA,2021-08-16T05:54:46Z,2021-08-16T05:54:46Z,"```
def scheduler_task():
    print(""Schedular running"")

if __name__ == ""__main__"":
    mqtt_init_local()
    mqtt_init_global()

    thread= threading.Thread(None, scheduler_task)  #one thread for other task
    thread.start()
```

The problem is that the program exits immediately after calling `thread.start()`, so none of your callbacks will be called.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mVp1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mV2l,paho.mqtt.python,899243429,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-16T05:57:03Z,2021-08-16T05:57:03Z,"hi @ralight ,
actually callabacks are working for some time like 2,3 hours
but after that it stops.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mV2l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mV-S,paho.mqtt.python,899243922,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-16T05:58:20Z,2021-08-16T05:58:20Z,and the schedular task has while loop ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mV-S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mWZ2,paho.mqtt.python,899245686,590,NA,ralight,79578,Roger Light,,NA,2021-08-16T06:02:16Z,2021-08-16T06:02:16Z,"> and the schedular task has while loop

This is why I asked you for a complete example that demonstrates the problem! :) The example you provided cannot run for more than the time it takes to connect to the brokers. There is code missing in the scheduler task which may be what is causing the problem. Without a full example it is impossible to say what is happening. I appreciate that you are trying to make it easier to debug by removing excess code - that is exactly what you should be doing, but the end result must still show the problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mWZ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mXWK,paho.mqtt.python,899249546,590,NA,manusinh,32608918,Manojsinh,,NA,2021-08-16T06:10:01Z,2021-08-16T06:10:01Z,"okay @ralight ,
can you please help like
how I can ensure that callback is working or not
is there any way to keep monitoring in code itself so I can take action when the callbacks stops?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mXWK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mXzB,paho.mqtt.python,899251393,590,NA,ralight,79578,Roger Light,,NA,2021-08-16T06:13:56Z,2021-08-16T06:13:56Z,"I would suggest configuring logging for both of your clients, and perhaps checking that your payload decoding isn't raising an exception for the case that the payload isn't valid UTF-8.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41mXzB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XR2X7,paho.mqtt.python,1464296955,590,NA,ukoda,13553631,,,NA,2023-03-10T19:25:16Z,2023-03-10T19:25:16Z,"I realise this is an old thread but this may still be of interest to someone searching this problem.

I have been seeing the same problem after running a day or two.  As per @ralight 's suggestion I turned on logging and saw this:
```2023-03-11 02:01:06 - DEBUG - emamqtt - Received PUBLISH (d0, q0, r0, m0), 'ema/machine_room_heater/tele/SENSOR', ...  (36 bytes)
2023-03-11 02:01:46 - DEBUG - emamqtt - Sending PUBLISH (d0, q0, r0, m212), 'b'ema/machine_room_heater/cmnd/Power'', ... (3 bytes)
2023-03-11 02:02:27 - DEBUG - emamqtt - Sending PINGREQ
2023-03-11 02:02:27 - DEBUG - emamqtt - Received PUBLISH (d0, q0, r0, m0), 'ema/machine_room_heater/tele/STATE', ...  (45 bytes)
2023-03-11 02:02:27 - ERROR - emamqtt - failed to receive on socket: [Errno 32] Broken pipe
2023-03-11 02:02:28 - DEBUG - emamqtt - Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'emamqtt'
2023-03-11 02:02:28 - DEBUG - emamqtt - Received CONNACK (0, 0)
2023-03-11 02:03:28 - DEBUG - emamqtt - Sending PINGREQ
2023-03-11 02:03:28 - DEBUG - emamqtt - Received PINGRESP
2023-03-11 02:04:28 - DEBUG - emamqtt - Sending PINGREQ
2023-03-11 02:04:28 - DEBUG - emamqtt - Received PINGRESP
```
The key being the `failed to receive on socket: [Errno 32] Broken pipe`.  Since I am using `client.loop_start()` I can't see any way to use a `try except`.  I'm going to try working around it by detecting a lack of call backs to the `client.on_message = on_message` and re-calling the `client.subscribe()` functions if looks to have stopped.  It is likely to take a few days to see if this helps.

I can look at providing a stripped down version of my code here, or opening a fresh issue if it will help this project.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XR2X7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XUjQt,paho.mqtt.python,1465005101,590,NA,ukoda,13553631,,,NA,2023-03-11T20:14:26Z,2023-03-11T20:14:26Z,"An update.  The data did appear to stop coming in again, but with no Error 32 this time.  It is possible it was not Paho but Mosquitto.  However I suspect that is not the case.  Regardless my strategy of re-subscribing if incoming data appears to have stop seems to have work in this case.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XUjQt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YdDgi,paho.mqtt.python,1484011554,590,NA,ZuyThai,114822142,,,NA,2023-03-26T06:50:07Z,2023-03-26T06:50:07Z,"> Hello Guys, I have used two mqtt clients in same python script. here I'm facing one issue is after some time the on_massage callbacks for both mqtt clients stop working. i have ensured that mqtt connection is exist but the callbacks stop working . How to solve it please help me. Thanks

I have a similar problem, did you find a solution for this issue? Pls let me know, I need it for my last project at university.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YdDgi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YdEyb,paho.mqtt.python,1484016795,590,NA,ukoda,13553631,,,NA,2023-03-26T07:15:39Z,2023-03-26T07:15:39Z,"I worked around it by resubscribing if the message handler callback had not received anything for a while.  Probably not good solution for some, but in my case it has been an effective way to keep my system running smoothly.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YdEyb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/590,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDjLD,paho.mqtt.python,1879978691,590,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T07:14:18Z,2024-01-07T07:14:18Z,"The `c1` in `Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'emamqtt'` indicates that you are connecting with `CleanSession` = `true` (meaning that any existing subscriptions will be cleared). This is why the [docs](https://github.com/eclipse/paho.mqtt.python#getting-started) recommend subscribing in `on_connect` (you cannot assume that the connection will remain up forever).

I'm going to close this because the OP did not provide a minimal, reproducible, example and I believe the above answers the subsequent questions. If OP wants to reopen then please go ahead; if others have questions then please open a new issue (or, as this is more of a usability question, consider asking on stackoverflow as it's likely you will get an answer more quickly there).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDjLD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591,paho.mqtt.python,965195110,591,"Connect using proxy url like ""wss://app.company.com/mqtt""",ameenfarook,38003780,Ameen Farook,,OPEN,2021-08-10T17:48:53Z,2024-01-07T03:39:19Z,"How can we connect (only) using the proxy url like ""wss://app.company.com/mqtt"". We created a proxy url that points to mqtt broker for websocket listener from ingress on kubernetes. From **paho-javascript** library we are able to connect using a single fully qualified WebSocket URI like this ""wss://app.company.com/mqtt"" on the constructor. I am asking for the similar behaviour.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wKNb,paho.mqtt.python,901817179,591,NA,ameenfarook,38003780,Ameen Farook,,NA,2021-08-19T10:58:06Z,2021-08-19T10:58:06Z,Anybody have any comment on this issue ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs41wKNb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V3Xh,paho.mqtt.python,911701473,591,NA,ameenfarook,38003780,Ameen Farook,,NA,2021-09-02T13:45:29Z,2021-09-02T13:45:29Z,"""ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it""

This is the error i am seeing when i try to connect using proxy url.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V3Xh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/591,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDWnD,paho.mqtt.python,1879927235,591,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:39:19Z,2024-01-07T03:39:19Z,The library does not currently support URL's; it accepts a host & port (passed to connect) and a path (defaults to `/mqtt` but can be set with `ws_set_options`). There are no current plans to add URL support (Roger flagged this issue as an enhancement request so it's possible someone will look at adding URL support in the future).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDWnD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/595,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/595,paho.mqtt.python,975390198,595,The reason code and MQTTv5 properties for PUBACK/PUBREC/PUBREL/PUBCOMP are not available to the client code,eisaev,16664695,Evgeniy Isaev,,OPEN,2021-08-20T08:31:07Z,2023-01-18T14:43:27Z,"For [PUBACK, PUBCOMP](https://github.com/eclipse/paho.mqtt.python/blob/v1.5.1/src/paho/mqtt/client.py#L3401), [PUBREC](https://github.com/eclipse/paho.mqtt.python/blob/v1.5.1/src/paho/mqtt/client.py#L3297) the reason code and MQTTv5 properties are parsed, but not used in any way. For [PUBREL](https://github.com/eclipse/paho.mqtt.python/blob/v1.5.1/src/paho/mqtt/client.py#L3231) the reason code and MQTTv5 properties are not even parsed.
It would be good to have callbacks for these types of packets so that the client code can analyze the reason code and MQTTv5 properties. PUBACK and PUBCOMP already have `on_publish` callback, but it does not return the necessary data.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/595/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/595,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5SrsVY,paho.mqtt.python,1387185496,595,NA,MaSchaxx,79260822,,,NA,2023-01-18T14:43:26Z,2023-01-18T14:43:26Z,"This issue seems to have been solved in #656, but unfortunately it has still not been merged for over half a year now. It would be very helpful to see some new activities under this project.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5SrsVY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,paho.mqtt.python,975903286,596,Maybe feature request?  Implement __version__() method for Paho MQTT Python Client?,dachshund-digital,1486285,,,CLOSED,2021-08-20T20:32:08Z,2021-08-22T15:54:12Z,"Would be nice if client could be queried for version?  Or does such exist already?

I tried...

paho.mqtt.client.__version__, paho.mqtt.client.__version__()

And...
importlib.metadata import version
pkg_resources

Even pip show paho.mqtt.client did not show a version?  I did I miss something?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410hVR,paho.mqtt.python,902960465,596,NA,ralight,79578,Roger Light,,NA,2021-08-20T21:13:05Z,2021-08-20T21:13:05Z,"The versioning is done at the package level rather than the individual module level, so try

```
from paho.mqtt import __version__
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs410hVR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411Llt,paho.mqtt.python,903133549,596,NA,dachshund-digital,1486285,,,NA,2021-08-21T15:31:06Z,2021-08-21T15:31:06Z,"Cool... that gets a version... but not the version I was expecting.  I pulled the 1.6x branch, ran the install script...

    Installed /usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg
    Processing dependencies for paho-mqtt==1.6.0
    Finished processing dependencies for paho-mqtt==1.6.0

That appears right to me.  However when I query the version... my script reports...

    \# python3 __Test.py
    Version 1.5.0

So, I have something wrong somewhere?

Test without explicit script...

    \# python3
    Python 3.7.3 (default, Jan 22 2021, 20:04:44)
    [GCC 8.3.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> from paho.mqtt import __version__
    >>> __version__
    '1.5.0'
    >>>


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411Llt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MLl,paho.mqtt.python,903135973,596,NA,ralight,79578,Roger Light,,NA,2021-08-21T15:49:48Z,2021-08-21T15:49:48Z,Have you got 1.5.0 installed somewhere else?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MLl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MSt,paho.mqtt.python,903136429,596,NA,dachshund-digital,1486285,,,NA,2021-08-21T15:53:17Z,2021-08-21T15:53:17Z,"I should not, I don't do any customization of the prefix or paths...  I just checked the default path list and 1.6 is there...

> root@irrigation:~# python3
Python 3.7.3 (default, Jan 22 2021, 20:04:44)
[GCC 8.3.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import sys
>>> sys.prefix
'/usr'
>>> sys.path
['', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/usr/local/lib/python3.7/dist-packages', '/usr/local/lib/python3.7/dist-packages/luma.led_matrix-1.5.0-py3.7.egg', '/usr/local/lib/python3.7/dist-packages/luma.core-2.3.1-py3.7.egg', '/usr/local/lib/python3.7/dist-packages/spidev-3.5-py3.7-linux-armv6l.egg', '/usr/local/lib/python3.7/dist-packages/Deprecated-1.2.12-py3.7.egg', '/usr/local/lib/python3.7/dist-packages/wrapt-1.12.1-py3.7-linux-armv6l.egg', '/usr/local/lib/python3.7/dist-packages/pcf8574_io-0.1.1-py3.7.egg', '/root/vcgencmd', '/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg', '/usr/lib/python3/dist-packages']
>>>


(I so hate the formatting issues with this website!)  So not sure what to try next.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MSt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MjR,paho.mqtt.python,903137489,596,NA,dachshund-digital,1486285,,,NA,2021-08-21T16:01:23Z,2021-08-21T16:01:23Z,"I reinstalled from my local git branch directory... capture the file list...

/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/dependency_links.txt
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/requires.txt
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/SOURCES.txt
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/top_level.txt
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/not-zip-safe
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/EGG-INFO/PKG-INFO
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/__init__.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/__pycache__/__init__.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/reasoncodes.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/properties.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/publish.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/subscribeoptions.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/packettypes.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/subscribe.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/client.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/matcher.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__init__.py
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/reasoncodes.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/packettypes.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/subscribeoptions.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/matcher.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/__init__.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/publish.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/subscribe.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/client.cpython-37.pyc
/usr/local/lib/python3.7/dist-packages/paho_mqtt-1.6.0-py3.7.egg/paho/mqtt/__pycache__/properties.cpython-37.pyc

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411MjR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411N11,paho.mqtt.python,903142773,596,NA,ralight,79578,Roger Light,,NA,2021-08-21T16:42:21Z,2021-08-21T16:42:21Z,It works just fine for me. The previous version was 1.5.1 so for it to be reporting 1.5.0 is extremely unlikely.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411N11/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411OzS,paho.mqtt.python,903146706,596,NA,ralight,79578,Roger Light,,NA,2021-08-21T17:12:16Z,2021-08-21T17:12:16Z,"If 1.5.0 exists in an earlier path, it will be used by preference.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411OzS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411TCi,paho.mqtt.python,903164066,596,NA,dachshund-digital,1486285,,,NA,2021-08-21T19:18:51Z,2021-08-21T19:18:51Z,"Well, the question is how to do fix this?  It was 1.5.1... 1.5.0 was a typo.  As you can see from the path and installation, 1.6. should be found, and should be replacing 1.5.1.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411TCi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411VSK,paho.mqtt.python,903173258,596,NA,ralight,79578,Roger Light,,NA,2021-08-21T20:33:56Z,2021-08-21T20:33:56Z,"Try installing it in a virtualenv so you can be sure that you're installing the version you want only:

```
virtualenv <directory to store the virtualenv data>
source <directory to store the virtualenv data>/bin/activate
# Do installation and test now
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411VSK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411dZt,paho.mqtt.python,903206509,596,NA,dachshund-digital,1486285,,,NA,2021-08-22T03:08:56Z,2021-08-22T03:08:56Z,"Yeah, started doing that.  Loaded a new OS image (Raspberry Pi), and compiling Python 3.9.x, and will set up virtual environment then load only the modules needed for the given project.  This will include 1.6.x.  First time I have created a virtual environment for python.  But have 20+ years experience with VMware, KVM, Hyper-V, Docker, etc.  So should not be to crazy.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411dZt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/596,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411ufo,paho.mqtt.python,903276520,596,NA,dachshund-digital,1486285,,,NA,2021-08-22T14:20:43Z,2021-08-22T14:20:43Z,"Ok, got virtual environment setup, all the project modules, include explicitly 1.6.x in place.  Now for some scripting and testing.

(In Virtual Environment)...
    $ python3.9
    Python 3.9.6 (default, Aug 22 2021, 02:27:32)
    [GCC 8.3.0] on linux
    Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
    >>> from paho.mqtt import __version__
    >>> __version__
    '1.6.0'
    >>> quit()

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs411ufo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/597,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/597,paho.mqtt.python,977525332,597,disconnect() resets TCP connection before message actually delivered,krlf,17553922,,,CLOSED,2021-08-23T22:15:24Z,2021-08-23T22:37:41Z,"Hello,

If big message is sent (3M, for example) then calling of disconnect() sends RST flag and TCP connection closed despite of the fact the message was not actually delivered to a message broker.

wait_for_publish() passed and is_published() returned ""True""
and if QoS is used then is_published() returns ""False"" all the time.

The workaround for me was sleeping for second or so in main thread before disconnect() call.

Not sure if this is the issue of Paho.  Is there recommendation may be of when to call disconnect()? May be i did something wrong. Any help is very appreciated.

Thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/597/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,paho.mqtt.python,980075246,598,Connection stalled in multithreaded app with 1.6.x branch,cpoder,574710,Cyril PODER,cyril.poder@gmail.com,OPEN,2021-08-26T10:16:21Z,2024-01-07T16:40:53Z,"Hi,

I have 5 Python 3 processes, each running 2 threads.
Each process has an MQTT connection shared by the 2 threads.
After a random time some threads are stalled with wait_for_publish method.
My understanding is that you're working on supporting multithreading in 1.6.x branch but apparently it is not yet there.
Currently, only working workaround is to not use wait_for_publish but rather use a loop to wait with a timeout. If the timeout is reached, we disconnect and then reconnect.
Do you have some update to share, and maybe a release date?
Many thanks in advance.

Best regards,

Cyril","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BNRI,paho.mqtt.python,906286152,598,NA,ralight,79578,Roger Light,,NA,2021-08-26T10:31:26Z,2021-08-26T10:31:26Z,"Thanks for testing the 1.6.x branch. There is already multi threaded support in the Python client, I have certainly been trying to improve it though.

The 1.6.x branch has an extra parameter in wait_for_publish(), which is a timeout so you can do `msg.wait_for_publish(3.1)` to time out after 3.1 seconds, for example.

I'd be interested in fixing the underlying problem of course though, do you have some example code you could share?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BNRI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BN1H,paho.mqtt.python,906288455,598,NA,ralight,79578,Roger Light,,NA,2021-08-26T10:35:06Z,2021-08-26T10:35:06Z,I'm planning on a release around the end of September.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42BN1H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42HXbM,paho.mqtt.python,907900620,598,NA,dachshund-digital,1486285,,,NA,2021-08-29T23:42:51Z,2021-08-29T23:42:51Z,"Side question, is there a some type of is-loop check?  It would make sense for the parent process to be able to know if the 'loop' logic has stalled, halted or such, no?  I am checking is_connected of course, but that could be misleading if the loop thread has failed, right?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42HXbM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs425cag,paho.mqtt.python,921028256,598,NA,cpoder,574710,Cyril PODER,cyril.poder@gmail.com,NA,2021-09-16T15:57:42Z,2021-09-16T15:57:42Z,"> Thanks for testing the 1.6.x branch. There is already multi threaded support in the Python client, I have certainly been trying to improve it though.
> 
> The 1.6.x branch has an extra parameter in wait_for_publish(), which is a timeout so you can do `msg.wait_for_publish(3.1)` to time out after 3.1 seconds, for example.
> 
> I'd be interested in fixing the underlying problem of course though, do you have some example code you could share?

Sorry for the late reply. Here is a link to my Github project: https://github.com/SoftwareAG/cumulocity-python-device-onboarding
This is a bit specific as it's about connecting devices to Cumulocity, but it can be easily changed to connect to a standard MQTT broker.
It's actually using wait_for_publish, not the workaround I was talking about, and it's using multiprocessing and queues which didn't solve my issue whenever I run multiple instances of my script: after some time, if I run 5 instances, 2 end up stalled (this can happen after hours, but maybe sooner by increasing the frequency at which data are sent).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs425cag/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/598,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEC1m,paho.mqtt.python,1880108390,598,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T16:40:52Z,2024-01-07T16:40:52Z,"Is it possible that a reconnection happen and you are using QoS = 0 message ? If yes, it's probably fixed by #796 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEC1m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599,paho.mqtt.python,980921940,599,Reconnect failures when using TLS,jschlyter,37379,Jakob Schlyter,jakob@kirei.se,CLOSED,2021-08-27T06:34:31Z,2021-09-02T13:44:00Z,"Using `paho-mqtt` version 1.5.1 as the MQTT client, it seems automatic reconnect does not work when using TLS. The broker (Mosquitto) logs the following on reconnect and the connection is never reestablished:

```
1630044195: New connection from 127.0.0.1:55873 on port 8883.
1630044195: OpenSSL Error[0]: error:14094418:SSL routines:ssl3_read_bytes:tlsv1 alert unknown ca
1630044195: Client <unknown> disconnected: Protocol error.
```

The very same setup without TLS work fine.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42VtiW,paho.mqtt.python,911661206,599,NA,ralight,79578,Roger Light,,NA,2021-09-02T13:06:53Z,2021-09-02T13:06:53Z,"When I try this it doesn't even get out of the call to `connect()` because there is a failure of wrong CA, so I don't get to any part that would try to auto reconnect. Do you have a minimal example you could share?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42VtiW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V1L2,paho.mqtt.python,911692534,599,NA,jschlyter,37379,Jakob Schlyter,jakob@kirei.se,NA,2021-09-02T13:37:08Z,2021-09-02T13:37:08Z,"Some more debugging has revealed the most embarrassing error in the test setup (the server cert was updated during runtime). I believe there's nothing here to fix, sorry and keep up the good work!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V1L2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/599,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V29y,paho.mqtt.python,911699826,599,NA,ralight,79578,Roger Light,,NA,2021-09-02T13:44:00Z,2021-09-02T13:44:00Z,Glad you got it working :),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs42V29y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/600,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/600,paho.mqtt.python,987008059,600,disconnect() does not cause loop_forever to unblock,zrsmithson,37639247,,,CLOSED,2021-09-02T17:51:55Z,2024-01-08T03:02:50Z,"from the documentation:
> def loop forever
>     ...
>     loop_forever() will handle reconnecting for you. If you call
>     disconnect() in a callback it will return

I have a situation where I am trying to reinitialize with a new client ID, so I call `client.disconnect()` and `client.reinitialise()` with my new id from a message callback. In my main thread, I have a publisher that publishes once and waits for a response using loop forever (I can do it a few other ways, but this should work). My code looks something like this

```
import paho.mqtt.client as mqtt
import time

class waiting_client(mqtt.Client):
    def __init__(*args, **kwargs):
        super().__init__(*args, **kwargs)
        self.connect(""localhost"", 1883)
        time.sleep(5)
        self.publish(""send_me_new_client_id"", payload=None, qos=2)
        self.loop_forever()
    on_message(self, mqttc, obj, msg):
        self.disconnect()
        self.reinitialise(client_id=str(msg.payload))
```

From the documentation, I would think it would be valid `loop_forever()` and `disconnect()` in this way. Now it does work when I call `disconnect()` then let the callback thread finish, but this is not ideal since I then have to handle it in the `on_disconnect()` callback and maintain a flag on whether I should reconnect with a new client_id.

Is there any way to force a reconnection (or at least break out of `loop_forever()`) like this without relying on my message callback to return?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/600/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/600,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43PRoU,paho.mqtt.python,926751252,600,NA,ralight,79578,Roger Light,,NA,2021-09-24T16:10:03Z,2021-09-24T16:10:03Z,Could you try repeating your test with the `1.6.x` branch? I *think* it might work ok there.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43PRoU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/600,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE3c2,paho.mqtt.python,1880323894,600,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:02:49Z,2024-01-08T03:02:49Z,"I'm going to close this due to inactivity.

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE3c2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601,paho.mqtt.python,1005319383,601,memory leak on publish with paho,dogmatic69,94674,Carl Sutton,dogmatic69@gmail.com,CLOSED,2021-09-23T11:30:27Z,2023-12-07T21:35:02Z,"I've got an app that is publishing a message every 1-5 seconds and after each message overall system memory increases by around 0.1mb. After around a day it will be killed by OOM. 

If I uncommment the line `client.publish('topic', data)` there is no more memory increase.

Any idea how I can figure this out? Does not seem to be any related issues on google. 


sample of my code.
```
mqtt_client = mqtt.Client()
mqtt_client.username_pw_set(MQTT_USERNAME, password=MQTT_PASSWORD)
mqtt_client.connect(MQTT_BROKER_ADDR, MQTT_BROKER_PORT, 60)
infot = mqtt_client.publish(sensor, payload=data, qos=0, retain=False)
infot.wait_for_publish()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43NRpw,paho.mqtt.python,926227056,601,NA,ralight,79578,Roger Light,,NA,2021-09-23T23:12:29Z,2021-09-23T23:12:29Z,"Calling `publish()` and `wait_for_publish()` isn't enough to guarantee that the network traffic is fully handled - you need to use `loop_start()` or `loop_forever()`. You're also not disconnecting the client.

In your case I'd suggest something like this:

```
import paho.mqtt.client as mqtt

# Initialise and connect
mqtt_client = mqtt.Client()
mqtt_client.username_pw_set(MQTT_USERNAME, password=MQTT_PASSWORD)
mqtt_client.connect(MQTT_BROKER_ADDR, MQTT_BROKER_PORT, 60)
mqtt_client.loop_start()

# The main loop
while True:
    data = get_data()
    mqtt_client.publish(sensor, payload=data, qos=0, retain=False

# Cleanup
mqtt_client.disconnect()
mqtt_client.loop_stop()
```

This means you aren't creating a new connection for each message, which will be a lot more efficient, especially if you move to TLS encryption.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43NRpw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43TZNF,paho.mqtt.python,927830853,601,NA,dogmatic69,94674,Carl Sutton,dogmatic69@gmail.com,NA,2021-09-27T12:36:22Z,2021-09-27T12:36:22Z,"I can try disconnect and reconnect. if that fails I'll try the loop_start (it's a forever running script though). Will report back in a few days
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43TZNF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/601,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCfZm,paho.mqtt.python,1846146662,601,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:35:01Z,2023-12-07T21:35:01Z,I'm going to close this due to inactivity. If you are still experiencing the issue then please feel free to reopen. This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCfZm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603,paho.mqtt.python,1009839251,603,Deadlock when using an external mutex before calling subscribe and inside on_subscribe,rittneje,28784688,,,CLOSED,2021-09-28T14:35:31Z,2021-12-05T23:25:46Z,"This is basically the same as #226, but it applies to SUBSCRIBE/SUBACK instead of PUBLISH/PUBACK. I suspect the same underlying design flaw in the library is the root cause.

We have a dictionary mapping message ids to threading.Events. After `subscribe` is called, we insert an entry for that mid, and when `on_subscribe` is called, we look up the entry for that mid and call `set()`. In order to protect the process as a whole, we have a mutex protecting the operation of calling `subscribe` + inserting into the dictionary. That same mutex is also used in the callback for the lookup. This is because it is possible for the callback to be invoked between the call to `subscribe` and the dictionary insertion, and we don't want to lose that notification.

Here is the pseudo-code to illustrate this situation.
```
def subscribe(self):
    lock()
    mid := self._client.subscribe()
    subs[mid] = threading.Event()
    unlock()

# used as the on_subscribe callback for the paho client
def on_subscribe(self, mid):
    lock()
    subs[mid].set()
    unlock()
```

In particular, the deadlock is caused by the interleaving of our own lock, and (I believe) this library's internal `_callback_mutex`. Is there any way to avoid this? Otherwise it seems like a fundamental design flaw.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43Y_EA,paho.mqtt.python,929296640,603,NA,ralight,79578,Roger Light,,NA,2021-09-28T14:41:24Z,2021-09-28T14:41:24Z,Could you try with the `1.6.x` branch please?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43Y_EA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44c14O,paho.mqtt.python,947084814,603,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-10-19T20:35:15Z,2021-10-19T20:35:15Z,"@rittneje, I agree that this use-case is problematic.  It's frustrating that Paho sometimes calls the `on_subscribe`  after `subscribe` returns and sometimes it gets called before before `subscribe` returns. 

My advice is to never call into outside code while you're holding a lock.  You're just begging for a deadlock like this.  I've seen it more times than I can count. 

Of course, that doesn't help you.  I have some other ideas that might help.

If you problem was with `publish`/`puback`, I would recommend looking at the `wait_for_publish` method on the `MQTTMessageInfo` object that `publish` returns.  I think this could _maybe_ help you get around your issue. Unfortunately, `subscribe` doesn't return one of these objects. 

One fix involves a complicated object that keeps track of a list of `mid`s and `callbacks` that deals with the case where you get a completed mid from `on_subscribe` before you get the `mid` back from your call to `subscribe` .  We have a piece of code here that works really well and is well tested:
https://github.com/Azure/azure-iot-sdk-python/blob/35e538beeb69cd0a8e3d7a28d2cbe3b4fc7ec98d/azure-iot-device/azure/iot/device/common/mqtt_transport.py#L567

In retrospect, that code is maybe a bit too complex for the problem.  An easier fix would be something like this.
```
def on_subscribe(self, mid):
    def set_event():
      lock()
      subs[mid].set()
      unlock()
    t = threading.Thread(target=set_event)
    t.start()
```
(This is, of course, horribly inefficient, creating a new thread for each `suback`.  In real code, I would maybe do this with a `concurrent.futures.ThreadPoolExecutor` object instead of creating a new thread each time.)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44c14O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/603,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46yhSh,paho.mqtt.python,986322081,603,NA,rittneje,28784688,,,NA,2021-12-05T23:25:45Z,2021-12-05T23:25:45Z,"@ralight After upgrading to 1.6.1 we have no observed any deadlocks, so it seems to be fixed. I will open another issue if it comes back.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs46yhSh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,paho.mqtt.python,1014361880,604,using async handler for message callback,nbraun-wolf,88435047,,,CLOSED,2021-10-03T11:31:30Z,2024-01-08T03:09:11Z,"I need to be able to use async/await in the `paho` on_message callback. My idea is to schedule a coroutine from the synchronous handler, but it doesn't work as I expect. The code is not executed.

```python
import time
from asyncio import ensure_future, get_event_loop, sleep

from paho.mqtt import client as mqtt_client

_loop = get_event_loop()


def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(""Connected to MQTT Broker!"")
        client.subscribe(""test"")
        client.subscribe(""foo"")
    else:
        print(""Failed to connect, return code %d\n"", rc)


# this code nevers runs for some reason
async def coro_handler(client, payload):
    print(payload)
    await sleep(3)
    client.publish(""foo"", ""async"")


def test_handler(client, userdata, msg):
    print(msg.payload)
    client.publish(""foo"", ""bar"")
    # I need to be able to run async code in the handler
    # so I am trying something like this
    ensure_future(coro_handler(client, msg.payload), loop=_loop)


def foo_handler(client, userdata, msg):
    print(msg.payload)


client = mqtt_client.Client(""paho_async_handler_test"")
client.on_connect = on_connect

client.message_callback_add(""test"", test_handler)
client.message_callback_add(""foo"", foo_handler)

client.connect_async(""localhost"", 1883)
# start the client on another thread
client.loop_start()

# simulate a long running main program
while True:
    print(""running the main program"")
    time.sleep(10)
```

When I start the program and send the payload `[3]` to the topic `test` from [mqtt-explorer][1], I get the below output.

```
running the main program
Connected to MQTT Broker!
b'[3]'
b'bar'
running the main program
...
```

It would be great if this was supported first class. I.e. 

```python
client.message_async_callback_add(""test"", my_coroutine)
```

  [1]: https://mqtt-explorer.com/","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43m4tH,paho.mqtt.python,932940615,604,NA,ralight,79578,Roger Light,,NA,2021-10-03T12:25:43Z,2021-10-03T12:25:43Z,Could you please try this out using the `1.6.x` branch?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43m4tH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43nBo8,paho.mqtt.python,932977212,604,NA,nbraun-wolf,88435047,,,NA,2021-10-03T15:51:20Z,2021-10-03T15:51:20Z,"Hi, thanks for getting back, I have tried the same code with `1.6.x` but the result is exactly the same.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs43nBo8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4385s6,paho.mqtt.python,938711866,604,NA,martindurant,6042212,Martin Durant,,NA,2021-10-08T15:01:34Z,2021-10-08T15:01:34Z,"I don't believe that your asyncio event loop (`_loop`) is ever started. You would want to run that on its own thread, or run the entire application asynchronously with `asyncio.run()`.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4385s6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447tDU,paho.mqtt.python,955175124,604,NA,nbraun-wolf,88435047,,,NA,2021-10-30T08:48:48Z,2021-10-30T08:48:48Z,"Hi, thank you, I have tried to run the main function coroutine with asyncio.run, but it didn't work properly either. I think the problem is that the start_loop function runs on another thread, which doesn't have access to the event loop I start in the main thread. I also have to await the tasks somewhere, I guess.

Original I am coming here because I am looking to integrate this with fastapi, which runs its own event loop.

Do you plan to expose some kind of asnyc interface in the future? Given the I/O bound nature of a mqtt client, this would be suitable architecture wise IMO.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447tDU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447vaF,paho.mqtt.python,955184773,604,NA,nbraun-wolf,88435047,,,NA,2021-10-30T10:07:49Z,2021-10-30T10:07:49Z,"I think I managed to get something workable. I am not sure if there might be issues with this code performance wise, but from some simple tests, spamming messages, it seems to behave.

```python
import asyncio
import json

from paho.mqtt.client import Client


def init_client(topics):
    client = Client(""test"")
    client.connect_async(""localhost"")

    @client.connect_callback()
    def on_connect(client, userdata, flags, rc):
        print(""Connection returned "" + str(rc))
        client.subscribe(topics)
    
    # get the main event loop (from fastapi)
    loop = asyncio.get_event_loop()

    def topic(sub):
        def decorator(coro):
            @client.topic_callback(sub)
            def handle(client, userdata, msg):
                # run the async callbacks on the main event loop
                asyncio.run_coroutine_threadsafe(coro(client, userdata, msg), loop)

        return decorator

    return client, topic

# async main program (potentially fastapi)
async def main():
    client, topic = init_client(""my/topic"")

    @topic(""my/topic"")
    async def print_payload(client, userdata, msg):
        await asyncio.sleep(2)
        print(msg.payload)

    client.loop_start()

    while True:
        print(""running..."")
        await asyncio.sleep(5)
        client.publish(""my/topic"", json.dumps({""mqtt"": ""msg""}))


asyncio.run(main())
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447vaF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447wzP,paho.mqtt.python,955190479,604,NA,ralight,79578,Roger Light,,NA,2021-10-30T10:57:23Z,2021-10-30T10:57:23Z,Does https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py help at all?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447wzP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447xkF,paho.mqtt.python,955193605,604,NA,nbraun-wolf,88435047,,,NA,2021-10-30T11:22:26Z,2021-10-30T11:22:26Z,"Hi, I have already looked into this, but I am not entirly sure how to integrate this with a program this runs its own event loop. I want to be able to delare async http handler from the web framework as well as async message callbacks from the mqtt client.

As far as I understand the gist of this pieace of code is to create an empty future, and then set its result in the message callback.

```python
def on_message(self, client, userdata, msg):
    if not self.got_message:
        print(""Got unexpected message: {}"".format(msg.decode()))
    else:
        self.got_message.set_result(msg.payload)

self.got_message = self.loop.create_future()
msg = await self.got_message
```

I may try to experiment with that some more but it seems difficult at the moment. 

Do you think the way I have implemented it above is problematic?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447xkF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447zAE,paho.mqtt.python,955199492,604,NA,ralight,79578,Roger Light,,NA,2021-10-30T12:12:57Z,2021-10-30T12:12:57Z,"I haven't really played with async in python, so I can't comment too much. I just wanted to make sure you'd seen that other example.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs447zAE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/604,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE4Sg,paho.mqtt.python,1880327328,604,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:09:11Z,2024-01-08T03:09:11Z,"I'm going to close this issue off as it looks like a request for help (and Roger gave what help he was able). There is a separate request (#445) to improve asyncio support (and I believe addressing that will answer this question).

If you are still working on this and do require further help then please feel free to reopen the issue (but as it's been idle for a couple of years closing it seemed the appropriate action).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE4Sg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,paho.mqtt.python,1014536247,605,Connection timeout not logged or handled on client side,michaelosthege,5894642,Michael Osthege,,CLOSED,2021-10-03T20:50:03Z,2024-07-17T22:31:01Z,"We are frequently running into disconnects that are not handled on the client side.
Finally we were able to capture some relevant logging information:

On the client side, the activity just stops. I did not find any indication of why. Memory use for example remained stable.
```
2021-09-30T17:30:41.695Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Sending PINGREQ
2021-09-30T17:30:41.696Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Received PINGRESP
2021-09-30T17:31:41.759Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Sending PINGREQ
2021-09-30T17:31:41.760Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Received PINGRESP
2021-09-30T17:32:41.818Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Sending PINGREQ
2021-09-30T17:32:41.819Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Received PINGRESP
2021-09-30T17:33:41.880Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Sending PINGREQ
2021-09-30T17:33:41.881Z	/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py:2404	Received PINGRESP
```

The mosquitto-broker log shows a line indicating that the client timed out 1.5 minutes (clocks may have been slightly out of sync) after that last ping. No further activity from that client shows up in the logs.
```
2021-09-30 17:35:12 1633023312: Client IBT1016-RODI-client-C55EYC has exceeded timeout, disconnecting.
```

The entire time the main process of the client was in a `while` loop doing `time.sleep(1)`, as it was waiting for a certain message to be received.

The MQTT client itself is connected like this, running the loop on the second thread:
```python
self.client = mqtt.Client(client_id=client_id)
self.client.connect(broker)
self.client.on_connect = self._on_connect
self.client.on_disconnect = self._on_disconnect
self.client.on_message = self.on_message
self.client.loop_start()
```
The `_on_disconnect` method was never called.

paho-mqtt version is 1.5.1

<hr/>

Any ideas why the client timed out?

Is there anything I can do client side to reliably check if I'm still connected, if I can't trust the `on_disconnect` event?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44VTxU,paho.mqtt.python,945110100,605,NA,michaelosthege,5894642,Michael Osthege,,NA,2021-10-17T12:34:21Z,2021-10-17T12:34:21Z,"It happened again and this time I saw in the logs that the client did not send its `PINGREQ` before being terminated by the server.

Any ideas why it did that?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44VTxU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cp9f,paho.mqtt.python,947035999,605,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-10-19T19:22:29Z,2021-10-19T19:22:29Z,"@michaelosthege 
I'm still thinking through how to deal with this, but the `loop_start()` thread can silently die.  When it does, many of the `self.client` methods still _appear_ to work, but nothing will be sent or received.  Lack of `PINGREQ `is one of the symptoms that I've seen when this happens.  

I recommend checking `self.client._thread` and `self.client._thread.is_alive()`  when you have this problem to see if that's the problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cp9f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cvDd,paho.mqtt.python,947056861,605,NA,michaelosthege,5894642,Michael Osthege,,NA,2021-10-19T19:54:14Z,2021-10-19T19:54:14Z,"@BertKleewein thanks for the reply. Yesterday I rolled out an update where I'm calling the enable_logging() before the loop_start(). My hope was that it gives us logs from the second thread.
Is there anything I can do to revive the thread? Does it hurt to call loop_start() even if the thread is running already?
Even better of course would be to fix it at the source.. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cvDd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cwzI,paho.mqtt.python,947064008,605,NA,BertKleewein,8028738,Bert Kleewein,,NA,2021-10-19T20:04:45Z,2021-10-19T20:04:45Z,"@michaelosthege - calling `loop_start()` won't hurt, but it probably won't help either.  I've tried some easy tricks to revive the thread, but none of them worked.  This was a few months ago, before I was pulled off to work on something else.  Now I have some time to look at this in earnest, so hopefully I'll come up with something.  Fixing it at the source is the only reasonable fix, IMHO.  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44cwzI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE4p_,paho.mqtt.python,1880328831,605,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:11:47Z,2024-01-08T03:11:47Z,"There have been quite a few changes since this issue was raised (and more in the upcoming release). As such may I ask you to retest with the latest release and let us know if the issue still exists?

Note: This is part of an exercise to clean up old issues so that the project can move forwards.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE4p_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/605,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLy8Y,paho.mqtt.python,2234461976,605,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:31:01Z,2024-07-17T22:31:01Z,I'm going to close this due to lack of activity/age. If this is still occuring with a current version of the library please feel free to reopen the issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLy8Y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/606,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/606,paho.mqtt.python,1019770262,606,Exception has occurred: TypeError '>=' not supported between instances of 'str' and 'int',kronbergerindustries,72893399,Kronberger,,CLOSED,2021-10-07T08:35:39Z,2021-10-07T08:41:35Z,"Hey there,

im trying to write a simple mqtt client application and while trying to connnect to the broker with     `mqttc.connect(host=""10.103.1.12"")`
i get this error:
`Exception has occurred: TypeError '>=' not supported between instances of 'str' and 'int'`
Has anyone a idea where thats coming from or what i can do to prevent it?
Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/606/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,paho.mqtt.python,1020172546,607,Keepalive ping requests with a subscribe only client are sent unnecessarily.,CmpCtrl,90776324,Phil,,CLOSED,2021-10-07T15:22:58Z,2021-10-20T12:45:22Z,"In the `_check_keepalive` function, a ping request will be sent if either the time since last msg in OR last msg out is over the keep alive limit. In my application where I am only subscribed to a topic and never publish, it continuously sends ping requests at the keepalive time. I would prefer the logic below use an AND in place of the OR so that a received message will also reset the keepalive time. 

https://github.com/eclipse/paho.mqtt.python/blob/71e29222421b83774af8c241898d4f1f15f58b8d/src/paho/mqtt/client.py#L2405-L2415

The server I am working with seems to only need a ping to keep the connection alive if the time since last message in AND last message out are over the timeout. Is it common for other servers to require a ping if either are over the timeout?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4353O5,paho.mqtt.python,937915321,607,NA,ralight,79578,Roger Light,,NA,2021-10-07T15:41:32Z,2021-10-07T15:41:32Z,"Hi @CmpCtrl,

The MQTT v3.1.1 spec states:

> The PINGREQ Packet is sent from a Client to the Server. It can be used to:
>   1. Indicate to the Server that the Client is alive in the absence of any other Control Packets being sent from the Client to the Server.

And the MQTT v5.0 spec states:

> The Keep Alive is a Two Byte Integer which is a time interval measured in seconds. It is the maximum time interval that is permitted to elapse between the point at which the Client finishes transmitting one MQTT Control Packet and the point it starts sending the next. It is the responsibility of the Client to ensure that the interval between MQTT Control Packets being sent does not exceed the Keep Alive value

I think it's pretty clear that that ping messages are sent only in response to the client not transmitting messages. The purpose of the ping, from the point of view of the server, is to allow it to detect clients that have stopped communicating and disconnect them fully, hence it makes sense that only the messages from client to server are used.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4353O5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4357rl,paho.mqtt.python,937933541,607,NA,CmpCtrl,90776324,Phil,,NA,2021-10-07T16:03:17Z,2021-10-07T16:03:17Z,"@ralight, Thanks for the quick reply. 
Ok, so perhaps my issue is at the socket level, not mqtt? I get disconnected from the server if there are no messages during the timeout, but receiving a message does seem to reset the count. The keepalive also works, but then has unnecessary ping requests. I'll review the socket keepalive settings, though I've had trouble in the past controlling that across different environments. 
Thanks,
Phil","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4357rl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44dJ4k,paho.mqtt.python,947166756,607,NA,ralight,79578,Roger Light,,NA,2021-10-19T22:59:26Z,2021-10-19T22:59:26Z,"@CmpCtrl From what I can see, everything is working exactly as I'd expect. I've tried a test connecting to mosquitto and subscribing only to `$SYS/broker/uptime`, which is updated every ten seconds. The client has a keepalive of 60 seconds, and I see it sending a PINGREQ every 60 seconds. This is what the MQTT spec requires. If you're seeing disconnects within the keepalive interval, then either the server is doing something odd (perhaps disconnecting clients at exactly the keepalive instead of keepalive*1.5) or there is a separate network problem like you suggest.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44dJ4k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/607,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44e68r,paho.mqtt.python,947629867,607,NA,CmpCtrl,90776324,Phil,,NA,2021-10-20T12:45:22Z,2021-10-20T12:45:22Z,"Thanks for following up. I think what is happening in my case is that the mqtt server timeout is longer than the timeout on the socket connection. So if msgs are sent on the topic i am subscribed to, it works fine to keep the socket open. Thanks.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44e68r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/608,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/608,paho.mqtt.python,1021219583,608,Make use of loop_stop()'s force parameter,nakami,6167914,nakami,,OPEN,2021-10-08T15:27:39Z,2024-01-07T08:18:58Z,"Currently (v1.5.1), the `force` parameter in `loop_stop` does nothing. I ran into an issue where a packet with QoS 2 was sent by the client and does not respond - effectively locking up the client waiting for a response. I am calling `Client.loop_stop()`  to forcefully exit, but loop_stop stalls.

`Client.loop_stop()` (client.py):

```python
    def loop_stop(self, force=False):
        """"""This is part of the threaded client interface. Call this once to
        stop the network thread previously created with loop_start(). This call
        will block until the network thread finishes.

        The force parameter is currently ignored.
        """"""
```


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/608/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/608,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs439Con,paho.mqtt.python,938748455,608,NA,nakami,6167914,nakami,,NA,2021-10-08T15:52:40Z,2021-10-08T15:52:40Z,"Quick fix for my use-case:

Set the `timeout` for the `join()` call to 30 seconds:

```python
        if self.threading.current_thread() != self._thread:
            #self._thread.join()
            self._thread.join(timeout=30.0 if force else None)
            self._thread = None
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs439Con/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/608,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDmBV,paho.mqtt.python,1879990357,608,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T08:18:52Z,2024-01-07T08:18:52Z,"Just noting that this is still the case with @master (it's documented ""The force parameter is currently ignored.""). I'll flag this as an enhancement.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDmBV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609,paho.mqtt.python,1022199444,609,insecure key from tls dict automatically removed after single() or multiple(),iointerrupt,7555064,,,OPEN,2021-10-11T02:52:14Z,2024-01-08T02:28:06Z,"Publishing to with tls `{ 'insecure' = True }` set to true when using `single()` or `multiple()` results in the dict 'insecure' key being removed after the publish automatically.

This is on multiple machines with **paho-mqtt 1.5.1**

With the following code:
```
import paho.mqtt.publish as mqttpub

mqtt_host = ""<hostname>""
mqtt_port = 8883
mqtt_username = ""<username>""
mqtt_password = ""<password>""
mqtt_cacert = ""/home/castle/myca.crt""
mqtt_tls_insecure = True

mqtt_auth_obj = { 'username': mqtt_username, 'password': mqtt_password }
mqtt_tls_obj = { 'ca_certs': mqtt_cacert, 'insecure': mqtt_tls_insecure }

multiple = []
multiple.append((""test/topic"", ""testpayload"", 0, False))

print (""MQTT Single Publish Test:"")
print(f""Insecure TLS Key Pre publish single(): {str(mqtt_tls_obj)}"")

mqttpub.single(multiple[0][0], multiple[0][1], multiple[0][2], multiple[0][3],
    hostname=mqtt_host, port=mqtt_port, auth=mqtt_auth_obj, tls=mqtt_tls_obj)
print(f""Insecure TLS Key POST publish single(): {str(mqtt_tls_obj)}"")

mqtt_tls_obj = { 'ca_certs': mqtt_cacert, 'insecure': mqtt_tls_insecure }
print(""TLS Dict Object Reset"")

print (""MQTT Multiple Publish Test:"")
print(f""Insecure TLS Key Pre publish multiple(): {str(mqtt_tls_obj)}"")

mqttpub.multiple(multiple, hostname=mqtt_host, port=mqtt_port, auth=mqtt_auth_obj, tls=mqtt_tls_obj)
print(f""Insecure TLS Key POST publish multiple(): {str(mqtt_tls_obj)}"")

```
The resulting output is:

```
MQTT Single Publish Test:
Insecure TLS Key Pre publish single(): {'ca_certs': '/home/castle/myca.crt', 'insecure': True}
Insecure TLS Key POST publish single(): {'ca_certs': '/home/castle/myca.crt'}
TLS Dict Object Reset
MQTT Multiple Publish Test:
Insecure TLS Key Pre publish multiple(): {'ca_certs': '/home/castle/myca.crt', 'insecure': True}
Insecure TLS Key POST publish multiple(): {'ca_certs': '/home/castle/myca.crt'}
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44Ae0B,paho.mqtt.python,939650305,609,NA,iointerrupt,7555064,,,NA,2021-10-11T03:30:27Z,2021-10-11T03:30:27Z,"A followup test was done to see result with `'insecure' = False`. Outcome behavior is the same as insecure key is removed.
```
print(f""Insecure TLS Key Pre publish multiple(): {str(mqtt_tls_obj)}"")
try:
    mqttpub.multiple(multiple, hostname=mqtt_host, port=mqtt_port, auth=mqtt_auth_obj, tls=mqtt_tls_obj)
except Exception as e:
    print(str(e))
print(f""Insecure TLS Key POST publish multiple(): {str(mqtt_tls_obj)}"")

```

Result:

MQTT Multiple Publish Test:
**Insecure TLS Key Pre publish multiple(): {'ca_certs': '/home/itchy/myca.crt', 'insecure': False}**
[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: Hostname mismatch, certificate is not valid for 'castle1.lan'. (_ssl.c:1129)
**Insecure TLS Key POST publish multiple(): {'ca_certs': '/home/itchy/myca.crt'}**
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44Ae0B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44Ae5W,paho.mqtt.python,939650646,609,NA,iointerrupt,7555064,,,NA,2021-10-11T03:31:31Z,2021-10-11T03:31:31Z,Closed by accident. Sorry,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44Ae5W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/609,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEzZj,paho.mqtt.python,1880307299,609,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T02:28:05Z,2024-01-08T02:28:05Z,"This will be due to `insecure = tls.pop('insecure', False)` in [the following](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/publish.py#L161):

```
if tls is not None:
        if isinstance(tls, dict):
            insecure = tls.pop('insecure', False)
            client.tls_set(**tls)
            if insecure:
                # Must be set *after* the `client.tls_set()` call since it sets
                # up the SSL context that `client.tls_insecure_set` alters.
                client.tls_insecure_set(insecure)
        else:
            # Assume input is SSLContext object
            client.tls_set_context(tls)
```

I'm going to flag this as an bug (it's open to interpretation but the fix should be pretty simple).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEzZj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/610,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/610,paho.mqtt.python,1028179716,610,Script doesn't receive data from mosquitto when it is started at boot by systemd?,MauroDiamantino,19491708,MauroDiamantino,maurogabriel.54@gmail.com,CLOSED,2021-10-17T00:27:39Z,2021-10-29T04:02:04Z,"Hello guys, I have following code which receive data from different MQTT topics:

    #!/usr/bin/python3
    import paho.mqtt.client as mqtt
    import pymysql
    import json
    import sys
    import time
    
    #-### Constantes ####
    PUERTO_MQTT = ...
    USUARIO = ...
    CLAVE = ...
    #DB_LOCAL = ...
    DB_LOCAL = ...
    RETARDO_SUSCRIP = 30 #s
    
    #-### Variables ####
    idsNgsConectados = set()
    clienteMQTT = mqtt.Client(""receptor_datos_ngs"")
    db_local = None
    t1 = 0
    t2 = 0
    
    #-### Funciones ####
    def on_connect(clienteMQTT, userdata, flags, rc):
        print(""Conexion establecida con el broker MQTT correctamente"")
    
    def on_message(clienteMQTT, userdata, msg):
        msg_str = msg.payload.decode('utf-8')
    
        # procesamiento de los mensajes MQTT
        posPrimeraBarra = msg.topic.find('/')
    
        print(""topic: {}"".format(msg.topic))
        print(""datos: {}"".format(msg_str))
    
        if posPrimeraBarra != -1:
            id_ngs = int(msg.topic[:posPrimeraBarra])
            ref_medicion = msg.topic[posPrimeraBarra+1:]
            variables = json.loads(msg_str)
    
            if type(variables) is dict:
                if id_ngs in idsNgsConectados:
                    try:
                        cursor = db_local.cursor()
                        cursor.execute(""INSERT INTO mediciones (id_ngs, referencia) VALUES ({}, '{}')"".format(id_ngs, ref_medicion))
                        db_local.commit()
                        cursor.execute(""SELECT id FROM mediciones WHERE (id_ngs={} AND referencia='{}') ORDER BY id DESC LIMIT 1"".format(id_ngs, ref_medicion))
                        id_medicion = cursor.fetchone()[0]
                        for var in variables:
                            cursor.execute(""INSERT INTO valores_mediciones (id_medicion, variable, valor) VALUES ({},'{}',{})"".format(id_medicion, var, variables[var]))
                        db_local.commit()
                        cursor.close()
                    except Exception as e:
                        db_local.rollback()
                        print(""Error 1: fallo el procesamiento de un mensaje MQTT: "" + str(e), file=sys.stderr)
                        sys.exit(1)
                else:
                    print(""Advertencia: un ngs envio datos sin haberse presentado, por lo que se le indicara que salude primero"", file=sys.stderr)
                    clienteMQTT.publish(str(id_ngs),""saludar"",qos=1)
            else:
                print(""Advertencia: un ngs envio datos con un formato incorrecto por lo que se le indicara que se reinicie"", file=sys.stderr)
                clienteMQTT.publish(str(id_ngs),""reiniciar"",qos=1)
    
    def sub_topics():
        global clienteMQTT
        cursor = db_local.cursor()
        cursor.execute('SELECT id FROM ngs')
        ids_ngs = cursor.fetchall()
        cursor.close()
        print(""Topics suscriptos:"")
        for id_ngs in ids_ngs:
            id_ngs = id_ngs[0]
            idsNgsConectados.add(id_ngs)
            topic = str(id_ngs) + '/#'
            print(""\t{}"".format(topic))
            clienteMQTT.subscribe(topic)
    
    try:
        db_local = pymysql.connect( unix_socket='/run/mysqld/mysqld.sock',
                        user=USUARIO,
                        password=CLAVE,
                        db=DB_LOCAL )
    
        clienteMQTT.on_connect = on_connect
        clienteMQTT.on_message = on_message
        clienteMQTT.username_pw_set(username=USUARIO, password=CLAVE)
    
        clienteMQTT.connect(""localhost"", PUERTO_MQTT)
        clienteMQTT.loop_start()
    
        # Bucle infinito
        while True:
            time.sleep(RETARDO_SUSCRIP)
            # Suscripcion a los topics de todos los ngs
            sub_topics()
    except Exception as e:
        db_local.close()
        clienteMQTT.loop_stop()
        clienteMQTT.disconnect()
        print(""Error 2: desconocido: "" + str(e), file=sys.stderr)
        sys.exit(2)

The script subscribe dinamically to the topics. If I run the script from the shell it works well, but if a setup it to be run at boot using systemd, it fails. I've setup the unit file to require and to be run after mosquitto, mariadb, dhcpcd and wpa_supplicant services. I'm sure the data is being publish from another device because I can receive it using ""mosquitto_sub"". Which could it be the reason?

It runs in a Raspberry pi zero w and the Mosquitto version is 1.5.7.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/610/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/610,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs444ykr,paho.mqtt.python,954411307,610,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2021-10-29T04:02:04Z,2021-10-29T04:02:04Z,"Closing this because you raised an identical [issue on stack overflow](https://stackoverflow.com/questions/69600143/why-the-script-doesnt-receive-data-from-mosquitto) and solved it yourself (resolution being unrelated to the MQTT library). Please remember to close issues if you solve them (and, ideally, create a *minimal* reproducible example that removes other libraries as a potential cause). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs444ykr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/612,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/612,paho.mqtt.python,1031822471,612,Missing 1.6.0 tag,mgorny,110765,Michał Górny,,CLOSED,2021-10-20T20:55:51Z,2021-10-21T10:35:16Z,The pypi page lists 1.6.0 release but the corresponding tag is missing from the git repo.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/612/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/612,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44gh6C,paho.mqtt.python,948051586,612,NA,ralight,79578,Roger Light,,NA,2021-10-20T21:30:47Z,2021-10-20T21:30:47Z,"Thanks for reminding me, I had problems with signing yesterday so couldn't create the tag.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44gh6C/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/612,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44iKNW,paho.mqtt.python,948478806,612,NA,ralight,79578,Roger Light,,NA,2021-10-21T10:35:15Z,2021-10-21T10:35:15Z,This is now fixed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs44iKNW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613,paho.mqtt.python,1034440639,613,wait_for_publish() deadlocks with qos=2 on server or connection shutdown,philipp-schmidt,25586333,Philipp Schmidt,philipp.schmidt@isarsoft.com,CLOSED,2021-10-24T15:12:26Z,2024-07-18T00:15:04Z,"I am using loop_start() and publish messages with qos level 2 and then wait for the message to be properly published via wait_for_publish().
Stopping the mqtt server sometimes results in a race condition where wait_for_publish() will lock up infinitely, probably waiting for the qos handshake to finish, but the connection is already dead. This completely deadlocks the thread. The automatic reconnect of loop_start() does not resolve this either, even if the server restarts.

```python
topic = ""test""
payload = ""test""
publish_status = client.publish(topic, payload, qos=2)
# This will sometimes deadlock when shutting down the server externally or dropping connection
publish_status.wait_for_publish()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47SHX6,paho.mqtt.python,994604538,613,NA,swamper123,24408657,Fabian Beitler,,NA,2021-12-15T09:59:08Z,2021-12-15T09:59:08Z,"I inspect the same behaviour with qos=1 and a Mosquitto broker.

The Mosquitto server timeouts the client, but the python program is still running.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47SHX6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDWdi,paho.mqtt.python,1879926626,613,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T03:34:39Z,2024-01-07T03:34:39Z,"Apologies for the delay in someone looking into this. 

I'd appreciate it if someone could confirm if this is still an issue with the current release and provide a reproducer and/or logs (understand that this might be difficult to reproduce). In theory the client should reconnect, and the publish process should conclude as normal (but this gets complicated and I have not traced in detail).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDWdi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/613,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNS2G,paho.mqtt.python,2234854790,613,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:15:04Z,2024-07-18T00:15:04Z,Closing due to age/inactivity. If this is still an issue with the current release then please feel free to reopen (ideally with [logs](https://github.com/eclipse/paho.mqtt.python?tab=readme-ov-file#logger)),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNS2G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618,paho.mqtt.python,1046499023,618,Unhandled exception in version 1.6.1 after trying to reconnect to broker.,knvovk,45885401,Kirill Vovk,,CLOSED,2021-11-06T12:27:49Z,2024-08-29T03:24:00Z,"I tested the behavior of my program in case of disconnection from the MQTT broker, and noticed that after disconnection, the on_disconnect method is called as expected, then when trying to reconnect to the broker after the timeout expires, the program crashes due to an unhandled exception (see stack trace below). Testing was conducted with version 1.6.1.

```shell
ERROR:MqttClient:Disconnected with code: 16!
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
    self.reconnect()
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1044, in reconnect
    sock = self._create_socket_connection()
  File ""/home/pi/.local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3685, in _create_socket_connection
    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)
  File ""/usr/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
timeout: timed out
```

However, I noticed that there was no such problem before. I compared the paho-mqtt version installed on my computer and the  paho-mqtt version installed on the computer where the tests were carried out. On my computer in version 1.5.1 this problem does not occur, one problem occurs in version 1.6.1, which is installed on the test computer. I installed  paho-mqtt 1.5.1 on a test computer and the problem went away.

Has anyone encountered a similar problem?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45Xdlw,paho.mqtt.python,962451824,618,NA,ralight,79578,Roger Light,,NA,2021-11-06T13:27:16Z,2021-11-06T13:27:16Z,"It's possible this could be down to using Python 2.7, which is much less well tested these days as you would expect. Are you tied to Python 2.7? We anticipate that any non-bugfix releases after January 2022 will not support it.

For now - do you have a minimal example that shows this behaviour that you could share with us?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45Xdlw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45ZYoH,paho.mqtt.python,962955783,618,NA,knvovk,45885401,Kirill Vovk,,NA,2021-11-08T09:17:53Z,2021-11-08T09:17:53Z,"> It's possible this could be down to using Python 2.7, which is much less well tested these days as you would expect. Are you tied to Python 2.7? We anticipate that any non-bugfix releases after January 2022 will not support it.
> 
> For now - do you have a minimal example that shows this behaviour that you could share with us?

Here's a minimal code example. Here, as expected, `_on_disconnect` is called, then `paho.mqtt.client` tries to reconnect and an exception is thrown, the stack trace is provided in the issue description.

```python
#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import socket
import time
import paho.mqtt.client as mqtt
from pydispatch import Dispatcher

# ... other imports


class MqttClient(Dispatcher):
    __metaclass__ = Singleton
    _events_ = ['on_connect', 'on_disconnect', 'on_message',
                'on_publish', 'on_subscribe', 'on_unsubscribe']
    _RECONNECT_TIMEOUT = 10.0

    def __init__(self, host=None, port=1883, keepalive=60, *args, **kwargs):
        super(MqttClient, self).__init__(*args, **kwargs)
        if host is None:
            raise RuntimeError('MQTT host must be specified!')
        client_id = socket.gethostbyname(socket.gethostname())
        self._mqtt = mqtt.Client(client_id=client_id, clean_session=False,
                                 protocol=mqtt.MQTTv311, transport='tcp')
        self._mqtt.on_disconnect = self._on_disconnect
        self._log = logging.getLogger(self.__class__.__name__)
        self._topics = {}
        self._host = host
        self._port = port
        self._keepalive = keepalive
        Delay.once(0, self._connect)

    def _connect(self):
        if not self._mqtt.is_connected():
            self._log.info('Trying to connect...')
            connected = False
            while not connected:
                try:
                    self._mqtt.connect(host=self._host, port=self._port,
                                       keepalive=self._keepalive)
                except IOError as err:
                    self._log.error(err)
                    time.sleep(self._RECONNECT_TIMEOUT)
                else:
                    connected = True
                    self._mqtt.loop_start()

    def _on_disconnect(self, client, userdata, rc):
        self._log.error('Disconnected with code: {}'.format(rc))
        self.emit('on_disconnect', client=client, userdata=userdata, rc=rc)

    # ... other code
```

Accordingly, the error occurs inside the library itself, not the client code.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45ZYoH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/618,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6KFR_f,paho.mqtt.python,2316640223,618,NA,harshag,1763746,,,NA,2024-08-29T03:23:59Z,2024-08-29T03:23:59Z,This saved ton of debugging time for us. Encountered same issue with version 1.6.1 for Python 2.7. Reverted to 1.5.1 and it works fine. Thanks.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6KFR_f/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/619,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/619,paho.mqtt.python,1052850554,619,subscribe.simple topic doesn't exist,canDry,8286540,,,CLOSED,2021-11-14T05:19:39Z,2024-01-07T01:44:51Z,"Further to this closed issue: https://github.com/eclipse/paho.mqtt.python/issues/262  
I wonder if it could be reconsidered ie. if using subscribe.simple (vs. call back) and the topic doesn't exist could it return a NULL payload??  
  
This would be useful for example an IoT device that connects periodically to check if a topic exists, and if so gets the last (retained) message and if not, goes on doing something else or goes back to sleep.
  
Or... perhaps there some other paho method to check whether a topic exists?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/619/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/619,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDSSC,paho.mqtt.python,1879909506,619,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T01:44:51Z,2024-01-07T01:44:51Z,"> the topic doesn't exist

It's not really clear what ""topic doesn't exist"" means in this context. An MQTT server does not maintain a list of topics that ""exist""; it will retain a list of topics that have subscribers and, potentially, have a store of retained messages, but the protocol does not make this info available.

As such I think you want to:
1. Connect
2. Retrieve all retained messages
3. Disconnect

Unfortunately, once more, the MQTT protocol does not provide a way to get a count of the retained messages that match a topic filter, or the option to only retrieve retained messages. When you subscribe the server will send any retained messages and then start a stream of new messages (v5 does allow some customisation of this). You would need to determine when all retained messages have been received and disconnect at that point. See [this](https://stackoverflow.com/a/77466608/11810946) on stackoverflow for a bit more info.

This really leaves a couple of options:
* Connect and wait for a fixed period before disconnecting
* Connect and wait until no retained messages are received within a set period
* Connect and wait until you receive a message that does not have the retain flag set (this is not guaranteed to work!)

Given that a timeout is the likely solution here and there is issue #655 focuses on that I'm going to close this issue (apologies that no one responded earlier!).


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDSSC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/620,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/620,paho.mqtt.python,1053414301,620,Support message buffering before initial connect,thorbjornsomod,61788313,Thorbjørn Sømod,,OPEN,2021-11-15T09:33:45Z,2024-01-08T03:35:29Z,"Hi,

Would it be possible to implement this:

https://github.com/eclipse/paho.mqtt.java/pull/354

for the Python implementation of the client aswell? For all the reasons mentioned here:

https://github.com/eclipse/paho.mqtt.java/issues/352","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/620/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/620,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45vklC,paho.mqtt.python,968771906,620,NA,thorbjornsomod,61788313,Thorbjørn Sømod,,NA,2021-11-15T10:55:59Z,2021-11-15T10:55:59Z,"I guess this also means implementing Disconnected Publishing as mentioned in this:

https://solace.com/blog/whats-new-neon-release-mqtt-paho/","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs45vklC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/621,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/621,paho.mqtt.python,1054309195,621,Customizable Connect Timeout,cartertinney,3613133,Carter Tinney,carter.tinney@microsoft.com,OPEN,2021-11-16T00:47:21Z,2024-01-08T01:36:43Z,"It seems as though the socket timeout for establishing a connection is set to 5 seconds with no way of changing it, due to there being no way to set the `._connect_timeout` attribute without accessing the convention-private attribute itself.

Is there a particular reason why this is this way? We have a requirement of supporting up to 60 seconds to establish a connection rather than just the 5 currently allowed.

I would be willing to implement an API to allow for this customization if necessary.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/621/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/621,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs483A2l,paho.mqtt.python,1021054373,621,NA,babaMar,20344561,Stefano,essemexes@gmail.com,NA,2022-01-25T10:49:28Z,2022-01-25T10:49:28Z,"> It seems as though the socket timeout for establishing a connection is set to 5 seconds with no way of changing it, due to there being no way to set the `._connect_timeout` attribute without accessing the convention-private attribute itself.
> 
> Is there a particular reason why this is this way? We have a requirement of supporting up to 60 seconds to establish a connection rather than just the 5 currently allowed.
> 
> I would be willing to implement an API to allow for this customization if necessary.

it'd be enough to add a parameter in the `Client` constructor","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs483A2l/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/621,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs483DDk,paho.mqtt.python,1021063396,621,NA,babaMar,20344561,Stefano,essemexes@gmail.com,NA,2022-01-25T11:00:59Z,2022-01-25T11:00:59Z,"@cartertinney you can also overwrite the attribute after instantiating the client, as in python there are real private variables

```python
mqtt_client = mqtt.Client()
mqtt_client._connect_timeout = 1.0
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs483DDk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/623,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/623,paho.mqtt.python,1059739397,623,DELETE - Extra log errors if link failure,RFRIEDM-Trimble,50461358,RFRIEDM-Trimble,,CLOSED,2021-11-22T06:16:49Z,2023-01-21T07:44:55Z,"EDIT: These are caused by a different framework (ROS2) trying to do networking at the same time. 

Previous message:

> While running the MQTT client with `loop_start()`, it works fine with MQTTv3.1.
> 
> However, if I turn off my WiFi (no internet) after it's connected to the broker, I receive spurious errors: 
> `tev: ddsi_udp_conn_write to udp/239.255.0.1:7400 failed with retcode -1`
> These seem to occur at every keep_alive interval as well as every time I call a publisher.
> 
> Is there a way to disable these? I would like  the MQTT connection to be restored with no message loss if possible, but this is spamming our debug logs and there's no way to turn off that message. Connection is intermittent, and I am relying on the MQTT protocol to queue these messages with QOS1 to make recovery seamless.
> 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/623/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/624,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/624,paho.mqtt.python,1065206019,624,How to call loop_forever after loop_stop?,lucasjinreal,21303438,MagicSource,nicholasjela@gmail.com,CLOSED,2021-11-28T06:23:23Z,2023-12-24T02:15:30Z,"Hello. I want call loop_forever after I called loop_stop, the reason for this is that I need client subscribe topics done. Then I can do my stuff.

So I need using loop_start to start a subscribe, then I will close this loop, but after that, I found loop_forever nolonger works why?


```
  def _connect(self):
        self.client = mqtt_client.Client(self.client_id)
        self.client.username_pw_set(self.user_acc, self.user_password)
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.connect(MQTT_URL, PORT)
        logger.info('loop start...')
        self.client.loop_start()
        time.sleep(4)
        while True:
            if not self.connected or not self.client_ready:
                logger.info('still not client ready? wait more 1 seconds.')
                time.sleep(1)
                continue
            else:
                logger.info('Seems connected and client_ready, close loop thread')
                self.client.loop_stop()
                break

# outside code

client.loop_forever()

# this will exit program directly rather than block and run forever.
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/624/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/624,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcFc,paho.mqtt.python,1868415324,624,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T02:15:30Z,2023-12-24T02:15:30Z,"The client is not designed to be used in this way; ideally just leave the loop started by `loop_start` running.

If you really mus do this then you will need to check the source; at a minimum set `client._thread_terminate to False`.

Either way I'll close this as its pretty old!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXcFc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/625,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/625,paho.mqtt.python,1071600059,625,Transfer of variables from on_message to main,Friede10C,89907621,,,CLOSED,2021-12-06T00:16:37Z,2023-01-21T07:43:48Z,Test,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/625/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,paho.mqtt.python,1072598222,626,"Client stops receiving messages, eventhough the broker is alive",BasKloet,85162579,,,CLOSED,2021-12-06T20:50:18Z,2023-12-23T22:02:05Z,"Hello, I have a python script that listens for MQTT from my thermostat messages (using paho) and updates my home automation accordingly. Both the program creating the MQTT messages, as well as the script that handles them run as Linux services on the same raspberry pi. They work very well together in most situations, but I have noticed the following problems:

1. Every day at around midnight my listener script stops receiving MQTT messages, even though the other program keeps publishing them and the broker does not restart.
2. If I restart the service that sends the MQTT messages, the receiving script will not receive the MQTT messages that are published after the restart, even though the messages are published to the same topics after the restart and the broker is unchanged.

I have a simple workaround that restarts the listener service at midnight and whenever the sending service restarts, but I feel that there is probably an underlying problem in my script that I should actually fix. My script is as follows:

```
#!/usr/bin/env python3.8
# -*- coding: utf-8 -*-
#
import random
import requests
import signal
import sys
from datetime import datetime

from paho.mqtt import client as mqtt_client

broker = 'localhost'
port = 1883
topic = ""evohome/evogateway/ctl_controller/#""
# generate client ID with pub prefix randomly
client_id = f'python-mqtt-{random.randint(0, 100)}'
domoticz_url = ""http://192.168.2.50:8080""
system_mode_dict = {
  ""heat_off"": 0,
  ""auto"": 10,
  ""eco_boost"": 20,
  ""away"": 30,
  ""day_off"": 40,
  ""day_off_eco"": 50,
  ""auto_with_reset"": 60,
  ""custom"": 70, 
}

def sigterm_handler(_signo, _stack_frame):
    # Raises SystemExit(0):
    sys.exit(0)

def connect_mqtt() -> mqtt_client:
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            print(""Connected to MQTT Broker!"")
        else:
            print(""Failed to connect, return code %d\n"", rc)

    client = mqtt_client.Client(client_id)
    client.on_connect = on_connect
    client.connect(broker, port)
    return client


def subscribe(client: mqtt_client):
    def on_setpoint_message(client, userdata, msg):
        dt = datetime.now().strftime(""%d/%m/%Y %H:%M:%S"")
        #print(f""{dt} - Setpoint: `{msg.payload.decode()}` from `{msg.topic}` topic"")
        response = requests.get(f""{domoticz_url}/json.htm?type=command&param=setsetpoint&idx=245&setpoint={msg.payload.decode()}"")	

    def on_temp_message(client, userdata, msg):
        dt = datetime.now().strftime(""%d/%m/%Y %H:%M:%S"")
        #print(f""{dt} - Temperature: `{msg.payload.decode()}` from `{msg.topic}` topic"")
        response = requests.get(f""{domoticz_url}/json.htm?type=command&param=udevice&idx=246&nvalue=0&svalue={msg.payload.decode()}"")	

    def on_system_mode_message(client, userdata, msg):
        dt = datetime.now().strftime(""%d/%m/%Y %H:%M:%S"")
        print(f""{dt} - System mode: `{msg.payload.decode()}` from `{msg.topic}` topic"")
        url = f""{domoticz_url}/json.htm?type=command&param=switchlight&idx=247&switchcmd=Set%20Level&level={system_mode_dict[msg.payload.decode()]}""
        print(url)
        response = requests.get(url)	
        print(response)

    client.subscribe(topic)
    client.message_callback_add(""evohome/evogateway/ctl_controller/temperature/temperature"", on_temp_message)
    client.message_callback_add(""evohome/evogateway/ctl_controller/setpoint/setpoint"", on_setpoint_message)
    client.message_callback_add(""evohome/evogateway/ctl_controller/system_mode/system_mode"", on_system_mode_message)


def run():
    client = connect_mqtt()
    subscribe(client)
    client.loop_forever()

if __name__ == '__main__':
    signal.signal(signal.SIGTERM, sigterm_handler)
    try:
        run()
    except KeyboardInterrupt:
        print('Interrupted')
        sys.exit(0)
```
It's not the prettiest script in the world, but I'd like to get it fully functioning and robust before I clean it up. Can anyone help me point out what I'm doing wrong or give me tips on how to analyze this problem further?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47sG1H,paho.mqtt.python,1001418055,626,NA,schef,775502,schef,zvanstefan@gmail.com,NA,2021-12-27T08:10:59Z,2021-12-27T08:10:59Z,"Hi guys,
i have similar issue to this one where my client continues to publish messages but stops receiving them. It is started through systemd and restart fixes the problem.

[Here](https://github.com/schef/rpi_remote_mqtt/blob/9acef1dca53b8b4a19cbdbea579dd5b1b1693593/src/main.py) is my source code.

Only logs i get looks like this:

```
Dec 19 21:53:48.463784 alarmpi python[292]: [19.12 21:53:48.462] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:50.104132 alarmpi python[292]: [19.12 21:53:50.102] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:51.855444 alarmpi python[292]: [19.12 21:53:51.846] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:53.584828 alarmpi python[292]: [19.12 21:53:53.583] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:55.373861 alarmpi python[292]: [19.12 21:53:55.372] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:57.115493 alarmpi python[292]: [19.12 21:53:57.106] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:53:58.885446 alarmpi python[292]: [19.12 21:53:58.875] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:00.594539 alarmpi python[292]: [19.12 21:54:00.593] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:02.342644 alarmpi python[292]: [19.12 21:54:02.341] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:04.064335 alarmpi python[292]: [19.12 21:54:04.063] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:05.784226 alarmpi python[292]: [19.12 21:54:05.782] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:07.484318 alarmpi python[292]: [19.12 21:54:07.483] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:09.265547 alarmpi python[292]: [19.12 21:54:09.253] [INF] [MQTT]: CONNACK received with code Success.
Dec 19 21:54:10.994314 alarmpi python[292]: [19.12 21:54:10.993] [INF] [MQTT]: CONNACK received with code Success.
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs47sG1H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48jjLi,paho.mqtt.python,1015952098,626,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2022-01-19T00:16:40Z,2022-01-19T00:16:40Z,"I'd suggest moving the call to `subscribe` into `on_connect` (see the example in the [readme](https://github.com/eclipse/paho.mqtt.python#getting-started)). 

If the connection goes down and the client reconnects then any existing subscriptions will be lost (`clean_session` defaults to `True`  so subscriptions will not survive a loss of connection). Calling `subscribe` from the `on_connect` callback means that the subscription will be reinstated following reconnection. See [this answer](https://github.com/eclipse/paho.mqtt.python/issues/398#issuecomment-670545108) from Roger.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48jjLi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48kaXs,paho.mqtt.python,1016178156,626,NA,schef,775502,schef,zvanstefan@gmail.com,NA,2022-01-19T08:03:31Z,2022-01-19T08:03:31Z,Thanks. I have updated the code and will see what happens. :),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48kaXs/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qaJLj,paho.mqtt.python,1785238243,626,NA,fffonceca,48364596,Francisco Fonseca,,NA,2023-10-30T13:47:06Z,2023-10-30T13:47:06Z,@MattBrittan Hi!. Keeping `clean_session=False` should do the trick of mantaining previous subscribes. So why after a long period of time the client losses all receiving messages but broker appears to be OK?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qaJLj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qcTOC,paho.mqtt.python,1785803650,626,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-10-30T18:22:46Z,2023-10-30T18:22:46Z,"> So why after a long period of time the client losses all receiving messages but broker appears to be OK?

In theory a qos1+ subscription can last forever (MQTT V3) if you always connect with `cleansession=false`. However real life does not always match up to theory and things go wrong (e.g. broker restarted and fails to load sessions from storage) and the spec is not always followed (sometimes for good reason, many brokers set a limit to how long a session state is retained).

If you have a specific problem I'd suggest asking it in a different issue (or ideally somewhere like stackoverflow if it's not a bug in this client).

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qcTOC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/626,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXS1M,paho.mqtt.python,1868377420,626,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T22:02:05Z,2023-12-23T22:02:05Z,Closing as it looks like an answer was provided (and the question has been inactive for some time).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXS1M/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/627,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/627,paho.mqtt.python,1073613753,627,Leaking socketpair filedescriptors to the garbage collector is too easy to happen,hadrava,9431955,Jenda Hadrava,,OPEN,2021-12-07T17:46:50Z,2024-01-08T03:34:50Z,"The only way to close sockets created by function `_socketpair_compat()` is by an actual deletion of the client object. I think, it would be better (less confusing) to close them also from `loop_stop()`.

The problem with current situation is, that it is really easy to leak a mqtt client object itself to the garbage collector:
```python3
import paho.mqtt.client as mqtt

class Leak:
    def __init__(self):
        self.mqttc = mqtt.Client()
        self.mqttc.on_connect = self.on_connect

    def start(self):
        self.mqttc.connect(""127.0.0.1"", 1883)
        self.mqttc.loop_start()

    def on_connect(self, client, userdata, flags, rc, properties=None):
        self.mqttc.subscribe(""leaktest"", qos=2)

    def stop(self):
        self.mqttc.disconnect()
        self.mqttc.loop_stop()

leak = Leak()
leak.start()
leak.stop()
del(leak)
```

There is object reference loop: directly from object `leak` to `self.mqttc` and then back using the `on_connect()` method. This implies, that both objects are leaked to garbage collector when `del(leak)` is executed. That would be completely fine, if none of the objects is holding any valuable resources. But in case of `paho.mqtt.client`, it also leaks two opened file-descriptors for `_sockpairR` and `_sockpairW`.

Because the default limit of filedescriptors on Linux is only 1024, the garbage collection may happen too late. Here is example which is able to reach this limit using solely mqtt client + some memory allocations to trick the garbage collector. 

It allocates a lot of simple objects (approx. 3.7 GB) and then in loop: creates new client, do some work, disconnects and restarts. Beware: this script needs something around 4.1 GB of RAM in our case. I recommend to monitor RAM usage and socket usage (something like `htop` and `watch --interval=0.1 'ss -p | grep python | wc -l'`).

```python3
### WARNING: be sure to have at least 4.5 GB of free RAM before running this

import paho.mqtt.client as mqtt
import time
import socket
import gc

class Leak:
    def __init__(self):
        self.mqttc = mqtt.Client()
        self.mqttc.on_connect = self.on_connect

    def start(self):
        self.mqttc.connect(""127.0.0.1"", 1883)
        self.mqttc.loop_start()

    def on_connect(self, client, userdata, flags, rc, properties=None):
        self.mqttc.subscribe(""leaktest"", qos=2)

    def stop(self):
        self.mqttc.disconnect()
        self.mqttc.loop_stop()


class DummyObjectToTrickGC:
    def __init__(self, prev):
        self._prev = prev

def do_work(dummies):
    for i in range(7000):
        dummies.append(DummyObjectToTrickGC(dummies[-1]))
    print(gc.get_stats())


dummies = []
dummies.append(DummyObjectToTrickGC(None))

# About 3.7 GB of allocations to trick the garbage collector
# to not run so often for generation 2 objects.
for i in range(3000):
    do_work(dummies)


for i in range(512):
    leak = Leak()
    leak.start()

    # Realistic times might be several seconds or even hours, but that has
    # no effect on gc's behavior. Using just 0.1 to finish in usable time.
    time.sleep(0.1)

    # Some memory allocations to move sockets to generation 2 of gc
    # while they are still reachable.
    do_work(dummies)

    leak.stop()
    time.sleep(0.1)
```
In our setup (`paho-mqtt==1.5.1` or `paho-mqtt==1.6.1` on Debian Buster with Python 3.7), none of the sockets is closed by gc and whole script crashes (after aprox. 2.5 minutes) with:
```
Traceback (most recent call last):
  File ""leak.py"", line 47, in <module>
  File ""leak.py"", line 16, in start
  File ""/tmp/socket-leak/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 1795, in loop_start
  File ""/tmp/socket-leak/venv/lib/python3.7/site-packages/paho/mqtt/client.py"", line 291, in _socketpair_compat
  File ""/usr/lib/python3.7/socket.py"", line 212, in accept
OSError: [Errno 24] Too many open files
```

I think this script may resemble not-so-unreasonable application which wants to restart almost everything (including the mqtt client) on some error, but still want avoid restarting whole python interpreter and keep few gigabytes of data in memory.

I am not sure, if adding `self._reset_sockets(sockpair_only=True)` at the end of `loop_stop()` is sufficient fix for every supported usage of the library. (It should not be enough at least for the obsolete `loop()`.) I also do not know if the similar issue is not present with the main socket when the error is caused by the remote side.

Thank you for any thoughts on this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/627/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/627,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49jThW,paho.mqtt.python,1032665174,627,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2022-02-08T14:24:28Z,2022-02-08T14:24:28Z,"I was encountering the same issue (too many open files) when using paho (using `loop_start` semantics, and not using `del`), and the issue was blocking our CI runs, as we would open & close clients often running through tests. The proposed solution worked for me. I replaced paho's `client` with a thin wrapper:

```
from paho.mqtt.client import Client as PahoClient

class Client(PahoClient):
    def loop_stop(self):
        super().loop_stop()
        self._reset_sockets(sockpair_only=True)
```

and CI was able to run again. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49jThW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628,paho.mqtt.python,1074577240,628,Error unpacking ReasonCodes in Python2.7,bgusach,1668296,Bor González Usach,bgusach@gmail.com,CLOSED,2021-12-08T16:10:54Z,2023-12-07T21:30:48Z,"Hello there, 

I've got a test that used to run fine with paho-mqtt 1.5.1 on Python 2.7 but now it's failing. Here's the traceback:

```
  [irrelevant frames]
   client.loop()
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 1120, in loop
    return self._loop(timeout)
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 1164, in _loop
    rc = self.loop_read()
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 1556, in loop_read
    rc = self._packet_read()
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 2439, in _packet_read
    rc = self._packet_handle()
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 3045, in _packet_handle
    return self._handle_disconnect()
  File ""c:\...\eggs\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\client.py"", line 3220, in _handle_disconnect
    reasonCode.unpack(self._in_packet['packet'])
  File ""c:\...\paho_mqtt-1.6.1-py2.7.egg\paho\mqtt\reasoncodes.py"", line 166, in unpack
    c = ord(c)
TypeError: ord() expected string of length 1, but int found
```

Here's the body of `unpack`:

```
def unpack(self, buffer):
    c = buffer[0]
    if sys.version_info[0] < 3:
        c = ord(c)
    name = self.__getName__(self.packetType, c)
    self.value = self.getId(name)
    return 1
```

Apparently the reason for this problem is that the argument `buffer` used to be a `bytes` object (or `str` in Python2) on version 1.5.1 but now it's a `bytearray`... which causes `buffer[0]` to return an `int` instead of a `str`/`bytes` object with length of 1... and then subsequently the call to `ord` fails. [Here where the type was defined on 1.5.1](https://github.com/eclipse/paho.mqtt.python/blob/v1.5.1/src/paho/mqtt/client.py#L593), and [here on 1.6.1](https://github.com/eclipse/paho.mqtt.python/blob/v1.6.1/src/paho/mqtt/client.py#L570).

The solution seems clear to me: remove the `if sys.version_info[0] < 3:` branch, as there is no need to check if python2 or 3 if we've got already an int.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hUrp,paho.mqtt.python,1015368425,628,NA,sfphh4,81444142,,,NA,2022-01-18T12:34:30Z,2022-01-18T12:34:30Z,"I dont think we should focus on this issue due to the sunset of Python 2

https://www.python.org/doc/sunset-python-2/

There is already an issue for dropping support: https://github.com/eclipse/paho.mqtt.python/issues/279","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hUrp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hbMI,paho.mqtt.python,1015395080,628,NA,bgusach,1668296,Bor González Usach,bgusach@gmail.com,NA,2022-01-18T13:07:44Z,2022-01-18T13:07:44Z,"Reasonable, although it makes my life a little harder on the short term.

I guess the next necessary step would be to drop support officially, i.e. update the README, drop python2 package classifiers, etc.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hbMI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/628,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCeK0,paho.mqtt.python,1846141620,628,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T21:30:47Z,2023-12-07T21:30:47Z,Closing due to inactivity and because it should be covered by #279 (probably should have dropped Python 2 support some time ago!).  This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCeK0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/630,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/630,paho.mqtt.python,1087303980,630,async message_callback_add,panla,41326348,panla,,CLOSED,2021-12-23T01:45:39Z,2024-01-08T03:19:53Z,"
```python
client.message_callback_add(topic, callback)

async callback(client, userdata, msg):
    await ...
    pass

```

```text
how can i use an async func to message_callback_add
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/630/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/630,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE5nH,paho.mqtt.python,1880332743,630,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:19:52Z,2024-01-08T03:19:52Z,"I'm going to close this due to it's age and the low level of detail provided. Please feel free to reopen but please describe your requirement in more detail (alternatively, you are likely to get an answer more quickly at stackoverflow but would definitly need more detail there).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE5nH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/632,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/632,paho.mqtt.python,1096693125,632,Message data instance types not validated when passed down in UserData -> ugly exception,ikkemaniac,845292,,,OPEN,2022-01-07T21:47:02Z,2024-01-08T02:33:56Z,"```paho.mqtt.__version__```: 1.5.1
py version: 3.9.7

When using publish.multiple() and supplying ```""retain"": str(""True"")``` the following ugly exception will be returned:
```
Exception has occurred: TypeError
unsupported operand type(s) for |: 'int' and 'str'
  File ""myfile.py"", line 26, in send_stuff
    publish.multiple(
...
```
was able to trace it down to:
```
Exception has occurred: TypeError 
unsupported operand type(s) for |: 'int' and 'str'
  File ""/usr/lib/python3/dist-packages/paho/mqtt/client.py"", line 2507, in _send_publish
    command = PUBLISH | ((dup & 0x1) << 3) | (qos << 1) | retain
...
```
so the exception happens here (v1.5.1):

https://github.com/eclipse/paho.mqtt.python/blob/42f0b13001cb39aee97c2b60a3b4807314dfcb4d/src/paho/mqtt/client.py#L2497-L2507

```retain``` in my case was ```str``` not ```bool``` and thus results in an str to int comparison

this can probably easily be fixed by adding but i'm unfamiliar with y'alls coding practices.
```and isinstance(retain, bool)``` at the end of the assert
https://github.com/eclipse/paho.mqtt.python/blob/42f0b13001cb39aee97c2b60a3b4807314dfcb4d/src/paho/mqtt/client.py#L2500-L2501
 

 and isinstance(retain, bool)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/632/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/632,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE0Fa,paho.mqtt.python,1880310106,632,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T02:33:55Z,2024-01-08T02:33:55Z,"I can see your point; the exception is a bit difficult to understand. Having said that, I'm not sure that it's realistic to check the type of all parameters passed to the library. I'll tag this as an enhancement and we can see what others think.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE0Fa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/633,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/633,paho.mqtt.python,1100780332,633,Missing epl-v20 in official 1.6.1 tarball,ffontaine,1485263,Fabrice Fontaine,,CLOSED,2022-01-12T20:54:07Z,2023-12-22T21:24:20Z,The [official 1.6.1 tarball](https://files.pythonhosted.org/packages/f8/dd/4b75dcba025f8647bc9862ac17299e0d7d12d3beadbf026d8c8d74215c12/paho-mqtt-1.6.1.tar.gz) available on pypi is missing `epl-v20`. The tarball only contains `LICENSE.txt` and `edl-v10`.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/633/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/633,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48SqMB,paho.mqtt.python,1011524353,633,NA,jamesmyatt,1047337,James Myatt,,NA,2022-01-12T22:56:37Z,2022-01-12T22:56:37Z,Can you open a PR to fix MANIFEST.in?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48SqMB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/633,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48UBDt,paho.mqtt.python,1011880173,633,NA,ffontaine,1485263,Fabrice Fontaine,,NA,2022-01-13T07:48:37Z,2022-01-13T07:48:37Z,I opened a PR as requested,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48UBDt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,paho.mqtt.python,1100840867,634,Persistent out messages,ttichy,210328,Tomas Tichy,,OPEN,2022-01-12T22:15:26Z,2024-04-10T16:36:46Z,"It looks like messages that are published while there was no connection to the broker are stored in memory only. I.e. not persisted to the disk.
If the paho client happens to restart (or the computer it runs on does), these will be lost.

I feel like if this was an issue, it would be already implemented. Am I  the only one with a use case for persistent storage, or am I missing something?

Thanks!


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hPj6,paho.mqtt.python,1015347450,634,NA,sfphh4,81444142,,,NA,2022-01-18T12:05:58Z,2022-01-18T12:05:58Z,"Well you are not the only one with this use case. We had a similar use case and we developed a mongoDB based backend to store the messages and delete them from mongo only when we receive an ack from Broker (using QOS1).

I do wonder if we should add persistent memory storage at library level itself, or should we create a new library, that uses MQTT library as a sub library to do this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48hPj6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48ms0K,paho.mqtt.python,1016777994,634,NA,ttichy,210328,Tomas Tichy,,NA,2022-01-19T19:05:06Z,2022-01-19T19:05:06Z,Makes sense to me that we would add persistent storage at the library level (I believe the Java client already does this). I wonder if there is interest in a PR for this project that does that?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48ms0K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs484fJa,paho.mqtt.python,1021440602,634,NA,ttichy,210328,Tomas Tichy,,NA,2022-01-25T17:35:48Z,2022-01-25T17:35:48Z,"@sfphh4 - when do you delete the message from your MongoDb backend? `on_publish()` seems like a good candidate, but the `mid` passed is not a great identifier (Since it starts over on every connection)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs484fJa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs490tCw,paho.mqtt.python,1037226160,634,NA,sfphh4,81444142,,,NA,2022-02-12T13:28:24Z,2022-02-12T13:28:24Z,"here is the algo we have used
1. wrapper library publish function will simply insert the MQTTMessage object into a python Queue object, say Queue1
2. another thread (blocking at the Queue1) will take that object and insert it into mongoDB and write the MQTTMessage object, with ObjectID of MongoDB into another Queue, say Queue2
3. another thread, block on  Queue2, upon getting the message, checks if mqtt client is in a connected state (see https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L1337), and then checks the number of messages in flight (see https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L1590). If you are connected and the number of messages in air are less than you acceptable threshold, then transmit the message, and pass MQTTMessage, ObjectID and MQTTMessageInfo to another queue, say Queue3
4. another thread, blocking on Queue3, will wait till the message is delivered, and then upon delivery, delete the message

Which QOS are you looking to work with? 1 or 2? If you application requires 2, then you will need to write a lot of code to cover the many edge cases that may arise, to avoid repeat of message transmission.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs490tCw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4-CbA6,paho.mqtt.python,1040822330,634,NA,ttichy,210328,Tomas Tichy,,NA,2022-02-15T21:41:14Z,2022-02-15T21:41:14Z,"I only have to worry about QOS 1. I ended up with this scenario

- prior to publishing, store the message with key=mid
- in `on_publish`, remove the message using the `mid` argument in the callback
- in `on_connect` check if this is the first connect, or reconnects. If it's the first connect, then paho has been restarted so send any messages in the persistent storage (and remove them right after)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4-CbA6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCL1e,paho.mqtt.python,1711848798,634,NA,tibboh,10303065,,,NA,2023-09-08T15:27:55Z,2023-09-08T15:27:55Z,"@ttichy I'm curious about your solution. You say that you store the message with key=mid prior to publishing. But isn't mid available only after you call ``publish()``?
With QoS=0, ``publish()`` may actually call ``on_publish`` before returning, making it difficult to store the message with its ``mid`` and then remove it in ``on_publish``. I have some ideas for a workaround, but I'm curious how other people solved this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mCL1e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55lh7H,paho.mqtt.python,2039881415,634,NA,joaopalma5,34012523,,,NA,2024-04-05T13:58:07Z,2024-04-05T13:58:07Z,"> here is the algo we have used
> 
> 1. wrapper library publish function will simply insert the MQTTMessage object into a python Queue object, say Queue1
> 2. another thread (blocking at the Queue1) will take that object and insert it into mongoDB and write the MQTTMessage object, with ObjectID of MongoDB into another Queue, say Queue2
> 3. another thread, block on  Queue2, upon getting the message, checks if mqtt client is in a connected state (see https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L1337
>    ), and then checks the number of messages in flight (see https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L1590
>    ). If you are connected and the number of messages in air are less than you acceptable threshold, then transmit the message, and pass MQTTMessage, ObjectID and MQTTMessageInfo to another queue, say Queue3
> 4. another thread, blocking on Queue3, will wait till the message is delivered, and then upon delivery, delete the message
> 
> Which QOS are you looking to work with? 1 or 2? If you application requires 2, then you will need to write a lot of code to cover the many edge cases that may arise, to avoid repeat of message transmission.

Why not publish this solution to the community?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55lh7H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/634,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56Ei7d,paho.mqtt.python,2048011997,634,NA,ttichy,210328,Tomas Tichy,,NA,2024-04-10T16:36:44Z,2024-04-10T16:36:44Z,"> @ttichy I'm curious about your solution. You say that you store the message with key=mid prior to publishing. But isn't mid available only after you call `publish()`? With QoS=0, `publish()` may actually call `on_publish` before returning, making it difficult to store the message with its `mid` and then remove it in `on_publish`. I have some ideas for a workaround, but I'm curious how other people solved this.

Hey @tibboh - sorry I just came across your question. Alas, I don't work on that project anymore and I can't really remember what we ended up doing.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56Ei7d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,paho.mqtt.python,1104800898,636,reconnect Exception in threaded loop,redflo,11243204,Florian Gleixner,,CLOSED,2022-01-15T18:00:49Z,2024-07-18T00:13:38Z,"I think, paho mqtt client should stay trying to reconnect on error. But in case the mqtt Server is shutdown, the threaded loop stops after throwing a unhandled exception. I did even not manage to use reconnect() on on_disconnect callback.

Simple test case:

```
$ cat testcase.py
#!/usr/bin/env python2

import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish
import time
import json

clientname = ""pi4""
hostname = '192.168.178.100'
port = 1883
timeout = 60
client = mqtt.Client(client_id = clientname,clean_session = False)

client.connect_async(hostname, port, timeout)
client.loop_start()

while True:
    topic = ""testcase""
    data = { 'test': 1  }
    client.publish(topic, json.dumps(data))
    time.sleep(1)

```

Runnning testcase.py. The Exception dumps, when i shut down the mqtt server:
```
$ ./testcase.py 
Exception in thread Thread-1:
Traceback (most recent call last):
  File ""/usr/lib/python2.7/threading.py"", line 801, in __bootstrap_inner
    self.run()
  File ""/usr/lib/python2.7/threading.py"", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File ""/home/pi/ds18temp/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/home/pi/ds18temp/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1779, in loop_forever
    self.reconnect()
  File ""/home/pi/ds18temp/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 1044, in reconnect
    sock = self._create_socket_connection()
  File ""/home/pi/ds18temp/local/lib/python2.7/site-packages/paho/mqtt/client.py"", line 3685, in _create_socket_connection
    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)
  File ""/usr/lib/python2.7/socket.py"", line 575, in create_connection
    raise err
error: [Errno 111] Connection refused
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5asbdj,paho.mqtt.python,1521596259,636,NA,tiehfood,22456525,tiehfood,,NA,2023-04-25T11:01:47Z,2023-04-25T11:01:47Z,I also encounter this problem. Can it be fixed? Or is there a workaround?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5asbdj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5avxpB,paho.mqtt.python,1522473537,636,NA,tiehfood,22456525,tiehfood,,NA,2023-04-25T21:59:54Z,2023-04-25T21:59:54Z,This problem doesn't occur on versions before 1.6.0,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5avxpB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEyWz,paho.mqtt.python,1880303027,636,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T02:19:38Z,2024-01-08T02:19:38Z,"The next release is dropping support for Python 2.7; as such it's unlikely that this issue will be addressed. My guess would be that this issue is the result of [this commit](https://github.com/eclipse/paho.mqtt.python/commit/4910b785).

Given that Python 2.7 was sunset a few years back I think that this issue should probably be closed (unless anyone has experienced it with a later release). However, for now, I'm going to tag it as ""More Info Needed""; the extra info being replication on v3.7+ or volunteers to maintain Python 2 compatibility. If there is no extra info in a month we will look to close it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEyWz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/636,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNRyv,paho.mqtt.python,2234850479,636,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:13:38Z,2024-07-18T00:13:38Z,Closing due to age/inactivity.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNRyv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,paho.mqtt.python,1109431142,637,ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2483),matrixbegins,342610,Ankur Pandey,,OPEN,2022-01-20T15:19:44Z,2024-03-19T13:55:59Z,"My Env is:
```
Python 3.9.7 (default, Sep 16 2021, 08:50:36) 
[Clang 10.0.0 ] :: Anaconda, Inc. on darwin
paho-mqtt==1.6.1

```
I am trying to build an application that receives events/messages from multiple sources and at a fairly high rate (2000 - 3000 msgs/sec). My application does some data massaging and publishes it to ActiveMQ.
For few messages everything works well, however for few hundred messages things start falling apart and I get following error messages: 
```
File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/ssl.py"", line 1173, in send
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/threading.py"", line 973, in _bootstrap_inner
    return self.loop_write()
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 1577, in loop_write
Exception in thread ws_msg_handler:
Traceback (most recent call last):
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/threading.py"", line 973, in _bootstrap_inner

return self._sslobj.write(data)
ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2483)
    rc = self._packet_write()
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 649, in _sock_send
    rc = self._packet_write()
    self.run()
    mqtt_client.publish_message(get_topic_name(kyra_msg), orjson.dumps(kyra_msg))
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 2464, in _packet_write
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 2464, in _packet_write
    return self._sock.send(buf)
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/ssl.py"", line 1173, in send
    self.run()
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/threading.py"", line 910, in run
    write_length = self._sock_send(
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 649, in _sock_send
  File ""/Users/ankurpandey/Documents/projects/guardhat/ss-intl/integration/./libs/kyra_mqtt_client.py"", line 46, in publish_message
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/threading.py"", line 910, in run
    write_length = self._sock_send(
  File ""/Users/ankurpandey/opt/anaconda3/envs/slatesafety/lib/python3.9/site-packages/paho/mqtt/client.py"", line 649, in _sock_send
    self._target(*self._args, **self._kwargs)
  File ""/Users/ankurpandey/Documents/projects/guardhat/ss-intl/integration/./libs/slate_safety/ss_message_handler.py"", line 23, in process_ss_message

```

The code that is sending the data to ActiveMQ is as follows:

```
def on_message(self, wsapp, message):
        """"""
            handles message from Websocket
        """"""
        payload = orjson.loads(message)
        logger.debug(""message received from server: "" + str(payload))

        threading.Thread(target=process_ss_message,
                    name='ws_msg_handler',
                    kwargs={""message"": payload} ).start()
```
AND: 
```
def process_ss_message(message):
    start = time()
    target_msg = message_translater_to_target(message)
    logger.debug(""msg::"" + str(kyra_msg))

    mqtt_client = SSMQTTClient({})

    mqtt_client.publish_message(get_topic_name(target_msg), orjson.dumps(target_msg))
    logger.debug(f""Message conversion and processing time: {(time() - start) * 1000} ms"")

```

I did a quick google search to resolve this, and one of the solution was to use `pyOpenSSL` 
So I made a quick change in `lib/python3.9/site-packages/paho/mqtt/client.py` as follows:

```
import collections
import errno
import os
import platform
import select
import socket

ssl = None
try:
    # import ssl
    import urllib3.contrib.pyopenssl as ssl
except ImportError:
    pass
```

After this I didn't see this error and I even increased the message consumption rate. 
**It may not be a bug.** But I am trying to understand the reason behind it and how can I avoid it without changing the code of the library. I tried searching this in previous issues but was unable to find.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48p529,paho.mqtt.python,1017617853,637,NA,matrixbegins,342610,Ankur Pandey,,NA,2022-01-20T15:22:15Z,2022-01-20T15:22:15Z,"One reference that I found was here: 
https://github.com/psf/requests/issues/3006
However this is for request packages.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs48p529/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FeMa1,paho.mqtt.python,1165543093,637,NA,Sohaib90,43241257,Muhammad Sohaib Arshid,,NA,2022-06-24T12:50:36Z,2022-06-24T12:50:36Z,Did you figure this problem out? Would like to have some pointers because I am also facing this issue,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FeMa1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FmDE2,paho.mqtt.python,1167601974,637,NA,cartertinney,3613133,Carter Tinney,carter.tinney@microsoft.com,NA,2022-06-27T16:50:08Z,2022-06-27T16:50:08Z,I am also highly interested in the solution to this issue,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FmDE2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FpOxA,paho.mqtt.python,1168436288,637,NA,PaulFaguet,75682267,PaulFaguet,,NA,2022-06-28T08:58:20Z,2022-06-28T08:58:20Z,"Me too, i don't understand where it's coming from","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FpOxA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5F-HuX,paho.mqtt.python,1173912471,637,NA,Sohaib90,43241257,Muhammad Sohaib Arshid,,NA,2022-07-04T14:57:47Z,2022-07-04T14:57:47Z,"@cartertinney @PaulFaguet 
pip install ndg-httpsclient
pip install pyopenssl
pip install pyasn1

This helped solve my issue. I was experiencing this issue before but after I installed the packages, I did not face this issue again. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5F-HuX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GWrVc,paho.mqtt.python,1180349788,637,NA,furgoose,4525695,Fergus Longley,,NA,2022-07-11T12:29:05Z,2022-07-11T12:29:05Z,"It's my understanding that this happens because the client is trying to publish a message and a PUBACK at the same time (from two threads), but I'm not sure of the correct way to avoid/fix this","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GWrVc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Ge1G3,paho.mqtt.python,1182486967,637,NA,ericGTT,31113742,Eric ,,NA,2022-07-12T20:48:00Z,2022-07-12T20:48:00Z,"Any luck? 
I'm on an AWS EC2 to IOT Core. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Ge1G3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GjW0a,paho.mqtt.python,1183673626,637,NA,ericGTT,31113742,Eric ,,NA,2022-07-13T21:00:34Z,2022-07-13T21:00:34Z,"I got mine to work.  If you are using Certificates and you don't wait until the connection handshake finishes before you publish then you will get the:
ssl.ssleoferror: eof occurred in violation of protocol (_ssl.c:2396) 

Not sure if this is your issue. But worked for me.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GjW0a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GkS8z,paho.mqtt.python,1183919923,637,NA,matrixbegins,342610,Ankur Pandey,,NA,2022-07-14T02:39:57Z,2022-07-14T02:39:57Z,"@ericGTT I think so far this is the best explanation. I had guessed (without looking into code) either too many handshake requests are being generated as I was trying to send message in different threads/async functions. This is certainly not the issue with any server so I am sure, Mosquitto or AWS IoT or any other platform will work. If we had something like a completely initialized connection pool then this problem may not come. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GkS8z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GmcZc,paho.mqtt.python,1184482908,637,NA,ericGTT,31113742,Eric ,,NA,2022-07-14T13:58:14Z,2022-07-14T13:58:14Z,"@matrixbegins I was running the same python script on my computer at home and on a windows EC2 in AWS. 
The one at home worked the one on EC2 didn't. I just (after a lot of googling and not finding much and wiresharking it) put a delay ""time.sleep"" after the connection to give it a little time for a handshake and it works on both now. Not the most elegant solution but my script is just a test script. 
I'm sure there is a way to check the connection status but I didn't look for that. Good luck.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5GmcZc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1aTF,paho.mqtt.python,1742054597,637,NA,gdt,515284,Greg Troxel,,NA,2023-10-01T11:46:16Z,2023-10-01T11:46:16Z,"I have seen this too, when the interface towards the broker is down and the address is gone.

It seems there are probably two things going on:
  - The socket really can get errored because the TCP connection fails, and this should lead to disconnect so the reconnect callbacks can happen.
  - It seems like there is a failure to have adequate locking.   Clients should not have to sequence.

I have opened #750 about mishandling of a network error.   I'm declaring this issue to be about the error happening other than when the network causes it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1aTF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEvOz,paho.mqtt.python,1880290227,637,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T01:53:24Z,2024-01-08T01:53:24Z,Flagging this as a bug for now (its likely that #797 will provide a solution in many cases but lets see how that works out post the next release).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEvOz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ywdoZ,paho.mqtt.python,1925306905,637,NA,NafiGit,105824411,Nahfid Nissar,,NA,2024-02-03T12:21:07Z,2024-02-03T12:21:07Z,"```
raceback (most recent call last):
  File ""/usr/lib/python3.10/wsgiref/handlers.py"", line 138, in run
    self.finish_response()
  File ""/usr/local/lib/python3.10/dist-packages/django/core/servers/basehttp.py"", line 173, in finish_response
    super().finish_response()
  File ""/usr/lib/python3.10/wsgiref/handlers.py"", line 184, in finish_response
    self.write(data)
  File ""/usr/lib/python3.10/wsgiref/handlers.py"", line 293, in write
    self._write(data)
  File ""/usr/lib/python3.10/wsgiref/handlers.py"", line 467, in _write
    result = self.stdout.write(data)
  File ""/usr/lib/python3.10/socketserver.py"", line 826, in write
    self._sock.sendall(b)
  File ""/usr/lib/python3.10/ssl.py"", line 1266, in sendall
    v = self.send(byte_view[count:])
  File ""/usr/lib/python3.10/ssl.py"", line 1235, in send
    return self._sslobj.write(data)
ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2426)
```
Happened for me also.

Will go through the above solutions.

mine is a django prod app running on dev server
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ywdoZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/637,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53pCAU,paho.mqtt.python,2007244820,637,NA,Holundermann,6639547,Clemens Feuerstein,,NA,2024-03-19T13:54:44Z,2024-03-19T13:54:44Z,"We have the same problem while using locust with MQTT. When using TLS the messages are not published if the payload exceeds a certain limit - 2679 Bytes seem to work, 319740 does not. After a certain time period the broker disconnects the client due to a timeout. A solution would be highly appreciated!

Same code without TLS works flawless - also - so far as I can tell, if the payload stays low (< 1 KB). Seems to be some kind of a race condition/low level socket handling issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53pCAU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,paho.mqtt.python,1113496916,638,Issue with Python 3.10.2?  ModuleNotFoundError: No module named 'paho'?,Jibun-no-Kage,96628648,,,CLOSED,2022-01-25T06:51:28Z,2024-07-11T21:07:52Z,"Issue with Python 3.10.2?  ModuleNotFoundError: No module named 'paho'?

I have Python 3.9.2 and 3.10.2 installed.  When I run a given script under 3.9 it works, but on 3.10 it fails with the above error.

I installed paho.mqtt module via pip3 install paho-mqtt.  Seem like the install was somehow 3.9 specific?

\# pip3 install paho-mqtt
Looking in indexes: https://pypi.org/simple, https://www.piwheels.org/simple
Requirement already satisfied: paho-mqtt in /usr/local/lib/python3.9/dist-packages (1.6.1)

No sure if this a side effect of the module installation or how Python 3.10.2 was installed?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4830OH,paho.mqtt.python,1021264775,638,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2022-01-25T14:53:14Z,2022-01-25T14:53:14Z,"This looks like an environment issue on your machine.

> I have Python 3.9.2 and 3.10.2 installed.

How? Using virtualenvs? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4830OH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs486b2A,paho.mqtt.python,1021951360,638,NA,Jibun-no-Kage,96628648,,,NA,2022-01-26T07:59:00Z,2022-01-26T07:59:00Z,"Just installed 3.10.2 from source, so it defaults to /usr/local/bin.  Just started a simple script... to play with it, and I happen to grab one that used mqtt.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs486b2A/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs487XxA,paho.mqtt.python,1022196800,638,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2022-01-26T13:27:46Z,2022-01-26T13:27:46Z,Installing a new Python will wipe out any old packages. You likely need to reinstall paho with pip3. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs487XxA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIgY,paho.mqtt.python,1868597272,638,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T21:34:30Z,2023-12-24T21:34:30Z,Closing this due to inactivity; if the problem persists please reopen.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vYIgY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDGy2,paho.mqtt.python,1879862454,638,NA,Nehal98,52347191,Nehal Ahmad,,NA,2024-01-06T22:38:08Z,2024-01-06T22:38:08Z,"facing same issue, when running ""pip3 install paho-mqtt""
it says requirement already satisfied. but while running the code it says,  
""ModuleNotFoundError: No module named 'paho'""","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDGy2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDJJv,paho.mqtt.python,1879872111,638,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-06T23:16:47Z,2024-01-06T23:16:47Z,"@Nehal98 you would need to provide significantly more information (python versions, OS, use of virtualenvs etc). Consider opening a new issue (or, for a quicker answer, search for the error on StackOverflow and try asking there if existing questions don't help) as this issue is a couple of years old (which is why I closed it).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDJJv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ejas-,paho.mqtt.python,2223876926,638,NA,AlzZ88,53500444,,,NA,2024-07-11T20:34:05Z,2024-07-11T20:34:05Z,"same issue 
import paho.mqtt.client as mqtt
ModuleNotFoundError: No module named 'paho'

pip freeze in the venv:
```
betterproto==2.0.0b5
black==24.4.2
click==8.1.7
dnspython==2.6.1
grpclib==0.4.7
h2==4.1.0
hpack==4.0.0
hyperframe==6.0.1
isort==5.13.2
Jinja2==3.1.4
MarkupSafe==2.1.5
multidict==6.0.5
mypy-extensions==1.0.0
packaging==24.1
paho-mqtt==2.1.0
pathspec==0.12.1
platformdirs==4.2.2
python-dateutil==2.9.0.post0
python-etcd==0.4.5
six==1.16.0
```
tomli==2.0.1
typing_extensions==4.12.2
urllib3==2.2.2

> Python 3.10.12
> OS:
> Distributor ID: Ubuntu
> Description:    Ubuntu 22.04.3 LTS
> Release:        22.04
> Codename:       jammy","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ejas-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/638,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ejqcw,paho.mqtt.python,2223941424,638,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-11T21:07:30Z,2024-07-11T21:07:30Z,"@AlzZ88 - thanks for including the additional info. Unfortunately it's difficult to test this kind of thing because every environment is somewhat unique.  As a basic sanity check I spun up a 3.10.2 (and also 3.10.12) docker container with:

```
FROM python:3.10.2-bullseye

WORKDIR /app
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD [ ""python"", ""./test.py"" ]
```

As `requirements.txt` I used the result from your `pip freeze`, `test.py` was the [demo app](https://github.com/eclipse/paho.mqtt.python?tab=readme-ov-file#getting-started). This started up fine (and connected to `mqtt.eclipseprojects.io` as expected).

Because this example worked fine I'm confident the library *can* work with under python 3.10.2 (also checked with 3.10.12). Unfortunately it's really difficult to help further without a way of reproducing the issue (it does seem likely that the issue is something in your environment). I would suggest you ask at [StackOverflow](https://stackoverflow.com/search?q=%5Bpython%5D+%5Bpaho%5D+%22No+module%22+) - there are a lot more people monitoring questions there than the issues here.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ejqcw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,paho.mqtt.python,1114287311,640,MQTT payload size,namyamalik,45301559,,,CLOSED,2022-01-25T19:37:40Z,2024-01-08T03:37:38Z,"I have noticed that when I publish a message which has a payload size of above ~12KB, the broker (Mosquitto) simply ignores the message and closes the client connection. 

I am running the publisher client on Raspberry Pi OS & the broker on OpenWRT OS.

I have tried changing QoS levels. I have also tried modifying certain parameters in the mosquitto.conf file such as max_packet_size, max_queued_bytes, memory_limit, message_size_limit (even though these were all set to their maximum default values already).

This is a similar issue to https://github.com/eclipse/paho.mqtt.python/issues/107 but I am wondering if there is any fix?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs490sKp,paho.mqtt.python,1037222569,640,NA,sfphh4,81444142,,,NA,2022-02-12T13:13:26Z,2022-02-12T13:13:26Z,"not really a problem with the library I think.

What version of MQTT are you using?

You may want to examine https://mosquitto.org/man/mosquitto-conf-5.html, specifically max_packet_size","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs490sKp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_GGm4,paho.mqtt.python,1058564536,640,NA,,,,,NA,2022-03-03T22:23:16Z,2022-03-03T22:23:16Z,"It is not mosquitto related. It is the client.
Used my local mosquitto but also 2 public MQTT brokers. In all the cases I cannot send 100kB (not sure where is the threshold; 10kB is OK, 100kB - is not).
What's more - the same is working fine with Node.js 'mqtt' module or Python 'gmqtt'.

Another important fact is that for a big message mosquitto is logging 'Socket error on client ...' 

paho-mqtt version 1.6.1
mqtt protocol does not matter

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_GGm4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_Gkz7,paho.mqtt.python,1058688251,640,NA,ralight,79578,Roger Light,,NA,2022-03-04T00:10:46Z,2022-03-04T00:10:46Z,"This is an example that works for me. It connects, then in the connect callback it makes a subscription. In the subscribe callback it publishes a 100kB message to the topic it subscribed to. It reports when the client thinks the message has been published (I'm using QoS 1 here, so that means the broker has responded). When it receives the message from the broker it reports what size it is.

If it works for you then you might be able to see where the difference is with your code.

```
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, rc):
    mqttc.subscribe(""size/100kB"", qos=1)

def on_subscribe(mqttc, obj, mid, granted_qos):
    print(""Subscribed ok, now publishing"")
    mqttc.publish(""size/100kB"", ""0123456789""*10000, qos=1)

def on_publish(mqttc, obj, mid):
    print(""Publish callback"")

def on_message(mqttc, obj, msg):
    print(""Received message %d bytes long"" % (len(msg.payload)))
    mqttc.disconnect()

mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe
mqttc.on_publish = on_publish
mqttc.on_message = on_message

mqttc.connect(""test.mosquitto.org"", 1883, 60)

mqttc.loop_forever()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_Gkz7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/640,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE8Bg,paho.mqtt.python,1880342624,640,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:37:38Z,2024-01-08T03:37:38Z,"Closing this as a test app was provided that appeared to work and there has been no feedback since then.

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE8Bg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641,paho.mqtt.python,1125705608,641,connect_async() Reconnect not working on Unix,FabianGoettl,24296280,Fabian Göttl,,CLOSED,2022-02-07T09:09:07Z,2024-07-18T00:17:25Z,"Hello,

I am running connect_async() and loop_start(). If the connection drops, the client reconnects on Windows.
On an machine running an ARM Unix (alpine) the reconnect is not working. The on_socket_close callback of client is called once. Afterwards, no connection is tried again.

client = mqtt.Client()
client.on_connect = self.on_connect
client.on_disconnect = self.on_disconnect
client.on_message = self.on_message
client.on_socket_open = self.on_socket_open
client.on_socket_close = self.on_socket_close
client.connect_async(self.host, port=PORT, keepalive=self.keepalive)
client.loop_start()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49d5k-,paho.mqtt.python,1031248190,641,NA,FabianGoettl,24296280,Fabian Göttl,,NA,2022-02-07T09:26:48Z,2022-02-07T09:26:48Z,As workaround for now I am call stop_loop() in on_socket_close() and then create a new client.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs49d5k-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbdT,paho.mqtt.python,1868412755,641,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:57:30Z,2023-12-24T01:57:30Z,Can you please provide [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) showing the issue? (need a bit more info to ascertain what is happening).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbdT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/641,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNUlC,paho.mqtt.python,2234861890,641,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:17:24Z,2024-07-18T00:17:24Z,Closing due to inactivity. Please feel free to reopen if this is still happening with current releases (but plese include logs).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNUlC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/642,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/642,paho.mqtt.python,1127916308,642,Documentation does not mention differences in constructor/callback parameters for MQTTv5,smuskiew,37269491,Steve Muskiewicz,,OPEN,2022-02-09T00:51:52Z,2024-01-08T03:42:01Z,"It seems like the [pydocs for paho-mqtt](https://pypi.org/project/paho-mqtt/) are missing a few details regarding the MQTTv5 protocol:

* The `on_connect()` callback handler appears to need an additional `properties` parameter when used with v5.  However the [pydocs](https://pypi.org/project/paho-mqtt/#callbacks) don't mention this at all which leads to a confusing exception:
`TypeError: _on_connect() takes 5 positional arguments but 6 were given`
* It looks like the `Client()` constructor doesn't support/allow the `clean_session` parameter at all with v5.  Although the exception _does_ make this clear (`ValueError: Clean session is not used for MQTT 5.0`) this is not mentioned at all [in the pydocs for the constructor](https://pypi.org/project/paho-mqtt/#constructor-reinitialise).

Is it possible to update the pydocs to reflect the above for v5?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/642/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/642,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fkLvW,paho.mqtt.python,1603320790,642,NA,quocneo,30500751,Neo,,NA,2023-06-22T21:10:38Z,2023-06-22T21:10:38Z,"This issue priority should be the highest. API documents must be correct.
Some tutorials on Internet are updated with MQTTv5 but the number of arguments is still 5.
http://www.steves-internet-guide.com/python-mqtt-client-changes/

- Confusing error when using the old example for connecting
```
    raise ValueError('Clean session is not used for MQTT 5.0')
ValueError: Clean session is not used for MQTT 5.0
```

- Error on on_connect() callback
```
    on_connect(self, self._userdata,
TypeError: func_on_connect_cb() takes from 4 to 5 positional arguments but 6 were given
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fkLvW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,paho.mqtt.python,1132642187,643,How can we use MQTTv5 in client_sub-class.py or a class which inherits mqtt.Client,takerfume,18402076,Taketo Yoshida,yoshida.taketo1995@gmail.com,CLOSED,2022-02-11T13:59:52Z,2024-01-08T04:08:47Z,"I modified [client_sub-class.py](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub-class.py) to use MQTTv5 like below.

However I got an error.

Is there any way to use MQTTv5 for a class which inherits `mqtt.Client` class?
 
My code (MQTTv5 version of client_sub-class.py).
```
import paho.mqtt.client as mqtt
import json
from paho.mqtt.packettypes import PacketTypes

class MyMQTTClass(mqtt.Client):

    def on_connect(self, mqttc, obj, flags, rc, props):  # props is necessary for MQTTv5
        print(""Connected: '""+str(flags)+""',""+ f""obj:{obj}""+"" '""+str(rc)+""', '""+str(props))

    def on_connect_fail(self, mqttc, obj):
        print(""Connect failed"")

    def on_message(self, mqttc, obj, msg):
        # Get the response properties, abort if they're not given
        props = msg.properties
        if not hasattr(props, 'ResponseTopic') or not hasattr(props, 'CorrelationData'):
            print(""No reply requested"")
            return

        corr_id = props.CorrelationData
        reply_to = props.ResponseTopic

        # The command parameters are in the payload
        nums = json.loads(msg.payload)

        # The requested command is at the end of the topic
        res = 0


        # Now we have the result, res, so send it back on the 'reply_to'
        # topic using the same correlation ID as the request.
        print(""Sending response ""+str(res)+"" on '""+reply_to+""': ""+str(corr_id))
        props = mqtt.Properties(PacketTypes.PUBLISH)
        props.CorrelationData = corr_id

        payload = json.dumps(res)
        mqttc.publish(reply_to, payload, qos=1, properties=props)

    def on_publish(self, mqttc, obj, mid):
        print(""mid: ""+str(mid))

    def on_subscribe(self, mqttc, obj, mid, granted_qos):
        print(""Subscribed: ""+str(mid)+"" ""+str(granted_qos))

    def on_log(self, mqttc, obj, level, string):
        print(string)

    def run(self):
        self.connect(""broker"", 1883, 60)
        self.subscribe(""/cmd/camera/shutter"", qos=1) # このqosの値は0でいいのかも？

        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc

if __name__ == ""__main__"":
    mqttc = MyMQTTClass(client_id=""my_mqtt_class"", protocol=mqtt.MQTTv5)
    rc = mqttc.run()

    print(""rc: ""+str(rc))
```

Error I got.
```
client_1  | Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
client_1  | Sending SUBSCRIBE (d0, m1) [(b'/cmd/camera/shutter', 1)]
client_1  | Received CONNACK (0, 0)
client_1  | Caught exception in on_connect: on_connect() missing 1 required positional argument: 'props'
client_1  | Traceback (most recent call last):
client_1  |   File ""main.py"", line 4, in <module>
client_1  |     rc = mqttc.run()
client_1  |   File ""/clients/nodes/camera_node.py"", line 70, in run
client_1  |     rc = self.loop()
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1120, in loop
client_1  |     return self._loop(timeout)
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1164, in _loop
client_1  |     rc = self.loop_read()
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1556, in loop_read
client_1  |     rc = self._packet_read()
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 2439, in _packet_read
client_1  |     rc = self._packet_handle()
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 3039, in _packet_handle
client_1  |     return self._handle_connack()
client_1  |   File ""/root/.local/share/virtualenvs/clients-ClhoSkV5/lib/python3.8/site-packages/paho/mqtt/client.py"", line 3138, in _handle_connack
client_1  |     on_connect(
client_1  | TypeError: on_connect() missing 1 required positional argument: 'props'
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FePXf,paho.mqtt.python,1165555167,643,NA,Sohaib90,43241257,Muhammad Sohaib Arshid,,NA,2022-06-24T13:04:39Z,2022-06-24T13:04:39Z,"Have you tried initializing the mqtt.Client class and passing the MQTTv5 as the init argument?
Adding the following line of code to the __init___ function might be able to specify it. 
mqtt.Client.__init__(self, protocol=M!TTv5)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FePXf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5J2c46,paho.mqtt.python,1239010874,643,NA,amin-tayebi,41928033,Amin TAYEBI,,NA,2022-09-07T07:25:57Z,2022-09-07T07:25:57Z,"Hi no it doesn't work with above code, it shows this error: ""AttributeError: type object 'Client' has no attribute 'init'""

more over it has a typing error I corrected it:
mqtt.Client.init(self, protocol=MQTTv5)

Solution is in TTN forum please refer:
https://www.thethingsnetwork.org/forum/t/problem-retrieving-data-using-tts-mqtt-tab-py/53924/2","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5J2c46/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5J38Qc,paho.mqtt.python,1239401500,643,NA,Sohaib90,43241257,Muhammad Sohaib Arshid,,NA,2022-09-07T13:36:49Z,2022-09-07T13:36:49Z,"Of course it does not work because it is `mqtt.Client.__init__()`

How I have done in my application is something like this 

```
class MyClient (mqtt.Client): 
    def __init__(self):
       mqtt.Client.__init__(self, protocol=MQTTv5) 
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5J38Qc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/643,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFAGB,paho.mqtt.python,1880359297,643,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:08:46Z,2024-01-08T04:08:46Z,"Based on the above I believe this is probably resolved. However to test I ran the below which appeared to work fine. If you are still having issues please feel free to reopen with more details.

```
import paho.mqtt.client as mqtt
import json
from paho.mqtt.packettypes import PacketTypes

class MyMQTTClass(mqtt.Client):

    def on_connect(self, mqttc, obj, flags, rc, props):  # props is necessary for MQTTv5
        print(""Connected: '""+str(flags)+""',""+ f""obj:{obj}""+"" '""+str(rc)+""', '""+str(props))

    def on_connect_fail(self, mqttc, obj):
        print(""Connect failed"")

    def on_message(self, mqttc, obj, msg):
        # Get the response properties, abort if they're not given
        props = msg.properties
        if not hasattr(props, 'ResponseTopic') or not hasattr(props, 'CorrelationData'):
            print(""No reply requested"")
            return

        corr_id = props.CorrelationData
        reply_to = props.ResponseTopic

        # The command parameters are in the payload
        nums = json.loads(msg.payload)

        # The requested command is at the end of the topic
        res = 0


        # Now we have the result, res, so send it back on the 'reply_to'
        # topic using the same correlation ID as the request.
        print(""Sending response ""+str(res)+"" on '""+reply_to+""': ""+str(corr_id))
        props = mqtt.Properties(PacketTypes.PUBLISH)
        props.CorrelationData = corr_id

        payload = json.dumps(res)
        mqttc.publish(reply_to, payload, qos=1, properties=props)

    def on_publish(self, mqttc, obj, mid):
        print(""mid: ""+str(mid))

    def on_subscribe(self, mqttc, userdata, mid, reasonCodes, properties):
        print(""Subscribed: ""+str(mid)+"" ""+str(reasonCodes))

    def on_log(self, mqttc, obj, level, string):
        print(string)

    def run(self):
        self.connect(""mosquitto"", 1883, 60)
        self.subscribe(""/cmd/camera/shutter"", qos=1) # このqosの値は0でいいのかも？

        rc = 0
        while rc == 0:
            rc = self.loop()
        return rc

if __name__ == ""__main__"":
    mqttc = MyMQTTClass(client_id=""my_mqtt_class"", protocol=mqtt.MQTTv5)
    rc = mqttc.run()

    print(""rc: ""+str(rc))
```

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFAGB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/644,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/644,paho.mqtt.python,1133104603,644,Validator Function,sfphh4,81444142,,,CLOSED,2022-02-11T21:18:41Z,2024-01-08T10:12:07Z,"I am looking for a validator function for topic. I have a bunch of strings and I need to check if the strings are a valid mqtt topic or not.

What is the best way to achieve this?

I do not want to use regex to do this, and am hoping to use some function in the library already implemented to achieve this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/644/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/644,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGVa_,paho.mqtt.python,1880708799,644,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T10:12:06Z,2024-01-08T10:12:06Z,"The [v3 spec](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718039) sets the following requirements for the topic name:

>The Topic Name MUST be present as the first field in the PUBLISH Packet Variable header. It MUST be a UTF-8 encoded string [MQTT-3.3.2-1] as defined in section 1.5.3.   
>The Topic Name in the PUBLISH Packet MUST NOT contain wildcard characters [MQTT-3.3.2-2].   
>The Topic Name in a PUBLISH Packet sent by a Server to a subscribing Client MUST match the Subscription’s Topic Filter according to the matching process defined in Section 4.7  [MQTT-3.3.2-3]. However, since the Server is permitted to override the Topic Name, it might not be the same as the Topic Name in the original PUBLISH Packet.

So anything that meets the above is potentially a valid topic. I somehow think you have something else in mind when you say ""valid mqtt topic"" but without extra detail this is not possible to answer further.

Due to the age of the issue (sorry it took so long to reply!) I'm going to close it for now (hopefully the above is of some use).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGVa_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/645,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/645,paho.mqtt.python,1133252013,645,Can subscribe.simple accept a list of topics and return a list of values?,optio50,4461936,,,CLOSED,2022-02-11T23:00:57Z,2024-01-08T10:07:09Z,"Can ""subscribe.simple"" accept a list and return a list?

I am not able to have a list returned when a list is subscribed to

topic = [""$SYS/broker/connection/raspberrypi.test-mosquitto-org/state"", ""$SYS/broker/connection/raspberrypi.br-home""]  
print(topic)  
msg = subscribe.simple(topic, msg_count=2, hostname=""test.mosquitto.org"")  
print(msg.payload)  

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/645/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/645,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGTkg,paho.mqtt.python,1880701216,645,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T10:07:09Z,2024-01-08T10:07:09Z,"`subscribe.simple` can accept a list of topics (and will subscribe to all topics). It returns a list of messages; for example:

```
import paho.mqtt.subscribe as subscribe

topics = [""$SYS/broker/clients/maximum"", ""$SYS/broker/messages/received""]

m = subscribe.simple(topics, hostname=""mosquitto"", retained=False, msg_count=2)
for a in m:
    print(a.topic)
    print(a.payload)
```

Output:

```
pythondocker-1  | $SYS/broker/clients/maximum
pythondocker-1  | b'1'
pythondocker-1  | $SYS/broker/messages/received
pythondocker-1  | b'6'
```

I'm not sure if that really answers your question (but it shows what `simple` does`).

Given the age of the issue and the fact that the above probably answers the questions I'm going to close this. Please do reopen if you have further questions (but please provide more detail and show what you have tried).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGTkg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646,paho.mqtt.python,1138256695,646,Any support for PKCS#11 compatible Hardware Security Module (HSM)?,theinhtut,3690421,Thein Htut,theinhtut.dec@gmail.com,OPEN,2022-02-15T06:43:53Z,2024-07-18T00:18:40Z,"Hello. Does paho.mqtt support a PKCS#11 compatible Hardware Security Module (HSM)?

My device private key is currently stored in HSM or softHSM2. According to the documentation, `keyfile` is a string pointing to the PEM encoded private key.

Since device's private key is stored inside HSM, its private key cannot be retrieved. Is there any workaround to support HSM instead of using PEM encoded file from local storage? Thanks in-advance☺

```python
...
# Using PEM encoded file
client.tls_set(
    ca_certs=PATH_TO_ROOT_CERT,
    certfile=CERT_FILE,
    keyfile=""./device-private-key.pem"",
    cert_reqs=ssl.CERT_REQUIRED,
    tls_version=ssl.PROTOCOL_TLSv1_2,
    ciphers=None,
)
```

```python
...
# Using HSM or softHSM2 with PKCS#11
client.tls_set(
    ca_certs=PATH_TO_ROOT_CERT,
    certfile=CERT_FILE,
    keyfile=""pkcs11:object=deviceprivkey;type=private;pin-value=mypin"",
    cert_reqs=ssl.CERT_REQUIRED,
    tls_version=ssl.PROTOCOL_TLSv1_2,
    ciphers=None,
)
```

### References
[AWS IoT MQTT with PKCS#11 support][aws-iot-mqtt-pkcs]

[aws-iot-mqtt-pkcs]: https://github.com/aws/aws-iot-device-sdk-python-v2/tree/main/samples#pkcs11-pubsub","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGQG-,paho.mqtt.python,1880687038,646,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:58:00Z,2024-01-08T09:58:00Z,"You can pass a `ssl.SSLContext` directly to `client.tls_set_context`; I think this may be used to do what you require.

HSM's are not something this library supports directly, and I don't see it being added unless there is more demand and a simple example showing the approach.

I'll leave this open for now; but unless you are able to provide more info (or others step in) it will probably be closed in a month or so (apologies that it's taken so long to provide a reply!).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGQG-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AMb6r,paho.mqtt.python,2150743723,646,NA,IniterWorker,7583643,Walter Bonetti,,NA,2024-06-05T18:53:39Z,2024-06-05T18:53:39Z,"I've implemented a way to support PKCS#11 in the paho-mqtt Python library, building on my experience adapting azure-iot-sdk-python, which also relies on paho-mqtt. In my modifications, I've focused on enabling compatibility with both SSL.connection from PyOpenSSL and ssl.SSLContext. However, I'm currently deliberating whether to make PyOpenSSL a mandatory dependency.

As I'm not deeply entrenched in the Python ecosystem, I'd appreciate guidance from @MattBrittan or @jamesmyatt and/or any other party, on best practices for handling this new feature inside this library. I'm prepared to contribute and would like to ensure my changes align with the project's goals. Thank you in advance for your assistance

I will share a bit of code to help our collaboration:

```python
    def tls_set_context(
        self,
        context: ssl.SSLContext | SSL.Context | None = None,
    ) -> None:
        """"""Configure network encryption and authentication context. Enables SSL/TLS support.

        :param context: an ssl.SSLContext or OpenSSL.SSL.Context object. By default, this is given by
            ``ssl.create_default_context()`` if available.

        Must be called before `connect()`, `connect_async()` or `connect_srv()`.
        """"""
        if self._ssl_context is not None:
            raise ValueError('SSL/TLS has already been configured.')

        if context is None:
            context = ssl.create_default_context()

        self._ssl = True
        self._ssl_context = context

        # Ensure _tls_insecure is consistent with check_hostname attribute for ssl.SSLContext
        if isinstance(context, ssl.SSLContext) and hasattr(context, 'check_hostname'):
            self._tls_insecure = not context.check_hostname
        elif isinstance(context, SSL.Context):
            # PyOpenSSL Context does not have check_hostname attribute
            # Set _tls_insecure based on custom logic if necessary
            self._tls_insecure = False  # Assuming default to False for PyOpenSSL
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AMb6r/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/646,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AjecY,paho.mqtt.python,2156783384,646,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-06-09T20:47:23Z,2024-06-09T20:47:23Z,Sorry - I'm not really qualified to comment (just trying to help by closing some issues). @PierreF has been the most active committer recently so may be able to assist.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AjecY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/647,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/647,paho.mqtt.python,1147871235,647,thread problem,wttt-py,83765757,All Is Well,,CLOSED,2022-02-23T09:49:17Z,2024-01-08T09:39:17Z,"When I use multiple threads, such as connecting 5,000 terminals to send data, it is normal for me to send data once every 10 seconds, and the thread will freeze after a while, as long as the message rate is fast, the thread will freeze directly. live. How to solve this problem, thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/647/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/647,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_H76O,paho.mqtt.python,1059045006,647,NA,sfphh4,81444142,,,NA,2022-03-04T10:39:51Z,2022-03-04T10:39:51Z,so you have 5000 instances of mqtt client? And all of them are running their own managed thread?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_H76O/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/647,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGJSX,paho.mqtt.python,1880659095,647,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:39:16Z,2024-01-08T09:39:16Z,"I'm going to close this due to inactivity (a question was asked and not answered). Solving this kind of issue is likely to be tricky and we would need a lot more info (your code, logs etc). There are a few situations (covered in other issues) where the process may freeze; hopefully many of these are dealt with in the next release (but I'd guess we have not found them all and will need users help to find them).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGJSX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,paho.mqtt.python,1154706088,649,MessageExpiryInterval MQTT v5 support,maximehyh,36699994,maximehyh,,CLOSED,2022-03-01T00:33:42Z,2024-01-08T10:16:16Z,"Hello, 

I am currently using Paho MQTT in order to test some real time applications where data should (almost) not be stored within the broker (or at least no more than a few seconds). 

I have seen on MQTT's documentation that v5 could help me doing this through the usage of [Message Expiry Interval](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901064). 

I tried a few things based on the examples available in the tests section for [Session Expiry Interval](https://github.com/eclipse/paho.mqtt.python/blob/6dfdeba6ea6422d942f16e3b1f1bf4bd92dda480/tests/test_mqttv5.py#L377) and  [Publish Properties](https://github.com/eclipse/paho.mqtt.python/blob/6dfdeba6ea6422d942f16e3b1f1bf4bd92dda480/tests/test_mqttv5.py#L252). but did not manage to get the expected bahaviour. 

For example the below code does not seem to work:

```python
publish_properties = Properties(PacketTypes.PUBLISH)
publish_properties.MessageExpiryInterval = 1
client = mqtt.Client(protocol=mqtt.MQTTv5)
client.connect(IP, PORT, properties=publish_properties)
client.publish(
  topic,
  payload,
  retain=False,
  properties=publish_properties,
)
```
Is the `MessageExpiryInterval` feature implemented within Paho? 

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_hBH9,paho.mqtt.python,1065619965,649,NA,nealepetrillo,880097,Neale Petrillo,neale.a.petrillo@gmail.com,NA,2022-03-11T23:04:02Z,2022-03-11T23:04:02Z,Running into a similar problem trying to replicate the V311 clean session behavior. Using the `Properties.writeProperty()` function didn't get me anywhere. ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_hBH9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_lPdE,paho.mqtt.python,1066727236,649,NA,econeale,82894027,Neale Petrillo,,NA,2022-03-14T12:27:44Z,2022-03-14T12:27:44Z,"I can also report that this doesn't work: 

```
properties = Properties(PacketTypes.CONNECT)
properties.UserProperty = ('Message Expiry Interval', 30)
```

```
  File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 1088, in reconnect
    return self._send_connect(self._keepalive)
  File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 2752, in _send_connect
    packed_connect_properties = self._connect_properties.pack()
  File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/properties.py"", line 376, in pack
    buffer += self.writeProperty(identifier,
  File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/properties.py"", line 363, in writeProperty
    buffer += writeUTF(value[0]) + writeUTF(value[1])
  File ""/usr/local/lib/python3.9/site-packages/paho/mqtt/properties.py"", line 58, in writeUTF
    data = data if type(data) == type(b"""") else bytes(data, ""utf-8"")
TypeError: encoding without a string argument
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs4_lPdE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ZVCJo,paho.mqtt.python,1498686056,649,NA,call-me-matt,34400929,matt,,NA,2023-04-06T08:31:09Z,2023-04-06T08:31:09Z,"for me it works as expected. Maybe because you forgot to set the retain flag?

```
properties=Properties(PacketTypes.PUBLISH)
properties.MessageExpiryInterval=5 # retain messages for x seconds
ret = self.__mqtt_client.publish(restricted_data, payload, retain=1, qos=0, properties=properties)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ZVCJo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/649,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGXFr,paho.mqtt.python,1880715627,649,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T10:16:16Z,2024-01-08T10:16:16Z,"I'm going to close this based on the comment from @call-me-matt above (note that Message Expiry Interval only applies to PUBLISH and Will Properties). If users are still having issues then please feel free to reopen this issue.

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGXFr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651,paho.mqtt.python,1171504282,651,Neither on_connect or connect_fail_callback are called when a connection is not confirmed through CONNACK,preston-thomson,87030422,,,CLOSED,2022-03-16T20:16:44Z,2024-07-17T22:24:04Z,"Code Example:


```
import paho.mqtt.client as mqtt_client
from config import PREFIX, CLIENT_ID, ENDPOINT, PORT
import time
import json
import ssl


connflag = False

def on_log(client, userdata, level, buf):
    print(""log:"", buf)

def on_connect(client, userdata, flags, rc):
    connflag = True
    print(""Publishing..."")
    payload = {
      ""bot_info"": [], 
      ""timestamp"": int(time.time())
    }
    result = client.publish(PREFIX + ""/"" + CLIENT_ID + ""/"" + ""opState"", json.dumps(payload))
    result.wait_for_publish()

def on_disconnect(client, userdata, rc):
    print(""Disconnected:"", rc, userdata)

def on_message(client, userdata, message):
    print(""Message received:"", message)

def connect_fail_callback(client, userdata, flags, rc):
    print(""Connection failed:"", rc)


mqtt = mqtt_client.Client(CLIENT_ID, clean_session=True)
mqtt.on_message=on_message
mqtt.on_connect=on_connect
mqtt.on_disconnect=on_disconnect
mqtt.on_log = on_log
mqtt.connect_fail_callback=connect_fail_callback
mqtt.enable_logger()
mqtt.tls_set(ca_certs=""./ss-testing/certs/root_cert.crt"", certfile=""./ss-testing/certs/certfile.pem"", keyfile=""./ss-testing/certs/keyfile.pem"", cert_reqs=ssl.CERT_REQUIRED, tls_version=None, ciphers=None)
mqtt.tls_insecure_set(True)
mqtt.will_set(PREFIX + ""/"" + CLIENT_ID, json.dumps({""online"": False, ""timestamp"": int(time.time())}))
mqtt.reconnect_delay_set(5, 30)
ret = mqtt.connect(ENDPOINT, PORT, 90) 
print(""Connect Attempt:"", ret)
mqtt.loop_forever()

```

Return:

log: Sending CONNECT (u0, p0, wr0, wq0, wf1, c1, k90) client_id=b'e515e2a5-1753-4093-b0b8-22da50b6a463'
Connect Attempt: 0
Disconnected: 7 None
log: Sending CONNECT (u0, p0, wr0, wq0, wf1, c1, k90) client_id=b'e515e2a5-1753-4093-b0b8-22da50b6a463'
Disconnected: 7 None
log: Sending CONNECT (u0, p0, wr0, wq0, wf1, c1, k90) client_id=b'e515e2a5-1753-4093-b0b8-22da50b6a463'
Disconnected: 7 None
...


I expect that either on_connect or connect_fail_callback would be executed when a connection attempt is made but neither is happening, leaving me with no way to debug.  
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CHYZM,paho.mqtt.python,1109231180,651,NA,twajr,29104218,Tom Armstrong,,NA,2022-04-26T02:22:51Z,2022-04-26T02:22:51Z,"Hey, I'm having the same issue. I'm working with IoT Core and seems to be network or SSL related (of course), at least in my case. I'm digging through the code now and so far I see that we can get a bit more detail, but not much with the code below. The behavior is hard to understand, but I'm just getting started. I'll let you know what I find. 

What 7 equates to:

`Disconnected: The connection was lost.`

```
def on_disconnect(client, userdata, rc):
    print(""Disconnected: "" + mqttClient.error_string(rc))
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CHYZM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGs5t,paho.mqtt.python,1880804973,651,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T11:14:19Z,2024-01-08T11:14:19Z,"`on_connect` is called when CONNACK is received and `connect_fail_callback` is called if the network connection could not be established. It looks like what is happening in your example is that the network connection is coming up but the `CONNECT` packet is being rejected (with the server dropping the network connection so `on_disconnect` is called).

I'm not sure if this answers your question (especially as its a few years old - sorry!) but hopefully it explains what you are seeing. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGs5t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/651,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLumv,paho.mqtt.python,2234444207,651,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:23:52Z,2024-07-17T22:23:52Z,Closing this due to lack of activity.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FLumv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652,paho.mqtt.python,1172190353,652,AttributeError: 'Client' object has no attribute 'connected_flag',derAlff,64785948,derAlff,,CLOSED,2022-03-17T10:22:44Z,2024-01-08T09:35:58Z,"Hello,

I have an issue by running the following code on a Raspberry Pi:

```
import paho.mqtt.client as mqtt


BROKER_URL = ""my.mqtt.broker""
BROKER_PORT = 1883
BROKER_USERNAME = ""test""
BROKER_PASSWORD = ""test""

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag=True
        print(""Connected successfully"")
    else:
        client.bad_connection_flag=True
        print(""Connection failed with code {rc}"")

client = mqtt.Client(""tempsensor"")
client.username_pw_set(username=BROKER_USERNAME, password=BROKER_PASSWORD)
client.on_connect = on_connect
client.connect(BROKER_URL, BROKER_PORT, 60)
#client.connect(""10.83.134.97"", 1883, 60)

client.loop_start()
print(""Connecting to broker "", BROKER_URL)

while not client.connected_flag: #wait in loop
    print(""In wait loop"")
    time.sleep(0.1)

print(""CODE HERE"")

client.loop_stop()
```

If I run this code, I receive the following issue.
```
Connecting to broker  my.mqtt.broker
Traceback (most recent call last):
  File ""/home/pi/src/test_mqtt/test_mqtt.py"", line 26, in <module>
    while not client.connected_flag: #wait in loop
AttributeError: 'Client' object has no attribute 'connected_flag'
```

Running `Python 3.9.2`

Can anybody help me? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5G9Alk,paho.mqtt.python,1190398308,652,NA,mohamedt-ea,83428045,mohamedt-ea,,NA,2022-07-20T15:01:18Z,2022-07-20T15:01:18Z,"i have searched through [paho mqtt module](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py) and i haven't found this flag.

You can use global varible as a flage in your case

```
import time
import paho.mqtt.client as mqtt    #import client library

connected_flag = False #create flag

def on_connect(client, userdata, flags, rc):
    global connected_flag #use global variable
    if rc==0:
        connected_flag=True #set flag
        print(""connected ok"")
    else:
        print(""Bad connection Returned code="",rc)
        client.loop_stop()

client = mqtt.Client(""python1"")             #create new instance 
client.on_connect=on_connect  #bind call back function
client.loop_start()  #Start loop 
client.connect(""127.0.0.1"")               #connect to broker
# Other code here
while not connected_flag:
    print(""waiting for connection"")
    time.sleep(0.3)
print(""connected"")
# client.publish(""test/topic"",""Hello World"")  #publish message
client.loop_stop()    #Stop loop 
client.disconnect()   #disconnect from broker
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5G9Alk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5hhjNB,paho.mqtt.python,1636184897,652,NA,madmacks59,48607370,,,NA,2023-07-14T17:46:22Z,2023-07-14T17:46:22Z,"As far as I can tell this is caused by the code update identified in the change log as ""Add on_pre_connect() callback"". I went into the change log and compare file and commented out the associated code, and now my python runs just fine...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5hhjNB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/652,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGH6N,paho.mqtt.python,1880653453,652,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:35:58Z,2024-01-08T09:35:58Z,"I'm with @mohamedt-ea  on this; I've looked back through the library history and cannot see a `connected_flag`; you could solve the issue with a one line change:

```
import paho.mqtt.client as mqtt
import time


BROKER_URL = ""mosquitto""
BROKER_PORT = 1883
BROKER_USERNAME = ""test""
BROKER_PASSWORD = ""test""

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        client.connected_flag=True
        print(""Connected successfully"")
    else:
        client.bad_connection_flag=True
        print(""Connection failed with code {rc}"")

client = mqtt.Client(""tempsensor"")
client.connected_flag=False   # add this
#client.username_pw_set(username=BROKER_USERNAME, password=BROKER_PASSWORD)
client.on_connect = on_connect
client.connect(BROKER_URL, BROKER_PORT, 60)
#client.connect(""10.83.134.97"", 1883, 60)

client.loop_start()
print(""Connecting to broker "", BROKER_URL)

while not client.connected_flag: #wait in loop
    print(""In wait loop"")
    time.sleep(0.1)

print(""CODE HERE"")

client.loop_stop()
```

Note that there are various issues where users are adding `connected_flag` in a range of ways (e.g. #499, #501, #716).

As such without more information on why OP believes this should work I don't think this is answerable. Given the age of the question I'm going to close the issue (but please feel free to open it with more info).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGH6N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,paho.mqtt.python,1177101421,653,DeprecationWarning: ssl.PROTOCOL_TLS is deprecated,maranov,11609215,,,CLOSED,2022-03-22T17:43:36Z,2024-11-20T09:14:25Z,"Per [Python ssl docs](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS), the `PROTOCOL_TLS` has been deprecated, replaced with `PROTOCOL_TLS_CLIENT/SERVER`. This setting is used in the client at:
<https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L791>

From what I understood, the `PROTOCOL_TLS_CLIENT` should be the correct replacement (for client connections), but it has some side effects:
> The protocol enables [CERT_REQUIRED](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED) and [check_hostname](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname) by default.

Looking at the client code, this seems to be the defaults for `tls_set` as well. Replacing the `PROTOCOL_TLS` with `PROTOCOL_TLS_CLIENT`, while using `PROTOCOL_TLS` as a fallback for Python 2.7 should remove the deprecation warning.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5AGeD5,paho.mqtt.python,1075437817,653,NA,maranov,11609215,,,NA,2022-03-22T17:44:56Z,2022-03-22T17:44:56Z,I could open a PR if the proposed solution sounds like a good idea.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5AGeD5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5EqRvQ,paho.mqtt.python,1151933392,653,NA,timhaines,19700,Tim Haines,tmhaines@gmail.com,NA,2022-06-10T04:43:04Z,2022-06-10T04:43:04Z,@maranov sounds good to me.  Would love to see this warning disappear. 👍 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5EqRvQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGAOH,paho.mqtt.python,1880621959,653,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:13:48Z,2024-01-08T09:13:48Z,"As PR #665 has now been merged I believe this issue can be closed. Note that there are a few other related issues that will remain open (the documentation does not really match the code).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGAOH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6USsXq,paho.mqtt.python,2487928298,653,NA,poonkothaip,22915691,,,NA,2024-11-20T08:52:48Z,2024-11-20T08:52:48Z,"Hi
Using python 3.12 and using below code to connect -

def create_ftps_client(server_hostname, server_port, certfile, keyfile):
  
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
    context.load_cert_chain(certfile=certfile, password=keyfile)
    ftps = FTP_TLS(context=context)
    try:

        ftps.connect(server_hostname, server_port)
        ftps.auth()
        print(""FTPS connection established successfully"")
        return ftps
    except ssl.SSLError as e:
        print(f""Failed to connect to the server: {e}"")
        return None


when using  context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT) - getting this error  Failed to connect to the server: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1000) 
when using context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2) connection is successful but get warnings DeprecationWarning: ssl.PROTOCOL_TLSv1_2 is deprecated

Can you please suggest how can warning be removed and make it work properly. 

Thanks
Poongkothai","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6USsXq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/653,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6US3Ps,paho.mqtt.python,2487972844,653,NA,JamesParrott,80779630,,,NA,2024-11-20T09:11:31Z,2024-11-20T09:11:31Z,"@poonkothaip This thread is closed.  Furthermore, it is about a specific issue relating to the Paho library for the MQTT protocol.  Not for general help questions about the FTP protocol, or anything else unrelated.  Try a general Python help forum.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6US3Ps/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/654,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/654,paho.mqtt.python,1186068563,654,there are some matter work with celery,fuuhoo,33688588,,,CLOSED,2022-03-30T08:18:47Z,2024-07-18T00:16:40Z,"

myMQtt.py
````
class myMqtt:
    def __init__(self):
        self.client=mqtt.Client()
        self.MQTT_TOPIC=settings.MQTT_TOPIC
        self.MQTT_USER=settings.MQTT_USER
        self.MQTT_PWD=settings.MQTT_PWD
        self.MQTT_SERVER=settings.MQTT_SERVER
        self.MQTT_PORT=int(settings.MQTT_PORT)
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.on_publish = self.on_publish
        self.client._transport=""websockets""
        self.client.username_pw_set(self.MQTT_USER, self.MQTT_PWD)
        print(""MQTT:"",self.MQTT_SERVER,self.MQTT_PORT,self.MQTT_USER,self.MQTT_PWD,self.MQTT_TOPIC)
        cr=self.client.connect(self.MQTT_SERVER, self.MQTT_PORT, 6000) # 600为keepalive的时间间隔

    def on_connect(self,client, userdata, flags, rc):
        # 0: Connection successful
        # 1: Connection refused - incorrect protocol version
        # 2: Connection refused - invalid client identifier
        # 3: Connection refused - server unavailable
        # 4: Connection refused - bad username or password
        # 5: Connection refused - not authorised
        # 6-255: Currently unused.
        print(""MQtt onnected with result code: "" + str(rc))
    def on_message(self,client, userdata, msg):
        print(msg.topic + "" "" + str(msg.payload))
    def on_publish(self,client, userdata, mid):
        print(""on_publish:::"",client, userdata, mid)
    def publish(self,payload):
        try:
            r=self.client.publish(self.MQTT_TOPIC, payload=payload, qos=0)
            print(""mqtt publish结果"")
        except Exception as e :
            print(""MQTT publish ERROR"",str(e))

````

````
app = Celery()
@app.task
def onlinePersonBroadcast():
    retrunList=[]
    keys=redisHandle.scan_iter(""idcard:*"")
    for key in keys:
        print(key)
        value=redisHandle.get(key)
        jsonValue=json.loads(value)
        retrunList.append(jsonValue)
    mymqtt.publish(json.dumps(retrunList,cls=DateEncoder))
````
When I call the client in celery's tasks file and publish the message, there will be no error or wraining output, but I can't actually get data. Onlineperson broadcasts is a scheduled task in django.anyone help?

当我在celery的tasks文件中调用客户端并且发布消息的时候，会没有报错，但是实际上收不到数据。onlinePersonBroadcas是一个定时任务



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/654/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/654,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGx_h,paho.mqtt.python,1880825825,654,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T11:29:20Z,2024-01-08T11:29:20Z,Could you please attempt this with [logging](https://github.com/eclipse/paho.mqtt.python#enable_logger) enabled? It's possible the task is being shut down before the message is actually sent (calling `publish` adds the message to a queue; consider using `wait_for_publish`). Sorry - I'm not familiar with celery so cannot make any further suggestions (if you can provide more info someone may be able to help further - assuming this is still an issue).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGx_h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/654,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNUCN,paho.mqtt.python,2234859661,654,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:16:40Z,2024-07-18T00:16:40Z,Closing due to inactivity. If this is still an issue with the current release then please feel free to reopen (but more info will be needed to assist us to identify the issue).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNUCN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655,paho.mqtt.python,1205654430,655,Timeout  subscribe.simple,spartakos87,5782594,SEREPAS FILIPPAS,serepasf@yahoo.gr,OPEN,2022-04-15T15:15:46Z,2024-01-08T00:48:47Z,"There is anyway to set timeout to subscribe.simple?
Thanks","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5BlFdG,paho.mqtt.python,1100240710,655,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2022-04-15T17:18:56Z,2022-04-15T17:18:56Z,"No, not as currently implemented in paho. I've made a function that mimics `subscribe.simple` with a timeout:

```python
import socket
import threading
from paho.mqtt.client import Client

def subscribe(
    topics: str | list[str],
    hostname: str,
    timeout: Optional[float] = None,
    **mqtt_kwargs,
):
    """"""
    Modeled closely after the paho version, this also includes some try/excepts and
    a timeout. Note that this _does_ disconnect after receiving a single message.
    """"""


    lock: Optional[threading.Lock]

    def on_connect(client, userdata, flags, rc):
        client.subscribe(userdata[""topics""])
        return

    def on_message(client, userdata, message):

        userdata[""messages""] = message
        client.disconnect()

        if userdata[""lock""]:
            userdata[""lock""].release()

        return

    if timeout:
        lock = threading.Lock()
    else:
        lock = None

    topics = [topics] if isinstance(topics, str) else topics
    userdata: dict[str, Any] = {
        ""topics"": [(topic, mqtt_kwargs.pop(""qos"", 0)) for topic in topics],
        ""messages"": None,
        ""lock"": lock,
    }

    client = Client(userdata=userdata)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(leader_address)

    if timeout is None:
        client.loop_forever()
    else:
        assert lock is not None
        lock.acquire()
        client.loop_start()
        lock.acquire(timeout=timeout)
        client.loop_stop()
        client.disconnect()

    return userdata[""messages""]
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5BlFdG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5s43WM,paho.mqtt.python,1826846092,655,NA,marcelrv,5871213,Marcel,,NA,2023-11-26T17:49:25Z,2023-11-26T17:49:25Z,"Would be great to have this implemented somehow.
Without a timeout it makes the current implementation in most practical cases useless.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5s43WM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/655,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmZJ,paho.mqtt.python,1880254025,655,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:48:46Z,2024-01-08T00:48:46Z,timeout on `publish.simple` has also been requested ref #404 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmZJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657,paho.mqtt.python,1209760873,657,Question: Will on_message always get all messages?,ErlendFax,21358646,Erlend Faxvaag,erlendfaxvaag@gmail.com,CLOSED,2022-04-20T14:19:15Z,2024-01-08T09:21:45Z,"Our mqtt client receives about a 1000 messages each second.

I made a on_message callback like this:
```python
def on_message(client, userdata, msg):
    message_buffer.append(msg.payload.decode('utf-8'))
    if(len(message_buffer) > 100):
        handleBuffer(message_buffer)
        message_buffer.clear()
```

The function `handleBuffer(...)` might take a few seconds which made me think, what happens in the meantime? Will the client always receive messages in the background before its sent to `on_message`? What's the bottle neck here, CPU?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CRp-R,paho.mqtt.python,1111924625,657,NA,sfphh4,81444142,,,NA,2022-04-28T08:53:16Z,2022-04-28T08:53:16Z,"at the rate you are getting the messages, you should not be doing this.

You should only be adding the messages to message_buffer. Dont even bother doing the msg.payload or even the decode

The issue is, you are blocking the return of the on_message function, thereby halting all the heartbeat and handshaking with MQTT Broker, and there is a very good chance that you will end up seeing strange issues.

Take the handling/processing of messages part in another thread, and run the mqtt library in its own thread.

Use Queue (a native python datatype that is threadsafe) where you add the incoming messages to that Queue in the on_message function and then another thread (or even a multitude of threads) to process the incoming messages.

FYI: Increasing CPU frequency may reduce the problems you encounter but it is not a bottleneck issue.

Please close this issue if you are satisfied with the answer.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5CRp-R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Y-8Xf,paho.mqtt.python,1492895199,657,NA,bantu,189375,Andreas Fischer,,NA,2023-04-01T09:44:54Z,2023-04-01T09:44:54Z,"We use `on_message` to shovel measurements from MQTT into a database. I believe we are seeing messages being lost (i.e. unprocessed) on higher publishing rates. In particular, we observed rates north of 5000 messages per second; not a rate I'd consider highly unusual or particularly high.

@sfphh4 Your pointers are much appreciated. Thank you.

I am somewhat surprised by the lack of guarantees made by the `on_message` callback mechanism. From where I am standing, it is okay if **performance** somehow suffers (for example, if memory or CPU usage increases dramatically), but if messages are being lost without feedback (e.g. an Exception), this is a fundamental **correctness** problem of the software. 

Even if message rates of 5000 messages per second can be handled by passing messages to a queue in `on_message`, it is unclear if this approach works correctly for 25000 messages per second or 100000 messages per second.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Y-8Xf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/657,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGC99,paho.mqtt.python,1880633213,657,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:21:45Z,2024-01-08T09:21:45Z,"I'm going to close this because I believe the original question was answered (and there was no further feedback from OP).

@bantu my reading of the source is that messages should not be lost under normal operation. However there is an issue with the handling of keepalives under high load (see #328) and, should the connection be dropped, there is a potential for message loss (this depends upon how you are connecting). If you are seeing message loss we would appreciate details (but, unfortunately, this kind of issue is tricky to trace so the more detail you can provide the better). Note that the broker config is important here too; brokers often provide the option to drop messages if the client is not keeping up; see the Mosquitto setting `max_inflight_messages` for an example).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGC99/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/658,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/658,paho.mqtt.python,1227095766,658,Control Over will_set() Calls After loop_start(),alexander-ryker,86668214,Alex Ryker,ryker_alexander@network.lilly.com,CLOSED,2022-05-05T19:33:59Z,2023-01-21T00:13:56Z,"After calling loop_start(), the MQTT client module will handle the necessary networking and reconnect logic in its own thread. To my knowledge, however, once loop_forever() is running in its own thread (as a result of the loop_start() call) there is no way to call will_set() with a new Node death payload before the client module calls connect() as needed.

Could a callback be added as an optional argument to loop_start() that would allow custom logic to be executed immediately prior to the connect() call?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/658/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/658,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5DAzlg,paho.mqtt.python,1124284768,658,NA,alexander-ryker,86668214,Alex Ryker,ryker_alexander@network.lilly.com,NA,2022-05-11T20:52:49Z,2022-05-11T20:52:49Z,Update: We were able to work around this by placing our will_set() call in the on_disconnect() callback. I will leave it to the Eclipse team to decide if this issue should be kept or closed.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5DAzlg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/658,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZHd1,paho.mqtt.python,1399093109,658,NA,ralight,79578,Roger Light,,NA,2023-01-21T00:13:43Z,2023-01-21T00:13:43Z,I have added an `on_pre_connect()` callback which should solve this problem for you. It will be part of the next feature release.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZHd1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,paho.mqtt.python,1229798127,659,Confusion about ReasonCode in MQTTv5,mindrunner,1413542,lukas,,CLOSED,2022-05-09T14:17:21Z,2024-01-21T10:44:54Z,"I moved to MQTTv5 and updated the callbacks `on_connect` and `on_disconnect`

It seem that `on_connect` now passes me a `ReasonCode` object instead of an `int`. However, `on_disconnect` still uses `int` as `rc`.
Is that on purpose or am I missing something here. I skimmed through the `client.py` code and it looks pretty much intentional. 

Reading https://github.com/eclipse/paho.mqtt.python/issues/392, it seems like `rc` in `on_disconnect` has no real meaning, but then why do I find `DISCONNECT` in `PacketTypes` as well as several `ReasonCodes` for disconnect?

Most importantly, how do I find out why the connection was disconnected?
Am I supposed to use `error_string(rc)` for that?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OaYod,paho.mqtt.python,1315539485,659,NA,fpagliughi,4303121,Frank Pagliughi,,NA,2022-11-15T16:13:16Z,2022-11-15T16:13:16Z,"The ""Reason Code"" is a new feature added to the MQTT v5 spec to clarify the result of an operation. It makes error reporting a little more user-friendly, but can also indicate success. The spec says:

> A Reason Code is a one byte unsigned value that indicates the result of an operation. Reason Codes less than 0x80 indicate successful completion of an operation. The normal Reason Code for success is 0. Reason Code values of 0x80 or greater indicate failure.
>
> The CONNACK, PUBACK, PUBREC, PUBREL, PUBCOMP, DISCONNECT and AUTH Control Packets have a single Reason Code as part of the Variable Header. The SUBACK and UNSUBACK packets contain a list of one or more Reason Codes in the Payload.

Read more here:
https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031

Unfortunately, the term ""reason code"" was in common use in many MQTT libraries (often shown as a variable `rc`) to indicate an integer success/failure value for local functions. So there is some confusion between the usage of these two different things.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OaYod/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5PFrc5,paho.mqtt.python,1326888761,659,NA,mindrunner,1413542,lukas,,NA,2022-11-24T23:20:16Z,2022-11-24T23:20:16Z,"Cool, thanks for the insight. It's been a while since I fell over this. Speaking one more time about the `on_disconnect`  callback. the source docs state:
```
for MQTT v5.0:
            disconnect_callback(client, userdata, reasonCode, properties)

...

The rc parameter indicates the disconnection state. If
MQTT_ERR_SUCCESS (0), the callback was called in response to
a disconnect() call. If any other value the disconnection
was unexpected, such as might be caused by a network error.

```

Does that mean, `on_disconnect` does not make use of  the ""new"" `ReasonCode` but rather uses the commonly used `rc` integer success/failure value for local functions?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5PFrc5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5VmCy5,paho.mqtt.python,1436036281,659,NA,Jibun-no-Kage,96628648,,,NA,2023-02-19T16:50:13Z,2023-02-19T16:50:13Z,"Can we get an answer to @mindrunner question above?  I too as well don't understand why on_disconnect callback provides an integer RC code, not a string ReasonCode like say on_connect.  It is a confusing inconsistency, can't the code be updated to add some reasonable consistency to the other call backs.... or STATE in the SOURCE, this is by design to allow this inconsistency.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5VmCy5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5aZjlB,paho.mqtt.python,1516648769,659,NA,jmmk,1122242,Michael McLellan,,NA,2023-04-20T16:50:03Z,2023-04-20T16:50:03Z,"Here are all the inconsistencies I have found with the reason code when using MQTT v5:

1. As mentioned in #687, `on_subscribe` and `on_unsubscribe` use different order for their arguments
```python
                        on_subscribe(
                            self, self._userdata, mid, reasoncodes, properties)

                        on_unsubscribe(
                            self, self._userdata, mid, properties, reasoncodes)
```
2. `on_unsubscribe` may pass a `list[ReasonCodes]` or a single `ReasonCodes`
```python
            reasoncodes = []
            for c in packet[props_len:]:
                if sys.version_info[0] < 3:
                    c = ord(c)
                reasoncodes.append(ReasonCodes(UNSUBACK >> 4, identifier=c))
            if len(reasoncodes) == 1:
                reasoncodes = reasoncodes[0]
```
3. `on_connect` can pass an `int` (if the result is 132) or a `ReasonCodes`
```python
            if result == 1:
                # This is probably a failure from a broker that doesn't support
                # MQTT v5.
                reason = 132 # Unsupported protocol version
                properties = None
            else:
                reason = ReasonCodes(CONNACK >> 4, identifier=result)
                properties = Properties(CONNACK >> 4)
                properties.unpack(self._in_packet['packet'][2:])
```
4. `on_disconnect` can pass an `int` or a `ReasonCodes`. In this case, the ints are usually used on success (which is the standard `0` code) or due to client-side errors like keepalive failure or connection lost.
```python
            if self._state == mqtt_cs_disconnecting:
                rc = MQTT_ERR_SUCCESS
            else:
                rc = MQTT_ERR_KEEPALIVE

            self._do_on_disconnect(rc)
# ...
                    self._do_on_disconnect(MQTT_ERR_CONN_LOST)
# ...
    def _handle_disconnect(self):
        packet_type = DISCONNECT >> 4
        reasonCode = properties = None
        if self._in_packet['remaining_length'] > 2:
            reasonCode = ReasonCodes(packet_type)

        self._loop_rc_handle(reasonCode, properties)
```

---

For different callbacks, the `rc` you receive may be an `int`, a `ReasonCodes`, or a `list[ReasonCodes]`. If the given `rc` is a `ReasonCodes`, you can use `rc.getName()` to get the string reason. If it is an `int`, you can use `error_string(rc)` to get the string reason.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5aZjlB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uFa02,paho.mqtt.python,1846914358,659,NA,shailesh-bear,138865595,,,NA,2023-12-08T10:18:37Z,2023-12-08T10:18:37Z,"I am also facing this issue. Disconnect callback does not work for MQTT 5.0 as expected. It is not called with the correct reason code and properties from the packet. Disconnect callback is not even called in `_handle_disconnect`, which is when we receive the packet from the server. This method is instead called outside of regular MQTT communication when the client thread fails to receive keep-alive. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uFa02/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF8vp,paho.mqtt.python,1880607721,659,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T09:03:55Z,2024-01-08T09:03:55Z,Flagging this an an enhancement as it's going to need to be given some thought (resolving some of the inconsistencies will require breaking changes in terms of parameter order).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF8vp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/659,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wtVq4,paho.mqtt.python,1890933432,659,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-14T12:06:34Z,2024-01-14T12:06:34Z,"#687, #656 and #715 seems all related. There is indeed bad consistency in callbacks parameter/signature.

My suggestion (and I'll submit a PR for this) is:
* I think it's doable to reduce breaking change by adding a flag to support old callbacks AND new callbacks. I think to a flag ""callback_api_version"". With the deprecated version 1, callback work as they currently do, no change. With version 2 (the default) we use newer callbacks.
* We can merge MQTTv3 & v5 version callback signature, by converting v3 return code to reason code.

The signature I think of are:
```
on_connect(Client, userdata, ConnectFlags, ReasonCode, Properties)  # This is called when connack is received
on_connect_fail(Client, userdata)  # This is called when connection failed before connack
on_pre_connect(Client, userdata)  # This is called just before opening the TCP socket
on_disconnect(Client, userdata, DisconnectFlags, ReasonCode, Properties)
on_log(Client, userdata, LogLevel, message)
on_message(Client, userdata, MQTTMessage)
on_publish(Client, userdata, mid, ReasonCode, Properties)
on_subscribe(Client, userdata, mid, list[ReasonCode], Properties)
on_unsubscribe(Client, userdata, mid, list[ReasonCode], Properties)

on_socket_*(Client, userdata, SocketLike)  # unchanged

class ConnectFlags(NamedTuple):
    session_present: bool

class DisconnectFlags(NamedTuple):
    is_disconnect_packet_from_server: bool
```

For on_disconnect, since there is no direct equivalent for ""ERR_CONN_LOST"", I'll use ""Unspecified error""
For on_unsubscribe in MQTTv3, since there is not payload - no reasoncode - we will use an empty list for reasoncodes.

I believe this will provide all information needed for callback (only on_pre_connect & on_connect_fail seems a bit short on information... but I'm not sure how they are used).

It'll also make MQTTv3 & MQTTv5 callbacks similar. Obviously with properties being always None in MQTTv3.

Edit: let's have properties always present (not None). We can always pass an empty properties object which seems better than passing None (user don't need to check for both being not None)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wtVq4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/661,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/661,paho.mqtt.python,1241539473,661,"socket.error exception handling removed due to deprecation, but it breaks support for python2.7",Urikiller,20066509,,,CLOSED,2022-05-19T10:06:41Z,2024-01-08T08:55:48Z,"In mqtt/client.py:loop_forever(), the exception handling for self.reconnect() only handles OSError and WebsocketConnectionError, but not socket.error, which causes the thread to crash on timeout for example. 
This only affects python2.7, since in python3 socket.error is OSError. 
This issue was fixed some years ago, but on 8/19/2021 in commit 4910b78(""Don't use deprecated socker.error exceptions."") the change was reverted back, along with a few other similar patches. 
Since paho-mqtt still claims to support python2.7 then I believe these patches should be reinstated.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/661/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/661,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF57G,paho.mqtt.python,1880596166,661,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T08:55:47Z,2024-01-08T08:55:47Z,">Since paho-mqtt still claims to support python2.7 then I believe these patches should be reinstated.

Sorry for the delay in responding. Unfortunately during that delay support for 2.7 has been dropped meaning it's very unlikely that this issue will be addressed (unless someone is willing to make another 1.6.x release). As a result I'm going to close the issue (please do reopen it if you wish to take this further).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF57G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,paho.mqtt.python,1250419447,662,mqtt not open thread 340,jiajintao2021,76982578,,,CLOSED,2022-05-27T07:01:45Z,2023-12-07T20:24:49Z,"It's been too long since the previous question
Read some problems, also read some solutions。
No solution was found, it seems that the library does not intend to solve this problem。
A maximum of 340 links can be opened under a single process。
example:
`loop_start()`
If you maintain the thread yourself, you can open more links
example:
`loop_forever()`
In this way, you can open about 1000 links, and then through the process, you can add more。1000 * CpuCount","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D6P7E,paho.mqtt.python,1139343044,662,NA,jiajintao2021,76982578,,,NA,2022-05-27T07:02:59Z,2022-05-27T07:02:59Z,"[https://github.com/concurrencylabs/mqtt-locust/issues/3](url)
[https://github.com/eclipse/paho.mqtt.python/issues/238](url)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D6P7E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D6QUd,paho.mqtt.python,1139344669,662,NA,jiajintao2021,76982578,,,NA,2022-05-27T07:05:34Z,2022-05-27T07:05:34Z,"#183 
#238 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5D6QUd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5RVVip,paho.mqtt.python,1364547753,662,NA,j04n-f,96056718,Joan Flotats,,NA,2022-12-24T15:47:49Z,2022-12-24T15:47:49Z,"Maybe it's too late but replacing the `select(..)` method used on the `_loop(..)` method worked for us. You can override the method to use the Python selectors package instead of select. Selectors choose the best fit for your OS.

```python
import selectors
from paho.mqtt.client import Client

class MQTTClient(Client): 
[...]
    def _loop(self, timeout: float = 1.0) -> int:
        if timeout < 0.0:
            raise ValueError(""Invalid timeout."")

        sel = selectors.DefaultSelector()

        eventmask = selectors.EVENT_READ

        with suppress(IndexError):
            packet = self._out_packet.popleft()
            self._out_packet.appendleft(packet)
            eventmask = selectors.EVENT_WRITE | eventmask

        if self._sockpairR is None:
            sel.register(self._sock, eventmask)
        else:
            sel.register(self._sock, eventmask)
            sel.register(self._sockpairR, selectors.EVENT_READ)

        pending_bytes = 0
        if hasattr(self._sock, ""pending""):
            pending_bytes = self._sock.pending()

        if pending_bytes > 0:
            timeout = 0.0

        try:
            events = sel.select(timeout)

        except TypeError:
            return int(MQTT_ERR_CONN_LOST)
        except ValueError:
            return int(MQTT_ERR_CONN_LOST)
        except Exception:
            return int(MQTT_ERR_UNKNOWN)

        socklist: list[list] = [[], []]

        for key, _event in events:
            if key.events & selectors.EVENT_READ:
                socklist[0].append(key.fileobj)

            if key.events & selectors.EVENT_WRITE:
                socklist[1].append(key.fileobj)

        if self._sock in socklist[0] or pending_bytes > 0:
            rc = self.loop_read()
            if rc or self._sock is None:
                return int(rc)

        if self._sockpairR and self._sockpairR in socklist[0]:
            with suppress(BlockingIOError):
                self._sockpairR.recv(10000)

        if self._sock in socklist[1]:
            rc = self.loop_write()
            if rc or self._sock is None:
                return int(rc)

        sel.close()

        return int(self.loop_misc())
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5RVVip/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/662,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCIKz,paho.mqtt.python,1846051507,662,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-07T20:20:34Z,2023-12-07T20:20:34Z,I'm going to close this as a duplicate (#183 & #238 and a few others). This is part of a general project to clean-up issues (which should make it simpler to identify priorities going forward). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uCIKz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663,paho.mqtt.python,1259492822,663,Exception ConnectionRefusedError for non valid mqtt host,pavkamlc,1273709,Pavel Mlčoch,pavkamlc@centrum.cz,CLOSED,2022-06-03T06:31:35Z,2024-07-18T00:10:28Z,"Is't possible to catch exception for refused connection? I test application without correct mqtt information because in production is possible bad configuration. Then I tried catch exception with connect, but it seems be imposible.
I always get excepption ConnectionRefusedError [WinError 10061] on line client1.connect(...)
I don't test behaviour with correct configuration, but it will be another scenario.

_client1 = paho.Client()  # create client object

ret = 0

def on_disconnect(client, userdata, rc):
    print(""client disconnected ok"")

def on_publish(client, userdata, result):  # create function for callback
    print(""data published \n"")
    pass

def on_connect(mosq, userdata, flags, rc):
    #raise(MoreTrouble)
    #mqttc.subscribe(""test"", 0)
    print(rc)
    print('connect event')

def on_message(client, userdata, msg):
    try:
        print(msg)
    except:
        print('message event')

client1.on_publish = on_publish  # assign function to callback
client1.on_disconnect = on_disconnect
client1.on_connect = on_connect
client1.on_message = on_message

try:
    client1.connect(config['mqtt_host'], config['mqtt_port'])  # establish connection
    while True:
        print('Publish topic')
        ret = client1.publish(""house/bulb1"", ""on"")  # publish
        time.sleep(1)

except (Exception, ConnectionError, ConnectionRefusedError):
    print(""stop"")
    client1.disconnect()

client1.disconnect()_","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ESQBr,paho.mqtt.python,1145634923,663,NA,pavkamlc,1273709,Pavel Mlčoch,pavkamlc@centrum.cz,NA,2022-06-03T06:35:37Z,2022-06-03T06:35:37Z,"Code tested on python 3.10.4 on Win10, paho-mqtt 1.6.1","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ESQBr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZFrK,paho.mqtt.python,1399085770,663,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:58:21Z,2023-01-20T23:58:21Z,"I'm sorry, I don't quite understand. It sounds like you are saying that you don't want a ConnectionRefusedError to be raised if you use an invalid host, is that correct? Or that you want the library to handle that for you? The behaviour you describe as not working looks correct to me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZFrK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/663,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNPa9,paho.mqtt.python,2234840765,663,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:10:28Z,2024-07-18T00:10:28Z,Closing due to age/inactivity/need for additional info. Please feel free to reopen (with further info) if this is still an issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNPa9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/664,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/664,paho.mqtt.python,1261028083,664,`bind_address` not working,geoffbrucepayne,42971189,Geoff Bruce-Payne,geoff.bruce-payne@inmarsat.com,OPEN,2022-06-05T11:39:11Z,2024-01-08T08:53:16Z,"I am running on a Raspberry Pi with multiple network interfaces, and need to exclusively use one of those interfaces for the MQTT client. When I specify `bind_addess='192.168.128.102'` (eth2) in my client.connect() call, the connection is still being initiated on another address/interface 192.168.1.129 (eth0) which I confirmed by wireshark trace.  Am I doing something wrong or is there a better way to force a specific interface?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/664/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/664,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5LaqzZ,paho.mqtt.python,1265282265,664,NA,almex-m-bulbul,103923667,m-bulbul,,NA,2022-10-03T11:08:23Z,2022-10-03T11:08:23Z,facing same issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5LaqzZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/664,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF4_8,paho.mqtt.python,1880592380,664,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T08:53:11Z,2024-01-08T08:53:11Z,"I've tested this on my machine (windows - `client.connect(""mqtt.eclipseprojects.io"", 1883, 60, bind_address=""192.168.168.240"", bind_port=0)` and it appeared to work as designed (switching to another interface address resulted in a change to the source IP shown in wireshark).

Can you please provide more information (ideally a minimal, reproducible example along with a description of your network configuration and OS info). Before doing this you might find [this answer](https://stackoverflow.com/a/8437870/11810946) on stack overflow of interest...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wF4_8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,paho.mqtt.python,1276298759,666,"Maybe improper implemention of ""Host"" in websocket header",hulb,7296536,hulb,,CLOSED,2022-06-20T03:11:24Z,2024-01-21T09:53:19Z,"https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L3726

at here, the `Host` of header will be conbined with `host` and `port`. let's say if I want to connect to `wss://mqtt.example.com`, and I should write the code like below
```
mqttc.tls_set()
mqttc.connect(""mqtt.example.com"", port=443)
```
then actual request header `Host` would be
```
Host: mqtt.example.com:443
```
It's quite unusual for a tls request brings the port in `Host` header if the port is 443. And the golang implemention [Eclipse Paho Go](https://github.com/eclipse/paho.mqtt.golang) doesn't do the same.

And it brings me a problem. I use nginx at the front of a real mqtt server, And when I try to connect it through `wss`，it can't handle the `Host` (with the port of 443) properly.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FO6Zb,paho.mqtt.python,1161537115,666,NA,ralight,79578,Roger Light,,NA,2022-06-21T10:05:31Z,2022-06-21T10:05:31Z,"Are you sure this is the cause of the problem? A Host header with a port in it is standard, even if it is the default value. I've just tested with Paho Python connecting to a WSS -> nginx -> mosquitto and it all worked fine for me. Perhaps there is some aspect of your configuration that is different.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FO6Zb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FO9YV,paho.mqtt.python,1161549333,666,NA,hulb,7296536,hulb,,NA,2022-06-21T10:16:55Z,2022-06-21T10:16:55Z,"Yes,I compare the request when using the [emqx-client](https://www.emqx.io/mqtt-client) and [paho.mqtt.python](https://github.com/eclipse/paho.mqtt.python), the `Host` in header is the difference, and [emqx-client](https://www.emqx.io/mqtt-client) can connect to the server as expected. And when I added a extra header to overrite the default `Host` in header when create the client instance, things worked well. Since I don't control the server side which I tried to connect, I guess the server maybe did something with the `Host`.



> A Host header with a port in it is standard

Yes.Maybe the wrong side is the server that I wanted to connect. I just noticed that other client(implemented in golang) seems using a difference way to make the request header.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FO9YV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5F86rN,paho.mqtt.python,1173596877,666,NA,oliverrahner,2277681,Oliver Rahner,oliver@rahner.me,NA,2022-07-04T09:42:40Z,2022-07-04T09:42:40Z,"I just stumbled across the same issue, but with a different perspective.
I am connecting to an AWS IoT MQTT broker. Authentication includes a signature that **spans the host header**, so it has to match the expected value to the bit.
They also don't seem to expect seeing `:443` as part of the host header.

My workaround:

```
headers = {""Host"": host}
mqtt_client.ws_set_options(path=path, headers=headers)
mqtt_client.connect(host=host, port=port)
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5F86rN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZDe1,paho.mqtt.python,1399076789,666,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:37:13Z,2023-01-20T23:37:13Z,"Thank you, this is now fixed and will be part of the next release.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZDe1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/666,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xZviW,paho.mqtt.python,1902573718,666,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-21T09:53:18Z,2024-01-21T09:53:18Z,"I don't think it's valid to always remove the port.

>  If no port is included, the default port for the service requested is implied (e.g., 443 for an HTTPS URL, and 80 for an HTTP URL). 
-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/host 

The RFC said:
> URI producers and normalizers should omit the port component [...] if its value would be the same as that of the scheme's default
-- https://www.rfc-editor.org/rfc/rfc3986#section-3.2.3

The RFC isn't very clear whether this apply to Host header. Anyway if we connect to wss://hostname:1234 I don't see why we should not include port in the Host header. All client I known (browsers, curl, Python requests) don't omit it, they only omit it when it's the default value.
I'll change code so that port is only omitted when it's value is 80 for http and 443 for https.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xZviW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,paho.mqtt.python,1284646977,667,"loop_write(), loop_misc(), loop_read(), none of these could not keep alive, loop() could. last will will send out.",wasdee,8089231,Nutchanon Ninyawee,nutchanon@codustry.com,CLOSED,2022-06-25T16:09:34Z,2022-06-26T03:07:07Z,"as you might know that, the lib recommend us to use `loop_*()` instead of `loop()`

```python
def loop(self, timeout=1.0, max_packets=1):
        """"""Process network events.

        It is strongly recommended that you use loop_start(), or
        loop_forever(), or if you are using an external event loop using
        loop_read(), loop_write(), and loop_misc(). Using loop() on it's own is
        no longer recommended.

        This function must be called regularly to ensure communication with the
        broker is carried out. It calls select() on the network socket to wait
        for network events. If incoming data is present it will then be
        processed. Outgoing commands, from e.g. publish(), are normally sent
        immediately that their function is called, but this is not always
        possible. loop() will also attempt to send any remaining outgoing
        messages, which also includes commands that are part of the flow for
        messages with QoS>0.
        """"""
```

I try to incorporate  `loop_*()` as much as possible in by code.
However, 

## Reproduce
```python
mqtt_client = Client()
mqtt_client.will_set( 'topicX', 'offline', 1, True)
mqtt_client.connect(keepalive=60) # takes 3 loop max
mqtt_client.publish('topicX', 'online', qos=1, retain=True)
mqtt_client.loop_write()

while True:
    sleep(20)
    # keep mqtt connection alive and not send last will
    mqtt_client.loop_write() 
    mqtt_client.loop_read() 
    mqtt_client.loop_misc() 

```

after 1-2 min, the `will` will send out, the client could not keep alive.

## Workaround

```python
mqtt_client = Client()
mqtt_client.will_set( 'topicX', 'offline', 1, True)
mqtt_client.connect(keepalive=60) # takes 3 loop max
mqtt_client.publish('topicX', 'online', qos=1, retain=True)
mqtt_client.loop_write()

while True:
    sleep(20)
    # keep mqtt connection alive 
    mqtt_client.loop() 

```

this will work as expect.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhJkN,paho.mqtt.python,1166317837,667,NA,ralight,79578,Roger Light,,NA,2022-06-25T16:13:52Z,2022-06-25T16:13:52Z,"In your first example you aren't using an event loop, so you aren't responding to the requirements of the socket.

Please use one of:

```
mqtt_client = Client()
mqtt_client.will_set( 'topicX', 'offline', 1, True)
mqtt_client.connect(keepalive=60) # takes 3 loop max
mqtt_client.publish('topicX', 'online', qos=1, retain=True)

mqtt_client.loop_forever()
# This part is ""never"" reached
```

Or:

```
mqtt_client = Client()
mqtt_client.will_set( 'topicX', 'offline', 1, True)
mqtt_client.connect(keepalive=60) # takes 3 loop max
mqtt_client.publish('topicX', 'online', qos=1, retain=True)

mqtt_client.loop_start()

while True:
    time.sleep(20)
    # Do other things
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhJkN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhJ_Z,paho.mqtt.python,1166319577,667,NA,wasdee,8089231,Nutchanon Ninyawee,nutchanon@codustry.com,NA,2022-06-25T16:25:01Z,2022-06-25T16:25:01Z,"I have a real-time application (msec precision). I found that it is better to manage when the `loop` will happen since Python has GIL. unless other thread is IO-blocking, the callback or publish is not guaranteed. 

@ralight do you have recommendation for this?

I use `asyncio` in my code. but i don't put it here since I don't think it is applicable at first.
Basically, if I want to use loop*(). you suggest to follow [this example](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py), right?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhJ_Z/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhLE8,paho.mqtt.python,1166324028,667,NA,ralight,79578,Roger Light,,NA,2022-06-25T16:49:25Z,2022-06-25T16:49:25Z,In that case I would take a look at this example: https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhLE8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/667,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhfJN,paho.mqtt.python,1166406221,667,NA,wasdee,8089231,Nutchanon Ninyawee,nutchanon@codustry.com,NA,2022-06-26T03:05:07Z,2022-06-26T03:05:07Z,"Thank you for your advice. 

I would use https://github.com/sbtinstruments/asyncio-mqtt .  It looks zen to me. I tested, it works just fine. 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5FhfJN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/668,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/668,paho.mqtt.python,1290178408,668,set_tls: incorrect default tls_version?,wosym,57949233,Wouter Symons,,OPEN,2022-06-30T13:57:02Z,2024-01-08T06:22:48Z,"We are currently investigating an issue in our software, and came across this weird construction that might or might not be related to the problems we're experiencing.

In v1.6.1 the documentation says the following about the tls_version parameter:
> tls_version allows the version of the SSL/TLS protocol used to be
        specified. **By default TLS v1.2 is used.** Previous versions are allowed
        but not recommended due to possible security problems.

So... naturally what I would assume is that if I don't pass this parameter, it would default to TLSv1.2. However, in practice we're seeing different behaviour when passing this default explicitly, and not passing it at all.
This can be explained by the code that handles the setting of the default:
```
        if tls_version is None:
            tls_version = ssl.PROTOCOL_TLSv1_2
            # If the python version supports it, use highest TLS version automatically
            if hasattr(ssl, ""PROTOCOL_TLS""):
                tls_version = ssl.PROTOCOL_TLS
```
So indeed, first the default is set to `ssl.PROTOCOL_TLSv1_2`, but afterwards it is overridden again by `ssl.PROTOCOL_TLS`!
I think the documentation in its current state is very misleading, since it does not indicate this. Similar confusing statements were present in previous versions also. 

A second problem with this default value that I noticed is that the comment says it will use the highest version automatically. However, I noticed that `ssl.PROTOCOL_TLS` resolves to int 2. This is the same as `PROTOCOL_SSLv23`, which is definitely not the highest version available. 
Based on #653, I tried changing `ssl.PROTOCOL_TLS` to `ssl.PROTOCOL_TLS_CLIENT`. If I do that, the int resolves to int 16. I do not know with what enum this corresponds (couldn't find it. It's also not known to Python PDB), but at least it sounds like that makes more sense?

Is this a bug? Or is this working as intended? And if it's a bug, is it a bug in paho-mqtt, or in openssl-python?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/668/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/668,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFUWY,paho.mqtt.python,1880442264,668,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:22:47Z,2024-01-08T06:22:47Z,Agreed; looks like a bug (at a minimum the docs need to match the code).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFUWY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/669,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/669,paho.mqtt.python,1306669759,669,Needing help with what is happening,Just-another-pleb,39888280,,,CLOSED,2022-07-16T01:51:59Z,2022-07-16T07:20:08Z,"(Redacted as the problem is now resolved and I am sorry for asking)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/669/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/669,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Gso1B,paho.mqtt.python,1186106689,669,NA,Just-another-pleb,39888280,,,NA,2022-07-16T07:20:08Z,2022-07-16T07:20:08Z,"I just needed to a bit more digging to find the problem.

Now found and now seems to be ok.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Gso1B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/670,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/670,paho.mqtt.python,1320688126,670,What is best practices for how to use MQTT with real-time data in python?,pavlo-yashchuk,85494277,,,CLOSED,2022-07-28T09:58:16Z,2022-08-09T16:01:37Z,"Hi all
My cameras detect a lot of objects and generate a lot of data
For sending a lot of data I see two ways
1. Serialize different python objects to JSON format and deserialize them on another side.
2. Pickles python objects to byte array and unpickles them on another side.
Which point is better or maybe you know a faster and better way?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/670/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/670,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H98lM,paho.mqtt.python,1207421260,670,NA,fpagliughi,4303121,Frank Pagliughi,,NA,2022-08-07T14:30:05Z,2022-08-07T14:30:05Z,"That depends on whether you think the applications on the receiving end will always be written in Python. If not - if you think you might _ever_ want to use a different language in your system - then you should avoid pickling the data which is mainly a Python thing.

JSON is language neutral and can be read and processed by an application in any language. It's also very ""readable"", which might help with diagnostics as you can intercept messages and examine them very easily.

But even if JSON is not the best choice and you want something that serializes faster and more efficiently, there are several other language-neutral formats like Message Pack or BSON that can be used just as easily as JSON.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H98lM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/670,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IGLCB,paho.mqtt.python,1209577601,670,NA,pavlo-yashchuk,85494277,,,NA,2022-08-09T16:01:35Z,2022-08-09T16:01:35Z,"@fpagliughi thanks
it will always be written in Python","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IGLCB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/672,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/672,paho.mqtt.python,1330337927,672,v5 properties possibly leaking into the payload on incoming messages,fpagliughi,4303121,Frank Pagliughi,,CLOSED,2022-08-05T19:55:00Z,2022-08-06T00:20:04Z,"Hey! I'm sending RPC requests with a bunch of v5 properties. A request looks like this:
```
$ mosquitto_sub -V 5 -v -t '#' -F ""%j %X"" --pretty
{
	""tst"":	""2022-08-05T15:51:55.189543-0400"",
	""topic"":	""requests/sample/v1/test/zero_args/0"",
	""qos"":	0,
	""retain"":	0,
	""payloadlen"":	22,
	""properties"":	{
		""content-type"":	""application/json"",
		""response-topic"":	""replies/MqttStubClient/259288/0ed0eaa8-14f8-11ed-9ae3-256dff621944"",
		""correlation-data"":	""0"",
		""user-properties"":	{
			""timestamp"":	""1659729115.1889336"",
			""content-encoding"":	""gzip""
		}
	},
	""payload"":	""\u001f�\b""
} 1F8B0800DB74ED6202FF8B8E050029BB4C0D02000000

```

The payload is the gzip'ed form of an empty JSON array: '[]', which encodes as ""\x1F\x8b...""
Both Wireshark and `mosquitto_sub` confirm the proper payload. (Ignore for the moment that the ""compressed"" payload is 10x the size of the original!)

On receipt with the Python client, it's reporting a payload of length 23 (instead of 22) as:
```
70.1f.8b.08.00.23.73.ed.62.02.ff.8b.8e.05.00.29.bb.4c.0d.02.00.00.00
```

There appears to be an additional byte at the beginning of the payload. It's a 0x70, which is ""p"" - the last letter in the last user property just before the payload starts in the PUBLISH packet (i.e. the ""p"" in ""gzip"").

It does, however, appear to properly decode the properties, reporting them as:
```
[ContentType : application/json, ResponseTopic : replies/MqttStubClient/259288/0ed0eaa8-14f8-11ed-9ae3-256dff621944, CorrelationData : b'0', UserProperty : [('timestamp', '1659729115.1889336'), ('content-encoding', 'gzip')]]
```

I'm working on an x86_64, Linux Mint 20 (Ubuntu 20.04), with released Python client 1.6.1 using Python 3.8","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/672/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/672,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H71Cz,paho.mqtt.python,1206866099,672,NA,fpagliughi,4303121,Frank Pagliughi,,NA,2022-08-05T21:10:22Z,2022-08-05T21:10:22Z,"This will create and send a message that get mis-read:
```
#!/usr/bin/env python3

import gzip
import time
import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
from paho.mqtt.packettypes import PacketTypes

payload = gzip.compress(b""[]"")

cli = mqtt.Client(protocol=mqtt.MQTTv5)
cli.connect(""localhost"", 1883, 60)

props = mqtt.Properties(PacketTypes.PUBLISH)
props.ContentType = ""application/json""
props.ResponseTopic = ""replies/MqttStubClient/259288/0ed0eaa8-14f8-11ed-9ae3-256dff621944""
props.CorrelationData = b""0""
props.UserProperty = (""timestamp"", str(time.time()))
props.UserProperty = (""content-encoding"", ""gzip"")

cli.publish(""test"", payload, 1, False, props)

cli.loop(1.0)
cli.disconnect()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H71Cz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/672,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H8uh0,paho.mqtt.python,1207101556,672,NA,fpagliughi,4303121,Frank Pagliughi,,NA,2022-08-06T00:20:04Z,2022-08-06T00:20:04Z,Oops... looks like I had an older version of the package hidden in my path. Seems this was already fixed in the latest release. Never mind.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5H8uh0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,paho.mqtt.python,1332432439,673,disconnect() and __del__() not always working on a linux machine,maovidal,13444566,Mauricio Vidal,,OPEN,2022-08-08T21:44:07Z,2024-01-08T09:10:19Z,"Hi all:

Sometimes my MQTT client needs to close its connection to the broker and immediately open a new one with a different client id, will message and subscriptions. That client runs in a `Linux Intel` PC.

What I noticed is that the client was not disconnecting from the broker when issuing `disconnect()`, and it kept publishing messages with the same connection. While it is not clear to me why,  after reading #170 and #325 I found that `__del__()` is needed.

I made the script below that performs 100 consecutive connections and disconnections to test the disconnection using `__del__()`. However, my `Intel Linux` client is still randomly having its connections not being closed, while my development machine, an `Intel macOS` on the same network than the client and `mosquitto` broker, does not miss any of the disconnections (But still, requires the `__del__()`):

```
import time
import paho.mqtt.client as mqtt

# Callbacks to help diagnose
def on_connect(mqttc, obj, flags, rc):
    print(""Connected to %s:%s"" % (mqttc._host, mqttc._port))

def on_disconnect(mqttc, client, rc):
    print(""Disconnected from %s:"" % mqttc._host)

def on_log(mqttc, obj, level, string):
    print(string)

# Client preparation
mqttc = mqtt.Client(
    client_id='testing_disconnect'
)
mqttc.on_connect = on_connect
mqttc.on_disconnect = on_disconnect
mqttc.on_log = on_log

mqttc.username_pw_set(
    username=<REDACTED>,
    password=<REDACTED>,
)

# Test
connection_test: int = 1
while connection_test <= 100:

    # 1. Client prepares a will message whose content is the test number
    #    performed (that should be received by other clients on every
    #    disconnection)
    mqttc.will_set(
        topic=""Disconnection test"",
        payload=str(connection_test),
        qos=0,
        retain=False,
    )

    # 2. Client connects
    mqttc.connect_async(
    # mqttc.connect(  # Also works
        host=""192.168.2.1"",
        port=1883,
        keepalive=60,
    )
    mqttc.loop_start()
    print(connection_test)

    # 3. Client waits a bit, in case someonelse needs a bit of time to perform
    #    something else before receiving the disconnection.
    time.sleep(0.5)

    # 4. Client disconnects (The will message should be dispatched by the
    #    the broker)
    mqttc.disconnect()
    mqttc.__del__()
    mqttc.loop_stop()

    # 5. Preparation for the next test
    connection_test = connection_test + 1
```

In the case of my Linux client, the terminal reported this, with the notable presence of: `OSError: [Errno 9] Bad file descriptor` in some iterations:

```
# python demo_paho_client.py 
1
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
2
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
3
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-3 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
4
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
5
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
6
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
7
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
8
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
9
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
10
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
11
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
12
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
13
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
14
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
15
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
16
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
17
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
18
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
19
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
20
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
21
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
22
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
23
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
24
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
25
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
26
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
27
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
28
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
29
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
30
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
31
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
32
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
33
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
34
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
35
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
36
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
37
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
38
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
39
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
40
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
41
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
42
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
43
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
44
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
45
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
46
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
47
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
48
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
49
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-49 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
50
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
51
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
52
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
53
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
54
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
55
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-55 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
56
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
57
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
58
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
59
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
60
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
61
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
62
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
63
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
64
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
65
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
66
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
67
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
68
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
69
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
70
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
71
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
72
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
73
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
74
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-74 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
75
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
76
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
77
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
78
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
79
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
80
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
81
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
82
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
83
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Disconnected from 192.168.2.1:
84
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
85
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
86
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
87
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
88
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
89
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
90
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
91
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
92
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
93
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
94
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-94 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
95
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
96
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
97
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
98
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
99
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Received CONNACK (0, 0)
Connected to 192.168.2.1:1883
Sending DISCONNECT
Exception in thread Thread-99 (_thread_main):
Traceback (most recent call last):
  File ""/usr/lib/python3.10/threading.py"", line 1009, in _bootstrap_inner
  File ""/usr/lib/python3.10/threading.py"", line 946, in run
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1176, in _loop
    self._sockpairR.recv(10000)
OSError: [Errno 9] Bad file descriptor
100
Sending CONNECT (u1, p1, wr0, wq0, wf1, c1, k60) client_id=b'testing_disconnect'
Sending DISCONNECT
```

Is there any way to prevent that error in the Linux machine or any other way to close the connection?

Thank you!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ICwfq,paho.mqtt.python,1208682474,673,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2022-08-08T22:27:10Z,2022-08-08T22:27:10Z,"Note a complete answer, but have a look at https://github.com/eclipse/paho.mqtt.python/issues/627, too.

I've wrapped this up into a subclass:
```
class Client(PahoClient):
    def loop_stop(self):
        super().loop_stop()
        self._reset_sockets(sockpair_only=True)
        return self
```

I'd be curious how this performs in your test. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ICwfq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IC8i9,paho.mqtt.python,1208731837,673,NA,maovidal,13444566,Mauricio Vidal,,NA,2022-08-08T23:43:49Z,2022-08-08T23:43:49Z,"Thank you!

While I was not able to fully understand the concepts explained in that issue, I just tested the script using the subclass you proposed and no calling `__del__()` on my testing script. Unfortunately that leads to no disconnections mosts of the time.

I noticed that the current `__del__()` on the original class just calls `_reset_sockets(self, sockpair_only=False)`, so the `self._sock_close()` is not called, and it seems that one is in charge of actually closing the connection.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IC8i9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IODFg,paho.mqtt.python,1211642208,673,NA,abhi1693,5083532,Abhimanyu Saharan,asaharan@onemindservices.com,NA,2022-08-11T07:30:33Z,2022-08-11T07:30:33Z,"@maovidal I have a working code that does not have this issue. The only two changes (not from the doc) that I implemented were

```python
import time
from paho.mqtt.packettypes import PacketTypes
from paho.mqtt.properties import Properties

time.sleep(0.01) # Not sure why, but this is needed otherwise the disconnects do not work as expected
properties = Properties(PacketTypes.DISCONNECT) # Added this to ensure the properties are properly set
client.disconnect(properties=properties)
client.loop_stop()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IODFg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IPY65,paho.mqtt.python,1211993785,673,NA,maovidal,13444566,Mauricio Vidal,,NA,2022-08-11T13:31:20Z,2022-08-11T13:31:20Z,"Thank you @abhi1693
I've noticed that the `properties` argument on `disconnect` is only used on the `MQTTv5`. However I tried what you mentioned and it didn't worked.
Could you please confirm if your working code is running on Linux?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IPY65/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/673,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IPZUT,paho.mqtt.python,1211995411,673,NA,abhi1693,5083532,Abhimanyu Saharan,asaharan@onemindservices.com,NA,2022-08-11T13:32:39Z,2022-08-11T13:32:39Z,"Yes, specifically inside alpine Linux 3.16","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5IPZUT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/677,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/677,paho.mqtt.python,1358503833,677,Not able to send data through secure port 8883,Eldho1416,101356753,Eldho K K,,CLOSED,2022-09-01T09:04:48Z,2022-09-11T05:44:28Z,"Hi,

I'm trying to send data through secured connection where i'm using` tls_set_context(context=None)` to match with server side certificate, and i was able to send data previously when i checked today it is not working, i'm not able to figure out what the issue is.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/677/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/677,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KAuaA,paho.mqtt.python,1241704064,677,NA,Sohaib90,43241257,Muhammad Sohaib Arshid,,NA,2022-09-09T09:02:21Z,2022-09-09T09:02:21Z,"Hello, 

It will be nice if I can have some more information. Maybe the code snippet you use, the strategy, or the error log (if you get one). Moreover, the behavior you are expecting and the behavior you actually see. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KAuaA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/677,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KFQdg,paho.mqtt.python,1242892128,677,NA,Eldho1416,101356753,Eldho K K,,NA,2022-09-11T05:43:38Z,2022-09-11T05:43:38Z,"Hi Sohaib, 

This issue was resolved, the issue was in server side. Thank you for your reply.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5KFQdg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/678,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/678,paho.mqtt.python,1375291776,678,Trio example not working with latest trio version,adiroiban,204609,Adi Roiban,adiroiban@gmail.com,CLOSED,2022-09-16T02:02:47Z,2023-12-28T14:16:30Z,"Hi,

I am trying to run paho with trio.

I am completely new to paho or trio.

I got a copy paste of the example.

I am using:

* Python 3.10.4  - Ubuntu 22.04
* trio (0.21.0)
* paho (1.6.1)

The traceback

```
python run-trio.py 
Starting
Socket opened
large write request
misc_loop started
Traceback (most recent call last):
  File ""/home/adi/chevah/run-trio.py"", line 139, in <module>
    trio.run(TrioAsyncMqttExample().main)
  File ""/home/adi/chevah/venv/lib/python3.10/site-packages/trio/_core/_run.py"", line 1946, in run
    raise runner.main_task_outcome.error
  File ""/home/adi/chevah/run-trio.py"", line 129, in main
    async with trio.open_nursery() as nursery:
  File ""/home/adi/chevah/venv/lib/python3.10/site-packages/trio/_core/_run.py"", line 813, in __aexit__
    raise combined_error_from_nursery
  File ""/home/adi/chevah/run-trio.py"", line 70, in read_loop
    await trio.hazmat.wait_readable(self.sock)
  File ""/home/adi/chevah/venv/lib/python3.10/site-packages/trio/_deprecate.py"", line 124, in __getattr__
    raise AttributeError(msg.format(self.__name__, name))
AttributeError: module 'trio' has no attribute 'hazmat'
finished large write
```

It looks like the hazmat was deprecated https://github.com/python-trio/trio/pull/1722","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/678/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/678,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Kb6SS,paho.mqtt.python,1248830610,678,NA,adiroiban,204609,Adi Roiban,adiroiban@gmail.com,NA,2022-09-16T02:07:07Z,2022-09-16T02:07:07Z,"I think the fix is something like this

```diff
-await trio.hazmat.wait_readable(self.sock)
+await trio.lowlevel.wait_readable(self.sock)
```

I tried it and it looks like it's working, I will open a PR :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Kb6SS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/680,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/680,paho.mqtt.python,1390522531,680,cannot subscribe that I published on same topic,liutheuniverse,83712510,,,CLOSED,2022-09-29T09:05:56Z,2024-01-08T04:20:05Z,"environment：
visual studio code=1.71.2
python=3.8
paho.mqtt=1.6.1

I changed my picture into base64 and published it, but when I subscribed to the base64 number under the same topic, it did not get the base64, so how should I solve it
[MQTT.zip](https://github.com/eclipse/paho.mqtt.python/files/9673043/MQTT.zip)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/680/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/680,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZFQI,paho.mqtt.python,1399084040,680,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:54:10Z,2023-01-20T23:54:10Z,"Your publishing client must call loop_start() or loop_forever(), to ensure the message is actually sent - you could exit in an on_publish callback.

Your subscribing client doesn't set the on_message callback until you call `subscribe()`, so it is faintly possible, although very unlikely, that the message is received before the on_message callback is set. I suspect the problem is in the publisher.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZFQI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/680,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFBnP,paho.mqtt.python,1880365519,680,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:20:05Z,2024-01-08T04:20:05Z,"Closing this due to inactivity (assume Rogers answer helped).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFBnP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/681,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/681,paho.mqtt.python,1400005971,681,Add documentation for the stubs types-paho-mqtt,JonathanPlasse,13716151,Jonathan Plasse,,CLOSED,2022-10-06T16:45:39Z,2024-06-03T12:16:45Z,"Hi,
I added stubs for `paho-mqtt` in `typeshed`, you can now use the package [types-paho-mqtt](https://pypi.org/project/types-paho-mqtt) for typing.
It could be mentioned in the documentation.
I would also love feedback about it if you have a problem with it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/681/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/681,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53vcbk,paho.mqtt.python,2008925924,681,NA,JonathanPlasse,13716151,Jonathan Plasse,,NA,2024-03-20T07:13:12Z,2024-03-20T07:13:12Z,"Now that paho-mqtt have type annotation.
You may consider following the [typeshed removal process](https://github.com/python/typeshed/blob/main/CONTRIBUTING.md#third-party-library-removal-policy).
I open doing it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53vcbk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/682,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/682,paho.mqtt.python,1405081512,682,Subscriptions just disappear,Fischchen,61012902,Morris,,CLOSED,2022-10-11T18:46:11Z,2023-01-20T22:59:23Z,"I've noticed a big problem where subscriptions don't persist after server reboot

# What I used:
paho-mqtt 1.6.1
RabbitMQ with MQTT Plugin

# To reproduce:
Connect a publisher and a subscriber to any topic.
Both are set to reconnect on failure.

""Reboot"" the server, causing the both publisher and subscriber to disconnect, and later reconnect.
Now any previous subscriptions are gone. As far as I know, this isn't mentioned in the Documentation.

# Workaround
Put the subscribe you part of the code in the ""On Connect"" event
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/682/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/682,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY8vv,paho.mqtt.python,1399049199,682,NA,ralight,79578,Roger Light,,NA,2023-01-20T22:59:04Z,2023-01-20T22:59:04Z,"I would recommend putting your call to `subscribe()` in your `on_connect()` callback so that it is restored on reconnect. Alternatively, you should set clean_start to false and set a session-expiry-interval, for MQTT v5 clients, or set clean_session to false for MQTT v3.x clients.

I hope this helps.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY8vv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,paho.mqtt.python,1405941859,683,Disconnection with error code 16,ivanvaccarics,25437300,Ivan Vaccari,,OPEN,2022-10-12T10:11:34Z,2024-07-15T07:09:44Z,"Dear all, I encountered an issue on my client. Specifically, the client is connected to a MQTT broker v3.1.1 with username, password and certs. The client is able to correctly connect and receive messages for some time but then the client enters in this loop:

`
INFO:root:Device disconnected with result code: 16`
`
INFO:root:Device connected with result code: 0
`
`
INFO:root:Device disconnected with result code: 16`
`
INFO:root:Device connected with result code: 0
`

In this way, I can't parse the data. How can i manage this? What means the error code 16? This is my code:

        import json
        import logging
        from paho.mqtt import client as mqtt
        import ssl
        import os
        import copy
        logging.getLogger().setLevel(logging.INFO)
        
        USERNAME_BROKER = os.getenv('USERNAME_BROKER')
        PWD_BROKER = os.getenv('PWD_BROKER')
        BROKER_URL = os.getenv('BROKER_URL')
        TOPIC = 'sub/Test/#'
        QOS = 0
        
        def on_connect(client, userdata, flags, rc):
            logging.info(""Device connected with result code: "" + str(rc))
        
        def on_disconnect(client, userdata, rc):
            logging.info(""Device disconnected with result code: "" + str(rc))
        
        def on_publish(client, userdata, mid):
            logging.info(""Device sent message"")
            
        def on_message(client, userdata, message):
            data = json.loads(message.payload.decode(""utf-8""))
            print(data)
            
        client = mqtt.Client(client_id=USERNAME_BROKER, protocol=mqtt.MQTTv311)
        client.on_connect = on_connect
        client.on_disconnect = on_disconnect
        client.on_publish = on_publish
        client.on_message = on_message
        client.username_pw_set(username=USERNAME_BROKER, password=PWD_BROKER)
        client.tls_set(ca_certs=""./certs/cert1.pem"", certfile=""./certs/cert2.pem"", keyfile=""./certs/key.pem"",
        cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLSv1_2, ciphers=None)
        client.tls_insecure_set(False)
        client.connect(BROKER_URL, port=8883, keepalive=30)
        client.subscribe(TOPIC, QOS)
        client.loop_forever()

Thanks in advance.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OHHsg,paho.mqtt.python,1310489376,683,NA,RobertDeRose,388745,Robert DeRose,,NA,2022-11-10T15:45:29Z,2022-11-10T15:45:29Z,"@ivanvaccarics I'm experiencing a similar issue, I've noticed that the issue seems to be related to receiving a large number of MQTT message in quick succession and it appears that the Client library sends a PINGREQ but either never gets the PINGRESP or fails to process it during the influx of incoming message.

1. Have you enable the paho.mqtt logging and debugging output?
2. Do you also notice the issue when you receive a large number of incoming MQTT messages from the broker?

For me, I reproduced the issue using code like yours above and the using the `mosquitto_pub` cli tool to flood the broker

```bash
while [ 1 ];
do
mosquitto_pub -t test -m ''
done
```

This easily results in the Disconnect loop you are having for me","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OHHsg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fJUdN,paho.mqtt.python,1596278605,683,NA,raomin,4460208,Raomin,,NA,2023-06-18T21:48:20Z,2023-06-18T21:48:20Z,"Same here. When receiving a lot of messages....
Cannot get it to reconnect btw.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fJUdN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fV9kQ,paho.mqtt.python,1599592720,683,NA,raomin,4460208,Raomin,,NA,2023-06-20T21:32:40Z,2023-06-20T21:32:40Z,did anyone got a solution for this?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fV9kQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f-LSx,paho.mqtt.python,1610134705,683,NA,RobertDeRose,388745,Robert DeRose,,NA,2023-06-27T20:01:04Z,2023-06-27T20:01:04Z,"> did anyone got a solution for this?

The only solution I have been able to come up with was to ensure my working thread that is also handling the broker connection does it's tasks as fast as possible and if it can't do it fast, spawn off a worker thread to do the work.  This could add extra complexity depending on your scenario though.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f-LSx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f-ptp,paho.mqtt.python,1610259305,683,NA,raomin,4460208,Raomin,,NA,2023-06-27T21:42:22Z,2023-06-27T21:42:22Z,"Indeed that could explain but would be much too complex to change.
Eventually I used [gmqtt](https://github.com/wialon/gmqtt) which is working fine. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f-ptp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE-NA,paho.mqtt.python,1880351552,683,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:54:28Z,2024-01-08T03:54:28Z,"Error code 16 is probably (sorry there may be other alternatives) `MQTT_ERR_KEEPALIVE`; this can sometimes be due to user code (if your message handler takes too long) possibly mixed with high message volumes (see issue #328). 

My feeling is that this is a duplicate of #328 (so should be closed in favour of that issue); however I'd welcome feedback on that (for now will tag this as info needed).

Note: This is part of an exercise to clean up old issues so that the project can move forwards.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE-NA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55q2v3,paho.mqtt.python,2041277431,683,NA,fly2016-1-12,16664407,susan.li,,NA,2024-04-07T02:11:57Z,2024-04-07T02:11:57Z,"hi, MattBrittan.
when will this issue be fixed?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55q2v3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55rF7p,paho.mqtt.python,2041339625,683,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-04-07T06:48:32Z,2024-04-07T06:48:32Z,"@fly2016-1-12 is this still an issue in v2? This is an open source project, so the issue will be fixed when someone feels like working on it (please feel free to raise a PR if you have a solution).
Genrally the more info in the issue, the more likely it is that someone will put effort into resolving the issue (if you can provide a simple way to replicate the issue that would probably help).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs55rF7p/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/683,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EygKN,paho.mqtt.python,2227831437,683,NA,dberardo-com,65530457,,,NA,2024-07-15T07:09:43Z,2024-07-15T07:09:43Z,same issue here ... any hints ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EygKN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/684,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/684,paho.mqtt.python,1424493702,684,Paho.mqtt.publish.multiple hangs if given an empty list of messages,semicolonTransistor,15145827,Jinyu Liu,liu.jy@msn.com,CLOSED,2022-10-26T18:05:13Z,2023-01-20T23:02:19Z,"Assuming an MQTT broker is set up on localhost at port 1883, running the following snipping will hang.

```python
publish.multiple(
        msgs=[],
    )
```
I have not been quite able to pinpoint why this happens, it seems likely due to ```_on_publish``` never being called, and the client is never disconnected. 

If this is unintentional, I'd suggest adding an else clause to the check for ```len(userdata) > 0``` in ```_on_connect``` and disconnecting the client there.

If this is indeed the intended behavior, could the documentation be made clearer on it?

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/684/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/684,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY9SJ,paho.mqtt.python,1399051401,684,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:02:18Z,2023-01-20T23:02:18Z,"Thank you, this case will now raise a ValueError - it shouldn't be allowed. It will be in the next release.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY9SJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,paho.mqtt.python,1449412139,685,ConnectionRefusedError: [Errno 111] Connection refused,emresoyunmez,63851907,Mehmet Emre Söyünmez,,CLOSED,2022-11-15T08:59:50Z,2024-07-18T00:08:24Z,"Hello,
I am using the python paho.mqtt.client to connect with the mosquitto broker installed on the same device. I am getting the connection refused error. The code and the error is like below:
```
>>> import paho.mqtt.client as mqtt
>>> client = mqtt.Client()
>>> client.connect(""192.168.0.13"",1883) 
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/user/.local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 914, in connect
    return self.reconnect()
  File ""/home/user/.local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 1044, in reconnect
    sock = self._create_socket_connection()
  File ""/home/user/.local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 3685, in _create_socket_connection
    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)
  File ""/usr/lib/python3.9/socket.py"", line 843, in create_connection
    raise err
  File ""/usr/lib/python3.9/socket.py"", line 831, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [Errno 111] Connection refused 
```
The mosquitto is loaded and running
```
$ sudo systemctl status mosquitto
● mosquitto.service - Mosquitto MQTT Broker
     Loaded: loaded (/lib/systemd/system/mosquitto.service; enabled; vendor preset: enabled)
     Active: active (running) since Tue 2022-11-15 11:30:27 +03; 10min ago
       Docs: man:mosquitto.conf(5)
             man:mosquitto(8)
    Process: 2519 ExecStartPre=/bin/mkdir -m 740 -p /var/log/mosquitto (code=exited, status=0/SUCCESS)
    Process: 2520 ExecStartPre=/bin/chown mosquitto /var/log/mosquitto (code=exited, status=0/SUCCESS)
    Process: 2521 ExecStartPre=/bin/mkdir -m 740 -p /run/mosquitto (code=exited, status=0/SUCCESS)
    Process: 2522 ExecStartPre=/bin/chown mosquitto /run/mosquitto (code=exited, status=0/SUCCESS)
   Main PID: 2523 (mosquitto)
      Tasks: 1 (limit: 4643)
     Memory: 980.0K
        CPU: 691ms
     CGroup: /system.slice/mosquitto.service
             └─2523 /usr/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf

Nov 15 11:30:27 user systemd[1]: Starting Mosquitto MQTT Broker...
Nov 15 11:30:27 user systemd[1]: Started Mosquitto MQTT Broker.
```
```
$ sudo mosquitto -v
1668501697: mosquitto version 2.0.11 starting
1668501697: Using default config.
1668501697: Starting in local only mode. Connections will only be possible from clients running on this machine.
1668501697: Create a configuration file which defines a listener to allow remote access.
1668501697: For more details see https://mosquitto.org/documentation/authentication-methods/
1668501697: Opening ipv4 listen socket on port 1883.
1668501697: Error: Address already in use
1668501697: Opening ipv6 listen socket on port 1883.
1668501697: Error: Address already in use
```
```
$ netstat -a | grep 1883
tcp        0      0 localhost:1883          0.0.0.0:*               LISTEN     
tcp6       0      0 localhost:1883          [::]:*                  LISTEN
```

I can connect to the broker by using the pub-sub of the mosquitto-clients and see the messages published so I don't think that something is wrong with broker. But the client somehow doesn't connect to it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OYZmM,paho.mqtt.python,1315019148,685,NA,JonathanPlasse,13716151,Jonathan Plasse,,NA,2022-11-15T09:18:15Z,2022-11-15T09:18:15Z,Have you tried using `localhost` instead of your IP address?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OYZmM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OYj5H,paho.mqtt.python,1315061319,685,NA,emresoyunmez,63851907,Mehmet Emre Söyünmez,,NA,2022-11-15T09:52:52Z,2022-11-15T09:52:52Z,"> 

Yes, it doesn't return any errors. But I need this device to work as a bridge between several devices and the client will be handling some processes so I need to make it work with given IP.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5OYj5H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY96_,paho.mqtt.python,1399054015,685,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:05:04Z,2023-01-20T23:05:04Z,"```
1668501697: Opening ipv4 listen socket on port 1883.
1668501697: Error: Address already in use
1668501697: Opening ipv6 listen socket on port 1883.
1668501697: Error: Address already in use
```

These errors suggest that mosquitto isn't able to open its sockets - perhaps something else is listening already? I don't believe this is a problem with the Python client.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY96_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bpGNm,paho.mqtt.python,1537500006,685,NA,,,,,NA,2023-05-07T17:31:03Z,2023-05-07T17:31:03Z,"![image](https://user-images.githubusercontent.com/99731369/236693058-3f4376aa-fd4d-4891-8cc2-105c870e3712.png)

similar error anyone have solution?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bpGNm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/685,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNN2b,paho.mqtt.python,2234834331,685,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:08:23Z,2024-07-18T00:08:23Z,Closing due to age/inactivity (and the fact that the original issue appears to have been something else running on the port).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNN2b/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,paho.mqtt.python,1453811423,687,MQTT v5 callback parameters for `on_subscribe` and `on_unsubscribe` callback handlers swapped,jbouwh,7188918,Jan Bouwhuis,,CLOSED,2022-11-17T18:43:06Z,2024-07-18T15:23:02Z,"The MQTT v5 callback parameters for `reasoncodes` and `properties` are swapped for `on_subscribe()` and `on_unsubscribe()`.
This is very confusing and makes it harder to reuse the callback handler.

`on_subscribe(self, self._userdata, mid, reasoncodes, properties)`

https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L3258-L3259

`on_unsubscribe(self, self._userdata, mid, properties, reasoncodes)`

https://github.com/eclipse/paho.mqtt.python/blob/9782ab81fe7ee3a05e74c7f3e1d03d5611ea4be4/src/paho/mqtt/client.py#L3452-L3453 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGy95,paho.mqtt.python,1880829817,687,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T11:32:19Z,2024-01-08T11:32:19Z,This is annoying but resolving it would require a breaking change; as such I'm going to tag it as an enhancement.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGy95/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wIAFt,paho.mqtt.python,1881145709,687,NA,jbouwh,7188918,Jan Bouwhuis,,NA,2024-01-08T14:43:56Z,2024-01-08T14:43:56Z,"True, may be we should deprecation the old form and come with a new API that will replace the old one, so they can run some time together. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wIAFt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNMo1,paho.mqtt.python,2234829365,687,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T00:06:46Z,2024-07-18T00:06:46Z,Closing this as the V2 API made the calls consistent.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNMo1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FQ6EC,paho.mqtt.python,2235801858,687,NA,jbouwh,7188918,Jan Bouwhuis,,NA,2024-07-18T07:19:44Z,2024-07-18T07:19:44Z,"One note though. The type stubs seem not updated yet. So mypy will complain about incorrect typing or the absence of `CallbackAPIVersion`, this should be fixed too before we can upgrade to 2.1.0.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FQ6EC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FSAsa,paho.mqtt.python,2236091162,687,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-18T09:49:30Z,2024-07-18T09:49:30Z,"@jbouwh (working way outside my knowledge level here :-) ) - I believe the type info is all there:

```
CallbackOnSubscribe_v1_mqtt3 = Callable[[""Client"", Any, int, Tuple[int, ...]], None]
CallbackOnSubscribe_v1_mqtt5 = Callable[[""Client"", Any, int, List[ReasonCode], Properties], None]
CallbackOnSubscribe_v1 = Union[CallbackOnSubscribe_v1_mqtt3, CallbackOnSubscribe_v1_mqtt5]
CallbackOnSubscribe_v2 = Callable[[""Client"", Any, int, List[ReasonCode], Union[Properties, None]], None]
CallbackOnSubscribe = Union[CallbackOnSubscribe_v1, CallbackOnSubscribe_v2]
```

but it's pretty complicated due to the multiple API versions. Might be worth raising a seperate issue with full details (but I don't know if this may be a limitation with the tool, intellij seems to pickup the type info OK and lists a multitude of possibilities).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FSAsa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/687,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FU6jI,paho.mqtt.python,2236852424,687,NA,jbouwh,7188918,Jan Bouwhuis,,NA,2024-07-18T15:23:01Z,2024-07-18T15:23:01Z,"> @jbouwh (working way outside my knowledge level here :-) ) - I believe the type info is all there:
> 
> ```
> CallbackOnSubscribe_v1_mqtt3 = Callable[[""Client"", Any, int, Tuple[int, ...]], None]
> CallbackOnSubscribe_v1_mqtt5 = Callable[[""Client"", Any, int, List[ReasonCode], Properties], None]
> CallbackOnSubscribe_v1 = Union[CallbackOnSubscribe_v1_mqtt3, CallbackOnSubscribe_v1_mqtt5]
> CallbackOnSubscribe_v2 = Callable[[""Client"", Any, int, List[ReasonCode], Union[Properties, None]], None]
> CallbackOnSubscribe = Union[CallbackOnSubscribe_v1, CallbackOnSubscribe_v2]
> ```
> 
> but it's pretty complicated due to the multiple API versions. Might be worth raising a seperate issue with full details (but I don't know if this may be a limitation with the tool, intellij seems to pickup the type info OK and lists a multitude of possibilities).
Right, the code works btw, it is just the type stubs, imo multiple existing issues have the same root cause.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FU6jI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/688,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/688,paho.mqtt.python,1459636900,688,How to log full MQTT packet when logging mode is DEBUG?,eercanayar,1220261,Emir Ayar,,CLOSED,2022-11-22T10:59:58Z,2024-01-08T07:26:30Z,"Hi all,

The issue title itself is pretty clear but in summary; I would like to log the complete MQTT packet when logging mode is set to DEBUG. How can I implement this on paho.mqtt.python? 

Thanks in advance for your guidance.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/688/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/688,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFhSL,paho.mqtt.python,1880495243,688,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T07:26:22Z,2024-01-08T07:26:22Z,"This is not supported;  current logging is:

``` 
if self._protocol == MQTTv5:
      self._easy_log(
          MQTT_LOG_DEBUG,
          ""Received PUBLISH (d%d, q%d, r%d, m%d), '%s', properties=%s, ...  (%d bytes)"",
          message.dup, message.qos, message.retain, message.mid,
          print_topic, message.properties, len(message.payload)
      )
  else:
      self._easy_log(
          MQTT_LOG_DEBUG,
          ""Received PUBLISH (d%d, q%d, r%d, m%d), '%s', ...  (%d bytes)"",
          message.dup, message.qos, message.retain, message.mid,
          print_topic, len(message.payload)
      )
```

Logging the payload would be counterproductive in many cases (it's binary so there is no guarantee it's printable and it might be huge!). 

If you have a specific requirement for this I'd suggest logging it in your `on_message` handler.

As this issue is over a year old (sorry about the delay!) I'm going to close it (as I believe the above answers your question and don't believe it's likely that we will begin logging the message body).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFhSL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/689,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/689,paho.mqtt.python,1462379336,689,Publish global helper function: 'Single' and 'Multiple',kami0601,96497141,,,OPEN,2022-11-23T20:38:16Z,2023-01-20T22:41:53Z,"In the 'single' or 'multiple' global helper functions for Publish, is there concern if it gets called every second? My system is having trouble with 'loop_start' or 'loop_forever' so I just opted to use the 'single' or 'multiple' helper functions instead. The only functionality needed for my system is for the topic and payload to be published every second. Given that the 'single' and 'multiple' helper functions connect and disconnect on each call, would calling it every second be ok? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/689/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/689,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY50t,paho.mqtt.python,1399037229,689,NA,ralight,79578,Roger Light,,NA,2023-01-20T22:41:20Z,2023-01-20T22:41:20Z,"I would definitely recommend against a regular reconnect like this, especially if you are using SSL - the SSL handshake is very CPU intensive. Something like this should work using the general functions:

```
import paho.mqtt.client as mqtt

mqttc = mqtt.Client()
mqttc.connect(""localhost"", 1883, 60)
mqttc.loop_start()

topic = ""my/topic""

while True:
    payload = get_data()
    mqttc.publish(topic, payload)
    time.sleep(1)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY50t/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/690,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/690,paho.mqtt.python,1467889706,690,Safeguard for subscribing to empty list of topics.,peromvikgoodtech,110603187,,,CLOSED,2022-11-29T11:20:11Z,2024-01-21T10:30:16Z,"I had an issue where I mistakenly called `MqttClient.subscribe()` with an empty list inside the `on_connect()` callback, as recommended in the docs. Instead of raising an error, the client disconnects and enters an indefinite reconnect loop. 

Recommended fix: Assert non-emptiness of list passed to the subscribe method in MqttClient.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/690/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/690,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY7S-,paho.mqtt.python,1399043262,690,NA,ralight,79578,Roger Light,,NA,2023-01-20T22:51:23Z,2023-01-20T22:51:23Z,"Thank you, I've fixed that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY7S-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/691,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/691,paho.mqtt.python,1472235353,691,Error：when I use paho.mqtt send message with SSL，sometimes it would be raise error like this:,lowmanisbusy,34531528,lowmanisbusy,,CLOSED,2022-12-02T02:55:50Z,2024-08-21T20:14:58Z,"Traceback (most recent call last):
  File ""/app/extensions/mqtt_clients.py"", line 344, in another_one_publish
    msg_info = self.client.publish(topic, payload, qos, retain)
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 1257, in publish
    rc = self._send_publish(
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 2693, in _send_publish
    return self._packet_queue(PUBLISH, packet, mid, qos, info)
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 3016, in _packet_queue
    return self.loop_write()
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 1577, in loop_write
    rc = self._packet_write()
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 2464, in _packet_write
    write_length = self._sock_send(
  File ""/usr/local/lib/python3.8/dist-packages/paho/mqtt/client.py"", line 649, in _sock_send
    return self._sock.send(buf)
  File ""/usr/local/lib/python3.8/dist-packages/gevent/_ssl3.py"", line 501, in send
    return self._sslobj.write(data)
ssl.SSLError: [SSL: BAD_LENGTH] bad length (_ssl.c:2410)

PS: If the payload more bigger (or bad network)，it would be raise more frequently","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/691/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/691,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFfeW,paho.mqtt.python,1880487830,691,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T07:18:07Z,2024-01-08T07:18:07Z,"Apologies for the (very) delayed response. Can you please confirm if you are still seeing this and, if so, what version of the library you are using.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFfeW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/691,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JRADp,paho.mqtt.python,2302935273,691,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-08-21T20:14:58Z,2024-08-21T20:14:58Z,I'm going to close this as without more info there is little that can be done. It's possible that issue #853 has the same root cause (and there is some more info on that issue - have not traced a root cause at this point so any info you can add to that issue would be helpful).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JRADp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/692,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/692,paho.mqtt.python,1472450346,692,loop start thread died without any log,rty813,22488813,Zhang Jinyang,zjy523213189zjy@gmail.com,OPEN,2022-12-02T07:47:15Z,2024-01-08T06:32:35Z,"paho_mqtt version: 1.6.1
python version: 3.8
My program recv and publish msgs circularly. And suddenly, the program cannot receive or send any message
and the _on_disconnect method was never called.
Here is the log:

![image](https://user-images.githubusercontent.com/22488813/205242075-c0273279-bb80-4fec-93bf-145ec4e5ee41.png)
![image](https://user-images.githubusercontent.com/22488813/205241744-c457361e-7483-4d52-a879-f2b225a7c0a2.png)
![image](https://user-images.githubusercontent.com/22488813/205241854-afe360dd-e751-40a1-abe1-dabbbfdfc816.png)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/692/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/692,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFWA3,paho.mqtt.python,1880449079,692,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:32:31Z,2024-01-08T06:32:31Z,"Interesting - thanks for the screenshots (and sorry for the huge delay in replying). There are a number of possibly related issues open and some PR's going into the next release (due out shortly) that may help.

Unfortunately it's difficult to see what's happening from the screenshots (because, as you say, the point of interest is that `PUBLISH` stops!). Are you able to provide any further info? (a reproducer would be great, but in the absence logs (broker or client) or more general info (is this still happening, is it a one off etc) would be helpful).

Without more info I think we will need to ask you to wait for the next release and test with that (as it may fix this and includes quite a few fixes).

Note: This is part of an exercise to clean up old issues so that the project can move forwards.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFWA3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/693,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/693,paho.mqtt.python,1482035182,693,Receiving MQTT_ERR_NO_CONN when re-using connection,badgerwithagun,6483013,Graham Crockford,,CLOSED,2022-12-07T14:18:27Z,2024-01-08T06:14:46Z,"I have a simple script which connects at the beginning:
```
mq = paho.Client ( qId)
mq.username_pw_set ( uid, pw)
mq.connect ( host, port, 30
```
Then re-uses this connection in an async callback:
```
def callback( data ):
    global mq, topic, host, port
    try:
        res = mq.publish ( topic, data )
        if res.rc != paho.MQTT_ERR_SUCCESS:
            print(""Error {} when publishing"".format(res.rc))
        elif
            print(""Success"")
```
I get ""Success"" occasionally, but mostly get the error (MQTT_ERR_NO_CONN)

Are there are any issues with sharing connections between threads?

If so, is there a better way of doing this?

I've tried reconnecting whenever I get that error, in case I can slowly bootstrap all the threads, but the constant failures persist.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/693/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/693,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZD0W,paho.mqtt.python,1399078166,693,NA,ralight,79578,Roger Light,,NA,2023-01-20T23:40:18Z,2023-01-20T23:40:18Z,"Are you using a call to any of the `loop*()` functions anywhere? If not, your connection will fail due to the background networking not being completed. Use `loop_forever()` (which blocks) where your application does not need to do anything other than respond to MQTT callbacks, and `loop_start()` (which starts a thread and so does not block) where your application has other tasks to achieve.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TZD0W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/693,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFS9N,paho.mqtt.python,1880436557,693,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:14:45Z,2024-01-08T06:14:45Z,"I'm going to close this due to inactivity (hopefully Rogers comment helped).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFS9N/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/694,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/694,paho.mqtt.python,1486585243,694,OSError have no include TimeoutError?,nanshenwei,40733582,,,OPEN,2022-12-09T11:24:07Z,2024-01-08T06:13:41Z,"I found this error⬇️
```bash
Exception in thread Thread-1 (_thread_main):
Traceback (most recent call last):
  File ""/opt/homebrew/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py"", line 1016, in _bootstrap_inner
    self.run()
  File ""/opt/homebrew/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/threading.py"", line 953, in run
    self._target(*self._args, **self._kwargs)
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1164, in _loop
    rc = self.loop_read()
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1556, in loop_read
    rc = self._packet_read()
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 2370, in _packet_read
    command = self._sock_recv(1)
  File ""/opt/homebrew/lib/python3.10/site-packages/paho/mqtt/client.py"", line 640, in _sock_recv
    return self._sock.recv(bufsize)
TimeoutError: [Errno 60] Operation timed out
```
and check the code:
<img width=""883"" alt=""image"" src=""https://user-images.githubusercontent.com/40733582/206690972-498c780a-2bbf-469d-a13a-f2d911efc181.png"">
```python
class ConnectionError(OSError): ...
```
**Looks fine, But it is none.
So I add this code:**
<img width=""691"" alt=""image"" src=""https://user-images.githubusercontent.com/40733582/206691362-9e6394c8-277f-4fea-bb6b-a32d3649ea9d.png"">
**It works.**
<img width=""791"" alt=""image"" src=""https://user-images.githubusercontent.com/40733582/206691542-c6cca4b5-75af-4f42-b023-d98902b350a4.png"">

This is not the same as described in the previous issue #291 and #288 , why?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/694/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/694,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFSxa,paho.mqtt.python,1880435802,694,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:13:40Z,2024-01-08T06:13:40Z,"PR #710 has been (partly!) committed and should resolve this. I'm going to flag the issue as completed (would appreciate confirmation that the issue is resolved).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFSxa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,paho.mqtt.python,1510090291,696,MQTTv5 and QoS 2 does not work,thatsdone,271720,Masanori ITOH,,CLOSED,2022-12-24T13:10:25Z,2024-04-28T14:47:51Z,"Hi,

I noticed currently MQTTv5 and QoS 2 does not work.
I found a similar issue in MQTTv3 days (6 years ago!): https://github.com/eclipse/paho.mqtt.python/issues/103,
and are there similar problems in MQTTv5?

Distro: Ubuntu 22.04(amd64)
Python: 3.10.6
Paho: paho-mqtt 1.6.1
MQTT Broker :  EMQX Community Edition docker image (emqx/emqx:4.4.11)

```
$ python3 server.py 2
qos = 2
on_log(): server : 16 Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'' properties=None
on_log(): server : 16 Sending SUBSCRIBE (d0, m1) [(b'topic1', {QoS=2, noLocal=False, retainAsPublished=False, retainHandling=0})]
on_log(): server : 16 Received CONNACK (0, Success) properties=[AssignedClientIdentifier : MzA4NDA4NjYwMzY0NDMzNTU1MTkzMzQ3NTUwNzU0ODk3OTC, TopicAliasMaximum : 65535, RetainAvailable : 1, MaximumPacketSize : 1048576, WildcardSubscriptionAvailable : 1, SubscriptionIdentifierAvailable : 1, SharedSubscriptionAvailable : 1]
on_log(): server : 16 Received SUBACK
on_log(): server : 16 Received PUBLISH (d0, q2, r0, m1), 'topic1', properties=[], ...  (18 bytes)
on_log(): server : 16 Sending PUBREC (Mid: 1)
Traceback (most recent call last):
  File ""server.py"", line 27, in <module>
    mqttc.loop_forever()
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 1164, in _loop
    rc = self.loop_read()
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 1556, in loop_read
    rc = self._packet_read()
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 2439, in _packet_read
    rc = self._packet_handle()
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 3037, in _packet_handle
    return self._handle_pubrel()
  File ""/usr/local/lib/python3.10/dist-packages/paho/mqtt/client.py"", line 3348, in _handle_pubrel
    mid, = struct.unpack(""!H"", self._in_packet['packet'])
struct.error: unpack requires a buffer of 2 bytes
$
```

Here are my stupid programs.

If I give '1' for the argument, asking to use QoS 1, it works.
So, I'm wondering there is something wrong in QoS 2 code path.

server side
```
$ cat server.py
import sys
import paho.mqtt.client as mqtt

def on_message(client, userdata, msg):
    print('on_message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))

def on_log(mqttc, userdata, level, string):
    print('on_log(): %s : %s %s' % (userdata, level, string))

def message(client, userdata, msg):
    print('message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))

mqttc = mqtt.Client(protocol=mqtt.MQTTv5, userdata='server')
mqttc.on_message = on_message
mqttc.on_log = on_log
host = '192.168.241.12'
port = 31883
topic = 'topic1'
if len(sys.argv) >= 1:
    qos = int(sys.argv[1])
    print(f'qos = {qos}')
mqttc.connect(host, port, 60)
mqttc.message_callback_add(topic, message)

mqttc.subscribe(topic, qos=2)

mqttc.loop_forever()
```

client side
```
$ cat client.py
import sys
import paho.mqtt.client as mqtt

def on_log(mqttc, userdata, level, string):
    print('on_log(): %s : %s %s' % (userdata, level, string))

def on_message(client, userdata, msg):
    print('on_message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))

def message(client, userdata, msg):
    print('message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))


host = '192.168.241.12'
port = 31883
topic = 'topic1'
interval = 60
client_id = 'client'
mqttc = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv5, userdata='client')

mqttc.connect(host=host, port=port, keepalive=interval, clean_start=False)
mqttc.message_callback_add(topic, message)

def on_message(client, userdata, msg):
    print('on_message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))

def on_log(mqttc, userdata, level, string):
    print('on_log(): %s : %s %s' % (userdata, level, string))

def message(client, userdata, msg):
    print('message(): %s : %s %s %s %s / %s' % (userdata, msg.topic, msg.mid, msg.timestamp, msg.retain, msg.payload.decode()))

qos = 2
if len(sys.argv) >= 1:
    qos = int(sys.argv[1])
    print(f'qos = {qos}')
msg = 'Hello from client!'
print('publish(): publishing a message to: %s payload: %s' % (topic, msg))
mqttc.publish(topic, msg.encode('utf-8'), qos=qos)

mqttc.loop_forever()
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5R9XJt,paho.mqtt.python,1375040109,696,NA,naknz,9669086,,,NA,2023-01-09T02:45:11Z,2023-01-09T02:45:11Z,"Looks like this is a bug in the handling of the PUBREL messages, where with MQTTv5 after the packet identifier it will now include a reason code, and property length. The pack error is because there is these new trailing bytes after the identifier.

Quick work around is just passing the first 2 bytes to unpack: client.py:3348
`mid, = struct.unpack(""!H"", self._in_packet['packet'][:2])`

Better long term would be parsing the PUBREL reason code out as it can contain an error value.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5R9XJt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TQas5,paho.mqtt.python,1396812601,696,NA,Lenormju,13200639,Lenormand Julien,,NA,2023-01-19T11:12:24Z,2023-01-19T11:12:24Z,"I have the same problem when publishing my messages with QoS=2 while QoS=1 works fine. The solution provided by @naknz works fine.
I am still using the 1.5.1, and to check if I have the problem I use :
```shell
python -c 'line_number=3238; import paho.mqtt.client as target; from pathlib import Path; print(target.__file__); line_text = Path(target.__file__).read_text().split(""\n"")[line_number-1]; expected = ""        mid, = struct.unpack(\""!H\"", self._in_packet['\''packet'\''])""; print(line_text); print(expected); print(line_text == expected)'
```
You may have to adjust the line_number for other versions.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TQas5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY7fY,paho.mqtt.python,1399044056,696,NA,ralight,79578,Roger Light,,NA,2023-01-20T22:52:39Z,2023-01-20T22:52:39Z,"Thank you, this is now fixed and will be in the next release.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TY7fY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5b87Ul,paho.mqtt.python,1542698277,696,NA,matheuscandido,1309911,Matheus Candido,matheusoc@live.com,NA,2023-05-10T19:30:37Z,2023-05-10T19:30:37Z,"Hey @ralight, when will the next release happen? I really needed this QoS 2 for a product launch.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5b87Ul/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5e4IS9,paho.mqtt.python,1591772349,696,NA,NSchrading,1214475,,,NA,2023-06-14T18:19:53Z,2023-06-14T18:19:53Z,I also hit this issue. @ralight when can we expect a release to occur with this fix? It looks like there hasn't been a release in quite some time. Is this project still actively maintained?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5e4IS9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kXm97,paho.mqtt.python,1683910523,696,NA,drsantos89,9551412,Diogo Reis Santos,drsantos989@gmail.com,NA,2023-08-18T13:19:12Z,2023-08-18T13:19:12Z,Same here. Happy to help in anything needed to close this.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kXm97/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mBBtT,paho.mqtt.python,1711545171,696,NA,KonssnoK,10288926,Kons,,NA,2023-09-08T11:48:20Z,2023-09-08T11:48:20Z,"@ralight 
we faced the same issue as soon as we switched to mqtt5.

When is a new release expected? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mBBtT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mQSQZ,paho.mqtt.python,1715545113,696,NA,drsantos89,9551412,Diogo Reis Santos,drsantos989@gmail.com,NA,2023-09-12T11:27:24Z,2023-09-12T11:27:24Z,"FYI, installing from branch 1.6.x fixed the issues for me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mQSQZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xLq8x,paho.mqtt.python,1898884913,696,NA,matiasAS,7276332,,,NA,2024-01-18T17:09:18Z,2024-01-18T17:09:18Z,"@drsantos89 How to install the module from the 1.6.x branch? I don't understand, what version is it?
(with 1.6.1 and broker emqx 5.4 it gives me the error when I receive a message to which I am subscribed with qos=2)

speak spanish?, i from chile!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xLq8x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x-YmO,paho.mqtt.python,1912179086,696,NA,hostmasterpontuax,101596139,,,NA,2024-01-26T14:44:04Z,2024-01-26T14:44:04Z,"I ran an update in my project and noticed that banch 1.6.x was removed.
Now, what is the solution?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x-YmO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_PQ2,paho.mqtt.python,1912402998,696,NA,KonssnoK,10288926,Kons,,NA,2024-01-26T17:13:59Z,2024-01-26T17:13:59Z,"i guess it was removed because it was merged
ab5e7da5118841ab744965294db68f579b335f05","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_PQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_Qqp,paho.mqtt.python,1912408745,696,NA,hostmasterpontuax,101596139,,,NA,2024-01-26T17:18:39Z,2024-01-26T17:18:39Z,"Great. Can't wait to see 2.0 becoming stable release.
Till then, I managed to fork an already forked repo (with 1.6.x branch, of course).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_Qqp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_YG7,paho.mqtt.python,1912439227,696,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-26T17:42:50Z,2024-01-26T17:42:50Z,"You can also use the 2.0.0rc2 available on PyPI: https://pypi.org/project/paho-mqtt/2.0.0rc2/

If not regressions are found on this release candidate, the 2.0 will be release in February.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_YG7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_ZOI,paho.mqtt.python,1912443784,696,NA,matiasAS,7276332,,,NA,2024-01-26T17:44:49Z,2024-01-26T17:44:49Z,"@PierreF  what day in February?, 1st?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_ZOI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_xBe,paho.mqtt.python,1912541278,696,NA,matiasAS,7276332,,,NA,2024-01-26T18:57:22Z,2024-01-26T18:57:22Z,@PierreF 2.0.0rc2 is stable?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_xBe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/696,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58EVGx,paho.mqtt.python,2081509809,696,NA,Erickrk,55474466,Erick,,NA,2024-04-28T14:47:50Z,2024-04-28T14:47:50Z,"Hi,

I've been testing both version 1.3 and 2.0 for a project and it looks like the issue persists.
I am currently running Mosquitto version 2.0.18 in a Docker container and have configured publishers using both versions 1.3 and 2.0 of Paho.

## Paho 2.0 publisher:
```
import time
import random

import paho.mqtt.client as mqtt

# Based on: https://eclipse.dev/paho/files/paho.mqtt.python/html/migrations.html
# This should be static
broker_address = ""192.168.122.48"" 
topic = ""sensor/data""

# create new client instance
client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=""P1"")
client.connect(broker_address) 

# Publish sensor data with QoS 2 and retain flag
counter = 100
MAX_SIZE = 60 * 1024  # 60 KB
message = ""A"" * MAX_SIZE # This generates an interesting behavior in the broker, exchanging a lot of ACKs

for i in range(counter):
    # sensor_data = random.randint(0, 999)
    client.publish(topic, message, qos=2, retain=True)
    print(f""Message {i} published to {topic}"")
    time.sleep(0.01)  # Wait before next publish, increasing this didnt made it work

```
I've noticed it when trying to publish with QoS 2, the current code still doesn't reply to PUBREL as follows:
## Version 1.3

![pubrec-till-20](https://github.com/eclipse/paho.mqtt.python/assets/55474466/5892e3bd-2f71-4354-8d0e-72f59aad1f13)

## Version 2.0
![pubrec-till-20-v2](https://github.com/eclipse/paho.mqtt.python/assets/55474466/4f95b76e-d818-4b06-ab41-5c03ca2defa5)

Is my client somehow wrong for QoS 2?
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58EVGx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,paho.mqtt.python,1510133495,697,Use Python selectors instead of select,j04n-f,96056718,Joan Flotats,,OPEN,2022-12-24T16:01:39Z,2023-12-07T20:04:37Z,"Using Python `select.select(..)` method limits the open connections to 340: 

- https://github.com/eclipse/paho.mqtt.python/issues/183
- https://github.com/eclipse/paho.mqtt.python/issues/238
- https://github.com/eclipse/paho.mqtt.python/issues/499
- https://github.com/eclipse/paho.mqtt.python/issues/662

Python select [docs](https://docs.python.org/3/library/select.html ""Python select documentation"") encourages users to use [selectors](https://docs.python.org/3/library/selectors.html#module-selectors) instead of select. 

Would it be possible to change the select usage to use selectors? The following implementation worked for us:

```python 
import selectors

class Client:
    [...]
    def _loop(self, timeout: float = 1.0) -> int:
        if timeout < 0.0:
            raise ValueError(""Invalid timeout."")

        sel = selectors.DefaultSelector()

        eventmask = selectors.EVENT_READ

        with suppress(IndexError):
            packet = self._out_packet.popleft()
            self._out_packet.appendleft(packet)
            eventmask = selectors.EVENT_WRITE | eventmask

        if self._sockpairR is None:
            sel.register(self._sock, eventmask)
        else:
            sel.register(self._sock, eventmask)
            sel.register(self._sockpairR, selectors.EVENT_READ)

        pending_bytes = 0
        if hasattr(self._sock, ""pending""):
            pending_bytes = self._sock.pending()

        if pending_bytes > 0:
            timeout = 0.0

        try:
            events = sel.select(timeout)
        except TypeError:
            return int(MQTT_ERR_CONN_LOST)
        except ValueError:
            return int(MQTT_ERR_CONN_LOST)
        except Exception:
            return int(MQTT_ERR_UNKNOWN)

        socklist: list[list] = [[], []]

        for key, _event in events:
            if key.events & selectors.EVENT_READ:
                socklist[0].append(key.fileobj)

            if key.events & selectors.EVENT_WRITE:
                socklist[1].append(key.fileobj)

        if self._sock in socklist[0] or pending_bytes > 0:
            rc = self.loop_read()
            if rc or self._sock is None:
                return int(rc)

        if self._sockpairR and self._sockpairR in socklist[0]:
            socklist[1].insert(0, self._sock)

            with suppress(BlockingIOError):
                self._sockpairR.recv(10000)

        if self._sock in socklist[1]:
            rc = self.loop_write()
            if rc or self._sock is None:
                return int(rc)

        sel.close()

        return int(self.loop_misc())
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5SovHi,paho.mqtt.python,1386410466,697,NA,lincoln310,7071490,lincoln,,NA,2023-01-18T03:04:22Z,2023-01-18T03:04:22Z,"Should the ""sel.close()"" be invoked before return?
And i meet a error with self._sock is None at 
```python
        if self._sockpairR is None:
            sel.register(self._sock, eventmask)
        else:
            sel.register(self._sock, eventmask)
            sel.register(self._sockpairR, selectors.EVENT_READ)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5SovHi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Tu59g,paho.mqtt.python,1404804960,697,NA,j04n-f,96056718,Joan Flotats,,NA,2023-01-26T10:23:36Z,2023-01-26T10:23:36Z,"I tested both use cases, closing and not closing the selectors. Not closing the selectors increases CPU usage:
https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.close

Which error do you have with the None value?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Tu59g/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YnMJX,paho.mqtt.python,1486668375,697,NA,j04n-f,96056718,Joan Flotats,,NA,2023-03-28T11:14:21Z,2023-03-28T11:14:21Z,"Yesterday we had the same problem. The error raises when the MQTT client attempts to reconnect. The solution is quite easy. The old select method registers and selects the sockets using only one method. The new one uses two methods. Then, both methods (register and select) should be wrapped by the `try-catch` as follows: 

```python
import selectors

class Client:
    [...]
    def _loop(self, timeout: float = 1.0) -> int:
        if timeout < 0.0:
            raise ValueError(""Invalid timeout."")

        sel = selectors.DefaultSelector()

        eventmask = selectors.EVENT_READ

        with suppress(IndexError):
            packet = self._out_packet.popleft()
            self._out_packet.appendleft(packet)
            eventmask = selectors.EVENT_WRITE | eventmask

        # used to check if there are any bytes left in the (SSL) socket
        pending_bytes = 0
        if hasattr(self._sock, ""pending""):
            pending_bytes = self._sock.pending()

        # if bytes are pending do not wait in select
        if pending_bytes > 0:
            timeout = 0.0

        try:
            if self._sockpairR is None:
                sel.register(self._sock, eventmask)
            else:
                sel.register(self._sock, eventmask)
                sel.register(self._sockpairR, selectors.EVENT_READ)

            events = sel.select(timeout)

        except TypeError:
            # Socket isn't correct type, in likelihood connection is lost
            return int(MQTT_ERR_CONN_LOST)
        except ValueError:
            # Can occur if we just reconnected but rlist/wlist contain a -1 for
            # some reason.
            return int(MQTT_ERR_CONN_LOST)
        except Exception:
            # Note that KeyboardInterrupt, etc. can still terminate since they
            # are not derived from Exception
            return int(MQTT_ERR_UNKNOWN)

        socklist: list[list] = [[], []]

        for key, _event in events:
            if key.events & selectors.EVENT_READ:
                socklist[0].append(key.fileobj)

            if key.events & selectors.EVENT_WRITE:
                socklist[1].append(key.fileobj)

        if self._sock in socklist[0] or pending_bytes > 0:
            rc = self.loop_read()
            if rc or self._sock is None:
                return int(rc)

        if self._sockpairR and self._sockpairR in socklist[0]:
            # Stimulate output write even though we didn't ask for it, because
            # at that point the publish or other command wasn't present.
            socklist[1].insert(0, self._sock)
            # Clear sockpairR - only ever a single byte written.
            with suppress(BlockingIOError):
                # Read many bytes at once - this allows up to 10000 calls to
                # publish() inbetween calls to loop().
                self._sockpairR.recv(10000)

        if self._sock in socklist[1]:
            rc = self.loop_write()
            if rc or self._sock is None:
                return int(rc)

        sel.close()

        return int(self.loop_misc())

```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YnMJX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kDnG1,paho.mqtt.python,1678668213,697,NA,JXingK,40445491,,,NA,2023-08-15T09:40:51Z,2023-08-15T09:40:51Z,"Thank you very much, it solves my problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kDnG1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/697,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5luur2,paho.mqtt.python,1706748662,697,NA,j04n-f,96056718,Joan Flotats,,NA,2023-09-05T14:37:24Z,2023-09-05T14:37:24Z,Any update? May I open a PR?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5luur2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/699,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/699,paho.mqtt.python,1514586635,699,How to call publish function independently,lgeuder,31415151,Lukas,,OPEN,2022-12-30T15:13:00Z,2023-01-20T21:55:11Z,"Hi,
I have created a class that should handle my mqtt publish dynamically (I used the class example:) )

```
import paho.mqtt.client as mqtt


class MQTTClient(mqtt.Client):

   def on_connect(self, mqttc, obj, flags, rc):
      print(""rc: ""+str(rc))

   def on_connect_fail(self, mqttc, obj):
      print(""Connect failed"")

   def on_message(self, mqttc, obj, msg):
      print(msg.topic+"" ""+str(msg.qos)+"" ""+str(msg.payload))

   def on_publish(self, mqttc, obj, mid):
      print(""mid: ""+str(mid))

   def on_subscribe(self, mqttc, obj, mid, granted_qos):
      print(""Subscribed: ""+str(mid)+"" ""+str(granted_qos))

   def on_log(self, mqttc, obj, level, string):
      print(string)

   def run(self):
      self.connect(""localhost"", 1883, 60)
      self.subscribe(""state"", 0)
      rc = 0
      while rc == 0:
         rc = self.loop()
      return rc

   def publish(self, channel=""state"", payload=""payload""):
      #self.connect(""localhost"", 1883, 60)
      self.publish(channel, payload=payload)
```
I have added this publish function in hope that i can call mqttc.publish() from whereever I want. As this is not working at all I am beginning to think that I haven't understood way mqtt works...
Is there a way I can open a connection (in a Thread - it should not block my script where I call publish()) and just pass channel and payload an this gets published to the localhost which I can connect?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/699/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/699,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TYwVO,paho.mqtt.python,1398998350,699,NA,ralight,79578,Roger Light,,NA,2023-01-20T21:54:50Z,2023-01-20T21:54:50Z,"I would suggest using `loop_start()` instead of the while loop that calls self.loop() - this creates a background thread that doesn't block your code and will reconnect for you in case of a connection failure. I would also suggest putting your call to subscribe() in your on_connect callback - that means it will be recreated on a reconnect.

Finally, in your `publish()` function you should call `super.publish()` to access the publish function of the base class.

I hope that helps.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TYwVO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700,paho.mqtt.python,1534718023,700,Proper way to catch CTRL-C with mqtt client where 'will_set' gets respected,mmattel,3321281,Martin,github@diemattels.at,CLOSED,2023-01-16T10:54:20Z,2024-01-08T06:10:20Z,"I am desperately looking for a hint how to properly implement a `keyboard interrupt` (ctrl-c) in a way that `on_connect` and `last_will` will get respected. I searched a lot but have not found any hint.

At the moment using the code below, whenever I press ctrl-c, the program exits correctly and `will_set` is respected - but you get a ctrl-c message printed on the console.

```
def on_connect(client, userdata, flags, rc):
    client.publish(""test/status"", payload=""Online"", qos=0, retain=True)

mqttclient = mqtt.Client(client_id=mqtt_client_id, clean_session=True)
mqttclient.on_connect = on_connect
mqttclient.username_pw_set(mqtt_username, mqtt_password)
mqttclient.will_set(""test/status"", payload=""Offline"", qos=0, retain=True)

mqttclient.connect_async(mqtt_server, port=mqtt_port, keepalive=70)
mqttclient.loop_start()

while True:
    do_stuff

mqttclient.disconnect()
mqttclient.loop_stop()
```

Adapting the code by adding a signal handler or a try/except in the while loop, pressing ctrl-c does not print the exit message, but `will_set` gets not respected.

Tips and hints how to solve this are welcomed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XKcd1,paho.mqtt.python,1462355829,700,NA,pdcastro,15091591,Paulo Ferreira de Castro,,NA,2023-03-09T16:22:55Z,2023-03-09T16:22:55Z,"I have come across a similar scenario and I think I have figured it out. My SIGINT handler was gracefully calling `mqttclient.disconnect()` — maybe yours was too? — and I observed that the Last Will message was _not_ being published. It turns out that this is the expected behaviour. The MQTT protocol makes a distinction between graceful and ungraceful disconnects ([ref](https://www.linkedin.com/pulse/introduction-mqtt-chapter-6-last-testament-garrett-schmidt/)) and defines that the Last Will only applies to ungraceful disconnects, for example a dropped network connection, device power loss, or the client process being suddenly killed by the OS (e.g. `kill -9 $PID` on a Linux prompt). When you say that a CTRL-C message gets printed to the console, I imagine that this means that your shell/OS forcibly kills the process, simulating an ungraceful disconnect.

I think it makes sense for a SIGINT handler to gracefully terminate the client including a `disconnect()` call, but in this case the Last Will message will not be automatically published, by design. What I have done is to explicitly publish the same message as the Last Will through a regular `publish()` call, just before the `disconnect()` call in the signal handler. Et voilà!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XKcd1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XOe89,paho.mqtt.python,1463414589,700,NA,mmattel,3321281,Martin,github@diemattels.at,NA,2023-03-10T07:58:52Z,2023-03-10T07:58:52Z,"Thanks for the explanation, this guided me into the right direction, but it was not complete. When initiating a publish and disconnect right afterwards, the message will not be sent as disconnect is faster than publishing. You need to wait until it was published, then you can disconnect. Here is the code I am using now successfully. 

```
def graceful_shutdown():
    print()
    # the will_set is not sent on graceful shutdown by design
    # we need to wait until the message has been sent, else it will not appear in the broker
    publish_result = mqttclient.publish(mqtt_state_topic, payload = ""offline"", qos = mqtt_qos, retain = True)
    publish_result.wait_for_publish() 
    mqttclient.disconnect()
    mqttclient.loop_stop()
    sys.exit()

# catch ctrl-c
def signal_handler(signum, frame):
    graceful_shutdown()

signal.signal(signal.SIGINT, signal_handler)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5XOe89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/700,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFSMT,paho.mqtt.python,1880433427,700,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:10:19Z,2024-01-08T06:10:19Z,"I'm going to close this because it looks like you arrived at a pretty decent answer yourself! Please feel free to reopen if more info is needed (we are trying to get on top of the issues!).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFSMT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702,paho.mqtt.python,1551931073,702,Simple Mock Example,fractal-joe,116019579,Joe Narvaez,,CLOSED,2023-01-21T22:42:02Z,2024-01-08T06:08:52Z,"Hello,

I'm trying to write a simple mock example using the getting started code in the readme.

```python
from unittest.mock import create_autospec
import paho.mqtt.client as mqtt
from paho.mqtt import publish


def on_connect(client, userdata, flags, rc):
    client.subscribe(""test"")


def on_message():
    pass


mock_on_message = create_autospec(on_message)


def test_pubsub():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = mock_on_message

    client.connect('localhost')
    client.loop_start()
    publish.single('test', 'foo')
    mock_on_message.assert_called_once()
    client.loop_stop()

``` 

I'm getting `AssertionError: Expected 'mock' to have been called once. Called 0 times.`

Thanks for taking a look :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TaKgd,paho.mqtt.python,1399367709,702,NA,fractal-joe,116019579,Joe Narvaez,,NA,2023-01-22T00:44:07Z,2023-01-22T00:44:07Z,"I think it has something to do with the loop? I got it working with js.

```js
const mqtt = require('mqtt')
const client = mqtt.connect('mqtt://localhost')

client.on('connect', function () {
  client.subscribe('presence', function (err) {
    if (!err) {
      client.publish('presence', 'Hello mqtt')
    }
  })
})

test('pub sub', done => {
  function onMessage(topic, message) {
    expect(message.toString()).toBe('Hello mqtt');
    done();
  }

  client.on('message', onMessage);
});
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TaKgd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TaKxC,paho.mqtt.python,1399368770,702,NA,fractal-joe,116019579,Joe Narvaez,,NA,2023-01-22T00:53:54Z,2023-01-22T00:53:54Z,"I added sleeps. same result :(

```python
def test_pubsub():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = mock_on_message

    client.connect('localhost')
    client.loop_start()
    time.sleep(2)
    publish.single('test', 'foo')
    time.sleep(2)
    mock_on_message.assert_called_once()
    client.loop_stop()
    client.disconnect()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5TaKxC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/702,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFR8L,paho.mqtt.python,1880432395,702,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T06:08:52Z,2024-01-08T06:08:52Z,"The below test runs fine (tweaked slightly as I'm running it with a broker under Docker). Given the long delay in responding (sorry about that!) I'm going to go ahead and close this (please feel free to reopen if this does not help - but please provide more info, i.e. logs).

```
from unittest.mock import create_autospec
import paho.mqtt.client as mqtt
from paho.mqtt import publish
import time


def on_connect(client, userdata, flags, rc):
    client.subscribe(""test"")


def on_message(client, userdata, msg):
    pass


mock_on_message = create_autospec(on_message)


def test_pubsub():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = mock_on_message

    client.connect('mosquitto')
    client.loop_start()
    publish.single('test', 'foo', hostname=""mosquitto"")
    time.sleep(2)
    mock_on_message.assert_called_once()
    client.loop_stop()

if __name__ == ""__main__"":
    test_pubsub()
    print(""Everything passed"")
```

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFR8L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,paho.mqtt.python,1557065055,703,on_pre_connect not optional?,moobsen,2733691,Moritz Obermeier,,OPEN,2023-01-25T18:00:32Z,2024-01-08T05:56:25Z,"Hi,

I just migrated a ( rather large) script to 1.6.1, and for some reason I had to add something like this

```
    self.client.on_pre_connect = self.on_pre_connect

    def on_pre_connect(self, *args):
        """"""This seems to be needed due to a bug in paho-1-6-1""""""
        self.logger.debug('running on_pre_connect, apparently paho needs this now')
```

for it to connect. Otherwise it would complain about the missing overwrite above. After quickly glancing at the code this seems to be meant as optional, which for me it apparently is not.

KR,
Moritz","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Uc5GB,paho.mqtt.python,1416860033,703,NA,neuberfran,38701397,Neuber Sousa,,NA,2023-02-04T22:04:38Z,2023-02-04T22:04:38Z,"I stay trying this:
https://www.newtoncbraga.com.br/index.php/microcontroladores/54-dicas-de-pic/16748-primeiro-programa-phyton-com-mqtt-na-raspberry-pi-introducao.html

I have same issue:

AttributeError: 'Client' object has no attribute '_on_pre_connect'

I try with ""mqtt.eclipseprojects.io""  and/Or “test.mosquitto.org”

But not Solved yet
![Screenshot from 2023-02-04 19-01-28](https://user-images.githubusercontent.com/38701397/216791398-1f099ef5-0137-4107-b08e-47975ee0ce80.png)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Uc5GB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5UyL9m,paho.mqtt.python,1422442342,703,NA,vivekpandey02,59823583,Vivek Kumar Pandey,,NA,2023-02-08T11:25:55Z,2023-02-08T11:25:55Z,"I am just trying to run the example but i got the issue as shown below:

vivek@vivek-zs:/mnt/d/Softwares/MQTT/paho.mqtt.python/examples$ python3 loop_select.py
Using client_id / topic: paho-mqtt-python/issue72/6ddb7a35-0916-457d-b288-ea22697ffb84
Starting
Traceback (most recent call last):
  File ""/mnt/d/Softwares/MQTT/paho.mqtt.python/examples/loop_select.py"", line 89, in <module>
    SelectMqttExample().main()
  File ""/mnt/d/Softwares/MQTT/paho.mqtt.python/examples/loop_select.py"", line 68, in main
    self.client.connect('localhost', 1883, 60)
  File ""/usr/local/lib/python3.10/dist-packages/paho_mqtt-1.6.1-py3.10.egg/paho/mqtt/client.py"", line 914, in connect
    return self.reconnect()
  File ""/usr/local/lib/python3.10/dist-packages/paho_mqtt-1.6.1-py3.10.egg/paho/mqtt/client.py"", line 1045, in reconnect
    on_pre_connect = self.on_pre_connect
  File ""/usr/local/lib/python3.10/dist-packages/paho_mqtt-1.6.1-py3.10.egg/paho/mqtt/client.py"", line 1863, in on_pre_connect
    return self._on_pre_connect
AttributeError: 'Client' object has no attribute '_on_pre_connect'. Did you mean: 'on_pre_connect'?


Could anyone please help me resolving this issue?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5UyL9m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kECKH,paho.mqtt.python,1678779015,703,NA,baqwas,7071255,Matha Goram,baqwas@yahoo.com,NA,2023-08-15T11:26:00Z,2023-08-15T11:26:00Z,"Echoing above observations but will dig in further in the coming weeks. Something has changed!

**Preamble**
I used to get satisfactory responses with an utility from https://github.com/jpmens/check-mqtt but had to stop using it for nearly two years. I tried to reuse the, check_mqtt, with  a fresh install from /usr/local/lib/python3.9/dist-packages/paho_mqtt-1.6.1-py3.9.egg but the following error message was generated:
```
 ./check-mqtt.py -H localhost -t nagios/ListenForPing -s nagios/PublishPongTo -l ping -v pong

OK - message from nagios/PublishPongTo at localhost in 0.05s | response_time=0.05 value=pong
CRITICAL - Connection to localhost:1883 failed: 'Client' object has no attribute '_on_pre_connect'
-bash: OK: command not found
```

**Issue**
I don't need help with the Nagios Remote Executor Plugin (_viz._ check_mqtt). I need some explanation on how to workaround the message as a general rule if at all possible:

Pardon my ignorance in these matters but I'm simply trying to monitor if broker is alive. Thanks for your understanding.
`'Client' object has no attribute '_on_pre_connect'. Did you mean: 'on_pre_connect'`
Regards.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kECKH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lA8mg,paho.mqtt.python,1694747040,703,NA,Nomisdk86,74494621,,,NA,2023-08-27T19:51:16Z,2023-08-27T19:51:16Z,"Hello

I have the same issue with following:
`import glob
import time
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish
import ConfigParser
import json


clientname = ""Pellmon""
hostname = 'x.x.x.x'
port = 1883
timeout = 60

# Connect MQTT
# MQTT Start
# callback for CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print(""Connected with result code ""+str(rc))

# callback for received messages
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

client = mqtt.Client(clientname)
client.on_connect = on_connect
client.on_message = on_message

client.username_pw_set(""MqttBroker"", ""mqtt"")
client.connect(hostname, port, timeout)



client.loop_start()




while True:

   for sensor in glob.glob(""/sys/bus/w1/devices/28-00000016f2f6/w1_slave""):
      id = sensor.split(""/"")[5]

      try:
         f = open(sensor, ""r"")
         data = f.read()
         f.close()
         if ""YES"" in data:

            (discard, sep, reading) = data.partition(' t=')
            t = float(reading) / 1000.0
            print(""{} {:.1f}"".format(id, t))
            if  t > 1:
              #Gem data til HA via MQTT
              data = round(t,1)
              topic = ""home-assistant/pillefyr/temperatur""
              client.publish(topic, data)
            else:
             print(""Gemmes ikke"")

         else:


            print(""999.9"")

      except:
         pass

   time.sleep(2.0)
`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lA8mg/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lBDvC,paho.mqtt.python,1694776258,703,NA,baqwas,7071255,Matha Goram,baqwas@yahoo.com,NA,2023-08-27T22:23:45Z,2023-08-27T22:23:45Z,"@Nomisdk86, I wish I had the _expertise_ to submit a pull request! :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lBDvC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lDLuy,paho.mqtt.python,1695333298,703,NA,73rax,57565437,Alexandros Ferent,,NA,2023-08-28T09:14:27Z,2023-08-28T09:14:27Z,"I was receiving this: 

`Traceback (most recent call last):
  File ""/home/alexandrosferent/mqttSubTest.py"", line 13, in <module>
    client.connect(broker_address, broker_port, 60)
  File ""/usr/local/lib/python3.9/dist-packages/paho_mqtt-1.6.1-py3.9.egg/paho/mqtt/client.py"", line 914, in connect
    return self.reconnect()
  File ""/usr/local/lib/python3.9/dist-packages/paho_mqtt-1.6.1-py3.9.egg/paho/mqtt/client.py"", line 1045, in reconnect
    on_pre_connect = self.on_pre_connect
  File ""/usr/local/lib/python3.9/dist-packages/paho_mqtt-1.6.1-py3.9.egg/paho/mqtt/client.py"", line 1863, in on_pre_connect
    return self._on_pre_connect
AttributeError: 'Client' object has no attribute '_on_pre_connect'`

I run :
`pip3 uninstall paho-mqtt
pip3 install paho-mqtt
 sudo apt-get update
sudo apt-get upgrade`

And it stopped giving me the traceback. I am running this on a raspbian so I guess, adjust to your operating system?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lDLuy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lvG2n,paho.mqtt.python,1706847655,703,NA,albertoSantanaHkn,131886404,,,NA,2023-09-05T15:32:39Z,2023-09-05T15:32:39Z,"Any news about this issue ?? Im having the same...
`AttributeError: 'Client' object has no attribute '_on_pre_connect'`, im using the publish.single() function
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5lvG2n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mcaIy,paho.mqtt.python,1718723122,703,NA,termic1,29151255,,,NA,2023-09-14T03:49:48Z,2023-09-14T03:49:48Z,"The ""on_pre_connect callback""  function is not an option, you have to add the callback even if you are not using it.
So add the function:
def on_pre_connect(client,data):
    return

and you create the callback with:
client.on_pre_connect=on_pre_connect
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mcaIy/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mfUk_,paho.mqtt.python,1719486783,703,NA,baqwas,7071255,Matha Goram,baqwas@yahoo.com,NA,2023-09-14T13:46:20Z,2023-09-14T13:46:20Z,"Thanks, @termic1!

Regards.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mfUk_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mfi_B,paho.mqtt.python,1719545793,703,NA,neuberfran,38701397,Neuber Sousa,,NA,2023-09-14T14:17:46Z,2023-09-14T14:17:46Z,"Has this issue been resolved or not? If yes, what should I do to resolve it? (my details are at the beginning of this issue)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5mfi_B/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5nbB0h,paho.mqtt.python,1735138593,703,NA,fleutot,178409,Gauthier Fleutot Östervall,,NA,2023-09-26T09:09:53Z,2023-09-26T09:09:53Z,"> Has this issue been resolved or not? If yes, what should I do to resolve it? (my details are at the beginning of this issue)

Did you try what OP wrote in their first post? What's the result then?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5nbB0h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/703,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFPzh,paho.mqtt.python,1880423649,703,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:56:24Z,2024-01-08T05:56:24Z,"Tested using the code linked in the first comment without issue (well did need to fix the broker and brackets in `print`).

As such it appears this is fixed. However the error mentions python 2.7 which is no longer supported (in the upcoming release) so I'm guessing it may still be an issue with older python releases. Flagging as ""More Info Needed"" so anyone still seeing this can provide input.

```
import paho.mqtt.client as mqtt
import sys
#definicoes do MQTT
Broker = ""mqtt.eclipseprojects.io"" #broker publico utilizado.
porta_broker = 1883 #porta utilizada para comunicacao com o broker MQTT
#utilize a porta 1883 para comunicacao com conexao nao segura
keep_alive_broker = 60 #tempo (em segundos) do keep-alive
topico_subscribe = ""MQTTRaspPiINCB""  #topico MQTT que o programa ira ""ouvir"" (fazer subscribe)
#dica: troque o nome do topico por algo ""unico"",
#Dessa maneira, ninguem ira saber seu topico de
#subscribe e interferir em seus testes
#Callback - conexao ao broker realizada
def on_connect(client, userdata, flags, rc):
    print(""[STATUS] Conectado ao Broker."")
    #faz subscribe automatico no topico
    client.subscribe(topico_subscribe)
#Callback - mensagem recebida do broker
#toda vez que uma mensagem for recebida do broker, esta funcao sera chamada
def on_message(client, userdata, msg):
    MensagemRecebida = str(msg.payload)
    print(""[MSG RECEBIDA] Topico: ""+msg.topic+"" / Mensagem: ""+MensagemRecebida)

#programa principal:
try:
    print(""[STATUS] Inicializando MQTT..."")
    #inicializa MQTT:

    #cria client MQTT e define funcoes de callback de conexao (client.on_connect)
    #e recepcao de dados recebidos (client.on_message)
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message
    #faz a conexao ao broker MQTT
    client.connect(Broker, porta_broker, keep_alive_broker)
    #mantem o MQTT funcionando por tempo indeterminado, sendo que todas as
    #mensagens recebidas vao fazer a funcao de callback de dados recebidos
    #(on_message) ser chamada
    client.loop_forever()
except KeyboardInterrupt:
    print (""\nCtrl+C pressionado, encerrando aplicacao e saindo..."")
    sys.exit(0)
```

Note: This is part of an exercise to clean up old issues so that the project can move forwards. 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFPzh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,paho.mqtt.python,1580985543,704,Listener thread dies with uncaught thread exception in home-assistant integration,AdrianGarside,26147576,,,CLOSED,2023-02-11T19:29:17Z,2024-01-08T08:11:53Z,"Seeing the listener thread die. Seems to be associated either with bad data from the mqtt server or, less likely IMO, mishandling of legitimate data:

In this repro (matched to the uncaught thread exception stack below), I got handed incomplete data which triggered a json decode exception in my code which I caught and logged. But the thread still died:
2023-02-10 21:52:06.922 DEBUG (Thread-5 (_thread_main)) [custom_components.bambu_lab.pybambu] An exception occurred:
2023-02-10 21:52:06.922 DEBUG (Thread-5 (_thread_main)) [custom_components.bambu_lab.pybambu] Type: <class 'json.decoder.JSONDecodeError'>
2023-02-10 21:52:06.922 DEBUG (Thread-5 (_thread_main)) [custom_components.bambu_lab.pybambu] Args: ('Unterminated string starting at: line 1 column 22 (char 21)',)
2023-02-10 21:52:06.923 ERROR (Thread-5 (_thread_main)) [root] Uncaught thread exception

But some repros I get bad data and log the exception and the thread doesn't die.
And in some repros my exception logging never fired at all and all I see is the uncaught thread exception log output.

For the uncaught thread exception (matched to the top repro) I found this logging from home assistant:

Logger: root
Source: /usr/src/homeassistant/homeassistant/bootstrap.py:342
First occurred: February 10, 2023 at 9:52:06 PM (1 occurrences)
Last logged: February 10, 2023 at 9:52:06 PM

Uncaught thread exception
Traceback (most recent call last):
File ""/usr/local/lib/python3.10/threading.py"", line 1016, in _bootstrap_inner
self.run()
File ""/usr/local/lib/python3.10/threading.py"", line 953, in run
self._target(*self._args, **self._kwargs)
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
self.loop_forever(retry_first_connection=True)
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
rc = self._loop(timeout)
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1164, in _loop
rc = self.loop_read()
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1556, in loop_read
rc = self._packet_read()
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 2439, in _packet_read
rc = self._packet_handle()
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3033, in _packet_handle
return self._handle_publish()
File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3283, in _handle_publish
(topic, packet) = struct.unpack(pack_format, packet)
struct.error: bad char in struct format

Since this exception silently takes out the listener thread I'm left with no incoming data and I'm looking for a way I can detect and recover from this state. Repro rate is random but typically happens within 1-10 hours of runtime.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bhF4a,paho.mqtt.python,1535401498,704,NA,kocsis-antal,46327610,,,NA,2023-05-04T20:57:41Z,2023-05-04T20:57:41Z,"Same here:

```
2023-05-04 22:53:59.589 ERROR (Thread-113 (_thread_main)) [root] Uncaught thread exception
Traceback (most recent call last):
  File ""/usr/local/lib/python3.10/threading.py"", line 1016, in _bootstrap_inner
    self.run()
  File ""/usr/local/lib/python3.10/threading.py"", line 953, in run
    self._target(*self._args, **self._kwargs)
...
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bhF4a/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFOkc,paho.mqtt.python,1880418588,704,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:49:07Z,2024-01-08T05:49:07Z,"I'm going to close this in favour of #113 (""loop_forever should really loop_forever"") which I believe is really the same issue. We need to improve clarity around when `loop_forever` could stop (particularly around exceptions).

Note: This is part of an exercise to clean up old issues so that the project can move forwards. Due to the number of issues being worked through mistakes will be made; please feel free to reopen this issue (or comment) if you believe it's been closed in error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFOkc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFkUE,paho.mqtt.python,1880507652,704,NA,AdrianGarside,26147576,,,NA,2024-01-08T07:39:54Z,2024-01-08T07:39:54Z,@MattBrittan 113 mentioned documenting it could throw exceptions but IIRC this case properly the problem was I couldn't catch the exception to recover. But... this hasn't been causing problems for some time now so either the source mqtt server behavior that caused it got fixed or I did find a workaround.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFkUE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFnv1,paho.mqtt.python,1880521717,704,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T07:54:46Z,2024-01-08T07:54:46Z,">was I couldn't catch the exception to recover.

You can add a `try/`catch` around `loop_forever` (see [this](https://stackoverflow.com/a/55390477/11810946)).

But, unfortunately, this has an issue for some time and changes in python itself have had an impact.. So hopefully it's fixed for you.

The aim is document what exceptions (if any) can escape `loop_forever` (hopefully the vast majority will be caught!).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFnv1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/704,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFsBa,paho.mqtt.python,1880539226,704,NA,AdrianGarside,26147576,,,NA,2024-01-08T08:10:58Z,2024-01-08T08:10:58Z,"IIRC that's exactly what I had and it didn't help. The stack above has none of my code on it and the exception never got raised on my thread. But it's not been happening for some time now so something must have coincidentally changed. Yes, re-reading what I wrote - I had an exception handler that logged any unknown/unexpected exceptions - it never triggered in this scenario. I just got left with a dead mqtt session and no way to know.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFsBa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/705,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/705,paho.mqtt.python,1590879944,705,ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get issuer certificate (_ssl.c:1123),byronbonkers,61516816,Ivy,byronbonkers@gmail.com,CLOSED,2023-02-19T22:15:30Z,2024-07-17T23:48:42Z,"```
import time
import logging
import paho.mqtt.client as mqtt
from OpenSSL import SSL
import os
import ssl

log = logging.getLogger('RemoTV.hardware.l298n')

logging.basicConfig(level=logging.DEBUG)

sleeptime = 0.2
rotatetimes = 0.4

StepPinForward = None
StepPinBackward = None
StepPinLeft = None
StepPinRight = None


def setup(robot_config):
    global StepPinForward
    global StepPinBackward
    global StepPinLeft
    global StepPinRight
    global sleeptime
    global rotatetimes

    sleeptime = robot_config.getfloat('l298n', 'sleeptime')
    rotatetimes = robot_config.getfloat('l298n', 'rotatetimes')

    log.debug(""GPIO mode : %s"", str(GPIO.getmode()))

    GPIO.setwarnings(False)
    GPIO.cleanup()

    if robot_config.getboolean('tts', 'ext_chat'):  # ext_chat enabled, add motor commands
        extended_command.add_command('.set_rotate_time', set_rotate_time)
        extended_command.add_command('.set_sleep_time', set_sleep_time)

    # TODO passing these as tuples may be unnecessary, it may accept lists as well.
    StepPinForward = tuple(map(int, robot_config.get('l298n', 'StepPinForward').split(',')))
    StepPinBackward = tuple(map(int, robot_config.get('l298n', 'StepPinBackward').split(',')))
    StepPinLeft = tuple(map(int, robot_config.get('l298n', 'StepPinLeft').split(',')))
    StepPinRight = tuple(map(int, robot_config.get('l298n', 'StepPinRight').split(',')))


def on_message(client, userdata, message):
    payload = message.payload.decode('utf-8')

    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(12, GPIO.OUT)
    GPIO.setup(11, GPIO.OUT)
    GPIO.setup(15, GPIO.OUT)
    GPIO.setup(16, GPIO.OUT)
    GPIO.setup(36, GPIO.OUT)
    GPIO.setup(35, GPIO.OUT)

    if payload == 'f':
        GPIO.output(12, GPIO.HIGH)
        time.sleep(sleeptime)
        GPIO.output(12, GPIO.LOW)
    if payload == 'b':
        GPIO.output(11, GPIO.HIGH)
        time.sleep(sleeptime)
        GPIO.output(11, GPIO.LOW)
    if payload == 'l':
        GPIO.output(15, GPIO.HIGH)
        time.sleep(sleeptime * rotatetimes)
        GPIO.output(15, GPIO.LOW)
    if payload == 'r':
        GPIO.output(16, GPIO.HIGH)
        time.sleep(sleeptime * rotatetimes)
        GPIO.output(16, GPIO.LOW)
    if payload == 'z':
        GPIO.output(36, GPIO.HIGH)
        time.sleep(sleeptime * rotatetimes)
        GPIO.output(36, GPIO.LOW)
    if payload == 'x':
        GPIO.output(35, GPIO.HIGH)
        time.sleep(sleeptime * rotatetimes)
        GPIO.output(35, GPIO.LOW)

ca_cert_path = ""fullchain1.pem""
client = mqtt.Client()

# Set the TLS/SSL parameters for the client
client.tls_set(
    ca_certs=ca_cert_path,
    certfile='cert1.pem',
    keyfile='privkey1.pem',
    cert_reqs=ssl.CERT_REQUIRED,
    tls_version=SSL.SSLv23_METHOD
)

client.username_pw_set(username=""not posting my passwd"", password=""lol ahah"")

# client.tls_insecure_set(False)

client.on_message = on_message

client.connect('clawclan.co.uk',8083)

client.subscribe(""clawmachine/controls"")

client.loop_forever()

```
Thats the python code that I'm using to connect to my mqtt broker, I have been through multiple issues as tlsv1.3 isn't supported by pyopenssl or something, I have spent days trying to get this code to work and fixing issues, and this one has been making me lose my mind hahahahahahahahah.

My mosquitto config:


```
allow_anonymous false
password_file /home/pi/claw/passwordfile.txt

listener 1883 localhost

listener 8883
certfile /home/pi/claw/cert1.pem
cafile /home/pi/claw/chain1.pem
keyfile /home/pi/claw/privkey1.pem

listener 8083
protocol websockets
certfile /home/pi/claw/cert1.pem
cafile /home/pi/claw/chain1.pem
keyfile /home/pi/claw/privkey1.pem

```

This is the error I'm getting when I run the .py file

```
pi@raspberrypi:~/claw $ python3 cac.py
Traceback (most recent call last):
  File ""/home/pi/claw/cac.py"", line 102, in <module>
    client.connect('clawclan.co.uk', 8083)
  File ""/home/pi/.local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 914, in connect
    return self.reconnect()
  File ""/home/pi/.local/lib/python3.9/site-packages/paho/mqtt/client.py"", line 1073, in reconnect
    sock.do_handshake()
  File ""/usr/lib/python3.9/ssl.py"", line 1309, in do_handshake
    self._sslobj.do_handshake()
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get issuer certificate (_ssl.c:1123)
```

If u want me to add anything, just ask, as I will be just checking for responses, for the rest of the day","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/705/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/705,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFN1u,paho.mqtt.python,1880415598,705,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:44:44Z,2024-01-08T05:44:44Z,"Sorry for the huge delay in responding (note that you are more likely to get a quick answer to this kind of question on stackoverflow). You may well have resolved this in the interim but, if not, can you please run ""openssl.exe s_client -connect clawclan.co.uk:443"" to verify the broker certificate setup.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFN1u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/705,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM-Ea,paho.mqtt.python,2234769690,705,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:48:42Z,2024-07-17T23:48:42Z,Closing due to inactivity/age (took a long time for the initial response on our side!).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM-Ea/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/706,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/706,paho.mqtt.python,1601514974,706,pip install deprecation warning,andypiper,552452,Andy Piper,,OPEN,2023-02-27T16:21:34Z,2024-01-08T05:36:22Z,"Hello from a member of the original Paho team 🙂 thanks for continuing the great work!

On macOS Ventura, Python 3.11, pip 23.0

```
 DEPRECATION: paho-mqtt is being installed using the legacy 'setup.py install' method, because 
it does not have a 'pyproject.toml' and the 'wheel' package is not installed. pip 23.1 will 
enforce this behaviour change. A possible replacement is to enable the '--use-pep517' option. 
Discussion can be found at https://github.com/pypa/pip/issues/8559
  Running setup.py install for paho-mqtt ... done
```

There are workarounds listed (and the installation works and the library is fine), but Paho probably needs to be updated for the new `pyproject.toml` library metadata format.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/706/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/706,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Y9cMW,paho.mqtt.python,1492501270,706,NA,semuadmin,28569967,SEMU Admin,,NA,2023-03-31T19:40:17Z,2023-03-31T19:40:17Z,"Great library, but same issue here. Any timeline on pyproject.toml support?

I've submitted a PR which endeavours to address this: https://github.com/eclipse/paho.mqtt.python/pull/712","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Y9cMW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/706,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFMk6,paho.mqtt.python,1880410426,706,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:36:10Z,2024-01-08T05:36:10Z,I believe PR #774 (now committed) addresses this; would appreciate it if someone could confirm.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFMk6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/708,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/708,paho.mqtt.python,1623727501,708,"So client.publish() invoked from any thread but main, just fails with no warning or exception?",Jibun-no-Kage,96628648,,,OPEN,2023-03-14T15:32:14Z,2024-01-08T05:38:57Z,"So client.publish() invoked from any thread but main, just fails with no warning or exception?  This is documented via many individuals, all over google.  CAN WE GET THIS FIXED???

If I invoke client.publish() on the main thread of my python script, but if client.publish is called by any other thread, nothing happens, it the publish is NEVER sent to the broker.  

The on_publish call back fires, a message id is returned that the publish was generated, but the broker never gets the message, have confirmed this behavior.  If take the exact same code, and invoke it only on the main thread, everything works!  CAN WE GET THIS FIXED????
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/708/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/708,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFM8x,paho.mqtt.python,1880411953,708,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:38:52Z,2024-01-08T05:38:52Z,"""have confirmed this behavior"" - then please assist us by providing a reproducer (I know we could write this but time is limited, and we are working through a lot of issues, so the simpler it is to replicate the issue the more likely it is that we will be able to progress things).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFM8x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/709,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/709,paho.mqtt.python,1625011948,709,Operation timed out if Internet connection is lost (TCP connection),samson0v,43861229,Vitalii Bidochka,,CLOSED,2023-03-15T08:33:16Z,2024-01-08T05:32:43Z,"Hi everyone!
I am developing ThingsBoard IoT Gateway that uses as a dependency paho mqtt python library for data transition to ThingsBoard. 
Our clients and we encountered the following problem:
When you turn off your internet connection and still publish messages, after a timeout raises the following exception:
<img width=""1500"" alt=""зображення"" src=""https://user-images.githubusercontent.com/43861229/225250801-8b417522-20d8-44c4-bba6-b8f192fc3d35.png"">
After that, if you turn on the internet connection, new messages will not be published.

After some research in the issues tab, I saw that you fixed this issue but for the WebSocket connection type. Also, there is the same issue #694 

I created PR #710 that fixes this issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/709/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/709,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFMC5,paho.mqtt.python,1880408249,709,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:32:43Z,2024-01-08T05:32:43Z,Closing this as Pierre has merged your PR (well cherry-picked your first commit). Please reopen if this does not resolve the issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFMC5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,paho.mqtt.python,1637118818,711,Call for help - Client stalls after a number of messages are received ,FilhoRicardo,128688038,,,CLOSED,2023-03-23T09:06:05Z,2023-12-24T00:54:44Z,"hi all, sorry if here is not the correct place to ask this, if not please can you direct me to the correct place?
basically I created a script in python that connects to a mosquitto broker that is connected to Niagara, and I have a list of topics I want to subscribe to. 
every time I get a new message I look at the topic and decide if I want to save a copy of the message or not.
Right now I am using a list where I append a tuple with the topic and message body, whenever the length of the list is 300 I save all the messages on my hard disk.
however the code just stalls after it sees 1400ish messages and no errors are raised.
do you have any debugging suggestions?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Yn9G0,paho.mqtt.python,1486868916,711,NA,kalmastenitin,17327672,,nknckalmaste@gmail.com,NA,2023-03-28T13:15:15Z,2023-03-28T13:15:15Z,can you share more details about this? any error/message log will be helpful,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Yn9G0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YpisN,paho.mqtt.python,1487285005,711,NA,FilhoRicardo,128688038,,,NA,2023-03-28T16:57:12Z,2023-03-28T16:57:12Z,"Hi,
unfortunately one of the major issues for me is the lack of error messages.
I am dealing with a lot of sensitive data I can not share, however I am
sharing the code I am using to download messages from the broker.
In summary, I have a script that connects to a mosquitto broker, and this
broker is receiving messages from Niagara. My task is to check if messages
are compliant with a standard I created.
The compliance check is Ok, but the downloading of the messages is weird.
the code just stalls after a while, i did change the keep_alive on my
script and got the code stalling when there was 192 secs missing (ka =
15s), 168secs(ka = 30s) and 120secs(ka =60s)

[image: image.png]

that is what I get, just this message.
one more detail, I am attaching the code I wrote, if within the while loop
I print a message, this message is printed over and over again until the
timeout is reached.

thanks :)
ricardo

On Tue, 28 Mar 2023 at 14:15, kalmastenitin ***@***.***>
wrote:

> can you share more details about this? any error/message log will be
> helpful
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/eclipse/paho.mqtt.python/issues/711#issuecomment-1486868916>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/A6VZ7JQTRHZ26E5Q725IKOLW6LP67ANCNFSM6AAAAAAWE4ZLYU>
> .
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YpisN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Yv0a-,paho.mqtt.python,1488930494,711,NA,FilhoRicardo,128688038,,,NA,2023-03-29T16:32:19Z,2023-03-29T16:32:19Z,"I believe I found the solution, would you like to discus it?
thanks

On Tue, 28 Mar 2023 at 17:56, Ricardo Filho ***@***.***>
wrote:

> Hi,
> unfortunately one of the major issues for me is the lack of error messages.
> I am dealing with a lot of sensitive data I can not share, however I am
> sharing the code I am using to download messages from the broker.
> In summary, I have a script that connects to a mosquitto broker, and this
> broker is receiving messages from Niagara. My task is to check if messages
> are compliant with a standard I created.
> The compliance check is Ok, but the downloading of the messages is weird.
> the code just stalls after a while, i did change the keep_alive on my
> script and got the code stalling when there was 192 secs missing (ka =
> 15s), 168secs(ka = 30s) and 120secs(ka =60s)
>
> [image: image.png]
>
> that is what I get, just this message.
> one more detail, I am attaching the code I wrote, if within the while loop
> I print a message, this message is printed over and over again until the
> timeout is reached.
>
> thanks :)
> ricardo
>
> On Tue, 28 Mar 2023 at 14:15, kalmastenitin ***@***.***>
> wrote:
>
>> can you share more details about this? any error/message log will be
>> helpful
>>
>> —
>> Reply to this email directly, view it on GitHub
>> <https://github.com/eclipse/paho.mqtt.python/issues/711#issuecomment-1486868916>,
>> or unsubscribe
>> <https://github.com/notifications/unsubscribe-auth/A6VZ7JQTRHZ26E5Q725IKOLW6LP67ANCNFSM6AAAAAAWE4ZLYU>
>> .
>> You are receiving this because you authored the thread.Message ID:
>> ***@***.***>
>>
>
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5Yv0a-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YzNlx,paho.mqtt.python,1489820017,711,NA,kalmastenitin,17327672,,nknckalmaste@gmail.com,NA,2023-03-30T07:22:49Z,2023-03-30T07:22:49Z,Yes please ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5YzNlx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/711,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZF4,paho.mqtt.python,1868403064,711,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T00:54:44Z,2023-12-24T00:54:44Z,Closing this issue due to inactivity (and it looks like a solution was found). With issues like this [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) are very helpful.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZF4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/713,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/713,paho.mqtt.python,1653858605,713,paho 1.6.x is _not_ compatible with Python 2.7,akx,58669,Aarni Koskela,akx@iki.fi,CLOSED,2023-04-04T13:07:41Z,2023-12-20T10:55:00Z,"The documentation says Paho should be compatible with Python 2.7, but in reality it is not quite. Commit 4910b785a49b989e150eb11e87f7ca5aad38992a added a reference to `ConnectionError`, [which is documented](https://docs.python.org/3.11/library/exceptions.html#ConnectionError) to have been added in Python 3.3 (see the relevant PEP: https://peps.python.org/pep-3151/).

Since Python 2.7 has been end-of-life for three years, maybe one more 1.6.x series bugfix release (with #714) to make it compatible with Python 2.7 again, and then actually dropping support for it?

([Related Stack Overflow issue](https://stackoverflow.com/a/75929017/51685))","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/713/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/713,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bB4dj,paho.mqtt.python,1527220067,713,NA,Sunderfield,6259835,,,NA,2023-04-28T08:57:45Z,2023-04-28T08:57:45Z,"Please stop using python 2.7. It is no longer supported, It has not had a security update since 1 jan 2020. [Python page for more information](https://www.python.org/doc/sunset-python-2/) ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bB4dj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/713,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bCLHr,paho.mqtt.python,1527296491,713,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2023-04-28T09:54:20Z,2023-04-28T09:54:20Z,"@Sunderfield I'm well aware of that (as you can see from the SO issue I linked, and in fact the issue text here). The problem is that paho.mqtt.python _claims_ to be compatible with it, but is not.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5bCLHr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,paho.mqtt.python,1656933745,715,"publish return code always 0, even if failure with access denied in restricted topic",call-me-matt,34400929,matt,,OPEN,2023-04-06T08:40:38Z,2024-01-08T05:30:38Z,"I would like to detect if a publish message has been sent or rejected by the broker when restricting access with ACL.

expected: return code 135 if access denied

as-is: return code is always 0 - even if the message is not published by the broker because of ACL denial.

I am using mqtt v5 and qos1,

```
properties=Properties(PacketTypes.PUBLISH)
properties.MessageExpiryInterval=5 # retain messages for x seconds
ret = self.__mqtt_client.publish(restricted_data, payload, retain=1, qos=1, properties=properties)
ret.wait_for_publish()
print(ret.is_published()) # always True
print (f"" RET={ret.rc}"") # always 0
```

Tested with nodejs mqtt library, and saw an authorization error - so the broker works as expected.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ak70I,paho.mqtt.python,1519631624,715,NA,call-me-matt,34400929,matt,,NA,2023-04-24T08:37:41Z,2023-04-24T08:37:41Z,"oh, there is already a pull request! https://github.com/eclipse/paho.mqtt.python/pull/656
please merge, this is very necessary","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ak70I/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cgO3x,paho.mqtt.python,1551953393,715,NA,dgbarmac,109355376,,,NA,2023-05-17T19:42:03Z,2023-05-17T19:42:03Z,"Hi. I am also experiencing a similar situation. The return code of the publish function is always 0, even if the topic does not exist. I reinforce that this correction is very necessary.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5cgO3x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iWTPW,paho.mqtt.python,1650013142,715,NA,jayzym,15166400,,,NA,2023-07-25T15:02:34Z,2023-07-25T15:02:34Z,"Hi, would just like to reiterate that this is feature is critical for QOS 2 applications. Please fix soon!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iWTPW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iW8Vb,paho.mqtt.python,1650181467,715,NA,AlejandroPOcz,78990484,Alejandro Pérez Olvera,,NA,2023-07-25T16:42:48Z,2023-07-25T16:42:48Z,"Same here! hopefully, it will be resolved soon. I'll be watching 👀 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5iW8Vb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ieu9h,paho.mqtt.python,1652223841,715,NA,kevin-hardy,110260487,Kevin Hardy,,NA,2023-07-26T17:28:04Z,2023-07-26T17:28:04Z,This is a critical bug that is forcing us to verify manually what should be an automated process.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ieu9h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ifBhf,paho.mqtt.python,1652299871,715,NA,polarhub,5935273,,,NA,2023-07-26T18:29:18Z,2023-07-26T18:29:18Z,"We have the same issue, please merge / release a fix soon!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ifBhf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/715,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5jHrPk,paho.mqtt.python,1662956516,715,NA,jzjz12,54970827,JZ12,,NA,2023-08-02T20:58:23Z,2023-08-02T20:58:23Z,Hi we are getting the issue issue. It's important to us. Please merge it soon!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5jHrPk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/716,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/716,paho.mqtt.python,1660515060,716,How to call calback on_message from class?,Bagunda,16766521,Александр,,OPEN,2023-04-10T09:34:10Z,2024-01-08T05:28:22Z,"This not work:

MyFilie.py:
```py
from subprocess import call
import paho.mqtt.client as mqtt
import logging

py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.INFO)
py_handler = logging.FileHandler(""{}.log"".format(__name__), mode='w')
py_formatter = logging.Formatter(""%(name)s %(asctime)s %(levelname)s %(message)s"")
py_handler.setFormatter(py_formatter)
py_logger.addHandler(py_handler)

DEBUG = True
program_name = ""include_class_test""

class MyMQTTClass(mqtt.Client):
    rc_txt = {
        0: ""Connection successful"",
        1: ""Connection refused - incorrect protocol version"",
        2: ""Connection refused - invalid client identifier"",
        3: ""Connection refused - server unavailable"",
        4: ""Connection refused - bad username or password"",
        5: ""Connection refused - not authorised"",
        7: ""Connection refused - Unexpected disconnection"",
        100: ""Connection refused - other things""
    }

    def setPlaces(self, name, host, port, user, password, topic_header, subscribe_to_topics, LWT_topic, DEBUG):
        self.BRname = name
        self.BRhost = str(host)
        self.BRport = (port)
        self.BRuser = str(user)
        self.BRpassword = str(password)
        self.BRclient_id = str(self._client_id)
        self.BRtopic_header = str(topic_header)
        self.subscribe_to_topics = subscribe_to_topics
        self.LWT_topic = str(LWT_topic)
        self.DEBUG = DEBUG
        self.connected_flag = False

    def BRinfo(self):
        py_logger.info (""Connection data: {} ({}:{}), u={}, pass={}, client_id={}, topic_header={}"".format(self.BRname, self.BRhost, self.BRport, self.BRuser, self.BRpassword, self.BRclient_id, self.BRtopic_header))
        pass

    def on_disconnect(self, mqttc, userdata, rc):
        if rc != 0:
            self.connected_flag = False
            py_logger.error(""Unexpected disconnection. Brocker="" + self.BRname + "", rc: "" + str(rc) + "" ("" + self.rc_txt[rc] + "")"")

    def on_connect(self, mqttc, obj, flags, rc):
        if rc == 0: # 0 - Connection successful
            self.connected_flag=True

            for topic in self.subscribe_to_topics:
                res = self.subscribe(topic)

                if res[0] == mqtt.MQTT_ERR_SUCCESS:
                    py_logger.info(""Successfully subscribed to topic: "" + topic[0])
                else:
                    py_logger.critical(""Error! Client is not subscribed to topic "" + topic)
                    
            self.publish(self.LWT_topic, ""Online"", qos=0, retain=True)
        else:
            self.connected_flag = False
            py_logger.error(""Brocker="" + self.BRname + "", rc: "" + str(rc) + "" ("" + self.rc_txt[rc] + "")"")
            py_logger.error(""Unexpected disconnection (maybe)"")

    def on_connect_fail(self, mqttc, obj):
        py_logger.error(""Connect failed"")

    def on_message(self, mqttc, obj, msg):
        py_logger.critical(""Etogo ne doljno byt"")
        py_logger.critical(msg.topic+"" ""+str(msg.qos)+"" ""+str(msg.payload))

    def on_publish(self, mqttc, obj, mid):
        if self.DEBUG:
            py_logger.info(""Message is published success. mid=""+str(mid))

    def bag_pub(self, topic, payload, retain=False):
        if (self.connected_flag == True):
            topic2 = self.BRtopic_header + topic
            
            (rc, mid) = self.publish(topic2, payload, retain=retain)
            if self.DEBUG:
                py_logger.info (""Try to sending mqtt: Brocker={}, mid={}, t={}, msg={}"".format(self.BRname, str(mid), topic2, payload))
            if (rc != 0):
                self.connected_flag = False
                py_logger.critical(""Error to send mqtt. rc="" + str(rc) + "". "" + str(self.rc_txt[rc]) + "". mid="" + str(mid))
        else:
            py_logger.critical (""Scipped trying send mqtt because connected_flag = False"")

    def on_subscribe(self, mqttc, obj, mid, granted_qos):
        if self.DEBUG:
            py_logger.info(""Successfully subscribed: Brocker="" + self.BRname + "", subscribed: mid="" + str(mid) + "", granted_qos="" + str(granted_qos))

    def on_log(self, mqttc, obj, level, string):
        # print(string)
        pass

    def bag_will_set(self, topic):
        self.will_set(self.LWT_topic, ""Offline"", qos=0, retain=True)

    def run2(self):
        self.will_set(self.LWT_topic, payload=""Offline"", qos=0, retain=True)

        self.username_pw_set(username=self.BRuser,password=self.BRpassword)

        try:
            self.connect(self.BRhost, self.BRport, 60)
        except Exception as err:
            errno, error_string = err
            py_logger.critical(""Error to connect mqtt. E1: {}. E2: {}. Broker={}"".format(str(errno), str(error_string), self.BRname))
        else:
            pass

        self.loop_start()

    def exit(self):
        if self.DEBUG:
            py_logger.info(""Paho mqtt is stoping..."")
        self.bag_pub_raw_topic(self.LWT_topic, payload=""Offline"", retain=True)
        self.disconnect()
        self.loop_stop()
```
main.py:
```py
import MyFile
import json
import logging

py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.INFO)
py_handler = logging.FileHandler(""{}.log"".format(__name__), mode='w')
py_formatter = logging.Formatter(""%(name)s %(asctime)s %(levelname)s %(message)s"")
py_handler.setFormatter(py_formatter)
py_logger.addHandler(py_handler)

DEBUG = True
program_name = ""parent_program""

mqtt_credential_file_path = ""/root/mqtt_credentials.json""
my_file = open(mqtt_credential_file_path)
my_string = my_file.read()
my_file.close()
mqtt_credentials_from_file_dict = json.loads(my_string)


MQTTtopic_header = ""BSR30/"" + program_name + ""/relays/""
subscribe_to_topics = [(MQTTtopic_header + ""command/#"", 0)]
LWT_topic = MQTTtopic_header

mqtt_cred_name=""LocalBrocker""

LocalBrocker = MyFile.MyMQTTClass(""client_id_test"")


LocalBrocker.setPlaces(
    name=mqtt_cred_name,
    host=mqtt_credentials_from_file_dict.get(mqtt_cred_name).get(""host""),
    port=int(mqtt_credentials_from_file_dict.get(mqtt_cred_name).get(""port"")),
    user=mqtt_credentials_from_file_dict.get(mqtt_cred_name).get(""user""),
    password=mqtt_credentials_from_file_dict.get(mqtt_cred_name).get(""password""),
    topic_header=MQTTtopic_header,
    subscribe_to_topics = subscribe_to_topics,
    LWT_topic = LWT_topic,
    DEBUG=DEBUG)

def LocalBrocker_on_message(LocalBrocker, userdata, msg):
    py_logger.info(""Recieved msg: {}, topic={}, brocker={}"".format(str(msg.payload), msg.topic, LocalBrocker.BRname))

LocalBrocker.on_message = LocalBrocker_on_message
LocalBrocker.BRinfo()
LocalBrocker.bag_will_set(MQTTtopic_header)
LocalBrocker.run2()

while True:
    pass
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/716/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/716,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFLQ2,paho.mqtt.python,1880405046,716,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:28:14Z,2024-01-08T05:28:14Z,"Sorry for the delay in replying (and replying with a request). 

I've tweaked your code a little so it runs and it seems to work as expected. Can you please provide further info to clarify?

```
import paho.mqtt.client as mqtt
import logging

logging.basicConfig(level=logging.DEBUG)
py_logger = logging.getLogger(__name__)
py_logger.debug(""test"")

DEBUG = True
program_name = ""include_class_test""

class MyMQTTClass(mqtt.Client):
    rc_txt = {
        0: ""Connection successful"",
        1: ""Connection refused - incorrect protocol version"",
        2: ""Connection refused - invalid client identifier"",
        3: ""Connection refused - server unavailable"",
        4: ""Connection refused - bad username or password"",
        5: ""Connection refused - not authorised"",
        7: ""Connection refused - Unexpected disconnection"",
        100: ""Connection refused - other things""
    }

    def setPlaces(self, name, host, port, user, password, topic_header, subscribe_to_topics, LWT_topic, DEBUG):
        self.BRname = name
        self.BRhost = str(host)
        self.BRport = (port)
        self.BRuser = str(user)
        self.BRpassword = str(password)
        self.BRclient_id = str(self._client_id)
        self.BRtopic_header = str(topic_header)
        self.subscribe_to_topics = subscribe_to_topics
        self.LWT_topic = str(LWT_topic)
        self.DEBUG = DEBUG
        self.connected_flag = False

    def BRinfo(self):
        py_logger.info (""Connection data: {} ({}:{}), u={}, pass={}, client_id={}, topic_header={}"".format(self.BRname, self.BRhost, self.BRport, self.BRuser, self.BRpassword, self.BRclient_id, self.BRtopic_header))
        pass

    def on_disconnect(self, mqttc, userdata, rc):
        if rc != 0:
            self.connected_flag = False
            py_logger.error(""Unexpected disconnection. Brocker="" + self.BRname + "", rc: "" + str(rc) + "" ("" + self.rc_txt[rc] + "")"")

    def on_connect(self, mqttc, obj, flags, rc):
        if rc == 0: # 0 - Connection successful
            self.connected_flag=True

            for topic in self.subscribe_to_topics:
                res = self.subscribe(topic)

                if res[0] == mqtt.MQTT_ERR_SUCCESS:
                    py_logger.info(""Successfully subscribed to topic: "" + topic[0])
                else:
                    py_logger.critical(""Error! Client is not subscribed to topic "" + topic)

            self.publish(self.LWT_topic, ""Online"", qos=0, retain=True)
        else:
            self.connected_flag = False
            py_logger.error(""Brocker="" + self.BRname + "", rc: "" + str(rc) + "" ("" + self.rc_txt[rc] + "")"")
            py_logger.error(""Unexpected disconnection (maybe)"")

    def on_connect_fail(self, mqttc, obj):
        py_logger.error(""Connect failed"")

    def on_message(self, mqttc, obj, msg):
        py_logger.critical(""Etogo ne doljno byt"")
        py_logger.critical(msg.topic+"" ""+str(msg.qos)+"" ""+str(msg.payload))

    def on_publish(self, mqttc, obj, mid):
        if self.DEBUG:
            py_logger.info(""Message is published success. mid=""+str(mid))

    def bag_pub(self, topic, payload, retain=False):
        if (self.connected_flag == True):
            topic2 = self.BRtopic_header + topic

            (rc, mid) = self.publish(topic2, payload, retain=retain)
            if self.DEBUG:
                py_logger.info (""Try to sending mqtt: Brocker={}, mid={}, t={}, msg={}"".format(self.BRname, str(mid), topic2, payload))
            if (rc != 0):
                self.connected_flag = False
                py_logger.critical(""Error to send mqtt. rc="" + str(rc) + "". "" + str(self.rc_txt[rc]) + "". mid="" + str(mid))
        else:
            py_logger.critical (""Scipped trying send mqtt because connected_flag = False"")

    def on_subscribe(self, mqttc, obj, mid, granted_qos):
        if self.DEBUG:
            py_logger.info(""Successfully subscribed: Brocker="" + self.BRname + "", subscribed: mid="" + str(mid) + "", granted_qos="" + str(granted_qos))

    def on_log(self, mqttc, obj, level, string):
        # print(string)
        pass

    def bag_will_set(self, topic):
        self.will_set(self.LWT_topic, ""Offline"", qos=0, retain=True)

    def run2(self):
        self.will_set(self.LWT_topic, payload=""Offline"", qos=0, retain=True)

        self.username_pw_set(username=self.BRuser,password=self.BRpassword)

        try:
            self.connect(self.BRhost, self.BRport, 60)
        except Exception as err:
            errno, error_string = err
            py_logger.critical(""Error to connect mqtt. E1: {}. E2: {}. Broker={}"".format(str(errno), str(error_string), self.BRname))
        else:
            pass

        self.loop_start()

    def exit(self):
        if self.DEBUG:
            py_logger.info(""Paho mqtt is stoping..."")
        self.bag_pub_raw_topic(self.LWT_topic, payload=""Offline"", retain=True)
        self.disconnect()
        self.loop_stop()

py_logger = logging.getLogger(__name__)
py_logger.setLevel(logging.INFO)
py_handler = logging.FileHandler(""{}.log"".format(__name__), mode='w')
py_formatter = logging.Formatter(""%(name)s %(asctime)s %(levelname)s %(message)s"")
py_handler.setFormatter(py_formatter)
py_logger.addHandler(py_handler)

DEBUG = True
program_name = ""parent_program""

MQTTtopic_header = ""BSR30/"" + program_name + ""/relays/""
subscribe_to_topics = [(MQTTtopic_header + ""command/#"", 0)]
LWT_topic = MQTTtopic_header
print(subscribe_to_topics)

mqtt_cred_name=""LocalBrocker""

LocalBrocker = MyMQTTClass(""client_id_test"")
LocalBrocker.setPlaces(
    name=mqtt_cred_name,
    host='mosquitto',
    port=1883,
    user=None,
    password=None,
    topic_header=MQTTtopic_header,
    subscribe_to_topics=subscribe_to_topics,
    LWT_topic=LWT_topic,
    DEBUG=DEBUG)

def LocalBrocker_on_message(LocalBrocker, userdata, msg):
    py_logger.info(""Recieved msg: {}, topic={}, brocker={}"".format(str(msg.payload), msg.topic, LocalBrocker.BRname))

LocalBrocker.on_message = LocalBrocker_on_message
LocalBrocker.BRinfo()
LocalBrocker.bag_will_set(MQTTtopic_header)
LocalBrocker.run2()

while True:
    pass
```

Output:

```
pythondocker-1  | DEBUG:__main__:test
pythondocker-1  | [('BSR30/parent_program/relays/command/#', 0)]
pythondocker-1  | INFO:__main__:Connection data: LocalBrocker (mosquitto:1883), u=None, pass=None, client_id=b'client_id_test', topic_header=BSR30/parent_program/relays/
pythondocker-1  | INFO:__main__:Successfully subscribed to topic: BSR30/parent_program/relays/command/#
pythondocker-1  | INFO:__main__:Message is published success. mid=2
pythondocker-1  | INFO:__main__:Successfully subscribed: Brocker=LocalBrocker, subscribed: mid=1, granted_qos=(0,)
pythondocker-1  | INFO:__main__:Recieved msg: b'foo', topic=BSR30/parent_program/relays/command/x, brocker=LocalBrocker
```

As you will note the `LocalBrocker_on_message` is called,","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFLQ2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/721,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/721,paho.mqtt.python,1678871979,721,Subscribe fails if there is a large block of persistent packet in outboundMsg,cuttlfish,2237251,,,CLOSED,2023-04-21T17:37:26Z,2024-07-17T23:47:26Z,"In MQTT sync mode, I am seeing a failure in subscribe if cleanSession is set to 0 and there is a large (> 1 MB) data in persistent data that needs to be stored.

First a large persisent data gets restored with this print

     Partial write: 43440 bytes of 11184910 actually written on socket 59

 The subscribe fails with this message

     Trying to write to socket 59 for which there is already pending output

I am calling subscribe right after MQTT connects which succeeded. But it seems that the socket layer still have not finish writing the persistent packet in outboundMsgs. The failure in subscribe causes MQTT to disconnect due to SOCKET_ERROR returned. 

It seems the subscribe should be done before any persistent packets gets restored? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/721/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/721,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFHhn,paho.mqtt.python,1880389735,721,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T05:04:09Z,2024-01-08T05:04:09Z,"Apologies for the delay in responding.

Is there any chance you could provide a minimal version of your code (it's easy to send the larger message with `mosquitto_pub` for testing but a lot quicker for us to duplicate this if we have your code).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFHhn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/721,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM9Cb,paho.mqtt.python,2234765467,721,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:47:26Z,2024-07-17T23:47:26Z,I'm going to close this due to it's age/inactivity. Please do feel free to reopen if you are able to provide code to reproduce the issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM9Cb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/722,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/722,paho.mqtt.python,1680552541,722,sslv3_alert_bad_record_mac,yangxiang12,23648538,,,OPEN,2023-04-24T06:33:31Z,2024-01-08T04:59:41Z,"> **How should this problem be solved?**

> python version: 3.6.9
> sslerror: [ssl: sslv3_alert_bad_record_mac] sslv3 alert bad record mac (_ssl.c:2309)

`
client.tls_set(
                    ca_certs=""xxx.crt"",
                    certfile=""xxx.pem"",
                    keyfile=""xxx.key"",
                    cert_reqs=ssl.CERT_NONE, 
                    tls_version=ssl.PROTOCOL_TLSv1_2
                )

client.reconnect_delay_set(min_delay=5, max_delay=5)
client.connect_async(host=self.host, port=self.port, keepalive=10)
client.loop_start()
`","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/722/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/722,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ayRyT,paho.mqtt.python,1523129491,722,NA,yangxiang12,23648538,,,NA,2023-04-26T09:56:19Z,2023-04-26T09:56:19Z,"Exception in thread Thread-2842003:
Traceback (most recent call last):
  File ""threading.py"", line 916, in _bootstrap_inner
  File ""threading.py"", line 864, in run
  File ""paho/mqtt/client.py"", line 3591, in _thread_main
  File ""paho/mqtt/client.py"", line 1756, in loop_forever
  File ""paho/mqtt/client.py"", line 1164, in _loop
  File ""paho/mqtt/client.py"", line 1556, in loop_read
  File ""paho/mqtt/client.py"", line 2370, in _packet_read
  File ""paho/mqtt/client.py"", line 640, in _sock_recv
  File ""ssl.py"", line 997, in recv 
  File ""ssl.py"", line 874, in read
  File ""ssl.py"", line 633, in read
ssl.SSLError: [SSL: SSLV3_ALERT_BAD_RECORD_MAC] sslv3 alert bad record mac (_ssl.c:2309)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5ayRyT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/722,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFG4d,paho.mqtt.python,1880387101,722,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:59:40Z,2024-01-08T04:59:40Z,"Apologies for the long delay in responding.

Sorry - we would need more information (i.e. what broker, broker setup/log, output of `openssl s_client -connect servername:port` etc).  If you have solved this yourself in the interim please close the issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFG4d/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/723,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/723,paho.mqtt.python,1680917768,723,TLS without cert file,jim-king-2000,7019050,Jim Jin,jim_king_2000@163.com,CLOSED,2023-04-24T10:13:11Z,2023-06-20T08:23:52Z,"We used MQTT of node.js from [here](https://github.com/mqttjs/MQTT.js). If we need tls, it is very simple:

```javascript
const client  = mqtt.connect('mqtts://test.mosquitto.org')
```

TLS is enabled by `mqtts://...`

Now `paho.mqtt.python` forces us to provide cert file(s) when enabling TLS. Is it possible to enable TLS without cert file as the one in node.js?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/723/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/724,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/724,paho.mqtt.python,1685556446,724,UserProperty method not available,BlackRose01,7542316,,,CLOSED,2023-04-26T19:02:58Z,2023-04-26T19:25:14Z,"Hello,

in my project I want to use the paho library to communicate with my MQTT Broker via MQTTv5. I also would like to use the UserProperties option from MQTTv5 but unfortunately it is not possible to create custom UserProperties as it mentioned here:

[https://github.com/eclipse/paho.mqtt.python/blob/a4cb435ca2864d073ea3e0e18b0407e4bbe85b16/src/paho/mqtt/properties.py#L142-L159](https://github.com/eclipse/paho.mqtt.python/blob/a4cb435ca2864d073ea3e0e18b0407e4bbe85b16/src/paho/mqtt/properties.py#L142-L159)

Am I missing something?

Thanks in advanced.

KR,
BlackRose01","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/724/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/724,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5a1RJr,paho.mqtt.python,1523913323,724,NA,fpagliughi,4303121,Frank Pagliughi,,NA,2023-04-26T19:07:55Z,2023-04-26T19:07:55Z,That works fine for me. What problem are you having with it?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5a1RJr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/724,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5a1VlX,paho.mqtt.python,1523931479,724,NA,BlackRose01,7542316,,,NA,2023-04-26T19:25:14Z,2023-04-26T19:25:14Z,"Sorry, I'm stupid -.- I always had a typo in it. I wrote UserPropety instead of UserProperty.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5a1VlX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/725,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/725,paho.mqtt.python,1702120376,725,Cannot store received UserProperty in variable,BlackRose01,7542316,,,OPEN,2023-05-09T14:07:31Z,2024-01-08T04:51:13Z,"Hello,

I wrote a class which should test MQTT Brokers. The method ""check_userprops"" checks if it is possible to send and receive User Properties. I can see the message incl. the Properties in my MQTT Explorer (MQTTx). So this works but the problem is that I cannot store the received Properties in a variable. As soon as I try to store the information then the Property ""disappears"" from the message object from the method ""__check_userprops"" (on_message) and I don't know why. Even when I change the on_message method to a class method it is not possible to store the information. When I switch from a class to a non-class code (Demo Code) then everything works fine.

Do I have a thinking problem in my code or am I understanding something completely wrong?

Thanks in advance!

KR,
BlackRose01

## Configuration object for My Code
```json
{
    ""name"": ""Test MQTT v5 non secure"",
    ""host"": ""localhost"",
    ""port"": 1883,
    ""transport"": ""mqtt"",
    ""version"": ""5"",
    ""credentials"": False,
    ""certificate"": False
}
```

## My Code
```python
from .IMqtt import IMqtt
import paho.mqtt.client as mqtt
from paho.mqtt.client import MQTTMessage, SubscribeOptions
from paho.mqtt.properties import Properties
from paho.mqtt.packettypes import PacketTypes
import ssl
import importlib.metadata
from datetime import datetime, timedelta
import logging
import copy


class Paho(IMqtt):
    def __init__(self, connection_information: dict, timeout: float = 20.0, test_topic: str = ""test"", test_msg: str = ""test message"") -> None:
        self.config = connection_information
        self.logger = logging.getLogger(""MQTT Tester"")
        self.timeout = 20.0 if timeout <= 0 else timeout
        self.test_topic = test_topic if test_topic.startswith(""/"") is False else test_topic[1:]
        self.test_msg = test_msg if test_msg != """" and test_msg is not None else ""test message""
        self.status = None
        self.client = self.__connect()

    def __connect(self, counter: str = """", set_will: bool = False) -> mqtt.Client:
        protocol = mqtt.MQTTv5 if self.config['version'] == ""5"" else mqtt.MQTTv311 if self.config['version'] == ""311"" else mqtt.MQTTv31
        transport = ""tcp"" if self.config['transport'].lower() == ""mqtt"" else ""websockets""
        client_id = ""testconnection_paho_{}{}"".format(""ws"" if transport == ""websockets"" else ""mqttv"" + self.config['version'], """" if counter == """" else ""_"" + counter)

        client = mqtt.Client(client_id=client_id, protocol=protocol, transport=transport)
        client.client_id = client_id
        client.msg_status = None

        if transport == ""websockets"":
            client.ws_set_options(path=""/mqtt"")

        if set_will:
            client.will_set(topic=self.test_topic, payload=self.test_msg, retain=True)

        if self.config['credentials'] is not False:
            client.username_pw_set(
                username=self.config['credentials']['username'], password=self.config['credentials']['password'])

        if self.config['certificate'] is not False:
            client.tls_set(ca_certs=self.config['certificate']['ca'])
            client.tls_insecure_set(True)
            c = client.connect(host=self.config['host'], port=self.config['port'])
        else:
            c = client.connect(host=self.config['host'], port=int(self.config['port']))

        client.loop_start()
        return client
    
    def __cleanup(self) -> None:
        self.status = None
        self.client.msg_status = None

        self.client.on_connect = None
        self.client.on_connect_fail = None
        self.client.on_disconnect = None
        self.client.on_message = None
        self.client.on_publish = None
        self.client.on_subscribe = None
        self.client.on_unsubscribe = None
    
    def disconnect(self) -> None:
        self.client.loop_stop()
        self.client.disconnect()
    
    def __check_userprops(self, client, userdata, msg: MQTTMessage) -> None:
        print(msg.properties.json())
        client.msg_status = (str(msg.payload.decode(""utf-8"")), msg.properties.json())
        print(client.msg_status)

    def check_userprops(self) -> tuple:
        self.__cleanup()
        
        if self.is_mqtt5() is False:
            return (False, ""Ignored. Client is not MQTTv5"")
        
        properties_pub = Properties(packetType=PacketTypes.PUBLISH)
        properties_pub.UserProperty = [(""A"", ""B"")]

        try:
            res, mid = self.client.subscribe(topic=self.test_topic)
            self.client.on_message = self.__check_userprops

            if res != mqtt.MQTT_ERR_SUCCESS:
                return (False, mqtt.error_string(res))
            
            msg = self.client.publish(
                topic=self.test_topic, payload=self.test_msg, properties=properties_pub)
            msg.wait_for_publish(timeout=self.timeout)
            start = datetime.now()

            while self.client.msg_status is None and (datetime.now() - start) <= timedelta(seconds=self.timeout):
                pass

            print(""Data: "" + str(self.client.msg_status))
            res, mid = self.client.unsubscribe(topic=self.test_topic)

            if res != mqtt.MQTT_ERR_SUCCESS:
                return (False, mqtt.error_string(res))
            if self.client.msg_status is None:
                return (False, ""No message received"")
            elif self.client.msg_status[0] != self.test_msg:
                return (False, ""Received message does not correspond to published message"")
            elif not self.client.msg_status[1]:
                return (False, ""Did not receive any UserProperty"")
            elif (""A"", ""B"") in self.client.msg_status[1].properties.items():
                return (False, ""The received UserProperty does not cooespond to published UserProperty"")

            return (True,)
        except (ValueError, RuntimeError) as e:
            return (False, e)
```


## Demo Code
```python
#!C:/python36/python.exe
#!/usr/bin/env python3
##demo code provided by Steve Cope at www.steves-internet-guide.com
##email steve@steves-internet-guide.com
##Free to use for any purpose
##If you like and use this code you can
##buy me a drink here https://www.paypal.me/StepenCope

import paho.mqtt.client as mqtt
from paho.mqtt.properties import Properties
from paho.mqtt.packettypes import PacketTypes
import time
import logging
import sys

client_id = ""testclient2""
mqttv = mqtt.MQTTv5
messages = []
host = 'localhost'
port = 1883
pub_topic = ""test""
x = None


def on_publish(client, userdata, mid):
    print(""published"")


def on_connect(client, userdata, flags, reasonCode, properties=None):
    print('Connected ', flags)
    print('Connected properties', properties)
    print('Connected ', reasonCode)


def on_message(client, userdata, message):
    global x
    msg = str(message.payload.decode(""utf-8""))
    messages.append(msg)
    print(""correlation="", message.properties)
    print('RECV Topic = ', message.topic)
    print('RECV MSG =', msg)
    print(""properties received= "", message.properties)
    user_properties = message.properties.json()
    x = message.properties.json()
    print(""user properties received= "", user_properties)


def on_disconnect(client, userdata, rc):
    print('Received Disconnect ', rc)


def on_subscribe(client, userdata, mid, granted_qos, properties=None):
    print('SUBSCRIBED')


def on_unsubscribe(client, userdata, mid, properties, reasonCodes):
    print('UNSUBSCRIBED')


print(""creating client"")


client_sub = mqtt.Client(""subclient"", protocol=mqttv)
client_pub = mqtt.Client(""pubclient"", protocol=mqttv)

client_sub.on_connect = on_connect
client_pub.on_connect = on_connect
client_sub.on_message = on_message
client_sub.on_disconnect = on_disconnect
client_sub.on_subscribe = on_subscribe
client_pub.on_publish = on_publish

client_sub.connect(host)
client_sub.loop_start()
client_sub.subscribe('test/#', qos=0)
client_pub.connect(host)
#while(not client_sub.is_connected() and not client_sub.is_connected())
print(""waiting for connection"")
time.sleep(5)
print(""connected"")
print(""sending message user properties set"")
properties = Properties(PacketTypes.PUBLISH)
count = ""1""
properties.UserProperty = [(""filename"", ""test.txt""), (""count"", count)]
client_pub.publish(""test/mqtt"", ""test message"", properties=properties)

time.sleep(5)
client_sub.disconnect()
client_pub.disconnect()

print(""HI"")
print(x)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/725/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/725,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFFwC,paho.mqtt.python,1880382466,725,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:51:02Z,2024-01-08T04:51:02Z,"Apologies for the delay! 

> As soon as I try to store the information then the Property ""disappears"" from the message object from the method ""__check_userprops"" (on_message) and I don't know why.

Sorry - I'm having a little difficulty following this. Is there any chance you could provide a minimal, reproducible, example (your code is close; if you could just tweak it so it runs the same as ""Demo Code"" that would be great!).  The output I get from ""Demo Code"" is as follows (I'm assuming that this is the correct output that you expect; what's the output from the other code?):

```
pythondocker-1  | correlation= [UserProperty : [('filename', 'test.txt'), ('count', '1')]]
pythondocker-1  | RECV Topic =  test/mqtt
pythondocker-1  | RECV MSG = test message
pythondocker-1  | properties received=  [UserProperty : [('filename', 'test.txt'), ('count', '1')]]
pythondocker-1  | user properties received=  {'UserProperty': [('filename', 'test.txt'), ('count', '1')]}
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFFwC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/726,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/726,paho.mqtt.python,1707901805,726,Allow password to be set with no username on MQTT 5,vishnureddy17,30186564,Vishnu Reddy,,OPEN,2023-05-12T16:25:32Z,2024-01-08T04:36:54Z,"MQTT 5 allows for a password to be set in the CONNECT packet without providing a username. However, it seems like this client does not support this. Would be nice if this were possible. 

[Relevant part of the MQTT spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901044)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/726/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/726,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFD2U,paho.mqtt.python,1880374676,726,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:36:47Z,2024-01-08T04:36:47Z,"Relevant comment from the spec:

>Non-normative comment:  This version of the protocol allows the sending of a Password with no User Name, where MQTT v3.1.1 did not. This reflects the common use of Password for credentials other than a password.

It looks like `client.username_pw_set(None, ""foobar"")` sets things up correctly but `_send_connect` will not send the password by itself:

```
if self._username is not None:
            remaining_length += 2 + len(self._username)
            connect_flags |= 0x80
            if self._password is not None:
                connect_flags |= 0x40
                remaining_length += 2 + len(self._password)
```

Should be a fairly simple enhancement.
 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFD2U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/727,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/727,paho.mqtt.python,1713618763,727,Broken Pipe issue,Daniel730,36681072,Daniel Pereira da Silva,,CLOSED,2023-05-17T10:43:56Z,2023-12-30T02:35:55Z,"Hi! 

I'm having trouble with python mqtt for a few months now and I can't find any solutions to this. 
I'm running the Python MQTT in my Raspberry PI 3 and I'm using sonoff with Tasmota. I don't know why, but after a few hours of the script running, it just stops and Notify me an Error 32: Broken Pipe. After this error, my script just stops sending my Radio Frequency codes. 

If anyone can help me with this issue or point out what I'm doing wrong, I'll be glad. Thanks in advance.

Here's the code I'm using below.

```python
from datetime import datetime
from dotenv import load_dotenv
from urllib.error import HTTPError
import bugsnag
import errno
import json
import paho.mqtt.client as mqtt
import os
import time
import urllib.parse as urlparse
import urllib3

#Config .env
load_dotenv()

#Config bugsnag
bugsnag.configure(
    api_key = os.getenv('BUGSNAG_API_KEY'),
    project_root = ""./""
)

# Parse CLOUDMQTT_URL (or fallback to localhost)
url_str = os.environ.get('CLOUDMQTT_URL', 'mqtt://localhost:1883') # mqtt://localhost:1883
url = urlparse.urlparse(url_str)
topic = url.path[1:] or 'tele/sonoff/RESULT'

# Define event callbacks
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(""Connected"")
        global Connected
        Connected = True
        register_log('Connected')

        # Start subscribe, with QoS level 0
        mqttc.subscribe(topic, 0)
        register_log('Subscribed to topic %s' % (topic))
    else:
        print(""Failed on connection"")
        register_log('Failed on connection. RC: %s' % (rc))

def on_message(client, obj, msg):
    responseBroker = str(msg.payload.decode(encoding=""utf-8""))
    register_log('on_message: %s' % (responseBroker))

    if ""{"" in responseBroker:
        jsonLoad = json.loads(responseBroker)
        code = jsonLoad[""RfReceived""][""Data""]
        url = os.getenv('BASE_URL') + str(os.getenv('CLIENT_ID')) + ""/"" + code + ""/RFReceived""
        register_log(url)
        try:
            http = urllib3.PoolManager()
            contents = http.request('GET', url)
            print(msg.topic + "": "" + url)
            print(contents.data.decode(""utf-8""))
            register_log('Success')
        except (urllib3.exceptions.HTTPError, urllib3.exceptions.ProtocolError) as e:
            print('Request failed: %s' % (str(e.reason)))
            register_log('Request failed: %s' % (str(e.reason)))

def on_publish(client, obj, mid):
    register_log('on_publish called')
    print(""mid: "" + str(mid))
    register_log(""mid: %s"" % (str(mid)))
    pass

def on_subscribe(client, obj, mid, granted_qos):
    register_log('on_subscribe called')
    print(""Subscribed: "" + str(mid) + "" "" + str(granted_qos))
    register_log(""Subscribed: %s %s"" % (str(mid), str(granted_qos)))

def on_log(client, obj, level, string):
    print(string)

def before_notify_callback(event):
    event.user = {
        ""client"": os.getenv('CLIENT_ID'),
        ""raspberryIp"": os.getenv('RASPBERRY_IP'),
    }

def set_date_and_hour():
    global date
    global hour

    today = datetime.now()
    date = today.strftime(""%Y-%m-%d"")
    hour = today.strftime(""%H:%M:%S"")

# Setup logging
def register_log(message):
    set_date_and_hour()
    filename = ""/home/dietpi/logs/%s.log"" % (str(date))

    log = open(filename, ""a"")
    log.write(""[%s %s] %s \n"" % (str(date), str(hour), message))
    log.close()

set_date_and_hour()

# Call `before_notify_callback` before every event
bugsnag.before_notify(before_notify_callback)

Connected = False

mqttc = mqtt.Client()

# Assign event callbacks
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_message = on_message
mqttc.on_subscribe = on_subscribe

# Uncomment to enable debug messages
# mqttc.on_log = on_log

# Connect
register_log('Attempting connection to %s in hostname %s port %s' % (url.username, url.hostname, url.port))
mqttc.username_pw_set(url.username, url.password)
mqttc.connect(url.hostname, url.port)
register_log('Connected to %s in hostname %s port %s' % (url.username, url.hostname, url.port))

# Start the loop
register_log('Starting loop_forever')
mqttc.loop_forever()

# Wait for connection
while Connected != True:
    register_log('Waiting for connection')
    time.sleep(0.1)

# Publish a message
register_log('Publishing message to topic: %s' % (topic))
mqttc.publish(topic, ""Python is listening!"")

try:
    while True:
        print(""publishing to message"")
        register_log('Publishing message to topic: %s' % (topic))
        mqttc.publish(topic, ""Python is listening!"")
        time.sleep(1)

except KeyboardInterrupt:
    print(""exiting"")
    register_log('Keyboard interrupt. Exiting')
    mqttc.disconnect()
    register_log('Disconnected')
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/727/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/727,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmwuv,paho.mqtt.python,1872432047,727,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-30T02:35:55Z,2023-12-30T02:35:55Z,"I'm going to close this due to the amount of time it's been open (apologies that no one responded to you). If you do still require help please provide the full error message (including output from just before the error, the stack trace, and ideally [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger)). Note that nothing under `loop_forever()` will be run (unless you stop the loop).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmwuv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/728,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/728,paho.mqtt.python,1721311985,728,erroneous post,wolverin-a,49385665,,,CLOSED,2023-05-23T06:34:20Z,2023-05-23T07:54:07Z,,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/728/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/730,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/730,paho.mqtt.python,1755120105,730,Messages droped without error message,equidna,2698695,Rui Lima,ruirochalima1@gmail.com,OPEN,2023-06-13T15:10:59Z,2023-12-24T01:50:44Z,"I'm using this python module to send messages to a MQTT broker in Home Assistant. The code regarding the MQTT client is the following:
```
topic = '/homeassistant/zone_clusters'
client = mqtt_client.Client(client_id)
client.username_pw_set(username, password)
client.connect(broker, port)

time.sleep(row_time)
client.publish_qos = 2
for _, row in zone_clusters_df.iterrows():
    json_row = row.to_json()
    (rc, mid) = client.publish(topic=topic, payload=json_row, qos=2)
    if rc != 0:
        print(rc + ' - ' + mid)
    client.loop()
    time.sleep(row_time)
client.disconnect()
print('zone_clusters - done')`
```

But some of the messages are dropped without warning. I can see that by counting the number of messages received by listening to the MQTT topic (using node red).

Am I doing anything wrong in the code? If I'm using qos 2, shouldn't I receive at least a warning about a dropped message?
Thank you.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/730/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/730,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5g3wpv,paho.mqtt.python,1625229935,730,NA,realtimeprojects,388730,Claudio Klingler,ck@realtime-projects.com,NA,2023-07-07T10:50:39Z,2023-07-07T10:50:39Z,"I observed a similar problem using ""qos=1"":

When publishing multiple messages with qos=1 over  single connetion, only the first 20 messages are delivered to the broker. Beginning from the 21st message, no more messages are delivered to the broker. This is 100% reproducible with paho mqtt client v1.6.1 and qos=1.

When using qos=0, there is no issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5g3wpv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/730,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbL9,paho.mqtt.python,1868411645,730,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:50:22Z,2023-12-24T01:50:22Z,"As per the docs:

>It is strongly recommended that you use loop_start(), or loop_forever(), or if you are using an external event loop using loop_read(), loop_write(), and loop_misc(). Using loop() on it's own is no longer recommended.

If you just want to send a bunch of messages and wait until they have been completely sent then use  [`publish.multiple`](https://github.com/eclipse/paho.mqtt.python#publish-1) (or see it's source for the suggested technique).

@realtimeprojects my guess would be that you are not calling a loop function at all (the devil is in the detail).

Note that many brokers impose limits on the number of messages in flight; for instance Mosquitto defaults to 20 (see the `max_inflight_messages` setting) - if this limit is exceeded then messages are dropped. This is a common issue; QOS2 messages take a while to process (the publish is sent, a PUBREC is recieved, a PUBREL is sent then a PUBCOMP is received) and if you send messages quickly you can easily exceed the 20 messages in flight (just due to network latency).

Hopefully the above helps; if not I would need considerably more information (the first step is to confirm where the issue is; as mentioned above it may well be the broker that is dropping messages).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXbL9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,paho.mqtt.python,1765697967,731,Client disconnect with code 16 and cannot connect again,Flock1993,86944512,Matvey,,OPEN,2023-06-20T15:54:55Z,2024-07-02T13:49:43Z,"I have this paho-mqtt python client (I have omitted some script logic and DB accessing for simplification):
```python
import json
import logging
import time

from paho.mqtt import client as mqtt

logging.basicConfig(level=logging.INFO)
mqtt_logger = logging.getLogger(""MqttCon"")


def on_connect(client, userdata, flags, rc):
    mqtt_logger.info(""Device connected with result code: "" + str(rc))
    client.subscribe(""some_topic/#"", qos=0)


def on_disconnect(client, userdata, rc):
    mqtt_logger.info(""Device disconnected with result code: "" + str(rc))


def pub_values(client, base_topic, values):
    msg = json.dumps(values)
    target_topic = base_topic
    mqtt_logger.info(""Sending message to wheel..."")
    client.publish(target_topic, msg, qos=0)


def on_message(client, userdata, msg):
    """"""
    Input messages format (can be one or list):
    {
        ""tag_id"": ""string"",
        ""value"": ""int or float"",
        ""timestamp"": ""string format YYYY-MM-DDTHH:MM:SS.F""
    }
    """"""
    try:
        info = json.loads(str(msg.payload.decode(""utf-8"")))
        mqtt_logger.info(msg.topic)
        pub_msg = {""tag_ids"": [], ""timestamp"": """"}
        mqtt_logger.info(f""Received message topic is {msg.topic}"")
        if isinstance(info, list):
            # some logic
        else:
            # some logic, writing values to InfluxDB
        pub_values(client=client, base_topic=""some_topic"", values=pub_msg)
    except Exception as e:
        mqtt_logger.error(str(e))


def on_log(client, userdata, level, buf):
    mqtt_logger.info(f""SYSTEM: {buf}"")


if __name__ == ""__main__"":
    client = mqtt.Client(protocol=mqtt.MQTTv311)
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.on_message = on_message
    client.on_log = on_log
    client.connect_async('<my_mqtt_url>', port=1883)

    client.loop_start()
    try:
        while True:
            time.sleep(0)
    except KeyboardInterrupt:
        pass
    finally:
        mqtt_logger.warning(""Stopping client"")
        client.loop_stop()
        client.disconnect()
```
It works good for a few hours, but at some time it have disconnection:
```
INFO:MqttCon:Received message topic is telemetry/MESPIV/batch
INFO:MqttCon:Sending message to wheel...
INFO:MqttCon:SYSTEM: Sending PUBLISH (d0, q0, r0, m4228), 'b'router/newdata'', ... (11336 bytes)
INFO:MqttCon:Sending message to wheel...
INFO:MqttCon:SYSTEM: Sending PUBLISH (d0, q0, r0, m4229), 'b'router/newdata'', ... (11336 bytes)
INFO:MqttCon:Device disconnected with result code: 16
INFO:MqttCon:Device disconnected with result code: 16
INFO:MqttCon:SYSTEM: Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
INFO:MqttCon:SYSTEM: Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
# more Sending CONNECT
```
The client disconnects with code 16 (MQTT_ERR_KEEPALIVE) and tries to connect in an infinite loop, but it fails to connect (don't recive CONNACK). How can I solve this problem? For mqtt docker container i use eclipse-mosquitto image.

My first code version worked by usial connect, but it has the same problem.

```python
if __name__ == ""__main__"":
    # setting mqtt client
    client.connect('<my_mqtt_url>', port=1883)
    client.loop_forever()
    client.disconnect()
```
**An important addition**: in the client logs there are disconnections with the code 16 with a successful reconnection, but it is impossible to reconnect from some kind.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fV-Jq,paho.mqtt.python,1599595114,731,NA,raomin,4460208,Raomin,,NA,2023-06-20T21:35:28Z,2023-06-20T21:35:28Z,Could it be linked to a momentary peak of messages? as described in #683 ?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fV-Jq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fYosY,paho.mqtt.python,1600293656,731,NA,Flock1993,86944512,Matvey,,NA,2023-06-21T07:04:48Z,2023-06-21T07:04:48Z,No i tested this case. I launched mqtt client which publish messages in infinite loop without time.sleep and this didn't drop service.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5fYosY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5flzX1,paho.mqtt.python,1603745269,731,NA,Flock1993,86944512,Matvey,,NA,2023-06-23T06:30:42Z,2023-06-23T06:30:42Z,"**Kludge solution:**

- Becouse MQTT client works in Docker container, i modify on_disconnect in such way:

```python
def on_disconnect(client, userdata, rc):
    mqtt_logger.info(""Device disconnected with result code: "" + str(rc))
    if rc == 16:
        exit(1)
```

- Add restart: always to container.
If there is dissconnect with code 16 -> application exits and container drops -> restarting container and it works for few hours.

At the time of restarting the container, there is a period of time during which data loss occurs from the mqtt broker.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5flzX1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f24gY,paho.mqtt.python,1608222744,731,NA,raomin,4460208,Raomin,,NA,2023-06-26T20:44:56Z,2023-06-26T20:44:56Z,"Exit and restart... that's not really an option for me, I need to process all messages.
@ralight, @PierreF any idea what could cause this? or any workaround?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5f24gY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5nPKzF,paho.mqtt.python,1732029637,731,NA,rodolphoiwano,59839443,,,NA,2023-09-22T21:02:36Z,2023-09-22T21:02:36Z,"Similar (maybe same) problem here, after a first disconnection with rc=16 the client connect (at least enter the on_connect callback) and subscribe to the topics again. After that it immediately disconnect with rc=7 and keep trying to connect.

At the broker side I can see that the connection and subscription are successful, I don't know why the disconnection occurs after that. I am using the iotcore broker from AWS.

The script is running in 50 computers and the problem happens once every 2 days in one of the computers. It seems to be happening more where the internet connection is not very stable. I have already added a queue to limit less than 50 publish requests per second for a single client - a broker limit that triggers a disconnection.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5nPKzF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5swLQv,paho.mqtt.python,1824568367,731,NA,Flock1993,86944512,Matvey,,NA,2023-11-23T14:55:02Z,2023-11-23T14:55:02Z,"@rodolphoiwano sometimes i think about rewriting code on [Golang](https://github.com/eclipse/paho.mqtt.golang)
Maybe it's python library specific problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5swLQv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5sw8AT,paho.mqtt.python,1824768019,731,NA,rodolphoiwano,59839443,,,NA,2023-11-23T17:38:54Z,2023-11-23T17:38:54Z,"@Flock1993 after some time I found a situation that exceeded the 50 publish requests per second for the AWS iotcore broker. It happened after a long disconnection that triggered the keepalive timeout.

Fixing it and using clean session always, may have solved the problem. It seems that after a server forced disconnection, it is not possible to reconnect to the same session.

However, the problem has never happened here when using a local broker (mosquitto), so I am considering it a problem related to the AWS iotcore broker limitations.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5sw8AT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXafh,paho.mqtt.python,1868408801,731,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:38:50Z,2023-12-24T01:38:50Z,">in the client logs there are disconnections with the code 16 with a successful reconnection

Can you please share more of the logs (ideally from the last successful publish through to the second code 16 error). Can you please also confirm that you can duplicate this with the code provided (changing only `<my_mqtt_url>`). I have a few ideas but need more info to confirm.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXafh/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vZNpM,paho.mqtt.python,1868880460,731,NA,Flock1993,86944512,Matvey,,NA,2023-12-25T09:18:43Z,2023-12-25T09:18:43Z,"![image](https://github.com/eclipse/paho.mqtt.python/assets/86944512/ad5c7ece-272a-4cf9-b6ae-0bfef94e7037)
MattBrittan,
1) To duplicate problem i need to add some another code, which writes data from mqtt messages to InfluxDB.
I will do some experiments on this week and return to you with results and logs
2) Also, problem described above is accompanied by high CPU consumption, which you can see on attached message.
Disconnection with code 16 occurs at the peak of CPU consumption, after that Docker container restart - we see low CPU consumption.
When I rewrote the code on golang the problem is gone.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vZNpM/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaUXJ,paho.mqtt.python,1869170121,731,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-26T00:44:04Z,2023-12-26T00:44:04Z,">To duplicate problem i need to add some another code, 

Thanks; I understand this can be difficult to provide, but unfortunately it's also difficult to trace an issue when you cannot duplicate it (and as there are not that many people working on issues in this repo the more you can do to help us replicate the issue the more likely it is that we will be able to solve it).

>at the peak of CPU consumption,

It would be interesting to know what is causing the CPU use (i.e. is this high message volume, something to do with the number of messages written to the database, something else..). These issues can be difficult to track down (the log info I requested may help) and it's not uncommon for the issue to be in user code (rather than the library). I've put a lot of effort into tracking down a few of these issues in the Go client so happy to hear that's working for you!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vaUXJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x-N0m,paho.mqtt.python,1912134950,731,NA,Gornoka,45569834,Lukas Hennies,,NA,2024-01-26T14:14:19Z,2024-01-26T14:14:19Z,"> Exit and restart... that's not really an option for me, I need to process all messages. @ralight, @PierreF any idea what could cause this? or any workaround?

what we do is that we trigger a reconnect in the on_disconnect hook, however, that still leaves you up to lose some messages, if they come in very fast. This is a limitation of the MQTT Protocol, AFAIK there is no Clean way in the MQTT world to prevent this from happening.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x-N0m/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_9rc,paho.mqtt.python,1912593116,731,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-26T19:38:21Z,2024-01-26T19:38:21Z,"@Flock1993 on you initial logs, there is one thing that look really odd:
```
INFO:MqttCon:Device disconnected with result code: 16
INFO:MqttCon:Device disconnected with result code: 16
INFO:MqttCon:SYSTEM: Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
INFO:MqttCon:SYSTEM: Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b''
```

You really had 2 disconnect and 2 connect consecutively ? Could you add timestamp on those log to known whether they happen at the same time ?

Having two consecutive CONNECT might be possible during auto-reconnection. A first connection is trying and fail (at TCP level), it then retry later.
Two consecutive disconnect seems like a bug. Is it possible that two network loop are running ?

If you can still reproduce this issue, I suggest you trying to do with the 2.0.0rc2 because their is some improvement on few network error handling and there is improved warning if you try to run two network loop (it's a pre-release, but available on PyPI).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x_9rc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/731,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6DUhX8,paho.mqtt.python,2203194876,731,NA,marcelrv,5871213,Marcel,,NA,2024-07-02T13:38:59Z,2024-07-02T13:38:59Z,"@PierreF Maybe as bit of notice. I'm also struggling with the rc 16 disconnect.
But interestingly similar as to @Flock1993 I see the also 2x the on_disconnect being called.

```
2024-07-02T13:25:34+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:25:34+0000 [WARNING] Disconnection code 16: No matching subscribers
2024-07-02T13:25:34+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:25:34+0000 [WARNING] Disconnection code 16: No matching subscribers
2024-07-02T13:25:35+0000 [INFO] Source broker Connection Established
2024-07-02T13:27:35+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:27:35+0000 [WARNING] Disconnection code 16: No matching subscribers
2024-07-02T13:27:35+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:27:35+0000 [WARNING] Disconnection code 16: No matching subscribers
2024-07-02T13:27:36+0000 [INFO] Source broker Connection Established
2024-07-02T13:30:38+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:30:38+0000 [WARNING] Disconnection code 16: No matching subscribers
2024-07-02T13:30:38+0000 [WARNING] Unexpected source MQTT disconnection. Will auto-reconnect
2024-07-02T13:30:38+0000 [WARNING] Disconnection code 16: No matching subscribers
```

note: this was on 1.6.1, but similar result in 2.1.0. 
Note2: https://github.com/marcelrv/victron-dbus-mqttmapper is what is running. It has 2 instances but connecting to 2 different mqtt servers.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6DUhX8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/732,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/732,paho.mqtt.python,1773164173,732,Find no 'path=' option for single messages,sosyco,6121594,,,OPEN,2023-06-25T09:06:42Z,2023-12-24T01:23:10Z,"Hi,
I want to send a single message to wss://mydomain/mqtt behind a proxy.

Mosquitto and NGINX work fine. 
I can send messages via websocket to the defined path via MQTTX.
Same via full-client-code.

BUT using the single function, I see no option for path (""/mqtt"")

If I use websocket without path but a special domain (wss://mqtt.mydomain), all works fine. But this is not my intention. 

A code example:
```python
import paho.mqtt.publish as mqttpublish
import certifi
...
mqtt_auth = { 'username': USER, 'password': PASSWORD }
# where can i set the path='/mqtt'?
mqttpublish.single(TOPIC, payload=MSG, qos=1, retain=True, hostname=BROKER, port=443, client_id=CLIENTID, keepalive=60, will=None, auth=mqtt_auth, tls={'ca_certs':certifi.where()}, transport='websockets')
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/732/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/732,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaBp,paho.mqtt.python,1868406889,732,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:22:53Z,2023-12-24T01:22:53Z,"`/mqtt` should be the [default path](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L619); so you should not need to specify this.

It does not look like `single` provides any way to change this; for now you would need to copy [the code](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/publish.py) (it's relatively short) and add a call to `ws_set_options`.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaBp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,paho.mqtt.python,1774391482,733,Is re-publishing messages after clean_state=True a deliberate design decision? How to handle Session Present = False?,couling,23001043,Philip Couling,,CLOSED,2023-06-26T09:58:31Z,2024-07-17T09:39:41Z,"I'm hunting for an issue explaining this in the documentation (found [here](https://pypi.org/project/paho-mqtt/)), but I've not found one:

> Also when clean_session is True, this library will republish QoS > 0 message across network reconnection. This means that QoS > 0 message won’t be lost. But the standard say that if we should discard any message for which the publish packet was sent. Our choice means that we are not compliant with the standard and it’s possible for QoS 2 to be received twice. You should you clean_session = False if you need the QoS 2 guarantee of only one delivery.

Was this a deliberate design decision or is it still up for someone to offer a ""fix""?

I'm concerned because even though it might be possible to work around `clean_session=False` simply by creating a new client, I don't see any work around for Session Present = False [3.2.2.2 Session Present](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718035).

That is if the MQTT broker loses the session for any reason, including administrative action, the client will re-send duplicate QOS 2 messages and the broker will have no mechanism to de-duplicate them.  I don't see a way for code using Paho to handle Session Present = False itself to prevent duplicate QOS 2 messages.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFcCz,paho.mqtt.python,1880473779,733,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T07:01:32Z,2024-01-08T07:01:32Z,">But the standard say that if we should discard any message for which the publish packet was sent.

This does not look quite correct to me. QOS0 messages are not acknowledged (so we have no way to confirm if the broker has received them) meaning that once a QOS0 message has been transmitted it's discarded. 

However if the connection is lost before the message is transmitted (or is down when `publish` is called) then the message will be queued and transmitted when the connection comes up (I think this is what the quote is referring to). I don't believe there is anything in the spec that specifically prohibits this (the session state section states that it may include ""Optionally, QoS 0 messages pending transmission to the Client."") (and nothing in the spec really states what the client side library should do).

Creating a new client would prevent the messages being resent (because this library holds the state in memory; a new client will have a fresh state).

>That is if the MQTT broker loses the session for any reason, including administrative action, the client will re-send duplicate QOS 2 messages and the broker will have no mechanism to de-duplicate them.

I believe the library may deliver a message twice; this could occur when:

1. Message is received; handler called
2. Connection drops before server receives PUBREC
3. Connection resumed; server resends PUBLISH

This could be addressed by checking `_in_messages[message.mid]` to see if we are are already waiting for the PUBREL before calling the handler (so the handler is not called the second time the message is received).

Hopefully this helps a bit; note that I don't usually work on this library (just trying to help tidy up issues) so there may be errors in the above.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFcCz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50Qfao,paho.mqtt.python,1950480040,733,NA,couling,23001043,Philip Couling,,NA,2024-02-17T22:46:20Z,2024-02-17T22:46:20Z,"@MattBrittan not really sure what more info is needed.  It's a shame this didn't make the cut for V2.0 because this may end up being a breaking change. Not sure.

Reading between the lines Paho is not correctly handling the ""session present"" flag in `CONNACK` packet [3.2.2.2](https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349255), and it's certainly not honouring the definition of QOS 2 as ""Deliver Exactly once"" when it duplicates a message without permission from the calling application.

The correct behaviour here is hinted at in the standard (3.2.2.2):

> In the event that the value of Session Present received by the Client from the Server is not as expected, the Client can choose whether to proceed with the Session or to disconnect.

All Paho needs to do here is to disconnect and raise an exception when `clean_state=False` and the broker responds with ""session present 0"".  Then it's up to the application developer what they should do next.

-------

## Suggested Approach

To avoid backward compatibility issues, make the current retry logic on ""session present 0"" an optional ""feature"".  Let's call it `unsafe_retry`.  For backwards compatibility `unsafe_retry=True` can be the default.

Then if `unsafe_retry == False` and `clean_state=False` and the server responds with ""session found 0"": Paho can immediately close the connection **before** any further retry of any sort and raise an exception.

Ideally, Paho would offer some way for the application to know what is stuck in the outbound queue at that point.

After that it's on the application developer.  They can discard the Paho session and begin a new one, and it's on them to chose what to send and what not to send that was previously stuck in the outbound queue.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50Qfao/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50SM8W,paho.mqtt.python,1950928662,733,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-02-18T03:49:46Z,2024-02-18T03:49:46Z,"Apologies; it looks like I may have partly misinterpreted your issue (was working through a lot of old issues at the time and must have misread the quote). I ended up focusing mostly on QOS0 which is not really relevant here. I then talked about issues handling QOSS2 messages that were being received (which is an issue, but you are focusing on sent messages).

So with a focus on QOS1+ messages being transmitted from the client, when `clean_session = True`...

Firstly I think it's worth noting that, if I'm understanding you correctly, this will be a pretty rare situation. The following would need to occur:
   * Client connects with `clean_session = False` (meaning the session will outlast the connection)
   * Client publishes QOS1+ message (has not received ACK)
   * Client closes connection
   * Client re-connects with  `clean_session = True`

(there is an alternative, which you allude to in your response ref `""session present`, where the broker clears the session, generally this would only happen after a relatively lengthy loss of connection or if a broker without a persistent session store is restarted).

Should the above happen then any QOS1/2 guarantees are really moot. The client has no way of knowing (or finding out) whether the message it published was received (the server will have effectively thrown away all info regarding the client). As such the choice to resend does not seem unreasonable (generally a duplicate message is better than no message; QOS2 will be broken either way due to the removal of the session state).

>Reading between the lines Paho is not correctly handling the ""session present"" flag in CONNACK packet [3.2.2.2](https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349255),

Interesting the [V5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html) has something to say on this (it's more strict than the section of the V3 spec you quoted):

>If the Client does have Session   State and receives Session Present set to 0 it MUST discard its Session State if it continues with the Network Connection.

It does not look like this client currently adheres to this rule (the call to `_messages_reconnect_reset_out` should probably happen after the CONNACK is received rather than before opening the connection). 

> Then it's up to the application developer what they should do next.

You can actually handle this yourself if you want in the `on_connect` callback (this is called before any messages are sent and could clear the queue).

Anyway sorry about misunderstanding initially; I hope I've provided info relevant to your question this time! This is certainly something that could be addressed but I'm not sure that its a priority (and think there is a way of achieving what you want without changes to the library).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50SM8W/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50UYIb,paho.mqtt.python,1951498779,733,NA,couling,23001043,Philip Couling,,NA,2024-02-19T00:15:36Z,2024-02-19T00:15:36Z,"> You can actually handle this yourself if you want in the on_connect callback (this is called before any messages are sent and could clear the queue).

Sounds promising. Let's stress test the idea. Are you able to tell me:

- Does the `on_connect` callback happen before any retry? _(allowing the callback to closeand prevent Paho from retrying QOS2 messages)_
- What would happen to blocking `publish()` calls?  Would they fail on an exception **only after** the `on_connect` callback deliberately closes the connection?
- On exception, is there any way for blocking `publish()` to determine if the message made it to the wire or not. _There's a difference here between failing while waiting in a queue, vs failing while working through the 4-way QOS2 transmission._
------
> (there is an alternative, which you allude to in your response ref ""session present, where the broker clears the session, generally this would only happen after a relatively lengthy loss of connection or if a broker without a persistent session store is restarted).

No.  A simple re-deploy of the the broker can commonly trigger it.  If the out-going broker instance doesn't wait to complete all QOS2 messages, then anything ""in-flight"" is going to get lost.  Remember that QOS2 requires 4 messages to complete, so this is kinda likely if the broker shuts down too quickly....

... depending on the broker, the new incoming broker won't be handed any session state information.  So all clients just get told ""session found 0"".

> Should the above happen then any QOS1/2 guarantees are really moot. The client has no way of knowing (or finding out) whether the message it published was received (the server will have effectively thrown away all info regarding the client). As such the choice to resend does not seem unreasonable (generally a duplicate message is better than no message; QOS2 will be broken either way due to the removal of the session state).

No. That's the really dangerous assumption I'm getting at.  You are assuming that duplication is safe for a message flagged as ""exactly once"".  The client has explictly marked the message as ""do not duplicate"", accepting a performance hit for flagging it such.  So assuming that duplication is okay and pragmatic seems very wrong indeed.

Please see the [post office scandle](https://en.wikipedia.org/wiki/British_Post_Office_scandal) in the UK for explanation of why silently duplicating records can be bad.  While I'm not suggesting anyone use MQTT for financial records, my point is that Paho has absolutely no way to know what damage it's doing by duplicating a message that was supposed to be ""Exactly once"".

You are right that we are discussing an unrecoverable situation.  So the better thing to do, much better thing to do, is tell the application and let it figure out what to do next.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50UYIb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50UmGZ,paho.mqtt.python,1951555993,733,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-02-19T01:46:00Z,2024-02-19T01:46:00Z,">Sounds promising. Let's stress test the idea. Are you able to tell me: 

`on_connect` is called when `CONNACK` is received during the connection process (after checking it's not an outright rejection) so applies to all connection attempts. Tracking the status of an outgoing message is done with `MQTTMessageInfo`; this is not, as far as I can see, updated when a message is removed from the queue without being published. There is certainly room for improvement here, `wait_for_publish` provides a timeout option to cater for undelivered messages but that's not really a great solution). 

>No. A simple re-deploy of the the broker can commonly trigger it.

If your broker does not retain session information when re-deployed then you run the risk of message loss (""Exactly once delivery"" is not achievable in this situation).

>You are right that we are discussing an unrecoverable situation. So the better thing to do, much better thing to do, is tell the application and let it figure out what to do next.

Unfortunately ease of use dictates that some decisions be made for the user (a lot of library users have minimal knowledge of the protocol and just expect the library to work). MQTT appears, at first glance, to be very simple however there are a surprising number of edge cases and libraries get used in ways the authors never considered.

Anyway I believe it's possible to achieve your goal using `on_connect` (realise it's not ideal and would involve a bit of work on your side). Adding functionality to the library is an option, and a PR would be welcome (but probably best to raise an issue with a proposed design prior to embarking on this). I believe this would probably need to take the form of returning an error in [`wait_for_publish`](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L537C9-L537C25) and moving the call to `_messages_reconnect_reset` into `_handle_connack` (would probably suggest a more descriptive flag than `unsafe_retry` :-) ). 

I'll remove the ""More info needed"" flag but please do consider raising this as a new issue that includes elements of this discussion (due to the number of old issues I'm not sure how many people will review this one).


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50UmGZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FDbCK,paho.mqtt.python,2232266890,733,NA,couling,23001043,Philip Couling,,NA,2024-07-17T02:59:39Z,2024-07-17T02:59:39Z,"I've finally found time to evaluate the `on_connect`. It can be used to prevent duplication but still leaves a problem over knowing which messages failed to send.

@MattBrittan 

-----------

I still think current behaviour is, very bluntly, wrong!

> Unfortunately ease of use dictates that some decisions be made for the user (a lot of library users have minimal knowledge of the protocol and just expect the library to work).
This is no edge case! It's a core feature of MQTT described in the abstract!:

This is no edge case, it's a core feature described in the abstract of the standard.

> ""Exactly once"", where messages are assured to arrive exactly once. This level could be used, for example, **with billing systems where duplicate or lost messages could lead to incorrect charges being applied**.

Silently corrypting a user's data is not ""ease of use"". Sometimes things are hard no matter your design, and the right thing to do is put guard rails with well sign posted error messages so that users don't shoot themselves in the foot.

----

> MQTT appears, at first glance, to be very simple however there are a surprising number of edge cases and libraries get used in ways the authors never considered.

Oof. I can't agree with that. Maybe in earlier 3.x but not in 5. The standard is centered on some very simple core concepts which don't have much overlap to cause curious edge cases.  However it is very easy to misread the protocol standard and orient a client API around some subtle misunderstanding. This then makes the API have surprising behaviour to the user.

Case in point, the standard has a lot devoted to reconnection and maintaining a session state accross reconnects ensuring it's consistent.  Yet Paho's design seems to ignore a lot of the founational understanding of this. Eg: it makes very little sense for paho to have built in auto-reconnect while expecting the user to directly set `clean_start`. If paho doesn't have a session state held in memory it should set `clean_start=1` to ensure the client and server state match, and then set `clean_start=0` on any subsiquent reconnect.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FDbCK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FDsSW,paho.mqtt.python,2232337558,733,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T03:58:59Z,2024-07-17T03:58:59Z,"> I still think current behaviour is, very bluntly, wrong!

There will be numerious things in this library that are ""wrong"" because it's evolved over years (with  numerous authors all having different needs) and, as we saw with the V2 release, change is hard!. So we need to be pragmatic here in terms of finding a solution that meets your needs (unless you have the time to write a new version that addresses the failings; this is the approach we attempted with the [Go Client](https://github.com/eclipse/paho.golang) and I still have not got it to v1.0 :-) ). Pull requests are welcome but do need to be mindful of breaking users existing code.

>If paho doesn't have a session state held in memory it should set clean_start=1 to ensure the client and server state match, and then set clean_start=0 on any subsiquent reconnect.

This is actually a good example; many users don't really care about ""exactly once"" delivery, but do want to receive messages that have come in since their app was restarted (so `clean_start=0` is needed for the initial connection, or those messages are lost). This is not in compliance with the spec (as the client does not, in fact, have a session) but is what a lot of users will expect (and a pragmatic solution given the client does not store the session to disk). There is not really a right answer here....

Anyway I think it's best to focus on your specific issue. My thought was that in `on_connect` you could clear the queue. However I really would suggest opening a new issue (ideally with a proposed solution) because it's more likely to get noticed (I'm not actively developing this library, just trying to help manage the issues as they had got a bit out of control).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FDsSW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FFfw6,paho.mqtt.python,2232810554,733,NA,couling,23001043,Philip Couling,,NA,2024-07-17T09:05:48Z,2024-07-17T09:05:48Z,"> There will be numerious things in this library that are ""wrong"" because it's evolved over years (with numerous authors all having different needs) and, as we saw with the V2 release, change is hard!

Yup, I know. You'll note my earlier comments back in Feb.  You'll note my earlier comments 

>  It's a shame this didn't make the cut for V2.0 because this may end up being a breaking change.

What I meant by this was that when I first filed the issue, it was because I was willing to file some PRs myself, but needed to understand the chance of them getting approved before I sunk 2 weeks of business hours into fixing them. Getting PRs dismissed because a maintainer isn't willing to have a particular problem fixed is a really frustraiting way to burn time.

The problem isn't the time to write them, it's understanding that there is any willingness to accept such changes at the end of the process. It's the oppertunity for some kind of steer on what form the changes should take.

Sadly nobody responded at all prior to 2.x being released and so I'm guessing that getting potentially breaking changes through are far less likely to be approved.

> This is actually a good example; many users don't really care about ""exactly once"" delivery, but do want to receive messages that have come in since their app was restarted (so clean_start=0 is needed for the initial connection, or those messages are lost). This is not in compliance with the spec

Indeed it is a good example. What you say there reinforces my reason for not filing any PRs yet: What's needed are a bunch of smaller changes some breaking a use case with others fixing it again from a different angle.

I'll close this now in favour of #855 and seek to get some time to offer PRs towards that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FFfw6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/733,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FFwko,paho.mqtt.python,2232879400,733,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T09:39:41Z,2024-07-17T09:39:41Z,"Excellent - thanks for the new issue. One suggestion - perhaps note at the top that you are prepared to work on this and are looking to maximise the chance of a PR being accepted (I'm not sure if anyone else is currently in a position to take on a project like this, it will be a fair amount of work).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FFwko/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734,paho.mqtt.python,1784337734,734,Help with SNI ,lakshmisivareddy,33150961,challa Lakshmi Siva Reddy ,,OPEN,2023-07-02T00:28:45Z,2025-02-03T04:08:37Z,"Hi Team ,
i have a Multiple MQTT Broker hosted in K8's , these  MQTT Brokers are behind the ingress controller 
 ingress controller  routes the traffic to appropriate broker based on SNI 
for non TLS i am able to verify the connection using below command 
openssl s_client -showcerts -connect istio-test.westus2.cloudapp.azure.com:8883 -servername example1.test.com
openssl s_client -showcerts -connect istio-test.westus2.cloudapp.azure.com:8883 -servername example2.test.com

with TLS traffic i am not able to set specific SNI (servername). 
By default SNI going as istio-test.westus2.cloudapp.azure.com 

please fine the sample i am trying 

```
import paho.mqtt.client as paho
from paho.mqtt import client as mqtt
import ssl
import time
import socket
#path_to_root_cert = ""/home/challal/Downloads/cacert.pem""
#path_to_root_cert = ""/home/challal/Downloads/certs/azure-iot-test-only.root.ca.cert.pem""
path_to_root_cert = ""/home/challal/Downloads/test.pem""
device_id = ""pub_cert""
cert_file = ""/Users/l0c0gvk/Workspace/Testing/mqtttest/example_certs/device_cert_filename.pem""
key_file = ""/Users/l0c0gvk/Workspace/Testing/mqtttest/example_certs/device_cert_key_filename.key""
ca_cert='/Users/l0c0gvk/Workspace/Testing/mqtttest/example_certs/root_CA_cert_filename.pem'

def on_connect(client, userdata, flags, rc):
    print(""Device connected with result code: "" + str(rc))

def on_disconnect(client, userdata, rc):
    print(""Device disconnected with result code: "" + str(rc))

def on_publish(client, userdata, mid):
    print(""Device sent message"")

def sni_callback(sock, req_hostname, cb_context, as_callback=True):
     print('sni_callback')
    #  context1 = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)
    #  context1.load_cert_chain(certfile=cert_file,keyfile=key_file)
    #  context1.wrap_socket(socket.socket(socket.AF_INET),server_hostname=""example1.test.com"")
     print('Loading certs for {}'.format(req_hostname))
    # print(type(cb_context))



client =  paho.Client(client_id=device_id,clean_session=True,userdata=None,protocol=mqtt.MQTTv311)  

client.on_connect = on_connect
client.on_disconnect = on_disconnect
client.on_publish = on_publish

# Set the certificate and key paths on your client

#client.tls_set(ca_certs=path_to_root_cert, certfile=cert_file, keyfile=key_file,
#               cert_reqs=ssl.CERT_REQUIRED, tls_version=ssl.PROTOCOL_TLSv1_2, ciphers=None)

ssl_ctx = ssl.create_default_context(cafile=ca_cert)
ssl_ctx.check_hostname = False

# ssl_ctx.load_cert_chain(certfile=cert_file, keyfile=key_file)
# ssl_ctx.verify_mode = ssl.CERT_NONE
# client.tls_set_context(ssl_ctx)
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)


context.load_verify_locations(ca_cert)
context.load_cert_chain(cert_file, key_file)

#context.wrap_socket(server_hostname=""example1.test.com"")

context.sni_callback=sni_callback

client.tls_set_context(context)
client.tls_insecure_set(True)


client.connect(""istio-test.westus2.cloudapp.azure.com"", 8883,60)
print(type(client.socket))
client.loop_start()
while True:
   client.publish(""test_topic"", ""{id=123}"", qos=1)
   time.sleep(0.1)
```
   
Can some one help me here    
   
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE3V7,paho.mqtt.python,1880323451,734,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T03:01:54Z,2024-01-08T03:01:54Z,"I believe you wish to change `server_hostname` within `wrap_socket`; unfortunately this is currently fixed in [the code (`reconnect` function)](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L1055):

```
                # Try with server_hostname, even it's not supported in certain scenarios
                sock = self._ssl_context.wrap_socket(
                    sock,
                    server_hostname=self._host,
                    do_handshake_on_connect=False,
                )
```

One option would be to do this via DNS (e.g. a CNAME for `example1.test.com`, using a domain you own!, pointing to `istio-test.westus2.cloudapp.azure.com`); that should work as-is.

Alternatively see the [subclass](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub-class.py) example. Using this technique you can override `reconnect()` and configure the `server_hostname` as you require.

As this would seem to be a fairly rare requirement I'm going to leave it there; please let us know if that is useful or you believe modifications to the library are needed (given this was logged sometime ago I'd guess you may already have a solution).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wE3V7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GgXzk,paho.mqtt.python,2256633060,734,NA,bram-tv,112850275,,,NA,2024-07-29T18:31:08Z,2024-07-29T18:31:08Z,"> As this would seem to be a fairly rare requirement I'm going to leave it there; please let us know if that is useful or you believe modifications to the library are needed (given this was logged sometime ago I'd guess you may already have a solution).

Just adding my 2 cents to this issue:  I was looking for the same option (specify the `server_hostname` of the SSL context): our MQTT broker has several servers all of which are behind a single record (i.e. DNS returns multiple A records for the same name) and we needed to verify that all IPs are working as expected [in our case it was mainly to verify the firewall in front of our clients].

The work-around we applied:
```python
import paho.mqtt.client as mqtt
import ssl
import socket as _socket

ip = ""127.2.3.4""
port = 8883
host = ""foo.example.com""
client_id = ""foo""

class ServerNameClient(mqtt.Client):
    def _ssl_wrap_socket(self, tcp_sock: _socket.socket) -> ssl.SSLSocket:
        orig_host = self._host
        self._host = host
        res = super()._ssl_wrap_socket(tcp_sock)
        self._host = orig_host
        return res

mc = ServerNameClient(mqtt.CallbackAPIVersion.VERSION2, client_id=client_id)
...
mc.connect(ip, port=port)
mc.loop_forever()
```

In other threads regarding SNI (i.e. https://github.com/eclipse/paho.mqtt.python/issues/133#issuecomment-269967646) there was some fear that adding it may confuse users but that might be avoidable if the `server_hostanme` was an option of `Client.tls_set`, i.e. that one could do something like:
```
mc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=client_id)
mc.tls_set(server_hostname=""foo.example.com"")
mc.connect(ip, port=port)
mc.loop_forever()
```
and that `_ssl_wrap_socket` would then prefer it (*foo.example.com*) over the *host* param of `connect`
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GgXzk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/734,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ctMZd,paho.mqtt.python,2629092957,734,NA,j4k0xb,55899582,,,NA,2025-02-01T20:05:45Z,2025-02-01T20:05:45Z,"> but that might be avoidable if the server_hostname was an option of Client.tls_set

Agreed, it's pretty straight forward with a `servername` parameter in [Node.js TLS](https://nodejs.org/api/tls.html#tlsconnectoptions-callback) and [mqtt.js](https://github.com/mqttjs/MQTT.js):

```js
mqtt.connect({
    protocol: ""mqtts"",
    hostname,
    port: 8883,
    username,
    password,
    servername: deviceID, // <-- SNI
    ca: caCert,
});
```

Please add this feature, as registering a domain or modifying `/etc/hosts` is not an option for my use case:
- connecting to third party devices via IP
- for proper certificate validation, I have to set the SNI to the device's serial number

It's also a matter of security: there are *[a lot](https://github.com/search?q=%2F%5B%22%27%5Dbblp%5B%22%27%5D%2F+AND+tls+lang%3APython+&type=code&rgh-link-date=2025-02-01T20%3A05%3A45.000Z)* of open source projects that disable TLS validations because it's too difficult to get it working.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ctMZd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/736,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/736,paho.mqtt.python,1805748304,736,Setting of cipher suite string happens too late in `Client.set_tls`,agalauner-r7,11294920,Andreas Galauner,,OPEN,2023-07-15T00:17:37Z,2024-01-08T04:09:30Z,"Hi,

I need to connect to an MQTT broker that is not under my control and might not be configured so that modern TLS security standards are met.

I need to use TLS client cert authentication with an RSA key length of only 1024 bits. OpenSSL is everything but happy about this when trying to connect:

```
$ ./subscribe.py               
Traceback (most recent call last):
  File ""/home/andy/Documents/foo/subscribe.py"", line 39, in <module>
    main()
  File ""/home/andy/Documents/foo/subscribe.py"", line 23, in main
    client.tls_set(
  File ""/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 796, in tls_set
    context.load_cert_chain(certfile, keyfile, keyfile_password)
ssl.SSLError: [SSL: EE_KEY_TOO_SMALL] ee key too small (_ssl.c:3900)
```

I encountered a similar issue with `mosquitto_sub` where it complained about the wrong outdated set of ciphers being used. To fix it there, I passed the cipher suite `DEFAULT@SECLEVEL=0` to it, and OpenSSL finally established a TLS session.

I tried doing the same when using paho:

```
client.tls_set(
        ca_certs=""server_chain.cert"",
        certfile=""cert.txt"",
        keyfile=""key.txt"",
        keyfile_password=""lololololol"",
        ciphers=""DEFAULT@SECLEVEL=0"",
        tls_version=ssl.PROTOCOL_TLSv1_2
    )
```

However, the error remained. After checking the code where all of this is handled, I found out that the keys are loaded first (which caused the error) and THEN the cipher suite is set: https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L794-L809

After moving lines 808-809 directly below line 792 where the context is created, the issue was fixed.

However, I don't know if this has any other side-effects like not being able to specify all cipher suites at this time, otherwise I already would've created a PR. Is there a reason why the call to this function happens so late? If not, moving these lines up might be in order to fix issues like this.

Again, I know that I should update my key length and reconfigure my MQTT broker. The issue is, it is not my server, so I can't. I need to connect to this broker, no matter if it's secure right now or not, so being able to overwrite the default behaviour using the cipher suite string is the only way I can connect to it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/736/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/736,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5hjjBp,paho.mqtt.python,1636708457,736,NA,mhils,1019198,Maximilian Hils,github@hi.ls,NA,2023-07-15T08:23:27Z,2023-07-15T08:23:27Z,"> However, I don't know if this has any other side-effects like not being able to specify all cipher suites at this time, otherwise I already would've created a PR. Is there a reason why the call to this function happens so late? If not, moving these lines up might be in order to fix issues like this.

This should be perfectly fine. We do set ciphers first in @mitmproxy, and I have never heard of anyone report problems from doing so in pyOpenSSL either (where I am one of the maintainers). :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5hjjBp/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,paho.mqtt.python,1829726587,737,subscriptions stop receiving data,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,OPEN,2023-07-31T17:40:25Z,2024-02-26T12:49:49Z,"Struggling with a problem for over 2 months now, debugging and changing code to overcome my problem but so far, without succes. So that is why I post it here
Setting: I am running a Python (3.9.2) application on a RPi 4B 2GB running Debian GNU/Linux 11 (bullseye) Linux aarch64 V6.1.21-v8+ where I use the the package paho-mqtt V1.6.1.
My mosquitto server runs on a Windows PC.
I have 6 devices publishing every (60 sec + random(60 sec)) some data. Graphing this data with Grafana+Telegraf (subscribing to topics) works like a charm. Not data lost.
My python app, connects and subscribes to these topics using eg : mqtt_subscribe(co2_topicbase + ""/#"") to capture all (at the moment 5) CO2 sensors sending data. I use # as co2 sensors might come and go ans so I do not need to change application at every change in sensors.
(NB: other sensor is a waterflow sensor but setup is the same).
So I config paho client is this way: config instance with ID, clean_session = False, login, pw ; setting will_set, setting on_ ... callbacks, loop_start(), connect.
On_connect, I subscribe to topics. On_message I figure out which topic came in and store the data of payload in dictionary. I set a flag, data came in.
I have a inifinte while loop where I display some data and when flag is true, handle the data which include also being publish on the MQTT server but on another topic.
This will work for 1 hour, 5 hours, 12 hours untill suddenly, the app stops receiving data. There is no disconnection from the MQTT server as I see no notification of disconnection in my log from on_disconnect.
My last program change was to monitor the time between 2 data arrivals. When over 5 minutes, I do a reconnect to the server But even this will not cure the problem. Also I do a reboot every midnight (to clear memory in case of any memory leak) but also this brings no improvement.
What am I doing wrong? What could be the cause of this 'behaviour'? Are there any settings I need to do?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5i4TqQ,paho.mqtt.python,1658927760,737,NA,CamDavidsonPilon,884032,Cameron Davidson-Pilon,cam.davidson.pilon@gmail.com,NA,2023-07-31T18:25:45Z,2023-07-31T18:25:45Z,"An idea: is it possible that your `on_message` is freezing up / failing and blocking? How simple is the `on_message` callback? 
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5i4TqQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5jW-EK,paho.mqtt.python,1666965770,737,NA,skorokithakis,23648,Stavros Korokithakis,,NA,2023-08-06T20:55:17Z,2023-08-06T20:55:17Z,"I have exactly the same problem, on every one of my services. They will eventually stop receiving data without any sign of disconnection.

Eventually I made one log, and this is what the `on_log` function prints (`userdata, level, buf`, in order):

```
None 16 Sending PINGREQ
None 16 Received PINGRESP
None 16 Sending PINGREQ
None 16 Received PINGRESP
None 16 Sending PINGREQ
None 16 Received PINGRESP
None 16 Sending PINGREQ
None 16 Received PINGRESP
None 16 Sending PINGREQ
None 16 Received PINGRESP
```

It's still receiving PINGREQ/PINGRESP, but no MQTT messages at all.

A thought occurred just now: When MQTT reconnects, does it resubscribe? I just noticed that the subscription message is in `on_connect` of one of my apps, but in the constructor of the other.

I've had this issue for _years_ now.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5jW-EK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFBVf,paho.mqtt.python,1880364383,737,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:18:12Z,2024-01-08T04:18:12Z,"""MQTT reconnects, does it resubscribe""

The subscription may be part of the session state (if various criteria, e.g. clean_session, are met; these differ between v3 and v5); however even in this case it may not always survive (e.g. broker not storing session to disk). This is why we recommend subscribing in `on_connect` (as per the [examples](https://github.com/eclipse/paho.mqtt.python#getting-started)). 

@MarcEngrie are you still seeing this issue with the current release? Is there any chance you could share some of your code (or [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger)). Broker logs (`log_type all`) for around the time the messages stop would also be very useful. Unfortunately this kind of issue can be very difficult to track down and the more info you can provide the better (it's quite possible that one of the fixes in the upcoming release will help).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFBVf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51DAVn,paho.mqtt.python,1963722087,737,NA,danclimasevschi,22586810,,,NA,2024-02-26T09:55:07Z,2024-02-26T09:55:07Z,"@MarcEngrie @skorokithakis what version of paho-mqtt are you using?

I am also having the same randomly occurring problem, but apparently it happens less often in `1.5.0` than in `1.6.1`.

FWIW: It happens only on topics with ""higher"" traffic, while other subscriptions continue to receive data as normal.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51DAVn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51D_9s,paho.mqtt.python,1963982700,737,NA,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,NA,2024-02-26T12:01:07Z,2024-02-26T12:01:07Z,"> @MarcEngrie @skorokithakis what version of paho-mqtt are you using?
> 
> I am also having the same randomly occurring problem, but apparently it happens less often in `1.5.0` than in `1.6.1`.
> 
> FWIW: It happens only on topics with ""higher"" traffic, while other subscriptions continue to receive data as normal.
@skorokithakis
using 1.6.1 but downgrading is currently not an option. 
How do you define 'higher traffic'.  FYI: I 'only' post data (5 topics) every minute. I do not consider this a 'high traffic'.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51D_9s/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51EAOv,paho.mqtt.python,1963983791,737,NA,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,NA,2024-02-26T12:01:38Z,2024-02-26T12:01:38Z,"@skorokithakis
using 1.6.1 but downgrading is currently not an option.
How do you define 'higher traffic'. FYI: I 'only' post data (5 topics) every minute. I do not consider this a 'high traffic'.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51EAOv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/737,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51EWLc,paho.mqtt.python,1964073692,737,NA,danclimasevschi,22586810,,,NA,2024-02-26T12:49:47Z,2024-02-26T12:49:47Z,"@skorokithakis tens, if not hundreds per second","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51EWLc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/738,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/738,paho.mqtt.python,1833519559,738,"Memory leak issue? In a stable program, using the client generates crashes...",coutiere,97437711,,,CLOSED,2023-08-02T16:26:49Z,2024-07-17T23:45:18Z,"[I'm pretty new to MQTT so I may use wrong terms. Sorry].
I am setting up a project where sensors send short data to a MQTT broker.

The data are received by a software (""Dashboard"") written in Python. The Dashboard has a unique Paho client to receive data (and send sometimes), and it updates the interface with colors depending on the alert level. I use QT5 on Linux / Raspberry Pi OS, and QT6 on Win10, with similar issues.

Basically, when the Dashboard receives a message, the ""on_message"" procedure reads the data and sends them to ""dealWithTheInfo"" procedure. This one looks into an array of QPushButtons, selects the relevant one, and updates its stylesheet with button.setStyleSheet(""backgound-color: red""). It's pretty straightforward, and I paid attention to the thread issues of QT.

I **randomly** get errors during the procedure where I modify the stylesheet:
- the same MQTT message sometimes works well, sometimes generates a bug
- the bug is sometimes ""Could not parse stylesheet of object QPushButton""  (no crash), sometimes ""malloc(): unsorted double linked list corrupted"" (when looking into the array?), sometimes ""free(): double free detected in tcache 2"". It often also crashes without any explanation (""segmentation fault"", or ""abort""). Also, it sometimes modifies the appearance of most buttons at once, putting ""transparent"" instead of ""red"".

When the Dashboard  generates MQTT messages by itself, and sends them, it receives them back (same hash), sends the data to ""dealWithTheInfo"", and it sometimes falls into the bugs.

When the Dashboard  generates the messages and sends them directly to ""dealWithTheInfo"", the software is stable.

Conclusion: the paho client is the source of the trouble.

I absolutely don't know how to investigate further. I strongly suspect a memory leak, but I understand I give very few clues to debug it...

Does this ring a bell to anyone?
Thanks for any idea!
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/738/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/738,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmwb_,paho.mqtt.python,1872430847,738,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-30T02:28:14Z,2023-12-30T02:28:14Z,">understand I give very few clues to debug it

Unfortunately I think you are right and it's unlikely that we can do anything with the info presented. If you are able to generate a [minimal, reproducible, example](https://stackoverflow.com/help/minimal-reproducible-example) then that would really help us understand (if we cannot replicate an issue then it's a lot harder to understand/fix it - currently the issue may be in your code).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmwb_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/738,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM7MI,paho.mqtt.python,2234757896,738,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:45:17Z,2024-07-17T23:45:17Z,"I'm going to close this due wo inactivity, the fact there have been new releases in the interim, and an inability to replicate the issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM7MI/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/739,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/739,paho.mqtt.python,1835012695,739,publish.single and publish.multiple lack MQTTv5 properties,skinkie,502394,Stefan de Konink,stefan@konink.de,OPEN,2023-08-03T12:56:17Z,2024-01-08T07:19:20Z,"https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/publish.py#L180

vs 

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L1199

As an user I would like to use the inline sending option with the ability to set message retainment.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/739/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/740,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/740,paho.mqtt.python,1842557775,740,ssl tls protocol googler issue,anirbanchakrabarty,43024964,,,CLOSED,2023-08-09T06:12:25Z,2023-12-24T02:06:52Z,"hi am using googler but fetcing no results. heres the debug report. need help.highly appreciated. googler --debug [DEBUG] googler version 4.3.2 [DEBUG] Python version 3.11.2 [DEBUG] Platform: Linux-6.2.9-300.fc38.x86_64-x86_64-with-glibc2.37 /usr/bin/googler:3496: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead. current_version = Version(VERSION) /usr/bin/googler:3497: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead. latest_version = Version(latest_version_str) [DEBUG] Connecting to new host [www.google.com](http://www.google.com/) [DEBUG] Opened socket to 142.250.193.132:443 /usr/bin/googler:1611: DeprecationWarning: ssl.PROTOCOL_TLS is deprecated ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS) [DEBUG] new_connection completed in 0.164s Please initiate a query. googler (? for help)

while using googler results not displayed.here's the output:

[root@fedora googler-master]# googler [www.looklinux.xom](http://www.looklinux.xom/) /usr/bin/googler:1611: DeprecationWarning: ssl.PROTOCOL_TLS is deprecated ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS) No results. If you believe this is a bug, please review https://git.io/googler-no-results before submitting a bug report.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/740/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/740,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1X8v,paho.mqtt.python,1742044975,740,NA,gdt,515284,Greg Troxel,,NA,2023-10-01T11:07:01Z,2023-10-01T11:07:01Z,"Looks like you filed a bug in the wrong repo.   I suggest closing and addressing this with googler, whatever that is.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1X8v/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/741,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/741,paho.mqtt.python,1846466874,741,Publishing Message fails if Program exits directly after,JannikWilhelm,32778935,JannikWilhelm,,CLOSED,2023-08-11T09:04:49Z,2023-12-24T01:11:21Z,"Calling client.publish(topic, payload, qos=0) results in the message being handled as sent (client.on_publish function is executed)
But if the python script ends after the publish call, the message does not get sent.
Adding a time.sleep(1) after client.publish(...)  consistently sends the message.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/741/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/741,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZqY,paho.mqtt.python,1868405400,741,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:11:21Z,2023-12-24T01:11:21Z,"If you want to publish a message and ensure it's left the client before exiting then use [`single`](https://github.com/eclipse/paho.mqtt.python#single). The library queues publish requests so 'Publish` is likely to return before the message is actually sent.

Closing this for now - if you still have an issue then feel free to reopen but please provide a full example.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXZqY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/742,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/742,paho.mqtt.python,1861534181,742,Question: How to use return in on_message,rdrigos,95193036,Rafael Drigo,,CLOSED,2023-08-22T14:01:32Z,2023-08-24T19:11:30Z,"I'm developing a function and I needed to access the values returned from paho's callback: 'on_message', as it is an automatic and recursive method when a message arrives. How could I add a return to work with the message?

Example:
```
def receive_payload(
     client: mqtt.Client,
     userdata: dict[str, Any] | None,
     message: mqtt.MQTTMessage,
) -> dict[str, Any]:
     payload_message: dict[str, Any] = json.loads(message.payload.decode())
     payload_topic: str = message.topic

     return {
         'payloadTopic': payload_topic,
         'payloadMessage': payload_message,
     }

client: mqtt.Client = mqtt.Client()
client.on_message = receive_payload
```

How do I access the return value of the 'receive_payload' function?
Because I couldn't just call it receive_payload(), because I would need to pass the arguments and it wouldn't work correctly, because it's not in the on_message callback","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/742/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/742,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5koVj4,paho.mqtt.python,1688295672,742,NA,FabricioMoraes-Dev,135630275,,,NA,2023-08-22T14:26:18Z,2023-08-22T14:26:18Z,"> I'm developing a function and I needed to access the values returned from paho's callback: 'on_message', as it is an automatic and recursive method when a message arrives. How could I add a return to work with the message?
> 
> Example:
> 
> ```
> def receive_payload(
>      client: mqtt.Client,
>      userdata: dict[str, Any] | None,
>      message: mqtt.MQTTMessage,
> ) -> dict[str, Any]:
>      payload_message: dict[str, Any] = json.loads(message.payload.decode())
>      payload_topic: str = message.topic
> 
>      return {
>          'payloadTopic': payload_topic,
>          'payloadMessage': payload_message,
>      }
> 
> client: mqtt.Client = mqtt.Client()
> client.on_message = receive_payload
> ```
> 
> How do I access the return value of the 'receive_payload' function? Because I couldn't just call it receive_payload(), because I would need to pass the arguments and it wouldn't work correctly, because it's not in the on_message callback

Tente usar a propriedade ""content"" para acessar o valor retornado da função. Segue abaixo um caso de uso. Não sei se irá funcionar no seu caso, mas é válido tentar!

```
def main(req: func.HttpRequest) -> func.HttpResponse:
    
    nome = req.params.get('nome')
    sobrenome = req.params.get('sobrenome')
    email = req.params.get('email')
    
    new_user =  create_user(email, nome, sobrenome)
    
    user_id = json.loads(new_user.content)[0][""id""]
    enrol_users(user_id)
    #userid = req.params.get(user_id)
    #func.HttpResponse(f'{new_user.content}',status_code=200),
    
    return func.HttpResponse(f'user_id = {user_id}',status_code=200)
  ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5koVj4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/742,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kpeKt,paho.mqtt.python,1688593069,742,NA,rdrigos,95193036,Rafael Drigo,,NA,2023-08-22T17:03:52Z,2023-08-22T17:03:52Z,"> > Estou desenvolvendo uma função e precisava acessar os valores retornados do callback do paho: 'on_message', pois é um método automático e recursivo quando chega uma mensagem. Como eu poderia adicionar um retorno ao trabalho com a mensagem?
> > Exemplo:
> > ```
> > def receive_payload(
> >      client: mqtt.Client,
> >      userdata: dict[str, Any] | None,
> >      message: mqtt.MQTTMessage,
> > ) -> dict[str, Any]:
> >      payload_message: dict[str, Any] = json.loads(message.payload.decode())
> >      payload_topic: str = message.topic
> > 
> >      return {
> >          'payloadTopic': payload_topic,
> >          'payloadMessage': payload_message,
> >      }
> > 
> > client: mqtt.Client = mqtt.Client()
> > client.on_message = receive_payload
> > ```
> > 
> > 
> >     
> >       
> >     
> > 
> >       
> >     
> > 
> >     
> >   
> > Como faço para acessar o valor de retorno da função 'receive_payload'? Pois não poderia simplesmente chamar de receive_payload(), pois precisaria passar os argumentos e não funcionaria corretamente, pois não está no callback on_message
> 
> Tente usar a propriedade ""content"" para acessar o valor retornado da função. Segue abaixo um caso de uso. Não sei se irá funcionar no seu caso, mas é válido tentar!
> 
> ```
> def main(req: func.HttpRequest) -> func.HttpResponse:
>     
>     nome = req.params.get('nome')
>     sobrenome = req.params.get('sobrenome')
>     email = req.params.get('email')
>     
>     new_user =  create_user(email, nome, sobrenome)
>     
>     user_id = json.loads(new_user.content)[0][""id""]
>     enrol_users(user_id)
>     #userid = req.params.get(user_id)
>     #func.HttpResponse(f'{new_user.content}',status_code=200),
>     
>     return func.HttpResponse(f'user_id = {user_id}',status_code=200)
>   
> ```

Obrigado, vou tentar executar esse solução! ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5kpeKt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/743,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/743,paho.mqtt.python,1877003427,743,Multiprocessing: publishing with qos2 hangs at the moment of sending PUBREL.,annt0,132999366,,,CLOSED,2023-09-01T08:39:22Z,2024-07-17T23:59:22Z,"I have extended `paho.mqtt.client.Client` in another custom class that I use in my program. The structure of my program is as follows:

Main thread with custom MQTT client c1.
-- Process 1 (daemon) with custom MQTT client c2.

c1 works correctly, but c2 is unable to send messages with qos2. I have tried two approaches:
- Inside the custom clients, I manually called the network loop in a thread (I created a `threading.Thread` instance that runs a while loop calling `loop()`).
- Inside the custom clients, I handled the network loop using `loop_start()` and `loop_stop()`.

In the first case, communication stops in c2 at the sending of PUBREC by the broker:
The call to PUBLISH by c2 is logged, I see the sending of PUBREC on the broker (Mosquitto), c2 receives PUBREC, but what I noticed while debugging your `client.py` is that something empties the `self._out_messages` dictionary, and therefore, the call to `self._send_pubrel(mid)` cannot be made.
In the second case, c2 successfully publishes the message, but it never arrives at the broker. 

With lower qos levels, everything works fine. c1 does not have these problems.

Could you tell me what could be causing this?
Thank you in advance!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/743/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/743,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFCmF,paho.mqtt.python,1880369541,743,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T04:27:21Z,2024-01-08T04:27:21Z,Apologies for the long delay. Unfortunately I think its going to be difficult to assist without seeing some of your code (there are too many variables here) are you able to provide a reproducible example? ([client logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) may also be useful).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wFCmF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/743,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNGmJ,paho.mqtt.python,2234804617,743,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:59:22Z,2024-07-17T23:59:22Z,Closing due to age/inactivity. If this is still an issue and you can provide logs then please feel free to reopen.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNGmJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/744,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/744,paho.mqtt.python,1878277448,744,Subscriber Identifier ,daniellelaforte,2535476,Danielle Laforte,,CLOSED,2023-09-02T02:31:09Z,2023-12-24T01:25:33Z,"Any plans to add the capability to set the subscriber identifier on subscribe like in MQTTX? 

My broker doesn't publish anything for it by default, and therefore the messages are not received with the error Subscriberidentifier must be between 1-26000 ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/744/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/744,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pSCph,paho.mqtt.python,1766337121,744,NA,petersilva,394117,Peter Silva,,NA,2023-10-17T12:40:21Z,2023-10-17T12:40:21Z,"Can you provide a pointer to the functionality you are referring to on MQTTX?
The string ""Subscriberidentifier"" is not present in the library. I don't think the message is being returned by paho-mqtt-python.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pSCph/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/744,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaGA,paho.mqtt.python,1868407168,744,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:25:33Z,2023-12-24T01:25:33Z,Closing this as there has been no response from OP to a request for clarification (tidying up open issues). ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaGA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/745,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/745,paho.mqtt.python,1889000934,745,How to connect with websockets on ports 443.,bnuzhouwei,17919741,ZhouWei,,CLOSED,2023-09-10T06:00:10Z,2023-12-24T01:23:38Z,"I has a broker that host mqtt server with websockets on https

connect:

```
broker = 'mybroker.com'
port = 443
client = mqtt_client.Client(client_id, transport=""websockets"")    
client.username_pw_set(username, password)
client.on_connect = on_connect
client.connect(broker, port)
```

got error:

```error
paho.mqtt.client.WebsocketConnectionError: WebSocket handshake error, connection not upgraded
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/745/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/745,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pR_J0,paho.mqtt.python,1766322804,745,NA,petersilva,394117,Peter Silva,,NA,2023-10-17T12:31:07Z,2023-10-17T12:31:07Z,"
You need to set up an SSL context, and supply that to connect()

code fragments from my application:

```
    def __sslClientSetup(self) -> int:
        """"""
          Initializse self.client SSL context, must be called after self.client is instantiated.
          return port number for connection.
      
        """"""
        if self.o['broker'].url.scheme[-1] == 's':
            port = 8883
            logger.info('tlsRigour: %s' % self.o['tlsRigour'])
            self.o['tlsRigour'] = self.o['tlsRigour'].lower()
            if self.o['tlsRigour'] == 'lax':
                self.tlsctx = ssl.create_default_context()
                self.tlsctx.check_hostname = False
                self.tlsctx.verify_mode = ssl.CERT_NONE

            elif self.o['tlsRigour'] == 'strict':
                self.tlsctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
                self.tlsctx.options |= ssl.OP_NO_TLSv1
                self.tlsctx.options |= ssl.OP_NO_TLSv1_1
                self.tlsctx.check_hostname = True
                self.tlsctx.verify_mode = ssl.CERT_REQUIRED
                self.tlsctx.load_default_certs()
                # TODO Find a way to reintroduce certificate revocation (CRL) in the future
                #  self.tlsctx.verify_flags = ssl.VERIFY_CRL_CHECK_CHAIN
                #  https://github.com/MetPX/sarracenia/issues/330
            elif self.o['tlsRigour'] == 'normal':
                self.tlsctx = ssl.create_default_context()
            else:
                self.logger.warning(
                    ""option tlsRigour must be one of:  lax, normal, strict"")
            self.client.tls_set_context(self.tlsctx)
        else:
            port = 1883

        if self.o['broker'].url.port:
            port = self.o['broker'].url.port
        return port
```


then in connect:

```
  self.client.connect( self.o['broker'].url.hostname, port=self.__sslClientSetup(), \
                           clean_start=False, properties=props )
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pR_J0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/745,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaC4,paho.mqtt.python,1868406968,745,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-24T01:23:38Z,2023-12-24T01:23:38Z,Closing this as it looks like the question has been answered.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXaC4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/746,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/746,paho.mqtt.python,1894877670,746,Connection issues in TLS/SSL based publisher-subscriber implementation for Mosquitto,akshay-tech-prescient,118802432,,,CLOSED,2023-09-13T16:30:16Z,2023-10-20T14:00:34Z,"I tried implementing TLS/SSL based publisher-subscriber implementation for Mosquitto (using paho-mqtt) but was facing connection issues in the implementation.

After running publisher script multiple times I observed that first n messages out of 10 (generally saw 1<=n<=5) get successfully published after which the connection gets lost and rest of the messages fail to publish.

When running subsciber script, I was getting Connection refused - not authorised according to [docs](https://github.com/eclipse/paho.mqtt.python#on_connect) (since I was getting rc=5 in `on_connect(...)`)

Publisher script:
```
import time
import paho.mqtt.client as mqtt

messaging_protocol = 'MQTTS'
ca_file = '/home/tp/mosquitto_poc/steves-internet/ca.crt'
broker_address = 'localhost'
topic = 'topic1'

client = mqtt.Client('publisher-client')

if messaging_protocol == 'MQTTS':
    port = 8883
    client.tls_set(ca_file)
else:
    # When messaging_protocol will be 'MQTT'
    port = 1883

client.connect(broker_address, port)

for i in range(10):
    payload = f'Message no. {i+1}'
    print(f'Attempting to publish message: `{payload}`')
    mqtt_msg_info = client.publish(topic, payload)
    try:
        is_published = mqtt_msg_info.is_published()
    except RuntimeError as e:
        print(f'Error occured: `{str(e)}`. Rc value: {mqtt_msg_info.rc}.', end='\n\n')
    except ValueError as e:
        print(f'Error occured: `{str(e)}`. Rc value: {mqtt_msg_info.rc}. Error string: `{mqtt.error_string(mqtt_msg_info.rc)}`', end='\n\n')
    else:
        print(f'Message published: {is_published}. Rc value: {mqtt_msg_info.rc}. Error string: `{mqtt.error_string(mqtt_msg_info.rc)}`', end='\n\n')
    finally:
        time.sleep(0.005)
```

Sample Output on Publisher script run:
```
Attempting to publish message: `Message no. 1`
Message published: True. Rc value: 0. Error string: `No error.`

Attempting to publish message: `Message no. 2`
Message published: True. Rc value: 0. Error string: `No error.`

Attempting to publish message: `Message no. 3`
Message published: True. Rc value: 0. Error string: `No error.`

Attempting to publish message: `Message no. 4`
Error occured: `Message publish failed: The connection was lost.`. Rc value: 7.

Attempting to publish message: `Message no. 5`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.

Attempting to publish message: `Message no. 6`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.

Attempting to publish message: `Message no. 7`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.

Attempting to publish message: `Message no. 8`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.

Attempting to publish message: `Message no. 9`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.

Attempting to publish message: `Message no. 10`
Error occured: `Message publish failed: The client is not currently connected.`. Rc value: 4.
```


Subscriber script:
```
import paho.mqtt.client as mqtt

messaging_protocol = 'MQTTS'
ca_file = '/home/tp/mosquitto_poc/steves-internet/ca.crt'
broker_address = 'localhost'
topic = 'topic1'


def on_connect(client, userdata, flags, rc):
    print(f'Connected with result code {str(rc)}')
    result, _ = client.subscribe(topic)
    print(f'Attempting to subscribe topic: `{topic}`. Result value: {result}. Error string: `{mqtt.error_string(result)}`')


def on_message(client, userdata, msg):
    print(f'Received message: `{msg.payload}` on topic: {msg.topic}')


def on_disconnect(client, userdata, rc):
    print(f'Client disconnected. Rc value: {rc}. Error string: `{mqtt.error_string(rc)}`', end='\n\n')


client = mqtt.Client('subscriber-client')

if messaging_protocol == 'MQTTS':
    port = 8883
    client.tls_set(ca_file)
else:
    # When messaging_protocol will be 'MQTT'
    port = 1883

client.on_connect = on_connect
client.on_message = on_message
client.on_disconnect = on_disconnect

client.connect(broker_address, port)

client.loop_forever()
```

Output on Subscriber script run:
```
Connected with result code 5
Attempting to subscribe topic: `topic1`. Result value: 0. Error string: `No error.`
Client disconnected. Rc value: 5. Error string: `The connection was refused.`

Connected with result code 5
Attempting to subscribe topic: `topic1`. Result value: 0. Error string: `No error.`
Client disconnected. Rc value: 5. Error string: `The connection was refused.`

Connected with result code 5
Attempting to subscribe topic: `topic1`. Result value: 0. Error string: `No error.`
Client disconnected. Rc value: 5. Error string: `The connection was refused.`

Connected with result code 5
Attempting to subscribe topic: `topic1`. Result value: 0. Error string: `No error.`
Client disconnected. Rc value: 5. Error string: `The connection was refused.`

Connected with result code 5
Attempting to subscribe topic: `topic1`. Result value: 0. Error string: `No error.`
Client disconnected. Rc value: 5. Error string: `The connection was refused.`
```

Is this a (known) issue in paho-mqtt?
If not, I request you to please help me in debugging this TLS/SSL based pub-sub implementation. Thanks in advance for any advice or help.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/746/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/746,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1ZBR,paho.mqtt.python,1742049361,746,NA,gdt,515284,Greg Troxel,,NA,2023-10-01T11:24:51Z,2023-10-01T11:24:51Z,"It is not a known issue.   I run a script that publishes a message once per minute and runs for months.  You need to do the usual logs on both ends, tcdpump, ktrace/ktruss or equivalent, etc.  Also put in a delay and see if that changes things.   (I'm not sure of the right venue for getting help on this, but issues doesn't seem right to me.)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5n1ZBR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/746,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pqrJd,paho.mqtt.python,1772794461,746,NA,akshay-tech-prescient,118802432,,,NA,2023-10-20T14:00:12Z,2023-10-20T14:00:12Z,"> It is not a known issue. I run a script that publishes a message once per minute and runs for months. You need to do the usual logs on both ends, tcdpump, ktrace/ktruss or equivalent, etc. Also put in a delay and see if that changes things. (I'm not sure of the right venue for getting help on this, but issues doesn't seem right to me.)

Thanks for the reply. I was able to get the implementation working correctly by making a change in mosquitto configuration. So, this is indeed not an issue as you rightly pointed. Hence, closing this.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pqrJd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/747,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/747,paho.mqtt.python,1896178159,747,client.loop_forever() causes a crash,fahadalisarwar1,32795677,Fahad,,CLOSED,2023-09-14T09:44:44Z,2023-12-06T23:31:32Z,"here is my code. 
```
mqttc = mqtt.Client()
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.username_pw_set(""fahad"", ""fahad"")
rc = mqttc.connect(""192.168.2.65"", 1883, 60)
print(rc)
mqttc.subscribe(topics[0], qos=1)
mqttc.publish(topics[1], ""off"", qos=1, retain=True)
print(""okkkk"")
mqttc.loop_forever()

```
As soon as it reaches the lines client.loop_forever(), it crashes with following code. 
```
0
okkkk
Traceback (most recent call last):
  File ""/home/h2gremm/mqtt-app/main.py"", line 37, in <module>
    mqttc.loop_forever()
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
         ^^^^^^^^^^^^^^^^^^^
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 1164, in _loop
    rc = self.loop_read()
         ^^^^^^^^^^^^^^^^
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 1556, in loop_read
    rc = self._packet_read()
         ^^^^^^^^^^^^^^^^^^^
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 2439, in _packet_read
    rc = self._packet_handle()
         ^^^^^^^^^^^^^^^^^^^^^
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 3039, in _packet_handle
    return self._handle_connack()
           ^^^^^^^^^^^^^^^^^^^^^^
  File ""/home/h2gremm/mqtt-app/venv/lib/python3.11/site-packages/paho/mqtt/client.py"", line 3138, in _handle_connack
    on_connect(
TypeError: on_connect() missing 1 required positional argument: 'return_code'
```
Can please somebody tell me the reason. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/747/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/747,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pSEO0,paho.mqtt.python,1766343604,747,NA,petersilva,394117,Peter Silva,,NA,2023-10-17T12:43:44Z,2023-10-17T12:43:44Z,"It's telling you the reason:
```

TypeError: on_connect() missing 1 required positional argument: 'return_code'

```

your on_connect() function (which you didn't include) doesn't have the right number of parameters.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5pSEO0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/747,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t5v-o,paho.mqtt.python,1843855272,747,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-06T23:31:31Z,2023-12-06T23:31:31Z,Closing this as Peters comment looks good and there has been no activity since. Please feel free to reopen if you are still having issues.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t5v-o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748,paho.mqtt.python,1901188750,748,Publishing multiple messages simultaneously fail,lu-maca,65252677,lucamacavero,,CLOSED,2023-09-18T15:24:36Z,2024-07-17T23:58:36Z,"Hi,

I'm trying to run a simple publisher-subscriber example but a really weird behaviour happens:

```python
# publisher.py
------------------------------------------
import paho.mqtt.client as mqtt

client = mqtt.Client()
client.connect(""localhost"",port=1883)

client.publish(""mtq40_1"", b""\x01"")
client.publish(""mtq40_2"", b""\x01"")
client.publish(""mtq40_3"", b""\x01"")
client.publish(""mtq40_4"", b""\x01"")
client.publish(""rw250_1"", b""\x01"")
client.publish(""rw250_2"", b""\x01"")
client.publish(""rw250_3"", b""\x01"") 
client.publish(""rw250_4"", b""\x01"")  

# subscriber.py
------------------------------------------
import paho.mqtt.client as mqtt

client = mqtt.Client()

def _initialize(connection_timeout=100):
    def on_connect(client, userdata, flags, rc):
        # check if the connection receives a CONNACK response from the server
        if rc != 0:
            raise ConnectionRefusedError(""mqtt connection refused."")
        
        # subscribe to downlink
        client.subscribe(""mtq40_1"")
        client.subscribe(""mtq40_2"")
        client.subscribe(""mtq40_3"")
        client.subscribe(""mtq40_4"")
        client.subscribe(""rw250_1"")
        client.subscribe(""rw250_2"")
        client.subscribe(""rw250_3"")
        client.subscribe(""rw250_4"")
        
    def on_message(client, userdata, msg): 
        # add the sniffed message to the correct queue 
        print(msg.topic, msg.payload)

    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(host=""localhost"", port=1883)

_initialize()
client.loop_forever()
```
When I run `publisher.py`, the weird stuff happens:
```bash
# first run
mtq40_1 b'\x01'
mtq40_2 b'\x01'
mtq40_3 b'\x01'
mtq40_4 b'\x01'

# second run
mtq40_1 b'\x01'
mtq40_2 b'\x01'

# third run
mtq40_1 b'\x01'
mtq40_2 b'\x01'
mtq40_3 b'\x01'
mtq40_4 b'\x01'
```

It seems that the publisher is not sending messages correctly. When a `time.sleep(0.05)` is added between the publish operations, it works fine:
```bash
mtq40_1 b'\x01'
mtq40_2 b'\x01'
mtq40_3 b'\x01'
mtq40_4 b'\x01'
rw250_1 b'\x01'
rw250_2 b'\x01'
rw250_3 b'\x01'
rw250_4 b'\x01'
 
mtq40_1 b'\x01'
mtq40_2 b'\x01'
mtq40_3 b'\x01'
mtq40_4 b'\x01'
rw250_1 b'\x01'
rw250_2 b'\x01'
rw250_3 b'\x01'
rw250_4 b'\x01'
```

Why does this happens? Am I doing something wrong?

Thanks!
Luca","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5tSAKT,paho.mqtt.python,1833435795,748,NA,EngrealSun,55591636,,,NA,2023-11-30T09:55:47Z,2023-11-30T09:55:47Z,"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718099
The MQTT protocol allows discarding messages with a QoS equal to 0。
You can switch to a different MQTT broker or specify the QoS。
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5tSAKT/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wESsV,paho.mqtt.python,1880173333,748,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T21:11:15Z,2024-01-07T21:11:15Z,"The publisher client is not running. You never called loop/loop_start or loop_forever. It also seems you never wait for publisher to finish publishing (no disconnect, no even a arbitrary sleep). Call to publish isn't synchronous and don't wait to publish packet to be received by broken (which isn't possible in QoS=0).

Publish() will only submit packet to the TCP socket, and OS might no send them on network immediately. I'm not 100% sure, but I think that OS is allowed to discard not yet send data on socket close (which happen if you terminate the program).
That why adding some sleep (a sleep at the end of publisher.py is enough) ""solve"" your problem.
A fix should be to start the client (loop_forever) and disconnect + wait for disconnection before exiting.

A better solution is paho.mqtt.publish (https://github.com/eclipse/paho.mqtt.python#id3) which take care of all needs to send message.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wESsV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/748,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNF_U,paho.mqtt.python,2234802132,748,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:58:35Z,2024-07-17T23:58:35Z,Closing due to inactivity (and it looks like an answer has been provided).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNF_U/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/749,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/749,paho.mqtt.python,1909968575,749,How to cleanly disconnect without losing messages?,nneul,828492,Nathan Neulinger,,CLOSED,2023-09-23T18:59:06Z,2024-07-17T23:57:39Z,"The main doc page has this notation:

```
QoS 2 messages which have been received from the Server, but have not been completely acknowledged.

Since the client will blindly acknowledge any PUBCOMP (last message of a QoS 2 transaction), it won't hang but will lost this QoS 2 message.
```

Is there any example of how to do the equivalent of this pseudocode?

```
connect
loop_forever
send disconnect (in response to some event/change/external indication) - for testing, just assume a disconnect immediately after first message received. 
process any messages that we have received from server, but not yet processed with on_message
```

Essentially I just want to ""process anything pending in receive queue and then exit"". 

I have tried max_inflight_messages_set(), but that doesn't appear to change any behavior for received messages. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/749/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/749,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTGr,paho.mqtt.python,1879912875,749,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T01:57:23Z,2024-01-07T01:57:23Z,">process anything pending in receive queue and then exit

If I'm understanding you correctly then this is not something the MQTT protocol really supports (there is no way to ask the server to send all waiting messages and then disconnect). All you can really do is connect and wait until you believe you have all of the messages (possibly due to a timestamp within the message body, or timing out when, for example, no messages are received in a second).

`max_inflight_messages_set()` relates to outbound messages (and only relates to the connection between the client and the server).

If the above answers your question then please close off this issue, otherwise please provide further information re your requirements (but, perhaps, stackoverflow might be a better venue as this seems likely to be a protocol question rather than something specific to this library).
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDTGr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/749,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNFQv,paho.mqtt.python,2234799151,749,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:57:39Z,2024-07-17T23:57:39Z,Closing as I believe that this was a question which has been answered.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNFQv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,paho.mqtt.python,1920722821,750,SSL EOF leads to persistent non-delivery of messages,gdt,515284,Greg Troxel,,CLOSED,2023-10-01T11:45:16Z,2024-01-20T14:39:38Z,"I am using 1.6.1, NetBSD 9 amd64, python 3.10.  The broker is up-to-date mosquitto, on a remote NetBSD 9 amd64 system.  I am using 8883 with a real certificate, and generally everything works well.

I have a script which polls a UPS and publishes messages usually once a minute, but at intervals of up to 1s if something interesting has happened.  On that system, I took the WAN interface down, releasing the lease, removing addresses and default route, and `ifconfig down`, waited an hour and brought it back.   Obviously I won't have data in the meantime but I expect it to recover.

In the log (stdout/stderr) of the program I see (with the json shortened; there are actually 14 keys):

```
SUBMITTED time {'time': 1696117812.470824, 'runtime': 5940.0}
PUBLISHED 16075
SUBMITTED time {'time': 1696117873.4957478, 'runtime': 5940.0}
Exception in thread Thread-1 (_thread_main):
Traceback (most recent call last):
  File ""/usr/pkg/lib/python3.10/threading.py"", line 1016, in _bootstrap_inner
    self.run()
  File ""/usr/pkg/lib/python3.10/threading.py"", line 953, in run
    self._target(*self._args, **self._kwargs)
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3591, in _thread_main
    self.loop_forever(retry_first_connection=True)
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1756, in loop_forever
    rc = self._loop(timeout)
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1181, in _loop
    rc = self.loop_write()
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1577, in loop_write
    rc = self._packet_write()
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 2464, in _packet_write
    write_length = self._sock_send(
  File ""/usr/pkg/lib/python3.10/site-packages/paho/mqtt/client.py"", line 649, in _sock_send
    return self._sock.send(buf)
  File ""/usr/pkg/lib/python3.10/ssl.py"", line 1206, in send
    return self._sslobj.write(data)
ssl.SSLEOFError: EOF occurred in violation of protocol (_ssl.c:2426)
PUBLISHED 16076
SUBMITTED time {'time': 1696117934.524036, 'runtime': 5940.0}
SUBMITTED time {'time': 1696117994.8527699, 'runtime': 5940.0}
```

So the ""EOF"" looks like write failed.  Probably this is ""no route to host"".    However I don't get a disconnect callback.   And I did get a publish callback!  But surely the broker didn't get the message.
Then, future publish calls happen, with no exceptions.  But no publish callbacks.

Obviously I can write a watchdog to close/open if I don't get pubacks to python.

But it seems that the ssl error should be caught and the connection should be judged non-functional.   Or at least some later publish should cause failure and to close the connection.  The user program should not get an exception thrown other than in response to an API call and then only documented exceptions.

I don't think this is related to threading/locking, as the program only did one publish call, and without the network being down, runs for months.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHOSo,paho.mqtt.python,1746724008,750,NA,gdt,515284,Greg Troxel,,NA,2023-10-04T11:55:36Z,2023-10-04T11:55:36Z,"(I did write a watchdog, but calling close and then reopen did not result in messages flowing.)

Reading `client.py`, I see `_packet_write` calling `_sock_send` on line 2506.   A number of exceptions are caught, but there is no general catc, and obviously the one above is not caught.  It seems obvious that an exception that has not been considered carefully risks leaving the socket in a broken state, as happens to me.   And therefore that other exceptions should lead to the close/retry step.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHOSo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v3RrJ,paho.mqtt.python,1876761289,750,NA,warped-rudi,912371,Rüdiger Ihle,,NA,2024-01-04T09:19:54Z,2024-01-04T09:19:54Z,Are there any updates on this issue? I'm seeing it as well when the internet connection gets lost temporarily.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v3RrJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEQVC,paho.mqtt.python,1880163650,750,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T20:32:48Z,2024-01-07T20:32:48Z,"It seems you are using loop_start, and some exception aren't correctly handled which cause the loop thread to crash. Once crashed no more processing it done.

I've made a PR (#797) which should fix your problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEQVC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wErL-,paho.mqtt.python,1880273662,750,NA,gdt,515284,Greg Troxel,,NA,2024-01-08T01:29:02Z,2024-01-08T01:29:02Z,"Thanks for addressing this.    I am in fact using `loop_start`.  Modulo variables to set my username/etc. and to enable TLS, the code is at https://github.com/merbanan/rtl_433/blob/master/examples/rtl_433_mqtt_relay.py  .   But, aside from this failure, everything else is fine.  I am grabbing the patch in the PR, will patch my system, and restart it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wErL-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/750,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wNKQj,paho.mqtt.python,1882498083,750,NA,warped-rudi,912371,Rüdiger Ihle,,NA,2024-01-09T06:46:57Z,2024-01-09T06:46:57Z,I gave this patch a try and first tests were positive. Thanks!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wNKQj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,paho.mqtt.python,1924468239,754,Attempting to connect results in SystemError('_PyEval_EvalFrameDefault returned NULL without setting an exception'),ConorHartin,102980823,,,OPEN,2023-10-03T16:06:48Z,2024-01-07T17:53:09Z,"I have two separate projects that I want to communicate using MQTT. I can start up one of them and have it connect a Paho MQTT client without errors, and even communicate with it on the command line. After that, when I try to call client.connect in the other repo, it results in the error shown above. There are sometimes when it doesn't fail on that, but then fails with the same message when attempting to subscribe to a topic. The version of paho I'm using is 1.6.1.

The specific line triggering the exception is line 649 of client.py, at the top of the function _sock_send:
return self._sock.send(buf)
If I put a debug breakpoint there can run ""self._sock.send(buf)"" in a console, it can return a value of 14 without problems, but then immediately afterward when I try to step into or over that line, the exception occurs.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHrhi,paho.mqtt.python,1746843746,754,NA,gdt,515284,Greg Troxel,,NA,2023-10-04T13:07:22Z,2023-10-04T13:07:22Z,"This seems like a host system python issue, and the internet says this is mysterious in general.   You didn't explain what OS/version, what version of python, or post the full backtrace.  Without that, I don't expect that anyone will be able to help you.  (And if it is windows or non-current  python, I won't be able to help...)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHrhi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHszi,paho.mqtt.python,1746848994,754,NA,ConorHartin,102980823,,,NA,2023-10-04T13:10:19Z,2023-10-04T13:10:19Z,"> This seems like a host system python issue, and the internet says this is mysterious in general. You didn't explain what OS/version, what version of python, or post the full backtrace. Without that, I don't expect that anyone will be able to help you. (And if it is windows or non-current python, I won't be able to help...)

It is indeed Windows. The version of Python is 3.10.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oHszi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oKH-8,paho.mqtt.python,1747484604,754,NA,ConorHartin,102980823,,,NA,2023-10-04T19:10:52Z,2023-10-04T19:10:52Z,"Here is the traceback:
Traceback (most recent call last):
  File ""C:\Users\<MyName>\<MyProjectFolder>\<my-project>\controllers\polling.py"", line 432, in EthernetAdapter
    client.connect(other_repo_name if ENV == ""production"" else ""localhost"", 1883, 60),
  File ""C:\Users\<MyName>\AppData\Local\pypoetry\Cache\virtualenvs\api-ZOmfCtpL-py3.10\lib\site-packages\paho\mqtt\client.py"", line 914, in connect
    return self.reconnect()
  File ""C:\Users\<MyName>\AppData\Local\pypoetry\Cache\virtualenvs\api-ZOmfCtpL-py3.10\lib\site-packages\paho\mqtt\client.py"", line 1088, in reconnect
    return self._send_connect(self._keepalive)
  File ""C:\Users\<MyName>\AppData\Local\pypoetry\Cache\virtualenvs\api-ZOmfCtpL-py3.10\lib\site-packages\paho\mqtt\client.py"", line 2819, in _send_connect
    return self._packet_queue(command, packet, 0, 0)
  File ""C:\Users\<MyName>\AppData\Local\pypoetry\Cache\virtualenvs\api-ZOmfCtpL-py3.10\lib\site-packages\paho\mqtt\client.py"", line 3016, in _packet_queue
    return self.loop_write()
  File ""C:\Users\<MyName>\AppData\Local\pypoetry\Cache\virtualenvs\api-ZOmfCtpL-py3.10\lib\site-packages\paho\mqtt\client.py"", line 1577, in loop_write
    rc = self._packet_write()
SystemError: _PyEval_EvalFrameDefault returned NULL without setting an exception
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oKH-8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oLF6k,paho.mqtt.python,1747738276,754,NA,gdt,515284,Greg Troxel,,NA,2023-10-04T22:32:20Z,2023-10-04T22:32:20Z,I don't know what to make of that.  It could be a python bug.   You might try installing 3.11 and starting out with a fresh venv.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oLF6k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oWvC_,paho.mqtt.python,1750790335,754,NA,ConorHartin,102980823,,,NA,2023-10-06T14:36:51Z,2023-10-06T14:36:51Z,"> I don't know what to make of that. It could be a python bug. You might try installing 3.11 and starting out with a fresh venv.

I tried that and got the error described here, for which the recommended solution is... downgrade the version of Python:
https://stackoverflow.com/questions/64427613/error-loading-psycopg2-module-dll-load-failed-while-importing-psycopg-the-spe","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oWvC_/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oXF9K,paho.mqtt.python,1750884170,754,NA,gdt,515284,Greg Troxel,,NA,2023-10-06T15:20:32Z,2023-10-06T15:20:32Z,"I'm out of ideas -- but as I said, I have chosen to avoid understanding Windows....","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5oXF9K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p9MEv,paho.mqtt.python,1777647919,754,NA,ConorHartin,102980823,,,NA,2023-10-24T16:55:03Z,2023-10-24T16:55:03Z,"It seemed to pop up in debug mode, but only in one out of 2 different repos calling the same function with the exact same arguments. Disabling breakpoints prior to connecting/subscribing seemed to fix it for the one that was failing.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p9MEv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/754,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEG-S,paho.mqtt.python,1880125330,754,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T17:52:57Z,2024-01-07T17:52:57Z,"Do you have more details on when that happen ? It's Windows with Python 3.10.N ? Are you using SSL connection ? Websocket ? This only happen while debugging is enabled, which debugger ?

This seems more a Python/Debugger issue than paho bug. I don't think pure-Python code could be the cause of such error, I believe it require at least writing C extension.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEG-S/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/755,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/755,paho.mqtt.python,1928070500,755,about on_disconnect callback,ajo79,58769969,Amit Ravindra Joshi,,CLOSED,2023-10-05T11:35:49Z,2024-01-07T00:50:24Z,"I am using PyQt6 and paho mqtt in my application. I have written class MqttClient. 
in my main application i got the signal self.ConnectionStatus.emit(f""Subscribed"")
But I am not getting the signal  self.ConnectionStatus.emit(f""Disconnected"") when i call disconnect

```
import sys, time
import paho.mqtt.client as mqtt
from PyQt6.QtCore import QObject, pyqtSignal

class MqttClient(QObject):

    messageReceived = pyqtSignal(str)  # Signal to send the received message to the GUI
    ConnectionStatus = pyqtSignal(str)  # Signal to send connection error messages to the GUI
    
    def __init__(self, broker_host, topic):
        super().__init__()  # Call the base class's __init__ method
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.on_disconnect = self.on_disconnect  # Add on_disconnect callback
        self.broker_host = broker_host
        self.topic = topic
        
        print(""mqtt client: Init done "")

    def connect(self):
        try:
            self.client.connect(self.broker_host, 1883, 60)
            self.client.loop_start()
            print(""mqtt client: loop started "")
            self.ConnectionStatus.emit(f""Connected"")           
        except Exception as e:
            print(f""mqtt client: Connection error: {str(e)}"")
            self.ConnectionStatus.emit(f""error: {str(e)}"") 
            raise e  
            
    def on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            #print(""mqtt client: Connected to MQTT broker."")
            client.subscribe(self.topic)
            print(""mqtt client: Subscribed"")
            self.ConnectionStatus.emit(f""Subscribed"")
            
        else:
            #print(f""mqtt client: Failed to connect to MQTT broker. Return code: {rc}"")
            self.ConnectionStatus.emit(f""{rc}"")

    def on_disconnect(self, client, userdata, rc):
        if rc == 0:
            client.close()
            print(""mqtt client: Disconnected"")
        else:
            self.ConnectionStatus.emit(f""{rc}"")
        self.ConnectionStatus.emit(f""Disconnected"")

    def on_message(self, client, userdata, msg):
        current_value = msg.payload.decode()
        #print(""mqtt client: Received current value: "" + current_value)
        self.display_current_value(current_value)
        self.messageReceived.emit(current_value)  # Emit the signal with the received value

    def display_current_value(self, current_value):
        # Update your GUI to display the current value here
        # For example, update a label or text field
        print(""Displaying current value: "" + current_value)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/755/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/755,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t5vIx,paho.mqtt.python,1843851825,755,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-06T23:28:15Z,2023-12-06T23:28:15Z,"Can you please add a `print(""mqtt client: on_disconnect called"")` to the start of `on_disconnect` and confirm if this is output? (just want to narrow down the issue).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t5vIx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/755,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDPhC,paho.mqtt.python,1879898178,755,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-07T00:50:24Z,2024-01-07T00:50:24Z,I'm going to close this due to the lack of response to my request for further information; please feel free to reopen if you are able to provide the info.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDPhC/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/758,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/758,paho.mqtt.python,1954189133,758,Long Term Maintanability,r0kk,36562019,rokk,,CLOSED,2023-10-20T12:27:54Z,2023-10-26T12:33:54Z,"Hi, we are choosing new mqtt library, and my question is what are long/mid term plans for active support/maintenance of the project? Thank you very much.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/758/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/758,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p-og9,paho.mqtt.python,1778026557,758,NA,petersilva,394117,Peter Silva,,NA,2023-10-24T20:57:49Z,2023-10-24T20:57:49Z,"I´m not on the paho team, but reflecting what I have gathered from lurking for a little while:

Issues are meant to address defects in the code, or suggestions for improvements.
They are not discussions.  It would likely be better to close this issue and ask on the mailing list.

The actual devs seem to be unhappy that people are opening issues to ask questions, and may not answer on principle, which might send you the wrong signal.


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5p-og9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/758,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qKGdZ,paho.mqtt.python,1781032793,758,NA,r0kk,36562019,rokk,,NA,2023-10-26T12:33:35Z,2023-10-26T12:33:35Z,"Hi, I completely agree. Thanks for pointers.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5qKGdZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/760,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/760,paho.mqtt.python,2003355769,760,AWS Quota Exceeded Infinite Retry,jamwest,60167328,,,CLOSED,2023-11-21T02:57:56Z,2024-07-17T23:43:37Z,"We run a number of IOT devices that use AWS IOT Core for the MQTT Message Broker.

An issue came up where we were using many GBs of cellular upload data per day!! Luckily this only occurred in specific cases but this could have been catastrophic for us.

The cause of this was AWS's quota limit of 128kb per message. AWS returns a DISCONNECT message when it receives a message exceeding the quota. The problem with this is that when you set the QOS to 1 and don't clean the session, paho.mqtt retries any unacknowledged messages on disconnect... So here we were sending messages that were larger than the limit every ~3 seconds infinitely (or until the devices were restarted).

We have found a quick solution which is to always check the size of the message _before_ trying to send the message, and to add this to the `on_disconnect` function:

```python
def on_disconnect(client, userdata, rc):
    if rc != 0:
        client._out_message_mutex.acquire()
        queue = client._out_messages
        queue.popitem(last=False)
        client._out_messages = queue
        client._out_message_mutex.release()
        print(""Removed failing message from queue"")

client = paho.Client(...)
client.on_disconnect = on_disconnect

...
```

Maybe there is a better way to handle this in the package? It is a gotcha with some potentially dire consequences.

Hopefully this helps someone in the future.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/760/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/760,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmnOj,paho.mqtt.python,1872393123,760,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-29T23:45:30Z,2023-12-29T23:45:30Z,"The only real mechanism that MQTT v3 provides to deal with invalid messages is to drop the connection. This means there is no real way for the client to tell what the issue is. 

>If a Server implementation does not authorize a PUBLISH to be performed by a Client; it has no way of informing that Client. It MUST either make a positive acknowledgement, according to the normal QoS rules, or close the Network Connection [MQTT-3.3.5-2].

MQTT V5 provides the ability to return acknowledgments with Reason Codes indicating that the message has not been accepted. Perhaps consider moving to V5 (I believe IoT Core supports this and would guess it will return an acknowledgment indicating ""Quota exceeded"").","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmnOj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/760,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM5vf,paho.mqtt.python,2234751967,760,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:43:37Z,2024-07-17T23:43:37Z,Closing this as I believe I have answered the question.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM5vf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/761,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/761,paho.mqtt.python,2012289960,761,Use of broker with JWT Auth (Disconnections rc 5),MacherelR,64424331,Rémy Macherel,,CLOSED,2023-11-27T13:36:23Z,2023-11-27T14:23:39Z,"Hi,

I'm currently using EMQX as MQTT broker, which is configured for JWT authentication. That allows me to secure the connection and handle claims in terms of users,etc. The Broker is configured such as the JWT token should be used as the password, the username is something else also verified. 

Now I previously used paho.mqtt already with a fully-opened (for testing purposes) broker (basic username/password, no auth) and had no problems handling connection/reconnection to the broker with the following callbacks :
~~~
def on_disconnect(self,client, userdata, rc):
        manager_logger.info(f""MQTT client disconnected from broker {MQTT_BROKER_URL} with result code : {rc}"")
        self.mqtt_connection_on = False
        reconnect_count, reconnect_delay = 0, FIRST_RECONNECT_DELAY
        while reconnect_count < MAX_RECONNECT_COUNT and rc != 0: # rc == 0 means clean disconnect
            manager_logger.info(f""Reconnecting in {reconnect_delay} seconds..."")
            time.sleep(reconnect_delay)
            try:
                client.connect(self.mqtt_broker_url, self.mqtt_broker_port)
                manager_logger.info(f""MQTT client reconnected to broker {MQTT_BROKER_URL}"")
                self.mqtt_connection_on = True
                return
            except Exception as e:
                manager_logger.error(f""Recinnnection failed: {e}, retrying..."")
            
            reconnect_delay *= RECONNECT_RATE
            reconnect_delay = min(reconnect_delay, MAX_RECONNECT_DELAY)
            reconnect_count += 1
        if rc == 0:
            manager_logger.info(f""App exited cleanly, exiting..."")
        else:
            manager_logger.info(f""Reconnection failed after {reconnect_count} attempts, exiting..."")
            self.run_flag = False

    def on_connect(self,mqttc, obj, flags, rc):
        # Resubscription needed 
        mqttc.subscribe(COMMAND_TOPIC,qos=1)
        self.mqtt_connection_on = True
        print(""rc: "" + str(rc))
 ~~~
This worked like charm and reconnection was handled and correctly set. 

Now since I've setup jwt auth for the broker, my client keeps disconnecting and then ""reconnecting"" (it passes the reconnection loop but broker doesn't show up any connection)... I declared and setup my client as follows 
~~~
self.mqtt_client = mqtt.Client(MQTT_CLIENT_ID, clean_session=False)
self.mqtt_client.username_pw_set(self.mqtt_username, self.mqtt_password)
self.mqtt_client.on_connect = self.on_connect
self.mqtt_client.on_message = self.on_message
self.mqtt_client.on_disconnect = self.on_disconnect
"""""" FOR Now, unused callbacks""""""
self.mqtt_client.on_publish = self.on_publish
self.mqtt_client.on_subscribe = self.on_subscribe
self.mqtt_client.on_log = self.on_log
## Sets last will and testament to indicate if the is offline due to deconnection
self.mqtt_client.will_set(STATUS_TOPIC, payload=""offline"", qos=2, retain=True)
....
....
if self.mqtt_client is None:
    self._logger.error(""MQTT Client has not been defined, missing authentication"")
    return 
try:
    self.mqtt_client.connect(self.mqtt_broker_url,
                             port=self.mqtt_broker_port,
                             keepalive=60,
                             session_expiry=60)
    self.mqtt_client.loop_start()
    self._logger.info(f""MQTT client connected to broker {self.mqtt_broker_url}:{self.mqtt_broker_port}"")
~~~
Where self.mqtt_password is actually the jwt token. Has anyone already implemented this once ? And does anyone know why it keeps disconnect with result code 5 ? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/761/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/762,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/762,paho.mqtt.python,2012417150,762,Wildcard subscriptions not receiving anything (jwt auth for broker),MacherelR,64424331,Rémy Macherel,,CLOSED,2023-11-27T14:35:12Z,2024-07-17T23:56:36Z,"Hi,
I've deployed an EMQX cluster with the auth JWT plugin. Everything seems to work well as my client programm (written in python using paho.mqtt library) is able to connect to the broker and subscribe to a wildcard topic (in my case: E01/COMMANDS/#). Now the problem I'm facing is that whenever I publish a message on i.e E01/COMMANDS/REGISTER, the message is correctly received by the broker (see figure) 

![Screenshot 2023-11-27 at 3 31 02 PM](https://github.com/eclipse/paho.mqtt.python/assets/64424331/ab441217-92a1-4f29-8032-ffdb1b62984e)

But those messages are never consumed by the client and therefore commands not treated... I was wondering whether anyone has faced this problem?
My subscription is handled the following way:
~~~
self.mqtt_username = DEVICE_ID
self.mqtt_password = response.json()['accessToken']
self.mqtt_broker_url = MQTT_BROKER_URL
self.mqtt_broker_port = MQTT_BROKER_PORT
self.mqtt_client = mqtt.Client(MQTT_CLIENT_ID, clean_session=False)
self.mqtt_client.username_pw_set(self.mqtt_username, self.mqtt_password)
self.mqtt_client.on_connect = self.on_connect
self.mqtt_client.on_message = self.on_message
self.mqtt_client.on_disconnect = self.on_disconnect
"""""" FOR Now, unused callbacks""""""
self.mqtt_client.on_publish = self.on_publish
self.mqtt_client.on_subscribe = self.on_subscribe
self.mqtt_client.on_log = self.on_log
## Sets last will and testament to indicate if the is offline due to deconnection
self.mqtt_client.will_set(STATUS_TOPIC, payload=""offline"", qos=2, retain=True)
... 
...
self.mqtt_client.connect(self.mqtt_broker_url,
                                     port=self.mqtt_broker_port,
                                     keepalive=60,
                                     session_expiry=60)
self.mqtt_client.loop_start()
self._logger.info(f""MQTT client connected to broker {self.mqtt_broker_url}:{self.mqtt_broker_port}"")
~~~
And the subscription is set in on_connect callback as following:
~~~
def on_connect(self,mqttc, obj, flags, rc):
        mqttc.subscribe(COMMAND_TOPIC,qos=1)
        self.mqtt_connection_on = True
        print(""rc: "" + str(rc))
~~~
Where COMMAND_TOPIC is 'E01/COMMANDS/#'","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/762/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/762,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t7U8Q,paho.mqtt.python,1844268816,762,NA,petersilva,394117,Peter Silva,,NA,2023-12-07T04:07:14Z,2023-12-07T04:07:14Z,"you're not providing enough information for anyone to say anything useful. 

* You claim the publish worked... graphic shows that somebody published something, how do you know it is the message that you published, or that the message is correct? 
* can you print the content of a sample message on the broker?
* If the broker has no traffic you can set  COMMAND_TOPIC to '#' and see if you get any messages.
* You aren't checking the result of the subscribe... did the subscribe succeed?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5t7U8Q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/762,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNEau,paho.mqtt.python,2234795694,762,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:56:36Z,2024-07-17T23:56:36Z,Closing due to inactivity (more info would be needed to enable us to assist).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNEau/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/763,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/763,paho.mqtt.python,2013834399,763,Client.reinitialise() changes transport type,stradiot,25954978,Martin Stradiot,martin.stradiot@gmail.com,OPEN,2023-11-28T07:37:47Z,2024-07-17T23:55:35Z,"The reinitialise() method of the client does not take the same arguments as the constructor (contrary to what the documentation says). This causes the unspecified arguments to change to default values.

If using websockets as a transport type, after calling reinitialise() the transport is changed to the default TCP and the client is unable to connect. This also applies to other unsupported arguments (protocol version and autoreconnect).


<img width=""809"" alt=""image"" src=""https://github.com/eclipse/paho.mqtt.python/assets/25954978/c8b3ccdd-6ad2-42e6-a502-61429f1761bb"">

<img width=""926"" alt=""image"" src=""https://github.com/eclipse/paho.mqtt.python/assets/25954978/5df6277c-945f-4880-940a-60bb66392c04"">

<img width=""978"" alt=""image"" src=""https://github.com/eclipse/paho.mqtt.python/assets/25954978/f8743873-7646-4d48-8175-9b1ffea0e6e9"">

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/763/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/763,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDuYN,paho.mqtt.python,1880024589,763,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-07T10:59:44Z,2024-01-07T10:59:44Z,"Do you see an use case of reinitialise that is not solved by really re-creating the client ?
E.g. instead of:
```
myclient.reinitialise([...])
``` 

Do:
```
myclient = paho.Client([...])
```

I think the second option is much better as it's clear that nothing is kept and it would solve your issue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wDuYN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/763,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNDqA,paho.mqtt.python,2234792576,763,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:55:34Z,2024-07-17T23:55:34Z,Looks like [the docs](https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html#reinitialise) may have been updated to remove the text that was in error. Note that #850 requires a change to this function so may be worth considering addressing the `protocol` issue at the same time (referencing that issue so there is a link),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FNDqA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,paho.mqtt.python,2040162397,764,New properties for protected attributes so downstream can depend on them,skewty,9087223,skewty,,CLOSED,2023-12-13T17:21:39Z,2024-01-21T14:15:57Z,"I am hoping the PAHO team would be open to exposing some currently protected attributes as properties so downstream projects can / will couple to them.

Reference: https://github.com/sbtinstruments/aiomqtt/issues/191

Example of what is desired:

```python
class NewClient(mqtt.Client):
    """"""Paho client with some exposed protected values""""""

    @property
    def client_id(self) -> str:
        return self._client_id.decode()

    @client_id.setter
    def client_id(self, value: str) -> None:
        if value == """":
            if self._protocol == ProtocolVersion.V31:
                self._client_id = base62(uuid4().int, padding=22)  # copied from paho code
            else:
                self._client_id = b""""
        else:
            self._client_id = value.encode()

    @property
    def host(self) -> str:
        return self._host

    @host.setter
    def host(self, value: str):
        self._host = str(value)

    @property
    def port(self) -> int:
        return self._port

    @port.setter
    def port(self, value: int) -> None:
        value = int(value)
        if 0x0000 <= value <= 0xFFFF:
            self._port = value
        raise ValueError(""port number out of range"")

    @property
    def username(self) -> str | None:
        return None if self._username is None else self._username.decode()

    @username.setter
    def username(self, value: str | None):
        self._username = None if value is None else value.encode()

    @property
    def password(self) -> str | None:
        return None if self._password is None else self._password.decode()

    @password.setter
    def password(self, value: str | None):
        self._password = None if value is None else value.encode()

    @property
    def connect_timeout(self) -> float:
        return self._connect_timeout

    @connect_timeout.setter
    def connect_timeout(self, value: float) -> None:
        value = float(value)
        if value <= 0.0:
            raise ValueError(""timeout must be a positive number"")
        self._connect_timeout = value

    @property
    def keep_alive(self) -> int:
        return self._keepalive

    @keep_alive.setter
    def keep_alive(self, value: int) -> None:
        value = int(value)
        if value <= 0:
            raise ValueError(""keepalive must be a positive number"")
        self._keepalive = value

    @property
    def max_inflight_messages(self) -> int:
        return self._max_inflight_messages

    @max_inflight_messages.setter
    def max_inflight_messages(self, value: int) -> None:
        if value < 0:
            raise ValueError(""value must not be negative"")
        self._max_inflight_messages = value

    @property
    def max_queued_messages(self) -> int:
        return self._max_queued_messages

    @max_queued_messages.setter
    def max_queued_messages(self, value: int) -> None:
        if value < 0:
            raise ValueError(""value must not be negative"")
        self._max_queued_messages = value

    @property
    def will_topic(self) -> str:
        return self._will_topic.decode()

    @property
    def will_payload(self) -> bytes:
        return self._will_payload
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCeZP,paho.mqtt.python,1879696975,764,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-06T14:03:58Z,2024-01-06T14:03:58Z,"I think that read properties are fine and will be done.

Write properties are an issue to me. What means changing the client_id when you are connected ? Should we disconnect and reconnect with new client_id ? Only wait for next reconnection to use the new ID (which could happen days later) ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCeZP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCwj3,paho.mqtt.python,1879771383,764,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-06T18:07:48Z,2024-01-06T18:07:48Z,"I've added with write for most properties. Some will only apply on next reconnection (as described in docstring).
Some write are unsupported if the connection is established due to possible unexpected condition. In that case it will a warning.
Finally some few their is not write because it's pretty sure to broken if the connection is established (e.g. protocol)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCwj3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5weAvL,paho.mqtt.python,1886915531,764,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2024-01-11T11:16:07Z,2024-01-11T11:16:07Z,"As discussed in the pull request, I'm not convinced it's necessarily the best idea to add setters for all properties, especially when they won't take effect immediately.

@skewty (and @frederikaalund from the aiomqtt issue): what would be the use case for setting e.g. a host or port for a client that's already connected? Could one not just create a new client in that case?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5weAvL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5w5qur,paho.mqtt.python,1894165419,764,NA,skewty,9087223,skewty,,NA,2024-01-16T17:10:49Z,2024-01-16T17:10:49Z,"Creating a new client requires, of course, re-binding all the callbacks as well. If all my code knows about is the new host + port to use that becomes an issue.

My use case is somewhat complicated because it uses asyncio and paho is a hidden requirement. Downstream developers are reluctant to couple to protected fields (as they should be). Small decisions can have larger impacts due to this.

What is likely to happen is other projects just keep their own copy of values that are already in paho. I guess I was hoping paho would make these changes to be a little bit more open for extension (open-closed principle in SOLID) even if it doesn't need the function itself.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5w5qur/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5w51HV,paho.mqtt.python,1894207957,764,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-16T17:37:52Z,2024-01-16T17:37:52Z,"I don't get the use-case for writing host property with aiomqtt. It's API is made such as when the Client (paho-mqtt & aiomqtt) is created, the host is already decided and immutable or did I miss something ?

I believe only two options are valid (and prefer the first):
* either don't allow to modify at all host, port or other options that only apply on future connection. host, port and keepalive are settable before (re)establishing the connection, using connect()
* raise error if trying to set them while connection is open or being currently being opened

If we don't do that, the following would be nondeterministic: 
```
client = Client()
client.connect_async(""host1"")
client.loop_start()
client.host = ""host2""
```

I think we might be able to write similar case in aiomqtt (we only need to have concurrency between the connection & the `client.host = ""host2""`. The result in not deterministic, it could connect to host ""host1"" or ""host2"".

It seems much easier to just don't allow writing host, port and keepalive, especially since those 3 value are overwrite by connect() anyway.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5w51HV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/764,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xYjK1,paho.mqtt.python,1902260917,764,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-20T20:43:07Z,2024-01-20T20:43:07Z,"As commented in the PR, I'll disallow changed connection related properties while connected or connecting. It'll only be allowed to change them before first connect/connect_async/reconnect or after disconnect() ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xYjK1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/765,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/765,paho.mqtt.python,2040175648,765,modernization of code base - better support for newer python releases,skewty,9087223,skewty,,OPEN,2023-12-13T17:30:28Z,2024-01-08T07:21:44Z,"Would the PAHO team be willing to drop support for end-of-life python releases and maybe move towards a more modern code-base with type hints?

Perhaps a v2.0 milestone?

https://devguide.python.org/versions/

Such an effort would likely go quickly. I am thinking something along the lines of >= v3.9 but perhaps even greater depending on how ambitious the effort becomes.

Proper `asyncio` code support is also long overdue.

Projects such as https://github.com/sbtinstruments/aiomqtt would likely be on-board to help out as well as myself.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/765/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/765,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCeH1,paho.mqtt.python,1879695861,765,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-06T13:59:56Z,2024-01-06T13:59:56Z,"Recent PRs & commit modernized code base. We dropped support for Python < 3.7.

Asyncio is unchanged, and will probably be out-of-scope for next release.

Some changes includes:
* Update build (#774)
* Update tests and linters (#770 #771 #776 #780)
* Better typing (#791)

With exception to asyncio, do you see other modernization that should be made ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCeH1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,paho.mqtt.python,2043184356,766,Are PUBACKS from a previous session send due to clean_session=False considered valid control packets for keep alive?,harrandt,116627373,,,CLOSED,2023-12-15T08:46:43Z,2024-01-08T10:06:40Z,"I see a strange behaviour using the Paho Python client (paho-mqtt 1.6.1) in combination with the Java Moquette broker.

1. Connect to the broker with clean_session=False and publish lots of messages with QoS=1 to make sure the broker will be busy for quite a while processing queue
2. Disconnect from the broker 
3. Connect to the broker with the same client ID and clean_session=False
4. Start publishing
5. Now there are lots of PUBACK to messages from the previous session that the broker has to send before the ones to the current PUBLISH.
6. But I can see that after a while the client is sending a PINGREQ, so he does not seem to be happy with the ""old"" PUBACK packages as 

The broker seems to queue the PINGREQ after the ""old"" messages, thus he will process the messages from the previos session first before answering it. And depending on the keepalive interval the client will drop the connection. Even though there were lots of PUBACKs from the broker.

The spec mentions

> In the absence of sending any other Control Packets, the Client MUST send a PINGREQ Packet. [MQTT-3.1.2-23] 

So my suspicion is, that the Paho client only considers PUBACK from the current session as Control Packets that will reset the keep alive period.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uvNop,paho.mqtt.python,1857870377,766,NA,harrandt,116627373,,,NA,2023-12-15T13:18:45Z,2023-12-15T13:18:45Z,"I just had a look at the source code and think there might be a different explanation, but I have not understood it in full.

`if self._sock is not None and (now - last_msg_out >= self._keepalive or now - last_msg_in >= self._keepalive):`

https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2582

I have a publisher-only client, so according to this the age of the `last_msg_out` will trigger a PINGREQ if above keepalive when `_loop()` is called.

So what's written [here](http://www.steves-internet-guide.com/mqtt-keep-alive-by-example/) is actually true:

> You may think that sending messages on a regular basis would stop the PING messages but it turns out that the keep alive interval applies to both publish and receive messages.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uvNop/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uvnjJ,paho.mqtt.python,1857976521,766,NA,harrandt,116627373,,,NA,2023-12-15T14:31:14Z,2023-12-15T14:31:14Z,"Ok, I think I am getting to the bottom of this, the PUBACK that I receive are for a new client instance with no memory of the previous session. So the PUBACK I receive are probably for different message IDs used in the previous session and so they might or might not be used in the current one.

The client does not know which PUBACK it receives, and it will start the message IDs for the current session at 1 counting up.

So, if a PUBACK arrives, it could be one from the previous session which is also used for this session and it might not be the PUBACK for a message in the current session, which we are waiting for.

So we might never get it for the current message, right? So will the current message be resent and receive ""its"" PUBACK then?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5uvnjJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXR8T,paho.mqtt.python,1868373779,766,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-23T21:34:54Z,2023-12-23T21:34:54Z,">So we might never get it for the current message, right? So will the current message be resent and receive ""its"" PUBACK then?

[Unfortunately](https://github.com/eclipse/paho.mqtt.python#known-limitations) this client currently only stores session information in memory. If you create a new `Client` this [info is lost](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L581).

This means that, in your example, the new `Client` has no knowledge of the messages sent previously (the client should handle this correctly when using it's own reconnection functionality). When the client it receives a `PUBACK` it will compare the ID to a map of those it has sent and, if it's found, the user code will be notified and the ID removed from the map. If the ID is unknown then the `PUBACK` is [effectively ignored](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3597).

Ad an aside; the fact that the server is sending all of the PUBACK's is interesting upon reconnection. My reading of the spec is that the V3 allows (but does not require) this, whereas V5 does not allow it. The V5 spec states that  the server ""MUST resend any unacknowledged PUBLISH packets (where QoS > 0) and PUBREL"" and ""Clients and Servers MUST NOT resend messages at any other time"".

In terms of how this impacts keepalives; I don't believe it should. The timer is [reset when any packet is received](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2496) (regardless of any errors whilst processing it). Looking at the [code that handles the `PUBACK`](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L3576) it looks like the ACK is just ignored if the ID is not in the dict.

I can think of one potential cause for the loss of connection (but this requires that the client is receiving only, not publishing). As per [the spec](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349237):

>It is the responsibility of the Client to ensure that the interval between Control Packets being sent does not exceed the Keep Alive value. In the absence of sending any other Control Packets, the Client MUST send a PINGREQ Packet [MQTT-3.1.2-23].

So the following could happen:

* Connect, Server begins sending queued packets (none of which require a response)
* [Client detects](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2584C26-L2584C26) (`_last_msg_out`) that no control packets have been sent within the required timeframe so sends a ping.
* Server continues to send queued packets (has not got around to handling ping)
* [Client detects](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L2584C26-L2584C26) (`_last_msg_out`) that no control packets have been sent within the required timeframe; as no response has been received from the previous ping it drops the connection.

This should not be the case in your situation (as you mention that the client resumes publishing). Unfortunately without access to [logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) it's going to be difficult to diagnose further.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXR8T/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/766,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGTXQ,paho.mqtt.python,1880700368,766,NA,harrandt,116627373,,,NA,2024-01-08T10:06:35Z,2024-01-08T10:06:35Z,"Your assumption was correct. 
We were publishing towards a some customized MQTT broker and asked the provider about some internals.
It is a customized Java Moquette with a stupid slow sync queue, so basically our PINGREQ got queued and delayed among all the other stuff that had to go to the database (slow...). 
That in combination with ""unknown id"" PUBACKs from the previous session led to the issue. But it is not an issue of Paho, so I will close this.

Basically our problem was, that the producer was to fast and the consumer to slow because of its blocking DB processing queue.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wGTXQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/768,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/768,paho.mqtt.python,2050629366,768,Convert `test/Makefile` tests to regular py.test tests,akx,58669,Aarni Koskela,akx@iki.fi,CLOSED,2023-12-20T14:12:12Z,2023-12-24T15:08:06Z,"> Those tests should be converted to be regular `py.test` tests IMO, they now seem to rely on some _very_ homespun code (e.g. some Python code in `.test` files that maybe somehow relates to the `.py` files...).
>
> They're also not covered by any code coverage so long as that's happening.

_Originally posted by @akx in https://github.com/eclipse/paho.mqtt.python/pull/718#discussion_r1432723019_","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/768/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/768,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXKpe,paho.mqtt.python,1868343902,768,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2023-12-23T18:09:08Z,2023-12-23T18:09:08Z,"I'm working on this, holidays willing :)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vXKpe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/769,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/769,paho.mqtt.python,2050644558,769,CI: also run mqtt5 tests,akx,58669,Aarni Koskela,akx@iki.fi,CLOSED,2023-12-20T14:20:23Z,2023-12-31T14:00:33Z,"Currently the `test_mqtt5` tests aren't being run in CI, because the requisite submodule isn't getting cloned into place.

(The tests don't _work_, either...)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/769/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/775,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/775,paho.mqtt.python,2054719748,775,CI: enable code coverage tracking,akx,58669,Aarni Koskela,akx@iki.fi,CLOSED,2023-12-23T08:35:36Z,2024-01-10T19:58:32Z,[Codecov](https://about.codecov.io/) has a handy GitHub Action and a free tier for OSS projects.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/775/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/775,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vX9XA,paho.mqtt.python,1868551616,775,NA,akx,58669,Aarni Koskela,akx@iki.fi,NA,2023-12-24T16:19:15Z,2023-12-24T16:19:15Z,Working on this now.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vX9XA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/778,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/778,paho.mqtt.python,2054790140,778,Python 3.12 removes the `ssl.wrap_socket()` function.,cclauss,3709715,Christian Clauss,cclauss@me.com,CLOSED,2023-12-23T13:35:41Z,2023-12-23T13:44:59Z,"Python 3.12 removes the `ssl.wrap_socket()` function. https://docs.python.org/3/whatsnew/3.12.html#ssl
> Any package that still uses `ssl.wrap_socket()` is broken and insecure.

As discussed in:
* #777","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/778/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/778,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vW_Ye,paho.mqtt.python,1868297758,778,NA,cclauss,3709715,Christian Clauss,cclauss@me.com,NA,2023-12-23T13:44:59Z,2023-12-23T13:44:59Z,Fixed in #771,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vW_Ye/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,paho.mqtt.python,2057610419,785,Paho MQTT Client Fails to Reconnect After Prolonged Network Downtime,surfskidude,3975219,,,OPEN,2023-12-27T17:19:22Z,2024-12-22T09:01:48Z,"The Paho MQTT client fails to automatically reconnect after the network has been down for a prolonged period. While client.loop_start() should handle reconnections, it isn't effective in cases of long-term network disconnections.

Changing client.loop_start() to client.loop_forever(retry_first_connection=True) resolves the issue, suggesting that the client's default reconnection mechanism might not handle prolonged network outages effectively.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmmix,paho.mqtt.python,1872390321,785,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2023-12-29T23:33:22Z,2023-12-29T23:33:22Z,"`loop_start` effectively [just calls](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L1806) `loop_forever(retry_first_connection=True)` in a thread. Are you able to provide any additional information? (what is a ""prolonged period"", is anything [logged](https://github.com/eclipse/paho.mqtt.python/tree/master#enable_logger) etc).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vmmix/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vnOqr,paho.mqtt.python,1872554667,785,NA,surfskidude,3975219,,,NA,2023-12-30T16:01:33Z,2023-12-30T16:01:33Z,"When I changed the code from the commented out to the current, things started working, and it reconnected on prolonged periods:

```
client.connect(MQTT_BROKER, MQTT_PORT, 60)
#client.loop_start()
client.loop_forever(retry_first_connection=True)

#try:
#    while True:
#        time.sleep(1)  # Keep the main thread alive.
#except KeyboardInterrupt:
#    print(""Exiting..."")
#finally:
#    client.loop_stop()
#    client.disconnect()
```

I am running this on a Raspberry Pi and have an issue with the network. Here is the log from dmesg:

```
[Wed Dec 27 08:56:15 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Wed Dec 27 08:56:19 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Wed Dec 27 08:56:30 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Wed Dec 27 08:56:33 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Wed Dec 27 10:27:22 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Wed Dec 27 21:06:33 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Wed Dec 27 21:56:51 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Thu Dec 28 06:51:45 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Thu Dec 28 12:28:42 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Thu Dec 28 13:19:19 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Thu Dec 28 16:37:49 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Thu Dec 28 16:59:21 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
[Thu Dec 28 21:51:38 2023] bcmgenet fd580000.ethernet eth0: Link is Down
[Fri Dec 29 06:30:03 2023] bcmgenet fd580000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx
```

As you can see from the above log, the network is down for up to 9 hours.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5vnOqr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM5J9,paho.mqtt.python,2234749565,785,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:42:52Z,2024-07-17T23:42:52Z,"This is pretty weird, are you by any chance able to duplicate the issue with the latest version (ideally with [logging](https://github.com/eclipse/paho.mqtt.python?tab=readme-ov-file#logger) enabled?).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM5J9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/785,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Yfdcl,paho.mqtt.python,2558383909,785,NA,IgnacioHR,16385090,Ignacio Hernandez-Ros,ignacio@hernandez-ros.com,NA,2024-12-22T09:00:56Z,2024-12-22T09:00:56Z,"Hi,

I might be having this same issue.

1. I've not tested the proposed solution
2. At 01:00 am every 3rd Sunday of the month, the server running mqtt is stoped, a backup is made and it is restarted again.
3. I've some logs to share from a client that is unable to reconnect: 

```
dic 22 01:00:02 polo python3[20554]: 2024-12-22 01:00:02,488 paho-mqtt-client-diematicd_1315878b-5e6f-4bf4-8164-f9050c6bfc4c ERROR    diematicd      :889      MQTT Disconncted!
dic 22 01:00:03 polo python3[20554]: 2024-12-22 01:00:03,493 paho-mqtt-client-diematicd_1315878b-5e6f-4bf4-8164-f9050c6bfc4c ERROR    diematicd      :892      MQTT connect fail!
dic 22 01:00:10 polo python3[20554]: 2024-12-22 01:00:10,502 paho-mqtt-client-diematicd_1315878b-5e6f-4bf4-8164-f9050c6bfc4c ERROR    diematicd      :892      MQTT connect fail!
dic 22 01:00:17 polo python3[20554]: 2024-12-22 01:00:17,616 paho-mqtt-client-diematicd_1315878b-5e6f-4bf4-8164-f9050c6bfc4c ERROR    diematicd      :892      MQTT connect fail!
dic 22 01:00:28 polo python3[20554]: 2024-12-22 01:00:28,736 paho-mqtt-client-diematicd_1315878b-5e6f-4bf4-8164-f9050c6bfc4c ERROR    diematicd      :892      MQTT connect fail!
```

4. it looks like the number of reconnection attempts is limited to 4?

I hope this information helps.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Yfdcl/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,paho.mqtt.python,2061808848,787,Suggestion: Add the ability to call a user supplied method at regular intervals in loop_forever(),aabaker,396698,,,OPEN,2024-01-01T22:38:30Z,2024-01-08T23:37:34Z,"Given that use of loop() is discouraged (and reading the code for loop_forever I can see why) and that it can be tricky to ensure use of loop_start() is thread safe, it would be helpful for loop_forever() to accept an optional argument of a function that, if provided is called regularly to perform any additional functionality that the program needs.

From my limited understanding of the code it looks as though this could be achieved by testing if the function exists and if so calling it just after the call to loop() in loop_forever()","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v63J-,paho.mqtt.python,1877701246,787,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-04T20:13:43Z,2024-01-04T20:13:43Z,"Fixing thread-safety is something we want. If thread-safety is fixed, I don't think such callback are still needed. I would prefer avoiding to add more callback / way to use the library as this add maintenance works.
Do you see a use case where existing API (assuming thread-safety is fixed) don't work ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v63J-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v6-Jd,paho.mqtt.python,1877729885,787,NA,aabaker,396698,,,NA,2024-01-04T20:38:30Z,2024-01-04T20:38:30Z,"If you can fix thread safety then using start_loop() to run the client and doing any other updates in the main thread would be viable. The use cases I am considering would be ones where the message received callbacks update data structures but some code that needs to run at a regular interval then uses that data.
As it looks as if the GIL isn't going away in CPython that sort of code should be OK using loop start() but in an environment without the GIL it would need locking to ensure the message callback didn't write to the data structure at the same time as other code read it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v6-Jd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v7Meq,paho.mqtt.python,1877788586,787,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-04T21:32:04Z,2024-01-04T21:32:04Z,"But in your case the thread safety issue is not on paho library side, but on your data structure. You should take a lock before updating the data structure and a lock before the other code uses that data.

Even if we fix all thread-safety on paho, it won't solve the possible data race if you don't lock access to your data structure.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v7Meq/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v7mlZ,paho.mqtt.python,1877895513,787,NA,aabaker,396698,,,NA,2024-01-04T23:21:02Z,2024-01-04T23:21:02Z,"And the need for the user to lock their data correctly is what I meant with the original comment that it can be tricky to ensure the code using loop_start() is thread safe. For the application I'm currently writing, the data structures involved are trivial so I could lock them easily but because writing thread safe code and testing for thread safety isn't always easy having a mechanism that avoids the need for threads can make the paho users life easier.

The right place to strike the balance between making life easier for users and keeping the library small enough that you have the resources to maintain it is something I'm not in a position to judge but a library that is maintained and takes a bit more work to use is preferable to one that isn't maintained so if you think this idea isn't worth the effort then that's fine by me.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v7mlZ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCddL,paho.mqtt.python,1879693131,787,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-06T13:49:03Z,2024-01-06T13:49:03Z,"But the user supplied method will only solve simple lock needs. One that only need a single lock which aren't tricky. Or do you have a use-case where the callback method solve a problem that single lock don't solve ?

I agree that if multiple lock are involved locking become tricky, but then the callback method won't help use either (because if you required multiple lock, it means multiple thing had to run concurrently - or a single lock would be enough - and the callback solution is a full single thread solution).

With this solution, I fear that it only fit a too small use-case that could be solve by just using a single lock and adding `with lock:` at few place. And it should introduce other issue, like the callback should avoid to hang for too long or the client might disconnect. The callback will be called at non-regular interval (depend on network activity & timeout value).

Does some other language paho.mqtt implementation had such feature ?

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wCddL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/787,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wLLlj,paho.mqtt.python,1881979235,787,NA,aabaker,396698,,,NA,2024-01-08T23:26:42Z,2024-01-08T23:26:42Z,"My concern with locking is more about making sure that the callbacks are using the same lock as the main thread and not a copy of it rather than coping with scenarios needing multiple locks. There are plenty of examples posted of users struggling to ensure that their userdata is actually updating the original and not a copy but in that case the behaviour is obviously wrong. Testing that you actually have the correct lock if you expect lock contention to be rare requires some care.

If I'm writing code using an event loop it is more typically either X11 or Windows both of which provide timer callbacks (XtAppAddTimeout() or SetTimer() respectively). I couldn't find a paho MQTT implementation that includes one but did find https://docs.hivemq.com/hivemq/3.4/plugins/callbacks.html#scheduled-callback-execution as an example of MQTT implementation that does.

If I hadn't seen the comment that I can't find again about locking issues with loop_start() I'd probably have just used that.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wLLlj/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/789,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/789,paho.mqtt.python,2063492725,789,Tests are flaky on `master`,akx,58669,Aarni Koskela,akx@iki.fi,CLOSED,2024-01-03T08:29:26Z,2024-04-29T19:41:21Z,"Tests are currently flaky on `master`. These seem to be the newly re-enabled MQTTv5 tests.

@PierreF Instead of `paho.mqtt.testing`, would it make sense to just use Mosquitto here?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/789/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/789,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v0X89,paho.mqtt.python,1876000573,789,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-03T21:33:29Z,2024-01-03T21:33:29Z,"MQTTv5 test aren't optimal in current form. They are very slow (I've quickly looked and didn't find a way to make them run faster easily).

Yes doing test using a real broker like mosquitto might be a good solution.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5v0X89/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/789,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58MBI3,paho.mqtt.python,2083525175,789,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-29T19:41:21Z,2024-04-29T19:41:21Z,"Done some fix in e96ff7578f7f56a7f3068fbc3e7d0b48e1c64a97 which seems good enough. The last run on master worker without need to retry.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58MBI3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,paho.mqtt.python,2069373545,798,Defaults for tls={'ca_certs': ...},runout-at,884915,,,OPEN,2024-01-08T00:23:33Z,2024-01-10T18:06:57Z,"Running on Debian bookworm, Python 3.11 i found that tls dictionary is missing a default for ca_certs.

I would expect the default is /etc/ssl/certs/ca-certificates.crt in Debian.

Following works at least under Debian: tls={'ca_certs':""/etc/ssl/certs/ca-certificates.crt""}

Note: Originally posted as a comment on issue #518           ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEkr8,paho.mqtt.python,1880247036,798,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-08T00:31:15Z,2024-01-08T00:31:15Z,"Sorry - please clarify your specific issue (i.e. ""The following code fails to run on  debian stable (bookworm) with the error ...""). The text copied from the previous issue is confusing (its fine for an issue to reference another issue but it should also stand alone).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEkr8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEktY,paho.mqtt.python,1880247128,798,NA,runout-at,884915,,,NA,2024-01-08T00:31:36Z,2024-01-08T00:31:36Z,"Running on Debian bookworm, Python 3.11 i found that _tls_ dictionary is missing a default for  _ca_certs_.

I would expect the default is _/etc/ssl/certs/ca-certificates.crt_ in Debian.

Following works at least under Debian: tls={'ca_certs':""/etc/ssl/certs/ca-certificates.crt""}","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEktY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEk1k,paho.mqtt.python,1880247652,798,NA,runout-at,884915,,,NA,2024-01-08T00:33:00Z,2024-01-08T00:33:00Z,"Sorry, creating a new issue from the old one messed something up.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEk1k/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmWP,paho.mqtt.python,1880253839,798,NA,runout-at,884915,,,NA,2024-01-08T00:48:21Z,2024-01-08T00:48:21Z,"I have no access to the system right now. I will reinvestigate in some days as this is an ARM architecture.

Couldn't reproduce it on AMD64 right now.

thx @MattBrittan for your work!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wEmWP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wLvyV,paho.mqtt.python,1882127509,798,NA,runout-at,884915,,,NA,2024-01-09T01:30:54Z,2024-01-09T01:30:54Z,"Yesterday I just tried a subscribe which did work. The problem occurs only on publishing and I did look at the code now.

The doc inside the code of publish.simple and publish.multiple for _tls_ says  _ca_certs is required_. I didn't find this in the docomentation or missed it. The default is _tls=None_ but if _ca_certs_ is required inside the tls dict, _None_ does not make much sense.

But if you invoke these functions with tls={""ca_certs"": ""proper path to cert""} or even only tls={} as parameter it seems to work. The latter I didn't expect to work from the inline docu.

The code for that is around line 164 in paho/mqtt/publish.py:

```
    if tls is not None:
        if isinstance(tls, dict):
            insecure = tls.pop('insecure', False)
            client.tls_set(**tls)
            if insecure:
                # Must be set *after* the `client.tls_set()` call since it sets
                # up the SSL context that `client.tls_insecure_set` alters.
                client.tls_insecure_set(insecure)
        else:
            # Assume input is SSLContext object
            client.tls_set_context(tls)

    client.connect(hostname, port, keepalive)
    client.loop_forever()
```

I think the first if should have an else. Otherwise we would end in an endless loop.

Consider following example to reproduce this:

```
import paho.mqtt.publish as publish

host = ""mqtt.example.com""
username = ""user@mqtt.example.com""
password = ""password of user""
topic = ""test/topic1""

ca_certs = ""/etc/ssl/certs/ca-certificates.crt""
tls = {'ca_certs': ca_certs}

print('with tls:',
      publish.single(topic, ""payload"",
                     hostname=host, port=8883,
                     auth={'username':username, 'password':password},
                     client_id=""mqtt_pub_1"",
                     tls={}
                     )
      )

print('with tls:',
      publish.single(topic, ""payload"",
                     hostname=host, port=8883,
                     auth={'username':username, 'password':password},
                     client_id=""mqtt_pub_1"",
                     tls=tls
                     )
      )

print('without tls:',
      publish.single(topic, ""payload"",
                     hostname=host, port=8883,
                     auth={'username':username, 'password':password},
                     client_id=""mqtt_pub_1""
                     )
      )
```

this prints

```
with tls: None
with tls: None
```

The first 2 messages are properly received by the mqtt server and then the publishing client hangs in the loop on the third call of publish.simple","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wLvyV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wL7f0,paho.mqtt.python,1882175476,798,NA,runout-at,884915,,,NA,2024-01-09T02:05:46Z,2024-01-09T02:05:46Z,"Maybe it would be enough to set tls variable if it's _None_ inside publish.multiple like

```
    if tls is None:
       tls = {}
```
and remove the 

```
    if tls is not None:
```

(and remove one indent level of the following if)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wL7f0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wSQ6J,paho.mqtt.python,1883836041,798,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-09T21:35:30Z,2024-01-09T21:35:30Z,"It's wanted to have tls=None for the default. That the means not using TLS but clear-text which is the default and a supported behavior.

Your third client ""hanging"" is actually trying to connect (in a loop) to a broken that reject its connection; because client/server protocol don't match. I'm not sure we can do much easily. We don't have easy way to known this issue will be persistent.

There is indeed  the documentation / code documentation / code implementation that are not always very well aligned. For instance here:
* tls don't require any key, and empty dict is indeed supported (it wasn't supported 7 years ago, I think that from there this documentation come from).
* tls could be a TLSContext, which is not documented at all.

I've in my mind to review documentation, probably stop to have both code documentation and documentation that repeat. But that a significant amoung of work.

For your case, you can rely on `tls={}` to work and stay being supported. I think I'll add support for `tls=True` and `tls=False` (and use False for the default) which seems less confusing than `tls={}` and `tls=None`. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wSQ6J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/798,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wYGI1,paho.mqtt.python,1885364789,798,NA,runout-at,884915,,,NA,2024-01-10T18:06:57Z,2024-01-10T18:06:57Z,"> It's wanted to have tls=None for the default. That the means not using TLS but clear-text which is the default and a supported behavior.

thx. for clarification.

> Your third client ""hanging"" is actually trying to connect (in a loop) to a broken that reject its connection; because client/server protocol don't match. I'm not sure we can do much easily. We don't have easy way to known this issue will be persistent.

It would be great f it could have a timeout or retry limit and give some informative error message.

> There is indeed the documentation / code documentation / code implementation that are not always very well aligned. For instance here:
> 
>     * tls don't require any key, and empty dict is indeed supported (it wasn't supported 7 years ago, I think that from there this documentation come from).
> 
>     * tls could be a TLSContext, which is not documented at all.

I did read about TLSContext in the docs for subscription to a broker but did'n't know how to use it.

> I've in my mind to review documentation, probably stop to have both code documentation and documentation that repeat. But that a significant amoung of work.

I can imagine!

> For your case, you can rely on `tls={}` to work and stay being supported. I think I'll add support for `tls=True` and `tls=False` (and use False for the default) which seems less confusing than `tls={}` and `tls=None`.

That's great to know and I agree that _tls=False_ would be more intentional than _tls=None_.

Thx a lot!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5wYGI1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,paho.mqtt.python,2089060185,803,"On_disconnect Callback Returns ReasonCode=7 with EMQX over WebSockets in Paho MQTT""",matiasAS,7276332,,,CLOSED,2024-01-18T21:15:10Z,2024-07-17T23:50:08Z,"Environment
Python version: 3.10.13
Library version: 1.6.1
Operating system (including version): Alpine Linux 3.18.5
MQTT server (name, version, configuration, hosting details): EMQX 5.4.1 hosted on an AWS EC2 instance. The server is set up with app Dokku configured with ports:add https:8443:8083. It also has SSL with the Dokku LetsEncrypt plugin. The domain is broker.mydomain.com and it's on Cloudflare with the proxy activated. MQTT protocol version 5, transport=websockets, client.tls_set(tls_version=ssl.PROTOCOL_TLSv1_2).
Question
I am encountering an issue where I receive a reasonCode=7 in the on_disconnect callback when using the Paho MQTT Python client. This happens under the following conditions:

Using MQTT protocol version 5
The connection is over WebSockets (transport=websockets)
TLS is configured with client.tls_set(tls_version=ssl.PROTOCOL_TLSv1_2)
The issue arises when the client disconnects from the EMQX broker. I would like to understand the possible causes of this reasonCode=7 and any solutions or workarounds that might be available. This reasonCode is not clearly defined in the MQTT 5.0 specification or in the Paho MQTT documentation, so any insights into its meaning and how to address the underlying issue would be greatly appreciated.

Regards
Matias","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xNv64,paho.mqtt.python,1899429560,803,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-19T00:21:24Z,2024-01-19T00:21:24Z,"reason code 7 = ""MQTT_ERR_CONN_LOST""; this is returned when the network connection drops. 

As you have not provided any sample code, logs or much detail over when this happens (""when the client disconnects"" - do you mean that you are calling `disconnect()`?) . Suggestions (I assume you have tested the connection using another client, such as MQTTX?), check the broker logs and, if that does not help, the client logs. There are a number of things that could cause this issue (some from the MQTT spec - e.g. invalid auth details) and some network related).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xNv64/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xNz59,paho.mqtt.python,1899445885,803,NA,matiasAS,7276332,,,NA,2024-01-19T00:37:18Z,2024-01-19T00:37:18Z,"@MattBrittan 
![image](https://github.com/eclipse/paho.mqtt.python/assets/7276332/87450de0-fcd2-4e1b-8c89-eb1aa65cba71)

I authenticate using JWT, and I'm experiencing reconnections approximately every minute.
connection code is:

![image](https://github.com/eclipse/paho.mqtt.python/assets/7276332/322141b3-5bae-4c9f-a3a6-88d2eb3495b4)



Regards","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xNz59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOKG0,paho.mqtt.python,1899536820,803,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-19T02:20:36Z,2024-01-19T02:20:36Z,"I can't see anything much of interest in the broker logs (the lack of timestamps makes it hard to get a feel for the time-frames involved). I would suggest checking the [client logs](https://github.com/eclipse/paho.mqtt.python#enable_logger) as well (just in case the paho client is dropping the connection).  From the look of the log you are not receiving any messages?

If both ends are just detecting loss of connection then it's a network issue (keep-alives should default to 60 seconds, so it's interesting there are none in the log). It would also be worth seeing if the connection remains up when testing with MQTTX (currently it's not clear where the problem lies).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOKG0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOw5J,paho.mqtt.python,1899695689,803,NA,matiasAS,7276332,,,NA,2024-01-19T04:09:07Z,2024-01-19T04:09:07Z,"@MattBrittan 
The time that the client is connected coincides with the keep alive (I tried 3600 but it still disconnected after a minute)

logs (debug) python client paho-mqtt:

![image](https://github.com/eclipse/paho.mqtt.python/assets/7276332/7d037f66-9f21-4585-aa7f-891ef4d06f14)

logs broker:

![image](https://github.com/eclipse/paho.mqtt.python/assets/7276332/f1e0175e-11ab-44b2-a931-824caf859c49)

from the websocket client in the emqx dashboard, it also disconnects, that would be a way to rule out that it is not a paho-mqtt thing

I can't connect from MQTTX

regards


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOw5J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOx1X,paho.mqtt.python,1899699543,803,NA,matiasAS,7276332,,,NA,2024-01-19T04:09:58Z,2024-01-19T04:09:58Z,"sorry, I accidentally pressed close issue
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xOx1X/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xO9Av,paho.mqtt.python,1899745327,803,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-01-19T04:21:55Z,2024-01-19T04:21:55Z,"> logs (debug) python client paho-mqtt:

Nothing of real interest in these logs; it looks like the network connection is dropping (with neither the client or server initiating the disconnection).

> from the websocket client in the emqx dashboard, it also disconnects,

Are you are saying that you have tested this using the websocket client in the emqx dashboard, and that fails in the same way? If so that indicates that it's not a fault with this library (given the lack of content in the EMQX log I'd guess at a network issue; perhaps try a 30s keep-alive in case something is dropping the connection after a minutes inactivity). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5xO9Av/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/803,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM_S7,paho.mqtt.python,2234774715,803,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:50:08Z,2024-07-17T23:50:08Z,I'm going to close this due to inactivity (and it looks like it may be a network issue as per the above comment). Please feel free to reopen with more info if applicable.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FM_S7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/805,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/805,paho.mqtt.python,2095623677,805,Negative inflight messages counter with QoS 2 for subscribe and publish,harrandt,116627373,,,OPEN,2024-01-23T09:22:41Z,2024-01-29T11:08:07Z,"Python 3.9, Windows 10
paho-mqtt         1.6.1

The `client._inflight_messages` counter of the paho client is negative and decreasing with QoS 2 for publish and subscribe on the same topic. Other combinations of the QoS levels will not show the issue.

The log seems to indicate that the published messages are transfered successfully:

```
DEBUG:__main__:Sending PUBREC (Mid: 4)
DEBUG:__main__:Received PUBREL (Mid: 4)
DEBUG:__main__:received payload 3, mid: 4
DEBUG:__main__: _out_messages 0, _in_messages 0, _inflight_messages -3
DEBUG:__main__:Sending PUBCOMP (Mid: 4)
DEBUG:__main__:Sending PUBLISH (d0, q2, r0, m6), 'b'test'', ... (1 bytes)
DEBUG:__main__:Received PUBREC (Mid: 6)
DEBUG:__main__:Sending PUBREL (Mid: 6)
DEBUG:__main__:Received PUBCOMP (Mid: 6)
DEBUG:__main__:Received PUBLISH (d0, q2, r0, m5), 'test', ...  (1 bytes)
DEBUG:__main__:Sending PUBREC (Mid: 5)
DEBUG:__main__:Received PUBREL (Mid: 5)
DEBUG:__main__:received payload 4, mid: 5
DEBUG:__main__: _out_messages 0, _in_messages 0, _inflight_messages -4
DEBUG:__main__:Sending PUBCOMP (Mid: 5)
```

Here is a MCVE

```
import sys
import paho.mqtt.client as mqtt
from time import sleep
import logging

logging.basicConfig(
    level=logging.DEBUG,
    stream=sys.stdout,
)
logger = logging.getLogger(__name__)

MQTT_TOPIC = ""test""
MQTT_PUBLISH_QOS = 2
MQTT_SUBSCRIBE_QOS = 2

def on_message(client, userdata, message):

    logger.debug(f""received payload {message.payload.decode('utf-8')}, mid: {message.mid}"")
    logger.debug(f"" _out_messages {len(client._out_messages)}, _in_messages {len(client._in_messages)}, _inflight_messages {client._inflight_messages}"")


mqttc = mqtt.Client(client_id=""client"")
mqttc.max_inflight_messages_set(20)
mqttc.max_queued_messages_set(0)
mqttc.enable_logger(logger)

mqttc.on_message = on_message
mqttc.connect(""localhost"", port=1883, keepalive=5)
mqttc.subscribe(MQTT_TOPIC, qos=MQTT_SUBSCRIBE_QOS)
mqttc.loop_start()

n = 0
while True:
    mqttc.publish(MQTT_TOPIC, n, MQTT_PUBLISH_QOS)
    n += 1
    sleep(1.0)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/805/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/805,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yHG0L,paho.mqtt.python,1914465547,805,NA,harrandt,116627373,,,NA,2024-01-29T11:07:53Z,2024-01-29T11:07:53Z,Closed by mistake. Reopening.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yHG0L/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/807,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/807,paho.mqtt.python,2101796188,807,Error/status handling in publish.single method,buhln,98514822,nico,,CLOSED,2024-01-26T08:29:50Z,2024-01-29T06:19:08Z,"We are using the publish.single method for sending MQTT messages in a really low frequency and it works great as long the server is available. Unfortunatly we see no possibility at the moment to monitor the successfull sent of the message. Is there a possible solution for this? 

If the server is not available we catch this by try/except...

Thanks in advance!
nico","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/807/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/807,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x__kv,paho.mqtt.python,1912600879,807,NA,PierreF,359833,Pierre Fersing,,NA,2024-01-26T19:45:16Z,2024-01-26T19:45:16Z,"That seems like the wanted behavior. If publish.single return (without exception) your message is published. If not not, it's not published. Having a function raise exception on error (like network error) is the right behavior IMO.

I'm not sure what behavior you are expecting. Do you want publish.single to retry connection by itself (e.g. can't fail, either return on success or hang - possibly forever) ?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5x__kv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/807,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yFdt0,paho.mqtt.python,1914035060,807,NA,buhln,98514822,nico,,NA,2024-01-29T06:19:08Z,2024-01-29T06:19:08Z,"Hi, Thank you for your answer.

I was looking for the best way to handle this. As I mention, we are catch errors at the moment by try/except. If this is the best way to do this for this function I am fine with it. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yFdt0/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/810,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/810,paho.mqtt.python,2116488935,810,Inconsistent documentation,dannystaple,426859,Danny Staple,,OPEN,2024-02-03T13:47:01Z,2024-02-04T18:57:08Z,"# Prerequisites

A small team of volunteers monitors issues. Please help us to help you by making it simple to understand and, if possible,
replicate your issue. Prior to reporting a bug please:

 - [ ] Test the latest release of the library.
 - [x] Search existing issues.
 - [x] Read the relevant documentation. 
 - [ ] Review your server configuration and logs.
 - [ ] Consider testing against a different server (e.g. [mqtt.eclipseprojects.io](https://mqtt.eclipseprojects.io/) or [test.mosquitto.org](https://test.mosquitto.org/))
 - [ ] If possible, test using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
     to confirm the issue is specific to this client.
 - [ ] If you are unsure if you have found a bug, please consider asking on [stackoverflow](https://stackoverflow.com/) for a quicker response.

# Bug Description

The documentation for Python Paho is not consistent, nor is it clear what is the canonical documentation.
- There seems to be documentation in a readme.RST at the top of this repo.
- the documentation at https://eclipse.dev/paho/index.php?page=clients/python/docs/index.php (which isn't linked from anywhere in the repo).
- Inline function documentation, for example in the top of the client loop method, the strong recommendation about using the threaded loop methods.

Consistency, perhaps through using Sphinx or similar, would definitely help.

# Reproduction

Search for up-to-date canonical documentation for paho.mqtt.python.

# Environment

NA

# Logs

NA


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/810/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/810,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yyp3e,paho.mqtt.python,1925881310,810,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-04T18:57:07Z,2024-02-04T18:57:07Z,"This the aim of #804 which already merge README & docstring using Sphinx documentation.

I'll see what to do with https://eclipse.dev/paho (for the Python part) website.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5yyp3e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/811,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/811,paho.mqtt.python,2123967865,811,AttributeError: module 'trio' has no attribute 'MultiError',FilipeMarch,23220309,Filipe Marchesini,filipe.marchesini@gmail.com,CLOSED,2024-02-07T21:56:31Z,2024-02-08T18:54:35Z,"# Bug Description

`main.py`
```python
import asks, trio


async def get_google():
    response = await asks.get(""https://google.com"")
    print(response)


trio.run(get_google)
```

Executing `python main.py` results in the following error:
```python
Traceback (most recent call last):
File "".venv/lib/python3.11/site-packages/anyio/_core/_eventloop.py"", line 151, in get_asynclib
return sys.modules[modulename]
~~~~~~~~~~~^^^^^^^^^^^^
KeyError: 'anyio._backends._trio'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
File ""main.py"", line 9, in <module>
trio.run(get_google)
File "".venv/lib/python3.11/site-packages/trio/_core/_run.py"", line 2275, in run
raise runner.main_task_outcome.error
File ""main.py"", line 5, in get_google
response = await asks.get(""https://google.com"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "".venv/lib/python3.11/site-packages/asks/base_funcs.py"", line 30, in request
r = await s.request(method, url=uri, **kwargs)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "".venv/lib/python3.11/site-packages/asks/sessions.py"", line 198, in request
async with self.sema:
File "".venv/lib/python3.11/site-packages/anyio/_core/_synchronization.py"", line 300, in __aenter__
await self.acquire()
File "".venv/lib/python3.11/site-packages/anyio/_core/_synchronization.py"", line 313, in acquire
await checkpoint_if_cancelled()
File "".venv/lib/python3.11/site-packages/anyio/lowlevel.py"", line 45, in checkpoint_if_cancelled
await get_asynclib().checkpoint_if_cancelled()
^^^^^^^^^^^^^^
File "".venv/lib/python3.11/site-packages/anyio/_core/_eventloop.py"", line 153, in get_asynclib
return import_module(modulename)
^^^^^^^^^^^^^^^^^^^^^^^^^
File "".pyenv/versions/3.11.6/lib/python3.11/importlib/__init__.py"", line 126, in import_module
return _bootstrap._gcd_import(name[level:], package, level)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File ""<frozen importlib._bootstrap>"", line 1204, in _gcd_import
File ""<frozen importlib._bootstrap>"", line 1176, in _find_and_load
File ""<frozen importlib._bootstrap>"", line 1147, in _find_and_load_unlocked
File ""<frozen importlib._bootstrap>"", line 690, in _load_unlocked
File ""<frozen importlib._bootstrap_external>"", line 940, in exec_module
File ""<frozen importlib._bootstrap>"", line 241, in _call_with_frames_removed
File "".venv/lib/python3.11/site-packages/anyio/_backends/_trio.py"", line 162, in <module>
class ExceptionGroup(BaseExceptionGroup, trio.MultiError):
^^^^^^^^^^^^^^^
File "".venv/lib/python3.11/site-packages/trio/_deprecate.py"", line 153, in __getattr__
raise AttributeError(msg.format(self.__name__, name))
AttributeError: module 'trio' has no attribute 'MultiError'
```

# Reproduction

- poetry init
- pyenv local 3.11.6
- poetry env use $(pyenv which python)
- poetry shell
- poetry add trio
- poetry add asks

`python main.py`

# Environment

* Python version: 3.11.6
* Library version: 0.24.0
* Operating system (including version): Arch Linux
![image](https://github.com/eclipse/paho.mqtt.python/assets/23220309/834d22b2-2d3f-4ac6-b39c-027aef903e8d)","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/811/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/811,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zPxkP,paho.mqtt.python,1933515023,811,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-08T07:41:32Z,2024-02-08T07:41:32Z,This bug is not unrelated to this project.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zPxkP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/811,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zUedH,paho.mqtt.python,1934747463,811,NA,FilipeMarch,23220309,Filipe Marchesini,filipe.marchesini@gmail.com,NA,2024-02-08T18:54:22Z,2024-02-08T18:54:22Z,sorry it seems I clicked on the wrong browser tab lol,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zUedH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812,paho.mqtt.python,2124806652,812,"Member-object of Client-class keeps reference to the containing object, therefore preventing the garbage-collector from cleaning up the containing object.",vitschwilk,142392177,Tino,,CLOSED,2024-02-08T10:20:53Z,2024-02-12T21:49:49Z,"# Bug Description

I wrote a wrapper class for the mqtt client creation to publish data once in a while. The call is used as an object inside another class. This containing class is only used when needed therefor the object will be created inside a function scope. When exiting the function, I assumed the garbage-collector (gc) deletes the object. This does not happen.

After exiting the function, I still see references to this class in the gc. Therefore `__del__()` of my wrapper-class is never called and the loop is not stopped.

# Reproduction
wrapper class:
```python
import gc
import time
import paho.mqtt.client as mqtt

class MqttWrapper:
    def __init__(self, client_name: str, host=""127.0.0.1"", port=1883):
        self.connected = None
        self._host = host
        self._port = port
        self._client_name = client_name

        self.client = mqtt.Client(self._client_name)
        self.client.username_pw_set(""root"", ""rootpassword"")
        self.client.on_connect = self._on_connect
        self.client.on_disconnect = self._on_disconnect
        self.client.on_publish = self._callback_on_publish
        self.client.connect(self._host, self._port)
        self.client.loop_start()
        print(""DEBUG: mqtt created"")
        self._wait_for_connection()

    def __del__(self):
        print(""destructor of MqttWrapper"")
        self.client.loop_stop()

    def _wait_for_connection(self, interval=0.1, timeout=5.0):
        '''wait for a connection to be established within 5 s'''
        start = now = time.time()
        connected = self.client.is_connected()

        while not connected and (now - start) < timeout:
            time.sleep(interval)
            connected = self.client.is_connected()
            now = time.time()

        if not connected:
            print(f""WARNING: MQTT didn't connect within {timeout} s timeout"")
            self.connected = False
        else:
            print(f""DEBUG: MQTT connected after {(now - start)} s"", )
            self.connected = True

    def _callback_on_publish(self, client, userdata, mid):
        print(""DEBUG: data published "")

    def _on_connect(self, client, userdata, flags, rc):
        if rc == 0:
            print(f""INFO: Connecting to MQTT Broker! on {self._host}:{self._port}"")
        else:
            print(f""ERROR: Failed to connect, return code {rc}='{mqtt.connack_string(rc)}'"")
            self.connected = False

    def _on_disconnect(self, client, userdata, rc):
        if rc != 0:
            print(f""WARNING: Mqtt client '{client}' disconnected"")
        self.connected = False

    def subscribe(self, topic: str, *args, **kwargs):
        self.client.subscribe(topic, *args, **kwargs)

    def publish(self, topic: str, payload: str, *args, **kwargs):
        self.client.publish(topic, payload, *args, **kwargs)
````

usage of the wrapper class:

```python
def get_gc(st=""""):
    print(""<######################>"",st)
    for obj in gc.get_objects():
        if isinstance(obj, MqttWrapper):
            print(obj)
            print(gc.get_referents(obj))

def client1():
    get_gc(""in c1"")
    test_client1 = MqttWrapper(""test_client1"")
    test_client1.publish(""/test/topic"", ""import"")
    get_gc(""in c1 after test client"")
    time.sleep(2) # wait for publish to be processed


def client2():
    get_gc(""in c2"")
    test_client2 = MqttWrapper(""test_client2"")
    test_client2.publish(""/test/topic"", ""import"")
    get_gc(""in c2 after test client"")

if __name__ == ""__main__"":
    client1()
    get_gc(""post c1; pre c2"")
    client2()
    get_gc(""post c2"")
    print(""finish"")

print(""end of script"")
````

This leads to the following output:
````
<######################> in c1
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883
DEBUG: mqtt created
DEBUG: MQTT connected after 0.0 s
<######################> in c1 after test client
<__main__.MqttWrapper object at 0x7f29259ebc70>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f29259ebc10>}, <class '__main__.MqttWrapper'>]
DEBUG: data published 
<######################> post c1; pre c2
<__main__.MqttWrapper object at 0x7f29259ebc70>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f29259ebc10>}, <class '__main__.MqttWrapper'>]
<######################> in c2
<__main__.MqttWrapper object at 0x7f29259ebc70>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f29259ebc10>}, <class '__main__.MqttWrapper'>]
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883
DEBUG: mqtt created
DEBUG: MQTT connected after 0.0 s
<######################> in c2 after test client
<__main__.MqttWrapper object at 0x7f29252521a0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2', 'client': <paho.mqtt.client.Client object at 0x7f2925252110>}, <class '__main__.MqttWrapper'>]
<__main__.MqttWrapper object at 0x7f29259ebc70>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f29259ebc10>}, <class '__main__.MqttWrapper'>]
<######################> post c2
<__main__.MqttWrapper object at 0x7f29252521a0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2', 'client': <paho.mqtt.client.Client object at 0x7f2925252110>}, <class '__main__.MqttWrapper'>]
DEBUG: data published 
<__main__.MqttWrapper object at 0x7f29259ebc70>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f29259ebc10>}, <class '__main__.MqttWrapper'>]
finish
end of script
````

As you can see the object of test-client1 is never deleted. I cannot access it out of scope obviously but it is still in memory (0x7f29259ebc70).

As a workaround, I now stop the loop inside the scrope where the wrapper-object exists and delete the client member of it. Then the gc works as intended. But this is verry easy to forger/not-know because it is verry different from any other python experience and In my opinion an incorrect behaviour.

So by adding:
````python
test_client1.client.loop_stop() 
del test_client1.client
get_gc(""in c1 after cleanup  test client"")
````
and removing the `self.client.loop_stop()` in `__del__()`
to the functions, I get the following output:
````
<######################> in c1
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883DEBUG: mqtt created
DEBUG: MQTT connected after 0.0 s

<######################> in c1 after test client
<__main__.MqttWrapper object at 0x7f43e054fcd0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f43e054fc70>}, <class '__main__.MqttWrapper'>]
DEBUG: data published 
<######################> in c1 after cleanup  test client
<__main__.MqttWrapper object at 0x7f43e054fcd0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1'}, <class '__main__.MqttWrapper'>]
destructor of MqttWrapper
<######################> post c1; pre c2
<######################> in c2
DEBUG: mqtt created
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883
DEBUG: MQTT connected after 0.10019731521606445 s
<######################> in c2 after test client
<__main__.MqttWrapper object at 0x7f43e00e07c0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2', 'client': <paho.mqtt.client.Client object at 0x7f43e054fcd0>}, <class '__main__.MqttWrapper'>]
DEBUG: data published 
<######################> in c2 after cleanup  test client
<__main__.MqttWrapper object at 0x7f43e00e07c0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2'}, <class '__main__.MqttWrapper'>]
destructor of MqttWrapper
<######################> post c2
finish
end of script
````
Now only one object exists when creating the second client. In addition the print from `__del__()` now is also present.


# Environment

* Python version: 3.10.9
* Library version: 1.6.1
* Operating system (including version): Ubuntu 20.04.6 LTS; Linux 5.4.0-171-generic
* MQTT server (name, version, configuration, hosting details): mosquitto, version 1.6.9 (MQTT v3.1.1 broker), configuration is default

# Logs
mosquitto.log entries when running the script:
````
1707386521: New client connected from 127.0.0.1 as test_client2 (p2, c1, k60, u'root').
1707386521: Socket error on client test_client2, disconnecting.
1707386581: New connection from 127.0.0.1 on port 1883.
1707386581: New client connected from 127.0.0.1 as test_client1 (p2, c1, k60, u'root').
1707386583: New connection from 127.0.0.1 on port 1883.
````

run with enabled logging:
````
<######################> in c1
2024-02-08 10:12:18,648 - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k60) client_id=b'test_client1'
DEBUG: mqtt created
2024-02-08 10:12:18,648 - DEBUG - Received CONNACK (0, 0)
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883
DEBUG: MQTT connected after 0.0 s
2024-02-08 10:12:18,649 - DEBUG - Sending PUBLISH (d0, q0, r0, m1), 'b'/test/topic'', ... (6 bytes)
<######################> in c1 after test client
<__main__.MqttWrapper object at 0x7f027c5c7100>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f027bf288b0>}, <class '__main__.MqttWrapper'>]
DEBUG: data published 
<######################> post c1; pre c2
<__main__.MqttWrapper object at 0x7f027c5c7100>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f027bf288b0>}, <class '__main__.MqttWrapper'>]
<######################> in c2
<__main__.MqttWrapper object at 0x7f027c5c7100>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f027bf288b0>}, <class '__main__.MqttWrapper'>]
2024-02-08 10:12:20,659 - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k60) client_id=b'test_client2'
2024-02-08 10:12:20,659 - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k60) client_id=b'test_client2'
2024-02-08 10:12:20,660 - DEBUG - Received CONNACK (0, 0)
2024-02-08 10:12:20,660 - DEBUG - Received CONNACK (0, 0)
INFO: Connecting to MQTT Broker! on 127.0.0.1:1883
DEBUG: mqtt created
DEBUG: MQTT connected after 0.0 s
2024-02-08 10:12:20,660 - DEBUG - Sending PUBLISH (d0, q0, r0, m1), 'b'/test/topic'', ... (6 bytes)
2024-02-08 10:12:20,660 - DEBUG - Sending PUBLISH (d0, q0, r0, m1), 'b'/test/topic'', ... (6 bytes)
<######################> in c2 after test client
<__main__.MqttWrapper object at 0x7f027be2a8c0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2', 'client': <paho.mqtt.client.Client object at 0x7f027be2a9b0>}, <class '__main__.MqttWrapper'>]
<__main__.MqttWrapper object at 0x7f027c5c7100>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f027bf288b0>}, <class '__main__.MqttWrapper'>]
<######################> post c2
<__main__.MqttWrapper object at 0x7f027be2a8c0>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client2', 'client': <paho.mqtt.client.Client object at 0x7f027be2a9b0>}, <class '__main__.MqttWrapper'>]
<__main__.MqttWrapper object at 0x7f027c5c7100>
[{'connected': True, '_host': '127.0.0.1', '_port': 1883, '_client_name': 'test_client1', 'client': <paho.mqtt.client.Client object at 0x7f027bf288b0>}, <class '__main__.MqttWrapper'>]
finish
end of script
````

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zc7Lu,paho.mqtt.python,1936962286,812,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-10T10:13:27Z,2024-02-10T10:13:27Z,"Unless I'm missing something, you use-case isn't supported by Python. Relying on GC to cleanup resource isn't supported by Python AFAIK (and I believe no language with GC support this).

The GC do not guarantee that object get deleted immediately when they lost a reference (your function exit). CPython is a bit special as it do it immediately in *some* case (when there is no circular reference and paho-mqtt make no promise on circular reference).

If you want to ensure any resource get cleanup, you have to cleanup them at the location you want to cleanup them. Usually using `with` context (e.g. not `fileobj = open(""filename"")` but `with open(""filename"") as fileobj:`). But using a finally work well also

So either make your wrapper class usable as with-statement context or add a finally to cleanup resource.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zc7Lu/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zhuHL,paho.mqtt.python,1938219467,812,NA,vitschwilk,142392177,Tino,,NA,2024-02-12T08:22:21Z,2024-02-12T08:22:21Z,"Hi, thank you for your timely answer. That is odd to not support. I don't understand how this client object is different from any other member in my wrapper-class. How can a member object keep the containing object alive?

I do agree that the GC does not ""need"" to clean up immediately. My issue is, I'm using the same approach in an open-api-backend. Therefore, my python never exits the `__main__.py`-""script"". After running a while and accessing some routs that use this wrapper class, I noticed that the threads from mqtt are never closed. This should have happened in my `__dell__` method that is never called.

I previously did try using the class with a context manager, but did not fully delete the client object. 
I tried again and got it working. For the purpose of searchability, here is the code snipped:

````python
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        print(""exiting"")
        self.client.loop_stop()

    def __del__(self):
        print(""destructor of MqttWrapper"")
        if self.client:
            self.client.loop_stop()
````
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zhuHL/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/812,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5znKmG,paho.mqtt.python,1939646854,812,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-12T21:49:48Z,2024-02-12T21:49:48Z,"I'm closing the issue as I believe the problem is solved by last comment. Feel free to reopen if that not the case.

> I don't understand how this client object is different from any other member in my wrapper-class. How can a member object keep the containing object alive?

The paho-mqtt Client (the value of field `self.client` in your wrapper class) is still referenced by the thread started by `loop_start` (that thread run the paho Client). The paho Client have reference to the method `_callback_on_publish` (thought `on_publish`). The method had reference to its instance. Therefor even if you no longer have any reference to your wrapper class, it's still hold by this chain: paho thread -> paho Client -> on_publish -> the wrapper class. The ""issue"" is the presence of callback (unavoidable with paho-mqtt).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5znKmG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/813,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/813,paho.mqtt.python,2127903842,813,PINGREQ still going out even when QoS 1 publishes are happening within keep alive period,tsturzl,623753,Travis Sturzl,travissturzl@gmail.com,OPEN,2024-02-09T21:59:23Z,2024-06-06T19:02:22Z,"# Prerequisites

*Note: You may remove this section prior to submitting your report.*

A small team of volunteers monitors issues. Please help us to help you by making it simple to understand and, if possible,
replicate your issue. Prior to reporting a bug please:

 - [ ] Test the latest release of the library.
 - [ ] Search existing issues.
 - [ ] Read the relevant documentation. 
 - [ ] Review your server configuration and logs.
 - [ ] Consider testing against a different server (e.g. [mqtt.eclipseprojects.io](https://mqtt.eclipseprojects.io/) or [test.mosquitto.org](https://test.mosquitto.org/))
 - [ ] If possible, test using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
     to confirm the issue is specific to this client.
 - [ ] If you are unsure if you have found a bug, please consider asking on [stackoverflow](https://stackoverflow.com/) for a quicker response.

# Bug Description

I have a client configured for a 4 second keep alive, and I'm publishing QoS 1 messages every 500ms. I still see PINGREQ going out in a packet sniffer. This means that keep alive is making unneeded ping requests. This doesn't track the behavior the documentation seems to suggest, nor does it seem to resemble the behavior of other clients such as the paho.mqtt.java client. Obviously this isn't a major behavior issue, but we noticed this behavioral difference while packet sniffing python and Java clients, and it seems python is the outlier in terms of behavior, especially since the documentation seems to suggest that keep alive should only ping in absence of other control messages.

# Reproduction

I'll just provide a test script:

```
import paho.mqtt.client as mqtt
import time

client = mqtt.Client()

def on_disconnected(_client, _userdata, _rc):
    print(""DISCONNECTED"")

client.on_disconnect = on_disconnected

# enable logging, let it create it's own logger
client.enable_logger(logger=None)

print(""connecting..."")
client.connect(""localhost"", 1883, 5)
print(""connected"")
print(""starting loop..."")
client.loop_start()
print(""loop started"")
while True:
    print(""publishing message..."")
    client.publish(""testtopic1"", ""hello world"", qos=1)
    time.sleep(0.5)
```

# Environment

* Python version: 3.10.9
* Library version: 1.6.1
* Operating system (including version): Ubuntu 22.04.03
* MQTT server (name, version, configuration, hosting details): Mosquito, but have validated against another server implementation as well

# Logs

Logs are largely irrelevant. I observed this in a debugger, ping is still happening even though publish QoS 1 is happening many times in the keep alive period.


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/813/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/813,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AVoXk,paho.mqtt.python,2153154020,813,NA,langer-volt,142925079,Greg Langer,,NA,2024-06-06T18:32:48Z,2024-06-06T18:32:48Z,"Is your client subscribing to anything? I believe a long duration of no messages in could be triggering your PINGREQ

It's a logical OR that can be triggered if `<msg_in_expired> OR <msg_out_expired>`
https://github.com/eclipse/paho.mqtt.python/blob/d45de3737879cfe7a6acc361631fa5cb1ef584bb/src/paho/mqtt/client.py#L3271","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AVoXk/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/813,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AV4VG,paho.mqtt.python,2153219398,813,NA,tsturzl,623753,Travis Sturzl,travissturzl@gmail.com,NA,2024-06-06T19:02:20Z,2024-06-06T19:02:20Z,"I don't believe we need to be subscribed on anything. Doing the exact same thing I Java results in no PINGREQ being sent. QoS 1 will always have a PUBACK on success, so it should be enough to prove the connection is open and functional bidirectionally.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6AV4VG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,paho.mqtt.python,2130108535,814,paho-mqtt-2.0.0 client issue,liyinan0501,19533146,Yinan Li,gabriel.li5566@gmail.com,OPEN,2024-02-12T13:09:59Z,2024-09-09T23:00:16Z,"# Bug Description

When running the script with paho-mqtt 2.0.0 and initializing the Client(), an AttributeError occurs: 'Client' object has no attribute '_sock'. However, when changing to paho-mqtt 1.6.1, everything works fine.

# Environment

* Python version: 3.8
* Library version: 2.0.0
* Operating system (including version): Ubuntu 20.04.6
* MQTT server (name, version, configuration, hosting details): 2.0.18

# Logs
Exception ignored in: <function Client.__del__ at 0x7f23e91e2040>
Traceback (most recent call last):
  File ""/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 874, in __del__
    self._reset_sockets()
  File ""/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1133, in _reset_sockets
    self._sock_close()
  File ""/usr/local/lib/python3.8/site-packages/paho/mqtt/client.py"", line 1119, in _sock_close
    if not self._sock:
AttributeError: 'Client' object has no attribute '_sock'



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zju0j,paho.mqtt.python,1938746659,814,NA,jimmusson,50077386,,,NA,2024-02-12T14:07:10Z,2024-02-12T14:07:10Z,I have this exact problem with raspberry pi Bullseye 32 bit.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zju0j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zjwkw,paho.mqtt.python,1938753840,814,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-12T14:11:20Z,2024-02-12T14:11:20Z,"I believe you didn't provided the full traceback. Please report full traceback when submitting bug report.

I believe something similar to the following is missing:
```
TypeError: Client.__init__() missing 1 required positional argument: 'callback_api_version'
```

Please read https://eclipse.dev/paho/files/paho.mqtt.python/html/migrations.html","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zjwkw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5znur9,paho.mqtt.python,1939794685,814,NA,matthuisman,6225961,Matt Huisman,,NA,2024-02-12T23:41:02Z,2024-02-12T23:41:02Z,"mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1) fixed for me :)

Problem was that the AttributeError: 'Client' object has no attribute '_sock' was coming out in console and the 
TypeError: Client.__init__() missing 1 required positional argument: 'callback_api_version' was gobbled up elsewhere
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5znur9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zpd8H,paho.mqtt.python,1940250375,814,NA,ddevassy,40707607,,,NA,2024-02-13T02:13:36Z,2024-02-13T02:13:36Z,"I also got into the same error.

Is it a good idea to provide a default value for API_VERSION for avoiding the AttributeError? Any thoughts?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zpd8H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zqqLc,paho.mqtt.python,1940562652,814,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-02-13T07:21:10Z,2024-02-13T07:21:10Z,"@PierreF this is going to come up a lot (there are already two questions on [stack overflow](https://stackoverflow.com/q/77984857/11810946)). I wonder if it's worth adding something at the start of the readme, and perhaps a pinned issue? 

Most tutorials just say to run `pip3 install paho-mqtt` so will get version 2, meaning that the tutorial code ([e.g.](https://www.emqx.com/en/blog/how-to-use-mqtt-in-python)) will throw this error (until the tutorial is updated). This is likely to confuse a lot of new users (I understand that it's unavoidable, but I believe it's worth making the solution highly visible). I've reached out to the authors of the tutorials that topped my search results and suggested they update their tutorials to use `pip install paho-mqtt<2.0.0` for the time being.

On a linked note the error says `see migrations.md for details` but that file is not obvious in the repo (the file being `[migrations.rst](https://github.com/eclipse/paho.mqtt.python/blob/master/docs/migrations.rst)`).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zqqLc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zyLfd,paho.mqtt.python,1942534109,814,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-13T21:06:30Z,2024-02-13T21:06:30Z,"> Is it a good idea to provide a default value for API_VERSION for avoiding the AttributeError? Any thoughts?

I think of this... but it means each time the default change it will cause a (potentially rather silent) breaking change.

> On a linked note the error says see migrations.md for details but that file is not obvious in the repo [...]

yeah... I moved the file and forget to update that link.

I'll also try to see if we could avoid the 2nd error (the delete of `_sock`) to make clearer where is the actual error. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zyLfd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zyju8,paho.mqtt.python,1942633404,814,NA,matthuisman,6225961,Matt Huisman,,NA,2024-02-13T21:33:20Z,2024-02-13T21:33:20Z,"yes, if the first real cause was the only error - be much quicker for users to resolve :)

could the default not just be V1?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zyju8/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zzZo3,paho.mqtt.python,1942854199,814,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-02-13T23:34:49Z,2024-02-13T23:34:49Z,"> could the default not just be V1?

This is an option, however I wonder if doing so might just prolong the pain...

With the current solution (deliberately breaking old code) a lot of users are going to hit this message in the near future, learn about the V2 release, and update their code (and, hopefully, tutorials etc). We can ensure the solution is highly visible and attempt to get popular tutorials updated.

If the library defaults to V1 it's likely that a lot of users will not really notice the V2 release. Whilst this would result in less immediate pain, it seems likely to result in ongoing confusion as users copy/paste incompatible code (e.g. copying  portions of examples included in this repo into their V1 code bases). This will result in somewhat confusing runtime errors, and it's likely to be more difficult to find solutions (the current message is pretty clear, and the stack overflow question has 300+ views in under a day).

This was always going to be a painful change; but one I was really happy to see Pierre make (the V1 API was confusing; particularly the way the API differed depending upon whether you were connected via V3 or V5!).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5zzZo3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54FOWW,paho.mqtt.python,2014635414,814,NA,fuomag9,1580624,,,NA,2024-03-22T08:52:25Z,2024-03-22T08:52:25Z,"```
def connect(data):
    client = mqtt.Client.__init__(CallbackAPIVersion.VERSION2)
    client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
    client.connect(MQTT_BROKER_HOST, MQTT_BROKER_PORT, 60)
```  
  
Running this gives me:

```
ERROR:root:Error notifying new subdomains: Client.__init__() missing 1 required positional argument: 'callback_api_version'
```

I'm using 2.0.0 version

```
root@d7bdbdd0a329:/app# pip freeze
certifi==2024.2.2
charset-normalizer==3.3.2
filelock==3.13.1
greenlet==3.0.3
idna==3.6
paho-mqtt==2.0.0
psycopg2-binary==2.9.9
requests==2.31.0
requests-file==2.0.0
SQLAlchemy==2.0.28
tldextract==5.1.2
typing_extensions==4.10.0
urllib3==2.2.1
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54FOWW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54F7yR,paho.mqtt.python,2014821521,814,NA,PierreF,359833,Pierre Fersing,,NA,2024-03-22T10:46:11Z,2024-03-22T10:46:11Z,"@fuomag9 
I don't understand the way you use Python classes, this seems a wrong usage of Python to me. Could you open another issue with a justification on why paho should support such usage of Python and why it's a paho bug ?

Your error seems perfectly normal to me, since you do not provide the require argument `callback_api_version` to `__init__`, you only provide the `self` argument with a wrong value type (paho expect an instance of `Client` class).

But I don't understand why you don't use standard way to create a instance ?
```
client = mqtt.Client(CallbackAPIVersion.VERSION2)
```

This point don't is not related to this issue, it's another issue. Please open a new issue if the problem persist.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54F7yR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56KDJd,paho.mqtt.python,2049454685,814,NA,jimfunk,1350280,James Oakley,,NA,2024-04-11T11:13:40Z,2024-04-11T11:13:40Z,"As someone who just ran into this, I would like to add my 2 cents.

My problem with the approach taken is that it makes supporting older and newer versions more difficult and it's a bit ugly. For example, now I have to use the library like this:

```
import paho.mqtt
import paho.mqtt.client as mqtt

USE_VERSION2_CALLBACKS = not paho.mqtt.__version__.startswith(""1."")

...

        if USE_VERSION2_CALLBACKS:
            self.mqtt = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=mqtt_client_id)
        else:
            self.mqtt = mqtt.Client(client_id=mqtt_client_id)
```

This is pretty awkward. IMO and actually encourages people to just use VERSION1 and not update to the new ones. I have 6 or 7 apps I need to update to look like this now.

I would have appreciated this approach:

1. Default to the version 2 callback API, or dispense with the notion of a callback API version
2. Add code to the callback property setters to inspect the callback and figure out how many arguments are expected. If the arguments match the old one signature, emit a deprecation warning but allow it to be used for now.

That way the older arguments can be completely deprecated at a later time, but that gives people time to adjust.

As it stands right now, everybody *has* to make a change right now as it's broken. The point of deprecation warnings is to give people a window to make the changes so that applications do not break. The approach taken defeats this purpose.

If the approach I described above was taken, it would have been a lot more smooth, especially since adjusting the callbacks is not exactly difficult. Why would I really want to make 2 changes at different times when only one is needed?

For example, this is all I could have needed in an app I updated just now to support both:

```
-     def connect_callback(self, client, userdata, flags, rc)
+     def connect_callback(self, client, userdata, flags, reason_code, properties=None)
...
-     def on_publish(self, client, userdata, mid):
+     def on_publish(self, client, userdata, mid, reason_codes=None, properties=None):
```

If the approach seems reasonable to you I would be happy to make a PR.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56KDJd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56QPiU,paho.mqtt.python,2051078292,814,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-12T06:31:05Z,2024-04-12T06:31:05Z,"#831 already do some step to reduce the breaking changes.

On your suggestion, I do have few remark:
* since the callback signature detection might not be able to known the version (most obvious case: `def on_connect(*args)`), I think we need to be clear what is the behavior of the detection.
* To avoid changes I believe the behavior should be: if signature is the one of callback v2(*) then use version2, else we fallback to version1.
* That probably means the default will be VERSION1 (with possible automatic upgrade to VERSION2). Should we then still call it ` CallbackAPIVersion.VERSION1` ? Or should it be ` CallbackAPIVersion.COMPATIBILITY_VERSION`  ?

(*): I'm not really sure how we could detect a v2 callback, this seems tricky to define. I believe the followings are version 2:
```
def connect_callback(self, client, userdata, flags, reason_code, properties=None):
def connect_callback(self, client, userdata, flags, reason_code, properties):
def connect_callback(self, client, my_data_names, flags, reason_code, properties):
```

Note that the difference between the following two is very tiny:
```
def connect_callback(self, client, userdata, flags, rc, properties=None)   # I believe this one was suggestion in VERSION 1 for MQTT 5 support
def connect_callback(self, client, userdata, flags, reason_code, properties=None):
``` 

If I understand right your use-case, it's on a application where a 3rd party library (or just something not easy to upgrade) create the paho client, but you can upgrade the callback ?
In that case, the version detection might always make sense, and we will probably kept it forever, just that detection version might evolve (today v1 and v2, later v2 and v3...).

So you suggestion seems a good idea, but I think we will need an option to skip version detection and choose a specific version.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56QPiU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs565q1G,paho.mqtt.python,2061937990,814,NA,jimfunk,1350280,James Oakley,,NA,2024-04-17T18:22:23Z,2024-04-17T18:22:23Z,"@PierreF When I made my suggestion I didn't realize that MQTT5 changed the values of the reason codes. That is unfortunate and certainly makes the heuristic a bit more difficult.

However, it seems the existence of the properties field as a positional or keyword arg may indicate that it was intended for either the 1.x release with MQTT5 support or the 2.x release, in which case the `ReasonCode` instance would probably be appropriate. If the properties field was not present at all, there would be no ambiguity.

However, I would suspect that most instances of the connect callbacks are either ignoring `rc`/`reason_code` or merely logging it.

But yeah, thanks to the reason code change, it can't actually be perfect, and an override would probably be warranted.

I still think the notion of a callback API version in this manner may make it more complicated than it needs to be. However, it might make more sense if that was defined explicitly via a namespace, for example:

```
# V1 explicit
client.callback.v1.connect = 

# V1 compatibility
client.on_connect = ...

# V2
client.callback.v2.connect = 
```

And then for each time it needs to perform a callback it could check for a v2 callback, then a v1 callback. That would be a much bigger change however and look less ergonomic.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs565q1G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57NWAO,paho.mqtt.python,2067095566,814,NA,mschlenstedt,16830799,,,NA,2024-04-19T18:33:36Z,2024-04-19T18:33:36Z,"Well, a lot of existing projects are broken now. How should a user without programming skills should handle this?! These changes are the badest idea ever - sorry to be honest. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57NWAO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57PtXD,paho.mqtt.python,2067715523,814,NA,uwedisch,24267159,Uwe Disch,uwe.disch@disch-online.de,NA,2024-04-20T16:00:01Z,2024-04-20T16:00:01Z,"> Well, a lot of existing projects are broken now. How should a user without programming skills should handle this?! These changes are the badest idea ever - sorry to be honest.

For example notus-scanner and ospd-openvas, both of GVM, are broken.

That is bad coding style. Changes must maintain ""legacy"" intefaces, i.e. the V1 must work without any knowledge of V2.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57PtXD/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57Pt5n,paho.mqtt.python,2067717735,814,NA,uwedisch,24267159,Uwe Disch,uwe.disch@disch-online.de,NA,2024-04-20T16:08:33Z,2024-04-20T16:08:33Z,"> If the library defaults to V1 it's likely that a lot of users will not really notice the V2 release.

I think, it's more important for the whole community to have stable code than beeing always informed about new features. A new feature is worthless if something is broken. And for sure, you have many ways of informing users of new attributes ...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57Pt5n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57PyA7,paho.mqtt.python,2067734587,814,NA,mschlenstedt,16830799,,,NA,2024-04-20T17:20:22Z,2024-04-20T17:20:22Z,"To be honest an end-user is not interested in any APIs, versions, super-dupa-new features. It should just work and they want to have their values in their MQTT brokers. And that is what V1 did now for years. Maybe V2 is really a big step forward, but only programmers will be interested in that. 

All other just want to have a running system.

Another broken project now: https://github.com/flyte/mqtt-io/issues/348 The authors now discuss to change their whole (!!!) code basis just to be comptatible with paho-mqtt V2. What a waste of limited ressources...","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57PyA7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57P17x,paho.mqtt.python,2067750641,814,NA,uwedisch,24267159,Uwe Disch,uwe.disch@disch-online.de,NA,2024-04-20T18:30:47Z,2024-04-20T18:30:47Z,"> > Well, a lot of existing projects are broken now. How should a user without programming skills should handle this?! These changes are the badest idea ever - sorry to be honest.
> 
> For example notus-scanner and ospd-openvas, both of GVM, are broken.
> 
> That is bad coding style. Changes must maintain ""legacy"" intefaces, i.e. the V1 must work without any knowledge of V2.

In that situation GVM is part of Kali Linux using the pre-packaged Python libraries.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57P17x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57P2ni,paho.mqtt.python,2067753442,814,NA,uwedisch,24267159,Uwe Disch,uwe.disch@disch-online.de,NA,2024-04-20T18:44:00Z,2024-04-20T18:44:00Z,"Did I see that correctly?
V2 was introduced some weeks ago and since that V1 isn't working anymore without change.
It is part of being patient with each other to make such a serious change a year or so in advance.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs57P2ni/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/814,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6LbthQ,paho.mqtt.python,2339297360,814,NA,OptimusGREEN,17599575,OptimusGREEN,,NA,2024-09-09T23:00:15Z,2024-09-09T23:00:15Z,2.1.0 fixes this for me,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6LbthQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/815,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/815,paho.mqtt.python,2133984280,815,New documentation is not available,flbraun,15526835,,,CLOSED,2024-02-14T10:11:26Z,2024-02-14T12:52:28Z,"The new documentation mentioned in the v2.0 release notes and README is not available. Opening the links returns HTTP 503.

https://eclipse.dev/paho/files/paho.mqtt.python/html/index.html
https://eclipse.dev/paho/files/paho.mqtt.python/html/migrations.html
https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/815/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/815,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5z2p3R,paho.mqtt.python,1943707089,815,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-14T12:49:18Z,2024-02-14T12:49:18Z,All the links you provided are working from my laptop or my mobile. Maybe there had a temporary issue.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5z2p3R/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/815,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5z2rCf,paho.mqtt.python,1943711903,815,NA,flbraun,15526835,,,NA,2024-02-14T12:52:28Z,2024-02-14T12:52:28Z,"Can confirm that it now works again. It wasn't available for at least 2 hours, so I thought it was something more serious. Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5z2rCf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,paho.mqtt.python,2146045564,816,Connect with MQTTv5 by default,RichieB2B,1461970,Richie B2B,,OPEN,2024-02-21T07:50:43Z,2024-07-17T23:32:38Z,"Even with v2.0.0 now released, the default protocol is still MQTTv311:

https://github.com/eclipse/paho.mqtt.python/blob/ebffdc2ca0a43fd87dfd270bbb16007591139626/src/paho/mqtt/client.py#L735

Isn't it time to use MQTTv5 by default?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51Ichv,paho.mqtt.python,1965148271,816,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-26T19:59:29Z,2024-02-26T19:59:29Z,"That would have been a very good idea for 2.0 due to possible breaking change :/

I'm not sure we could do this without another breaking change and therefor wait for version 3.0. Broker with no support of MQTTv5 don't look a big issue, we could fallback to MQTTv3.11 (as we do for MQTTv3.11 with fallback to MQTTv3).
But there is API change between MQTTv5 & MQTTv3.11:
* At least if using callback_api_version to version1, the callback change between MQTTv3* and MQTTv5
* I think to clean_session vs clean_start
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51Ichv/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51Ily4,paho.mqtt.python,1965186232,816,NA,RichieB2B,1461970,Richie B2B,,NA,2024-02-26T20:22:32Z,2024-02-26T20:22:32Z,"The breaking change in 2.0 and the mention of MQTTv5 on the [migration](https://eclipse.dev/paho/files/paho.mqtt.python/html/migrations.html) page is the only reason I started looking into this. I never realized that the [MQTTv5 standard](https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html) was released in 2019 and that my [MQTT broker](https://mosquitto.org) already supports it. Pretty odd the client needs a special configuration to use it.

How about attempting to connect with MQTTv5 (with a fallback to MQTTv311) when `CallbackAPIVersion.VERSION2` is used?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51Ily4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51IqO4,paho.mqtt.python,1965204408,816,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-26T20:28:15Z,2024-02-26T20:28:15Z,"> How about attempting to connect with MQTTv5 (with a fallback to MQTTv311) when CallbackAPIVersion.VERSION2 is used?

This indeed seems a good idea. It still needed to check what to do with option that are slightly different between v3 and v5 (e.g. clean_session vs clean_start), but we might probably be able to connect in MQTTv5 by default at least in some cases like the default (the one the most represented in documentation & example).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51IqO4/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs59Cpn5,paho.mqtt.python,2097846777,816,NA,pktiuk,45544416,Paweł Kotiuk,,NA,2024-05-07T09:24:03Z,2024-05-07T09:24:03Z,"> That would have been a very good idea for 2.0 due to possible breaking change :/

There is already 2.0. What is the status of this issue?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs59Cpn5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/816,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-ZJqQ,paho.mqtt.python,2120522384,816,NA,pktiuk,45544416,Paweł Kotiuk,,NA,2024-05-20T13:59:41Z,2024-05-20T13:59:41Z,@PierreF ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-ZJqQ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/818,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/818,paho.mqtt.python,2152678793,818,Adding __version__ so it can be queried,mmattel,3321281,Martin,github@diemattels.at,CLOSED,2024-02-25T09:35:17Z,2024-02-25T14:36:47Z,"# Feature Description

It would be great to add a `__version__` attribute based on semver which can be queried in the code like:
```
import paho.mqtt.client as mqtt
print(mqtt.__version__)
```
Note: The `__version__` attribute is recommended by Python Enhancement Proposals (PEP) and is commonly implemented across many packages.

# Additional Information

This would definitely help when upgrading the package when there are breaking changes as one could query the min/max version in the code and behave accordingly.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/818/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/818,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50_yeW,paho.mqtt.python,1962878870,818,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-25T10:00:49Z,2024-02-25T10:00:49Z,"Which PEP recommend this, I don't find it ? 
My search of PEP say that we should REMOVE the existing `__version__`: https://peps.python.org/pep-0396/#pep-rejection

This PEP say that we should do:
```
importlib.metadata.version(""paho-mqtt"")
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs50_yeW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/818,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51AGUt,paho.mqtt.python,1962960173,818,NA,mmattel,3321281,Martin,github@diemattels.at,NA,2024-02-25T14:35:24Z,2024-02-25T14:35:24Z,"I am in sorry, you are right, I misunderstood it... 🤦‍♂️ 

```
>>> from importlib.metadata import distribution
>>> dist = distribution('paho-mqtt')
>>> dist.version
'2.0.0'
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51AGUt/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,paho.mqtt.python,2156567771,819,due to select() paho-mqtt is unable to connect if more than 1024 file handle are used,showfuture,28568478,showbyte,429143597@qq.com,OPEN,2024-02-27T13:15:44Z,2024-07-17T23:31:06Z,"Problem description:

Python version: 3.9
Paho-MQTT version: 1.6.1
When using 1000 threads, each thread as a client to connect to the MQTT service, due to the _socketpair_compat function in loop_start, only a few hundred clients can be connected, and all clients cannot be connected successfully.
After adjusting the system file handle number to 65535, it still fails to connect.
However, if the _socketpair_compat function is commented out, all clients can connect successfully.


Question:

Is there any way to solve this problem?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51YE8e,paho.mqtt.python,1969245982,819,NA,JamesParrott,80779630,,,NA,2024-02-28T15:35:37Z,2024-02-28T15:35:37Z,"If you really need 1000 threads I would strongly suggest a library with native async support, e.g.:

https://github.com/toreamun/asyncio-paho","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51YE8e/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51ay1h,paho.mqtt.python,1969958241,819,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-28T21:34:24Z,2024-02-28T21:34:24Z,"That's a nice issue... pretty obscure to find the cause if you never see such issue. tl; dr: we should no longer use select()

Here is how to reproduce the same issue you had with an every more strange code:
```
import paho.mqtt.client as mqtt
import time

# Here the magic happen :)
files = [open(""/etc/hosts"") for _ in range(1019)]

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.connect(""mqtt.eclipseprojects.io"")
mqttc.loop_start()

time.sleep(5)  # Give network the time to do the handshake
print(mqttc.is_connected())
```

This will fail, the client will not be connected. To fix this code, just change the number 1019 in 1018 :)

More seriously, the issue is:
```
>>> mqttc._sockpairR
<socket.socket fd=1024, family=2, type=1, proto=0, laddr=('127.0.0.1', 52282), raddr=('127.0.0.1', 45195)>
>>> select.select([mqttc._sockpairR], [], [], 1)  # This is approximately what loop does
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ValueError: filedescriptor out of range in select()
```

This issue is that select (only on Linux ?) can't work with FD >= 1024

> WARNING: select() can monitor only file descriptors numbers that are less than FD_SETSIZE (1024)
-- https://manpages.debian.org/unstable/manpages-dev/select.2.en.html

In your program, you should have about 340 connections working. Socket pair (as it name said) create 2 FDs. 340 * 3 (the MQTT socket & the two sockets of the socket pair) = 1020. Then add stdout, stdin and stderr -> 1023.

The immediate fix is to don't use select() which means don't use loop(), loop_start() or loop_forever(). This mostly means use the external loop a.k.a an ayncio (either with a third-party that wrap it, or directly - there is some example).
It should also be possible to use multiple processes to spread the connections to avoid reaching the FD number 1024, but I think this is too complex for the neeed.

The right fix is to change paho so that it stop using select() and use modern solution (probably Python selectors).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51ay1h/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51b2wF,paho.mqtt.python,1970236421,819,NA,showfuture,28568478,showbyte,429143597@qq.com,NA,2024-02-29T01:37:00Z,2024-02-29T01:37:00Z,"> If you really need 1000 threads I would strongly suggest a library with native async support, e.g.:
> 
> https://github.com/toreamun/asyncio-paho

thanks，I will try!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51b2wF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51b4vU,paho.mqtt.python,1970244564,819,NA,showfuture,28568478,showbyte,429143597@qq.com,NA,2024-02-29T01:46:05Z,2024-02-29T01:46:05Z,"> This mostly means use the external loop a.k.a an ayncio (either with a third-party that wrap it, or directly - there is some example

Can you provide me with some examples or other packages that can solve this problem?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51b4vU/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51dRoA,paho.mqtt.python,1970608640,819,NA,PierreF,359833,Pierre Fersing,,NA,2024-02-29T08:03:55Z,2024-02-29T08:03:55Z,"> > This mostly means use the external loop a.k.a an ayncio (either with a third-party that wrap it, or directly - there is some example
> 
> Can you provide me with some examples or other packages that can solve this problem?

I'm not using paho-mqtt with asyncio, so I don't really know one. I've seen the name https://github.com/sbtinstruments/aiomqtt passed in another issue.
You can also look at:
* https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py
* https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_trio.py
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51dRoA/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/819,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51defX,paho.mqtt.python,1970661335,819,NA,showfuture,28568478,showbyte,429143597@qq.com,NA,2024-02-29T08:39:44Z,2024-02-29T08:39:44Z,"> * https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_trio.py

thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51defX/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/820,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/820,paho.mqtt.python,2161108588,820,Reading Client protocol property causes infinite recursion loop,asikeero,60272147,Eero Asikainen,,CLOSED,2024-02-29T12:09:34Z,2024-03-24T14:29:28Z,"# Bug Description

Accessing the field `Client.protocol` causes infinite recursion, since there is a bug in how that property is defined. The bug is on [this line](https://github.com/eclipse/paho.mqtt.python/blob/613520775c5706f72b916a99a8931983633fe489/src/paho/mqtt/client.py#L956). The function should return `self._protocol` and not `self.protocol` as the latter is a recursive definition.
This is the property.
```python
    @property
    def protocol(self) -> MQTTProtocolVersion:
        """"""
        Protocol version used (MQTT v3, MQTT v3.11, MQTTv5)

        This property is read-only.
        """"""
        return self.protocol
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/820/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,paho.mqtt.python,2163588371,822,Undefined CallbackAPIVersion ,Helios06,13236779,,,OPEN,2024-03-01T14:59:50Z,2024-10-08T15:16:02Z,"
Under PyCharm a simple project using python 3.8.5 and venv leads to this error even so the package installed is paho-mqtt v2.0.0

coding  this 

import paho.mqtt.client as mqtt
 ...... mqtt.CallbackAPIVersion.VERSION2 .....    leads to ""cannot find reference 'CallbackAPIVersion'""

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51orfJ,paho.mqtt.python,1973598153,822,NA,Helios06,13236779,,,NA,2024-03-01T17:30:28Z,2024-03-01T17:30:28Z,I solved the problem by installing python 3.12,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs51orfJ/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54iJRe,paho.mqtt.python,2022216798,822,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-03-27T08:40:41Z,2024-03-27T08:40:41Z,"I checked (under Docker) using the basic example app and:

* 3.8.5 - Runs fine
* 3.7 need `typing_extensions`  (e.g. `pip install typing_extensions`) or you will get a `ImportError: cannot import name 'Literal' from 'typing' (/usr/local/lib/python3.7/typing.py)`.

I suspect you may have had an older version of the library installed in your environment?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54iJRe/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ex47u,paho.mqtt.python,2227670766,822,NA,mpechner,211016,Michael Pechner,mikey@mikey.com,NA,2024-07-15T04:12:16Z,2024-07-15T04:12:16Z,I have this issue on python 3.11 on a raspberry pi using verion 2.1.0 of paho client,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ex47u/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/822,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ex7ey,paho.mqtt.python,2227681202,822,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-15T04:28:34Z,2024-07-15T04:28:34Z,"> I have this issue on python 3.11 on a raspberry pi using verion 2.1.0 of paho client

@mpechner please provide more information (unfortunately a ""me too"" does not help us trace the issue, which appears to be related to users environments - we know the library works for most users and have not been able to duplicate this issue).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ex7ey/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/824,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/824,paho.mqtt.python,2175542818,824,Since version 2.0 calling client.reinitialise() raise RuntimeError: Unsupported callback API version,Mips2648,41119856,Mips,,OPEN,2024-03-08T08:33:51Z,2024-03-27T08:30:00Z,"# Bug Description

Since version 2.0, as argument ""callback_api_version"" is require, calling client.reinitialise() raise RuntimeError: Unsupported callback API version because this method do not provide it

current code:
```python
    def reinitialise(
        self,
        client_id: str = """",
        clean_session: bool = True,
        userdata: Any = None,
    ) -> None:
        self._reset_sockets()

        self.__init__(client_id, clean_session, userdata)  # type: ignore[misc]
```
I suppose this could be changed to 
```python
self.__init__(self._callback_api_version, client_id, clean_session, userdata)  # type: ignore[misc]
```

# Reproduction

Simply init a client then call `reinitialise()`

```python
mqtt_client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqtt_client.username_pw_set(username=""user"", password=""pass"")
mqtt_client.connect(...)
mqtt_client.loop_start()

...

mqtt_client.reinitialise()
```

# Environment

* Python version:
* Library version:
* Operating system (including version):
* MQTT server (name, version, configuration, hosting details):


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/824/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/824,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53Th1J,paho.mqtt.python,2001608009,824,NA,henryptung,1700335,,,NA,2024-03-16T04:28:34Z,2024-03-16T04:28:34Z,The API break was so wide-impact it broke its own codebase? Oof.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs53Th1J/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/826,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/826,paho.mqtt.python,2203494880,826,The protocol property of the Client causes RecursionError,bjarne-hansen,10808404,Bjarne Hansen,bjarne@conspicio.dk,CLOSED,2024-03-22T23:31:41Z,2024-03-23T07:35:43Z,"# Bug Description

The .protocol property causes RecursionError.  I believe the line `return self.protocol` should read `return self._protocol`

```
   @property
    def protocol(self) -> MQTTProtocolVersion:
        """"""
        Protocol version used (MQTT v3, MQTT v3.11, MQTTv5)

        This property is read-only.
        """"""
        return self.protocol
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/826/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/826,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54L8Uz,paho.mqtt.python,2016396595,826,NA,PierreF,359833,Pierre Fersing,,NA,2024-03-23T07:35:43Z,2024-03-23T07:35:43Z,Duplicate of #820 ,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54L8Uz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,paho.mqtt.python,2204109629,827,ReasonCode.names is missing a ReasonCode.packet_name,mmattel,3321281,Martin,github@diemattels.at,OPEN,2024-03-24T00:23:07Z,2024-03-30T15:52:10Z,"While reading the docs about `ReasonCode.names` at https://eclipse.dev/paho/files/paho.mqtt.python/html/types.html#paho.mqtt.reasoncodes.ReasonCode 
I was wondering why the `packet_name` useful to know where things come from is not listed. The only way I found was using https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/reasoncodes.py#L190 (`__repr__()`) as `getName()` returns the name only.

Using that function gives me `ReasonCode(Disconnect, 'Unspecified error')` which is better than nothing.

I also would be happy if `getName()` would return an array where 0 is the name and 1 is the packet_name or another way I can get the packet_name.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54iQ5q,paho.mqtt.python,2022248042,827,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-03-27T08:58:43Z,2024-03-27T08:58:43Z,"The purpose of `ReasonCode`  is to encapsulate a [Reason Code](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031); it needs to know the packet type because this is needed to translate some reason codes, for example `0` could mean `Success`, `Normal disconnection` or `Granted QoS 0` depending upon the packet type.

I would assume that it does not expose information about the packet type is because it's intention was to communicate the Reason Code (and your use-case was not foreseen).

Can you please show how/where you would use the info?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54iQ5q/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54rnmr,paho.mqtt.python,2024700331,827,NA,mmattel,3321281,Martin,github@diemattels.at,NA,2024-03-28T08:55:46Z,2024-03-28T08:55:46Z,"Sure, for example: if you have a callback on_disconnect and want to print the reason for disconnecting to the log, you currently just get `Unspecified error`. One could write (without being code correct) `MQTT dicsonnected: getName()`, it would be important to know what was the origin (packet name) causig it like `MQTT dicsonnected: getPacket() : getName()`. This would help debugging a lot.
Just have a running client connected to mosquitto running as docker and reboot the broker docker. And this is an easy cause... There is a difference in printing `Unspecified` as error and `Disconnect : Unspecified error`. This is the [repo](https://github.com/mmattel/EET-Solmate) I maintain running paho-mqtt.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54rnmr/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54ygb1,paho.mqtt.python,2026505973,827,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-03-29T02:35:27Z,2024-03-29T02:35:27Z,"The `ReasonCode` passed to `on_disconnect` would only ever be be created with a `DISCONNECT` packet type. However, this does not [always mean](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L4372) that a `DISCONNECT` packet was [actually received](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L4372). So, in your example, the output would always be `Disconnect : XXX` (where `XXX` may change) and you may as well hard code the `Disconnect` bit.

This is why I requested an example; I don't think that making this data more accessible is really going to help you. If you are in the `on_disconnect` then you know the connection has been lost (and one potential cause is the receipt of a DISCONNECT packet). Most other callbacks are going to use a similar setup.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54ygb1/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5419vn,paho.mqtt.python,2027412455,827,NA,mmattel,3321281,Martin,github@diemattels.at,NA,2024-03-29T15:52:27Z,2024-03-29T15:52:27Z,"> If you are in the on_disconnect then you know the connection has been lost.

As there are mostly more than one packet types possibe per ID (name), having additional info about the reason is helpful to narrow down issues. The easy example of rebooting a mosquitto container is just a placeholder for more complex problems. That the connection was lost is naturally given by the callback. I want to destinguish the reason as best as possible. It is not hurting anyone providing that info, but can help finding causes more easily. The info is already here an just needs to be made available.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5419vn/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs543BGB,paho.mqtt.python,2027688321,827,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-03-29T20:06:36Z,2024-03-29T20:06:36Z,"You could do something like this:

```
import paho.mqtt.client as mqtt
from paho.mqtt.packettypes import PacketTypes

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, reason_code, properties):
    print(f""Connected with result code {reason_code} and packet {PacketTypes.Names[reason_code.packetType]}"")
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(""$SYS/#"")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload))

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.on_connect = on_connect
mqttc.on_message = on_message

mqttc.connect(""mqtt.eclipseprojects.io"", 1883, 60)
mqttc.loop_forever()
```

Output:

```
Connected with result code Success and packet Connack
```

I doubt that a getter will be added to `ReasonCode` because it would have a limited audience and is likely to be confusing (the `packetType` in `ReasonCode` might not have actually ever been received).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs543BGB/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/827,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5440Xf,paho.mqtt.python,2028160479,827,NA,mmattel,3321281,Martin,github@diemattels.at,NA,2024-03-30T15:52:08Z,2024-03-30T15:52:08Z,"I have tested this with `on_disconnect` and this works great and as expected. ✔️ 

The combination:

```
from paho.mqtt.packettypes import PacketTypes
...
on_connect | on_disconnect
print(f""Connected with result code {reason_code} and packet {PacketTypes.Names[reason_code.packetType]}"")
```
should be part of the documentation.
Having that, one can decide if he is going to use this extended logging capability.
Many thanks pointing to it.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5440Xf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/830,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/830,paho.mqtt.python,2208297270,830,Frequent message loss with MQTT,KashyapKN,99383202,,,OPEN,2024-03-26T13:42:00Z,2024-03-28T04:39:15Z,"# Question

We have the following setup on production for MQTT. 
1. 5 EMQX broker(Version 3.X)
2. AWS Load balancer to distribute load across MQTT brokers (and HAProxy in some enviroments)
3. Paho MQTT python client (Version 1.1)

We are noticing an issue where messages are getting frequently dropped(around 1 or 2 in every 100 messages). 

`MQTT connect configuration setup is as follows`
```
client_id = ""<random_int_from_1_to_100>_<current_hostname>""
clean_session = False
keep alive timeout = 60
```

`How the messages are published ?`
We have X number of celery workers publishing to the same topic in parallel, with message rate of 10/s at max. The client id is unique across each celery worker as it using hostname in client id.

For the messages which are getting dropped or missed, paho MQTT library is returning a `0` on publish indicating the message was published successfully.

`Sample code for publish`
```
        (res, mid) = self.conn.publish(topic=topic, payload=payload, qos=qos)
        if res == 0:
           log.debug(f""Succesfully published message::{str(res)} with id {mid} for payload::{payload}"",
                               client_id=self.client_id)
        else:
           log.info(f""Error publishing message::{str(res)} with id {mid} for payload::{payload}"",
                             client_id=self.client_id)
```

**But there are no logs EMQX(even with debug logs enabled), for the ones which have been dropped**. This is happening only on production where there are multiple clients publishing to same topic, whereas with single client we haven't noticed an issue.

Is there any issue with the configuration of the above or would upgrading to a newer version of the library help fix the issue?
OR this could be something specific to the EMQx broker. 

# Environment

* Python version: 3.6.9
* Library version: 1.1
* Operating system (including version): Linux
* MQTT server (name, version, configuration, hosting details): EMQX","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/830/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/830,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54h6ST,paho.mqtt.python,2022155411,830,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-03-27T07:58:22Z,2024-03-27T07:58:22Z,"""Library version: 1.1"" - this dates back to 2015 and there have been a considerable number of updates in the interim (some addressing issues that could, potentially, lead to message loss). I would suggest trying the latest release (but note that V2 has dropped support for Python 3.6). Unfortunately I suspect you will struggle to find anyone prepared to attempt to diagnose the issue with a version of the library this old (especially as issues like this that can be very hard to duplicate).

> Paho MQTT library is returning a 0 on publish indicating...

Please note that `publish` will return before the transaction is complete (and, potentially, before the message is even sent if `_max_inflight_messages` applies).

Other than that I cannot see anything obviously wrong with the code snippets provided (but you don't show the network loop etc). The fact that EMQX is not logging receipt of a message does seem to indicate that the issue is on the client side (access to the logs may be useful; it would be interesting to see if there is a gap in the message IDs).

Note: Identical question on [Stackoverflow](https://stackoverflow.com/q/78225809/11810946).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs54h6ST/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/833,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/833,paho.mqtt.python,2240051865,833,Paho 2.0.0 mqtt Client can not publish bytearray payload,marko92milinkovic,19490088,Marko Milinkovic,,CLOSED,2024-04-12T12:26:55Z,2024-04-29T19:33:08Z,"# Bug Description

Paho 2.0.0 mqtt Client can not publish bytearray payload

# Reproduction

Calling paho.mqtt.client.Client.publish with payload as bytearray with qos = 1.
The `publish` method internally calls `_encode_payload`: 
 ```
 ....
    if not isinstance(payload, (bytes, bytearray)):
        raise TypeError(
            ""payload must be a string, bytearray, int, float or None.""
        )

    return payload
```
Then it calls `_send_publish` and the code blows up inside it:
`        if payload and not isinstance(payload, bytes):
            raise TypeError('payload must be bytes if set')`

# Environment

* Python version: 3.10
* Library version: 2.0.0
* Operating system (including version): MacOS 13.6.6 
* MQTT server (name, version, configuration, hosting details): mosquitto 2.0.11

# Logs

 client.publish(message.topic, message.payload, 1)
  File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1798, in publish
    rc = self._send_publish(message.mid, topic_bytes, message.payload, message.qos, message.retain,
  File ""/usr/local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 3377, in _send_publish
    raise TypeError('payload must be bytes if set')



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/833/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834,paho.mqtt.python,2243678727,834,Unit tests don't seem to work,IanBoden,82514609,Ian Boden,,OPEN,2024-04-15T13:23:21Z,2024-04-29T18:35:45Z,"# Prerequisites

*Note: You may remove this section prior to submitting your report.*

A small team of volunteers monitors issues. Please help us to help you by making it simple to understand and, if possible,
replicate your issue. Prior to reporting a bug please:

 - [x] Test the latest release of the library.
 - [x] Search existing issues.
 - [x] Read the relevant documentation. 
 - [x] Review your server configuration and logs.
 - [x] Consider testing against a different server (e.g. [mqtt.eclipseprojects.io](https://mqtt.eclipseprojects.io/) or [test.mosquitto.org](https://test.mosquitto.org/))
 - [x] If possible, test using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
     to confirm the issue is specific to this client.
 - [x] If you are unsure if you have found a bug, please consider asking on [stackoverflow](https://stackoverflow.com/) for a quicker response.

# Bug Description

*Please provide a clear and concise description of the bug.* 

The contributing simply says:

> Ensure that all new and existing tests pass by running tox

But as far as I can see this is impossible without significant code changes, firstly there is no setup.py which is a requirement of tox. Setting:
`skipsdist = True`
in the tox.ini at least gets tox to run. So far I've had no luck in any of the tests working though.

The Makefile doesn't use tox at all and running:
`make test`
does run some tests although with a lot of failures. Basically getting lots of socket timeouts so something isn't happy creating the test server I think.

# Reproduction

*Please provide detailed steps showing how to replicate the issue (it's difficult to fix an issue we cannot replicate).
If errors are output then include the full error (including any stack trace).*   
*Most issues should include a [minimal example](https://stackoverflow.com/help/minimal-reproducible-example) that 
demonstrates the issue (ideally one that can be run without modification, i.e. runnable code using a public broker).*

checkout the code (or make a fork if you prefer)
run tox
get error:
> ERROR: No setup.py file found. The expected location is:
>   /paho/paho.mqtt.python/setup.py
> You can
>   1. Create one:
>      https://packaging.python.org/tutorials/distributing-packages/#setup-py
>   2. Configure tox to avoid running sdist:
>      https://tox.readthedocs.io/en/latest/example/general.html#avoiding-expensive-sdist

run `make test`
get results:

> 30 failed, 71 passed, 21 skipped, 4 xfailed, 30 errors in 338.79s (0:05:38)


# Environment

* Python version: 3.9
* Library version: master
* Operating system (including version): AlmaLinux release 8.9 (Midnight Oncilla)
* MQTT server (name, version, configuration, hosting details):

# Logs

For many issues, especially when you cannot provide code to replicate the issue, it's helpful to include logs. Please 
consider including:
 * library logs; see [the readme](https://github.com/eclipse/paho.mqtt.python#enable_logger) and [logger example](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_logger.py).
 * broker logs (availability will depend the server in use)


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56owO3,paho.mqtt.python,2057503671,834,NA,JamesParrott,80779630,,,NA,2024-04-15T17:59:52Z,2024-04-15T17:59:52Z,"The tox tests ran last week in CI for number #453 on the callbackapi-default branch, and passed.

https://github.com/eclipse/paho.mqtt.python/actions/runs/8590915867
![image](https://github.com/eclipse/paho.mqtt.python/assets/80779630/5b7fc809-0582-4a03-ad33-2e27adcbeaa9)

I'm not sure what happened with number #454 on master, but it still passed on 3 python versions.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs56owO3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs562C4-,paho.mqtt.python,2060987966,834,NA,IanBoden,82514609,Ian Boden,,NA,2024-04-17T10:57:27Z,2024-04-17T10:57:27Z,"> The tox tests ran last week in CI for number #453 on the callbackapi-default branch, and passed.
> 
> https://github.com/eclipse/paho.mqtt.python/actions/runs/8590915867 ![image](https://private-user-images.githubusercontent.com/80779630/322581288-5b7fc809-0582-4a03-ad33-2e27adcbeaa9.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTMzNDc4NjUsIm5iZiI6MTcxMzM0NzU2NSwicGF0aCI6Ii84MDc3OTYzMC8zMjI1ODEyODgtNWI3ZmM4MDktMDU4Mi00YTAzLWFkMzMtMmUyN2FkY2JlYWE5LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA0MTclMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNDE3VDA5NTI0NVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWFlZjE2MWViZjRhNzdjZTc3MGVhNjdmY2E0NWFmZjUwZjNmNmZjYzc4NTEzNDYwYTFkMTcyNGJhZTk1NDZmZDgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.zIk86vu-Kbd5-ZuwZEwKhAtOunnymDG3bmgQ02bQiwg)
> 
> I'm not sure what happened with number #454 on master, but it still passed on 3 python versions.

I had an older version to tox which was causing the problem with tox requiring a setup.py

Upgrading tox allowed it to run but it was still failing a lot of tests.

Moving to almalinux9 and running without paho.mqtt.testing I get the same results as the run you posted just without the v5 tests, Adding paho.mqtt.testing I'm getting occasional failures or hangs in v5, but about 50% of the time it runs clean.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs562C4-/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/834,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58Lihm,paho.mqtt.python,2083399782,834,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-29T18:35:44Z,2024-04-29T18:35:44Z,"I think this issue is a duplicate of #789. Tests are known to fail from time to time on mqtt v5 test (which require paho.mqtt.testing).
I think I've fixed them in 2.1.0 (which will be released in the next hours).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58Lihm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/835,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/835,paho.mqtt.python,2250189806,835,Subscription could be lost if loop is started before connecting to server. (inconsistiency in docs),pktiuk,45544416,Paweł Kotiuk,,OPEN,2024-04-18T09:16:42Z,2024-07-17T23:27:32Z,"# Prerequisites

*Note: You may remove this section prior to submitting your report.*

A small team of volunteers monitors issues. Please help us to help you by making it simple to understand and, if possible,
replicate your issue. Prior to reporting a bug please:

 - [x] Test the latest release of the library.
 - [x] Search existing issues.
 - [x] Read the relevant documentation. 
 - [x] Review your server configuration and logs.
 - [ ] Consider testing against a different server (e.g. [mqtt.eclipseprojects.io](https://mqtt.eclipseprojects.io/) or [test.mosquitto.org](https://test.mosquitto.org/))
 - [x] If possible, test using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
     to confirm the issue is specific to this client.
 - [ ] If you are unsure if you have found a bug, please consider asking on [stackoverflow](https://stackoverflow.com/) for a quicker response.

# Bug Description

According do [docs](https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html#paho.mqtt.client.Client.connect):

It is acceptable to firstly launch event loop before connecting.

> Connect to a remote broker. This is a blocking call that establishes the underlying connection and transmits a CONNECT packet. Note that the connection status will not be updated until a CONNACK is received and processed (**this requires a running network loop**, see [loop_start](https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html#paho.mqtt.client.Client.loop_start), [loop_forever](https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html#paho.mqtt.client.Client.loop_forever), [loop](https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html#paho.mqtt.client.Client.loop)…).

But according to examples (like [client_sub](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_sub.py) ) the order is opposite.

```py
mqttc.on_subscribe = on_subscribe
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.connect(""mqtt.eclipseprojects.io"", 1883, 60)
mqttc.subscribe(""$SYS/#"")
```

When I tried to start  loop before connecting I had problems with connection and with subscription.

# Reproduction

1. Run simple MQTT broker
  ```
  docker run -d --name emqx -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083  emqx:5.0.20
  ```
2. Run code 
```py
import time
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, reason_code, properties):
    print(""reason_code: "" + str(reason_code))

def on_message(mqttc, obj, msg):
    print(msg.topic + "" "" + str(msg.qos) + "" "" + str(msg.payload))

def on_subscribe(mqttc, obj, mid, reason_code_list, properties):
    print(""Subscribed: "" + str(mid) + "" "" + str(reason_code_list))

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe
mqttc.loop_start() ### LOOP STARTED BEFORE CONNECTION
mqttc.connect(""localhost"", 1883, 60)
print(""Is connected: "", mqttc.is_connected())
mqttc.subscribe(""/#"")

while True:
    time.sleep(1)
```
3. Send something to on thread `/logs` using tool like MQTTX
4.  Subscription does not work (messages are not printed)
```
$ python3 ./example.py 
Is connected:  False
reason_code: Success
```

Replacing order in this code
```py
mqttc.connect(""localhost"", 1883, 60)
mqttc.loop_start() ### LOOP STARTED AFTER CONNECTION
```

Fixes the issue:

```
$ python3 ./example.py 
Is connected:  False
reason_code: Success
Subscribed: 1 [ReasonCode(Suback, 'Granted QoS 0')]
/logs 0 b'{\n  ""msg"": ""xxxxxxxxx""\n}'
```

# Environment

* Python version: 3.10
* Library version: 2.0
* Operating system (including version): Ubuntu 22.04
* MQTT server (name, version, configuration, hosting details): (check repro)

# Logs




","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/835/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/835,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58Lpjx,paho.mqtt.python,2083428593,835,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-29T18:52:51Z,2024-04-29T18:52:51Z,"I reproduce your issue and this should either be fixed in code (preferred) or documented.

I've updated the title, since starting the loop before work and the connection works (cf your `reason_code: Success` message) but the `subscribe()` is indeed lost. You should be able to see that `subscribe()` is lost because it return an error (but no example show error checking).

Regardless of this bug, it might be preferable to subscribe in the on_connect callback to be sure your subscription is kept in case of reconnection (I'm not sure the broker had to persist them, especially when clean_session is True - the default). e.g.

```
def on_connect(mqttc, obj, flags, reason_code, properties):
    print(""reason_code: "" + str(reason_code))
    mqttc.subscribe(""/#"")
``` ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58Lpjx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836,paho.mqtt.python,2266406292,836,Not able to install in linux server,SIVAPRAS329,47999657,,,OPEN,2024-04-26T19:43:33Z,2024-07-20T21:28:03Z,"I have downloaded the package and unzipped.  using pip3 install to install the package. getting error setup.py not found.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58AD9o,paho.mqtt.python,2080391016,836,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-27T06:52:37Z,2024-04-27T06:52:37Z,"I can not reproduce. You need to provide detail if you want an answer.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58AD9o/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EU4MH,paho.mqtt.python,2220065543,836,NA,fah,322496,,,NA,2024-07-10T09:57:12Z,2024-07-10T09:57:12Z,"Dear @PierreF here is some more context:
Raspian, Python 3.7, Installation via pip3 seems to work but import fails even so the package is installed on the right place and looks ok.

```sh
pi@rp:~/checkonline $ python3 checkonline.py 
Traceback (most recent call last):
  File ""/home/pi/.local/lib/python3.7/site-packages/paho/mqtt/client.py"", line 49, in <module>
    from typing import Literal
ImportError: cannot import name 'Literal' from 'typing' (/usr/lib/python3.7/typing.py)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""checkonline.py"", line 4, in <module>
    import paho.mqtt.client as mqtt
  File ""/home/pi/.local/lib/python3.7/site-packages/paho/mqtt/client.py"", line 51, in <module>
    from typing_extensions import Literal  # type: ignore
ModuleNotFoundError: No module named 'typing_extensions'
```
paho/mqtt/client.py Line49,51: 
```python
...
try:
    from typing import Literal
except ImportError:
    from typing_extensions import Literal  # type: ignore

if TYPE_CHECKING:
    try:
        from typing import TypedDict  # type: ignore
    except ImportError:
        from typing_extensions import TypedDict
...
```

```sh
pi@rp:~/checkonline $ pip3 freeze
asn1crypto==0.24.0
attrs==19.3.0
bcrypt==3.1.7
cached-property==1.5.1
certifi==2018.8.24
cffi==1.14.0
chardet==3.0.4
cryptography==2.6.1
distro==1.5.0
docker==4.2.1
docker-compose==1.26.0
dockerpty==0.4.1
docopt==0.6.2
entrypoints==0.3
idna==2.6
importlib-metadata==1.6.0
jsonschema==3.2.0
keyring==17.1.1
keyrings.alt==3.1.1
mysql-connector-python==8.0.33
paho-mqtt==2.1.0
paramiko==2.7.1
protobuf==3.20.3
pycparser==2.20
pycrypto==2.6.1
PyGObject==3.30.4
PyNaCl==1.4.0
pyrsistent==0.16.0
python-apt==1.8.4.3
python-dotenv==0.13.0
pyxdg==0.25
PyYAML==5.3.1
requests==2.21.0
SecretStorage==2.3.1
six==1.12.0
ssh-import-id==5.7
texttable==1.6.2
typing==3.7.4.3
urllib3==1.24.1
websocket-client==0.57.0
zipp==3.1.0
```

---

To fix this I tried to install from source like the README.md explains:
```sh
pi@rp:~/.local/lib/python3.7/site-packages $ git clone https://github.com/eclipse/paho.mqtt.python
Klone nach 'paho.mqtt.python' ...
remote: Enumerating objects: 6053, done.
remote: Counting objects: 100% (2243/2243), done.
remote: Compressing objects: 100% (625/625), done.
remote: Total 6053 (delta 1688), reused 1938 (delta 1529), pack-reused 3810
Empfange Objekte: 100% (6053/6053), 1.64 MiB | 2.00 MiB/s, Fertig.
Löse Unterschiede auf: 100% (3410/3410), Fertig.

pi@rp:~/.local/lib/python3.7/site-packages $ cd paho.mqtt.python

pi@rp:~/.local/lib/python3.7/site-packages/paho.mqtt.python $ pip3 install -e .
Directory '.' is not installable. File 'setup.py' not found.
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EU4MH/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/836,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMOyd,paho.mqtt.python,2234576029,836,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:00:42Z,2024-07-17T23:00:42Z,"I encountered `No module named 'typing_extensions'` [whilst testing another issue](https://github.com/eclipse/paho.mqtt.python/issues/822#issuecomment-2022216798) . Fixed by running `pip install typing_extensions` (sorry, not really a solution but may help others work around this). Note that I think the issue initially raised is a different problem.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMOyd/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/837,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/837,paho.mqtt.python,2266670480,837,Provide wheels for older packages (< 2.0),Clockwork-Muse,5569508,Stephen A. Imhoff,clockwork-muse@outlook.com,CLOSED,2024-04-27T01:03:17Z,2024-04-27T06:48:33Z,"# Feature Description

I'm working with a small IoT device and Azure, using the `azure-iot-device` package.  I would like to do a cross-build/package download, via something like this: 
`pip download -d <destination dir> --platform manylinux2014_aarch64 <my project directory>`

... unfortunately, this fails, because the azure package hasn't (yet) updated to 2.0.0, and the older packages don't have wheels.

# Requested Solution

Please build and publish wheels for the older versions.

# Alternatives

Given other features of the project cross-building inside of docker will likely be available to me, but may not be for others.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/837/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/837,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58ADum,paho.mqtt.python,2080390054,837,NA,PierreF,359833,Pierre Fersing,,NA,2024-04-27T06:48:33Z,2024-04-27T06:48:33Z,"We don't have the resource to support multiple branch of this library, adding build system from 2.0 version to 1.6 isn't something doable with our resource, and updating a existing release isn't good idea.

This library only had Python code, so you can build a wheel for any arch (`pip wheel -w destdir ""paho-mqtt==1.6.1""`).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs58ADum/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/840,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/840,paho.mqtt.python,2292294047,840,"when  client has been disconnected, but  client.is_connected() is True",showfuture,28568478,showbyte,429143597@qq.com,OPEN,2024-05-13T09:30:37Z,2024-07-17T23:05:35Z,"version： 1.6.1
python: 3.9.6

When I'm using paho-mqtt, sometimes in a weak network environment, there is an issue where the MQTT connection is actually disconnected, but according to client.is_connected(), the value is True, indicating that the client is still considered connected. I cannot rely on client.is_connected() to determine the connection status, which has led to significant bugs in my business logic. How can I solve this problem?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/840/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/840,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6B0RV7,paho.mqtt.python,2177963387,840,NA,JiajiaHuang,22386209,,,NA,2024-06-19T07:34:28Z,2024-06-19T07:34:28Z,"Version: 1.6.1 and 2.1.0
The same problem exists, causing BUG.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6B0RV7/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/840,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMR7E,paho.mqtt.python,2234588868,840,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:04:38Z,2024-07-17T23:04:38Z,"Unfortunately it's not going to be possible to help without significantly more information (code, [logs](https://github.com/eclipse/paho.mqtt.python?tab=readme-ov-file#logger) etc). In some cases the status of `.is_connected()` will not change immediatly as the connection is [half open](https://en.wikipedia.org/wiki/TCP_half-open) meaning the loss of connection will only be picked up by the keepalive process.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMR7E/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/841,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/841,paho.mqtt.python,2292415759,841,Client __init__  first arg is callback_api_version not client_id,showfuture,28568478,showbyte,429143597@qq.com,CLOSED,2024-05-13T10:24:03Z,2024-07-17T23:18:15Z,"![image](https://github.com/eclipse/paho.mqtt.python/assets/28568478/05205c76-ecb3-416f-9afb-40f38514d265)
![image](https://github.com/eclipse/paho.mqtt.python/assets/28568478/e734f818-b8a7-4b12-a8f1-ef848245fd2e)

paho-mqtt: 2.1.0

__init__  first arg is callback_api_version not client_id","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/841/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/841,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMdhO,paho.mqtt.python,2234636366,841,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:18:15Z,2024-07-17T23:18:15Z,"This duplicates #824 so I'm going to close it (as the other issue was raised earlier, and does not use screenshots so is easier to read).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMdhO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,paho.mqtt.python,2305183037,844,Migrating from mqtt Paho V1 to V2 reinitialise fails,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,CLOSED,2024-05-20T06:16:41Z,2024-07-17T23:12:13Z,"# Question
On a reconnect, on_reconnect calls my reconnect function where I reinitialise the connection calling the reinitialise method of the client
 
`mqttc.reinitialise(mqtt_clientID, clean_session=False, userdata=None) `

However, this triggers an error 

```
File ""/usr/local/lib/python3.11/dist-packages/paho/mqtt/client.py"", line 1156, in reinitialise
    self.__init__(client_id, clean_session, userdata)  # type: ignore[misc]
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/usr/local/lib/python3.11/dist-packages/paho/mqtt/client.py"", line 772, in __init__
    raise ValueError(
ValueError: Unsupported callback API version: version 2.0 added a callback_api_version, see docs/migrations.rst for details

```

Searching online for information I do find the migration information but nothing is mentioned about this method. Looking for the method, I only find info in the documentation indicating I do the right thing. (cfr: https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html)

I even tried this 

`mqttc.reinitialise(mqtt.CallbackAPIVersion.VERSION2, mqtt_clientID, clean_session=False, userdata=None)`

but that triggers an error saying clean_session is mentioned twice. 

What is wrong here? Where can I find information on the V2 reinitialise method? 

# Environment
* Python version:  3.11.2
* Library version: 2.1.0
* Operating system: Debian Bookworm 12
* MQTT server: mosquitto 2.0.18 on Windows","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-X-Et,paho.mqtt.python,2120212781,844,NA,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,NA,2024-05-20T11:01:57Z,2024-05-20T11:01:57Z,"Reading through some other issues here, I think my problem is related to #842 & #841. ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-X-Et/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-x0cf,paho.mqtt.python,2126989087,844,NA,JamesParrott,80779630,,,NA,2024-05-23T12:30:07Z,2024-05-23T12:30:07Z,"Perhaps the reason there's so little documentation for `.reinitialise`, and for there being no mention of it in:
https://github.com/eclipse/paho.mqtt.python/blob/master/docs/migrations.rst
is that `.reinitialise` should not be used for migrations between API versions.  

Create a new client from scratch with the new API enum.

The first error does indeed occur because issue #841 has not been fixed.  

In the second attempt, you're calling a method with 4 arguments that expects 3.  But your arg no. 3 is the kwarg that is also set by positional arg 2.

My PR's not included yet, but it should preserve the callback_api_version that is already set.  It does not alter the .reinitialise call signature however.  The call to that with 4 args would still be incorrect.



","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-x0cf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-x_P6,paho.mqtt.python,2127033338,844,NA,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,NA,2024-05-23T12:52:50Z,2024-05-23T12:52:50Z,"Thx. OK, clear. 
So I understand I should no longer use .reinitiliase when going for V2 of the client. 
But can you point me to an example that shows the best pratice on what to do when a disconnect happens (in V2)?
Or do I misunderstand something here? ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-x_P6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zCV6,paho.mqtt.python,2127308154,844,NA,JamesParrott,80779630,,,NA,2024-05-23T14:41:42Z,2024-05-23T14:41:42Z,"You can use `.reinitialise` for V1.  You can use `.reinitialise` for V2.  

Don't try to use `.reinitialise` to change a V1 Client into a V2 Client (nor vice-versa) (destroy the Client and make a new one).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zCV6/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zIAb,paho.mqtt.python,2127331355,844,NA,MarcEngrie,19575705,Marc Engrie,marc@engrie.be,NA,2024-05-23T14:49:34Z,2024-05-23T14:49:34Z,"OK but that's not what I am doing (I think) as I do create a V2 client

```
    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, mqtt_clientID, clean_session=False, userdata=None)
    if mqtt_login != """":
        mqttc.username_pw_set(mqtt_login, mqtt_password)
    mqttc.will_set(mqtt_topicsts, payload=""offline"", qos=1, retain=True)
    # Assign event callbacks
    mqttc.on_connect     = mqtt_on_connect
    mqttc.on_publish     = mqtt_on_publish
    mqttc.on_subscribe   = mqtt_on_subscribe
    mqttc.on_message     = mqtt_on_message
    mqttc.on_disconnect  = mqtt_on_disconnect
    mqttc.connected_flag = False
    try:
        mqttc.connect(mqtt_server, port=mqtt_port, keepalive=360)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zIAb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zO_G,paho.mqtt.python,2127359942,844,NA,JamesParrott,80779630,,,NA,2024-05-23T14:59:47Z,2024-05-23T14:59:47Z,"Ah I misunderstood - sorry.

You're creating the Client correctly.  However ""the V2 reinitialise method"" (and the V1 alike) is broken due to #841.

the precise way it breaks is because a Value Error is raised inside `__init__` when the arg signature is the old V1 signature.  The author intended to raise an informative error within `__init__`, to help the user.  But unfortunately incorrectly assumed that the only way this would happen, was if a user called `Client(...)` with the old V1 signature (with a client_id string in place of an enum).  `.reinitialise` also uses the old V1 signature, and has not yet been updated for the V2 client.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs5-zO_G/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/844,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMXkG,paho.mqtt.python,2234611974,844,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:12:13Z,2024-07-17T23:12:13Z,Closing this as a duplicate of #841 (for which James has raised PR #842),"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMXkG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/846,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/846,paho.mqtt.python,2316864409,846,i don't know how to pass the correct parameters in this version,ndertaker,167216816,ndertaker,,CLOSED,2024-05-25T09:14:56Z,2024-07-20T08:28:53Z,"This is my _messenger_queue_publish()

```
def _messenger_queue_publish(client: mqtt.Client, userdata, rc):
               topics = None
                
               queue = {
                    ""sync_api_version"": 10,
                    ""max_deltas_able_to_process"": 1000,
                    ""delta_batch_size"": 500,
                    ""encoding"": ""JSON"",
                    ""entity_fbid"": self.dataFB['FacebookID']
               }
               
               if (self.syncToken == None):
                    topics = ""/messenger_sync_create_queue""
                    queue[""initial_titan_sequence_id""] = self.lastSeqID
                    queue[""device_params""] = None
               else:
                    topics = ""/messenger_sync_get_diffs""
                    queue[""last_seq_id""] = self.lastSeqID
                    queue[""sync_token""] = ""1""
               
               client.publish(
                    topics,
                    json_minimal(queue),
                    qos=1,
                    retain=False,
               )
self.mqtt = mqtt.Client(
               mqtt.CallbackAPIVersion.VERSION2,
               client_id=options[""client_id""],
               clean_session=options[""clean""],
               protocol=mqtt.MQTTv31,
               transport=""websockets"",
          )
          
          self.mqtt.tls_set(certfile=None, keyfile=None, cert_reqs=ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1_2)
          
          self.mqtt.on_connect = _messenger_queue_publish
          self.mqtt.on_message = on_message
          self.mqtt.on_disconnect = on_disconnect
          
          self.mqtt.username_pw_set(username=options[""username""])
          parsed_host = urlparse(host)
          
          self.mqtt.ws_set_options(
               path=f""{parsed_host.path}?{parsed_host.query}"",
               headers=options[""ws_options""][""headers""],
          )
          
          # connect
          self.mqtt.connect(
               host=options[""ws_options""][""headers""][""Host""],
               port=443,
               keepalive=options[""keepalive""],
          )
          self.mqtt.loop_forever()
```

The error:
```
Traceback (most recent call last):
  File ""/storage/emulated/0/Download/lon/listen.py"", line 202, in <module>
    _.connect_mqtt()
  File ""/storage/emulated/0/Download/lon/listen.py"", line 196, in connect_mqtt
    self.mqtt.loop_forever()
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 2297, in loop_forever
    rc = self._loop(timeout)
         ^^^^^^^^^^^^^^^^^^^
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 1686, in _loop
    rc = self.loop_read()
         ^^^^^^^^^^^^^^^^
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 2100, in loop_read
    rc = self._packet_read()
         ^^^^^^^^^^^^^^^^^^^
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 3142, in _packet_read
    rc = self._packet_handle()
         ^^^^^^^^^^^^^^^^^^^^^
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 3814, in _packet_handle
    return self._handle_connack()
           ^^^^^^^^^^^^^^^^^^^^^^
  File ""/data/data/com.termux/files/usr/lib/python3.11/site-packages/paho/mqtt/client.py"", line 3934, in _handle_connack
    on_connect(
TypeError: listeningEvent.connect_mqtt.<locals>._messenger_queue_publish() takes 3 positional arguments but 5 were given
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/846/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/846,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMo9c,paho.mqtt.python,2234683228,846,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T23:26:05Z,2024-07-17T23:26:05Z,"[migrations.rst](https://github.com/eclipse/paho.mqtt.python/blob/master/docs/migrations.rst#on_connect) is a good place to start. This includes the example:

```
# NEW code for both version
def on_connect(client, userdata, flags, reason_code, properties):
    if flags.session_present:
        # ...
    if reason_code == 0:
        # success connect
    if reason_code > 0:
        # error processing
```

Note how the callback signiture differs from yours: `def _messenger_queue_publish(client: mqtt.Client, userdata, rc):`

I'm going to flag this as more info needed as I'm unclear if the above is what you are looking for.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMo9c/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/846,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Fki3K,paho.mqtt.python,2240949706,846,NA,ndertaker,167216816,ndertaker,,NA,2024-07-20T06:26:20Z,2024-07-20T06:26:20Z,"Thanks for the reply.
I fixed them, it was a syntax error because I didn't read the docs carefully. Once again, thanks for answering my problem.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Fki3K/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847,paho.mqtt.python,2332479865,847,pahp mqtt遇到的一个警告,WKTYesq,135952044,Archie,,CLOSED,2024-06-04T03:49:51Z,2024-07-17T22:37:42Z,"我使用pahp-mqtt遇到一个警告，如下所示：
``` python
import paho.mqtt.client as mqtt


MQTT_SERVER = 'mqtt.lfzk.com'
MQTT_PORT = 1883
MQTT_TOPIC = 'ws'
MQTT_USERNAME = 'remote'
MQTT_PASSWORD = 'lfzk@1020@re'
MQTT_CLIENT_ID = 'mqttx_0ea89a05'


# 当客户端收到连接时的回调
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(""已连接到MQTT代理！"")
        # 订阅主题
        client.subscribe(MQTT_TOPIC)
    else:
        print(f""连接失败，返回码 {rc}"")


def on_message(client, userdata, msg):
    print(msg.topic+"" ""+str(msg.payload.decode(""utf-8"")))


if __name__ == '__main__':
    client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)

    client.on_connect = on_connect
    client.message_callback_add(MQTT_TOPIC, on_message)
    # client.on_message = on_message
    client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)
    client.connect(MQTT_SERVER, MQTT_PORT, 60)

    client.loop_forever()
```
控制台：
```pathon
D:\PythonWorkSpace\IPC\mqtt_client.py:28: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)
已连接到MQTT代理！
ws {
    ""code"": ""200"",
    ""data"": {
        ""msgId"": ""767"",
        ""sn"": ""211323091015"",
        ""time"": 1717468404887,
        ""value"": {
            ""production"": ""6224"",
            ""production1"": ""7174"",
            ""production2"": ""6592"",
            ""runtime"": ""288"",
            ""runtime1"": ""277"",
            ""runtime2"": ""302"",
            ""status"": ""0"",
            ""status1"": ""1"",
            ""status2"": ""0""
        }
    }
}
```

这个警告我不知道能不能处理 DeprecationWarning: Callback API version 1 is deprecated, update to latest version client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)

我将client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1)修改为client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)后运行：

```python
D:\PythonWorkSpace\IPC\.venv\Scripts\python.exe D:\PythonWorkSpace\IPC\mqtt_client.py 
Traceback (most recent call last):
  File ""D:\PythonWorkSpace\IPC\mqtt_client.py"", line 36, in <module>
    client.loop_forever()
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 2297, in loop_forever
    rc = self._loop(timeout)
         ^^^^^^^^^^^^^^^^^^^
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 1686, in _loop
    rc = self.loop_read()
         ^^^^^^^^^^^^^^^^
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 2100, in loop_read
    rc = self._packet_read()
         ^^^^^^^^^^^^^^^^^^^
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 3142, in _packet_read
    rc = self._packet_handle()
         ^^^^^^^^^^^^^^^^^^^^^
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 3814, in _packet_handle
    return self._handle_connack()
           ^^^^^^^^^^^^^^^^^^^^^^
  File ""D:\PythonWorkSpace\IPC\.venv\Lib\site-packages\paho\mqtt\client.py"", line 3934, in _handle_connack
    on_connect(
TypeError: on_connect() takes 4 positional arguments but 5 were given

Process finished with exit code 1
```
求大佬帮忙解决，谢谢","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Asyf2,paho.mqtt.python,2159224822,847,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-06-10T20:28:12Z,2024-06-10T20:28:12Z,"See the [migrations doc](https://github.com/eclipse/paho.mqtt.python/blob/master/docs/migrations.rst#on_connect) for info on this. But, in summary:

>Expected signature for callback API version 2: `connect_callback(client, userdata, connect_flags, reason_code, properties)`
>Expected signature for callback API version 1 change with MQTT protocol version:
>           * For MQTT v3.1 and v3.1.1 it's: `connect_callback(client, userdata, flags, rc)`
>          * For MQTT v5.0 it's: `connect_callback(client, userdata, flags, reason_code, properties)`

So you need to update your callbacks when changing the API version.

Note: I only speak English (and have not seen any Chinese responses in this repo).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Asyf2/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Bd2Ci,paho.mqtt.python,2172084386,847,NA,etimes2008,2875384,吴题,etimes2001@qq.com,NA,2024-06-17T03:01:13Z,2024-06-17T03:01:13Z,这个版本是警告，能照样运行，估计后面版本会默认是api2了,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Bd2Ci/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/847,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FL4If,paho.mqtt.python,2234483231,847,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:37:42Z,2024-07-17T22:37:42Z,Closing this as it looks like a response has been provided.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FL4If/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,paho.mqtt.python,2335689612,848,mqtt_enums.CallbackAPIVersion(2) not recognized by supervisor,igarreta,44700248,,,OPEN,2024-06-05T11:47:59Z,2024-10-28T17:12:55Z,"**Describe the bug**
I was trying to use paho.mqtt.client to receive messages with the following code:
```
import paho.mqtt.client as mqtt
import paho.mqtt.enums as mqtt_enums

api_version = mqtt_enums.CallbackAPIVersion(2)
client = mqtt.Client(api_version, client_id='client_id')
```
I was using virtual enviroments, and the script was working.

I added it to supervisor, using the pyhton path inside the .venv folder
```/home/pi/tank_level/.venv/bin/python /home/pi/tank_level/tank_level.py```

and I started getting the following error message:
```
 File ""/home/pi/tank_level/tank_level.py"", line 9, in <module>
    import paho.mqtt.enums as mqtt_enums
ModuleNotFoundError: No module named 'paho.mqtt.enums'
```
The supervisor command was checked, and it worked fine outside supervisor (without the virtual enviroment activated)

Finally I reverted to v 1.6.1, changed the syntaxis and it is working perfectly.

**Environment (please complete the following information):**
OS: Raspbian on R Pi 3+
Version : 2.1.0

**Final comment**
There appears to be something wrong with the import of the paho.mqtt.enums library. I tried several ways of importing it, but none worked inside supervisor.
It is strange that the import paho.mqtt.client works fine inside supervisor, but the next line import paho.mqtt.enums gives an error.
I suggest to give api_version a default value, or to make CallbackAPIVersion easier to find","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6CinjV,paho.mqtt.python,2190112981,848,NA,mesbahkhan,35614495,Mesbah Khan,khanm@ontoledgy.io,NA,2024-06-25T22:35:33Z,2024-06-25T22:35:33Z,"Getting the same issue in my raspberry pi environment as well, seems like the enums are not accessible for some reason. 
Using version 2.1 of the library ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6CinjV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6E2R7y,paho.mqtt.python,2228821746,848,NA,mpechner,211016,Michael Pechner,mikey@mikey.com,NA,2024-07-15T15:46:05Z,2024-07-15T15:46:05Z,"Same. version 2.1, raspberry pi, python 3.11.  I tried both installing the apt package and a venv with pip install.  Same issue.

Tried running example code as is as well as importing enums similar to how Client.py imporrts it.  using the full package path of course.

What setup notes am I missing?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6E2R7y/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FnYP5,paho.mqtt.python,2241692665,848,NA,jonnytest1,13507796,Jonathan Heindl,,NA,2024-07-21T15:43:57Z,2024-07-21T15:43:57Z,"yeah
![image](https://github.com/user-attachments/assets/a1867cd6-7bd9-4e20-96ec-f65a787fa69d)
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FnYP5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ReYpV,paho.mqtt.python,2440661589,848,NA,Tsjippy,44447654,,,NA,2024-10-28T06:27:44Z,2024-10-28T06:27:44Z,same here,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ReYpV/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Rhfyi,paho.mqtt.python,2441477282,848,NA,jonnytest1,13507796,Jonathan Heindl,,NA,2024-10-28T12:39:07Z,2024-10-28T12:39:07Z,"this is the syntax  btw
```
from paho.mqtt.enums import CallbackAPIVersion

CallbackAPIVersion.VERSION2
```

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Rhfyi/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Rj5DK,paho.mqtt.python,2442105034,848,NA,JamesParrott,80779630,,,NA,2024-10-28T16:44:28Z,2024-10-28T16:44:28Z,"Sorry you guys are having this trouble.  But for me to fix this I first need to reproduce it.  Unfortunately I don't have an RPi to investigate with (just a couple of Beagles), and the bug didn't occur for me in an old Raspbian Docker image (on a big cloud server, not an RPi).  

Can an RPi be emulated in Qemu, and can this be reproduced there?

So unless some other dev can pick this up, we need your help:

 - On a device and in a Python run time with this bug, can `import enum` be executed without error?  And can `enum.Enum`s be used normally?  
 - what is the Python run time exactly?  Presumably it's not an official CPython from python.org.  If so, we'd need to know not just the version and implementation (e.g. CPython), but either how the RPi system Python is built, or how Raspbian's package manager has repackaged Python (if it has done so at all).  
 
 On Ubuntu and Debian for example, if using the Python from the apt package manager, venvs and pip must be installed additionally.  And in Indiegreg's builds of Python, various implementation details have been subtley changed.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Rj5DK/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/848,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6RkHJW,paho.mqtt.python,2442162774,848,NA,JamesParrott,80779630,,,NA,2024-10-28T17:09:42Z,2024-10-28T17:09:42Z,"If this bug occurs in micropython, then unfortunately I don't think micropython even provides a simplified version of the `enum` core library: https://github.com/micropython/micropython-lib/issues/269

Does paho.mqtt claim to support Micropython somewhere?  There's no classifer for it here:  https://pypi.org/project/paho-mqtt/

The reasonable enum dependence in Paho was added in commit 6f57ce9

To run Paho on MicroPython, you'll have to pin to commit 2eb5350d or an earlier version, so unfortunately unofficial Paho support for MicroPython is currently stuck on Paho from 2021 [v1.6.1](https://github.com/eclipse/paho.mqtt.python/releases/tag/v1.6.1).


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6RkHJW/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/850,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/850,paho.mqtt.python,2351634127,850,Reinitialize API Missed callback_api_version Argument,lizaibeim,38242437,Zaibei Li,,OPEN,2024-06-13T16:59:08Z,2024-07-17T22:56:22Z,"Hi, I recently met a bug when I tried to reinitialize the mqtt client to reuse the client. 

```python
import configparser
import os.path

import paho.mqtt.client as mqtt


class MQTTClientWrapper:
    """"""Wrapper class for the MQTT client connected to predefined host and port""""""

    def __init__(self, user_data=None, on_message=None, topic=None):
        """"""Initialize the MQTT client from the configuration file""""""
        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../conf', 'audio_base.ini')
        self.subscribed_topic = None
        self.config = configparser.ConfigParser()
        self.config.read(config_path)
        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
        self.initialize(user_data, on_message, topic)

    def reinit(self, user_data=None, on_message=None, topic=None):
        """"""Reinitialize the client with new user data, on_message callback, and topic""""""
        self.subscribed_topic = None
        self.client.reinitialise()
        self.initialize(user_data, on_message, topic)

    def initialize(self, user_data=None, on_message=None, topic=None):
        self.client.connect(host=self.config['MQTT']['mqtt_host'], port=int(self.config['MQTT']['mqtt_port']),
                            keepalive=60)
        if user_data:
            self.user_data_set(user_data)
        if on_message:
            self.on_message(on_message)
        if topic:
            self.subscribe(topic)
            self.subscribed_topic = topic

    def user_data_set(self, user_data):
        """"""Set the user data for the client""""""
        self.client.user_data_set(user_data)

    def subscribe(self, topic):
        """"""Unsubscribe from the current topic and subscribe to a new topic""""""
        if self.subscribed_topic:
            self.client.unsubscribe(self.subscribed_topic)
        self.client.subscribe(topic)
        self.subscribed_topic = topic

    def publish(self, topic, message, retain=False, qos=0):
        """"""Publish a message to a topic""""""
        self.client.publish(topic, message, retain=retain, qos=qos)

    def on_message(self, on_message):
        """"""Set the on_message callback function""""""
        self.client.on_message = on_message

    def start(self):
        """"""Start the network loop in a separate thread""""""
        self.client.loop_start()

    def stop(self):
        """"""Stop the network loop""""""
        self.client.loop_stop()
```
The errors shown
```sh
self.mqtt_client.reinit()
  File ""/Users/ericli/mbox-audio/utils/mqtt_client.py"", line 22, in reinit
    self.client.reinitialise()
  File ""/Users/ericli/miniforge3/envs/audio-base/lib/python3.10/site-packages/paho/mqtt/client.py"", line 1150, in reinitialise
    self.__init__(client_id, clean_session, userdata)  # type: ignore[misc]
  File ""/Users/ericli/miniforge3/envs/audio-base/lib/python3.10/site-packages/paho/mqtt/client.py"", line 766, in __init__
    raise ValueError(
ValueError: Unsupported callback API version: version 2.0 added a callback_api_version, see migrations.md for details
```

I check the code of mqtt/client.py

```python
def reinitialise(
        self,
        client_id: str = """",
        clean_session: bool = True,
        userdata: Any = None,
    ) -> None:
        self._reset_sockets()

        self.__init__(client_id, clean_session, userdata)  # type: ignore[misc]
```
Here, the function call of reinitialise missed the callback_api_version parameter needed in the __init__ function
```python
def __init__(
        self,
        callback_api_version: CallbackAPIVersion,
        client_id: str = """",
        clean_session: bool | None = None,
        userdata: Any = None,
        protocol: int = MQTTv311,
        transport: Literal[""tcp"", ""websockets""] = ""tcp"",
        reconnect_on_failure: bool = True,
        manual_ack: bool = False,
    ) -> None:
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/850/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/850,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EpxGo,paho.mqtt.python,2225541544,850,NA,loremus,68288461,loremus,,NA,2024-07-12T13:02:44Z,2024-07-12T13:02:44Z,"+1, would love to see it fixed","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6EpxGo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/850,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ep3Cz,paho.mqtt.python,2225565875,850,NA,lizaibeim,38242437,Zaibei Li,,NA,2024-07-12T13:13:30Z,2024-07-12T13:13:30Z,"> +1, would love to see it fixed

Hi, I found a tricky way to reinitialize it without causing the error by overriding the reinitialize function for your reference. 
```py
import configparser

import paho.mqtt.client as mqtt


class MQTTClientWrapper(mqtt.Client):
    """"""Extended MQTT client that loads configuration from a file and adds custom functionalities.""""""

    def __init__(self, config_path, user_data=None, on_message=None, topics=None):
        """"""Initialize MQTT client with configurations and optional user data, message callback, and topic
        subscription.""""""
        super().__init__(callback_api_version=mqtt.CallbackAPIVersion.VERSION2)

        self.config_path = config_path
        self.current_topics = []

        config = configparser.ConfigParser()
        config.read(config_path)
        self.connect(config['MQTT']['mqtt_host'], int(config['MQTT']['mqtt_port']), 60)

        if user_data:
            self.user_data_set(user_data)
        if on_message:
            self.on_message = on_message
        if topics:
            self.subscribe(topics)

    def subscribe(self, topics, qos=0, options=None, properties=None):
        """"""Override: subscribe to new topics, ensuring previous subscriptions are removed.""""""
        if isinstance(topics, str):
            topics = [(topics, qos)]
        elif isinstance(topics, tuple):
            topics = [topics]

        if self.current_topics:
            self.unsubscribe(self.current_topics)
        for topic, qos in topics:
            super().subscribe(topic, qos)
        self.current_topics = topics

    def unsubscribe_current(self):
        """"""Unsubscribe from all currently subscribed topics.""""""
        if self.current_topics:
            for topic, _ in self.current_topics:
                self.unsubscribe(topic)
            self.current_topics = []

    def reinitialise(self, user_data=None, on_message=None, topics=None):
        """"""Override: reinitialize the client with new user data, on_message callback, and optionally change the topic
        subscription.""""""
        self._reset_sockets()
        self.__init__(config_path=self.config_path, user_data=user_data, on_message=on_message, topics=topics)
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Ep3Cz/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/851,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/851,paho.mqtt.python,2352706031,851,Exception in mqtt thread after reconnection,szymonk211,30978460,,,CLOSED,2024-06-14T07:20:18Z,2024-06-14T07:30:20Z,"Exception in thread paho-mqtt-client-:
2024-06-14T07:08:44.080628233Z Traceback (most recent call last):
2024-06-14T07:08:44.080694538Z   File ""/usr/lib/python3.10/threading.py"", line 1016, in _bootstrap_inner
2024-06-14T07:08:44.094547567Z     self.run()
2024-06-14T07:08:44.094622812Z   File ""/usr/lib/python3.10/threading.py"", line 953, in run
2024-06-14T07:08:44.095497317Z     self._target(*self._args, **self._kwargs)
2024-06-14T07:08:44.095548976Z   File ""/var/lib/odoo/.local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 4523, in _thread_main
2024-06-14T07:08:44.099756872Z     self.loop_forever(retry_first_connection=True)
2024-06-14T07:08:44.099840414Z   File ""/var/lib/odoo/.local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 2318, in loop_forever
2024-06-14T07:08:44.101517517Z     self._reconnect_wait()
2024-06-14T07:08:44.101577877Z   File ""/var/lib/odoo/.local/lib/python3.10/site-packages/paho/mqtt/client.py"", line 4534, in _reconnect_wait
2024-06-14T07:08:44.104545127Z     self._reconnect_delay = min(
2024-06-14T07:08:44.104579453Z TypeError: '<' not supported between instances of 'str' and 'int'

I disonnected from the mqtt broker, after I reconnected I had this bug. It looks like something easy to fix, so I post it here. It is not a big problem for me (not high priority). ","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/851/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/851,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6BMArb,paho.mqtt.python,2167409371,851,NA,szymonk211,30978460,,,NA,2024-06-14T07:29:49Z,2024-06-14T07:29:49Z,"nvm, I put  str inside  self._client.reconnect_delay_set, this probably caused the error.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6BMArb/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,paho.mqtt.python,2369281731,853,"How to recognize ""In state connection received CLIENT ALERT""",buhln,98514822,nico,,OPEN,2024-06-24T05:51:00Z,2024-10-05T18:48:10Z,"I observed the following issue: The communication between the client and server stopped without a disconnect on the client side. The broker log shows the follwing line:

`[MQTT] socket_error: {tls_alert,{internal_error,""TLS server: In state connection received CLIENT ALERT: Fatal - Internal Error\n""}}`

Due to the fact that we are using a quiet outdated emqx broker I do not want to call it a bug but I can not easily update the broker by myself due to the fact that it is part of a bigger infrastructure. So I have to look for a workaround, like reconnecting my client by force. 

Do you have an idea how to recognize this situation from the client side?

Thanks in advance!

# Reproduction

Not reproduceable

# Environment

* Python version: 
* Library version: 2.1.0
* MQTT server: emqx 4.3.8
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMEkw,paho.mqtt.python,2234534192,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-17T22:53:46Z,2024-07-17T22:53:46Z,"If the broker is dropping the connection then the I would expect the `on_disconnect()` callback to be called (depending on what happens with the connection this may be triggered by the kaapalive process) or, perhaps, `on_connect_fail()` if the connection was never established . Unfortunately without more info (your code, logs etc) it's difficult to say much more.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6FMEkw/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GaCA9,paho.mqtt.python,2254970941,853,NA,buhln,98514822,nico,,NA,2024-07-29T05:23:38Z,2024-07-29T05:23:38Z,We could not observe this issue for some time now. Perhaps it is/was a problem with the EQMX browser. I close the issue due to the fact that I can not provide more information at the moment. If we observe it again I will check the on_disconnect() callback (which for sure is implemented ;-) ) and perhaps reopen the issue. Thanks for supporting!,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GaCA9/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Gj2gN,paho.mqtt.python,2257545229,853,NA,buhln,98514822,nico,,NA,2024-07-30T06:11:37Z,2024-07-30T06:11:37Z,"As normal, something happens right after you closed an issue. Today we get a new error message with tls_alert:

```
2024-07-30T07:54:12.991315+02:00 [warning] M1496_PES_-350@10.0.0.2:57095 [MQTT] socket_error: {tls_alert,{bad_record_mac,""TLS server: In state connection at tls_record_1_3.erl:280 generated SERVER ALERT: Fatal - Bad Record MAC\n decryption_failed""}}
2024-07-30T07:54:12.991725+02:00 [error] supervisor: 'esockd_connection_sup - <0.1899.0>', errorContext: connection_shutdown, reason: {tls_alert,{bad_record_mac,""TLS server: In state connection at tls_record_1_3.erl:280 generated SERVER ALERT: Fatal - Bad Record MAC\n decryption_failed""}}, offender: [{pid,<0.31731.566>},{name,connection},{mfargs,{emqx_connection,start_link,[[{deflate_options,[]},{max_conn_rate,500},{active_n,100},{zone,external},{proxy_address_header,<<>>},{proxy_port_header,<<>>},{supported_subprotocols,[]}]]}}]
```

Slightly different as you mention @MattBrittan the `on_connect()` callback was called and worked. But the connection did not work after the connect. No additional error messages where created. What kind of information, beside the server logs, can I provide to look into this in more detail?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Gj2gN/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GqHBR,paho.mqtt.python,2259185745,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-30T20:50:02Z,2024-07-30T20:50:02Z,"Thanks @buhln,  

> But the connection did not work after the connect.

With the info provided to date I'm unsure if there is an issue in this library (it's not attempting to reconnect), an exception is being thrown (caught by your code but loop not restarted), or if it's an issue on the EMQX side (and the client is attempting to reconnect but the server is not responding/functioning). 

Are you able to provide some code showing how you initialise the library (connection options etc) and which callbacks are in place? Full logs would also be very helpful (but I understand they can be difficult to produce in a production environment with an issue that occurs so infrequently). Even just enabling error logging in the client might produce some useful info.

Unfortunately issues like this can be difficult to trace. The more info you can provide, the more likely it is that someone will be able to find the cause.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GqHBR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GsKjF,paho.mqtt.python,2259724485,853,NA,buhln,98514822,nico,,NA,2024-07-31T05:52:17Z,2024-07-31T05:52:17Z,"@MattBrittan thank you for you fast reply!

Here the code of my mqtt class which is controlling the MQTT connection. The callbacks were created dynamically by using the function `subscribe()` to to the fact that the hole application is configured by configuration files and a ""state machines"" is running in the background.

```python
from paho.mqtt import client as mqtt_client
import random
import os

class mqttClient:
    def __init__(self):
        self.BROKER = os.getenv('MQTT_Server')
        self.PORT = int(os.getenv('MQTT_Port'))
        self.USERNAME = os.getenv('MQTT_User')
        self.PASSWORD = os.getenv('MQTT_Password')
        self.CLIENT_ID = os.getenv('MachineNo') + f'-{random.randint(0, 1000)}'
        self.client = self.connect_mqtt()

        self._reconnect_flag = False
        self._topics = []

    def on_connect(self, client, userdata, flags, reason_code, properties):
        if reason_code == 0 and self.client.is_connected():
            # Resubscribe to all topics
            if self._reconnect_flag:
                logPes.info(""Reconnected to MQTT Broker"")
                logPes.debug(""Resubscribe on all topics"")
                for topic in self._topics:
                    self.subscribe(topic[0], topic[1], topic[2])
            else:
                logPes.info(""Connected to MQTT Broker"")

            if not self._reconnect_flag: self._reconnect_flag = True
        else:
            logPes.error(f'Failed to connect, reason code {reason_code}')

    def on_disconnect(self, client, userdata, flags, reason_code, properties):
        logPes.warning(f'MQTT Broker disconnected, reason code {reason_code}')
        # This is legacy. Reason_code 16 does not occur in the current version of the Paho MQTT library
        if reason_code == 16:
            logPes.error(f'Fatal disconnect, kill application')
            exit('Fatal MQTT disconnect: reason_code=16') # Docker will restart application

    def connect_mqtt(self):
        logPes.info('Connecting to MQTT broker ' + self.BROKER + ':' + str(self.PORT))
        client = mqtt_client.Client(mqtt_client.CallbackAPIVersion.VERSION2, self.CLIENT_ID)
        client.tls_set(ca_certs='./ca.pem')
        client.username_pw_set(self.USERNAME, self.PASSWORD)
        client.connect(self.BROKER, self.PORT, keepalive=45)
        client.on_connect = self.on_connect
        client.on_disconnect = self.on_disconnect
        return client
    
    def subscribe(self, topic, qos, callback):
        """"""Subscribe on topics""""""
        self.client.subscribe(topic, qos)
        self.client.message_callback_add(topic, callback)
        if [topic, qos, callback] not in self._topics:
            self._topics.append([topic, qos, callback])
        logPes.debug(f""Subscribed on `{topic}` topic"")

##-> END MQTT code

def main():
    # Connect to MQTT broker
    try:
        mqtt = mqttClient()
    except Exception as error:
        logging.error(""An error in MQTT connection occurred: {}"".format(error))
        exit(""An error in MQTT connection occurred: {}"".format(error))

    #
    # Some instances of classes were created here which are using the mqtt client...
    # [...]
    #

    try:
        # Start infinit loop to run mqtt client
        mqtt.client.loop_forever()
    except Exception as error:
        logging.error(""An error in MQTT connection occurred: {}"".format(error))
        mqtt.client.disconnect()
    
    except KeyboardInterrupt:
        logging.debug(""Programm stopped by user"")
        mqtt.client.disconnect()

if __name__ == ""__main__"":
    main()
```

After reconnecting, the (`self._reconnect_flag == True`) the last log messages are the `Subscribed on {topic} topic` messages. So the subscribtions were carried out. But no messages were recievied by the application from the broker.

Due to the fact that in all error messages the tag `tls_alert` occurs I tend to belive that the problem is connected to the `client.tls_set()` function only?

But if you have some ideas and tips to improve the robustness of my code I am looking forward to read it! :-)

Thanks!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GsKjF/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GzEU5,paho.mqtt.python,2261534009,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-31T22:01:44Z,2024-07-31T22:01:44Z,"This is a tricky one, I can't see anything obviously wrong with your code and am still not clear if the issue is with this library or EMQX. 

>Due to the fact that in all error messages the tag tls_alert occurs I tend to belive that the problem is connected to the client.tls_set() function only?

That would be correct in so far as `client.tls_set()` enables TLS. Basically it appears that EMQX is erroring whilst processing the incoming data (i.e. decrypting the TLS packets). Unfortunately ""Internal Error"" does not really provide an indication as to the cause of this (and it may just be corruption of some kind). What should happen at that point is that the connection drops and the client detects this (either directly or via the keepalive process) and reconnects. Obviouslly this is not happening but we don't really have enough info to determine why this is not happening.

In fact I'm not even sure if the above is fully correct, it's possible that the error logged by EMQX relates to a different connection and whatever happens when the error is processed leads to some EMQX subsystems failing which results in the loss of subscriptions on the server side (this is very much guesswork!).

In order to determine if this is an issue with the paho client I think we are going to need debug logs (unless someone else raises a similar issue), I understand that these would be difficut to get given how infrequently this occurs!

Anothe option would be to add some form of watchdog in your app (i.e. if no message received in a minute then exit so Docker will restart the app OR call SUBSCRIBE again). This is not ideal but might be the pragmatic solution.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GzEU5/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JK6vO,paho.mqtt.python,2301340622,853,NA,buhln,98514822,nico,,NA,2024-08-21T07:31:35Z,2024-08-21T07:31:35Z,After updating to EMQX to v5.7.2 this issue looks like it is gone away. I will monitor it with loglevel DEBUG of the paho client.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JK6vO/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JNTGG,paho.mqtt.python,2301964678,853,NA,buhln,98514822,nico,,NA,2024-08-21T12:44:02Z,2024-08-21T12:44:02Z,"It looks like that the client disconnects now but is able to reconnect again:

```
2024-08-21 14:21:40,369 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m88), 'b'xxx'', ... (476 bytes)
2024-08-21 14:21:40,371 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)
2024-08-21 14:21:40,371 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m89), 'b'xxx'', ... (738 bytes)
2024-08-21 14:21:40,372 - PES - WARNING - MQTT Broker disconnected, reason code Unspecified error
2024-08-21 14:21:41,415 - paho.mqtt.client - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k45) client_id=b'xxx-636'
2024-08-21 14:21:41,458 - paho.mqtt.client - DEBUG - Received CONNACK (0, 0)
2024-08-21 14:21:41,459 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m93), 'b'xxx'', ... (88 bytes)
```

I think the interessting line is:

`2024-08-21 14:21:40,371 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)`

Here the corresponding line in the log of the broker (EMQX v5.7.2):

`2024-08-21T14:21:39.794411+02:00 [info] clientid: xxx_yyy_-636, msg: terminate, peername: 10.0.x.x:46556, username: xxx, reason: {shutdown,ssl_closed}`

The problem looks like to be located on the client side. Whats quiet weird is that we run the application for other machines in the same Docker Swarm (same image) without observing this issue. Any ideas?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JNTGG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JRBdE,paho.mqtt.python,2302940996,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-08-21T20:18:23Z,2024-08-21T20:18:23Z,"Issue #691 looks similar, but this is quite old and minimal information was provided. Had a quick look and found [this issue](https://github.com/gevent/gevent/issues/1992) that looks similar but was only replicable when using `gevent`. There are also a few references to the error being produced when multiple operations on the socket are run concurrently ([for example socket.IO issues](https://github.com/miguelgrinberg/python-socketio/issues/451)) - I have had a look at the client code and the only way I could see that happening is if multiple network loops are running.

I'll remove the more_info_needed tag as I believe there is now enough info for this to be investigated further, however I suspect it's going to be difficult to resolve without a reproducable example (as you say this is only happening on one of your nodes. Will need someone with more knowledge of Python networking code to step in here!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JRBdE/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUYgS,paho.mqtt.python,2303821842,853,NA,buhln,98514822,nico,,NA,2024-08-22T05:34:40Z,2024-08-22T05:34:40Z,"I checkted the same logs again and perhaps the following infos can be helpfull.

I recognized, that just a blink before the issue occours a big message was send (message id 84). We call this kind of file Operation Instruction and this is part of the functionality of the system. The message is 1456152 bytes in size and contains a JSON object with metadata and a PDF encoded as a base64 string. The broker accepts message sizes up to 30MB.

This message is send as QoS1 but the PUBACK message for this big message is never recieved. Perhaps this incoming PUBACK message causes the issue? The debug log of the broker shows now problems here.

```
2024-08-21 14:21:40,290 - paho.mqtt.client - DEBUG - Received PUBLISH (d0, q2, r0, m34), 'xxx/sendopinstruction', ...  (62 bytes)
2024-08-21 14:21:40,290 - paho.mqtt.client - DEBUG - Sending PUBREC (Mid: 34)
2024-08-21 14:21:40,295 - paho.mqtt.client - DEBUG - Received PUBREL (Mid: 34)
2024-08-21 14:21:40,295 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m83), 'b'xxx/messages'', ... (120 bytes)
2024-08-21 14:21:40,295 - PES - DEBUG - Incoming request for OperationInstruction for order on station 1
2024-08-21 14:21:40,306 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q1, r0, m84), 'b'xxx/opinstruction'', ... (1456152 bytes)
2024-08-21 14:21:40,307 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m85), 'b'xxx/messages'', ... (129 bytes)
2024-08-21 14:21:40,307 - PES - INFO - OperationInstruction xxx for order on station 1 sent
2024-08-21 14:21:40,310 - paho.mqtt.client - DEBUG - Sending PUBCOMP (Mid: 34)
2024-08-21 14:21:40,362 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m86), 'b'xxx/messages'', ... (101 bytes)
2024-08-21 14:21:40,362 - PES - DEBUG - Next task in StateMachine is filetransfer-out
2024-08-21 14:21:40,366 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m87), 'b'xxx/messages'', ... (546 bytes)
2024-08-21 14:21:40,366 - PES - DEBUG - Statemachine: {xxx}
2024-08-21 14:21:40,369 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m88), 'b'xxx/statemachine'', ... (476 bytes)
2024-08-21 14:21:40,371 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)
2024-08-21 14:21:40,371 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m89), 'b'xxx/messages'', ... (738 bytes)
2024-08-21 14:21:40,371 - PES - DEBUG - Order to upload: {xxx}
2024-08-21 14:21:40,372 - PES - WARNING - MQTT Broker disconnected, reason code Unspecified error
2024-08-21 14:21:40,375 - PES - INFO - Transfer MachineProgram on Pallet : xxx
2024-08-21 14:21:40,380 - PES - DEBUG - Uploading file xxx
2024-08-21 14:21:41,415 - paho.mqtt.client - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k45) client_id=b'xxx_xxx_-636'
2024-08-21 14:21:41,458 - paho.mqtt.client - DEBUG - Received CONNACK (0, 0)
2024-08-21 14:21:41,459 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m93), 'b'xxx/messages'', ... (88 bytes)
2024-08-21 14:21:41,459 - PES - WARNING - PES reconnected to MQTT Broker
2024-08-21 14:21:41,462 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m94), 'b'xxx/messages'', ... (81 bytes)
2024-08-21 14:21:41,462 - PES - DEBUG - Resubscribe on all topics
```

Theoreticaly I could change the outgoing big message to QoS 0 and wait for the issue again, but perhaps we are able to fix the issue in a more clean way.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUYgS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUgUG,paho.mqtt.python,2303853830,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-08-22T06:05:14Z,2024-08-22T06:05:14Z,"Are you able to test sending the large message over the same link with another tool (e.g. `mosquitto_pub`/MQTTX? - if using mosquitto_pub then use `--repeat` to keep the connection open). Just want to try to eliminate as many possibilities as I can (I've seen similar issues where there was an issue with the MTU, doubt that it's the problem here but worth a try!).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUgUG/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUx6x,paho.mqtt.python,2303925937,853,NA,buhln,98514822,nico,,NA,2024-08-22T06:59:20Z,2024-08-22T06:59:20Z,"Now, the real tricky part starts...

As discuessed the issue happens only on one node and not all the time. On other nodes we are transmitting even bigger PDFs up to 15MB without problems.

The PDF is send to a frontend in REACT. I assume that the operator, who is using this frontend on this node has the function of the frontend all the time open which requesting automatically the PDF file from the backend when an other kind of message is recieved from the backend by the frontend (`Received PUBLISH (d0, q2, r0, m34), 'xxx/sendopinstruction', ...`).

So, the only difference I see at the moment between the affected node and all the other nodes without the issue is the load on the mqtt loop just right in this moment. The load in number of messages is not really higher than on the other nodes in this moment of the functionality of the backend. The difference is just, that one additional big messages comes on top.

My understanding is, that the client forwards messages to the loop and these arescheduled by the loop. So, load on the loop should not be the problem in general?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6JUx6x/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Jd15j,paho.mqtt.python,2306301539,853,NA,buhln,98514822,nico,,NA,2024-08-23T05:07:13Z,2024-08-23T05:07:13Z,"This morning we had a variation of the error which leads to a disconnect to the broker. The paho lib didn't recognized the discconect and therefore it didn't reconnect. The loop didn't crash.

```
2024-08-23 06:52:52,533 - PES - DEBUG - Incoming request for OperationInstruction for order on station 1
2024-08-23 06:52:52,545 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q1, r0, m223), 'b'xxx/opinstruction'', ... (1698928 bytes)
2024-08-23 06:52:52,547 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m224), 'b'xxx/messages'', ... (129 bytes)
2024-08-23 06:52:52,547 - PES - INFO - OperationInstruction xxx.pdf for order on station 1 sent
2024-08-23 06:52:52,549 - paho.mqtt.client - DEBUG - Sending PUBCOMP (Mid: 57)
2024-08-23 06:52:52,549 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m225), 'b'xxx/messages'', ... (83 bytes)
2024-08-23 06:52:52,549 - PES - INFO - Send Order sequence complete
2024-08-23 06:52:52,553 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r1, m226), 'b'xxx/messages'', ... (88 bytes)
2024-08-23 06:52:52,554 - paho.mqtt.client - ERROR - failed to receive on socket: EOF occurred in violation of protocol (_ssl.c:2406)
2024-08-23 06:52:52,555 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)
```

Again, it was in the context of sending the big message 223 (1698928 bytes). I now reduced QoS for this message from 1 to 0. Again it looks like that the PUBACK msg of this big messages was the first not recieved one.

In this issue https://github.com/eclipse/paho.mqtt.python/issues/637#issuecomment-1180349788 it is mention it could be a kind of ""race of condition"" on the socket. Espacially because the timing of the order the mqtt messages are sent could be influenced by the operators behaviour on the frontend side. This could be the reason why we have this issue on one node only.

Perhaps I have to mention that our application is also publishing with the `publish.single()` function from time to time single messages with QoS 2 (but not TLS encrypted) to a different broker. I try now to investigate if this happens in the same period of time when the big message is sent.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Jd15j/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6M2yVm,paho.mqtt.python,2363172198,853,NA,buhln,98514822,nico,,NA,2024-09-20T08:33:55Z,2024-09-20T08:33:55Z,"Today we had this following error message and a disconnect from the broker. The client did not reconnect to the broker.

```
2024-09-19 19:17:13,629 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)
2024-09-19 19:17:13,631 - paho.mqtt.client - ERROR - failed to receive on socket: self._sock is None
```

Some ideas how to catch this error and call the connect callback? My code is available in one of the earlier posts.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6M2yVm/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6NHsTf,paho.mqtt.python,2367603935,853,NA,buhln,98514822,nico,,NA,2024-09-23T08:56:57Z,2024-09-23T08:56:57Z,"@MattBrittan I was able to create a codesnipped to reproduce the issue reliable on my dev system. The example considers some of the ""features"" of our program like multithreading, subscriptions and big files.

Python version: 3.12.1
Library version: 2.1.0
MQTT server: emqx 5.7.2

```python
import logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

from paho.mqtt import client as mqtt_client
import paho.mqtt.publish as MQTTpublish
import random
import os
import base64
import threading
from dotenv import load_dotenv
load_dotenv()
from time import sleep

logPes = logging.getLogger('PES')

logMqtt = logging.getLogger('paho.mqtt.client')
logMqtt.setLevel(level=logging.DEBUG)

def read_and_encode_file(filename):
    with open(filename, 'rb') as f:
        file_content = f.read()
    encoded_content = base64.b64encode(file_content)
    return encoded_content.decode('utf-8')

class mqttClient:
    def __init__(self):
        self.BROKER = os.getenv('MQTT_Server')
        self.PORT = int(os.getenv('MQTT_Port'))
        self.USERNAME = os.getenv('MQTT_User')
        self.PASSWORD = os.getenv('MQTT_Password')
        self.CLIENT_ID = 'Testmachine_' + f'-{random.randint(0, 1000)}'
        self.client = self.connect_mqtt()

        self._reconnect_flag = False
        self._topics = []

    def on_connect(self, client, userdata, flags, reason_code, properties):
        if reason_code == 0 and self.client.is_connected():
            # Resubscribe to all topics
            if self._reconnect_flag:
                logPes.warning(""PES reconnected to MQTT Broker"")
                logPes.debug(""Resubscribe on all topics"")
                for topic in self._topics:
                    self.subscribe(topic[0], topic[1], topic[2])
            else:
                logPes.info(""PES connected to MQTT Broker"")

            if not self._reconnect_flag: self._reconnect_flag = True
        else:
            logPes.error(f'PES failed to connect, reason code {reason_code}')

    def on_disconnect(self, client, userdata, flags, reason_code, properties):
        logPes.warning(f'MQTT Broker disconnected, reason code {reason_code}')
        if reason_code == 16:
            logPes.error(f'Fatal disconnect, kill application')
            exit('Fatal MQTT disconnect: reason_code=16')

    def connect_mqtt(self):
        logPes.info('PES is connecting to MQTT broker ' + self.BROKER + ':' + str(self.PORT))
        client = mqtt_client.Client(mqtt_client.CallbackAPIVersion.VERSION2, self.CLIENT_ID)
        client.enable_logger(logMqtt)
        client.tls_set(ca_certs='./ca.pem')
        client.username_pw_set(self.USERNAME, self.PASSWORD)
        client.connect(self.BROKER, self.PORT, keepalive=45)
        client.on_connect = self.on_connect
        client.on_disconnect = self.on_disconnect
        return client
    
    def subscribe(self, topic, qos, callback):
        """"""Subscribe on topics""""""
        self.client.subscribe(topic, qos)
        self.client.message_callback_add(topic, callback)
        if [topic, qos, callback] not in self._topics:
            self._topics.append([topic, qos, callback])
        logPes.debug(f""Subscribed on `{topic}` topic"")

##-> END MQTT code

class mqtt_load:
    def __init__(self, mqtt):
        self.mqtt = mqtt
        self.data = self.base64_string(10)
        t1 = threading.Thread(target=self.publish_message, args=(self.mqtt, self.data)) 
        t1.start()

    # Create big base64 string
    def base64_string(self, size_in_mb):
        size_in_bytes = size_in_mb * 1024 * 1024
        byte_array = bytearray(b'1' * size_in_bytes)
        encoded_string = base64.b64encode(byte_array).decode('utf-8')
        return encoded_string

    # Function to publish messages
    def publish_message(self, mqtt, data):
        sleep(1)
        for n in range(1,3):        # -> set range to (1, 2) for no ssl error
            mqtt.client.publish('test/test', payload='Test' + str(n), qos=0, retain=False)
            mqtt.client.publish('test/data', payload=data, qos=2, retain=False)

def incoming_msg(client, userdata, msg):
    logPes.debug(f""Received message on topic `{msg.topic}`"")

def main():
    # Connect to MQTT broker
    try:
        mqtt = mqttClient()
        # Subscribe on topics
        topics=[
                ['test/test', 2, incoming_msg],
                ['test/data', 2, incoming_msg]
                ] 
        
        for topic in topics:
            mqtt.subscribe(topic[0], topic[1], topic[2])
    except Exception as error:
        logging.error(""An error in MQTT connection occurred: {}"".format(error))
        exit(""An error in MQTT connection occurred: {}"".format(error))
    mqtt_load(mqtt)

    try:
        # Start infinit loop to run mqtt client
        mqtt.client.loop_forever()
    except Exception as error:
        logging.error(""An error in MQTT connection occurred: {}"".format(error))
        mqtt.client.disconnect()

    except KeyboardInterrupt:
        logging.debug(""Programm stopped by user"")
        mqtt.client.disconnect()

if __name__ == ""__main__"":
    main()
```

And here the log messages with the ssl bad length error:

```
2024-09-23 14:21:11,422 - PES - INFO - PES is connecting to MQTT broker
2024-09-23 14:21:11,440 - paho.mqtt.client - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k45) client_id=b'Testmachine_-66'
2024-09-23 14:21:11,440 - paho.mqtt.client - DEBUG - Sending SUBSCRIBE (d0, m1) [(b'test/test', 2)]
2024-09-23 14:21:11,441 - PES - DEBUG - Subscribed on `test/test` topic
2024-09-23 14:21:11,441 - paho.mqtt.client - DEBUG - Sending SUBSCRIBE (d0, m2) [(b'test/data', 2)]
2024-09-23 14:21:11,441 - PES - DEBUG - Subscribed on `test/data` topic
2024-09-23 14:21:11,484 - paho.mqtt.client - DEBUG - Received CONNACK (0, 0)
2024-09-23 14:21:11,485 - PES - INFO - PES connected to MQTT Broker
2024-09-23 14:21:11,485 - paho.mqtt.client - DEBUG - Received SUBACK
2024-09-23 14:21:11,689 - paho.mqtt.client - DEBUG - Received SUBACK
2024-09-23 14:21:12,462 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m3), 'b'test/test'', ... (5 bytes)
2024-09-23 14:21:12,466 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q2, r0, m4), 'b'test/data'', ... (13981016 bytes)
2024-09-23 14:21:12,476 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q0, r0, m5), 'b'test/test'', ... (5 bytes)
2024-09-23 14:21:12,482 - paho.mqtt.client - DEBUG - Received PUBLISH (d0, q0, r0, m0), 'test/test', ...  (5 bytes)
2024-09-23 14:21:12,482 - PES - DEBUG - Received message on topic `test/test`
2024-09-23 14:21:12,483 - paho.mqtt.client - ERROR - failed to receive on socket: [SSL: BAD_LENGTH] bad length (_ssl.c:2406)
2024-09-23 14:21:12,486 - PES - WARNING - MQTT Broker disconnected, reason code Unspecified error
2024-09-23 14:21:13,499 - paho.mqtt.client - DEBUG - Sending CONNECT (u1, p1, wr0, wq0, wf0, c1, k45) client_id=b'Testmachine_-66'
2024-09-23 14:21:13,542 - paho.mqtt.client - DEBUG - Received CONNACK (0, 0)
2024-09-23 14:21:13,542 - PES - WARNING - PES reconnected to MQTT Broker
2024-09-23 14:21:13,542 - PES - DEBUG - Resubscribe on all topics
2024-09-23 14:21:13,542 - paho.mqtt.client - DEBUG - Sending SUBSCRIBE (d0, m7) [(b'test/test', 2)]
2024-09-23 14:21:13,542 - PES - DEBUG - Subscribed on `test/test` topic
2024-09-23 14:21:13,542 - paho.mqtt.client - DEBUG - Sending SUBSCRIBE (d0, m8) [(b'test/data', 2)]
2024-09-23 14:21:13,542 - PES - DEBUG - Subscribed on `test/data` topic
2024-09-23 14:21:13,542 - paho.mqtt.client - DEBUG - Sending PUBLISH (d1, q2, r0, m4), 'b'test/data'', ... (13981016 bytes)
2024-09-23 14:21:13,550 - paho.mqtt.client - DEBUG - Sending PUBLISH (d0, q2, r0, m6), 'b'test/data'', ... (13981016 bytes)
2024-09-23 14:21:13,557 - paho.mqtt.client - DEBUG - Received SUBACK
2024-09-23 14:21:13,558 - paho.mqtt.client - DEBUG - Received SUBACK
2024-09-23 14:21:13,757 - paho.mqtt.client - DEBUG - Received PUBREC (Mid: 4)
2024-09-23 14:21:13,757 - paho.mqtt.client - DEBUG - Sending PUBREL (Mid: 4)
2024-09-23 14:21:14,089 - paho.mqtt.client - DEBUG - Received PUBLISH (d0, q2, r0, m1), 'test/data', ...  (13981016 bytes)
2024-09-23 14:21:14,089 - paho.mqtt.client - DEBUG - Sending PUBREC (Mid: 1)
2024-09-23 14:21:14,089 - paho.mqtt.client - DEBUG - Received PUBREC (Mid: 6)
2024-09-23 14:21:14,089 - paho.mqtt.client - DEBUG - Sending PUBREL (Mid: 6)
2024-09-23 14:21:14,089 - paho.mqtt.client - DEBUG - Received PUBCOMP (Mid: 4)
2024-09-23 14:21:14,211 - paho.mqtt.client - DEBUG - Received PUBLISH (d0, q2, r0, m2), 'test/data', ...  (13981016 bytes)
2024-09-23 14:21:14,211 - paho.mqtt.client - DEBUG - Sending PUBREC (Mid: 2)
2024-09-23 14:21:14,212 - paho.mqtt.client - DEBUG - Received PUBREL (Mid: 1)
2024-09-23 14:21:14,212 - PES - DEBUG - Received message on topic `test/data`
2024-09-23 14:21:14,212 - paho.mqtt.client - DEBUG - Sending PUBCOMP (Mid: 1)
2024-09-23 14:21:14,212 - paho.mqtt.client - DEBUG - Received PUBCOMP (Mid: 6)
2024-09-23 14:21:14,218 - paho.mqtt.client - DEBUG - Received PUBREL (Mid: 2)
2024-09-23 14:21:14,218 - PES - DEBUG - Received message on topic `test/data`
2024-09-23 14:21:14,218 - paho.mqtt.client - DEBUG - Sending PUBCOMP (Mid: 2)
2024-09-23 14:21:59,273 - paho.mqtt.client - DEBUG - Sending PINGREQ
2024-09-23 14:21:59,277 - paho.mqtt.client - DEBUG - Received PINGRESP
```

It looks to be connected to the thread which publishes the messages. If you reduce the number of messages in the for-loop to one loop, the error disapears:

This creates the error:
```python
# Function to publish messages
    def publish_message(self, mqtt, data):
        sleep(1)
        for n in range(1,3):
            mqtt.client.publish('test/test', payload='Test' + str(n), qos=0, retain=False)
            mqtt.client.publish('test/data', payload=data, qos=2, retain=False)
```

no error:
```python
# Function to publish messages
    def publish_message(self, mqtt, data):
        sleep(1)
        for n in range(1,2):
            mqtt.client.publish('test/test', payload='Test' + str(n), qos=0, retain=False)
            mqtt.client.publish('test/data', payload=data, qos=2, retain=False)
```

Would be great if you can test the code multiple times to check if you get the ssl error, too.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6NHsTf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6NlXXP,paho.mqtt.python,2375382479,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-09-25T22:32:06Z,2024-09-25T22:32:06Z,Sorry @buhln I'm flat out with with other work currently so have not had time to look at this (or a PR's on the projects I'm leading). Will try to find time but it may be a while - sorry.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6NlXXP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Nn2nx,paho.mqtt.python,2376034801,853,NA,buhln,98514822,nico,,NA,2024-09-26T06:21:44Z,2024-09-26T06:21:44Z,No problem. I think I found a workaround for the problem. I am sending the big files with the `publish.single` function only. So long it works without a SSL error. But this is definitly not best practice. I am still interessted in a solution using one connection to the broker only.,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Nn2nx/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Nn98n,paho.mqtt.python,2376064807,853,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-09-26T06:42:20Z,2024-09-26T06:42:20Z,"I suspect there is a data race somewhere that's causing this, having the proof of concept should make it a lot easier to find so thanks for that (still have not had a chance to actually run it on my setup yet).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Nn98n/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/853,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6OwyzS,paho.mqtt.python,2395155666,853,NA,buhln,98514822,nico,,NA,2024-10-05T18:48:09Z,2024-10-05T18:48:09Z,Perhaps it is a good idea to rename the issue?,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6OwyzS/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/855,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/855,paho.mqtt.python,2413008760,855,Feature request: Clean up reconnection semantics,couling,23001043,Philip Couling,,OPEN,2024-07-17T08:35:55Z,2024-07-17T08:36:09Z,"# Feature Description

A segnificant proportion of MQTT3 and MQTT 5 is devoted to reconnection and maintaining a single session accross reconnects.

This whole area is done very badly by Paho with some MQTT5 improvements ignored and even a core MQTT3 feature broken.

For us, this has directly prevented adoption for over a year.

## Problems

### 1) Clean Start cannot change between successive CONNECT messages

This API logic appears to have been copied from MQTT3.1 where ""clean session"" indicated in a single boolean flag:
 - start a new session when I connect
 - discard my session when I disconnect

MQTT5 split those into ""clean start"" and ""session expiry interval"". This has a clear intent that a client can start a new session on this connect that it indends to continue on a later one.

For a client to achieve this, it must send clean start 1 on the first CONNECT message and clean start 0 on subsiquent messages. But Paho's API doesn't seem to support this basic use case of the new MQTT5 split.

Forcing a client to specify clean start 0 on first CONNECT can cause it to inherit a session it knows nothing about, including subscriptions that it doesn't understand.

### 2) QOS2 ""Exactly once"" duplciates messages

QOS2 duplicates messages ""deliberately"" against the feature's core purpose. This feature is front and center of MQTT and even mentioned in the abstract: 

> ""Exactly once"", where messages are assured to arrive exactly once. This level could be used, for example, with billing systems where duplicate or lost messages could lead to incorrect charges being applied.

Also discussed in #733

 ### 3) QOS2 PUBLISH responses are not reported to the user

This makes it impossible to track what has actually been sent and what hasn't.

QOS2 PUBLISH failures are reported in PUBREC reason codes, but these are never passed to the user. What is reported to the user is PUBCOMP reason codes but these do not report any errors or useful information.

This has been ported from MQTT3.1 semantics. Under MQTT3.1 either PUBLISH or PUBREL could trigger onward transmission or processing (Described in [MQTT3.1.1 section 4.3.3](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349369). 

Under MQTT5, this explicit ambiguity has been deleted from the text ([MQTT5 secion 4.3.3](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901234)) with the strong inference that PUBLISH and not PUBREL is the right place to process a message.

A success / failure reason code has been added to PUBACK and PUBREC but **not** added to PUBCOMP. Giving PUBACK and PUBREC into the same purpose and relagating PUBCOMP to just releasing the message ID for recycling.

The current behaviour is to trigger `on_publish()` for PUBCOMP and PUBREC is discarded. This is liable to result in misleading 0x92 ""Packet Identifier not found"" or, even worse, an incorrect 0x00 ""Success"" (mosquitto sends this).

### 4) Session Expiry is burried and has a horrible default

As noted for (1) ""clean session"" has been split into ""clean start"" and ""session expiry interval"" but while ""clean start has been added to the `connect()` method but the [""Session Expiry Interval""](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901048) is burried in the properties with a defaut to discard every connection.

### 5) Paho has never had a mechanism to re-load a session state

Many message brokers, including mosquitto, can persist their sessions accross restarts.  While I'm not asking for Paho to start writing to disk, it would be great if Pahao offered someway to extract and re-load a session state so that it can be persisted somewhere.

# Requested Solution
- [ ]  1) Ideally ""clean start"" could be made automatic with 1 on first CONNECT without an existing session in Paho and 0 after that. Open to ideas on how to make this backward compatible.

- [ ] 2) There will always be a situation where a session in Paho cannot be recovered on the server which, in light of (1) is easily identified as ""clean session 0"" with response ""session found 0"". The `on_connect` hook wouldn't let you do this, because of (1). A new callback or an ammendment to `on_connect` which would allow the user to detect this situation, know which messages are potentially forefit would be ideal.

- [ ] 3) The reason code in MQTT5 must come from PUBREC not PUBCOMP, even if it wats for PUBCOM when reason code < 0x80. Ideally it should not send PUBREL and wait for PUBCOMP when PUBREC reason code was >= 0x80. When reason code < 0x80, waiting for PUBCOMP would be fine just as long as the reason code came from PUBREC (see [No matching subscribers](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901134))

- [ ] 4) This is minor, but it would be nice for ""session expiry interval"" to be bumped up to a first order argument on `connect()` along side `clean_start`. In reality ""session expiry interval"" could be used to infer a desire from the user to persist the session and automatically infer ""clean session"".

- [ ] 5) This would be a completely new feature but simple enough to implement. For disconnected sessions only. A simple `dump_state()` and `load_state()` function which would both only work for disconnected sessions.  They could return a simple dict containing:
    - Library version - where `load_state()` may chose to error on major version mismatches.
    - A list of queued publishes except QOS 0 including payload, current state of handshake
    - If internally recorded, all subscriptions

# Alternatives

One Idea I've toyed with is suggesting a single ""Reconnection Rules"" structure which would encapsulate most of this. The advantage is that having a single argument with a datastructure makes the rest of the options backward compatible if ""reconnection rules"" is not set.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/855/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/856,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/856,paho.mqtt.python,2432079313,856,buffer strategy for QOS>0 messages,dakhnod,26143255,Daniel Dakhno,dakhnod@gmail.com,OPEN,2024-07-26T11:57:38Z,2024-07-29T06:15:43Z,"In my application. I am publishing sensor data and need to buffer messages in case connection is temporarily lost.
Thus, I am sending my data with QOS 2.
I limited the number of queued message in case of disconnection via max_queued_messages_set().

Now, If I got it right, here is what happens when the buffer runs full: all newer messages get discarded.
So, with a limit of 5, if I publish 1 2 3 4 5 6 7 8 9 0, after reconnection these messages get delivered: 1 2 3 4 5.

For me, it would be more useful if the buffer would be circularly rewritten, so the newest 5 messages are queued.

Is there a way to set this up?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/856/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/856,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GaQCP,paho.mqtt.python,2255028367,856,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-07-29T06:15:41Z,2024-07-29T06:15:41Z,"Currently this is a fairly [simple check](https://github.com/eclipse/paho.mqtt.python/blob/master/src/paho/mqtt/client.py#L1788C16-L1788C107)

```
 if self._max_queued_messages > 0 and len(self._out_messages) >= self._max_queued_messages:
                    message.info.rc = MQTTErrorCode.MQTT_ERR_QUEUE_SIZE
                    return message.info
```

So the library does not offer the functionality you are looking for and I've tagged this as an enhancement request (feel free to submit a PR if it's something you wish to implement).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6GaQCP/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/857,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/857,paho.mqtt.python,2447938528,857,max_queued_messages_set(size),Julz-afk,60391803,Luigi Julian Di Leo,,OPEN,2024-08-05T08:29:51Z,2024-08-05T20:19:44Z,"I am using python Paho client on my raspberrypi CM4 module. I have a question on the offline queue ""mqtt_client.max_queued_messages_set(100)""

1. Will this queue only start to fill up when the connection to the broker is ""disconnected"" ?
2. When a message did not go through successfully to the broker will the message append to the queue for retry later ?
3. Is there a way I can monitor this queue, I want to get the length and if power fails I want to dump to local storage before powering down?

I have verified, I am using the latest version of Paho-client, Python and Api version 2 in the paho client.

I checked forms but couldnt find anything at this stage, will continue my search but hope someone could assist me , or point me in the right direction.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/857/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/857,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6HSx2P,paho.mqtt.python,2269846927,857,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2024-08-05T20:19:35Z,2024-08-05T20:19:35Z,Question repeated on [stack overflow](https://stackoverflow.com/questions/78835619/mqtt-paho-client-python).,"{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6HSx2P/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/858,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/858,paho.mqtt.python,2472273129,858,Failed to connect: Not authorized. loop_forever() will retry connection,kkakji,11254501,kkakji,,OPEN,2024-08-19T01:30:48Z,2024-08-19T01:31:02Z,"# Prerequisites

*Note: You may remove this section prior to submitting your question.*

A small team of volunteers monitors issues; this is the same team that develops the library. Whilst we are keen to help,
there are often better places to ask questions, including:

- [Stack Overflow](https://stackoverflow.com/questions/tagged/mqtt) - well written questions are generally answered 
within a day. Please use the tags MQTT, Python and Paho.
- [Reddit](https://www.reddit.com/r/MQTT/) - great for questions requiring discussion.
- [MQTT Google Group](https://groups.google.com/g/mqtt) - fairly quiet but questions about the protocol are generally answered quickly.
- [Eclipse paho-dev mailing list](https://dev.eclipse.org/mailman/listinfo/paho-dev) - for general discussion about the paho project.

Prior to asking a question here, please:

- [ ] Search the resources mentioned above (it's likely someone else has asked the same question)
- [ ] Read the [readme](https://github.com/eclipse/paho.mqtt.python/blob/master/README.rst) (especially the
""Known limitations"" section) and look at the [examples](https://github.com/eclipse/paho.mqtt.python/tree/master/examples).
- [ ] Search through the [project issues](https://github.com/eclipse/paho.mqtt.python/issues).
- [ ] Confirm that you are using the latest release of the library.
- [ ] Ensure your question is specific to this project; consider using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
to test your assumptions.

# Question

(1) make account file
cd /etc/mosquitto
mosquitto_passwd -c .account userid
Password: passwd
Reenter password: passwd

(2) /etc/mosquitto/mosquitto.conf
.....
password_file /etc/mosquitto/.account
.....

(3) source code
import time
import paho.mqtt.client as mqtt

MQTT_SERVER = ""127.0.0.1""
MQTT_PORT = 1883
MQTT_TOPIC = ""wind""

def on_connect(client, userdata, flags, reason_code, properties):
    if reason_code.is_failure:
        print(f""Failed to connect: {reason_code}. loop_forever() will retry connection"")
    else:
        # we should always subscribe from on_connect callback to be sure
        # our subscribed is persisted across reconnections.
        #client.subscribe(""$SYS/#"")
        client.subscribe(MQTT_TOPIC)

.......

client_userdata = 1

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)

......
mqttc.on_connect = on_connect
......

username = ""userid""
password = ""passwd""

mqttc.username_pw_set(username, password)
mqttc.user_data_set([])
mqttc.connect(MQTT_SERVER, MQTT_PORT)

.....
mqttc.loop_forever()


# Result
Failed to connect: Not authorized. loop_forever() will retry connection

# Environment
*It's often helpful for us to know how you are using the library so please provide:*

* Python version:
* Library version:
* Operating system (including version):
* MQTT server (name, version, configuration, hosting details):","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/858/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/859,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/859,paho.mqtt.python,2509224572,859,raise error when run the examples loop_asyncio.py,Jzhenli,42105688,,,OPEN,2024-09-06T01:32:06Z,2024-09-06T01:33:04Z,"Hi, when run the examples [loop_asyncio.py](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/loop_asyncio.py)  with paho-mqt 2.1.0 will raise NotImplementedError. 

BTW, I test it on win11 with python3.10.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/859/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/860,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/860,paho.mqtt.python,2517199672,860,Incorrect handling of DISCONNECT packet,NickFoubert,1471446,Nick Foubert,,OPEN,2024-09-10T18:01:26Z,2025-01-08T13:48:02Z,"I believe the handling of DISCONNECT (at least for MQTT 5) isn't correct:

https://github.com/eclipse/paho.mqtt.python/blob/d45de3737879cfe7a6acc361631fa5cb1ef584bb/src/paho/mqtt/client.py#L4021C1-L4022C1

I'm using paho as a test client and it doesn't seem to be correctly handling a DISCONNECT packet with a non-zero reason code and zero length properties (i.e. Remaining_Length = 2).","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/860/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/860,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ZpMxY,paho.mqtt.python,2577714264,860,NA,abeaum,155455315,,,NA,2025-01-08T13:48:00Z,2025-01-08T13:48:00Z,"I have also come across the same issue, which appears also to be dependent on the MQTT broker. 

The DISCONNECT reason codes can be extracted by paho-mqtt when using hivemq as a broker (because hivemq DISCONNECT packet has a length > 2 bytes), but it doesn't extract the reason code when I use mosquitto. 

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6ZpMxY/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/861,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/861,paho.mqtt.python,2526365740,861,cant install paho on my raspberry,xXmilchzombieXx,72553828,7ower3efender,,OPEN,2024-09-14T12:44:31Z,2024-10-04T08:14:05Z,"* Python version: 3.11.2
* Library version: 
* Operating system (including version): Bookworm 12
* MQTT server (name, version, configuration, hosting details): Mosquitto 2.0.11


I tried all installation commands but all get me the information:

""-bash: pip3: command not found"" or ""-bash: git: command not found""","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/861/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/861,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Oo_Ot,paho.mqtt.python,2393109421,861,NA,DungGalaxy,80237031,dungvh,,NA,2024-10-04T08:14:03Z,2024-10-04T08:14:03Z,"you have to install pip:
sudo apt update
sudo apt install python3-pip
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Oo_Ot/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/862,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/862,paho.mqtt.python,2531777168,862,Connecting With Enhanced Authentication,patilsnr,110431552,Nick Patilsen,,OPEN,2024-09-17T18:07:52Z,2024-09-17T18:08:06Z,"# Prerequisites

*Note: You may remove this section prior to submitting your question.*

A small team of volunteers monitors issues; this is the same team that develops the library. Whilst we are keen to help,
there are often better places to ask questions, including:

- [Stack Overflow](https://stackoverflow.com/questions/tagged/mqtt) - well written questions are generally answered 
within a day. Please use the tags MQTT, Python and Paho.
- [Reddit](https://www.reddit.com/r/MQTT/) - great for questions requiring discussion.
- [MQTT Google Group](https://groups.google.com/g/mqtt) - fairly quiet but questions about the protocol are generally answered quickly.
- [Eclipse paho-dev mailing list](https://dev.eclipse.org/mailman/listinfo/paho-dev) - for general discussion about the paho project.

Prior to asking a question here, please:

- [ ] Search the resources mentioned above (it's likely someone else has asked the same question)
- [ ] Read the [readme](https://github.com/eclipse/paho.mqtt.python/blob/master/README.rst) (especially the
""Known limitations"" section) and look at the [examples](https://github.com/eclipse/paho.mqtt.python/tree/master/examples).
- [ ] Search through the [project issues](https://github.com/eclipse/paho.mqtt.python/issues).
- [ ] Confirm that you are using the latest release of the library.
- [ ] Ensure your question is specific to this project; consider using another tool (e.g. [MQTTX](https://mqttx.app/) / [mosquitto_sub](https://mosquitto.org/man/mosquitto_sub-1.html))
to test your assumptions.

# Question
I'm trying to figure out how to connect to a broker with a SAT Token. Essentially, looking for the Paho way to do this:
<img width=""926"" alt=""image"" src=""https://github.com/user-attachments/assets/cd07d173-089c-4f68-b61f-0b28e93d23c3"">

Currently, I'm setting a `Properties` object with the given parameters and passing it into `connect()`:
<img width=""364"" alt=""image"" src=""https://github.com/user-attachments/assets/6b7174a3-3ffe-4d87-ac24-97dde51318ee"">

However, we are still unable to connect. Are the Auth Method and Data properties being used correctly here?

* Python version: 3.12
* Library version: 2.1.0
* Operating system (including version): Windows 11
* MQTT server (name, version, configuration, hosting details): MQTT 5","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/862/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/863,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/863,paho.mqtt.python,2532767376,863,Socket error: 407: Proxy Authentication Required,henzycuong1,55269394,Four,,OPEN,2024-09-18T05:42:10Z,2024-09-30T03:35:06Z,"code:
```
mqtt_client = mqtt.Client(CallbackAPIVersion.VERSION2, protocol=MQTTProtocolVersion.MQTTv5, transport='websockets')
mqtt_client.proxy_set(proxy_type=socks.HTTP, proxy_addr='116.97.15.46', proxy_port=21433, proxy_username='61mdQQwpOX', proxy_password='vZxDiS')
mqtt_client.connect(""wss.***.***"", 443)
```
error:
```
File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\paho\mqtt\client.py"", line 1435, in connect
    return self.reconnect()
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\paho\mqtt\client.py"", line 1598, in reconnect
    self._sock = self._create_socket()
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\paho\mqtt\client.py"", line 4609, in _create_socket
    sock = self._create_socket_connection()
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\paho\mqtt\client.py"", line 4638, in _create_socket_connection
    return socks.create_connection(addr, timeout=self._connect_timeout, source_address=source, **proxy)
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\socks.py"", line 209, in create_connection
    raise err
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\socks.py"", line 199, in create_connection
    sock.connect((remote_host, remote_port))
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\socks.py"", line 47, in wrapper
    return function(*args, **kwargs)
  File ""c:\Users\Four\AppData\Local\Programs\Python\Python310\lib\site-packages\socks.py"", line 814, in connect
    raise GeneralProxyError(""Socket error"", error)
socks.GeneralProxyError: Socket error: 407: Proxy Authentication Required
```
proxy is still alive and uses the requests as usual","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/863/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/863,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6N-Xv3,paho.mqtt.python,2381937655,863,NA,henzycuong1,55269394,Four,,NA,2024-09-30T03:35:05Z,2024-09-30T03:35:05Z,"Fixed:
Change
```Proxy-Authorization: basic ``` to ```Proxy-Authorization: Basic ``` in socks.py line 679","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6N-Xv3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/865,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/865,paho.mqtt.python,2605925860,865,Programmatically way to determine if paho-mqtt processes queue is empty?,Jibun-no-Kage,96628648,,,OPEN,2024-10-22T16:24:50Z,2024-10-22T16:25:04Z,"Programmatically way to determine if paho-mqtt processes queue completed?  For example, if I call client.disconnect(), the on_disconnect call back may need a bit more time to complete, is there a way I can test for this?","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/865/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/866,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/866,paho.mqtt.python,2621738456,866,"Regression from 3rd party deps.  Test failures in CI (the ""tox"" workflow) due to Callback API v1 deprecation warnings, on Py 3.8-3.12 (Tox 4.23.2, Pytest 8.3.3).  The tests pass on Py 3.7 (Tox 4.8.0, Pytest 7.4.4 )..",JamesParrott,80779630,,,OPEN,2024-10-29T16:14:10Z,2024-10-29T16:18:30Z,"The last run on this repo was 6 months ago.  If nothing else, it would be good to run it again in this repo, alongside the scheduled Code Quality jobs.

The failures seem due to Deprecation warnings of the API  v1, so maybe a new version of something interprets warnings as test failures.

```
Run tox -e py
py: install_deps> python -I -m pip install pytest pytest-cov
.pkg: install_requires> python -I -m pip install hatchling
.pkg: _optional_hooks> python /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pyproject_api/_backend.py True hatchling.build
.pkg: get_requires_for_build_sdist> python /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pyproject_api/_backend.py True hatchling.build
.pkg: freeze> python -m pip freeze --all
.pkg: hatchling==1.25.0,packaging==24.1,pathspec==0.12.1,pip==24.3.1,pluggy==1.5.0,trove-classifiers==2024.10.21.16
.pkg: build_sdist> python /opt/hostedtoolcache/Python/3.12.7/x64/lib/python3.12/site-packages/pyproject_api/_backend.py True hatchling.build
py: install_package> python -I -m pip install --force-reinstall --no-deps /home/runner/work/paho.mqtt.python/paho.mqtt.python/.tox/.tmp/package/1/paho_mqtt-2.1.1.dev0.tar.gz
py: freeze> python -m pip freeze --all
py: coverage==7.6.4,iniconfig==2.0.0,packaging==24.1,paho-mqtt @ file:///home/runner/work/paho.mqtt.python/paho.mqtt.python/.tox/.tmp/package/1/paho_mqtt-2.1.1.dev0.tar.gz#sha256=8fd77bfaa222139f52d7f47e1dddbdb1ec5a61cfc1add5233d900c5d29d34398,pip==24.3.1,pluggy==1.5.0,pytest==8.3.3,pytest-cov==5.0.0
py: commands[0]> pytest --cov=. --cov=/home/runner/work/paho.mqtt.python/paho.mqtt.python/.tox/py/lib/python3.12/site-packages/paho
============================= test session starts ==============================
platform linux -- Python 3.12.7, pytest-8.3.3, pluggy-1.5.0
cachedir: .tox/py/.pytest_cache
rootdir: /home/runner/work/paho.mqtt.python/paho.mqtt.python
configfile: pyproject.toml
testpaths: tests, src
plugins: cov-5.0.0
collected 163 items

tests/lib/test_01_asyncio.py .                                           [  0%]
tests/lib/test_01_decorators.py .                                        [  1%]
tests/lib/test_01_keepalive_pingreq.py .E                                [  1%]
tests/lib/test_01_no_clean_session.py .                                  [  2%]
tests/lib/test_01_reconnect_on_failure.py ..                             [  3%]
tests/lib/test_01_unpwd_empty_password_set.py .E                         [  4%]
tests/lib/test_01_unpwd_empty_set.py .E                                  [  4%]
tests/lib/test_01_unpwd_set.py .                                         [  5%]
tests/lib/test_01_unpwd_unicode_set.py .                                 [  6%]
tests/lib/test_01_will_set.py .                                          [  6%]
tests/lib/test_01_will_unpwd_set.py .                                    [  7%]
tests/lib/test_01_zero_length_clientid.py .                              [  7%]
tests/lib/test_02_subscribe_qos0.py .                                    [  8%]
tests/lib/test_02_subscribe_qos1.py .                                    [  9%]
tests/lib/test_02_subscribe_qos2.py .                                    [  9%]
tests/lib/test_02_unsubscribe.py .                                       [ 10%]
tests/lib/test_03_publish_b2c_qos1.py .                                  [ 11%]
tests/lib/test_03_publish_b2c_qos2.py .E                                 [ 11%]
tests/lib/test_03_publish_c2b_qos1_disconnect.py .                       [ 12%]
tests/lib/test_03_publish_c2b_qos2_disconnect.py .                       [ 12%]
tests/lib/test_03_publish_fill_inflight.py x                             [ 13%]
tests/lib/test_03_publish_helper_qos0.py .                               [ 14%]
tests/lib/test_03_publish_helper_qos0_v5.py .                            [ 14%]
tests/lib/test_03_publish_helper_qos1_disconnect.py .                    [ 15%]
tests/lib/test_03_publish_qos0.py .                                      [ 15%]
tests/lib/test_03_publish_qos0_no_payload.py .                           [ 16%]
tests/lib/test_04_retain_qos0.py .                                       [ 17%]
tests/lib/test_08_ssl_bad_cacert.py .                                    [ 17%]
tests/lib/test_08_ssl_connect_alpn.py .                                  [ 18%]
tests/lib/test_08_ssl_connect_cert_auth.py .                             [ 19%]
tests/lib/test_08_ssl_connect_cert_auth_pw.py .                          [ 19%]
tests/lib/test_08_ssl_connect_no_auth.py .                               [ 20%]
tests/lib/test_08_ssl_fake_cacert.py .                                   [ 20%]
tests/test_client.py ................................................... [ 52%]
...............                                                          [ 61%]
tests/test_matcher.py .................                                  [ 71%]
tests/test_mqttv5.py .....................                               [ 84%]
tests/test_reasoncodes.py ...                                            [ 86%]
tests/test_websocket_integration.py ..................                   [ 97%]
tests/test_websockets.py ....                                            [100%]

==================================== ERRORS ====================================
________________ ERROR at teardown of test_01_keepalive_pingreq ________________

    def fin():
        stop_process(proc)
        if proc.returncode != expected_returncode:
>           raise RuntimeError(f""Client {name} exited with code {proc.returncode}, expected {expected_returncode}"")
E           RuntimeError: Client 01-keepalive-pingreq.py exited with code None, expected 0

tests/lib/conftest.py:75: RuntimeError
----------------------------- Captured stderr call -----------------------------
/home/runner/work/paho.mqtt.python/paho.mqtt.python/tests/lib/clients/01-keepalive-pingreq.py:10: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1, ""01-keepalive-pingreq"")
____________ ERROR at teardown of test_01_unpwd_empty_password_set _____________

    def fin():
        stop_process(proc)
        if proc.returncode != expected_returncode:
>           raise RuntimeError(f""Client {name} exited with code {proc.returncode}, expected {expected_returncode}"")
E           RuntimeError: Client 01-unpwd-empty-password-set.py exited with code None, expected 0

tests/lib/conftest.py:75: RuntimeError
----------------------------- Captured stderr call -----------------------------
/home/runner/work/paho.mqtt.python/paho.mqtt.python/tests/lib/clients/01-unpwd-empty-password-set.py:5: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1, ""01-unpwd-set"")
_________________ ERROR at teardown of test_01_unpwd_empty_set _________________

    def fin():
        stop_process(proc)
        if proc.returncode != expected_returncode:
>           raise RuntimeError(f""Client {name} exited with code {proc.returncode}, expected {expected_returncode}"")
E           RuntimeError: Client 01-unpwd-empty-set.py exited with code None, expected 0

tests/lib/conftest.py:75: RuntimeError
----------------------------- Captured stderr call -----------------------------
/home/runner/work/paho.mqtt.python/paho.mqtt.python/tests/lib/clients/01-unpwd-empty-set.py:5: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1, ""01-unpwd-set"")
________________ ERROR at teardown of test_03_publish_b2c_qos2 _________________

    def fin():
        stop_process(proc)
        if proc.returncode != expected_returncode:
>           raise RuntimeError(f""Client {name} exited with code {proc.returncode}, expected {expected_returncode}"")
E           RuntimeError: Client 03-publish-b2c-qos2.py exited with code None, expected 0

tests/lib/conftest.py:75: RuntimeError
----------------------------- Captured stderr call -----------------------------
/home/runner/work/paho.mqtt.python/paho.mqtt.python/tests/lib/clients/03-publish-b2c-qos2.py:22: DeprecationWarning: Callback API version 1 is deprecated, update to latest version
  mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1, ""publish-qos2-test"", clean_session=True)
DEBUG:paho.mqtt.client:Sending CONNECT (u0, p0, wr0, wq0, wf0, c1, k60) client_id=b'publish-qos2-test'
DEBUG:paho.mqtt.client:Received CONNACK (0, 0)
DEBUG:paho.mqtt.client:Received PUBLISH (d0, q2, r0, m13423), 'pub/qos2/receive', ...  (7 bytes)
DEBUG:paho.mqtt.client:Sending PUBREC (Mid: 13423)
DEBUG:paho.mqtt.client:Received PUBREL (Mid: 13423)
DEBUG:paho.mqtt.client:Sending PUBCOMP (Mid: 13423)

```
I can't approve workflows in this repo, but I've tried to run them in my fork (only the workflow files have been changed in the master branch, to run CI on all branches):
https://github.com/JamesParrott/paho.mqtt.python/actions/runs/11576577949/job/32225887766","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/866/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/867,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/867,paho.mqtt.python,2626842441,867,Failing `on_message` retries message indefinitly,rubenbaer,481417,Ruben Bär,,OPEN,2024-10-31T13:19:53Z,2024-11-05T08:20:58Z,"Hi!

I was trying to understand the behaviour of message processing if `on_message` fails with respect to package acknowledgement. If `on_message` fails, then the message is not acknowledged and I was pondering how this will affect the client. What I found surprised me.

If `on_message(...)` fails, then the message is kept in the client and retried (by the client) as soon as an other message is received. If it fails again, then the message is retried indefinitly and the client fails to process any new messages. Eventually, this causes a connection timeout. Even after the timeout, the message is retried indefinitly.

I was expecting that if `on_messsage(...)` fails, then the message is dropped.

Furthermore, I was expecting that if `on_message(...)` fails on QoS 1 and 2 messages, then the message should still be acknowledged as it was passed from the client to the software. The client might fail to send an acknowledgment due to external reasons, e. g., network issues.

So, what is the reason behind this behaviour?

Note that I was expecting the behaviour similar to `suppress_exceptions = True` only that the expceptions are passed through.

## How to reproduce

Start your mqtt broker. You can use the docker compose and mosquitto configuration below.

Start the script below.

Send a message to `t/qos_0` and `t/qos_1`, respectivly: `mosquitto_pub -t qos=0 -m ""msg_1"" -q 0 -V mqttv5`

The client below reuses the mqtt session. So if a QoS 1 message fails to process and the client restarts, the message is retried and the client is thus stuck in a loop immediatly.

```python
import paho.mqtt.client as mqtt

client = mqtt.Client(protocol=mqtt.MQTTv5, callback_api_version=mqtt.CallbackAPIVersion.VERSION2, client_id=""my-client-id"")

properties = mqtt.Properties(mqtt.PacketTypes.CONNECT)
properties.SessionExpiryInterval = 0xFFFFFFFF

client.connect(host=""localhost"", clean_start=False, properties=properties)

@client.message_callback()
def on_message(client, userdata, msg: mqtt.MQTTMessage):
    raise Exception(""Error: Processing failed"")


@client.connect_callback()
def on_connect(client, userdata, flags, reason_code, properties):
    client.subscribe(""t/qos_0"", qos=0)
    client.subscribe(""t/qos_1"", qos=1)


while True:
    try:
        client.loop_forever()
    except Exception as e:
        print(e)
```

docker-compose.yml
```yml
version: ""3.7""

services:
  mosquitto:
    image: eclipse-mosquitto
    hostname: mosquitto
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - ""1883:1883""
      - ""9001:9001""
    volumes:
      - ./mosquitto:/etc/mosquitto
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
```

mosquitto.conf
```conf
persistence false
allow_anonymous true
connection_messages true
log_type all
listener 1883
```
# Environment

* Python version: 3.11.9
* Library version: 2.1.0
* Operating system (including version): Windows 11, Ubuntu 24.10
* MQTT server (name, version, configuration, hosting details): mosquitto 2.0.20, eclipse-docker image","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/867/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/869,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/869,paho.mqtt.python,2643100677,869,Using Paho 2.+ in Python for MQTT with TPM,Galcon95,11584318,,,OPEN,2024-11-08T07:16:17Z,2024-11-08T07:16:31Z,"In our project we need to secure the MQTT communication with Trusted Plattform Module. The paho script for a MQTT communication with a Iot broker is working, but with TPM is failing.
Meaning errors like:
Setting of the TLS connection failed. Exception = [SSL] PEM lib (_ssl.c:3916)
are popping up.

No connection with a device certificate generated from a local private key (generated with TPM) can be established.

Questions:        #      
1) is paho even capable to handle TPM backed connections in this version (Paho 2.0.0)?
      
2) If yes what is right general workflow for accomplishing that?

The current workflow is rather now:
     
a) generate a TPM key on the device
    export OPENSSL_CONF=/etc/ssl/openssl-tpm.cnf
    openssl ecparam -name prime256v1 -genkey  -out client-private-tpm2.key

b) generate a csr file from the tpm key on the devkit
    openssl req -new -SHA256 -key client-private-tpm2.key -out client-private-tpm2.csr
  
c) generate a device certificate in the onboarding system with the client-private-tpm2.csrfile
   device-certificate.crt

Problem: no connection can be established.
Error:
Setting of the TLS connection failed. Exception = [SSL] PEM lib (_ssl.c:3916)

Some prerequisites:
The python (3.10.5)  script with installed running TPM2.0 and Paho library It's running on a raspberry pi with a yocto linux version (Scarthgap).
The script with the Paho library is working fine without TPM. The MQTT server/broker is in a company AWS cloud and it's working
so far with the version without TPM.




","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/869/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870,paho.mqtt.python,2647277534,870,on_disconnect Callback Triggered Twice When Connection is Lost,sfczsolti,64804192,,,OPEN,2024-11-10T14:15:15Z,2024-11-11T00:24:24Z,"When testing the example code client_session_present.py 
(from [Paho MQTT Python GitHub Repository](https://github.com/eclipsepaho/paho.mqtt.python/blob/master/examples/client_session_present.py)), 
I encountered an issue where the on_disconnect callback is triggered twice when the network connection is lost. This behavior seems unexpected, as it could cause redundancy and potentially unwanted behavior in production applications.

I modified the example minimally to include on_disconnect and on_log callbacks to monitor connection status.

```
import paho.mqtt.client as mqtt

def on_connect(mqttc, obj, flags, reason_code, properties):
    print(""Session present: "" + str(flags.session_present))
    print(""Connection result: "" + str(reason_code))

def on_disconnect(mqttc, obj, flags, reason_code, properties):
    print('Disconnected')

def on_log(mqttc, obj, level, string):
    print(string)

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=""asdfj"", clean_session=False)
mqttc.on_connect = on_connect
mqttc.on_disconnect = on_disconnect
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.user_data_set(0)
mqttc.connect(""mqtt.eclipseprojects.io"", 1883, 10)

mqttc.loop_forever()

```

When I simulate a network disconnection, the following output is generated:
```
Session present: True
Connection result: Success
Disconnected
Disconnected
Session present: True
Connection result: Success
```
As shown above, Disconnected is printed twice, indicating that the on_disconnect callback is called twice.


Environment:

Paho MQTT Python Client Version: 2.1.0
Python Version: 3.10

Request:

Could you please investigate why on_disconnect is being triggered twice? Any insights or fixes would be greatly appreciated.
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TCHCR,paho.mqtt.python,2466803857,870,NA,JamesParrott,80779630,,,NA,2024-11-10T16:45:16Z,2024-11-10T16:45:16Z,"These are the two routes on_disconnect is being called from:

```
Disconnected, called by: [('on_disconnect', 15), ('_do_on_disconnect', 4383), ('_check_keepalive', 3294), ('loop_misc', 2149), ('_loop', 1707), ('loop_forever', 2297), ('<module>', 30)]
Disconnected, called by: [('on_disconnect', 15), ('_do_on_disconnect', 4383), ('loop_misc', 2163), ('_loop', 1707), ('loop_forever', 2297), ('<module>', 30)]
```

The first call is on this line.  the second one is 14 lines below:
https://github.com/eclipse-paho/paho.mqtt.python/blob/d45de3737879cfe7a6acc361631fa5cb1ef584bb/src/paho/mqtt/client.py#L2149


I'm not sure what the best fix is.  `_check_keepalive` could return something more useful than `None`, the value of which `loop_misc` could use to either return early, or test and avoid the second call to _do_on_disconnect.  But I don't know what else depends on the current flow or if other users' code depends on the double call, e.g. if there are different reason codes in other situations than a time out from switching my wifi off.

Adjusted test script:
```
import paho.mqtt.client as mqtt

import inspect

def on_connect(mqttc, obj, flags, reason_code, properties):
    print(""Session present: "" + str(flags.session_present))
    print(""Connection result: "" + str(reason_code))

def on_disconnect(mqttc, obj, flags, reason_code, properties):
    caller_names_and_lines = [(finfo.frame.f_code.co_name, finfo.frame.f_lineno) 
                               for finfo in inspect.stack()] 
    print(f'Disconnected, called by: {caller_names_and_lines}')

def on_log(mqttc, obj, level, string):
    print(string)

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=""asdfj"", clean_session=False)
mqttc.on_connect = on_connect
mqttc.on_disconnect = on_disconnect
# Uncomment to enable debug messages
# mqttc.on_log = on_log
mqttc.user_data_set(0)
mqttc.connect(""mqtt.eclipseprojects.io"", 1883, 10)

mqttc.loop_forever()
```
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TCHCR/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TCQ59,paho.mqtt.python,2466844285,870,NA,sfczsolti,64804192,,,NA,2024-11-10T18:50:46Z,2024-11-10T18:50:46Z,"Thank you for your response!

In my development environment (currently on Windows), I indeed tested by manually disconnecting WiFi. Without other options, this seemed like the simplest approach—though I suppose I could have unplugged the LAN cable from the router as well. 
I’ll make sure to run the suggested code snippet next time I test to better understand what may be causing the double on_disconnect calls.

In the final production environment, this code will run on Raspberry Pi devices with Debian OS, where connection issues are likely to happen frequently due to weak cellular signals.

If I understand correctly, in the current implementation, the on_disconnect callback is triggered twice when a disconnection occurs. (I hope I’m interpreting this correctly.)

My questions are:

**1. Could the duplicate on_disconnect calls cause issues?** 
Is it possible that this could lead to unexpected behavior ?Or I can use it like this, it won't cause an error.
perhaps a not very elegant solution:

```
def on_connect(self, client, userdata, flags, reason_code, properties=None):
        print(""Connected to MQTT broker"")
        self.disconnect_called = False  # Reset flag on successful connect

    def on_disconnect(self, client, userdata, reason_code, properties=None):
        if not self.disconnect_called:
            self.disconnect_called = True  # Prevent future on_disconnect calls
            print(""Disconnected from MQTT broker"")
```


**2. Is there a more official or reliable way to detect disconnections?** Since disconnections will likely happen often in the production environment, it’s important for me to have a clear way to detect this state and halt unnecessary publish calls.

Any further guidance would be greatly appreciated!","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TCQ59/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/870,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TC5_H,paho.mqtt.python,2467012551,870,NA,JamesParrott,80779630,,,NA,2024-11-11T00:24:04Z,2024-11-11T00:24:04Z,"I don't know for certain they won't cause issues, and I can't speak officially on behalf of anyone.

But if this is a concern for you or anyone else, the problem can be solved far more easily and quickly than by waiting for a fix in paho.mqtt, with just a couple of extra lines of Python:

make the client code in on_disconnect idempotent.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6TC5_H/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/871,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/871,paho.mqtt.python,2663922856,871,on_connect not called after reconnection after server restart,Zugschlus,1712376,Marc 'Zugschlus' Haber,mh+githubvisible@zugschlus.de,OPEN,2024-11-16T06:51:05Z,2024-11-16T17:21:08Z,"Hi,

I have an simple program that connects to a server (which is mosquitto running in docker). I have added some error handling so that the client doesn't abort when the server dies or restarts. My program subscribes to a topic in the on_connect method. When the server restarts, the client reconnects to the server, but on_connect is not called.

# Reproduction

Start the attached program with --console-loglevel=debug. Let it sit for a few seconds:

```
# pvenv/bin/python3 mqttkeks --console-loglevel=debug
create mqtt.Client
mqtt.Client created
mqtt.start(
(Re)connected successfully to MQTT
restarted MQTT loop
)
Connected to MQTT broker rc=ReasonCode(Connack, 'Success')
Subscribed to self.subscribe_topic='tele/rain/raw_json'
```

then restart the server (on my machine: docker compose restart), keeping the reproducer running

```
Disconnected from MQTT broker with result code Unspecified error
Attempting to reconnect to MQTT broker...
Failed to connect to MQTT broker: (Attempt 1): [Errno 111] Connection refused
Retrying connection in 5 seconds...
(Re)connected successfully to MQTT
restarted MQTT loop
```

notice that the ""Connected to MQTT broker"" and the ""Subscribed to self.subscribe_topic"" is not present.

I don't claim that I am doing things right. But the docs are silent on error handling.

Sorry that my example needs your own MQTT broker, but you can't restart a public broker on request.

# Environment

* Python version: 3.12.7
* Library version: 2.1.0
* Operating system (including version): Debian GNU/Linux unstable (in a container). Reproducible on both plain Debian GNU/linux unstable (with paho-mqtt 2.0.0) and on Debian GNU/Linux stable (with paho-mqtt 1.6)
* MQTT server (name, version, configuration, hosting details): Mosquitto 2.0.8 in docker, compose file and mosquitto.conf attached.

Thanks for your consideration, and for providing paho-mqtt in the first place.

Greetings, Marc
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/871/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/871,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6T2Lx3,paho.mqtt.python,2480454775,871,NA,Zugschlus,1712376,Marc 'Zugschlus' Haber,mh+githubvisible@zugschlus.de,NA,2024-11-16T06:53:30Z,2024-11-16T06:53:30Z,"[paho-mqtt-871.zip](https://github.com/user-attachments/files/17783802/paho-mqtt-871.zip)

```
$ unzip -v paho-mqtt-871.zip Archive:  paho-mqtt-871.zip
Length   Method    Size  Cmpr    Date    Time   CRC-32   Name
--------  ------  ------- ---- ---------- ----- --------  ----
4484  Defl:N     1282  71% 2024-11-16 07:51 607070ad  paho-mqtt-871-reproducer
195  Defl:N      131  33% 2024-11-16 07:51 5b400824  mosquitto.conf
448  Defl:N      239  47% 2024-11-16 07:51 b0b08d1f  docker-compose.yml
--------          -------  ---                            -------
5127             1652  68%                            3 files
```

Sorry, github didn't allow me to upload those files directly (""unsupported file type"")","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6T2Lx3/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/871,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6T3BLa,paho.mqtt.python,2480673498,871,NA,JamesParrott,80779630,,,NA,2024-11-16T17:21:07Z,2024-11-16T17:21:07Z,"Please post the Python code enclosed in triple back ticks.

How're we supposed to know we're not downloading malware in paho-mqtt-871-reproducer ?.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6T3BLa/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/872,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/872,paho.mqtt.python,2698038027,872,Client.loop_stop contains a race-condition,PromyLOPh,13182,Lars,lars@6xq.net,OPEN,2024-11-27T10:39:55Z,2024-11-27T10:40:14Z,"# Bug Description

`Client.loop_stop` expects that `self._thread` stays valid, but `_thread_main` unsets `self._thread` after exiting, causing a race-condition:

```bash
$ python3 test.py
Traceback (most recent call last):
  File ""test.py"", line 14, in <module>
    client.loop_stop()
  File ""src/paho/mqtt/client.py"", line 2365, in loop_stop
    self._thread.join()
    ^^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'join'
```

# Reproduction

Trigger it by applying this patch to paho-mqtt, which simply adds a wait, so `_thread_main` always wins the race:

```patch
diff --git a/src/paho/mqtt/client.py b/src/paho/mqtt/client.py
index 4ccc869..dc01f5e 100644
--- a/src/paho/mqtt/client.py
+++ b/src/paho/mqtt/client.py
@@ -2360,6 +2360,7 @@ class Client:
             return MQTTErrorCode.MQTT_ERR_INVAL

         self._thread_terminate = True
+        time.sleep (2)
         if threading.current_thread() != self._thread:
             self._thread.join()
```

Then run this minimal MQTT client:

```python
import time

from paho.mqtt.client import Client
from paho.mqtt.enums import CallbackAPIVersion, MQTTProtocolVersion

client = Client(CallbackAPIVersion.VERSION2, 'testclient', protocol=MQTTProtocolVersion.MQTTv5)

client.loop_start()
client.connect(host='localhost')

time.sleep (2)

client.disconnect()
client.loop_stop()
```

# Environment

* Python version: Python 3.11.2
* Library version: Commit d45de3737879cfe7a6acc361631fa5cb1ef584bb
* Operating system (including version): Debian 12
* MQTT server (name, version, configuration, hosting details): mosquitto 2.0.15 without any configuration.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/872/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/873,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/873,paho.mqtt.python,2702515524,873,open connection with custom socket,LibraryRaven,151756412,,,OPEN,2024-11-28T15:29:35Z,2024-12-02T15:09:43Z,"# Feature Description

I would like to be able to connect with a manually provided socket.

This would enable me to tunnel MQTT through an SSH connection with [paramiko](https://docs.paramiko.org/en/stable/api/transport.html#paramiko.transport.Transport.open_channel).

```python3
import paramiko

# connect to SSH gateway
sshclient = paramiko.SSHClient()
sshclient.connect(""sshgateway.example.org"", ""user"", ""password"")

def create_socket():
  # open tunnel to the internal MQTT port
  return sshclient.get_transport().open_channel('direct-tcpip', (""127.0.0.1"", 1883), ('', 0))

import paho.mqtt.client as mqtt
mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.connect(""127.0.0.1"", transport=""callback"", create_socket=create_socket) 
```

# Requested Solution

```python3
import socket

def create_socket():
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.connect(('mqtt.example.org', 1883))
  return sock

import paho.mqtt.client as mqtt
mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
mqttc.connect(""mqtt.example.org"", transport=""callback"", create_socket=create_socket) 
```

# Alternatives

For now, I can use my own SocketedClient class, which inherits Client and uses a provided create_socket function on connect() and reconnect().","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/873/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/874,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/874,paho.mqtt.python,2709919525,874,Roundtrips take at least 40ms or are not in the right order when publishing in subscribe,maurerle,25026204,Florian Maurer,,OPEN,2024-12-01T21:39:17Z,2024-12-02T07:40:32Z,"# Bug Description

I need to respond to a received message by publishing another message.
I do not need QoS, but I do need to have the correct message ordering.

In when using an agent-based tool [mango-agents](https://github.com/OFFIS-DAI/mango), round trip time of MQTT connections is always at least 40ms - even when using QoS=0

An example of this is shown in https://github.com/OFFIS-DAI/mango/issues/142

I tried reproducing this with plain paho-mqtt and got that far:

This does work with QoS = 1 set, in which case it takes 40ms for each roundtrip.
(I see that QoS=1 itself has a roundtrip, though this does not explain 40ms of waiting).
With QoS=0, the messages are not received in the correct order.
Adding `wait_for_publish` deadlocks the application.
Usage of the Threadpool did not help either.

```python
# python 3.11-3.13
import logging
import random
from multiprocessing.pool import ThreadPool

import paho.mqtt.client as paho

logger = logging.getLogger(__name__)

myQOS = 1
broker = ""localhost""
port = 1883
topic = ""python/mqtt""
# Generate a Client ID with the publish prefix.
client_id = f""publish-{random.randint(0, 1000)}""

pool = ThreadPool(processes=4)

def connect_mqtt(topic):
    def on_connect(client, userdata, flags, rc, pa):
        if rc == 0:
            logger.info(""Connected to MQTT Broker!"")
        else:
            logger.error(""Failed to connect, return code %d\n"", rc)
        
    def thread_publish(client, topic, payload):
        info = client.publish(""no topic"", payload, qos=myQOS)
        # wait for publish does deadlock here
        #info.wait_for_publish()

    def on_message(client, userdata, message: paho.MQTTMessage):
        logger.info(""got message %s"", message.payload)
        # create a thread pool where we submit the publishing
        # and wait for the result
        pool.apply(thread_publish, args=(client, topic, message.payload))
        #info = client.publish(""no topic"", message.payload, qos=myQOS)

    client = paho.Client(paho.CallbackAPIVersion.VERSION2, client_id)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(broker, port)
    client.subscribe(topic)

    return client


def publish(client, topic, max_count=100):
    msg_count = 1
    while True:
        msg = f""messages: {msg_count}""
        result = client.publish(topic, msg, qos=myQOS)
        result.wait_for_publish()
        # result: [0, 1]
        status = result[0]
        if status == 0:
            logger.info(""Send `%s` to topic `%s`"", msg, topic)
        else:
            print(f""Failed to send message to topic {topic}"")
        msg_count += 1
        if msg_count > max_count:
            break


def run():
    client = connect_mqtt(topic)
    client.loop_start()
    #client.subscribe(""no topic"")

    publish(client, topic)

    # this helps when QoS is 0 to wait until all is received
    import time
    time.sleep(1)

    client.loop_stop()


if __name__ == ""__main__"":
    logging.basicConfig(format=""%(asctime)s;%(levelname)s;%(message)s"", level=""INFO"")
    run()
```

# Reproduction

*Please provide detailed steps showing how to replicate the issue (it's difficult to fix an issue we cannot replicate).
If errors are output then include the full error (including any stack trace).*   
*Most issues should include a [minimal example](https://stackoverflow.com/help/minimal-reproducible-example) that 
demonstrates the issue (ideally one that can be run without modification, i.e. runnable code using a public broker).*

# Environment

* Python version: 3.12.6 (any of 3.11-3.13 has this issue)
* Library version: 2.1.0
* Operating system (including version): Debian 13, trixie
* MQTT server (name, version, configuration, hosting details): local mosquitto, dockerized:

```
listener 1883
allow_anonymous true

max_keepalive 3600
```

# Logs

For many issues, especially when you cannot provide code to replicate the issue, it's helpful to include logs. Please 
consider including:
 * library logs; see [the readme](https://github.com/eclipse/paho.mqtt.python#enable_logger) and [logger example](https://github.com/eclipse/paho.mqtt.python/blob/master/examples/client_logger.py).
 * broker logs (availability will depend the server in use)

```
2024-12-01 22:37:06,386;INFO;Connected to MQTT Broker!
2024-12-01 22:37:06,386;INFO;got message b'1'
2024-12-01 22:37:06,387;INFO;got message b'messages: 1'
2024-12-01 22:37:06,387;INFO;Send `messages: 1` to topic `python/mqtt`
2024-12-01 22:37:06,430;INFO;got message b'messages: 2'
2024-12-01 22:37:06,431;INFO;Send `messages: 2` to topic `python/mqtt`
2024-12-01 22:37:06,431;INFO;got message b'messages: 3'
2024-12-01 22:37:06,432;INFO;Send `messages: 3` to topic `python/mqtt`
2024-12-01 22:37:06,478;INFO;got message b'messages: 4'
2024-12-01 22:37:06,480;INFO;Send `messages: 4` to topic `python/mqtt`
2024-12-01 22:37:06,481;INFO;got message b'messages: 5'
2024-12-01 22:37:06,482;INFO;Send `messages: 5` to topic `python/mqtt`
2024-12-01 22:37:06,530;INFO;got message b'messages: 6'
2024-12-01 22:37:06,532;INFO;Send `messages: 6` to topic `python/mqtt`
2024-12-01 22:37:06,533;INFO;got message b'messages: 7'
2024-12-01 22:37:06,535;INFO;Send `messages: 7` to topic `python/mqtt`
2024-12-01 22:37:06,578;INFO;got message b'messages: 8'
2024-12-01 22:37:06,580;INFO;Send `messages: 8` to topic `python/mqtt`
2024-12-01 22:37:06,581;INFO;got message b'messages: 9'
2024-12-01 22:37:06,582;INFO;Send `messages: 9` to topic `python/mqtt`
2024-12-01 22:37:06,626;INFO;got message b'messages: 10'
2024-12-01 22:37:06,628;INFO;Send `messages: 10` to topic `python/mqtt`
2024-12-01 22:37:06,629;INFO;got message b'messages: 11'
2024-12-01 22:37:06,631;INFO;Send `messages: 11` to topic `python/mqtt`
2024-12-01 22:37:06,674;INFO;got message b'messages: 12'
2024-12-01 22:37:06,676;INFO;Send `messages: 12` to topic `python/mqtt`
2024-12-01 22:37:06,677;INFO;got message b'messages: 13'
2024-12-01 22:37:06,679;INFO;Send `messages: 13` to topic `python/mqtt`
2024-12-01 22:37:06,722;INFO;got message b'messages: 14'
2024-12-01 22:37:06,724;INFO;Send `messages: 14` to topic `python/mqtt`
2024-12-01 22:37:06,725;INFO;got message b'messages: 15'
2024-12-01 22:37:06,727;INFO;Send `messages: 15` to topic `python/mqtt`
2024-12-01 22:37:06,770;INFO;got message b'messages: 16'
2024-12-01 22:37:06,772;INFO;Send `messages: 16` to topic `python/mqtt`
2024-12-01 22:37:06,773;INFO;got message b'messages: 17'
2024-12-01 22:37:06,775;INFO;Send `messages: 17` to topic `python/mqtt`
2024-12-01 22:37:06,822;INFO;got message b'messages: 18'
2024-12-01 22:37:06,824;INFO;Send `messages: 18` to topic `python/mqtt`
2024-12-01 22:37:06,825;INFO;got message b'messages: 19'
2024-12-01 22:37:06,827;INFO;Send `messages: 19` to topic `python/mqtt`
2024-12-01 22:37:06,870;INFO;got message b'messages: 20'
2024-12-01 22:37:06,872;INFO;Send `messages: 20` to topic `python/mqtt`
2024-12-01 22:37:06,873;INFO;got message b'messages: 21'
2024-12-01 22:37:06,874;INFO;Send `messages: 21` to topic `python/mqtt`
2024-12-01 22:37:06,918;INFO;got message b'messages: 22'
2024-12-01 22:37:06,920;INFO;Send `messages: 22` to topic `python/mqtt`
2024-12-01 22:37:06,921;INFO;got message b'messages: 23'
2024-12-01 22:37:06,922;INFO;Send `messages: 23` to topic `python/mqtt`
2024-12-01 22:37:06,966;INFO;got message b'messages: 24'
2024-12-01 22:37:06,968;INFO;Send `messages: 24` to topic `python/mqtt`
2024-12-01 22:37:06,969;INFO;got message b'messages: 25'
2024-12-01 22:37:06,970;INFO;Send `messages: 25` to topic `python/mqtt`
2024-12-01 22:37:07,014;INFO;got message b'messages: 26'
2024-12-01 22:37:07,015;INFO;Send `messages: 26` to topic `python/mqtt`
2024-12-01 22:37:07,017;INFO;got message b'messages: 27'
2024-12-01 22:37:07,018;INFO;Send `messages: 27` to topic `python/mqtt`
2024-12-01 22:37:07,062;INFO;got message b'messages: 28'
2024-12-01 22:37:07,064;INFO;Send `messages: 28` to topic `python/mqtt`
2024-12-01 22:37:07,065;INFO;got message b'messages: 29'
2024-12-01 22:37:07,067;INFO;Send `messages: 29` to topic `python/mqtt`
2024-12-01 22:37:07,110;INFO;got message b'messages: 30'
2024-12-01 22:37:07,111;INFO;Send `messages: 30` to topic `python/mqtt`
2024-12-01 22:37:07,113;INFO;got message b'messages: 31'
2024-12-01 22:37:07,114;INFO;Send `messages: 31` to topic `python/mqtt`
2024-12-01 22:37:07,158;INFO;got message b'messages: 32'
2024-12-01 22:37:07,160;INFO;Send `messages: 32` to topic `python/mqtt`
2024-12-01 22:37:07,161;INFO;got message b'messages: 33'
2024-12-01 22:37:07,162;INFO;Send `messages: 33` to topic `python/mqtt`
2024-12-01 22:37:07,210;INFO;got message b'messages: 34'
2024-12-01 22:37:07,211;INFO;Send `messages: 34` to topic `python/mqtt`
2024-12-01 22:37:07,212;INFO;got message b'messages: 35'
2024-12-01 22:37:07,214;INFO;Send `messages: 35` to topic `python/mqtt`
2024-12-01 22:37:07,258;INFO;got message b'messages: 36'
2024-12-01 22:37:07,260;INFO;Send `messages: 36` to topic `python/mqtt`
2024-12-01 22:37:07,261;INFO;got message b'messages: 37'
2024-12-01 22:37:07,262;INFO;Send `messages: 37` to topic `python/mqtt`
2024-12-01 22:37:07,310;INFO;got message b'messages: 38'
2024-12-01 22:37:07,312;INFO;Send `messages: 38` to topic `python/mqtt`
2024-12-01 22:37:07,313;INFO;got message b'messages: 39'
2024-12-01 22:37:07,315;INFO;Send `messages: 39` to topic `python/mqtt`
2024-12-01 22:37:07,358;INFO;got message b'messages: 40'
2024-12-01 22:37:07,360;INFO;Send `messages: 40` to topic `python/mqtt`
2024-12-01 22:37:07,361;INFO;got message b'messages: 41'
2024-12-01 22:37:07,362;INFO;Send `messages: 41` to topic `python/mqtt`
2024-12-01 22:37:07,406;INFO;got message b'messages: 42'
2024-12-01 22:37:07,408;INFO;Send `messages: 42` to topic `python/mqtt`
2024-12-01 22:37:07,409;INFO;got message b'messages: 43'
2024-12-01 22:37:07,410;INFO;Send `messages: 43` to topic `python/mqtt`
2024-12-01 22:37:07,454;INFO;got message b'messages: 44'
2024-12-01 22:37:07,456;INFO;Send `messages: 44` to topic `python/mqtt`
2024-12-01 22:37:07,457;INFO;got message b'messages: 45'
2024-12-01 22:37:07,458;INFO;Send `messages: 45` to topic `python/mqtt`
2024-12-01 22:37:07,502;INFO;got message b'messages: 46'
2024-12-01 22:37:07,504;INFO;Send `messages: 46` to topic `python/mqtt`
2024-12-01 22:37:07,505;INFO;got message b'messages: 47'
2024-12-01 22:37:07,507;INFO;Send `messages: 47` to topic `python/mqtt`
2024-12-01 22:37:07,554;INFO;got message b'messages: 48'
2024-12-01 22:37:07,556;INFO;Send `messages: 48` to topic `python/mqtt`
2024-12-01 22:37:07,557;INFO;got message b'messages: 49'
2024-12-01 22:37:07,558;INFO;Send `messages: 49` to topic `python/mqtt`
2024-12-01 22:37:07,602;INFO;got message b'messages: 50'
2024-12-01 22:37:07,603;INFO;Send `messages: 50` to topic `python/mqtt`
2024-12-01 22:37:07,604;INFO;got message b'messages: 51'
2024-12-01 22:37:07,606;INFO;Send `messages: 51` to topic `python/mqtt`
2024-12-01 22:37:07,650;INFO;got message b'messages: 52'
2024-12-01 22:37:07,652;INFO;Send `messages: 52` to topic `python/mqtt`
2024-12-01 22:37:07,653;INFO;got message b'messages: 53'
2024-12-01 22:37:07,654;INFO;Send `messages: 53` to topic `python/mqtt`
2024-12-01 22:37:07,698;INFO;got message b'messages: 54'
2024-12-01 22:37:07,699;INFO;Send `messages: 54` to topic `python/mqtt`
2024-12-01 22:37:07,700;INFO;got message b'messages: 55'
2024-12-01 22:37:07,702;INFO;Send `messages: 55` to topic `python/mqtt`
2024-12-01 22:37:07,746;INFO;got message b'messages: 56'
2024-12-01 22:37:07,747;INFO;Send `messages: 56` to topic `python/mqtt`
2024-12-01 22:37:07,749;INFO;got message b'messages: 57'
2024-12-01 22:37:07,750;INFO;Send `messages: 57` to topic `python/mqtt`
2024-12-01 22:37:07,794;INFO;got message b'messages: 58'
2024-12-01 22:37:07,796;INFO;Send `messages: 58` to topic `python/mqtt`
2024-12-01 22:37:07,797;INFO;got message b'messages: 59'
2024-12-01 22:37:07,799;INFO;Send `messages: 59` to topic `python/mqtt`
2024-12-01 22:37:07,842;INFO;got message b'messages: 60'
2024-12-01 22:37:07,844;INFO;Send `messages: 60` to topic `python/mqtt`
2024-12-01 22:37:07,845;INFO;got message b'messages: 61'
2024-12-01 22:37:07,846;INFO;Send `messages: 61` to topic `python/mqtt`
2024-12-01 22:37:07,894;INFO;got message b'messages: 62'
2024-12-01 22:37:07,896;INFO;Send `messages: 62` to topic `python/mqtt`
2024-12-01 22:37:07,897;INFO;got message b'messages: 63'
2024-12-01 22:37:07,898;INFO;Send `messages: 63` to topic `python/mqtt`
2024-12-01 22:37:07,942;INFO;got message b'messages: 64'
2024-12-01 22:37:07,944;INFO;Send `messages: 64` to topic `python/mqtt`
2024-12-01 22:37:07,944;INFO;got message b'messages: 65'
2024-12-01 22:37:07,946;INFO;Send `messages: 65` to topic `python/mqtt`
2024-12-01 22:37:07,990;INFO;got message b'messages: 66'
2024-12-01 22:37:07,992;INFO;Send `messages: 66` to topic `python/mqtt`
2024-12-01 22:37:07,993;INFO;got message b'messages: 67'
2024-12-01 22:37:07,994;INFO;Send `messages: 67` to topic `python/mqtt`
2024-12-01 22:37:08,038;INFO;got message b'messages: 68'
2024-12-01 22:37:08,040;INFO;Send `messages: 68` to topic `python/mqtt`
2024-12-01 22:37:08,041;INFO;got message b'messages: 69'
2024-12-01 22:37:08,042;INFO;Send `messages: 69` to topic `python/mqtt`
2024-12-01 22:37:08,086;INFO;got message b'messages: 70'
2024-12-01 22:37:08,088;INFO;Send `messages: 70` to topic `python/mqtt`
2024-12-01 22:37:08,089;INFO;got message b'messages: 71'
2024-12-01 22:37:08,091;INFO;Send `messages: 71` to topic `python/mqtt`
2024-12-01 22:37:08,134;INFO;got message b'messages: 72'
2024-12-01 22:37:08,135;INFO;Send `messages: 72` to topic `python/mqtt`
2024-12-01 22:37:08,137;INFO;got message b'messages: 73'
2024-12-01 22:37:08,138;INFO;Send `messages: 73` to topic `python/mqtt`
2024-12-01 22:37:08,182;INFO;got message b'messages: 74'
2024-12-01 22:37:08,183;INFO;Send `messages: 74` to topic `python/mqtt`
2024-12-01 22:37:08,184;INFO;got message b'messages: 75'
2024-12-01 22:37:08,186;INFO;Send `messages: 75` to topic `python/mqtt`
2024-12-01 22:37:08,234;INFO;got message b'messages: 76'
2024-12-01 22:37:08,236;INFO;Send `messages: 76` to topic `python/mqtt`
2024-12-01 22:37:08,237;INFO;got message b'messages: 77'
2024-12-01 22:37:08,238;INFO;Send `messages: 77` to topic `python/mqtt`
2024-12-01 22:37:08,282;INFO;got message b'messages: 78'
2024-12-01 22:37:08,283;INFO;Send `messages: 78` to topic `python/mqtt`
2024-12-01 22:37:08,284;INFO;got message b'messages: 79'
2024-12-01 22:37:08,286;INFO;Send `messages: 79` to topic `python/mqtt`
2024-12-01 22:37:08,334;INFO;got message b'messages: 80'
2024-12-01 22:37:08,335;INFO;Send `messages: 80` to topic `python/mqtt`
2024-12-01 22:37:08,336;INFO;got message b'messages: 81'
2024-12-01 22:37:08,338;INFO;Send `messages: 81` to topic `python/mqtt`
2024-12-01 22:37:08,386;INFO;got message b'messages: 82'
2024-12-01 22:37:08,388;INFO;Send `messages: 82` to topic `python/mqtt`
2024-12-01 22:37:08,389;INFO;got message b'messages: 83'
2024-12-01 22:37:08,390;INFO;Send `messages: 83` to topic `python/mqtt`
2024-12-01 22:37:08,434;INFO;got message b'messages: 84'
2024-12-01 22:37:08,436;INFO;Send `messages: 84` to topic `python/mqtt`
2024-12-01 22:37:08,437;INFO;got message b'messages: 85'
2024-12-01 22:37:08,438;INFO;Send `messages: 85` to topic `python/mqtt`
2024-12-01 22:37:08,482;INFO;got message b'messages: 86'
2024-12-01 22:37:08,483;INFO;Send `messages: 86` to topic `python/mqtt`
2024-12-01 22:37:08,485;INFO;got message b'messages: 87'
2024-12-01 22:37:08,486;INFO;Send `messages: 87` to topic `python/mqtt`
2024-12-01 22:37:08,534;INFO;got message b'messages: 88'
2024-12-01 22:37:08,535;INFO;Send `messages: 88` to topic `python/mqtt`
2024-12-01 22:37:08,537;INFO;got message b'messages: 89'
2024-12-01 22:37:08,539;INFO;Send `messages: 89` to topic `python/mqtt`
2024-12-01 22:37:08,582;INFO;got message b'messages: 90'
2024-12-01 22:37:08,583;INFO;Send `messages: 90` to topic `python/mqtt`
2024-12-01 22:37:08,584;INFO;got message b'messages: 91'
2024-12-01 22:37:08,586;INFO;Send `messages: 91` to topic `python/mqtt`
2024-12-01 22:37:08,630;INFO;got message b'messages: 92'
2024-12-01 22:37:08,632;INFO;Send `messages: 92` to topic `python/mqtt`
2024-12-01 22:37:08,633;INFO;got message b'messages: 93'
2024-12-01 22:37:08,634;INFO;Send `messages: 93` to topic `python/mqtt`
2024-12-01 22:37:08,678;INFO;got message b'messages: 94'
2024-12-01 22:37:08,679;INFO;Send `messages: 94` to topic `python/mqtt`
2024-12-01 22:37:08,681;INFO;got message b'messages: 95'
2024-12-01 22:37:08,682;INFO;Send `messages: 95` to topic `python/mqtt`
2024-12-01 22:37:08,726;INFO;got message b'messages: 96'
2024-12-01 22:37:08,728;INFO;Send `messages: 96` to topic `python/mqtt`
2024-12-01 22:37:08,729;INFO;got message b'messages: 97'
2024-12-01 22:37:08,730;INFO;Send `messages: 97` to topic `python/mqtt`
2024-12-01 22:37:08,778;INFO;got message b'messages: 98'
2024-12-01 22:37:08,780;INFO;Send `messages: 98` to topic `python/mqtt`
2024-12-01 22:37:08,781;INFO;got message b'messages: 99'
2024-12-01 22:37:08,783;INFO;Send `messages: 99` to topic `python/mqtt`
2024-12-01 22:37:08,826;INFO;got message b'messages: 100'
2024-12-01 22:37:08,827;INFO;Send `messages: 100` to topic `python/mqtt`
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/874/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/874,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Vppwo,paho.mqtt.python,2510724136,874,NA,maurerle,25026204,Florian Maurer,,NA,2024-12-02T07:00:13Z,2024-12-02T07:00:13Z,"Interesting:

When using the below code, which only sends the first message from the main loop and then lets the on_message and publish method do its ping pong, no deadlock happens, when QoS=0.
Though the 40ms wait time appear as well if QoS >0:

```python
# python 3.11-3.13
import logging
import random
from multiprocessing.pool import ThreadPool

import paho.mqtt.client as paho

logger = logging.getLogger(__name__)

myQOS = 1
broker = ""localhost""
port = 1883
topic = ""python/mqtt""
# Generate a Client ID with the publish prefix.
client_id = f""publish-{random.randint(0, 1000)}""

pool = ThreadPool(processes=4)

def connect_mqtt(topic):
    def on_connect(client, userdata, flags, rc, pa):
        if rc == 0:
            logger.info(""Connected to MQTT Broker!"")
        else:
            logger.error(""Failed to connect, return code %d\n"", rc)
        
    def thread_publish(client, topic, payload: int):
        number = int(payload) + 1
        if number < 100:
            info = client.publish(topic, number, qos=myQOS)
            logger.info(""did send message %s"", number)
        # wait for publish does deadlock here
        #info.wait_for_publish()

    def on_message(client, userdata, message: paho.MQTTMessage):
        logger.info(""got message %s"", message.payload)
        
        payload = message.payload
        # using a threadpool here did not help either
        # pool.apply(thread_publish, args=(client, topic, message.payload))
        number = int(payload) + 1
        if number < 100:
            info = client.publish(topic, number, qos=myQOS)
            # wait for publish does deadlock here
            #info.wait_for_publish()
            logger.info(""did send message %s"", number)

    client = paho.Client(paho.CallbackAPIVersion.VERSION2, client_id)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect(broker, port)
    client.subscribe(topic)

    return client


def run():
    client = connect_mqtt(topic)
    client.loop_start()
    #client.subscribe(""no topic"")

    result = client.publish(topic, 1, qos=myQOS)
    result.wait_for_publish()

    # this helps when QoS is 0 to wait until all is received
    import time
    time.sleep(1)

    client.loop_stop()


if __name__ == ""__main__"":
    logging.basicConfig(format=""%(asctime)s;%(levelname)s;%(message)s"", level=""INFO"")
    run()
```","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Vppwo/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/874,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Vp5Zc,paho.mqtt.python,2510788188,874,NA,maurerle,25026204,Florian Maurer,,NA,2024-12-02T07:40:31Z,2024-12-02T07:40:31Z,"So I don't know why the code in the issue description blocks and deadlocks when `result.wait_for_publish()` is set in `publish()`, but I know now, why the 40ms wait happens:

Adding `logging.error(""i am here"")` around
https://github.com/eclipse-paho/paho.mqtt.python/blob/d45de3737879cfe7a6acc361631fa5cb1ef584bb/src/paho/mqtt/client.py#L1663

shows that the python client waits for the socket io to become available from the MQTT server.
**So this is not a problem in the paho-mqtt-python library**.

Taking a look at the MQTT server, we can see that this does not occur if `set_tcp_nodelay = True` is set in the `mosquitto.conf`

I am not sure if this is one of the programming errors related around `set_tcp_nodelay` or if this is a valid case.
I am leaving this open for now, though I found a solution for my demands..
","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6Vp5Zc/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/875,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/875,paho.mqtt.python,2741375437,875,wait_for_publish() never ends and is_publish return False,kessero,16817789,,dkesselring@gmail.com,OPEN,2024-12-16T05:31:36Z,2025-01-21T23:16:33Z,"My simple script for test without any logic only get message and send message. Hangs my script on wait_for_publish() or if i set ex. wait_for_publish(1) after 1 seconds goes further but message is published on server but info.is_published() return False

I made some tests and if I turn off client.loop_forever() and only make publish_data_to_broker() then everything works

```client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, ""1234id"")
broker = config.mqtt_broker

def on_connect(client, userdata, flags, rc, properties):
    if rc == 0:
        print(""connected to topics"")
        client.subscribe(config.main_topic + config.bileterka + ""/#"")
        client.subscribe(config.main_topic + config.terminal + ""/#"")
    else:
        print(""errror"")


def publish_data_to_broker(topic, msg, retain):
    global ostatnia_wiadomosc
    """"""
    Publikuje dane do brokera
    :param: topic, msg, retain
    """"""
    print(topic + "" "" + msg)
    info = client.publish(""test"", msg, qos=2, retain=retain)
    info.wait_for_publish()
    print(info)

    if info.is_published():
        print(""published OK"")
        return True
    else:
        logging.info(f""Pub fail {topic} {msg}"")
    return False


def on_message(client, userdata, msg):
    msgIn = msg.payload.decode(""utf-8"")
    try:
        if ""numerrej"" in msg.topic:
            print(""----"")
            publish_data_to_broker(msg.topic, ""test"", False)
    except Exception as e:
        logging.error(f""on message {e}"")


if __name__ == ""__main__"":
    client.username_pw_set(username=config.mqtt_login, password=config.mqtt_passwd)
    client.on_connect = on_connect
    client.on_message = on_message
    try:
        client.connect(broker, config.mqtt_port, config.mqtt_keepalive)
    except:
        logging.info(""ERROR: Connect error"")
    client.loop_forever()
```

Why wait_for_publish not work and is_publish return False with loop_forever ?
Is it possible to use wait_for_publish with loop or should i use threads? 
Ubuntu server 24.04.01LTS
Python 3.10.12
paho-mqtt 2.1.0
mosquitto server 2.0.20","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/875/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
comment,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/875,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6bU2Xf,paho.mqtt.python,2605934047,875,NA,MattBrittan,52723919,Matt Brittan,github@chiot.tech,NA,2025-01-21T23:15:59Z,2025-01-21T23:15:59Z,"`on_message` is called from within the network loop, if your handler code blocks, then the network loop is blocked (so nothing will be sent/received).  You are calling `wait_for_publish`, which will block until the message is published, but as this blocks the network loop the message will not be sent (so you have a deadlock).

I'd suggest moving the stuff that needs to be done when the `publish` is complete off to an `on_publish()` callback. The alternative would be to perform the operation in a seperate thread.

","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/comments/IC_kwDOAt5nfs6bU2Xf/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/877,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/877,paho.mqtt.python,2782611434,877,Inconsistent implementation for MQTT 5 persistent sessions (clean_start),skobow,3972907,,,OPEN,2025-01-12T18:00:27Z,2025-01-12T18:00:39Z,"# Bug Description

I have noticed the python client uses `clean_start=False` for MQTT 5 connections on reconnecting if `clean_start` is not set by the user in the `connect()` method. This is caused by `clean_start` being optional and using MQTT_CLEAN_START_FIRST_ONLY as a default. At the same time the value for session expiry interval is not set or checked leading to possible `0` length interval. Even though this is  a valid setting it is a contradictory combination as in this case no session is stored on the broker. The MQTT 5 specification defines the following for session expiry:

> If the Session Expiry Interval is absent the value 0 is used. If it is set to 0, or is absent, the Session ends when the Network Connection is closed.

I don't understand the reason behind this implementation as from a user point of view it makes no sense to me. I either want persistent sessions (`clean_start=False`) or I don't (`clean_start=True`). The implementation can lead to unwanted / undefined behavior though.

This does also have implications for the broker as this potentially creates unwanted overhead. Creating persistent sessions can involve disk I/O operations as messages sent with QoS greater 0 need to get queued.

# Reproduction

Connect to a broker using MQTT 5 w/0 setting `clean_start` in the connect method. Check connection parameters for client connection. `clean_start` is set to `True`. Do a server side disconnect and force the client (same instance) to reconnect. Check the client connect and see `clean_start` set to `False`.

# Possible Solutions

From my POV there are these possible solutions ordered by favor:

1. Make `clean_start` non-optional and forcing the user to set a defined value
2. Set `False` or `True` to be the default value
3. Keep current logic but set sessions expiry interval to a value greater than zero

# Environment

* Python version:
* Library version:
* Operating system (including version): 
* MQTT server (name, version, configuration, hosting details): HiveMQ Enterprise 4.35

# Logs


","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/877/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/878,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/878,paho.mqtt.python,2795303171,878,Receiving retained message twice on subscription to multiple topics with one subscribe call,rmeissne,74549432,,,OPEN,2025-01-17T11:53:29Z,2025-01-17T11:53:43Z,"Hello,

I am running paho-mqtt version: 2.1.0 with Python 3.10.12

a = [(""shellyplusuni-a0a3b366fd80/#"", SubscribeOptions(qos=2)), (""v1/#"", SubscribeOptions(qos=2))]
mqtt_client.subscribe(a)

**Subscription with message ID 1: [ReasonCode(Suback, 'Granted QoS 2'), ReasonCode(Suback, 'Granted QoS 2')]**
shellyplusuni-a0a3b366fd80 is online
**Subscription with message ID 2: [ReasonCode(Suback, 'Granted QoS 2'), ReasonCode(Suback, 'Granted QoS 2')]**
shellyplusuni-a0a3b366fd80 is online

Is this expected? I am receiving ""shellyplusuni-a0a3b366fd80 is online"" twice, which is an output of my on_message handler (this is a retained message within this topic). Topics are not overlapping. I would expect two message IDs, 1 and 2. However, both have the same reason code list.

With two subscribe calls (one topic each), I get:

Subscription with message ID 1: [ReasonCode(Suback, 'Granted QoS 2')]
shellyplusuni-a0a3b366fd80 is online
Subscription with message ID 2: [ReasonCode(Suback, 'Granted QoS 2')]

I would expect exactly the same output when calling subscribe with multiple topics.

Thanks,
Robert","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/878/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
issue,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/879,https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/879,paho.mqtt.python,2833744911,879,Option to add custom websocket headers for handshake,konkhra,2560124,,,OPEN,2025-02-05T19:04:36Z,2025-02-05T19:04:51Z,"Maybe you can consider the option of adding custom headers for the handshake. 

Some brokers may require: user agent, host, origin, Sec-WebSocket-Extensions headers. For the moment I hardcoded them direclty into client.py which is not  clean solution but it works for my app.","{""url"": ""https://api.github.com/repos/eclipse-paho/paho.mqtt.python/issues/879/reactions"", ""total_count"": 0, ""+1"": 0, ""-1"": 0, ""laugh"": 0, ""hooray"": 0, ""confused"": 0, ""heart"": 0, ""rocket"": 0, ""eyes"": 0}"
